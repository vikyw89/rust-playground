{
	"title": "pointer - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.pointer.html",
	"markdown": "# pointer - Rust\n\n## Primitive Type [pointer](#)\n\n1.0.0 ·\n\nExpand description\n\nRaw, unsafe pointers, `*const T`, and `*mut T`.\n\n_[See also the `std::ptr` module](ptr/index.html \"mod std::ptr\")._\n\nWorking with raw pointers in Rust is uncommon, typically limited to a few patterns. Raw pointers can be unaligned or [`null`](ptr/fn.null.html \"fn std::ptr::null\"). However, when a raw pointer is dereferenced (using the `*` operator), it must be non-null and aligned.\n\nStoring through a raw pointer using `*ptr = data` calls `drop` on the old value, so [`write`](ptr/fn.write.html \"fn std::ptr::write\") must be used if the type has drop glue and memory is not already initialized - otherwise `drop` would be called on the uninitialized memory.\n\nUse the [`null`](ptr/fn.null.html \"fn std::ptr::null\") and [`null_mut`](ptr/fn.null_mut.html \"fn std::ptr::null_mut\") functions to create null pointers, and the [`is_null`](about:blank/primitive.pointer.html#method.is_null \"method pointer::is_null\") method of the `*const T` and `*mut T` types to check for null. The `*const T` and `*mut T` types also define the [`offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\") method, for pointer math.\n\n## [§](#common-ways-to-create-raw-pointers)Common ways to create raw pointers\n\n### [§](#1-coerce-a-reference-t-or-mutable-reference-mut-t)1\\. Coerce a reference (`&T`) or mutable reference (`&mut T`).\n\n```\nlet my_num: i32 = 10;\nlet my_num_ptr: *const i32 = &my_num;\nlet mut my_speed: i32 = 88;\nlet my_speed_ptr: *mut i32 = &mut my_speed;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_num:+i32+=+10;%0A++++let+my_num_ptr:+*const+i32+=+%26my_num;%0A++++let+mut+my_speed:+i32+=+88;%0A++++let+my_speed_ptr:+*mut+i32+=+%26mut+my_speed;%0A%7D&edition=2021)\n\nTo get a pointer to a boxed value, dereference the box:\n\n```\nlet my_num: Box<i32> = Box::new(10);\nlet my_num_ptr: *const i32 = &*my_num;\nlet mut my_speed: Box<i32> = Box::new(88);\nlet my_speed_ptr: *mut i32 = &mut *my_speed;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_num:+Box%3Ci32%3E+=+Box::new(10);%0A++++let+my_num_ptr:+*const+i32+=+%26*my_num;%0A++++let+mut+my_speed:+Box%3Ci32%3E+=+Box::new(88);%0A++++let+my_speed_ptr:+*mut+i32+=+%26mut+*my_speed;%0A%7D&edition=2021)\n\nThis does not take ownership of the original allocation and requires no resource management later, but you must not use the pointer after its lifetime.\n\n### [§](#2-consume-a-box-boxt)2\\. Consume a box (`Box<T>`).\n\nThe [`into_raw`](about:blank/std/boxed/struct.Box.html#method.into_raw) function consumes a box and returns the raw pointer. It doesn’t destroy `T` or deallocate any memory.\n\n```\nlet my_speed: Box<i32> = Box::new(88);\nlet my_speed: *mut i32 = Box::into_raw(my_speed);\n\n// By taking ownership of the original `Box<T>` though\n// we are obligated to put it together later to be destroyed.\nunsafe {\n    drop(Box::from_raw(my_speed));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_speed:+Box%3Ci32%3E+=+Box::new(88);%0A++++let+my_speed:+*mut+i32+=+Box::into_raw(my_speed);%0A++++%0A++++//+By+taking+ownership+of+the+original+%60Box%3CT%3E%60+though%0A++++//+we+are+obligated+to+put+it+together+later+to+be+destroyed.%0A++++unsafe+%7B%0A++++++++drop(Box::from_raw(my_speed));%0A++++%7D%0A%7D&edition=2021)\n\nNote that here the call to [`drop`](mem/fn.drop.html \"fn std::mem::drop\") is for clarity - it indicates that we are done with the given value and it should be destroyed.\n\n### [§](#3-create-it-using-ptraddr_of)3\\. Create it using `ptr::addr_of!`\n\nInstead of coercing a reference to a raw pointer, you can use the macros [`ptr::addr_of!`](ptr/macro.addr_of.html \"macro std::ptr::addr_of\") (for `*const T`) and [`ptr::addr_of_mut!`](ptr/macro.addr_of_mut.html \"macro std::ptr::addr_of_mut\") (for `*mut T`). These macros allow you to create raw pointers to fields to which you cannot create a reference (without causing undefined behaviour), such as an unaligned field. This might be necessary if packed structs or uninitialized memory is involved.\n\n```\n#[derive(Debug, Default, Copy, Clone)]\n#[repr(C, packed)]\nstruct S {\n    aligned: u8,\n    unaligned: u32,\n}\nlet s = S::default();\nlet p = std::ptr::addr_of!(s.unaligned); // not allowed with coercion\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+Default,+Copy,+Clone)%5D%0A++++%23%5Brepr(C,+packed)%5D%0A++++struct+S+%7B%0A++++++++aligned:+u8,%0A++++++++unaligned:+u32,%0A++++%7D%0A++++let+s+=+S::default();%0A++++let+p+=+std::ptr::addr_of!(s.unaligned);+//+not+allowed+with+coercion%0A%7D&edition=2021)\n\n### [§](#4-get-it-from-c)4\\. Get it from C.\n\n```\n#[allow(unused_extern_crates)]\nextern crate libc;\n\nuse std::mem;\n\nunsafe {\n    let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>()) as *mut i32;\n    if my_num.is_null() {\n        panic!(\"failed to allocate memory\");\n    }\n    libc::free(my_num as *mut core::ffi::c_void);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++mod+libc+%7B%0A++++pub+unsafe+fn+malloc(_size:+usize)+-%3E+*mut+core::ffi::c_void+%7B+core::ptr::NonNull::dangling().as_ptr()+%7D%0A++++pub+unsafe+fn+free(_ptr:+*mut+core::ffi::c_void)+%7B%7D%0A++++%7D%0A++++%23%5Bcfg(any())%5D%0A++++%23%5Ballow(unused_extern_crates)%5D%0A++++extern+crate+libc;%0A++++%0A++++use+std::mem;%0A++++%0A++++unsafe+%7B%0A++++++++let+my_num:+*mut+i32+=+libc::malloc(mem::size_of::%3Ci32%3E())+as+*mut+i32;%0A++++++++if+my_num.is_null()+%7B%0A++++++++++++panic!(%22failed+to+allocate+memory%22);%0A++++++++%7D%0A++++++++libc::free(my_num+as+*mut+core::ffi::c_void);%0A++++%7D%0A%7D&edition=2021)\n\nUsually you wouldn’t literally use `malloc` and `free` from Rust, but C APIs hand out a lot of pointers generally, so are a common source of raw pointers in Rust.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1831)[§](#impl-*const+%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1848)\n\n🔬This is a nightly-only experimental API. (`array_ptr_get` [#119834](https://github.com/rust-lang/rust/issues/119834))\n\nReturns a raw pointer to the array’s buffer.\n\nThis is equivalent to casting `self` to `*const T`, but more type-safe.\n\n##### [§](#examples)Examples\n\n```\n#![feature(array_ptr_get)]\nuse std::ptr;\n\nlet arr: *const [i8; 3] = ptr::null();\nassert_eq!(arr.as_ptr(), ptr::null());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+arr:+*const+%5Bi8;+3%5D+=+ptr::null();%0A++++assert_eq!(arr.as_ptr(),+ptr::null());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1866)\n\n🔬This is a nightly-only experimental API. (`array_ptr_get` [#119834](https://github.com/rust-lang/rust/issues/119834))\n\nReturns a raw pointer to a slice containing the entire array.\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(array_ptr_get)]\n\nlet arr: *const [i32; 3] = &[1, 2, 4] as *const [i32; 3];\nlet slice: *const [i32] = arr.as_slice();\nassert_eq!(slice.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+arr:+*const+%5Bi32;+3%5D+=+%26%5B1,+2,+4%5D+as+*const+%5Bi32;+3%5D;%0A++++let+slice:+*const+%5Bi32%5D+=+arr.as_slice();%0A++++assert_eq!(slice.len(),+3);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1691)[§](#impl-*const+%5BT%5D)\n\n1.79.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1711)\n\nReturns the length of a raw slice.\n\nThe returned value is the number of **elements**, not the number of bytes.\n\nThis function is safe, even when the raw slice cannot be cast to a slice reference because the pointer is null or unaligned.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::ptr;\n\nlet slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\nassert_eq!(slice.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&edition=2021)\n\n1.79.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1728)\n\nReturns `true` if the raw slice has a length of 0.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::ptr;\n\nlet slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\nassert!(!slice.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1748)\n\n🔬This is a nightly-only experimental API. (`slice_ptr_get` [#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to the slice’s buffer.\n\nThis is equivalent to casting `self` to `*const T`, but more type-safe.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(slice_ptr_get)]\nuse std::ptr;\n\nlet slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);\nassert_eq!(slice.as_ptr(), ptr::null());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert_eq!(slice.as_ptr(),+ptr::null());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1773-1775)\n\n🔬This is a nightly-only experimental API. (`slice_ptr_get` [#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to an element or subslice, without doing bounds checking.\n\nCalling this method with an out-of-bounds index or when `self` is not dereferenceable is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(slice_ptr_get)]\n\nlet x = &[1, 2, 4] as *const [i32];\n\nunsafe {\n    assert_eq!(x.get_unchecked(1), x.as_ptr().add(1));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D+as+*const+%5Bi32%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked(1),+x.as_ptr().add(1));%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1821)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a shared slice to the value wrapped in `Some`. In contrast to [`as_ref`](#method.as_ref), this does not require that the value has to be initialized.\n\n##### [§](#safety)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads for `ptr.len() * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\")! Slices can never span across multiple allocated objects.\n        \n    -   The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/ptr/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n        \n-   The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\nSee also [`slice::from_raw_parts`](slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#7)[§](#impl-*const+T)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/74939 \"Tracking issue for const_ptr_is_null\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#35)\n\nReturns `true` if the pointer is null.\n\nNote that unsized types have many possible null pointers, as only the raw data pointer is considered, not their length, vtable, etc. Therefore, two pointers that are null may still not compare equal to each other.\n\n###### [§](#behavior-during-const-evaluation)Behavior during const evaluation\n\nWhen this function is used during const evaluation, it may return `false` for pointers that turn out to be null at runtime. Specifically, when a pointer to some memory is offset beyond its bounds in such a way that the resulting pointer is null, the function will still return `false`. There is no way for CTFE to know the absolute position of that memory, so we cannot tell if the pointer is null or not.\n\n##### [§](#examples-6)Examples\n\n```\nlet s: &str = \"Follow the rabbit\";\nlet ptr: *const u8 = s.as_ptr();\nassert!(!ptr.is_null());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22Follow+the+rabbit%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++assert!(!ptr.is_null());%0A%7D&edition=2021)\n\n1.38.0 (const: 1.38.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#60)\n\nCasts to a pointer of another type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#96-98)\n\n🔬This is a nightly-only experimental API. (`set_ptr_value` [#75091](https://github.com/rust-lang/rust/issues/75091))\n\nUse the pointer value in a new pointer of another type.\n\nIn case `meta` is a (fat) pointer to an unsized type, this operation will ignore the pointer part, whereas for (thin) pointers to sized types, this has the same effect as a simple cast.\n\nThe resulting pointer will have provenance of `self`, i.e., for a fat pointer, this operation is semantically the same as creating a new fat pointer with the data pointer value of `self` but the metadata of `meta`.\n\n##### [§](#examples-7)Examples\n\nThis function is primarily useful for allowing byte-wise pointer arithmetic on potentially fat pointers:\n\n```\n#![feature(set_ptr_value)]\nlet arr: [i32; 3] = [1, 2, 3];\nlet mut ptr = arr.as_ptr() as *const dyn Debug;\nlet thin = ptr as *const u8;\nunsafe {\n    ptr = thin.add(8).with_metadata_of(ptr);\n    println!(\"{:?}\", &*ptr); // will print \"3\"\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(set_ptr_value)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Debug;%0A++++let+arr:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+mut+ptr+=+arr.as_ptr()+as+*const+dyn+Debug;%0A++++let+thin+=+ptr+as+*const+u8;%0A++++unsafe+%7B%0A++++++++ptr+=+thin.add(8).with_metadata_of(ptr);%0A++++assert_eq!(*(ptr+as+*const+i32),+3);%0A++++++++println!(%22%7B:?%7D%22,+%26*ptr);+//+will+print+%223%22%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.65.0 (const: 1.65.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#111)\n\nChanges constness without changing the type.\n\nThis is a bit safer than `as` because it wouldn’t silently change the type if the code is refactored.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#143-145)\n\n👎Deprecated since 1.67.0: replaced by the `expose_provenance` method, or update your code to follow the strict provenance rules using its APIs\n\n🔬This is a nightly-only experimental API. (`ptr_to_from_bits` [#91126](https://github.com/rust-lang/rust/issues/91126))\n\nCasts a pointer to its raw bits.\n\nThis is equivalent to `as usize`, but is more specific to enhance readability. The inverse method is [`from_bits`](#method.from_bits).\n\nIn particular, `*p as usize` and `p as usize` will both compile for pointers to numeric types but do very different things, so using this helps emphasize that reading the bits was intentional.\n\n##### [§](#examples-8)Examples\n\n```\n#![feature(ptr_to_from_bits)]\nlet array = [13, 42];\nlet p0: *const i32 = &array[0];\nassert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\nlet p1: *const i32 = &array[1];\nassert_eq!(p1.to_bits() - p0.to_bits(), 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++let+array+=+%5B13,+42%5D;%0A++++let+p0:+*const+i32+=+%26array%5B0%5D;%0A++++assert_eq!(%3C*const+_%3E::from_bits(p0.to_bits()),+p0);%0A++++let+p1:+*const+i32+=+%26array%5B1%5D;%0A++++assert_eq!(p1.to_bits()+-+p0.to_bits(),+4);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#173-175)\n\n👎Deprecated since 1.67.0: replaced by the `ptr::with_exposed_provenance` function, or update your code to follow the strict provenance rules using its APIs\n\n🔬This is a nightly-only experimental API. (`ptr_to_from_bits` [#91126](https://github.com/rust-lang/rust/issues/91126))\n\nCreates a pointer from its raw bits.\n\nThis is equivalent to `as *const T`, but is more specific to enhance readability. The inverse method is [`to_bits`](#method.to_bits).\n\n##### [§](#examples-9)Examples\n\n```\n#![feature(ptr_to_from_bits)]\nuse std::ptr::NonNull;\nlet dangling: *const u8 = NonNull::dangling().as_ptr();\nassert_eq!(<*const u8>::from_bits(1), dangling);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++use+std::ptr::NonNull;%0A++++let+dangling:+*const+u8+=+NonNull::dangling().as_ptr();%0A++++assert_eq!(%3C*const+u8%3E::from_bits(1),+dangling);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#206)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nGets the “address” portion of the pointer.\n\nThis is similar to `self as usize`, which semantically discards _provenance_ and _address-space_ information. However, unlike `self as usize`, casting the returned address back to a pointer yields a [pointer without provenance](ptr/fn.without_provenance.html \"fn std::ptr::without_provenance\"), which is undefined behavior to dereference. To properly restore the lost information and obtain a dereferenceable pointer, use [`with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\") or [`map_addr`](about:blank/primitive.pointer.html#method.map_addr \"method pointer::map_addr\").\n\nIf using those APIs is not possible because there is no way to preserve a pointer with the required provenance, then Strict Provenance might not be for you. Use pointer-integer casts or [`expose_provenance`](about:blank/primitive.pointer.html#method.expose_provenance \"method pointer::expose_provenance\") and [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") instead. However, note that this makes your code less portable and less amenable to tools that check for compliance with the Rust memory model.\n\nOn most platforms this will produce a value with the same bytes as the original pointer, because all the bytes are dedicated to describing the address. Platforms which need to store additional information in the pointer may perform a change of representation to produce a value containing only the address portion of the pointer. What that means is up to the platform to define.\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, and as such might change in the future (including possibly weakening this so it becomes wholly equivalent to `self as usize`). See the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#241)\n\n🔬This is a nightly-only experimental API. (`exposed_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nExposes the “provenance” part of the pointer for future use in [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") and returns the “address” portion.\n\nThis is equivalent to `self as usize`, which semantically discards _provenance_ and _address-space_ information. Furthermore, this (like the `as` cast) has the implicit side-effect of marking the provenance as ‘exposed’, so on platforms that support it you can later call [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") to reconstitute the original pointer including its provenance. (Reconstructing address space information, if required, is your responsibility.)\n\nUsing this method means that code is _not_ following [Strict Provenance](about:blank/ptr/index.html#strict-provenance \"mod std::ptr\") rules. Supporting [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") complicates specification and reasoning and may not be supported by tools that help you to stay conformant with the Rust memory model, so it is recommended to use [`addr`](about:blank/primitive.pointer.html#method.addr \"method pointer::addr\") wherever possible.\n\nOn most platforms this will produce a value with the same bytes as the original pointer, because all the bytes are dedicated to describing the address. Platforms which need to store additional information in the pointer may not support this operation, since the ‘expose’ side-effect which is required for [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") to work is typically not available.\n\nIt is unclear whether this method can be given a satisfying unambiguous specification. This API and its claimed semantics are part of [Exposed Provenance](about:blank/ptr/index.html#exposed-provenance \"mod std::ptr\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#261)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer with the given address.\n\nThis performs the same operation as an `addr as ptr` cast, but copies the _address-space_ and _provenance_ of `self` to the new pointer. This allows us to dynamically preserve and propagate this important information in a way that is otherwise impossible with a unary cast.\n\nThis is equivalent to using [`wrapping_offset`](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") to offset `self` to the given address, and therefore has all the same capabilities and restrictions.\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#284)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer by mapping `self`’s address to a new one.\n\nThis is a convenience for [`with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\"), see that method for details.\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#294)\n\n🔬This is a nightly-only experimental API. (`ptr_metadata` [#81513](https://github.com/rust-lang/rust/issues/81513))\n\nDecompose a (possibly wide) pointer into its data pointer and metadata components.\n\nThe pointer can be later reconstructed with [`from_raw_parts`](ptr/fn.from_raw_parts.html \"fn std::ptr::from_raw_parts\").\n\n1.9.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91822 \"Tracking issue for const_ptr_as_ref\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#355)\n\nReturns `None` if the pointer is null, or else returns a shared reference to the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_ref`](#method.as_uninit_ref) must be used instead.\n\n##### [§](#safety-1)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-10)Examples\n\n```\nlet ptr: *const u8 = &10u8 as *const u8;\n\nunsafe {\n    if let Some(val_back) = ptr.as_ref() {\n        println!(\"We got back the value: {val_back}!\");\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#null-unchecked-version)Null-unchecked version\n\nIf you are sure the pointer can never be null and are looking for some kind of `as_ref_unchecked` that returns the `&T` instead of `Option<&T>`, know that you can dereference the pointer directly.\n\n```\nlet ptr: *const u8 = &10u8 as *const u8;\n\nunsafe {\n    let val_back = &*ptr;\n    println!(\"We got back the value: {val_back}!\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++let+val_back+=+%26*ptr;%0A++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#404)\n\n🔬This is a nightly-only experimental API. (`ptr_as_ref_unchecked` [#122034](https://github.com/rust-lang/rust/issues/122034))\n\nReturns a shared reference to the value behind the pointer. If the pointer may be null or the value may be uninitialized, [`as_uninit_ref`](#method.as_uninit_ref) must be used instead. If the pointer may be null, but the value is known to have been initialized, [`as_ref`](#method.as_ref) must be used instead.\n\n##### [§](#safety-2)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-11)Examples\n\n```\n#![feature(ptr_as_ref_unchecked)]\nlet ptr: *const u8 = &10u8 as *const u8;\n\nunsafe {\n    println!(\"We got back the value: {}!\", ptr.as_ref_unchecked());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+ptr.as_ref_unchecked());%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#449-451)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a shared reference to the value wrapped in `Some`. In contrast to [`as_ref`](#method.as_ref), this does not require that the value has to be initialized.\n\n##### [§](#safety-3)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\n##### [§](#examples-12)Examples\n\n```\n#![feature(ptr_as_uninit)]\n\nlet ptr: *const u8 = &10u8 as *const u8;\n\nunsafe {\n    if let Some(val_back) = ptr.as_uninit_ref() {\n        println!(\"We got back the value: {}!\", val_back.assume_init());\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_uninit_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+val_back.assume_init());%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.0.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#513-515)\n\nCalculates the offset from a pointer.\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-4)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_offset`](#method.wrapping_offset) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-13)Examples\n\n```\nlet s: &str = \"123\";\nlet ptr: *const u8 = s.as_ptr();\n\nunsafe {\n    println!(\"{}\", *ptr.offset(1) as char);\n    println!(\"{}\", *ptr.offset(2) as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+*ptr.offset(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*ptr.offset(2)+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#537)\n\nCalculates the offset from a pointer in bytes.\n\n`count` is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [offset](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.16.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#594-596)\n\nCalculates the offset from a pointer using wrapping arithmetic.\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-5)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`offset`](#method.offset), this method basically delays the requirement of staying within the same allocated object: [`offset`](#method.offset) is immediate Undefined Behavior when crossing object boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`](#method.offset) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-14)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements\nlet data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *const u8 = data.as_ptr();\nlet step = 2;\nlet end_rounded_up = ptr.wrapping_offset(6);\n\n// This loop prints \"1, 3, 5, \"\nwhile ptr != end_rounded_up {\n    unsafe {\n        print!(\"{}, \", *ptr);\n    }\n    ptr = ptr.wrapping_offset(step);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_offset(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_offset(step);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#617)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic.\n\n`count` is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_offset](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#655)\n\n🔬This is a nightly-only experimental API. (`ptr_mask` [#98290](https://github.com/rust-lang/rust/issues/98290))\n\nMasks out bits of the pointer according to a mask.\n\nThis is convenience for `ptr.map_addr(|a| a & mask)`.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n###### [§](#examples-15)Examples\n\n```\n#![feature(ptr_mask, strict_provenance)]\nlet v = 17_u32;\nlet ptr: *const u32 = &v;\n\n// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\nlet tag_mask = 0b11;\nlet ptr_mask = !tag_mask;\n\n// We can store something in these lower bits\nlet tagged_ptr = ptr.map_addr(|a| a | 0b10);\n\n// Get the \"tag\" back\nlet tag = tagged_ptr.addr() & tag_mask;\nassert_eq!(tag, 0b10);\n\n// Note that `tagged_ptr` is unaligned, it's UB to read from it.\n// To get original pointer `mask` can be used:\nlet masked_ptr = tagged_ptr.mask(ptr_mask);\nassert_eq!(unsafe { *masked_ptr }, 17);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_mask,+strict_provenance)%5D%0Afn+main()+%7B%0A++++let+v+=+17_u32;%0A++++let+ptr:+*const+u32+=+%26v;%0A++++%0A++++//+%60u32%60+is+4+bytes+aligned,%0A++++//+which+means+that+lower+2+bits+are+always+0.%0A++++let+tag_mask+=+0b11;%0A++++let+ptr_mask+=+!tag_mask;%0A++++%0A++++//+We+can+store+something+in+these+lower+bits%0A++++let+tagged_ptr+=+ptr.map_addr(%7Ca%7C+a+%7C+0b10);%0A++++%0A++++//+Get+the+%22tag%22+back%0A++++let+tag+=+tagged_ptr.addr()+%26+tag_mask;%0A++++assert_eq!(tag,+0b10);%0A++++%0A++++//+Note+that+%60tagged_ptr%60+is+unaligned,+it%27s+UB+to+read+from+it.%0A++++//+To+get+original+pointer+%60mask%60+can+be+used:%0A++++let+masked_ptr+=+tagged_ptr.mask(ptr_mask);%0A++++assert_eq!(unsafe+%7B+*masked_ptr+%7D,+17);%0A%7D&version=nightly&edition=2021)\n\n1.47.0 (const: 1.65.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#761-763)\n\nCalculates the distance between two pointers. The returned value is in units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n\nThis is equivalent to `(self as isize - origin as isize) / (mem::size_of::<T>() as isize)`, except that it has a lot more opportunities for UB, in exchange for the compiler better understanding what you are doing.\n\nThe primary motivation of this method is for computing the `len` of an array/slice of `T` that you are currently representing as a “start” and “end” pointer (and “end” is “one past the end” of the array). In that case, `end.offset_from(start)` gets you the length of the array.\n\nAll of the following safety requirements are trivially satisfied for this usecase.\n\n##### [§](#safety-6)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   `self` and `origin` must either\n    \n    -   both be _derived from_ a pointer to the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"), and the memory range between the two pointers must be either empty or in bounds of that object. (See below for an example.)\n    -   or both be derived from an integer literal/constant, and point to the same address.\n-   The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.\n    \n-   The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n    \n-   The distance being in bounds cannot rely on “wrapping around” the address space.\n    \n\nRust types are never larger than `isize::MAX` and Rust allocations never wrap around the address space, so two pointers within some value of any Rust type `T` will always satisfy the last two conditions. The standard library also generally ensures that allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())` always satisfies the last two conditions.\n\nMost platforms fundamentally can’t even construct such a large allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function. (Note that [`offset`](#method.offset) and [`add`](#method.add) also have a similar limitation and hence cannot be used on such large allocations either.)\n\nThe requirement for pointers to be derived from the same allocated object is primarily needed for `const`\\-compatibility: the distance between pointers into _different_ allocated objects is not known at compile-time. However, the requirement also exists at runtime and may be exploited by optimizations. If you wish to compute the difference between pointers that are not guaranteed to be from the same allocation, use `(self as isize - origin as isize) / mem::size_of::<T>()`.\n\n##### [§](#panics)Panics\n\nThis function panics if `T` is a Zero-Sized Type (“ZST”).\n\n##### [§](#examples-16)Examples\n\nBasic usage:\n\n```\nlet a = [0; 5];\nlet ptr1: *const i32 = &a[1];\nlet ptr2: *const i32 = &a[3];\nunsafe {\n    assert_eq!(ptr2.offset_from(ptr1), 2);\n    assert_eq!(ptr1.offset_from(ptr2), -2);\n    assert_eq!(ptr1.offset(2), ptr2);\n    assert_eq!(ptr2.offset(-2), ptr1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*const+i32+=+%26a%5B1%5D;%0A++++let+ptr2:+*const+i32+=+%26a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&edition=2021)\n\n_Incorrect_ usage:\n\n```\nlet ptr1 = Box::into_raw(Box::new(0u8)) as *const u8;\nlet ptr2 = Box::into_raw(Box::new(1u8)) as *const u8;\nlet diff = (ptr2 as isize).wrapping_sub(ptr1 as isize);\n// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\nlet ptr2_other = (ptr1 as *const u8).wrapping_offset(diff);\nassert_eq!(ptr2 as usize, ptr2_other as usize);\n// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\nunsafe {\n    let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr1+=+Box::into_raw(Box::new(0u8))+as+*const+u8;%0A++++let+ptr2+=+Box::into_raw(Box::new(1u8))+as+*const+u8;%0A++++let+diff+=+(ptr2+as+isize).wrapping_sub(ptr1+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+(ptr1+as+*const+u8).wrapping_offset(diff);%0A++++assert_eq!(ptr2+as+usize,+ptr2_other+as+usize);%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++unsafe+%7B%0A++++++++let+zero+=+ptr2_other.offset_from(ptr2);+//+Undefined+Behavior%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#785)\n\nCalculates the distance between two pointers. The returned value is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [`offset_from`](about:blank/primitive.pointer.html#method.offset_from \"method pointer::offset_from\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation considers only the data pointers, ignoring the metadata.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#854-856)\n\n🔬This is a nightly-only experimental API. (`ptr_sub_ptr` [#95892](https://github.com/rust-lang/rust/issues/95892))\n\nCalculates the distance between two pointers, _where it’s known that `self` is equal to or greater than `origin`_. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n\nThis computes the same value that [`offset_from`](#method.offset_from) would compute, but with the added precondition that the offset is guaranteed to be non-negative. This method is equivalent to `usize::try_from(self.offset_from(origin)).unwrap_unchecked()`, but it provides slightly more information to the optimizer, which can sometimes allow it to optimize slightly better with some backends.\n\nThis method can be though of as recovering the `count` that was passed to [`add`](#method.add) (or, with the parameters in the other order, to [`sub`](#method.sub)). The following are all equivalent, assuming that their safety preconditions are met:\n\n```\nptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+*const+i32,+origin:+*const+i32,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [§](#safety-7)Safety\n\n-   The distance between the pointers must be non-negative (`self >= origin`)\n    \n-   _All_ the safety conditions of [`offset_from`](#method.offset_from) apply to this method as well; see it for the full details.\n    \n\nImportantly, despite the return type of this method being able to represent a larger offset, it’s still _not permitted_ to pass pointers which differ by more than `isize::MAX` _bytes_. As such, the result of this method will always be less than or equal to `isize::MAX as usize`.\n\n##### [§](#panics-1)Panics\n\nThis function panics if `T` is a Zero-Sized Type (“ZST”).\n\n##### [§](#examples-17)Examples\n\n```\n#![feature(ptr_sub_ptr)]\n\nlet a = [0; 5];\nlet ptr1: *const i32 = &a[1];\nlet ptr2: *const i32 = &a[3];\nunsafe {\n    assert_eq!(ptr2.sub_ptr(ptr1), 2);\n    assert_eq!(ptr1.add(2), ptr2);\n    assert_eq!(ptr2.sub(2), ptr1);\n    assert_eq!(ptr2.sub_ptr(ptr2), 0);\n}\n\n// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0A%0Afn+main()+%7B%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*const+i32+=+%26a%5B1%5D;%0A++++let+ptr2:+*const+i32+=+%26a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.sub_ptr(ptr2)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#905-907)\n\n🔬This is a nightly-only experimental API. (`const_raw_ptr_comparison` [#53020](https://github.com/rust-lang/rust/issues/53020))\n\nReturns whether two pointers are guaranteed to be equal.\n\nAt runtime this function behaves like `Some(self == other)`. However, in some contexts (e.g., compile-time evaluation), it is not always possible to determine equality of two pointers, so this function may spuriously return `None` for pointers that later actually turn out to have its equality known. But when it returns `Some`, the pointers’ equality is guaranteed to be known.\n\nThe return value may change from `Some` to `None` and vice versa depending on the compiler version and unsafe code must not rely on the result of this function for soundness. It is suggested to only use this function for performance optimizations where spurious `None` return values by this function do not affect the outcome, but just the performance. The consequences of using this method to make runtime and compile-time code behave differently have not been explored. This method should not be used to introduce such differences, and it should also not be stabilized before we have a better understanding of this issue.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#935-937)\n\n🔬This is a nightly-only experimental API. (`const_raw_ptr_comparison` [#53020](https://github.com/rust-lang/rust/issues/53020))\n\nReturns whether two pointers are guaranteed to be inequal.\n\nAt runtime this function behaves like `Some(self != other)`. However, in some contexts (e.g., compile-time evaluation), it is not always possible to determine inequality of two pointers, so this function may spuriously return `None` for pointers that later actually turn out to have its inequality known. But when it returns `Some`, the pointers’ inequality is guaranteed to be known.\n\nThe return value may change from `Some` to `None` and vice versa depending on the compiler version and unsafe code must not rely on the result of this function for soundness. It is suggested to only use this function for performance optimizations where spurious `None` return values by this function do not affect the outcome, but just the performance. The consequences of using this method to make runtime and compile-time code behave differently have not been explored. This method should not be used to introduce such differences, and it should also not be stabilized before we have a better understanding of this issue.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1000-1002)\n\nCalculates the offset from a pointer (convenience for `.offset(count as isize)`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-8)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum must fit in a `usize`.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_add`](#method.wrapping_add) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-18)Examples\n\n```\nlet s: &str = \"123\";\nlet ptr: *const u8 = s.as_ptr();\n\nunsafe {\n    println!(\"{}\", *ptr.add(1) as char);\n    println!(\"{}\", *ptr.add(2) as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+*ptr.add(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*ptr.add(2)+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1024)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [add](about:blank/primitive.pointer.html#method.add \"method pointer::add\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1086-1088)\n\nCalculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-9)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset cannot exceed `isize::MAX` **bytes**.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len()).sub(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_sub`](#method.wrapping_sub) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-19)Examples\n\n```\nlet s: &str = \"123\";\n\nunsafe {\n    let end: *const u8 = s.as_ptr().add(3);\n    println!(\"{}\", *end.sub(1) as char);\n    println!(\"{}\", *end.sub(2) as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+*const+u8+=+s.as_ptr().add(3);%0A++++++++println!(%22%7B%7D%22,+*end.sub(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*end.sub(2)+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1118)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset((count as isize).wrapping_neg())`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [sub](about:blank/primitive.pointer.html#method.sub \"method pointer::sub\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1176-1178)\n\nCalculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-10)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`add`](#method.add), this method basically delays the requirement of staying within the same allocated object: [`add`](#method.add) is immediate Undefined Behavior when crossing object boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`](#method.add) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-20)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements\nlet data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *const u8 = data.as_ptr();\nlet step = 2;\nlet end_rounded_up = ptr.wrapping_add(6);\n\n// This loop prints \"1, 3, 5, \"\nwhile ptr != end_rounded_up {\n    unsafe {\n        print!(\"{}, \", *ptr);\n    }\n    ptr = ptr.wrapping_add(step);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_add(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_add(step);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1198)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic. (convenience for `.wrapping_byte_offset(count as isize)`)\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_add](about:blank/primitive.pointer.html#method.wrapping_add \"method pointer::wrapping_add\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1255-1257)\n\nCalculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-11)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`sub`](#method.sub), this method basically delays the requirement of staying within the same allocated object: [`sub`](#method.sub) is immediate Undefined Behavior when crossing object boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`](#method.sub) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-21)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements (backwards)\nlet data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *const u8 = data.as_ptr();\nlet start_rounded_down = ptr.wrapping_sub(2);\nptr = ptr.wrapping_add(4);\nlet step = 2;\n// This loop prints \"5, 3, 1, \"\nwhile ptr != start_rounded_down {\n    unsafe {\n        print!(\"{}, \", *ptr);\n    }\n    ptr = ptr.wrapping_sub(step);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements+(backwards)%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+start_rounded_down+=+ptr.wrapping_sub(2);%0A++++ptr+=+ptr.wrapping_add(4);%0A++++let+step+=+2;%0A++++//+This+loop+prints+%225,+3,+1,+%22%0A++++while+ptr+!=+start_rounded_down+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_sub(step);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1277)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_sub](about:blank/primitive.pointer.html#method.wrapping_sub \"method pointer::wrapping_sub\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1291-1293)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nSee [`ptr::read`](ptr/fn.read.html \"fn std::ptr::read\") for safety concerns and examples.\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1312-1314)\n\nPerforms a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.\n\nSee [`ptr::read_volatile`](ptr/fn.read_volatile.html \"fn std::ptr::read_volatile\") for safety concerns and examples.\n\n1.26.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1332-1334)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nUnlike `read`, the pointer may be unaligned.\n\nSee [`ptr::read_unaligned`](ptr/fn.read_unaligned.html \"fn std::ptr::read_unaligned\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1352-1354)\n\nCopies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.\n\nNOTE: this has the _same_ argument order as [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\").\n\nSee [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1372-1374)\n\n1.36.0 (const: [unstable](https://github.com/rust-lang/rust/issues/90962 \"Tracking issue for const_align_offset\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1431-1433)\n\nComputes the offset that needs to be applied to the pointer in order to make it aligned to `align`.\n\nIf it is not possible to align the pointer, the implementation returns `usize::MAX`.\n\nThe offset is expressed in number of `T` elements, and not bytes. The value returned can be used with the `wrapping_add` method.\n\nThere are no guarantees whatsoever that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.\n\nWhen this is called during compile-time evaluation (which is unstable), the implementation may return `usize::MAX` in cases where that can never happen at runtime. This is because the actual alignment of pointers is not known yet during compile-time, so an offset with guaranteed alignment can sometimes not be computed. For example, a buffer declared as `[u8; N]` might be allocated at an odd or an even address, but at compile-time this is not yet known, so the execution has to be correct for either choice. It is therefore impossible to find an offset that is guaranteed to be 2-aligned. (This behavior is subject to change, as usual for unstable APIs.)\n\n##### [§](#panics-2)Panics\n\nThe function panics if `align` is not a power-of-two.\n\n##### [§](#examples-22)Examples\n\nAccessing adjacent `u8` as `u16`\n\n```\nuse std::mem::align_of;\n\nlet x = [5_u8, 6, 7, 8, 9];\nlet ptr = x.as_ptr();\nlet offset = ptr.align_offset(align_of::<u16>());\n\nif offset < x.len() - 1 {\n    let u16_ptr = ptr.add(offset).cast::<u16>();\n    assert!(*u16_ptr == u16::from_ne_bytes([5, 6]) || *u16_ptr == u16::from_ne_bytes([6, 7]));\n} else {\n    // while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++%0A++++unsafe+%7B%0A++++let+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+x.as_ptr();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++assert!(*u16_ptr+==+u16::from_ne_bytes(%5B5,+6%5D)+%7C%7C+*u16_ptr+==+u16::from_ne_bytes(%5B6,+7%5D));%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.79.0 (const: [unstable](https://github.com/rust-lang/rust/issues/104203 \"Tracking issue for const_pointer_is_aligned\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1553-1555)\n\nReturns whether the pointer is properly aligned for `T`.\n\n##### [§](#examples-23)Examples\n\n```\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet data = AlignedI32(42);\nlet ptr = &data as *const AlignedI32;\n\nassert!(ptr.is_aligned());\nassert!(!ptr.wrapping_byte_add(1).is_aligned());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!ptr.wrapping_byte_add(1).is_aligned());%0A%7D&edition=2021)\n\n##### [§](#at-compiletime)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer is never aligned if cast to a type with a stricter alignment than the reference’s underlying allocation.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let data = AlignedI32(42);\n    let ptr = &data as *const AlignedI32;\n    assert!(ptr.is_aligned());\n\n    // At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n    assert!(!ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn’t aligned.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\nconst COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\nconst _: () = assert!(!COMPTIME_PTR.cast::<AlignedI64>().is_aligned());\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).cast::<AlignedI64>().is_aligned());\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.cast::<AlignedI64>().is_aligned(),\n    runtime_ptr.wrapping_add(1).cast::<AlignedI64>().is_aligned(),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let ptr = 40 as *const AlignedI32;\n    assert!(ptr.is_aligned());\n\n    // For pointers with a known address, runtime and compiletime behavior are identical.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n    assert!(ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1668)\n\n🔬This is a nightly-only experimental API. (`pointer_is_aligned_to` [#96284](https://github.com/rust-lang/rust/issues/96284))\n\nReturns whether the pointer is aligned to `align`.\n\nFor non-`Sized` pointees this operation considers only the data pointer, ignoring the metadata.\n\n##### [§](#panics-3)Panics\n\nThe function panics if `align` is not a power-of-two (this includes 0).\n\n##### [§](#examples-24)Examples\n\n```\n#![feature(pointer_is_aligned_to)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet data = AlignedI32(42);\nlet ptr = &data as *const AlignedI32;\n\nassert!(ptr.is_aligned_to(1));\nassert!(ptr.is_aligned_to(2));\nassert!(ptr.is_aligned_to(4));\n\nassert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\nassert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n\nassert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&version=nightly&edition=2021)\n\n##### [§](#at-compiletime-1)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer cannot be stricter aligned than the reference’s underlying allocation.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nconst _: () = {\n    let data = AlignedI32(42);\n    let ptr = &data as *const AlignedI32;\n\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n\n    // At compiletime, we know for sure that the pointer isn't aligned to 8.\n    assert!(!ptr.is_aligned_to(8));\n    assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn%27t+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn’t aligned.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\nconst COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\nconst _: () = assert!(!COMPTIME_PTR.is_aligned_to(8));\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.is_aligned_to(8),\n    runtime_ptr.wrapping_add(1).is_aligned_to(8),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\nconst _: () = {\n    let ptr = 40 as *const u8;\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n    assert!(ptr.is_aligned_to(8));\n    assert!(!ptr.is_aligned_to(16));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#7)[§](#impl-*mut+T)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/74939 \"Tracking issue for const_ptr_is_null\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#35)\n\nReturns `true` if the pointer is null.\n\nNote that unsized types have many possible null pointers, as only the raw data pointer is considered, not their length, vtable, etc. Therefore, two pointers that are null may still not compare equal to each other.\n\n###### [§](#behavior-during-const-evaluation-1)Behavior during const evaluation\n\nWhen this function is used during const evaluation, it may return `false` for pointers that turn out to be null at runtime. Specifically, when a pointer to some memory is offset beyond its bounds in such a way that the resulting pointer is null, the function will still return `false`. There is no way for CTFE to know the absolute position of that memory, so we cannot tell if the pointer is null or not.\n\n##### [§](#examples-25)Examples\n\n```\nlet mut s = [1, 2, 3];\nlet ptr: *mut u32 = s.as_mut_ptr();\nassert!(!ptr.is_null());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++assert!(!ptr.is_null());%0A%7D&edition=2021)\n\n1.38.0 (const: 1.38.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#59)\n\nCasts to a pointer of another type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#95-97)\n\n🔬This is a nightly-only experimental API. (`set_ptr_value` [#75091](https://github.com/rust-lang/rust/issues/75091))\n\nUse the pointer value in a new pointer of another type.\n\nIn case `meta` is a (fat) pointer to an unsized type, this operation will ignore the pointer part, whereas for (thin) pointers to sized types, this has the same effect as a simple cast.\n\nThe resulting pointer will have provenance of `self`, i.e., for a fat pointer, this operation is semantically the same as creating a new fat pointer with the data pointer value of `self` but the metadata of `meta`.\n\n##### [§](#examples-26)Examples\n\nThis function is primarily useful for allowing byte-wise pointer arithmetic on potentially fat pointers:\n\n```\n#![feature(set_ptr_value)]\nlet mut arr: [i32; 3] = [1, 2, 3];\nlet mut ptr = arr.as_mut_ptr() as *mut dyn Debug;\nlet thin = ptr as *mut u8;\nunsafe {\n    ptr = thin.add(8).with_metadata_of(ptr);\n    println!(\"{:?}\", &*ptr); // will print \"3\"\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(set_ptr_value)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Debug;%0A++++let+mut+arr:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+mut+ptr+=+arr.as_mut_ptr()+as+*mut+dyn+Debug;%0A++++let+thin+=+ptr+as+*mut+u8;%0A++++unsafe+%7B%0A++++++++ptr+=+thin.add(8).with_metadata_of(ptr);%0A++++assert_eq!(*(ptr+as+*mut+i32),+3);%0A++++++++println!(%22%7B:?%7D%22,+%26*ptr);+//+will+print+%223%22%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.65.0 (const: 1.65.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#116)\n\nChanges constness without changing the type.\n\nThis is a bit safer than `as` because it wouldn’t silently change the type if the code is refactored.\n\nWhile not strictly required (`*mut T` coerces to `*const T`), this is provided for symmetry with [`cast_mut`](about:blank/primitive.pointer.html#method.cast_mut \"method pointer::cast_mut\") on `*const T` and may have documentation value if used instead of implicit coercion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#149-151)\n\n👎Deprecated since 1.67.0: replaced by the `expose_provenance` method, or update your code to follow the strict provenance rules using its APIs\n\n🔬This is a nightly-only experimental API. (`ptr_to_from_bits` [#91126](https://github.com/rust-lang/rust/issues/91126))\n\nCasts a pointer to its raw bits.\n\nThis is equivalent to `as usize`, but is more specific to enhance readability. The inverse method is [`from_bits`](about:blank/primitive.pointer.html#method.from_bits-1 \"primitive pointer\").\n\nIn particular, `*p as usize` and `p as usize` will both compile for pointers to numeric types but do very different things, so using this helps emphasize that reading the bits was intentional.\n\n##### [§](#examples-27)Examples\n\n```\n#![feature(ptr_to_from_bits)]\nlet mut array = [13, 42];\nlet mut it = array.iter_mut();\nlet p0: *mut i32 = it.next().unwrap();\nassert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\nlet p1: *mut i32 = it.next().unwrap();\nassert_eq!(p1.to_bits() - p0.to_bits(), 4);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++let+mut+array+=+%5B13,+42%5D;%0A++++let+mut+it+=+array.iter_mut();%0A++++let+p0:+*mut+i32+=+it.next().unwrap();%0A++++assert_eq!(%3C*mut+_%3E::from_bits(p0.to_bits()),+p0);%0A++++let+p1:+*mut+i32+=+it.next().unwrap();%0A++++assert_eq!(p1.to_bits()+-+p0.to_bits(),+4);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#179-181)\n\n👎Deprecated since 1.67.0: replaced by the `ptr::with_exposed_provenance_mut` function, or update your code to follow the strict provenance rules using its APIs\n\n🔬This is a nightly-only experimental API. (`ptr_to_from_bits` [#91126](https://github.com/rust-lang/rust/issues/91126))\n\nCreates a pointer from its raw bits.\n\nThis is equivalent to `as *mut T`, but is more specific to enhance readability. The inverse method is [`to_bits`](about:blank/primitive.pointer.html#method.to_bits-1 \"primitive pointer\").\n\n##### [§](#examples-28)Examples\n\n```\n#![feature(ptr_to_from_bits)]\nuse std::ptr::NonNull;\nlet dangling: *mut u8 = NonNull::dangling().as_ptr();\nassert_eq!(<*mut u8>::from_bits(1), dangling);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++use+std::ptr::NonNull;%0A++++let+dangling:+*mut+u8+=+NonNull::dangling().as_ptr();%0A++++assert_eq!(%3C*mut+u8%3E::from_bits(1),+dangling);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#213)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nGets the “address” portion of the pointer.\n\nThis is similar to `self as usize`, which semantically discards _provenance_ and _address-space_ information. However, unlike `self as usize`, casting the returned address back to a pointer yields a [pointer without provenance](ptr/fn.without_provenance_mut.html \"fn std::ptr::without_provenance_mut\"), which is undefined behavior to dereference. To properly restore the lost information and obtain a dereferenceable pointer, use [`with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\") or [`map_addr`](about:blank/primitive.pointer.html#method.map_addr \"method pointer::map_addr\").\n\nIf using those APIs is not possible because there is no way to preserve a pointer with the required provenance, then Strict Provenance might not be for you. Use pointer-integer casts or [`expose_provenance`](about:blank/primitive.pointer.html#method.expose_provenance \"method pointer::expose_provenance\") and [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") instead. However, note that this makes your code less portable and less amenable to tools that check for compliance with the Rust memory model.\n\nOn most platforms this will produce a value with the same bytes as the original pointer, because all the bytes are dedicated to describing the address. Platforms which need to store additional information in the pointer may perform a change of representation to produce a value containing only the address portion of the pointer. What that means is up to the platform to define.\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, and as such might change in the future (including possibly weakening this so it becomes wholly equivalent to `self as usize`). See the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#247)\n\n🔬This is a nightly-only experimental API. (`exposed_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nExposes the “provenance” part of the pointer for future use in [`with_exposed_provenance`](ptr/fn.with_exposed_provenance.html \"fn std::ptr::with_exposed_provenance\") and returns the “address” portion.\n\nThis is equivalent to `self as usize`, which semantically discards _provenance_ and _address-space_ information. Furthermore, this (like the `as` cast) has the implicit side-effect of marking the provenance as ‘exposed’, so on platforms that support it you can later call [`with_exposed_provenance_mut`](ptr/fn.with_exposed_provenance_mut.html \"fn std::ptr::with_exposed_provenance_mut\") to reconstitute the original pointer including its provenance. (Reconstructing address space information, if required, is your responsibility.)\n\nUsing this method means that code is _not_ following [Strict Provenance](about:blank/ptr/index.html#strict-provenance \"mod std::ptr\") rules. Supporting [`with_exposed_provenance_mut`](ptr/fn.with_exposed_provenance_mut.html \"fn std::ptr::with_exposed_provenance_mut\") complicates specification and reasoning and may not be supported by tools that help you to stay conformant with the Rust memory model, so it is recommended to use [`addr`](about:blank/primitive.pointer.html#method.addr \"method pointer::addr\") wherever possible.\n\nOn most platforms this will produce a value with the same bytes as the original pointer, because all the bytes are dedicated to describing the address. Platforms which need to store additional information in the pointer may not support this operation, since the ‘expose’ side-effect which is required for [`with_exposed_provenance_mut`](ptr/fn.with_exposed_provenance_mut.html \"fn std::ptr::with_exposed_provenance_mut\") to work is typically not available.\n\nIt is unclear whether this method can be given a satisfying unambiguous specification. This API and its claimed semantics are part of [Exposed Provenance](about:blank/ptr/index.html#exposed-provenance \"mod std::ptr\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#267)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer with the given address.\n\nThis performs the same operation as an `addr as ptr` cast, but copies the _address-space_ and _provenance_ of `self` to the new pointer. This allows us to dynamically preserve and propagate this important information in a way that is otherwise impossible with a unary cast.\n\nThis is equivalent to using [`wrapping_offset`](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") to offset `self` to the given address, and therefore has all the same capabilities and restrictions.\n\nThis API and its claimed semantics are an extension to the Strict Provenance experiment, see the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#290)\n\n🔬This is a nightly-only experimental API. (`strict_provenance` [#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer by mapping `self`’s address to a new one.\n\nThis is a convenience for [`with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\"), see that method for details.\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [module documentation](ptr/index.html \"mod std::ptr\") for details.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#300)\n\n🔬This is a nightly-only experimental API. (`ptr_metadata` [#81513](https://github.com/rust-lang/rust/issues/81513))\n\nDecompose a (possibly wide) pointer into its data pointer and metadata components.\n\nThe pointer can be later reconstructed with [`from_raw_parts_mut`](ptr/fn.from_raw_parts_mut.html \"fn std::ptr::from_raw_parts_mut\").\n\n1.9.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91822 \"Tracking issue for const_ptr_as_ref\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#364)\n\nReturns `None` if the pointer is null, or else returns a shared reference to the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_ref`](about:blank/primitive.pointer.html#method.as_uninit_ref-1 \"primitive pointer\") must be used instead.\n\nFor the mutable counterpart see [`as_mut`](#method.as_mut).\n\n##### [§](#safety-12)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-29)Examples\n\n```\nlet ptr: *mut u8 = &mut 10u8 as *mut u8;\n\nunsafe {\n    if let Some(val_back) = ptr.as_ref() {\n        println!(\"We got back the value: {val_back}!\");\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#null-unchecked-version-1)Null-unchecked version\n\nIf you are sure the pointer can never be null and are looking for some kind of `as_ref_unchecked` that returns the `&T` instead of `Option<&T>`, know that you can dereference the pointer directly.\n\n```\nlet ptr: *mut u8 = &mut 10u8 as *mut u8;\n\nunsafe {\n    let val_back = &*ptr;\n    println!(\"We got back the value: {val_back}!\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++let+val_back+=+%26*ptr;%0A++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#416)\n\n🔬This is a nightly-only experimental API. (`ptr_as_ref_unchecked` [#122034](https://github.com/rust-lang/rust/issues/122034))\n\nReturns a shared reference to the value behind the pointer. If the pointer may be null or the value may be uninitialized, [`as_uninit_ref`](#method.as_uninit_ref) must be used instead. If the pointer may be null, but the value is known to have been initialized, [`as_ref`](#method.as_ref) must be used instead.\n\nFor the mutable counterpart see [`as_mut_unchecked`](#method.as_mut_unchecked).\n\n##### [§](#safety-13)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-30)Examples\n\n```\n#![feature(ptr_as_ref_unchecked)]\nlet ptr: *mut u8 = &mut 10u8 as *mut u8;\n\nunsafe {\n    println!(\"We got back the value: {}!\", ptr.as_ref_unchecked());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+ptr.as_ref_unchecked());%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#464-466)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a shared reference to the value wrapped in `Some`. In contrast to [`as_ref`](about:blank/primitive.pointer.html#method.as_ref-1 \"primitive pointer\"), this does not require that the value has to be initialized.\n\nFor the mutable counterpart see [`as_uninit_mut`](#method.as_uninit_mut).\n\n##### [§](#safety-14)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\n##### [§](#examples-31)Examples\n\n```\n#![feature(ptr_as_uninit)]\n\nlet ptr: *mut u8 = &mut 10u8 as *mut u8;\n\nunsafe {\n    if let Some(val_back) = ptr.as_uninit_ref() {\n        println!(\"We got back the value: {}!\", val_back.assume_init());\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_uninit_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+val_back.assume_init());%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.0.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#528-530)\n\nCalculates the offset from a pointer.\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-15)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_offset`](#method.wrapping_offset) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-32)Examples\n\n```\nlet mut s = [1, 2, 3];\nlet ptr: *mut u32 = s.as_mut_ptr();\n\nunsafe {\n    assert_eq!(2, *ptr.offset(1));\n    assert_eq!(3, *ptr.offset(2));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(2,+*ptr.offset(1));%0A++++++++assert_eq!(3,+*ptr.offset(2));%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#554)\n\nCalculates the offset from a pointer in bytes.\n\n`count` is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [offset](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.16.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#610-612)\n\nCalculates the offset from a pointer using wrapping arithmetic. `count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-16)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_offset((y as isize) - (x as isize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`offset`](#method.offset), this method basically delays the requirement of staying within the same allocated object: [`offset`](#method.offset) is immediate Undefined Behavior when crossing object boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`](#method.offset) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-33)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements\nlet mut data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *mut u8 = data.as_mut_ptr();\nlet step = 2;\nlet end_rounded_up = ptr.wrapping_offset(6);\n\nwhile ptr != end_rounded_up {\n    unsafe {\n        *ptr = 0;\n    }\n    ptr = ptr.wrapping_offset(step);\n}\nassert_eq!(&data, &[0, 2, 0, 4, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+mut+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*mut+u8+=+data.as_mut_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_offset(6);%0A++++%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++*ptr+=+0;%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_offset(step);%0A++++%7D%0A++++assert_eq!(%26data,+%26%5B0,+2,+0,+4,+0%5D);%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#633)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic.\n\n`count` is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_offset](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#674)\n\n🔬This is a nightly-only experimental API. (`ptr_mask` [#98290](https://github.com/rust-lang/rust/issues/98290))\n\nMasks out bits of the pointer according to a mask.\n\nThis is convenience for `ptr.map_addr(|a| a & mask)`.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n###### [§](#examples-34)Examples\n\n```\n#![feature(ptr_mask, strict_provenance)]\nlet mut v = 17_u32;\nlet ptr: *mut u32 = &mut v;\n\n// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\nlet tag_mask = 0b11;\nlet ptr_mask = !tag_mask;\n\n// We can store something in these lower bits\nlet tagged_ptr = ptr.map_addr(|a| a | 0b10);\n\n// Get the \"tag\" back\nlet tag = tagged_ptr.addr() & tag_mask;\nassert_eq!(tag, 0b10);\n\n// Note that `tagged_ptr` is unaligned, it's UB to read from/write to it.\n// To get original pointer `mask` can be used:\nlet masked_ptr = tagged_ptr.mask(ptr_mask);\nassert_eq!(unsafe { *masked_ptr }, 17);\n\nunsafe { *masked_ptr = 0 };\nassert_eq!(v, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_mask,+strict_provenance)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+17_u32;%0A++++let+ptr:+*mut+u32+=+%26mut+v;%0A++++%0A++++//+%60u32%60+is+4+bytes+aligned,%0A++++//+which+means+that+lower+2+bits+are+always+0.%0A++++let+tag_mask+=+0b11;%0A++++let+ptr_mask+=+!tag_mask;%0A++++%0A++++//+We+can+store+something+in+these+lower+bits%0A++++let+tagged_ptr+=+ptr.map_addr(%7Ca%7C+a+%7C+0b10);%0A++++%0A++++//+Get+the+%22tag%22+back%0A++++let+tag+=+tagged_ptr.addr()+%26+tag_mask;%0A++++assert_eq!(tag,+0b10);%0A++++%0A++++//+Note+that+%60tagged_ptr%60+is+unaligned,+it%27s+UB+to+read+from/write+to+it.%0A++++//+To+get+original+pointer+%60mask%60+can+be+used:%0A++++let+masked_ptr+=+tagged_ptr.mask(ptr_mask);%0A++++assert_eq!(unsafe+%7B+*masked_ptr+%7D,+17);%0A++++%0A++++unsafe+%7B+*masked_ptr+=+0+%7D;%0A++++assert_eq!(v,+0);%0A%7D&version=nightly&edition=2021)\n\n1.9.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91822 \"Tracking issue for const_ptr_as_ref\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#737)\n\nReturns `None` if the pointer is null, or else returns a unique reference to the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`](#method.as_uninit_mut) must be used instead.\n\nFor the shared counterpart see [`as_ref`](about:blank/primitive.pointer.html#method.as_ref-1 \"primitive pointer\").\n\n##### [§](#safety-17)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-35)Examples\n\n```\nlet mut s = [1, 2, 3];\nlet ptr: *mut u32 = s.as_mut_ptr();\nlet first_value = unsafe { ptr.as_mut().unwrap() };\n*first_value = 4;\nprintln!(\"{s:?}\"); // It'll print: \"[4, 2, 3]\".\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+ptr.as_mut().unwrap()+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It%27ll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&edition=2021)\n\n##### [§](#null-unchecked-version-2)Null-unchecked version\n\nIf you are sure the pointer can never be null and are looking for some kind of `as_mut_unchecked` that returns the `&mut T` instead of `Option<&mut T>`, know that you can dereference the pointer directly.\n\n```\nlet mut s = [1, 2, 3];\nlet ptr: *mut u32 = s.as_mut_ptr();\nlet first_value = unsafe { &mut *ptr };\n*first_value = 4;\nprintln!(\"{s:?}\"); // It'll print: \"[4, 2, 3]\".\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+%26mut+*ptr+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It%27ll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#790)\n\n🔬This is a nightly-only experimental API. (`ptr_as_ref_unchecked` [#122034](https://github.com/rust-lang/rust/issues/122034))\n\nReturns a unique reference to the value behind the pointer. If the pointer may be null or the value may be uninitialized, [`as_uninit_mut`](#method.as_uninit_mut) must be used instead. If the pointer may be null, but the value is known to have been initialized, [`as_mut`](#method.as_mut) must be used instead.\n\nFor the shared counterpart see [`as_ref_unchecked`](#method.as_mut_unchecked).\n\n##### [§](#safety-18)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [§](#examples-36)Examples\n\n```\n#![feature(ptr_as_ref_unchecked)]\nlet mut s = [1, 2, 3];\nlet ptr: *mut u32 = s.as_mut_ptr();\nlet first_value = unsafe { ptr.as_mut_unchecked() };\n*first_value = 4;\nprintln!(\"{s:?}\"); // It'll print: \"[4, 2, 3]\".\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+ptr.as_mut_unchecked()+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It%27ll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#824-826)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a unique reference to the value wrapped in `Some`. In contrast to [`as_mut`](#method.as_mut), this does not require that the value has to be initialized.\n\nFor the shared counterpart see [`as_uninit_ref`](about:blank/primitive.pointer.html#method.as_uninit_ref-1 \"primitive pointer\").\n\n##### [§](#safety-19)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be “dereferenceable” in the sense defined in [the module documentation](about:blank/ptr/index.html#safety \"mod std::ptr\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused!\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#853-855)\n\n🔬This is a nightly-only experimental API. (`const_raw_ptr_comparison` [#53020](https://github.com/rust-lang/rust/issues/53020))\n\nReturns whether two pointers are guaranteed to be equal.\n\nAt runtime this function behaves like `Some(self == other)`. However, in some contexts (e.g., compile-time evaluation), it is not always possible to determine equality of two pointers, so this function may spuriously return `None` for pointers that later actually turn out to have its equality known. But when it returns `Some`, the pointers’ equality is guaranteed to be known.\n\nThe return value may change from `Some` to `None` and vice versa depending on the compiler version and unsafe code must not rely on the result of this function for soundness. It is suggested to only use this function for performance optimizations where spurious `None` return values by this function do not affect the outcome, but just the performance. The consequences of using this method to make runtime and compile-time code behave differently have not been explored. This method should not be used to introduce such differences, and it should also not be stabilized before we have a better understanding of this issue.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#880-882)\n\n🔬This is a nightly-only experimental API. (`const_raw_ptr_comparison` [#53020](https://github.com/rust-lang/rust/issues/53020))\n\nReturns whether two pointers are guaranteed to be inequal.\n\nAt runtime this function behaves like `Some(self != other)`. However, in some contexts (e.g., compile-time evaluation), it is not always possible to determine inequality of two pointers, so this function may spuriously return `None` for pointers that later actually turn out to have its inequality known. But when it returns `Some`, the pointers’ inequality is guaranteed to be known.\n\nThe return value may change from `Some` to `None` and vice versa depending on the compiler version and unsafe code must not rely on the result of this function for soundness. It is suggested to only use this function for performance optimizations where spurious `None` return values by this function do not affect the outcome, but just the performance. The consequences of using this method to make runtime and compile-time code behave differently have not been explored. This method should not be used to introduce such differences, and it should also not be stabilized before we have a better understanding of this issue.\n\n1.47.0 (const: 1.65.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#989-991)\n\nCalculates the distance between two pointers. The returned value is in units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n\nThis is equivalent to `(self as isize - origin as isize) / (mem::size_of::<T>() as isize)`, except that it has a lot more opportunities for UB, in exchange for the compiler better understanding what you are doing.\n\nThe primary motivation of this method is for computing the `len` of an array/slice of `T` that you are currently representing as a “start” and “end” pointer (and “end” is “one past the end” of the array). In that case, `end.offset_from(start)` gets you the length of the array.\n\nAll of the following safety requirements are trivially satisfied for this usecase.\n\n##### [§](#safety-20)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   `self` and `origin` must either\n    \n    -   both be _derived from_ a pointer to the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"), and the memory range between the two pointers must be either empty or in bounds of that object. (See below for an example.)\n    -   or both be derived from an integer literal/constant, and point to the same address.\n-   The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.\n    \n-   The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n    \n-   The distance being in bounds cannot rely on “wrapping around” the address space.\n    \n\nRust types are never larger than `isize::MAX` and Rust allocations never wrap around the address space, so two pointers within some value of any Rust type `T` will always satisfy the last two conditions. The standard library also generally ensures that allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())` always satisfies the last two conditions.\n\nMost platforms fundamentally can’t even construct such a large allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function. (Note that [`offset`](about:blank/primitive.pointer.html#method.offset-1 \"primitive pointer\") and [`add`](#method.add) also have a similar limitation and hence cannot be used on such large allocations either.)\n\nThe requirement for pointers to be derived from the same allocated object is primarily needed for `const`\\-compatibility: the distance between pointers into _different_ allocated objects is not known at compile-time. However, the requirement also exists at runtime and may be exploited by optimizations. If you wish to compute the difference between pointers that are not guaranteed to be from the same allocation, use `(self as isize - origin as isize) / mem::size_of::<T>()`.\n\n##### [§](#panics-4)Panics\n\nThis function panics if `T` is a Zero-Sized Type (“ZST”).\n\n##### [§](#examples-37)Examples\n\nBasic usage:\n\n```\nlet mut a = [0; 5];\nlet ptr1: *mut i32 = &mut a[1];\nlet ptr2: *mut i32 = &mut a[3];\nunsafe {\n    assert_eq!(ptr2.offset_from(ptr1), 2);\n    assert_eq!(ptr1.offset_from(ptr2), -2);\n    assert_eq!(ptr1.offset(2), ptr2);\n    assert_eq!(ptr2.offset(-2), ptr1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*mut+i32+=+%26mut+a%5B1%5D;%0A++++let+ptr2:+*mut+i32+=+%26mut+a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&edition=2021)\n\n_Incorrect_ usage:\n\n```\nlet ptr1 = Box::into_raw(Box::new(0u8));\nlet ptr2 = Box::into_raw(Box::new(1u8));\nlet diff = (ptr2 as isize).wrapping_sub(ptr1 as isize);\n// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\nlet ptr2_other = (ptr1 as *mut u8).wrapping_offset(diff);\nassert_eq!(ptr2 as usize, ptr2_other as usize);\n// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\nunsafe {\n    let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr1+=+Box::into_raw(Box::new(0u8));%0A++++let+ptr2+=+Box::into_raw(Box::new(1u8));%0A++++let+diff+=+(ptr2+as+isize).wrapping_sub(ptr1+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+(ptr1+as+*mut+u8).wrapping_offset(diff);%0A++++assert_eq!(ptr2+as+usize,+ptr2_other+as+usize);%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++unsafe+%7B%0A++++++++let+zero+=+ptr2_other.offset_from(ptr2);+//+Undefined+Behavior%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1011)\n\nCalculates the distance between two pointers. The returned value is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [`offset_from`](about:blank/primitive.pointer.html#method.offset_from \"method pointer::offset_from\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation considers only the data pointers, ignoring the metadata.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1081-1083)\n\n🔬This is a nightly-only experimental API. (`ptr_sub_ptr` [#95892](https://github.com/rust-lang/rust/issues/95892))\n\nCalculates the distance between two pointers, _where it’s known that `self` is equal to or greater than `origin`_. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n\nThis computes the same value that [`offset_from`](#method.offset_from) would compute, but with the added precondition that the offset is guaranteed to be non-negative. This method is equivalent to `usize::try_from(self.offset_from(origin)).unwrap_unchecked()`, but it provides slightly more information to the optimizer, which can sometimes allow it to optimize slightly better with some backends.\n\nThis method can be though of as recovering the `count` that was passed to [`add`](#method.add) (or, with the parameters in the other order, to [`sub`](#method.sub)). The following are all equivalent, assuming that their safety preconditions are met:\n\n```\nptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+*mut+i32,+origin:+*mut+i32,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [§](#safety-21)Safety\n\n-   The distance between the pointers must be non-negative (`self >= origin`)\n    \n-   _All_ the safety conditions of [`offset_from`](#method.offset_from) apply to this method as well; see it for the full details.\n    \n\nImportantly, despite the return type of this method being able to represent a larger offset, it’s still _not permitted_ to pass pointers which differ by more than `isize::MAX` _bytes_. As such, the result of this method will always be less than or equal to `isize::MAX as usize`.\n\n##### [§](#panics-5)Panics\n\nThis function panics if `T` is a Zero-Sized Type (“ZST”).\n\n##### [§](#examples-38)Examples\n\n```\n#![feature(ptr_sub_ptr)]\n\nlet mut a = [0; 5];\nlet p: *mut i32 = a.as_mut_ptr();\nunsafe {\n    let ptr1: *mut i32 = p.add(1);\n    let ptr2: *mut i32 = p.add(3);\n\n    assert_eq!(ptr2.sub_ptr(ptr1), 2);\n    assert_eq!(ptr1.add(2), ptr2);\n    assert_eq!(ptr2.sub(2), ptr1);\n    assert_eq!(ptr2.sub_ptr(ptr2), 0);\n}\n\n// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.offset_from(ptr2)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0A%0Afn+main()+%7B%0A++++let+mut+a+=+%5B0;+5%5D;%0A++++let+p:+*mut+i32+=+a.as_mut_ptr();%0A++++unsafe+%7B%0A++++++++let+ptr1:+*mut+i32+=+p.add(1);%0A++++++++let+ptr2:+*mut+i32+=+p.add(3);%0A++++%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.offset_from(ptr2)%0A%7D&version=nightly&edition=2021)\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1144-1146)\n\nCalculates the offset from a pointer (convenience for `.offset(count as isize)`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-22)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum must fit in a `usize`.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_add`](#method.wrapping_add) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-39)Examples\n\n```\nlet s: &str = \"123\";\nlet ptr: *const u8 = s.as_ptr();\n\nunsafe {\n    assert_eq!('2', *ptr.add(1) as char);\n    assert_eq!('3', *ptr.add(2) as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(%272%27,+*ptr.add(1)+as+char);%0A++++++++assert_eq!(%273%27,+*ptr.add(2)+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1168)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [add](about:blank/primitive.pointer.html#method.add \"method pointer::add\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1230-1232)\n\nCalculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-23)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   If the computed offset, **in bytes**, is non-zero, then both the starting and resulting pointer must be either in bounds or at the end of the same [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). (If it is zero, then the function is always well-defined.)\n    \n-   The computed offset cannot exceed `isize::MAX` **bytes**.\n    \n-   The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len()).sub(vec.len())` is always safe.\n\nMost platforms fundamentally can’t even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\nConsider using [`wrapping_sub`](#method.wrapping_sub) instead if these constraints are difficult to satisfy. The only advantage of this method is that it enables more aggressive compiler optimizations.\n\n##### [§](#examples-40)Examples\n\n```\nlet s: &str = \"123\";\n\nunsafe {\n    let end: *const u8 = s.as_ptr().add(3);\n    assert_eq!('3', *end.sub(1) as char);\n    assert_eq!('2', *end.sub(2) as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+*const+u8+=+s.as_ptr().add(3);%0A++++++++assert_eq!(%273%27,+*end.sub(1)+as+char);%0A++++++++assert_eq!(%272%27,+*end.sub(2)+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1262)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset((count as isize).wrapping_neg())`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [sub](about:blank/primitive.pointer.html#method.sub \"method pointer::sub\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1320-1322)\n\nCalculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset(count as isize)`)\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-24)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_add((y as usize) - (x as usize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`add`](#method.add), this method basically delays the requirement of staying within the same allocated object: [`add`](#method.add) is immediate Undefined Behavior when crossing object boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`](#method.add) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-41)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements\nlet data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *const u8 = data.as_ptr();\nlet step = 2;\nlet end_rounded_up = ptr.wrapping_add(6);\n\n// This loop prints \"1, 3, 5, \"\nwhile ptr != end_rounded_up {\n    unsafe {\n        print!(\"{}, \", *ptr);\n    }\n    ptr = ptr.wrapping_add(step);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_add(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_add(step);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1342)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic. (convenience for `.wrapping_byte_offset(count as isize)`)\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_add](about:blank/primitive.pointer.html#method.wrapping_add \"method pointer::wrapping_add\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.61.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1399-1401)\n\nCalculates the offset from a pointer using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [§](#safety-25)Safety\n\nThis operation itself is always safe, but using the resulting pointer is not.\n\nThe resulting pointer “remembers” the [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\") that `self` points to; it must not be used to read or write other allocated objects.\n\nIn other words, `let z = x.wrapping_sub((x as usize) - (y as usize))` does _not_ make `z` the same as `y` even if we assume `T` has size `1` and there is no overflow: `z` is still attached to the object `x` is attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the same allocated object.\n\nCompared to [`sub`](#method.sub), this method basically delays the requirement of staying within the same allocated object: [`sub`](#method.sub) is immediate Undefined Behavior when crossing object boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`](#method.sub) can be optimized better and is thus preferable in performance-sensitive code.\n\nThe delayed check only considers the value of the pointer that was dereferenced, not the intermediate values used during the computation of the final result. For example, `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the allocated object and then re-entering it later is permitted.\n\n##### [§](#examples-42)Examples\n\n```\n// Iterate using a raw pointer in increments of two elements (backwards)\nlet data = [1u8, 2, 3, 4, 5];\nlet mut ptr: *const u8 = data.as_ptr();\nlet start_rounded_down = ptr.wrapping_sub(2);\nptr = ptr.wrapping_add(4);\nlet step = 2;\n// This loop prints \"5, 3, 1, \"\nwhile ptr != start_rounded_down {\n    unsafe {\n        print!(\"{}, \", *ptr);\n    }\n    ptr = ptr.wrapping_sub(step);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements+(backwards)%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+start_rounded_down+=+ptr.wrapping_sub(2);%0A++++ptr+=+ptr.wrapping_add(4);%0A++++let+step+=+2;%0A++++//+This+loop+prints+%225,+3,+1,+%22%0A++++while+ptr+!=+start_rounded_down+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_sub(step);%0A++++%7D%0A%7D&edition=2021)\n\n1.75.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1421)\n\nCalculates the offset from a pointer in bytes using wrapping arithmetic. (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [wrapping\\_sub](about:blank/primitive.pointer.html#method.wrapping_sub \"method pointer::wrapping_sub\") on it. See that method for documentation.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.26.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1435-1437)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nSee [`ptr::read`](ptr/fn.read.html \"fn std::ptr::read\") for safety concerns and examples.\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1456-1458)\n\nPerforms a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.\n\nSee [`ptr::read_volatile`](ptr/fn.read_volatile.html \"fn std::ptr::read_volatile\") for safety concerns and examples.\n\n1.26.0 (const: 1.71.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1476-1478)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nUnlike `read`, the pointer may be unaligned.\n\nSee [`ptr::read_unaligned`](ptr/fn.read_unaligned.html \"fn std::ptr::read_unaligned\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1496-1498)\n\nCopies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.\n\nNOTE: this has the _same_ argument order as [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\").\n\nSee [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1516-1518)\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1536-1538)\n\nCopies `count * size_of<T>` bytes from `src` to `self`. The source and destination may overlap.\n\nNOTE: this has the _opposite_ argument order of [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\").\n\nSee [`ptr::copy`](ptr/fn.copy.html \"fn std::ptr::copy\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1556-1558)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1571)\n\nExecutes the destructor (if any) of the pointed-to value.\n\nSee [`ptr::drop_in_place`](ptr/fn.drop_in_place.html \"fn std::ptr::drop_in_place\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1586-1588)\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\nSee [`ptr::write`](ptr/fn.write.html \"fn std::ptr::write\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1605-1607)\n\nInvokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `self` to `val`.\n\nSee [`ptr::write_bytes`](ptr/fn.write_bytes.html \"fn std::ptr::write_bytes\") for safety concerns and examples.\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1626-1628)\n\nPerforms a volatile write of a memory location with the given value without reading or dropping the old value.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.\n\nSee [`ptr::write_volatile`](ptr/fn.write_volatile.html \"fn std::ptr::write_volatile\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1646-1648)\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\nUnlike `write`, the pointer may be unaligned.\n\nSee [`ptr::write_unaligned`](ptr/fn.write_unaligned.html \"fn std::ptr::write_unaligned\") for safety concerns and examples.\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1662-1664)\n\nReplaces the value at `self` with `src`, returning the old value, without dropping either.\n\nSee [`ptr::replace`](ptr/fn.replace.html \"fn std::ptr::replace\") for safety concerns and examples.\n\n1.26.0 (const: [unstable](https://github.com/rust-lang/rust/issues/83163 \"Tracking issue for const_swap\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1680-1682)\n\nSwaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.\n\nSee [`ptr::swap`](ptr/fn.swap.html \"fn std::ptr::swap\") for safety concerns and examples.\n\n1.36.0 (const: [unstable](https://github.com/rust-lang/rust/issues/90962 \"Tracking issue for const_align_offset\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1741-1743)\n\nComputes the offset that needs to be applied to the pointer in order to make it aligned to `align`.\n\nIf it is not possible to align the pointer, the implementation returns `usize::MAX`.\n\nThe offset is expressed in number of `T` elements, and not bytes. The value returned can be used with the `wrapping_add` method.\n\nThere are no guarantees whatsoever that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.\n\nWhen this is called during compile-time evaluation (which is unstable), the implementation may return `usize::MAX` in cases where that can never happen at runtime. This is because the actual alignment of pointers is not known yet during compile-time, so an offset with guaranteed alignment can sometimes not be computed. For example, a buffer declared as `[u8; N]` might be allocated at an odd or an even address, but at compile-time this is not yet known, so the execution has to be correct for either choice. It is therefore impossible to find an offset that is guaranteed to be 2-aligned. (This behavior is subject to change, as usual for unstable APIs.)\n\n##### [§](#panics-6)Panics\n\nThe function panics if `align` is not a power-of-two.\n\n##### [§](#examples-43)Examples\n\nAccessing adjacent `u8` as `u16`\n\n```\nuse std::mem::align_of;\n\nlet mut x = [5_u8, 6, 7, 8, 9];\nlet ptr = x.as_mut_ptr();\nlet offset = ptr.align_offset(align_of::<u16>());\n\nif offset < x.len() - 1 {\n    let u16_ptr = ptr.add(offset).cast::<u16>();\n    *u16_ptr = 0;\n\n    assert!(x == [0, 0, 7, 8, 9] || x == [5, 0, 0, 8, 9]);\n} else {\n    // while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++%0A++++unsafe+%7B%0A++++let+mut+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+x.as_mut_ptr();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++*u16_ptr+=+0;%0A++++%0A++++++++assert!(x+==+%5B0,+0,+7,+8,+9%5D+%7C%7C+x+==+%5B5,+0,+0,+8,+9%5D);%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.79.0 (const: [unstable](https://github.com/rust-lang/rust/issues/104203 \"Tracking issue for const_pointer_is_aligned\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1868-1870)\n\nReturns whether the pointer is properly aligned for `T`.\n\n##### [§](#examples-44)Examples\n\n```\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet mut data = AlignedI32(42);\nlet ptr = &mut data as *mut AlignedI32;\n\nassert!(ptr.is_aligned());\nassert!(!ptr.wrapping_byte_add(1).is_aligned());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+mut+data+=+AlignedI32(42);%0A++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!ptr.wrapping_byte_add(1).is_aligned());%0A%7D&edition=2021)\n\n##### [§](#at-compiletime-2)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer is never aligned if cast to a type with a stricter alignment than the reference’s underlying allocation.\n\n```\n#![feature(const_pointer_is_aligned)]\n#![feature(const_mut_refs)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let mut data = AlignedI32(42);\n    let ptr = &mut data as *mut AlignedI32;\n    assert!(ptr.is_aligned());\n\n    // At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n    assert!(!ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_mut_refs)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+mut+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn’t aligned.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n// Also, note that mutable references are not allowed in the final value of constants.\nconst COMPTIME_PTR: *mut AlignedI32 = (&AlignedI32(42) as *const AlignedI32).cast_mut();\nconst _: () = assert!(!COMPTIME_PTR.cast::<AlignedI64>().is_aligned());\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).cast::<AlignedI64>().is_aligned());\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.cast::<AlignedI64>().is_aligned(),\n    runtime_ptr.wrapping_add(1).cast::<AlignedI64>().is_aligned(),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++//+Also,+note+that+mutable+references+are+not+allowed+in+the+final+value+of+constants.%0A++++const+COMPTIME_PTR:+*mut+AlignedI32+=+(%26AlignedI32(42)+as+*const+AlignedI32).cast_mut();%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let ptr = 40 as *mut AlignedI32;\n    assert!(ptr.is_aligned());\n\n    // For pointers with a known address, runtime and compiletime behavior are identical.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = ptr.wrapping_add(1).cast::<AlignedI64>();\n    assert!(ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*mut+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1985)\n\n🔬This is a nightly-only experimental API. (`pointer_is_aligned_to` [#96284](https://github.com/rust-lang/rust/issues/96284))\n\nReturns whether the pointer is aligned to `align`.\n\nFor non-`Sized` pointees this operation considers only the data pointer, ignoring the metadata.\n\n##### [§](#panics-7)Panics\n\nThe function panics if `align` is not a power-of-two (this includes 0).\n\n##### [§](#examples-45)Examples\n\n```\n#![feature(pointer_is_aligned_to)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet mut data = AlignedI32(42);\nlet ptr = &mut data as *mut AlignedI32;\n\nassert!(ptr.is_aligned_to(1));\nassert!(ptr.is_aligned_to(2));\nassert!(ptr.is_aligned_to(4));\n\nassert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\nassert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n\nassert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+mut+data+=+AlignedI32(42);%0A++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&version=nightly&edition=2021)\n\n##### [§](#at-compiletime-3)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer cannot be stricter aligned than the reference’s underlying allocation.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n#![feature(const_mut_refs)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nconst _: () = {\n    let mut data = AlignedI32(42);\n    let ptr = &mut data as *mut AlignedI32;\n\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n\n    // At compiletime, we know for sure that the pointer isn't aligned to 8.\n    assert!(!ptr.is_aligned_to(8));\n    assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_mut_refs)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+mut+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn%27t+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn’t aligned.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n// Also, note that mutable references are not allowed in the final value of constants.\nconst COMPTIME_PTR: *mut AlignedI32 = (&AlignedI32(42) as *const AlignedI32).cast_mut();\nconst _: () = assert!(!COMPTIME_PTR.is_aligned_to(8));\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.is_aligned_to(8),\n    runtime_ptr.wrapping_add(1).is_aligned_to(8),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++//+Also,+note+that+mutable+references+are+not+allowed+in+the+final+value+of+constants.%0A++++const+COMPTIME_PTR:+*mut+AlignedI32+=+(%26AlignedI32(42)+as+*const+AlignedI32).cast_mut();%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\nconst _: () = {\n    let ptr = 40 as *mut u8;\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n    assert!(ptr.is_aligned_to(8));\n    assert!(!ptr.is_aligned_to(16));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*mut+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2008)[§](#impl-*mut+%5BT%5D)\n\n1.79.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2028)\n\nReturns the length of a raw slice.\n\nThe returned value is the number of **elements**, not the number of bytes.\n\nThis function is safe, even when the raw slice cannot be cast to a slice reference because the pointer is null or unaligned.\n\n##### [§](#examples-46)Examples\n\n```\nuse std::ptr;\n\nlet slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\nassert_eq!(slice.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&edition=2021)\n\n1.79.0 (const: 1.79.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2045)\n\nReturns `true` if the raw slice has a length of 0.\n\n##### [§](#examples-47)Examples\n\n```\nuse std::ptr;\n\nlet slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\nassert!(!slice.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2092)\n\n🔬This is a nightly-only experimental API. (`raw_slice_split` [#95595](https://github.com/rust-lang/rust/issues/95595))\n\nDivides one mutable raw slice into two at an index.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\n##### [§](#panics-8)Panics\n\nPanics if `mid > len`.\n\n##### [§](#safety-26)Safety\n\n`mid` must be [in-bounds](#method.add) of the underlying [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\"). Which means `self` must be dereferenceable and span a single allocation that is at least `mid * size_of::<T>()` bytes long. Not upholding these requirements is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointers are not used.\n\nSince `len` being in-bounds it is not a safety invariant of `*mut [T]` the safety requirements of this method are the same as for [`split_at_mut_unchecked`](#method.split_at_mut_unchecked). The explicit bounds check is only as useful as `len` is correct.\n\n##### [§](#examples-48)Examples\n\n```\n#![feature(raw_slice_split)]\n#![feature(slice_ptr_get)]\n\nlet mut v = [1, 0, 3, 0, 5, 6];\nlet ptr = &mut v as *mut [_];\nunsafe {\n    let (left, right) = ptr.split_at_mut(2);\n    assert_eq!(&*left, [1, 0]);\n    assert_eq!(&*right, [3, 0, 5, 6]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(raw_slice_split)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+ptr+=+%26mut+v+as+*mut+%5B_%5D;%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+ptr.split_at_mut(2);%0A++++++++assert_eq!(%26*left,+%5B1,+0%5D);%0A++++++++assert_eq!(%26*right,+%5B3,+0,+5,+6%5D);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2135)\n\n🔬This is a nightly-only experimental API. (`raw_slice_split` [#95595](https://github.com/rust-lang/rust/issues/95595))\n\nDivides one mutable raw slice into two at an index, without doing bounds checking.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\n##### [§](#safety-27)Safety\n\n`mid` must be [in-bounds](#method.add) of the underlying \\[allocated object\\]. Which means `self` must be dereferenceable and span a single allocation that is at least `mid * size_of::<T>()` bytes long. Not upholding these requirements is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointers are not used.\n\n##### [§](#examples-49)Examples\n\n```\n#![feature(raw_slice_split)]\n\nlet mut v = [1, 0, 3, 0, 5, 6];\n// scoped to restrict the lifetime of the borrows\nunsafe {\n    let ptr = &mut v as *mut [_];\n    let (left, right) = ptr.split_at_mut_unchecked(2);\n    assert_eq!(&*left, [1, 0]);\n    assert_eq!(&*right, [3, 0, 5, 6]);\n    (&mut *left)[1] = 2;\n    (&mut *right)[1] = 4;\n}\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(raw_slice_split)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++//+scoped+to+restrict+the+lifetime+of+the+borrows%0A++++unsafe+%7B%0A++++++++let+ptr+=+%26mut+v+as+*mut+%5B_%5D;%0A++++++++let+(left,+right)+=+ptr.split_at_mut_unchecked(2);%0A++++++++assert_eq!(%26*left,+%5B1,+0%5D);%0A++++++++assert_eq!(%26*right,+%5B3,+0,+5,+6%5D);%0A++++++++(%26mut+*left)%5B1%5D+=+2;%0A++++++++(%26mut+*right)%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2163)\n\n🔬This is a nightly-only experimental API. (`slice_ptr_get` [#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to the slice’s buffer.\n\nThis is equivalent to casting `self` to `*mut T`, but more type-safe.\n\n##### [§](#examples-50)Examples\n\n```\n#![feature(slice_ptr_get)]\nuse std::ptr;\n\nlet slice: *mut [i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 3);\nassert_eq!(slice.as_mut_ptr(), ptr::null_mut());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert_eq!(slice.as_mut_ptr(),+ptr::null_mut());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2189-2191)\n\n🔬This is a nightly-only experimental API. (`slice_ptr_get` [#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to an element or subslice, without doing bounds checking.\n\nCalling this method with an [out-of-bounds index](#method.add) or when `self` is not dereferenceable is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n##### [§](#examples-51)Examples\n\n```\n#![feature(slice_ptr_get)]\n\nlet x = &mut [1, 2, 4] as *mut [i32];\n\nunsafe {\n    assert_eq!(x.get_unchecked_mut(1), x.as_mut_ptr().add(1));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D+as+*mut+%5Bi32%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked_mut(1),+x.as_mut_ptr().add(1));%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2240)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a shared slice to the value wrapped in `Some`. In contrast to [`as_ref`](about:blank/primitive.pointer.html#method.as_ref-1 \"primitive pointer\"), this does not require that the value has to be initialized.\n\nFor the mutable counterpart see [`as_uninit_slice_mut`](#method.as_uninit_slice_mut).\n\n##### [§](#safety-28)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads for `ptr.len() * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\")! Slices can never span across multiple allocated objects.\n        \n    -   The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/ptr/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n        \n-   The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\nSee also [`slice::from_raw_parts`](slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2292)\n\n🔬This is a nightly-only experimental API. (`ptr_as_uninit` [#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns `None` if the pointer is null, or else returns a unique slice to the value wrapped in `Some`. In contrast to [`as_mut`](#method.as_mut), this does not require that the value has to be initialized.\n\nFor the shared counterpart see [`as_uninit_slice`](#method.as_uninit_slice-1).\n\n##### [§](#safety-29)Safety\n\nWhen calling this method, you have to ensure that _either_ the pointer is null _or_ all of the following is true:\n\n-   The pointer must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads and writes for `ptr.len() * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single [allocated object](about:blank/ptr/index.html#allocated-object \"mod std::ptr\")! Slices can never span across multiple allocated objects.\n        \n    -   The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/ptr/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n        \n-   The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n-   You must enforce Rust’s aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused!\n\nSee also [`slice::from_raw_parts_mut`](slice/fn.from_raw_parts_mut.html \"fn std::slice::from_raw_parts_mut\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2302)[§](#impl-*mut+%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2319)\n\n🔬This is a nightly-only experimental API. (`array_ptr_get` [#119834](https://github.com/rust-lang/rust/issues/119834))\n\nReturns a raw pointer to the array’s buffer.\n\nThis is equivalent to casting `self` to `*mut T`, but more type-safe.\n\n##### [§](#examples-52)Examples\n\n```\n#![feature(array_ptr_get)]\nuse std::ptr;\n\nlet arr: *mut [i8; 3] = ptr::null_mut();\nassert_eq!(arr.as_mut_ptr(), ptr::null_mut());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+arr:+*mut+%5Bi8;+3%5D+=+ptr::null_mut();%0A++++assert_eq!(arr.as_mut_ptr(),+ptr::null_mut());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2340)\n\n🔬This is a nightly-only experimental API. (`array_ptr_get` [#119834](https://github.com/rust-lang/rust/issues/119834))\n\nReturns a raw pointer to a mutable slice containing the entire array.\n\n##### [§](#examples-53)Examples\n\n```\n#![feature(array_ptr_get)]\n\nlet mut arr = [1, 2, 5];\nlet ptr: *mut [i32; 3] = &mut arr;\nunsafe {\n    (&mut *ptr.as_mut_slice())[..2].copy_from_slice(&[3, 4]);\n}\nassert_eq!(arr, [3, 4, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+mut+arr+=+%5B1,+2,+5%5D;%0A++++let+ptr:+*mut+%5Bi32;+3%5D+=+%26mut+arr;%0A++++unsafe+%7B%0A++++++++(%26mut+*ptr.as_mut_slice())%5B..2%5D.copy_from_slice(%26%5B3,+4%5D);%0A++++%7D%0A++++assert_eq!(arr,+%5B3,+4,+5%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2816)[§](#impl-AggregateRawPtr%3C*const+T%3E-for-*const+P)\n\n[§](#associatedtype.Metadata-1)\n\n🔬This is a nightly-only experimental API. (`core_intrinsics`)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2819)[§](#impl-AggregateRawPtr%3C*mut+T%3E-for-*mut+P)\n\n[§](#associatedtype.Metadata)\n\n🔬This is a nightly-only experimental API. (`core_intrinsics`)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#243)[§](#impl-Clone-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#251)[§](#impl-Clone-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2542)[§](#impl-Debug-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2548)[§](#impl-Debug-for-*mut+T)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2085)[§](#impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2088)[§](#method.from)\n\nConverts a `*mut T` into an `AtomicPtr<T>`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#967)[§](#impl-Hash-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#977)[§](#impl-Hash-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1886)[§](#impl-Ord-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2359)[§](#impl-Ord-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1873)[§](#impl-PartialEq-for-*const+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1876)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2347)[§](#impl-PartialEq-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2350)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1901)[§](#impl-PartialOrd-for-*const+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1904)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1910)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1916)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1922)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1928)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2374)[§](#impl-PartialOrd-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2377)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2383)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2389)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2395)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2401)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2479)[§](#impl-Pointer-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2519)[§](#impl-Pointer-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1174-1176)[§](#impl-SimdElement-for-*const+T)\n\n[§](#associatedtype.Mask-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask element type corresponding to this element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1186-1188)[§](#impl-SimdElement-for-*mut+T)\n\n[§](#associatedtype.Mask)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask element type corresponding to this element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#58)[§](#impl-CoerceUnsized%3C*const+U%3E-for-%26T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#51)[§](#impl-CoerceUnsized%3C*const+U%3E-for-%26mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#69)[§](#impl-CoerceUnsized%3C*const+U%3E-for-*const+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#65)[§](#impl-CoerceUnsized%3C*const+U%3E-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#48)[§](#impl-CoerceUnsized%3C*mut+U%3E-for-%26mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#62)[§](#impl-CoerceUnsized%3C*mut+U%3E-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430)[§](#impl-Copy-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430)[§](#impl-Copy-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#129)[§](#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#132)[§](#impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1882)[§](#impl-Eq-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2356)[§](#impl-Eq-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841)[§](#impl-Freeze-for-*const+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841)[§](#impl-Freeze-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#87)[§](#impl-Send-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#89)[§](#impl-Send-for-*mut+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#600)[§](#impl-Sync-for-*const+T)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#602)[§](#impl-Sync-for-*mut+T)\n\n1.38.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#932-937)[§](#impl-Unpin-for-*const+T)\n\n1.38.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#932-937)[§](#impl-Unpin-for-*mut+T)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#185)[§](#impl-UnwindSafe-for-*const+T)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#187)[§](#impl-UnwindSafe-for-*mut+T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Raw, unsafe pointers, `*const T`, and `*mut T`.\"><title>pointer - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">pointer</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">pointer</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.add\">add</a></li><li><a href=\"#method.add-1\">add</a></li><li><a href=\"#method.addr\">addr</a></li><li><a href=\"#method.addr-1\">addr</a></li><li><a href=\"#method.align_offset\">align_offset</a></li><li><a href=\"#method.align_offset-1\">align_offset</a></li><li><a href=\"#method.as_mut\">as_mut</a></li><li><a href=\"#method.as_mut_ptr\">as_mut_ptr</a></li><li><a href=\"#method.as_mut_ptr-1\">as_mut_ptr</a></li><li><a href=\"#method.as_mut_slice\">as_mut_slice</a></li><li><a href=\"#method.as_mut_unchecked\">as_mut_unchecked</a></li><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.as_ptr-1\">as_ptr</a></li><li><a href=\"#method.as_ref\">as_ref</a></li><li><a href=\"#method.as_ref-1\">as_ref</a></li><li><a href=\"#method.as_ref_unchecked\">as_ref_unchecked</a></li><li><a href=\"#method.as_ref_unchecked-1\">as_ref_unchecked</a></li><li><a href=\"#method.as_slice\">as_slice</a></li><li><a href=\"#method.as_uninit_mut\">as_uninit_mut</a></li><li><a href=\"#method.as_uninit_ref\">as_uninit_ref</a></li><li><a href=\"#method.as_uninit_ref-1\">as_uninit_ref</a></li><li><a href=\"#method.as_uninit_slice\">as_uninit_slice</a></li><li><a href=\"#method.as_uninit_slice-1\">as_uninit_slice</a></li><li><a href=\"#method.as_uninit_slice_mut\">as_uninit_slice_mut</a></li><li><a href=\"#method.byte_add\">byte_add</a></li><li><a href=\"#method.byte_add-1\">byte_add</a></li><li><a href=\"#method.byte_offset\">byte_offset</a></li><li><a href=\"#method.byte_offset-1\">byte_offset</a></li><li><a href=\"#method.byte_offset_from\">byte_offset_from</a></li><li><a href=\"#method.byte_offset_from-1\">byte_offset_from</a></li><li><a href=\"#method.byte_sub\">byte_sub</a></li><li><a href=\"#method.byte_sub-1\">byte_sub</a></li><li><a href=\"#method.cast\">cast</a></li><li><a href=\"#method.cast-1\">cast</a></li><li><a href=\"#method.cast_const\">cast_const</a></li><li><a href=\"#method.cast_mut\">cast_mut</a></li><li><a href=\"#method.copy_from\">copy_from</a></li><li><a href=\"#method.copy_from_nonoverlapping\">copy_from_nonoverlapping</a></li><li><a href=\"#method.copy_to\">copy_to</a></li><li><a href=\"#method.copy_to-1\">copy_to</a></li><li><a href=\"#method.copy_to_nonoverlapping\">copy_to_nonoverlapping</a></li><li><a href=\"#method.copy_to_nonoverlapping-1\">copy_to_nonoverlapping</a></li><li><a href=\"#method.drop_in_place\">drop_in_place</a></li><li><a href=\"#method.expose_provenance\">expose_provenance</a></li><li><a href=\"#method.expose_provenance-1\">expose_provenance</a></li><li><a href=\"#method.from_bits\">from_bits</a></li><li><a href=\"#method.from_bits-1\">from_bits</a></li><li><a href=\"#method.get_unchecked\">get_unchecked</a></li><li><a href=\"#method.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#method.guaranteed_eq\">guaranteed_eq</a></li><li><a href=\"#method.guaranteed_eq-1\">guaranteed_eq</a></li><li><a href=\"#method.guaranteed_ne\">guaranteed_ne</a></li><li><a href=\"#method.guaranteed_ne-1\">guaranteed_ne</a></li><li><a href=\"#method.is_aligned\">is_aligned</a></li><li><a href=\"#method.is_aligned-1\">is_aligned</a></li><li><a href=\"#method.is_aligned_to\">is_aligned_to</a></li><li><a href=\"#method.is_aligned_to-1\">is_aligned_to</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.is_empty-1\">is_empty</a></li><li><a href=\"#method.is_null\">is_null</a></li><li><a href=\"#method.is_null-1\">is_null</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.len-1\">len</a></li><li><a href=\"#method.map_addr\">map_addr</a></li><li><a href=\"#method.map_addr-1\">map_addr</a></li><li><a href=\"#method.mask\">mask</a></li><li><a href=\"#method.mask-1\">mask</a></li><li><a href=\"#method.offset\">offset</a></li><li><a href=\"#method.offset-1\">offset</a></li><li><a href=\"#method.offset_from\">offset_from</a></li><li><a href=\"#method.offset_from-1\">offset_from</a></li><li><a href=\"#method.read\">read</a></li><li><a href=\"#method.read-1\">read</a></li><li><a href=\"#method.read_unaligned\">read_unaligned</a></li><li><a href=\"#method.read_unaligned-1\">read_unaligned</a></li><li><a href=\"#method.read_volatile\">read_volatile</a></li><li><a href=\"#method.read_volatile-1\">read_volatile</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.split_at_mut\">split_at_mut</a></li><li><a href=\"#method.split_at_mut_unchecked\">split_at_mut_unchecked</a></li><li><a href=\"#method.sub\">sub</a></li><li><a href=\"#method.sub-1\">sub</a></li><li><a href=\"#method.sub_ptr\">sub_ptr</a></li><li><a href=\"#method.sub_ptr-1\">sub_ptr</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.to_bits\">to_bits</a></li><li><a href=\"#method.to_bits-1\">to_bits</a></li><li><a href=\"#method.to_raw_parts\">to_raw_parts</a></li><li><a href=\"#method.to_raw_parts-1\">to_raw_parts</a></li><li><a href=\"#method.with_addr\">with_addr</a></li><li><a href=\"#method.with_addr-1\">with_addr</a></li><li><a href=\"#method.with_metadata_of\">with_metadata_of</a></li><li><a href=\"#method.with_metadata_of-1\">with_metadata_of</a></li><li><a href=\"#method.wrapping_add\">wrapping_add</a></li><li><a href=\"#method.wrapping_add-1\">wrapping_add</a></li><li><a href=\"#method.wrapping_byte_add\">wrapping_byte_add</a></li><li><a href=\"#method.wrapping_byte_add-1\">wrapping_byte_add</a></li><li><a href=\"#method.wrapping_byte_offset\">wrapping_byte_offset</a></li><li><a href=\"#method.wrapping_byte_offset-1\">wrapping_byte_offset</a></li><li><a href=\"#method.wrapping_byte_sub\">wrapping_byte_sub</a></li><li><a href=\"#method.wrapping_byte_sub-1\">wrapping_byte_sub</a></li><li><a href=\"#method.wrapping_offset\">wrapping_offset</a></li><li><a href=\"#method.wrapping_offset-1\">wrapping_offset</a></li><li><a href=\"#method.wrapping_sub\">wrapping_sub</a></li><li><a href=\"#method.wrapping_sub-1\">wrapping_sub</a></li><li><a href=\"#method.write\">write</a></li><li><a href=\"#method.write_bytes\">write_bytes</a></li><li><a href=\"#method.write_unaligned\">write_unaligned</a></li><li><a href=\"#method.write_volatile\">write_volatile</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Send-for-*const+T\">!Send</a></li><li><a href=\"#impl-Send-for-*mut+T\">!Send</a></li><li><a href=\"#impl-Sync-for-*const+T\">!Sync</a></li><li><a href=\"#impl-Sync-for-*mut+T\">!Sync</a></li><li><a href=\"#impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\">AggregateRawPtr&lt;*const T&gt;</a></li><li><a href=\"#impl-AggregateRawPtr%3C*mut+T%3E-for-*mut+P\">AggregateRawPtr&lt;*mut T&gt;</a></li><li><a href=\"#impl-Clone-for-*const+T\">Clone</a></li><li><a href=\"#impl-Clone-for-*mut+T\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-%26T\">CoerceUnsized&lt;*const U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-%26mut+T\">CoerceUnsized&lt;*const U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*const+T\">CoerceUnsized&lt;*const U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*mut+T\">CoerceUnsized&lt;*const U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C*mut+U%3E-for-%26mut+T\">CoerceUnsized&lt;*mut U&gt;</a></li><li><a href=\"#impl-CoerceUnsized%3C*mut+U%3E-for-*mut+T\">CoerceUnsized&lt;*mut U&gt;</a></li><li><a href=\"#impl-Copy-for-*const+T\">Copy</a></li><li><a href=\"#impl-Copy-for-*mut+T\">Copy</a></li><li><a href=\"#impl-Debug-for-*const+T\">Debug</a></li><li><a href=\"#impl-Debug-for-*mut+T\">Debug</a></li><li><a href=\"#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\">DispatchFromDyn&lt;*const U&gt;</a></li><li><a href=\"#impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T\">DispatchFromDyn&lt;*mut U&gt;</a></li><li><a href=\"#impl-Eq-for-*const+T\">Eq</a></li><li><a href=\"#impl-Eq-for-*mut+T\">Eq</a></li><li><a href=\"#impl-Freeze-for-*const+T\">Freeze</a></li><li><a href=\"#impl-Freeze-for-*mut+T\">Freeze</a></li><li><a href=\"#impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E\">From&lt;*mut T&gt;</a></li><li><a href=\"#impl-Hash-for-*const+T\">Hash</a></li><li><a href=\"#impl-Hash-for-*mut+T\">Hash</a></li><li><a href=\"#impl-Ord-for-*const+T\">Ord</a></li><li><a href=\"#impl-Ord-for-*mut+T\">Ord</a></li><li><a href=\"#impl-PartialEq-for-*const+T\">PartialEq</a></li><li><a href=\"#impl-PartialEq-for-*mut+T\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-*const+T\">PartialOrd</a></li><li><a href=\"#impl-PartialOrd-for-*mut+T\">PartialOrd</a></li><li><a href=\"#impl-Pointer-for-*const+T\">Pointer</a></li><li><a href=\"#impl-Pointer-for-*mut+T\">Pointer</a></li><li><a href=\"#impl-SimdElement-for-*const+T\">SimdElement</a></li><li><a href=\"#impl-SimdElement-for-*mut+T\">SimdElement</a></li><li><a href=\"#impl-Unpin-for-*const+T\">Unpin</a></li><li><a href=\"#impl-Unpin-for-*mut+T\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-*const+T\">UnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-*mut+T\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-*const+T\">RefUnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">pointer</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Raw, unsafe pointers, <code>*const T</code>, and <code>*mut T</code>.</p>\n<p><em><a href=\"ptr/index.html\" title=\"mod std::ptr\">See also the <code>std::ptr</code> module</a>.</em></p>\n<p>Working with raw pointers in Rust is uncommon, typically limited to a few patterns.\nRaw pointers can be unaligned or <a href=\"ptr/fn.null.html\" title=\"fn std::ptr::null\"><code>null</code></a>. However, when a raw pointer is\ndereferenced (using the <code>*</code> operator), it must be non-null and aligned.</p>\n<p>Storing through a raw pointer using <code>*ptr = data</code> calls <code>drop</code> on the old value, so\n<a href=\"ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>write</code></a> must be used if the type has drop glue and memory is not already\ninitialized - otherwise <code>drop</code> would be called on the uninitialized memory.</p>\n<p>Use the <a href=\"ptr/fn.null.html\" title=\"fn std::ptr::null\"><code>null</code></a> and <a href=\"ptr/fn.null_mut.html\" title=\"fn std::ptr::null_mut\"><code>null_mut</code></a> functions to create null pointers, and the\n<a href=\"primitive.pointer.html#method.is_null\" title=\"method pointer::is_null\"><code>is_null</code></a> method of the <code>*const T</code> and <code>*mut T</code> types to check for null.\nThe <code>*const T</code> and <code>*mut T</code> types also define the <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>offset</code></a> method, for\npointer math.</p>\n<h2 id=\"common-ways-to-create-raw-pointers\"><a class=\"doc-anchor\" href=\"#common-ways-to-create-raw-pointers\">§</a>Common ways to create raw pointers</h2><h3 id=\"1-coerce-a-reference-t-or-mutable-reference-mut-t\"><a class=\"doc-anchor\" href=\"#1-coerce-a-reference-t-or-mutable-reference-mut-t\">§</a>1. Coerce a reference (<code>&amp;T</code>) or mutable reference (<code>&amp;mut T</code>).</h3>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_num: i32 = <span class=\"number\">10</span>;\n<span class=\"kw\">let </span>my_num_ptr: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>my_num;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>my_speed: i32 = <span class=\"number\">88</span>;\n<span class=\"kw\">let </span>my_speed_ptr: <span class=\"kw-2\">*mut </span>i32 = <span class=\"kw-2\">&amp;mut </span>my_speed;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_num:+i32+=+10;%0A++++let+my_num_ptr:+*const+i32+=+%26my_num;%0A++++let+mut+my_speed:+i32+=+88;%0A++++let+my_speed_ptr:+*mut+i32+=+%26mut+my_speed;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To get a pointer to a boxed value, dereference the box:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_num: Box&lt;i32&gt; = Box::new(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>my_num_ptr: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;*</span>my_num;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>my_speed: Box&lt;i32&gt; = Box::new(<span class=\"number\">88</span>);\n<span class=\"kw\">let </span>my_speed_ptr: <span class=\"kw-2\">*mut </span>i32 = <span class=\"kw-2\">&amp;mut *</span>my_speed;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_num:+Box%3Ci32%3E+=+Box::new(10);%0A++++let+my_num_ptr:+*const+i32+=+%26*my_num;%0A++++let+mut+my_speed:+Box%3Ci32%3E+=+Box::new(88);%0A++++let+my_speed_ptr:+*mut+i32+=+%26mut+*my_speed;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This does not take ownership of the original allocation\nand requires no resource management later,\nbut you must not use the pointer after its lifetime.</p>\n<h3 id=\"2-consume-a-box-boxt\"><a class=\"doc-anchor\" href=\"#2-consume-a-box-boxt\">§</a>2. Consume a box (<code>Box&lt;T&gt;</code>).</h3>\n<p>The <a href=\"../std/boxed/struct.Box.html#method.into_raw\"><code>into_raw</code></a> function consumes a box and returns\nthe raw pointer. It doesn’t destroy <code>T</code> or deallocate any memory.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>my_speed: Box&lt;i32&gt; = Box::new(<span class=\"number\">88</span>);\n<span class=\"kw\">let </span>my_speed: <span class=\"kw-2\">*mut </span>i32 = Box::into_raw(my_speed);\n\n<span class=\"comment\">// By taking ownership of the original `Box&lt;T&gt;` though\n// we are obligated to put it together later to be destroyed.\n</span><span class=\"kw\">unsafe </span>{\n    drop(Box::from_raw(my_speed));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+my_speed:+Box%3Ci32%3E+=+Box::new(88);%0A++++let+my_speed:+*mut+i32+=+Box::into_raw(my_speed);%0A++++%0A++++//+By+taking+ownership+of+the+original+%60Box%3CT%3E%60+though%0A++++//+we+are+obligated+to+put+it+together+later+to+be+destroyed.%0A++++unsafe+%7B%0A++++++++drop(Box::from_raw(my_speed));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that here the call to <a href=\"mem/fn.drop.html\" title=\"fn std::mem::drop\"><code>drop</code></a> is for clarity - it indicates\nthat we are done with the given value and it should be destroyed.</p>\n<h3 id=\"3-create-it-using-ptraddr_of\"><a class=\"doc-anchor\" href=\"#3-create-it-using-ptraddr_of\">§</a>3. Create it using <code>ptr::addr_of!</code></h3>\n<p>Instead of coercing a reference to a raw pointer, you can use the macros\n<a href=\"ptr/macro.addr_of.html\" title=\"macro std::ptr::addr_of\"><code>ptr::addr_of!</code></a> (for <code>*const T</code>) and <a href=\"ptr/macro.addr_of_mut.html\" title=\"macro std::ptr::addr_of_mut\"><code>ptr::addr_of_mut!</code></a> (for <code>*mut T</code>).\nThese macros allow you to create raw pointers to fields to which you cannot\ncreate a reference (without causing undefined behaviour), such as an\nunaligned field. This might be necessary if packed structs or uninitialized\nmemory is involved.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Debug, Default, Copy, Clone)]\n#[repr(C, packed)]\n</span><span class=\"kw\">struct </span>S {\n    aligned: u8,\n    unaligned: u32,\n}\n<span class=\"kw\">let </span>s = S::default();\n<span class=\"kw\">let </span>p = <span class=\"macro\">std::ptr::addr_of!</span>(s.unaligned); <span class=\"comment\">// not allowed with coercion</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Debug,+Default,+Copy,+Clone)%5D%0A++++%23%5Brepr(C,+packed)%5D%0A++++struct+S+%7B%0A++++++++aligned:+u8,%0A++++++++unaligned:+u32,%0A++++%7D%0A++++let+s+=+S::default();%0A++++let+p+=+std::ptr::addr_of!(s.unaligned);+//+not+allowed+with+coercion%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"4-get-it-from-c\"><a class=\"doc-anchor\" href=\"#4-get-it-from-c\">§</a>4. Get it from C.</h3>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[allow(unused_extern_crates)]\n</span><span class=\"kw\">extern crate </span>libc;\n\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>my_num: <span class=\"kw-2\">*mut </span>i32 = libc::malloc(mem::size_of::&lt;i32&gt;()) <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"kw\">if </span>my_num.is_null() {\n        <span class=\"macro\">panic!</span>(<span class=\"string\">\"failed to allocate memory\"</span>);\n    }\n    libc::free(my_num <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>core::ffi::c_void);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++mod+libc+%7B%0A++++pub+unsafe+fn+malloc(_size:+usize)+-%3E+*mut+core::ffi::c_void+%7B+core::ptr::NonNull::dangling().as_ptr()+%7D%0A++++pub+unsafe+fn+free(_ptr:+*mut+core::ffi::c_void)+%7B%7D%0A++++%7D%0A++++%23%5Bcfg(any())%5D%0A++++%23%5Ballow(unused_extern_crates)%5D%0A++++extern+crate+libc;%0A++++%0A++++use+std::mem;%0A++++%0A++++unsafe+%7B%0A++++++++let+my_num:+*mut+i32+=+libc::malloc(mem::size_of::%3Ci32%3E())+as+*mut+i32;%0A++++++++if+my_num.is_null()+%7B%0A++++++++++++panic!(%22failed+to+allocate+memory%22);%0A++++++++%7D%0A++++++++libc::free(my_num+as+*mut+core::ffi::c_void);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Usually you wouldn’t literally use <code>malloc</code> and <code>free</code> from Rust,\nbut C APIs hand out a lot of pointers generally, so are a common source\nof raw pointers in Rust.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*const+%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1831\">source</a><a href=\"#impl-*const+%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1848\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119834\">#119834</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the array’s buffer.</p>\n<p>This is equivalent to casting <code>self</code> to <code>*const T</code>, but more type-safe.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>arr: <span class=\"kw-2\">*const </span>[i8; <span class=\"number\">3</span>] = ptr::null();\n<span class=\"macro\">assert_eq!</span>(arr.as_ptr(), ptr::null());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+arr:+*const+%5Bi8;+3%5D+=+ptr::null();%0A++++assert_eq!(arr.as_ptr(),+ptr::null());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1866\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_slice\" class=\"fn\">as_slice</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119834\">#119834</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to a slice containing the entire array.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_ptr_get)]\n\n</span><span class=\"kw\">let </span>arr: <span class=\"kw-2\">*const </span>[i32; <span class=\"number\">3</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>[i32; <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*const </span>[i32] = arr.as_slice();\n<span class=\"macro\">assert_eq!</span>(slice.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+arr:+*const+%5Bi32;+3%5D+=+%26%5B1,+2,+4%5D+as+*const+%5Bi32;+3%5D;%0A++++let+slice:+*const+%5Bi32%5D+=+arr.as_slice();%0A++++assert_eq!(slice.len(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*const+%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1691\">source</a><a href=\"#impl-*const+%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1711\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len\" class=\"fn\">len</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of a raw slice.</p>\n<p>The returned value is the number of <strong>elements</strong>, not the number of bytes.</p>\n<p>This function is safe, even when the raw slice cannot be cast to a slice\nreference because the pointer is null or unaligned.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*const </span>[i8] = ptr::slice_from_raw_parts(ptr::null(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1728\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the raw slice has a length of 0.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*const </span>[i8] = ptr::slice_from_raw_parts(ptr::null(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(!slice.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1748\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr-1\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the slice’s buffer.</p>\n<p>This is equivalent to casting <code>self</code> to <code>*const T</code>, but more type-safe.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*const </span>[i8] = ptr::slice_from_raw_parts(ptr::null(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.as_ptr(), ptr::null());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*const+%5Bi8%5D+=+ptr::slice_from_raw_parts(ptr::null(),+3);%0A++++assert_eq!(slice.as_ptr(),+ptr::null());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1773-1775\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(\n    self,\n    index: I,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to an element or subslice, without doing bounds\nchecking.</p>\n<p>Calling this method with an out-of-bounds index or when <code>self</code> is not dereferenceable\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n\n</span><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>[i32];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(x.get_unchecked(<span class=\"number\">1</span>), x.as_ptr().add(<span class=\"number\">1</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D+as+*const+%5Bi32%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked(1),+x.as_ptr().add(1));%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1821\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_slice\" class=\"fn\">as_uninit_slice</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a [<a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared slice to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads for <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> many bytes,\nand it must be properly aligned. This means in particular:</p>\n<ul>\n<li>\n<p>The entire memory range of this slice must be contained within a single <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The pointer must be aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"ptr/struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The total size <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<p>See also <a href=\"slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#7\">source</a><a href=\"#impl-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_null\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74939\" title=\"Tracking issue for const_ptr_is_null\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#35\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_null\" class=\"fn\">is_null</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the pointer is null.</p>\n<p>Note that unsized types have many possible null pointers, as only the\nraw data pointer is considered, not their length, vtable, etc.\nTherefore, two pointers that are null may still not compare equal to\neach other.</p>\n<h6 id=\"behavior-during-const-evaluation\"><a class=\"doc-anchor\" href=\"#behavior-during-const-evaluation\">§</a>Behavior during const evaluation</h6>\n<p>When this function is used during const evaluation, it may return <code>false</code> for pointers\nthat turn out to be null at runtime. Specifically, when a pointer to some memory\nis offset beyond its bounds in such a way that the resulting pointer is null,\nthe function will still return <code>false</code>. There is no way for CTFE to know\nthe absolute position of that memory, so we cannot tell if the pointer is\nnull or not.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"Follow the rabbit\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n<span class=\"macro\">assert!</span>(!ptr.is_null());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22Follow+the+rabbit%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++assert!(!ptr.is_null());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.38.0\">1.38.0 (const: 1.38.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#60\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a></h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_metadata_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#96-98\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.with_metadata_of\" class=\"fn\">with_metadata_of</a>&lt;U&gt;(self, meta: <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>set_ptr_value</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75091\">#75091</a>)</span></div></span></summary><div class=\"docblock\"><p>Use the pointer value in a new pointer of another type.</p>\n<p>In case <code>meta</code> is a (fat) pointer to an unsized type, this operation\nwill ignore the pointer part, whereas for (thin) pointers to sized\ntypes, this has the same effect as a simple cast.</p>\n<p>The resulting pointer will have provenance of <code>self</code>, i.e., for a fat\npointer, this operation is semantically the same as creating a new\nfat pointer with the data pointer value of <code>self</code> but the metadata of\n<code>meta</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>This function is primarily useful for allowing byte-wise pointer\narithmetic on potentially fat pointers:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span>arr: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = arr.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">dyn </span>Debug;\n<span class=\"kw\">let </span>thin = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">unsafe </span>{\n    ptr = thin.add(<span class=\"number\">8</span>).with_metadata_of(ptr);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw-2\">&amp;*</span>ptr); <span class=\"comment\">// will print \"3\"\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(set_ptr_value)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Debug;%0A++++let+arr:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+mut+ptr+=+arr.as_ptr()+as+*const+dyn+Debug;%0A++++let+thin+=+ptr+as+*const+u8;%0A++++unsafe+%7B%0A++++++++ptr+=+thin.add(8).with_metadata_of(ptr);%0A++++assert_eq!(*(ptr+as+*const+i32),+3);%0A++++++++println!(%22%7B:?%7D%22,+%26*ptr);+//+will+print+%223%22%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.65.0, const since 1.65.0\">1.65.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#111\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Changes constness without changing the type.</p>\n<p>This is a bit safer than <code>as</code> because it wouldn’t silently change the type if the code is\nrefactored.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#143-145\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.67.0: replaced by the <code>expose_provenance</code> method, or update your code to follow the strict provenance rules using its APIs</span></div><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_to_from_bits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91126\">#91126</a>)</span></div></span></summary><div class=\"docblock\"><p>Casts a pointer to its raw bits.</p>\n<p>This is equivalent to <code>as usize</code>, but is more specific to enhance readability.\nThe inverse method is <a href=\"#method.from_bits\"><code>from_bits</code></a>.</p>\n<p>In particular, <code>*p as usize</code> and <code>p as usize</code> will both compile for\npointers to numeric types but do very different things, so using this\nhelps emphasize that reading the bits was intentional.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_to_from_bits)]\n</span><span class=\"kw\">let </span>array = [<span class=\"number\">13</span>, <span class=\"number\">42</span>];\n<span class=\"kw\">let </span>p0: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">0</span>];\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"kw-2\">*const </span><span class=\"kw\">_</span>&gt;::from_bits(p0.to_bits()), p0);\n<span class=\"kw\">let </span>p1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>array[<span class=\"number\">1</span>];\n<span class=\"macro\">assert_eq!</span>(p1.to_bits() - p0.to_bits(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++let+array+=+%5B13,+42%5D;%0A++++let+p0:+*const+i32+=+%26array%5B0%5D;%0A++++assert_eq!(%3C*const+_%3E::from_bits(p0.to_bits()),+p0);%0A++++let+p1:+*const+i32+=+%26array%5B1%5D;%0A++++assert_eq!(p1.to_bits()+-+p0.to_bits(),+4);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#173-175\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_bits\" class=\"fn\">from_bits</a>(bits: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.67.0: replaced by the <code>ptr::with_exposed_provenance</code> function, or update your code to follow the strict provenance rules using its APIs</span></div><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_to_from_bits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91126\">#91126</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a pointer from its raw bits.</p>\n<p>This is equivalent to <code>as *const T</code>, but is more specific to enhance readability.\nThe inverse method is <a href=\"#method.to_bits\"><code>to_bits</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_to_from_bits)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">let </span>dangling: <span class=\"kw-2\">*const </span>u8 = NonNull::dangling().as_ptr();\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"kw-2\">*const </span>u8&gt;::from_bits(<span class=\"number\">1</span>), dangling);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++use+std::ptr::NonNull;%0A++++let+dangling:+*const+u8+=+NonNull::dangling().as_ptr();%0A++++assert_eq!(%3C*const+u8%3E::from_bits(1),+dangling);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#206\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>This is similar to <code>self as usize</code>, which semantically discards <em>provenance</em> and\n<em>address-space</em> information. However, unlike <code>self as usize</code>, casting the returned address\nback to a pointer yields a <a href=\"ptr/fn.without_provenance.html\" title=\"fn std::ptr::without_provenance\">pointer without provenance</a>, which is undefined behavior to dereference. To\nproperly restore the lost information and obtain a dereferenceable pointer, use\n<a href=\"primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a> or <a href=\"primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>map_addr</code></a>.</p>\n<p>If using those APIs is not possible because there is no way to preserve a pointer with the\nrequired provenance, then Strict Provenance might not be for you. Use pointer-integer casts\nor <a href=\"primitive.pointer.html#method.expose_provenance\" title=\"method pointer::expose_provenance\"><code>expose_provenance</code></a> and <a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a>\ninstead. However, note that this makes your code less portable and less amenable to tools\nthat check for compliance with the Rust memory model.</p>\n<p>On most platforms this will produce a value with the same bytes as the original\npointer, because all the bytes are dedicated to describing the address.\nPlatforms which need to store additional information in the pointer may\nperform a change of representation to produce a value containing only the address\nportion of the pointer. What that means is up to the platform to define.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment, and as such\nmight change in the future (including possibly weakening this so it becomes wholly\nequivalent to <code>self as usize</code>). See the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.expose_provenance\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#241\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exposed_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Exposes the “provenance” part of the pointer for future use in\n<a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> and returns the “address” portion.</p>\n<p>This is equivalent to <code>self as usize</code>, which semantically discards <em>provenance</em> and\n<em>address-space</em> information. Furthermore, this (like the <code>as</code> cast) has the implicit\nside-effect of marking the provenance as ‘exposed’, so on platforms that support it you can\nlater call <a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to reconstitute the original pointer including its\nprovenance. (Reconstructing address space information, if required, is your responsibility.)</p>\n<p>Using this method means that code is <em>not</em> following <a href=\"ptr/index.html#strict-provenance\" title=\"mod std::ptr\">Strict\nProvenance</a> rules. Supporting\n<a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> complicates specification and reasoning and may not be supported by\ntools that help you to stay conformant with the Rust memory model, so it is recommended to\nuse <a href=\"primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>addr</code></a> wherever possible.</p>\n<p>On most platforms this will produce a value with the same bytes as the original pointer,\nbecause all the bytes are dedicated to describing the address. Platforms which need to store\nadditional information in the pointer may not support this operation, since the ‘expose’\nside-effect which is required for <a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> to work is typically not\navailable.</p>\n<p>It is unclear whether this method can be given a satisfying unambiguous specification. This\nAPI and its claimed semantics are part of <a href=\"ptr/index.html#exposed-provenance\" title=\"mod std::ptr\">Exposed Provenance</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#261\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>This performs the same operation as an <code>addr as ptr</code> cast, but copies\nthe <em>address-space</em> and <em>provenance</em> of <code>self</code> to the new pointer.\nThis allows us to dynamically preserve and propagate this important\ninformation in a way that is otherwise impossible with a unary cast.</p>\n<p>This is equivalent to using <a href=\"primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>wrapping_offset</code></a> to offset\n<code>self</code> to the given address, and therefore has all the same capabilities and restrictions.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#284\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.map_addr\" class=\"fn\">map_addr</a>(self, f: impl <a class=\"trait\" href=\"ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one.</p>\n<p>This is a convenience for <a href=\"primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>, see that method for details.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#294\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.unit.html\">()</a>, &lt;T as <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"ptr/trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"ptr/fn.from_raw_parts.html\" title=\"fn std::ptr::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0, const unstable\">1.9.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#355\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. If the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {val_back}!\"</span>);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"null-unchecked-version\"><a class=\"doc-anchor\" href=\"#null-unchecked-version\">§</a>Null-unchecked version</h5>\n<p>If you are sure the pointer can never be null and are looking for some kind of\n<code>as_ref_unchecked</code> that returns the <code>&amp;T</code> instead of <code>Option&lt;&amp;T&gt;</code>, know that you can\ndereference the pointer directly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>val_back = <span class=\"kw-2\">&amp;*</span>ptr;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {val_back}!\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++let+val_back+=+%26*ptr;%0A++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#404\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_ref_unchecked\" class=\"fn\">as_ref_unchecked</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_ref_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122034\">#122034</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the value behind the pointer.\nIf the pointer may be null or the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a> must be used instead.\nIf the pointer may be null, but the value is known to have been initialized, <a href=\"#method.as_ref\"><code>as_ref</code></a> must be used instead.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_ref_unchecked)]\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {}!\"</span>, ptr.as_ref_unchecked());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+ptr.as_ref_unchecked());%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#449-451\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_uninit)]\n\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = <span class=\"kw-2\">&amp;</span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_uninit_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {}!\"</span>, val_back.assume_init());\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+ptr:+*const+u8+=+%2610u8+as+*const+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_uninit_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+val_back.assume_init());%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.61.0\">1.0.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#513-515\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum, <strong>in bytes</strong> must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_offset\"><code>wrapping_offset</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+*ptr.offset(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*ptr.offset(2)+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#537\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.61.0\">1.16.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#594-596\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_offset\" class=\"fn\">wrapping_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_offset((y as isize) - (x as isize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.offset\"><code>offset</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.offset\"><code>offset</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_offset</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.offset\"><code>offset</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())</code> is always the same as <code>x</code>. In other\nwords, leaving the allocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_offset(<span class=\"number\">6</span>);\n\n<span class=\"comment\">// This loop prints \"1, 3, 5, \"\n</span><span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr);\n    }\n    ptr = ptr.wrapping_offset(step);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_offset(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_offset(step);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#617\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_offset\" class=\"fn\">wrapping_byte_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\">wrapping_offset</a> on it. See that method\nfor documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#655\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.mask\" class=\"fn\">mask</a>(self, mask: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_mask</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98290\">#98290</a>)</span></div></span></summary><div class=\"docblock\"><p>Masks out bits of the pointer according to a mask.</p>\n<p>This is convenience for <code>ptr.map_addr(|a| a &amp; mask)</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n<h6 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_mask, strict_provenance)]\n</span><span class=\"kw\">let </span>v = <span class=\"number\">17_u32</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u32 = <span class=\"kw-2\">&amp;</span>v;\n\n<span class=\"comment\">// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\n</span><span class=\"kw\">let </span>tag_mask = <span class=\"number\">0b11</span>;\n<span class=\"kw\">let </span>ptr_mask = !tag_mask;\n\n<span class=\"comment\">// We can store something in these lower bits\n</span><span class=\"kw\">let </span>tagged_ptr = ptr.map_addr(|a| a | <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Get the \"tag\" back\n</span><span class=\"kw\">let </span>tag = tagged_ptr.addr() &amp; tag_mask;\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Note that `tagged_ptr` is unaligned, it's UB to read from it.\n// To get original pointer `mask` can be used:\n</span><span class=\"kw\">let </span>masked_ptr = tagged_ptr.mask(ptr_mask);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>masked_ptr }, <span class=\"number\">17</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_mask,+strict_provenance)%5D%0Afn+main()+%7B%0A++++let+v+=+17_u32;%0A++++let+ptr:+*const+u32+=+%26v;%0A++++%0A++++//+%60u32%60+is+4+bytes+aligned,%0A++++//+which+means+that+lower+2+bits+are+always+0.%0A++++let+tag_mask+=+0b11;%0A++++let+ptr_mask+=+!tag_mask;%0A++++%0A++++//+We+can+store+something+in+these+lower+bits%0A++++let+tagged_ptr+=+ptr.map_addr(%7Ca%7C+a+%7C+0b10);%0A++++%0A++++//+Get+the+%22tag%22+back%0A++++let+tag+=+tagged_ptr.addr()+%26+tag_mask;%0A++++assert_eq!(tag,+0b10);%0A++++%0A++++//+Note+that+%60tagged_ptr%60+is+unaligned,+it's+UB+to+read+from+it.%0A++++//+To+get+original+pointer+%60mask%60+can+be+used:%0A++++let+masked_ptr+=+tagged_ptr.mask(ptr_mask);%0A++++assert_eq!(unsafe+%7B+*masked_ptr+%7D,+17);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0, const since 1.65.0\">1.47.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#761-763\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p><code>self</code> and <code>origin</code> must either</p>\n<ul>\n<li>both be <em>derived from</em> a pointer to the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>, and the memory range between\nthe two pointers must be either empty or in bounds of that object. (See below for an example.)</li>\n<li>or both be derived from an integer literal/constant, and point to the same address.</li>\n</ul>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n<li>\n<p>The distance between the pointers, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The distance being in bounds cannot rely on “wrapping around” the address space.</p>\n</li>\n</ul>\n<p>Rust types are never larger than <code>isize::MAX</code> and Rust allocations never wrap around the\naddress space, so two pointers within some value of any Rust type <code>T</code> will always satisfy\nthe last two conditions. The standard library also generally ensures that allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code> and <code>Box</code> ensure they\nnever allocate more than <code>isize::MAX</code> bytes, so <code>ptr_into_vec.offset_from(vec.as_ptr())</code>\nalways satisfies the last two conditions.</p>\n<p>Most platforms fundamentally can’t even construct such a large allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.\n(Note that <a href=\"#method.offset\"><code>offset</code></a> and <a href=\"#method.add\"><code>add</code></a> also have a similar limitation and hence cannot be used on\nsuch large allocations either.)</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*const+i32+=+%26a%5B1%5D;%0A++++let+ptr2:+*const+i32+=+%26a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr1 = Box::into_raw(Box::new(<span class=\"number\">0u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>ptr2 = Box::into_raw(Box::new(<span class=\"number\">1u8</span>)) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n<span class=\"kw\">let </span>diff = (ptr2 <span class=\"kw\">as </span>isize).wrapping_sub(ptr1 <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = (ptr1 <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8).wrapping_offset(diff);\n<span class=\"macro\">assert_eq!</span>(ptr2 <span class=\"kw\">as </span>usize, ptr2_other <span class=\"kw\">as </span>usize);\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>zero = ptr2_other.offset_from(ptr2); <span class=\"comment\">// Undefined Behavior\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr1+=+Box::into_raw(Box::new(0u8))+as+*const+u8;%0A++++let+ptr2+=+Box::into_raw(Box::new(1u8))+as+*const+u8;%0A++++let+diff+=+(ptr2+as+isize).wrapping_sub(ptr1+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+(ptr1+as+*const+u8).wrapping_offset(diff);%0A++++assert_eq!(ptr2+as+usize,+ptr2_other+as+usize);%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++unsafe+%7B%0A++++++++let+zero+=+ptr2_other.offset_from(ptr2);+//+Undefined+Behavior%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#785\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.offset_from\" title=\"method pointer::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#854-856\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub_ptr\" class=\"fn\">sub_ptr</a>(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95892\">#95892</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be though of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+*const+i32,+origin:+*const+i32,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n\n</span><span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0A%0Afn+main()+%7B%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*const+i32+=+%26a%5B1%5D;%0A++++let+ptr2:+*const+i32+=+%26a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.sub_ptr(ptr2)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.guaranteed_eq\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#905-907\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.guaranteed_eq\" class=\"fn\">guaranteed_eq</a>(self, other: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53020\">#53020</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be equal.</p>\n<p>At runtime this function behaves like <code>Some(self == other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine equality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its equality known.\nBut when it returns <code>Some</code>, the pointers’ equality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.guaranteed_ne\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#935-937\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.guaranteed_ne\" class=\"fn\">guaranteed_ne</a>(self, other: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53020\">#53020</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be inequal.</p>\n<p>At runtime this function behaves like <code>Some(self != other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine inequality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its inequality known.\nBut when it returns <code>Some</code>, the pointers’ inequality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1000-1002\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for <code>.offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a <code>usize</code>.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_add\"><code>wrapping_add</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+*ptr.add(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*ptr.add(2)+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1024\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for <code>.byte_offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.add\" title=\"method pointer::add\">add</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1086-1088\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for\n<code>.offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset cannot exceed <code>isize::MAX</code> <strong>bytes</strong>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len()).sub(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_sub\"><code>wrapping_sub</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: <span class=\"kw-2\">*const </span>u8 = s.as_ptr().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>end.sub(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>end.sub(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+*const+u8+=+s.as_ptr().add(3);%0A++++++++println!(%22%7B%7D%22,+*end.sub(1)+as+char);%0A++++++++println!(%22%7B%7D%22,+*end.sub(2)+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1118\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for\n<code>.byte_offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.sub\" title=\"method pointer::sub\">sub</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1176-1178\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add\" class=\"fn\">wrapping_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.\n(convenience for <code>.wrapping_offset(count as isize)</code>)</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_add((y as usize) - (x as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.add\"><code>add</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.add\"><code>add</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_add</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.add\"><code>add</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_add(<span class=\"number\">6</span>);\n\n<span class=\"comment\">// This loop prints \"1, 3, 5, \"\n</span><span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr);\n    }\n    ptr = ptr.wrapping_add(step);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_add(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_add(step);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1198\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_add\" class=\"fn\">wrapping_byte_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.\n(convenience for <code>.wrapping_byte_offset(count as isize)</code>)</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_add\" title=\"method pointer::wrapping_add\">wrapping_add</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1255-1257\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.\n(convenience for <code>.wrapping_offset((count as isize).wrapping_neg())</code>)</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-11\"><a class=\"doc-anchor\" href=\"#safety-11\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_sub((x as usize) - (y as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.sub\"><code>sub</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.sub\"><code>sub</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_sub</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.sub\"><code>sub</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements (backwards)\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>start_rounded_down = ptr.wrapping_sub(<span class=\"number\">2</span>);\nptr = ptr.wrapping_add(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"comment\">// This loop prints \"5, 3, 1, \"\n</span><span class=\"kw\">while </span>ptr != start_rounded_down {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr);\n    }\n    ptr = ptr.wrapping_sub(step);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements+(backwards)%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+start_rounded_down+=+ptr.wrapping_sub(2);%0A++++ptr+=+ptr.wrapping_add(4);%0A++++let+step+=+2;%0A++++//+This+loop+prints+%225,+3,+1,+%22%0A++++while+ptr+!=+start_rounded_down+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_sub(step);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1277\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_sub\" class=\"fn\">wrapping_byte_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.\n(convenience for <code>.wrapping_offset((count as isize).wrapping_neg())</code>)</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_sub\" title=\"method pointer::wrapping_sub\">wrapping_sub</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1291-1293\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1312-1314\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"ptr/fn.read_volatile.html\" title=\"fn std::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1332-1334\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"ptr/fn.read_unaligned.html\" title=\"fn std::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1352-1354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1372-1374\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const unstable\">1.36.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/90962\" title=\"Tracking issue for const_align_offset\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1431-1433\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes. The value returned can be\nused with the <code>wrapping_add</code> method.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<p>When this is called during compile-time evaluation (which is unstable), the implementation\nmay return <code>usize::MAX</code> in cases where that can never happen at runtime. This is because the\nactual alignment of pointers is not known yet during compile-time, so an offset with\nguaranteed alignment can sometimes not be computed. For example, a buffer declared as <code>[u8; N]</code> might be allocated at an odd or an even address, but at compile-time this is not yet\nknown, so the execution has to be correct for either choice. It is therefore impossible to\nfind an offset that is guaranteed to be 2-aligned. (This behavior is subject to change, as usual\nfor unstable APIs.)</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = x.as_ptr();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || <span class=\"kw-2\">*</span>u16_ptr == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++%0A++++unsafe+%7B%0A++++let+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+x.as_ptr();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++assert!(*u16_ptr+==+u16::from_ne_bytes(%5B5,+6%5D)+%7C%7C+*u16_ptr+==+u16::from_ne_bytes(%5B6,+7%5D));%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const unstable\">1.79.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/104203\" title=\"Tracking issue for const_pointer_is_aligned\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1553-1555\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">1</span>).is_aligned());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!ptr.wrapping_byte_add(1).is_aligned());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime\"><a class=\"doc-anchor\" href=\"#at-compiletime\">§</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\nis never aligned if cast to a type with a stricter alignment than the reference’s\nunderlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(!ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.cast::&lt;AlignedI64&gt;().is_aligned());\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned());\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.cast::&lt;AlignedI64&gt;().is_aligned(),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned(),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// For pointers with a known address, runtime and compiletime behavior are identical.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned_to\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1668\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96284\">#96284</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime-1\"><a class=\"doc-anchor\" href=\"#at-compiletime-1\">§</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\ncannot be stricter aligned than the reference’s underlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n    <span class=\"comment\">// At compiletime, we know for sure that the pointer isn't aligned to 8.\n    </span><span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn't+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.is_aligned_to(<span class=\"number\">8</span>));\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.is_aligned_to(<span class=\"number\">8</span>),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">16</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#7\">source</a><a href=\"#impl-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_null-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/74939\" title=\"Tracking issue for const_ptr_is_null\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#35\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_null-1\" class=\"fn\">is_null</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the pointer is null.</p>\n<p>Note that unsized types have many possible null pointers, as only the\nraw data pointer is considered, not their length, vtable, etc.\nTherefore, two pointers that are null may still not compare equal to\neach other.</p>\n<h6 id=\"behavior-during-const-evaluation-1\"><a class=\"doc-anchor\" href=\"#behavior-during-const-evaluation-1\">§</a>Behavior during const evaluation</h6>\n<p>When this function is used during const evaluation, it may return <code>false</code> for pointers\nthat turn out to be null at runtime. Specifically, when a pointer to some memory\nis offset beyond its bounds in such a way that the resulting pointer is null,\nthe function will still return <code>false</code>. There is no way for CTFE to know\nthe absolute position of that memory, so we cannot tell if the pointer is\nnull or not.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = s.as_mut_ptr();\n<span class=\"macro\">assert!</span>(!ptr.is_null());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++assert!(!ptr.is_null());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.38.0\">1.38.0 (const: 1.38.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#59\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.cast-1\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut U</a></h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_metadata_of-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#95-97\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.with_metadata_of-1\" class=\"fn\">with_metadata_of</a>&lt;U&gt;(self, meta: <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut U</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>set_ptr_value</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75091\">#75091</a>)</span></div></span></summary><div class=\"docblock\"><p>Use the pointer value in a new pointer of another type.</p>\n<p>In case <code>meta</code> is a (fat) pointer to an unsized type, this operation\nwill ignore the pointer part, whereas for (thin) pointers to sized\ntypes, this has the same effect as a simple cast.</p>\n<p>The resulting pointer will have provenance of <code>self</code>, i.e., for a fat\npointer, this operation is semantically the same as creating a new\nfat pointer with the data pointer value of <code>self</code> but the metadata of\n<code>meta</code>.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<p>This function is primarily useful for allowing byte-wise pointer\narithmetic on potentially fat pointers:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(set_ptr_value)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr: [i32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = arr.as_mut_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">dyn </span>Debug;\n<span class=\"kw\">let </span>thin = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n<span class=\"kw\">unsafe </span>{\n    ptr = thin.add(<span class=\"number\">8</span>).with_metadata_of(ptr);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, <span class=\"kw-2\">&amp;*</span>ptr); <span class=\"comment\">// will print \"3\"\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(set_ptr_value)%5D%0Afn+main()+%7B%0A++++use+core::fmt::Debug;%0A++++let+mut+arr:+%5Bi32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+mut+ptr+=+arr.as_mut_ptr()+as+*mut+dyn+Debug;%0A++++let+thin+=+ptr+as+*mut+u8;%0A++++unsafe+%7B%0A++++++++ptr+=+thin.add(8).with_metadata_of(ptr);%0A++++assert_eq!(*(ptr+as+*mut+i32),+3);%0A++++++++println!(%22%7B:?%7D%22,+%26*ptr);+//+will+print+%223%22%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast_const\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.65.0, const since 1.65.0\">1.65.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#116\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.cast_const\" class=\"fn\">cast_const</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Changes constness without changing the type.</p>\n<p>This is a bit safer than <code>as</code> because it wouldn’t silently change the type if the code is\nrefactored.</p>\n<p>While not strictly required (<code>*mut T</code> coerces to <code>*const T</code>), this is provided for symmetry\nwith <a href=\"primitive.pointer.html#method.cast_mut\" title=\"method pointer::cast_mut\"><code>cast_mut</code></a> on <code>*const T</code> and may have documentation value if used instead of implicit\ncoercion.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#149-151\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_bits-1\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.67.0: replaced by the <code>expose_provenance</code> method, or update your code to follow the strict provenance rules using its APIs</span></div><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_to_from_bits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91126\">#91126</a>)</span></div></span></summary><div class=\"docblock\"><p>Casts a pointer to its raw bits.</p>\n<p>This is equivalent to <code>as usize</code>, but is more specific to enhance readability.\nThe inverse method is <a href=\"primitive.pointer.html#method.from_bits-1\" title=\"primitive pointer\"><code>from_bits</code></a>.</p>\n<p>In particular, <code>*p as usize</code> and <code>p as usize</code> will both compile for\npointers to numeric types but do very different things, so using this\nhelps emphasize that reading the bits was intentional.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_to_from_bits)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = [<span class=\"number\">13</span>, <span class=\"number\">42</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = array.iter_mut();\n<span class=\"kw\">let </span>p0: <span class=\"kw-2\">*mut </span>i32 = it.next().unwrap();\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>&gt;::from_bits(p0.to_bits()), p0);\n<span class=\"kw\">let </span>p1: <span class=\"kw-2\">*mut </span>i32 = it.next().unwrap();\n<span class=\"macro\">assert_eq!</span>(p1.to_bits() - p0.to_bits(), <span class=\"number\">4</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++let+mut+array+=+%5B13,+42%5D;%0A++++let+mut+it+=+array.iter_mut();%0A++++let+p0:+*mut+i32+=+it.next().unwrap();%0A++++assert_eq!(%3C*mut+_%3E::from_bits(p0.to_bits()),+p0);%0A++++let+p1:+*mut+i32+=+it.next().unwrap();%0A++++assert_eq!(p1.to_bits()+-+p0.to_bits(),+4);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#179-181\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_bits-1\" class=\"fn\">from_bits</a>(bits: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.67.0: replaced by the <code>ptr::with_exposed_provenance_mut</code> function, or update your code to follow the strict provenance rules using its APIs</span></div><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_to_from_bits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91126\">#91126</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a pointer from its raw bits.</p>\n<p>This is equivalent to <code>as *mut T</code>, but is more specific to enhance readability.\nThe inverse method is <a href=\"primitive.pointer.html#method.to_bits-1\" title=\"primitive pointer\"><code>to_bits</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_to_from_bits)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n<span class=\"kw\">let </span>dangling: <span class=\"kw-2\">*mut </span>u8 = NonNull::dangling().as_ptr();\n<span class=\"macro\">assert_eq!</span>(&lt;<span class=\"kw-2\">*mut </span>u8&gt;::from_bits(<span class=\"number\">1</span>), dangling);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_to_from_bits)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(not(miri))%5D+%7B+//+doctest+does+not+work+with+strict+provenance%0A++++use+std::ptr::NonNull;%0A++++let+dangling:+*mut+u8+=+NonNull::dangling().as_ptr();%0A++++assert_eq!(%3C*mut+u8%3E::from_bits(1),+dangling);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.addr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#213\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.addr-1\" class=\"fn\">addr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>This is similar to <code>self as usize</code>, which semantically discards <em>provenance</em> and\n<em>address-space</em> information. However, unlike <code>self as usize</code>, casting the returned address\nback to a pointer yields a <a href=\"ptr/fn.without_provenance_mut.html\" title=\"fn std::ptr::without_provenance_mut\">pointer without provenance</a>, which is undefined\nbehavior to dereference. To properly restore the lost information and obtain a\ndereferenceable pointer, use <a href=\"primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a> or\n<a href=\"primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>map_addr</code></a>.</p>\n<p>If using those APIs is not possible because there is no way to preserve a pointer with the\nrequired provenance, then Strict Provenance might not be for you. Use pointer-integer casts\nor <a href=\"primitive.pointer.html#method.expose_provenance\" title=\"method pointer::expose_provenance\"><code>expose_provenance</code></a> and <a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a>\ninstead. However, note that this makes your code less portable and less amenable to tools\nthat check for compliance with the Rust memory model.</p>\n<p>On most platforms this will produce a value with the same bytes as the original\npointer, because all the bytes are dedicated to describing the address.\nPlatforms which need to store additional information in the pointer may\nperform a change of representation to produce a value containing only the address\nportion of the pointer. What that means is up to the platform to define.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment, and as such\nmight change in the future (including possibly weakening this so it becomes wholly\nequivalent to <code>self as usize</code>). See the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.expose_provenance-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#247\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.expose_provenance-1\" class=\"fn\">expose_provenance</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exposed_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Exposes the “provenance” part of the pointer for future use in\n<a href=\"ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>with_exposed_provenance</code></a> and returns the “address” portion.</p>\n<p>This is equivalent to <code>self as usize</code>, which semantically discards <em>provenance</em> and\n<em>address-space</em> information. Furthermore, this (like the <code>as</code> cast) has the implicit\nside-effect of marking the provenance as ‘exposed’, so on platforms that support it you can\nlater call <a href=\"ptr/fn.with_exposed_provenance_mut.html\" title=\"fn std::ptr::with_exposed_provenance_mut\"><code>with_exposed_provenance_mut</code></a> to reconstitute the original pointer including its\nprovenance. (Reconstructing address space information, if required, is your responsibility.)</p>\n<p>Using this method means that code is <em>not</em> following <a href=\"ptr/index.html#strict-provenance\" title=\"mod std::ptr\">Strict\nProvenance</a> rules. Supporting\n<a href=\"ptr/fn.with_exposed_provenance_mut.html\" title=\"fn std::ptr::with_exposed_provenance_mut\"><code>with_exposed_provenance_mut</code></a> complicates specification and reasoning and may not be supported\nby tools that help you to stay conformant with the Rust memory model, so it is recommended\nto use <a href=\"primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>addr</code></a> wherever possible.</p>\n<p>On most platforms this will produce a value with the same bytes as the original pointer,\nbecause all the bytes are dedicated to describing the address. Platforms which need to store\nadditional information in the pointer may not support this operation, since the ‘expose’\nside-effect which is required for <a href=\"ptr/fn.with_exposed_provenance_mut.html\" title=\"fn std::ptr::with_exposed_provenance_mut\"><code>with_exposed_provenance_mut</code></a> to work is typically not\navailable.</p>\n<p>It is unclear whether this method can be given a satisfying unambiguous specification. This\nAPI and its claimed semantics are part of <a href=\"ptr/index.html#exposed-provenance\" title=\"mod std::ptr\">Exposed Provenance</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_addr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#267\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.with_addr-1\" class=\"fn\">with_addr</a>(self, addr: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>This performs the same operation as an <code>addr as ptr</code> cast, but copies\nthe <em>address-space</em> and <em>provenance</em> of <code>self</code> to the new pointer.\nThis allows us to dynamically preserve and propagate this important\ninformation in a way that is otherwise impossible with a unary cast.</p>\n<p>This is equivalent to using <a href=\"primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>wrapping_offset</code></a> to offset\n<code>self</code> to the given address, and therefore has all the same capabilities and restrictions.</p>\n<p>This API and its claimed semantics are an extension to the Strict Provenance experiment,\nsee the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_addr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#290\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.map_addr-1\" class=\"fn\">map_addr</a>(self, f: impl <a class=\"trait\" href=\"ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one.</p>\n<p>This is a convenience for <a href=\"primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>with_addr</code></a>, see that method for details.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"ptr/index.html\" title=\"mod std::ptr\">module documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_raw_parts-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#300\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_raw_parts-1\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.unit.html\">()</a>, &lt;T as <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"ptr/trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"ptr/fn.from_raw_parts_mut.html\" title=\"fn std::ptr::from_raw_parts_mut\"><code>from_raw_parts_mut</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0, const unstable\">1.9.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#364\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_ref-1\" class=\"fn\">as_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. If the value may be uninitialized, <a href=\"primitive.pointer.html#method.as_uninit_ref-1\" title=\"primitive pointer\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<p>For the mutable counterpart see <a href=\"#method.as_mut\"><code>as_mut</code></a>.</p>\n<h5 id=\"safety-12\"><a class=\"doc-anchor\" href=\"#safety-12\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {val_back}!\"</span>);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"null-unchecked-version-1\"><a class=\"doc-anchor\" href=\"#null-unchecked-version-1\">§</a>Null-unchecked version</h5>\n<p>If you are sure the pointer can never be null and are looking for some kind of\n<code>as_ref_unchecked</code> that returns the <code>&amp;T</code> instead of <code>Option&lt;&amp;T&gt;</code>, know that you can\ndereference the pointer directly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>val_back = <span class=\"kw-2\">&amp;*</span>ptr;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {val_back}!\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++let+val_back+=+%26*ptr;%0A++++++++println!(%22We+got+back+the+value:+%7Bval_back%7D!%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref_unchecked-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#416\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_ref_unchecked-1\" class=\"fn\">as_ref_unchecked</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_ref_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122034\">#122034</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to the value behind the pointer.\nIf the pointer may be null or the value may be uninitialized, <a href=\"#method.as_uninit_ref\"><code>as_uninit_ref</code></a> must be used instead.\nIf the pointer may be null, but the value is known to have been initialized, <a href=\"#method.as_ref\"><code>as_ref</code></a> must be used instead.</p>\n<p>For the mutable counterpart see <a href=\"#method.as_mut_unchecked\"><code>as_mut_unchecked</code></a>.</p>\n<h5 id=\"safety-13\"><a class=\"doc-anchor\" href=\"#safety-13\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_ref_unchecked)]\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {}!\"</span>, ptr.as_ref_unchecked());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+ptr.as_ref_unchecked());%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_ref-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#464-466\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_ref-1\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared reference to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"primitive.pointer.html#method.as_ref-1\" title=\"primitive pointer\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"#method.as_uninit_mut\"><code>as_uninit_mut</code></a>.</p>\n<h5 id=\"safety-14\"><a class=\"doc-anchor\" href=\"#safety-14\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_uninit)]\n\n</span><span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u8 = <span class=\"kw-2\">&amp;mut </span><span class=\"number\">10u8 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(val_back) = ptr.as_uninit_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"We got back the value: {}!\"</span>, val_back.assume_init());\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+ptr:+*mut+u8+=+%26mut+10u8+as+*mut+u8;%0A++++%0A++++unsafe+%7B%0A++++++++if+let+Some(val_back)+=+ptr.as_uninit_ref()+%7B%0A++++++++++++println!(%22We+got+back+the+value:+%7B%7D!%22,+val_back.assume_init());%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.61.0\">1.0.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#528-530\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset-1\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-15\"><a class=\"doc-anchor\" href=\"#safety-15\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum, <strong>in bytes</strong> must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_offset\"><code>wrapping_offset</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = s.as_mut_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, <span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, <span class=\"kw-2\">*</span>ptr.offset(<span class=\"number\">2</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(2,+*ptr.offset(1));%0A++++++++assert_eq!(3,+*ptr.offset(2));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#554\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset-1\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_offset-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0, const since 1.61.0\">1.16.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#610-612\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_offset-1\" class=\"fn\">wrapping_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.\n<code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-16\"><a class=\"doc-anchor\" href=\"#safety-16\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_offset((y as isize) - (x as isize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.offset\"><code>offset</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.offset\"><code>offset</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_offset</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.offset\"><code>offset</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_offset(o).wrapping_offset(o.wrapping_neg())</code> is always the same as <code>x</code>. In other\nwords, leaving the allocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*mut </span>u8 = data.as_mut_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_offset(<span class=\"number\">6</span>);\n\n<span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"kw-2\">*</span>ptr = <span class=\"number\">0</span>;\n    }\n    ptr = ptr.wrapping_offset(step);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>data, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+mut+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*mut+u8+=+data.as_mut_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_offset(6);%0A++++%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++*ptr+=+0;%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_offset(step);%0A++++%7D%0A++++assert_eq!(%26data,+%26%5B0,+2,+0,+4,+0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_offset-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#633\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_offset-1\" class=\"fn\">wrapping_byte_offset</a>(self, count: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\">wrapping_offset</a> on it. See that method\nfor documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mask-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#674\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.mask-1\" class=\"fn\">mask</a>(self, mask: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_mask</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98290\">#98290</a>)</span></div></span></summary><div class=\"docblock\"><p>Masks out bits of the pointer according to a mask.</p>\n<p>This is convenience for <code>ptr.map_addr(|a| a &amp; mask)</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n<h6 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_mask, strict_provenance)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"number\">17_u32</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = <span class=\"kw-2\">&amp;mut </span>v;\n\n<span class=\"comment\">// `u32` is 4 bytes aligned,\n// which means that lower 2 bits are always 0.\n</span><span class=\"kw\">let </span>tag_mask = <span class=\"number\">0b11</span>;\n<span class=\"kw\">let </span>ptr_mask = !tag_mask;\n\n<span class=\"comment\">// We can store something in these lower bits\n</span><span class=\"kw\">let </span>tagged_ptr = ptr.map_addr(|a| a | <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Get the \"tag\" back\n</span><span class=\"kw\">let </span>tag = tagged_ptr.addr() &amp; tag_mask;\n<span class=\"macro\">assert_eq!</span>(tag, <span class=\"number\">0b10</span>);\n\n<span class=\"comment\">// Note that `tagged_ptr` is unaligned, it's UB to read from/write to it.\n// To get original pointer `mask` can be used:\n</span><span class=\"kw\">let </span>masked_ptr = tagged_ptr.mask(ptr_mask);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>masked_ptr }, <span class=\"number\">17</span>);\n\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>masked_ptr = <span class=\"number\">0 </span>};\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_mask,+strict_provenance)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+17_u32;%0A++++let+ptr:+*mut+u32+=+%26mut+v;%0A++++%0A++++//+%60u32%60+is+4+bytes+aligned,%0A++++//+which+means+that+lower+2+bits+are+always+0.%0A++++let+tag_mask+=+0b11;%0A++++let+ptr_mask+=+!tag_mask;%0A++++%0A++++//+We+can+store+something+in+these+lower+bits%0A++++let+tagged_ptr+=+ptr.map_addr(%7Ca%7C+a+%7C+0b10);%0A++++%0A++++//+Get+the+%22tag%22+back%0A++++let+tag+=+tagged_ptr.addr()+%26+tag_mask;%0A++++assert_eq!(tag,+0b10);%0A++++%0A++++//+Note+that+%60tagged_ptr%60+is+unaligned,+it's+UB+to+read+from/write+to+it.%0A++++//+To+get+original+pointer+%60mask%60+can+be+used:%0A++++let+masked_ptr+=+tagged_ptr.mask(ptr_mask);%0A++++assert_eq!(unsafe+%7B+*masked_ptr+%7D,+17);%0A++++%0A++++unsafe+%7B+*masked_ptr+=+0+%7D;%0A++++assert_eq!(v,+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0, const unstable\">1.9.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#737\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a unique reference to\nthe value wrapped in <code>Some</code>. If the value may be uninitialized, <a href=\"#method.as_uninit_mut\"><code>as_uninit_mut</code></a>\nmust be used instead.</p>\n<p>For the shared counterpart see <a href=\"primitive.pointer.html#method.as_ref-1\" title=\"primitive pointer\"><code>as_ref</code></a>.</p>\n<h5 id=\"safety-17\"><a class=\"doc-anchor\" href=\"#safety-17\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = s.as_mut_ptr();\n<span class=\"kw\">let </span>first_value = <span class=\"kw\">unsafe </span>{ ptr.as_mut().unwrap() };\n<span class=\"kw-2\">*</span>first_value = <span class=\"number\">4</span>;\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{s:?}\"</span>); <span class=\"comment\">// It'll print: \"[4, 2, 3]\".</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+ptr.as_mut().unwrap()+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It'll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"null-unchecked-version-2\"><a class=\"doc-anchor\" href=\"#null-unchecked-version-2\">§</a>Null-unchecked version</h5>\n<p>If you are sure the pointer can never be null and are looking for some kind of\n<code>as_mut_unchecked</code> that returns the <code>&amp;mut T</code> instead of <code>Option&lt;&amp;mut T&gt;</code>, know that\nyou can dereference the pointer directly.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = s.as_mut_ptr();\n<span class=\"kw\">let </span>first_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>ptr };\n<span class=\"kw-2\">*</span>first_value = <span class=\"number\">4</span>;\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{s:?}\"</span>); <span class=\"comment\">// It'll print: \"[4, 2, 3]\".</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+%26mut+*ptr+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It'll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#790\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_mut_unchecked\" class=\"fn\">as_mut_unchecked</a>&lt;'a&gt;(self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_ref_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122034\">#122034</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique reference to the value behind the pointer.\nIf the pointer may be null or the value may be uninitialized, <a href=\"#method.as_uninit_mut\"><code>as_uninit_mut</code></a> must be used instead.\nIf the pointer may be null, but the value is known to have been initialized, <a href=\"#method.as_mut\"><code>as_mut</code></a> must be used instead.</p>\n<p>For the shared counterpart see <a href=\"#method.as_mut_unchecked\"><code>as_ref_unchecked</code></a>.</p>\n<h5 id=\"safety-18\"><a class=\"doc-anchor\" href=\"#safety-18\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_as_ref_unchecked)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>u32 = s.as_mut_ptr();\n<span class=\"kw\">let </span>first_value = <span class=\"kw\">unsafe </span>{ ptr.as_mut_unchecked() };\n<span class=\"kw-2\">*</span>first_value = <span class=\"number\">4</span>;\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{s:?}\"</span>); <span class=\"comment\">// It'll print: \"[4, 2, 3]\".</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_as_ref_unchecked)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+*mut+u32+=+s.as_mut_ptr();%0A++++let+first_value+=+unsafe+%7B+ptr.as_mut_unchecked()+%7D;%0A++++*first_value+=+4;%0A++++assert_eq!(s,+%5B4,+2,+3%5D);%0A++++println!(%22%7Bs:?%7D%22);+//+It'll+print:+%22%5B4,+2,+3%5D%22.%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#824-826\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_mut\" class=\"fn\">as_uninit_mut</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a mut <a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a unique reference to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"primitive.pointer.html#method.as_uninit_ref-1\" title=\"primitive pointer\"><code>as_uninit_ref</code></a>.</p>\n<h5 id=\"safety-19\"><a class=\"doc-anchor\" href=\"#safety-19\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.guaranteed_eq-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#853-855\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.guaranteed_eq-1\" class=\"fn\">guaranteed_eq</a>(self, other: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53020\">#53020</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be equal.</p>\n<p>At runtime this function behaves like <code>Some(self == other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine equality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its equality known.\nBut when it returns <code>Some</code>, the pointers’ equality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.guaranteed_ne-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#880-882\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.guaranteed_ne-1\" class=\"fn\">guaranteed_ne</a>(self, other: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>const_raw_ptr_comparison</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53020\">#53020</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether two pointers are guaranteed to be inequal.</p>\n<p>At runtime this function behaves like <code>Some(self != other)</code>.\nHowever, in some contexts (e.g., compile-time evaluation),\nit is not always possible to determine inequality of two pointers, so this function may\nspuriously return <code>None</code> for pointers that later actually turn out to have its inequality known.\nBut when it returns <code>Some</code>, the pointers’ inequality is guaranteed to be known.</p>\n<p>The return value may change from <code>Some</code> to <code>None</code> and vice versa depending on the compiler\nversion and unsafe code must not\nrely on the result of this function for soundness. It is suggested to only use this function\nfor performance optimizations where spurious <code>None</code> return values by this function do not\naffect the outcome, but just the performance.\nThe consequences of using this method to make runtime and compile-time code behave\ndifferently have not been explored. This method should not be used to introduce such\ndifferences, and it should also not be stabilized before we have a better understanding\nof this issue.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset_from-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0, const since 1.65.0\">1.47.0 (const: 1.65.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#989-991\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset_from-1\" class=\"fn\">offset_from</a>(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-20\"><a class=\"doc-anchor\" href=\"#safety-20\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p><code>self</code> and <code>origin</code> must either</p>\n<ul>\n<li>both be <em>derived from</em> a pointer to the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>, and the memory range between\nthe two pointers must be either empty or in bounds of that object. (See below for an example.)</li>\n<li>or both be derived from an integer literal/constant, and point to the same address.</li>\n</ul>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n<li>\n<p>The distance between the pointers, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The distance being in bounds cannot rely on “wrapping around” the address space.</p>\n</li>\n</ul>\n<p>Rust types are never larger than <code>isize::MAX</code> and Rust allocations never wrap around the\naddress space, so two pointers within some value of any Rust type <code>T</code> will always satisfy\nthe last two conditions. The standard library also generally ensures that allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code> and <code>Box</code> ensure they\nnever allocate more than <code>isize::MAX</code> bytes, so <code>ptr_into_vec.offset_from(vec.as_ptr())</code>\nalways satisfies the last two conditions.</p>\n<p>Most platforms fundamentally can’t even construct such a large allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.\n(Note that <a href=\"primitive.pointer.html#method.offset-1\" title=\"primitive pointer\"><code>offset</code></a> and <a href=\"#method.add\"><code>add</code></a> also have a similar limitation and hence cannot be used on\nsuch large allocations either.)</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*mut </span>i32 = <span class=\"kw-2\">&amp;mut </span>a[<span class=\"number\">1</span>];\n<span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*mut </span>i32 = <span class=\"kw-2\">&amp;mut </span>a[<span class=\"number\">3</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B0;+5%5D;%0A++++let+ptr1:+*mut+i32+=+%26mut+a%5B1%5D;%0A++++let+ptr2:+*mut+i32+=+%26mut+a%5B3%5D;%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>ptr1 = Box::into_raw(Box::new(<span class=\"number\">0u8</span>));\n<span class=\"kw\">let </span>ptr2 = Box::into_raw(Box::new(<span class=\"number\">1u8</span>));\n<span class=\"kw\">let </span>diff = (ptr2 <span class=\"kw\">as </span>isize).wrapping_sub(ptr1 <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = (ptr1 <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8).wrapping_offset(diff);\n<span class=\"macro\">assert_eq!</span>(ptr2 <span class=\"kw\">as </span>usize, ptr2_other <span class=\"kw\">as </span>usize);\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>zero = ptr2_other.offset_from(ptr2); <span class=\"comment\">// Undefined Behavior\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+ptr1+=+Box::into_raw(Box::new(0u8));%0A++++let+ptr2+=+Box::into_raw(Box::new(1u8));%0A++++let+diff+=+(ptr2+as+isize).wrapping_sub(ptr1+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+(ptr1+as+*mut+u8).wrapping_offset(diff);%0A++++assert_eq!(ptr2+as+usize,+ptr2_other+as+usize);%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++unsafe+%7B%0A++++++++let+zero+=+ptr2_other.offset_from(ptr2);+//+Undefined+Behavior%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset_from-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1011\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset_from-1\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>) -&gt; <a class=\"primitive\" href=\"primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.offset_from\" title=\"method pointer::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_ptr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1081-1083\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub_ptr-1\" class=\"fn\">sub_ptr</a>(self, origin: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95892\">#95892</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be though of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+*mut+i32,+origin:+*mut+i32,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-21\"><a class=\"doc-anchor\" href=\"#safety-21\">§</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>p: <span class=\"kw-2\">*mut </span>i32 = a.as_mut_ptr();\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr1: <span class=\"kw-2\">*mut </span>i32 = p.add(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2: <span class=\"kw-2\">*mut </span>i32 = p.add(<span class=\"number\">3</span>);\n\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.offset_from(ptr2)</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0A%0Afn+main()+%7B%0A++++let+mut+a+=+%5B0;+5%5D;%0A++++let+p:+*mut+i32+=+a.as_mut_ptr();%0A++++unsafe+%7B%0A++++++++let+ptr1:+*mut+i32+=+p.add(1);%0A++++++++let+ptr2:+*mut+i32+=+p.add(3);%0A++++%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.offset_from(ptr2)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1144-1146\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.add-1\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for <code>.offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-22\"><a class=\"doc-anchor\" href=\"#safety-22\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a <code>usize</code>.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_add\"><code>wrapping_add</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*const </span>u8 = s.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">'2'</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">'3'</span>, <span class=\"kw-2\">*</span>ptr.add(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+*const+u8+=+s.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!('2',+*ptr.add(1)+as+char);%0A++++++++assert_eq!('3',+*ptr.add(2)+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1168\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_add-1\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for <code>.byte_offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.add\" title=\"method pointer::add\">add</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1230-1232\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub-1\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for\n<code>.offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-23\"><a class=\"doc-anchor\" href=\"#safety-23\">§</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>If the computed offset, <strong>in bytes</strong>, is non-zero, then both the starting and resulting\npointer must be either in bounds or at the end of the same <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\n(If it is zero, then the function is always well-defined.)</p>\n</li>\n<li>\n<p>The computed offset cannot exceed <code>isize::MAX</code> <strong>bytes</strong>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len()).sub(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<p>Consider using <a href=\"#method.wrapping_sub\"><code>wrapping_sub</code></a> instead if these constraints are\ndifficult to satisfy. The only advantage of this method is that it\nenables more aggressive compiler optimizations.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: <span class=\"kw-2\">*const </span>u8 = s.as_ptr().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">'3'</span>, <span class=\"kw-2\">*</span>end.sub(<span class=\"number\">1</span>) <span class=\"kw\">as </span>char);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"string\">'2'</span>, <span class=\"kw-2\">*</span>end.sub(<span class=\"number\">2</span>) <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+*const+u8+=+s.as_ptr().add(3);%0A++++++++assert_eq!('3',+*end.sub(1)+as+char);%0A++++++++assert_eq!('2',+*end.sub(2)+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1262\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_sub-1\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for\n<code>.byte_offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.sub\" title=\"method pointer::sub\">sub</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1320-1322\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_add-1\" class=\"fn\">wrapping_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.\n(convenience for <code>.wrapping_offset(count as isize)</code>)</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-24\"><a class=\"doc-anchor\" href=\"#safety-24\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_add((y as usize) - (x as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.add\"><code>add</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.add\"><code>add</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_add</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.add\"><code>add</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"kw\">let </span>end_rounded_up = ptr.wrapping_add(<span class=\"number\">6</span>);\n\n<span class=\"comment\">// This loop prints \"1, 3, 5, \"\n</span><span class=\"kw\">while </span>ptr != end_rounded_up {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr);\n    }\n    ptr = ptr.wrapping_add(step);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+step+=+2;%0A++++let+end_rounded_up+=+ptr.wrapping_add(6);%0A++++%0A++++//+This+loop+prints+%221,+3,+5,+%22%0A++++while+ptr+!=+end_rounded_up+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_add(step);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_add-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1342\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_add-1\" class=\"fn\">wrapping_byte_add</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.\n(convenience for <code>.wrapping_byte_offset(count as isize)</code>)</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_add\" title=\"method pointer::wrapping_add\">wrapping_add</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.61.0\">1.26.0 (const: 1.61.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1399-1401\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_sub-1\" class=\"fn\">wrapping_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.\n(convenience for <code>.wrapping_offset((count as isize).wrapping_neg())</code>)</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-25\"><a class=\"doc-anchor\" href=\"#safety-25\">§</a>Safety</h5>\n<p>This operation itself is always safe, but using the resulting pointer is not.</p>\n<p>The resulting pointer “remembers” the <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a> that <code>self</code> points to; it must not\nbe used to read or write other allocated objects.</p>\n<p>In other words, <code>let z = x.wrapping_sub((x as usize) - (y as usize))</code> does <em>not</em> make <code>z</code>\nthe same as <code>y</code> even if we assume <code>T</code> has size <code>1</code> and there is no overflow: <code>z</code> is still\nattached to the object <code>x</code> is attached to, and dereferencing it is Undefined Behavior unless\n<code>x</code> and <code>y</code> point into the same allocated object.</p>\n<p>Compared to <a href=\"#method.sub\"><code>sub</code></a>, this method basically delays the requirement of staying within the\nsame allocated object: <a href=\"#method.sub\"><code>sub</code></a> is immediate Undefined Behavior when crossing object\nboundaries; <code>wrapping_sub</code> produces a pointer but still leads to Undefined Behavior if a\npointer is dereferenced when it is out-of-bounds of the object it is attached to. <a href=\"#method.sub\"><code>sub</code></a>\ncan be optimized better and is thus preferable in performance-sensitive code.</p>\n<p>The delayed check only considers the value of the pointer that was dereferenced, not the\nintermediate values used during the computation of the final result. For example,\n<code>x.wrapping_add(o).wrapping_sub(o)</code> is always the same as <code>x</code>. In other words, leaving the\nallocated object and then re-entering it later is permitted.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Iterate using a raw pointer in increments of two elements (backwards)\n</span><span class=\"kw\">let </span>data = [<span class=\"number\">1u8</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr: <span class=\"kw-2\">*const </span>u8 = data.as_ptr();\n<span class=\"kw\">let </span>start_rounded_down = ptr.wrapping_sub(<span class=\"number\">2</span>);\nptr = ptr.wrapping_add(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>step = <span class=\"number\">2</span>;\n<span class=\"comment\">// This loop prints \"5, 3, 1, \"\n</span><span class=\"kw\">while </span>ptr != start_rounded_down {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">print!</span>(<span class=\"string\">\"{}, \"</span>, <span class=\"kw-2\">*</span>ptr);\n    }\n    ptr = ptr.wrapping_sub(step);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Iterate+using+a+raw+pointer+in+increments+of+two+elements+(backwards)%0Afn+main()+%7B%0A++++let+data+=+%5B1u8,+2,+3,+4,+5%5D;%0A++++let+mut+ptr:+*const+u8+=+data.as_ptr();%0A++++let+start_rounded_down+=+ptr.wrapping_sub(2);%0A++++ptr+=+ptr.wrapping_add(4);%0A++++let+step+=+2;%0A++++//+This+loop+prints+%225,+3,+1,+%22%0A++++while+ptr+!=+start_rounded_down+%7B%0A++++++++unsafe+%7B%0A++++++++++++print!(%22%7B%7D,+%22,+*ptr);%0A++++++++%7D%0A++++++++ptr+=+ptr.wrapping_sub(step);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wrapping_byte_sub-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0, const since 1.75.0\">1.75.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1421\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.wrapping_byte_sub-1\" class=\"fn\">wrapping_byte_sub</a>(self, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes using wrapping arithmetic.\n(convenience for <code>.wrapping_offset((count as isize).wrapping_neg())</code>)</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"primitive.pointer.html#method.wrapping_sub\" title=\"method pointer::wrapping_sub\">wrapping_sub</a> on it. See that method for documentation.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1435-1437\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read-1\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_volatile-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1456-1458\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.read_volatile-1\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"ptr/fn.read_volatile.html\" title=\"fn std::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_unaligned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const since 1.71.0\">1.26.0 (const: 1.71.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1476-1478\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read_unaligned-1\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"ptr/fn.read_unaligned.html\" title=\"fn std::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1496-1498\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to-1\" class=\"fn\">copy_to</a>(self, dest: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to_nonoverlapping-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1516-1518\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to_nonoverlapping-1\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1536-1538\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_from\" class=\"fn\">copy_from</a>(self, src: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_from_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1556-1558\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_from_nonoverlapping\" class=\"fn\">copy_from_nonoverlapping</a>(self, src: <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"ptr/fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop_in_place\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1571\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.drop_in_place\" class=\"fn\">drop_in_place</a>(self)</h4></section></summary><div class=\"docblock\"><p>Executes the destructor (if any) of the pointed-to value.</p>\n<p>See <a href=\"ptr/fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>ptr::drop_in_place</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1586-1588\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write\" class=\"fn\">write</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>See <a href=\"ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>ptr::write</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1605-1607\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_bytes\" class=\"fn\">write_bytes</a>(self, val: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>, count: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes memset on the specified pointer, setting <code>count * size_of::&lt;T&gt;()</code>\nbytes of memory starting at <code>self</code> to <code>val</code>.</p>\n<p>See <a href=\"ptr/fn.write_bytes.html\" title=\"fn std::ptr::write_bytes\"><code>ptr::write_bytes</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1626-1628\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_volatile\" class=\"fn\">write_volatile</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"ptr/fn.write_volatile.html\" title=\"fn std::ptr::write_volatile\"><code>ptr::write_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1646-1648\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_unaligned\" class=\"fn\">write_unaligned</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>Unlike <code>write</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"ptr/fn.write_unaligned.html\" title=\"fn std::ptr::write_unaligned\"><code>ptr::write_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1662-1664\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.replace\" class=\"fn\">replace</a>(self, src: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the value at <code>self</code> with <code>src</code>, returning the old\nvalue, without dropping either.</p>\n<p>See <a href=\"ptr/fn.replace.html\" title=\"fn std::ptr::replace\"><code>ptr::replace</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0, const unstable\">1.26.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/83163\" title=\"Tracking issue for const_swap\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1680-1682\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.swap\" class=\"fn\">swap</a>(self, with: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike <code>mem::swap</code> which is\notherwise equivalent.</p>\n<p>See <a href=\"ptr/fn.swap.html\" title=\"fn std::ptr::swap\"><code>ptr::swap</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_offset-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const unstable\">1.36.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/90962\" title=\"Tracking issue for const_align_offset\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1741-1743\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.align_offset-1\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes. The value returned can be\nused with the <code>wrapping_add</code> method.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<p>When this is called during compile-time evaluation (which is unstable), the implementation\nmay return <code>usize::MAX</code> in cases where that can never happen at runtime. This is because the\nactual alignment of pointers is not known yet during compile-time, so an offset with\nguaranteed alignment can sometimes not be computed. For example, a buffer declared as <code>[u8; N]</code> might be allocated at an odd or an even address, but at compile-time this is not yet\nknown, so the execution has to be correct for either choice. It is therefore impossible to\nfind an offset that is guaranteed to be 2-aligned. (This behavior is subject to change, as usual\nfor unstable APIs.)</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = x.as_mut_ptr();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"kw-2\">*</span>u16_ptr = <span class=\"number\">0</span>;\n\n    <span class=\"macro\">assert!</span>(x == [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>] || x == [<span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]);\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++%0A++++unsafe+%7B%0A++++let+mut+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+x.as_mut_ptr();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++*u16_ptr+=+0;%0A++++%0A++++++++assert!(x+==+%5B0,+0,+7,+8,+9%5D+%7C%7C+x+==+%5B5,+0,+0,+8,+9%5D);%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const unstable\">1.79.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/104203\" title=\"Tracking issue for const_pointer_is_aligned\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1868-1870\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_aligned-1\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>data <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">1</span>).is_aligned());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+mut+data+=+AlignedI32(42);%0A++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!ptr.wrapping_byte_add(1).is_aligned());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime-2\"><a class=\"doc-anchor\" href=\"#at-compiletime-2\">§</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\nis never aligned if cast to a type with a stricter alignment than the reference’s\nunderlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n#![feature(const_mut_refs)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>data <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(!ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_mut_refs)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+mut+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n// Also, note that mutable references are not allowed in the final value of constants.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*mut </span>AlignedI32 = (<span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32).cast_mut();\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.cast::&lt;AlignedI64&gt;().is_aligned());\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned());\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.cast::&lt;AlignedI64&gt;().is_aligned(),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned(),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++//+Also,+note+that+mutable+references+are+not+allowed+in+the+final+value+of+constants.%0A++++const+COMPTIME_PTR:+*mut+AlignedI32+=+(%26AlignedI32(42)+as+*const+AlignedI32).cast_mut();%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// For pointers with a known address, runtime and compiletime behavior are identical.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*mut+AlignedI32;%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+ptr.wrapping_add(1).cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned_to-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#1985\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_aligned_to-1\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96284\">#96284</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>data <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+mut+data+=+AlignedI32(42);%0A++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime-3\"><a class=\"doc-anchor\" href=\"#at-compiletime-3\">§</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\ncannot be stricter aligned than the reference’s underlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n#![feature(const_mut_refs)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>data <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32;\n\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n    <span class=\"comment\">// At compiletime, we know for sure that the pointer isn't aligned to 8.\n    </span><span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_mut_refs)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+mut+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26mut+data+as+*mut+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn't+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n// Also, note that mutable references are not allowed in the final value of constants.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*mut </span>AlignedI32 = (<span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>) <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32).cast_mut();\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.is_aligned_to(<span class=\"number\">8</span>));\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.is_aligned_to(<span class=\"number\">8</span>),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++//+Also,+note+that+mutable+references+are+not+allowed+in+the+final+value+of+constants.%0A++++const+COMPTIME_PTR:+*mut+AlignedI32+=+(%26AlignedI32(42)+as+*const+AlignedI32).cast_mut();%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">16</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*mut+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*mut+%5BT%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2008\">source</a><a href=\"#impl-*mut+%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2028\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len-1\" class=\"fn\">len</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of a raw slice.</p>\n<p>The returned value is the number of <strong>elements</strong>, not the number of bytes.</p>\n<p>This function is safe, even when the raw slice cannot be cast to a slice\nreference because the pointer is null or unaligned.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*mut </span>[i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2045\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_empty-1\" class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the raw slice has a length of 0.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*mut </span>[i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(!slice.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2092\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.split_at_mut\" class=\"fn\">split_at_mut</a>(self, mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>raw_slice_split</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95595\">#95595</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable raw slice into two at an index.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if <code>mid &gt; len</code>.</p>\n<h5 id=\"safety-26\"><a class=\"doc-anchor\" href=\"#safety-26\">§</a>Safety</h5>\n<p><code>mid</code> must be <a href=\"#method.add\">in-bounds</a> of the underlying <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.\nWhich means <code>self</code> must be dereferenceable and span a single allocation\nthat is at least <code>mid * size_of::&lt;T&gt;()</code> bytes long. Not upholding these\nrequirements is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointers are not used.</p>\n<p>Since <code>len</code> being in-bounds it is not a safety invariant of <code>*mut [T]</code> the\nsafety requirements of this method are the same as for <a href=\"#method.split_at_mut_unchecked\"><code>split_at_mut_unchecked</code></a>.\nThe explicit bounds check is only as useful as <code>len</code> is correct.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(raw_slice_split)]\n#![feature(slice_ptr_get)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>v <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>[<span class=\"kw\">_</span>];\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>(left, right) = ptr.split_at_mut(<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>left, [<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>right, [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(raw_slice_split)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+ptr+=+%26mut+v+as+*mut+%5B_%5D;%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+ptr.split_at_mut(2);%0A++++++++assert_eq!(%26*left,+%5B1,+0%5D);%0A++++++++assert_eq!(%26*right,+%5B3,+0,+5,+6%5D);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2135\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.split_at_mut_unchecked\" class=\"fn\">split_at_mut_unchecked</a>(self, mid: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>raw_slice_split</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95595\">#95595</a>)</span></div></span></summary><div class=\"docblock\"><p>Divides one mutable raw slice into two at an index, without doing bounds checking.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<h5 id=\"safety-27\"><a class=\"doc-anchor\" href=\"#safety-27\">§</a>Safety</h5>\n<p><code>mid</code> must be <a href=\"#method.add\">in-bounds</a> of the underlying [allocated object].\nWhich means <code>self</code> must be dereferenceable and span a single allocation\nthat is at least <code>mid * size_of::&lt;T&gt;()</code> bytes long. Not upholding these\nrequirements is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointers are not used.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(raw_slice_split)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"comment\">// scoped to restrict the lifetime of the borrows\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;mut </span>v <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>[<span class=\"kw\">_</span>];\n    <span class=\"kw\">let </span>(left, right) = ptr.split_at_mut_unchecked(<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>left, [<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>right, [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    (<span class=\"kw-2\">&amp;mut *</span>left)[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\n    (<span class=\"kw-2\">&amp;mut *</span>right)[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(raw_slice_split)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++//+scoped+to+restrict+the+lifetime+of+the+borrows%0A++++unsafe+%7B%0A++++++++let+ptr+=+%26mut+v+as+*mut+%5B_%5D;%0A++++++++let+(left,+right)+=+ptr.split_at_mut_unchecked(2);%0A++++++++assert_eq!(%26*left,+%5B1,+0%5D);%0A++++++++assert_eq!(%26*right,+%5B3,+0,+5,+6%5D);%0A++++++++(%26mut+*left)%5B1%5D+=+2;%0A++++++++(%26mut+*right)%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2163\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the slice’s buffer.</p>\n<p>This is equivalent to casting <code>self</code> to <code>*mut T</code>, but more type-safe.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>slice: <span class=\"kw-2\">*mut </span>[i8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.as_mut_ptr(), ptr::null_mut());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+slice:+*mut+%5Bi8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+3);%0A++++assert_eq!(slice.as_mut_ptr(),+ptr::null_mut());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2189-2191\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    self,\n    index: I,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;I as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to an element or subslice, without doing bounds\nchecking.</p>\n<p>Calling this method with an <a href=\"#method.add\">out-of-bounds index</a> or when <code>self</code> is not dereferenceable\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n\n</span><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>[i32];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(x.get_unchecked_mut(<span class=\"number\">1</span>), x.as_mut_ptr().add(<span class=\"number\">1</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D+as+*mut+%5Bi32%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked_mut(1),+x.as_mut_ptr().add(1));%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_slice-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2240\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_slice-1\" class=\"fn\">as_uninit_slice</a>&lt;'a&gt;(self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a [<a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a shared slice to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"primitive.pointer.html#method.as_ref-1\" title=\"primitive pointer\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"#method.as_uninit_slice_mut\"><code>as_uninit_slice_mut</code></a>.</p>\n<h5 id=\"safety-28\"><a class=\"doc-anchor\" href=\"#safety-28\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads for <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> many bytes,\nand it must be properly aligned. This means in particular:</p>\n<ul>\n<li>\n<p>The entire memory range of this slice must be contained within a single <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The pointer must be aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"ptr/struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The total size <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<p>See also <a href=\"slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2292\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_slice_mut\" class=\"fn\">as_uninit_slice_mut</a>&lt;'a&gt;(\n    self,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a mut [<a class=\"union\" href=\"mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>None</code> if the pointer is null, or else returns a unique slice to\nthe value wrapped in <code>Some</code>. In contrast to <a href=\"#method.as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"#method.as_uninit_slice-1\"><code>as_uninit_slice</code></a>.</p>\n<h5 id=\"safety-29\"><a class=\"doc-anchor\" href=\"#safety-29\">§</a>Safety</h5>\n<p>When calling this method, you have to ensure that <em>either</em> the pointer is null <em>or</em>\nall of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be <a href=\"ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads and writes for <code>ptr.len() * mem::size_of::&lt;T&gt;()</code>\nmany bytes, and it must be properly aligned. This means in particular:</p>\n<ul>\n<li>\n<p>The entire memory range of this slice must be contained within a single <a href=\"ptr/index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The pointer must be aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"ptr/struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The total size <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<p>See also <a href=\"slice/fn.from_raw_parts_mut.html\" title=\"fn std::slice::from_raw_parts_mut\"><code>slice::from_raw_parts_mut</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-*mut+%5BT;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2302\">source</a><a href=\"#impl-*mut+%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.array.html\">[T; N]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2319\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_mut_ptr-1\" class=\"fn\">as_mut_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119834\">#119834</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the array’s buffer.</p>\n<p>This is equivalent to casting <code>self</code> to <code>*mut T</code>, but more type-safe.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>arr: <span class=\"kw-2\">*mut </span>[i8; <span class=\"number\">3</span>] = ptr::null_mut();\n<span class=\"macro\">assert_eq!</span>(arr.as_mut_ptr(), ptr::null_mut());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+arr:+*mut+%5Bi8;+3%5D+=+ptr::null_mut();%0A++++assert_eq!(arr.as_mut_ptr(),+ptr::null_mut());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2340\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_mut_slice\" class=\"fn\">as_mut_slice</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119834\">#119834</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to a mutable slice containing the entire array.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_ptr_get)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>[i32; <span class=\"number\">3</span>] = <span class=\"kw-2\">&amp;mut </span>arr;\n<span class=\"kw\">unsafe </span>{\n    (<span class=\"kw-2\">&amp;mut *</span>ptr.as_mut_slice())[..<span class=\"number\">2</span>].copy_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n}\n<span class=\"macro\">assert_eq!</span>(arr, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_ptr_get)%5D%0A%0Afn+main()+%7B%0A++++let+mut+arr+=+%5B1,+2,+5%5D;%0A++++let+ptr:+*mut+%5Bi32;+3%5D+=+%26mut+arr;%0A++++unsafe+%7B%0A++++++++(%26mut+*ptr.as_mut_slice())%5B..2%5D.copy_from_slice(%26%5B3,+4%5D);%0A++++%7D%0A++++assert_eq!(arr,+%5B3,+4,+5%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2816\">source</a><a href=\"#impl-AggregateRawPtr%3C*const+T%3E-for-*const+P\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; <a class=\"trait\" href=\"intrinsics/trait.AggregateRawPtr.html\" title=\"trait std::intrinsics::AggregateRawPtr\">AggregateRawPtr</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*const P</a><div class=\"where\">where\n    T: <a class=\"traitalias\" href=\"https://doc.rust-lang.org/1.80.0/core/ptr/metadata/traitalias.Thin.html\" title=\"traitalias core::ptr::metadata::Thin\">Thin</a>,\n    P: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Metadata-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Metadata-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"intrinsics/trait.AggregateRawPtr.html#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a> = &lt;P as <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"ptr/trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AggregateRawPtr%3C*mut+T%3E-for-*mut+P\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2819\">source</a><a href=\"#impl-AggregateRawPtr%3C*mut+T%3E-for-*mut+P\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P, T&gt; <a class=\"trait\" href=\"intrinsics/trait.AggregateRawPtr.html\" title=\"trait std::intrinsics::AggregateRawPtr\">AggregateRawPtr</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut P</a><div class=\"where\">where\n    T: <a class=\"traitalias\" href=\"https://doc.rust-lang.org/1.80.0/core/ptr/metadata/traitalias.Thin.html\" title=\"traitalias core::ptr::metadata::Thin\">Thin</a>,\n    P: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Metadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"intrinsics/trait.AggregateRawPtr.html#associatedtype.Metadata\" class=\"associatedtype\">Metadata</a> = &lt;P as <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"ptr/trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#243\">source</a></span><a href=\"#impl-Clone-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#245\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#251\">source</a></span><a href=\"#impl-Clone-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#253\">source</a><a href=\"#method.clone-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2542\">source</a></span><a href=\"#impl-Debug-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2543\">source</a><a href=\"#method.fmt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2548\">source</a></span><a href=\"#impl-Debug-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2549\">source</a><a href=\"#method.fmt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2085\">source</a></span><a href=\"#impl-From%3C*mut+T%3E-for-AtomicPtr%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>&gt; for <a class=\"struct\" href=\"sync/atomic/struct.AtomicPtr.html\" title=\"struct std::sync::atomic::AtomicPtr\">AtomicPtr</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/atomic.rs.html#2088\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"sync/atomic/struct.AtomicPtr.html\" title=\"struct std::sync::atomic::AtomicPtr\">AtomicPtr</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#967\">source</a></span><a href=\"#impl-Hash-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#969\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#977\">source</a></span><a href=\"#impl-Hash-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#979\">source</a><a href=\"#method.hash-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1886\">source</a></span><a href=\"#impl-Ord-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1889\">source</a><a href=\"#method.cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2359\">source</a></span><a href=\"#impl-Ord-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2362\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1873\">source</a></span><a href=\"#impl-PartialEq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1876\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2347\">source</a></span><a href=\"#impl-PartialEq-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2350\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1901\">source</a></span><a href=\"#impl-PartialOrd-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1904\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1910\">source</a><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1916\">source</a><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1922\">source</a><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1928\">source</a><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2374\">source</a></span><a href=\"#impl-PartialOrd-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2377\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2383\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2389\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2395\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2401\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pointer-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2479\">source</a></span><a href=\"#impl-Pointer-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2480\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pointer-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2519\">source</a></span><a href=\"#impl-Pointer-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2520\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdElement-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1174-1176\">source</a><a href=\"#impl-SimdElement-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&lt;Metadata = <a class=\"primitive\" href=\"primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simd/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask element type corresponding to this element type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdElement-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1186-1188\">source</a><a href=\"#impl-SimdElement-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"ptr/trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&lt;Metadata = <a class=\"primitive\" href=\"primitive.unit.html\">()</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"simd/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.isize.html\">isize</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask element type corresponding to this element type.</div></details></div></details><section id=\"impl-CoerceUnsized%3C*const+U%3E-for-%26T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#58\">source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C*const+U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#51\">source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#69\">source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C*const+U%3E-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#65\">source</a><a href=\"#impl-CoerceUnsized%3C*const+U%3E-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C*mut+U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#48\">source</a><a href=\"#impl-CoerceUnsized%3C*mut+U%3E-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut U</a>&gt; for <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-CoerceUnsized%3C*mut+U%3E-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#62\">source</a><a href=\"#impl-CoerceUnsized%3C*mut+U%3E-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut U</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Copy-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430\">source</a></span><a href=\"#impl-Copy-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Copy-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#420-430\">source</a></span><a href=\"#impl-Copy-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#129\">source</a><a href=\"#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#132\">source</a><a href=\"#impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"primitive.pointer.html\">*mut U</a>&gt; for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Eq-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1882\">source</a></span><a href=\"#impl-Eq-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Eq-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2356\">source</a></span><a href=\"#impl-Eq-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Freeze-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841\">source</a><a href=\"#impl-Freeze-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Freeze-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#833-841\">source</a><a href=\"#impl-Freeze-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#87\">source</a></span><a href=\"#impl-Send-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#89\">source</a></span><a href=\"#impl-Send-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#600\">source</a></span><a href=\"#impl-Sync-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#602\">source</a></span><a href=\"#impl-Sync-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#932-937\">source</a></span><a href=\"#impl-Unpin-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#932-937\">source</a></span><a href=\"#impl-Unpin-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#185\">source</a></span><a href=\"#impl-UnwindSafe-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#187\">source</a></span><a href=\"#impl-UnwindSafe-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-RefUnwindSafe-for-*const+T\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"primitive\" href=\"primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:13.696Z"
}