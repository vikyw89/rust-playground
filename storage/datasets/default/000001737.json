{
	"title": "proc_macro - Rust",
	"url": "https://doc.rust-lang.org/stable/proc_macro/index.html",
	"markdown": "# proc\\_macro - Rust\n\n## Crate [proc\\_macro](#)\n\n1.15.0 · [source](about:blank/src/proc_macro/lib.rs.html#1-1566) ·\n\nExpand description\n\nA support library for macro authors when defining new macros.\n\nThis library, provided by the standard distribution, provides the types consumed in the interfaces of procedurally defined macro definitions such as function-like macros `#[proc_macro]`, macro attributes `#[proc_macro_attribute]` and custom derive attributes`#[proc_macro_derive]`.\n\nSee [the book](about:blank/book/ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes) for more.\n\n-   Public implementation details for the `TokenStream` type, such as iterators.\n    \n-   Tracked access to environment variables.\n    \n-   Tracked access to additional files.\n    \n\n-   `quote!(..)` accepts arbitrary tokens and expands into a `TokenStream` describing the input. For example, `quote!(a + b)` will produce an expression, that, when evaluated, constructs the `TokenStream` `[Ident(\"a\"), Punct('+', Alone), Ident(\"b\")]`.\n    \n\n-   A delimited token stream.\n    \n-   An identifier (`ident`).\n    \n-   Error returned from `TokenStream::from_str`.\n    \n-   A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`). Boolean literals like `true` and `false` do not belong here, they are `Ident`s.\n    \n-   A `Punct` is a single punctuation character such as `+`, `-` or `#`.\n    \n-   A region of source code, along with macro expansion information.\n    \n-   The main type provided by this crate, representing an abstract stream of tokens, or, more specifically, a sequence of token trees. The type provides interfaces for iterating over those token trees and, conversely, collecting a number of token trees into one stream.\n    \n-   A structure representing a diagnostic message and associated children messages.\n    \n-   Error returned from `TokenStream::expand_expr`.\n    \n-   The source file of a given `Span`.\n    \n\n-   Describes how a sequence of token trees is delimited.\n    \n-   Indicates whether a `Punct` token can join with the following token to form a multi-character operator.\n    \n-   A single token or a delimited sequence of token trees (e.g., `[1, (), ..]`).\n    \n-   An enum representing a diagnostic level.\n    \n\n-   Trait implemented by types that can be converted into a set of `Span`s.\n    \n\n-   Determines whether proc\\_macro has been made accessible to the currently running program.\n    \n-   Quote a `TokenStream` into a `TokenStream`. This is the actual implementation of the `quote!()` proc macro.\n    \n-   Quote a `Span` into a `TokenStream`. This is needed to implement a custom quoter.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A support library for macro authors when defining new macros.\"><title>proc_macro - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"proc_macro\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../crates1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod crate\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../proc_macro/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\">Crate <a href=\"#\">proc_macro</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../proc_macro/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../proc_macro/index.html\">proc_macro</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><ul class=\"block\"><li><a id=\"all-types\" href=\"all.html\">All Items</a></li></ul><section><ul class=\"block\"><li><a href=\"#modules\">Modules</a></li><li><a href=\"#macros\">Macros</a></li><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h3>Crates</h3><ul class=\"block crate\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../core/index.html\">core</a></li><li class=\"current\"><a href=\"../proc_macro/index.html\">proc_macro</a></li><li><a href=\"../std/index.html\">std</a></li><li><a href=\"../test/index.html\">test</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../proc_macro/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Crate <a class=\"mod\" href=\"#\">proc_macro</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../src/proc_macro/lib.rs.html#1-1566\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A support library for macro authors when defining new macros.</p>\n<p>This library, provided by the standard distribution, provides the types\nconsumed in the interfaces of procedurally defined macro definitions such as\nfunction-like macros <code>#[proc_macro]</code>, macro attributes <code>#[proc_macro_attribute]</code> and\ncustom derive attributes<code>#[proc_macro_derive]</code>.</p>\n<p>See <a href=\"../book/ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes\">the book</a> for more.</p>\n</div></details><h2 id=\"modules\" class=\"section-header\">Modules<a href=\"#modules\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"mod\" href=\"token_stream/index.html\" title=\"mod proc_macro::token_stream\">token_stream</a></div><div class=\"desc docblock-short\">Public implementation details for the <code>TokenStream</code> type, such as iterators.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"tracked_env/index.html\" title=\"mod proc_macro::tracked_env\">tracked_env</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tracked access to environment variables.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"tracked_path/index.html\" title=\"mod proc_macro::tracked_path\">tracked_path</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tracked access to additional files.</div></li></ul><h2 id=\"macros\" class=\"section-header\">Macros<a href=\"#macros\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"macro\" href=\"macro.quote.html\" title=\"macro proc_macro::quote\">quote</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>quote!(..)</code> accepts arbitrary tokens and expands into a <code>TokenStream</code> describing the input.\nFor example, <code>quote!(a + b)</code> will produce an expression, that, when evaluated, constructs\nthe <code>TokenStream</code> <code>[Ident(\"a\"), Punct('+', Alone), Ident(\"b\")]</code>.</div></li></ul><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Group.html\" title=\"struct proc_macro::Group\">Group</a></div><div class=\"desc docblock-short\">A delimited token stream.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Ident.html\" title=\"struct proc_macro::Ident\">Ident</a></div><div class=\"desc docblock-short\">An identifier (<code>ident</code>).</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.LexError.html\" title=\"struct proc_macro::LexError\">LexError</a></div><div class=\"desc docblock-short\">Error returned from <code>TokenStream::from_str</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Literal.html\" title=\"struct proc_macro::Literal\">Literal</a></div><div class=\"desc docblock-short\">A literal string (<code>\"hello\"</code>), byte string (<code>b\"hello\"</code>),\ncharacter (<code>'a'</code>), byte character (<code>b'a'</code>), an integer or floating point number\nwith or without a suffix (<code>1</code>, <code>1u8</code>, <code>2.3</code>, <code>2.3f32</code>).\nBoolean literals like <code>true</code> and <code>false</code> do not belong here, they are <code>Ident</code>s.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Punct.html\" title=\"struct proc_macro::Punct\">Punct</a></div><div class=\"desc docblock-short\">A <code>Punct</code> is a single punctuation character such as <code>+</code>, <code>-</code> or <code>#</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Span.html\" title=\"struct proc_macro::Span\">Span</a></div><div class=\"desc docblock-short\">A region of source code, along with macro expansion information.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TokenStream.html\" title=\"struct proc_macro::TokenStream\">TokenStream</a></div><div class=\"desc docblock-short\">The main type provided by this crate, representing an abstract stream of\ntokens, or, more specifically, a sequence of token trees.\nThe type provides interfaces for iterating over those token trees and, conversely,\ncollecting a number of token trees into one stream.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Diagnostic.html\" title=\"struct proc_macro::Diagnostic\">Diagnostic</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A structure representing a diagnostic message and associated children\nmessages.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ExpandError.html\" title=\"struct proc_macro::ExpandError\">ExpandError</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Error returned from <code>TokenStream::expand_expr</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SourceFile.html\" title=\"struct proc_macro::SourceFile\">SourceFile</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The source file of a given <code>Span</code>.</div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Delimiter.html\" title=\"enum proc_macro::Delimiter\">Delimiter</a></div><div class=\"desc docblock-short\">Describes how a sequence of token trees is delimited.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Spacing.html\" title=\"enum proc_macro::Spacing\">Spacing</a></div><div class=\"desc docblock-short\">Indicates whether a <code>Punct</code> token can join with the following token\nto form a multi-character operator.</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.TokenTree.html\" title=\"enum proc_macro::TokenTree\">TokenTree</a></div><div class=\"desc docblock-short\">A single token or a delimited sequence of token trees (e.g., <code>[1, (), ..]</code>).</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Level.html\" title=\"enum proc_macro::Level\">Level</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An enum representing a diagnostic level.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.MultiSpan.html\" title=\"trait proc_macro::MultiSpan\">MultiSpan</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Trait implemented by types that can be converted into a set of <code>Span</code>s.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.is_available.html\" title=\"fn proc_macro::is_available\">is_available</a></div><div class=\"desc docblock-short\">Determines whether proc_macro has been made accessible to the currently\nrunning program.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.quote.html\" title=\"fn proc_macro::quote\">quote</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Quote a <code>TokenStream</code> into a <code>TokenStream</code>.\nThis is the actual implementation of the <code>quote!()</code> proc macro.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.quote_span.html\" title=\"fn proc_macro::quote_span\">quote_span</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Quote a <code>Span</code> into a <code>TokenStream</code>.\nThis is needed to implement a custom quoter.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:23.273Z"
}