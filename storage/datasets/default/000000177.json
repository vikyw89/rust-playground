{
	"title": "Unstable Features - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/unstable.html",
	"markdown": "# Unstable Features - The Cargo Book\n\nExperimental Cargo features are only available on the [nightly channel](../../book/appendix-07-nightly-rust.html). You are encouraged to experiment with these features to see if they meet your needs, and if there are any issues or problems. Check the linked tracking issues listed below for more information on the feature, and click the GitHub subscribe button if you want future updates.\n\nAfter some period of time, if the feature does not have any major concerns, it can be [stabilized](https://doc.crates.io/contrib/process/unstable.html#stabilization), which will make it available on stable once the current nightly release reaches the stable channel (anywhere from 6 to 12 weeks).\n\nThere are three different ways that unstable features can be enabled based on how the feature works:\n\n-   New syntax in `Cargo.toml` requires a `cargo-features` key at the top of `Cargo.toml`, before any tables. For example:\n    \n    ```toml\n    # This specifies which new Cargo.toml features are enabled.\n    cargo-features = [\"test-dummy-unstable\"]\n    \n    [package]\n    name = \"my-package\"\n    version = \"0.1.0\"\n    im-a-teapot = true  # This is a new option enabled by test-dummy-unstable.\n    \n    ```\n    \n-   New command-line flags, options, and subcommands require the `-Z unstable-options` CLI option to also be included. For example, the new `--out-dir` option is only available on nightly:\n    \n    `cargo +nightly build --out-dir=out -Z unstable-options`\n    \n-   `-Z` command-line flags are used to enable new functionality that may not have an interface, or the interface has not yet been designed, or for more complex features that affect multiple parts of Cargo. For example, the [mtime-on-use](#mtime-on-use) feature can be enabled with:\n    \n    `cargo +nightly build -Z mtime-on-use`\n    \n    Run `cargo -Z help` to see a list of flags available.\n    \n    Anything which can be configured with a `-Z` flag can also be set in the cargo [config file](config.html) (`.cargo/config.toml`) in the `unstable` table. For example:\n    \n    ```toml\n    [unstable]\n    mtime-on-use = true\n    build-std = [\"core\", \"alloc\"]\n    \n    ```\n    \n\nEach new feature described below should explain how to use it. For the latest nightly, see the [nightly version](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#script) of this page.\n\n## [List of unstable features](#list-of-unstable-features)\n\n-   Unstable-specific features\n    -   [\\-Z allow-features](#allow-features) — Provides a way to restrict which unstable features are used.\n-   Build scripts and linking\n    -   [Metabuild](#metabuild) — Provides declarative build scripts.\n-   Resolver and features\n    -   [no-index-update](#no-index-update) — Prevents cargo from updating the index cache.\n    -   [avoid-dev-deps](#avoid-dev-deps) — Prevents the resolver from including dev-dependencies during resolution.\n    -   [minimal-versions](#minimal-versions) — Forces the resolver to use the lowest compatible version instead of the highest.\n    -   [direct-minimal-versions](#direct-minimal-versions) — Forces the resolver to use the lowest compatible version instead of the highest.\n    -   [public-dependency](#public-dependency) — Allows dependencies to be classified as either public or private.\n    -   [msrv-policy](#msrv-policy) — MSRV-aware resolver and version selection\n    -   [precise-pre-release](#precise-pre-release) — Allows pre-release versions to be selected with `update --precise`\n-   Output behavior\n    -   [out-dir](#out-dir) — Adds a directory where artifacts are copied to.\n    -   [Different binary name](#different-binary-name) — Assign a name to the built binary that is separate from the crate name.\n-   Compile behavior\n    -   [mtime-on-use](#mtime-on-use) — Updates the last-modified timestamp on every dependency every time it is used, to provide a mechanism to delete unused artifacts.\n    -   [doctest-xcompile](#doctest-xcompile) — Supports running doctests with the `--target` flag.\n    -   [build-std](#build-std) — Builds the standard library instead of using pre-built binaries.\n    -   [build-std-features](#build-std-features) — Sets features to use with the standard library.\n    -   [binary-dep-depinfo](#binary-dep-depinfo) — Causes the dep-info file to track binary dependencies.\n    -   [panic-abort-tests](#panic-abort-tests) — Allows running tests with the “abort” panic strategy.\n    -   [host-config](#host-config) — Allows setting `[target]`\\-like configuration settings for host build targets.\n    -   [target-applies-to-host](#target-applies-to-host) — Alters whether certain flags will be passed to host build targets.\n    -   [gc](#gc) — Global cache garbage collection.\n    -   [open-namespaces](#open-namespaces) — Allow multiple packages to participate in the same API namespace\n-   rustdoc\n    -   [rustdoc-map](#rustdoc-map) — Provides mappings for documentation to link to external sites like [docs.rs](https://docs.rs/).\n    -   [scrape-examples](#scrape-examples) — Shows examples within documentation.\n    -   [output-format](#output-format-for-rustdoc) — Allows documentation to also be emitted in the experimental [JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/).\n-   `Cargo.toml` extensions\n    -   [Profile `rustflags` option](#profile-rustflags-option) — Passed directly to rustc.\n    -   [codegen-backend](#codegen-backend) — Select the codegen backend used by rustc.\n    -   [per-package-target](#per-package-target) — Sets the `--target` to use for each individual package.\n    -   [artifact dependencies](#artifact-dependencies) — Allow build artifacts to be included into other build artifacts and build them for different targets.\n    -   [Edition 2024](#edition-2024) — Adds support for the 2024 Edition.\n    -   [Profile `trim-paths` option](#profile-trim-paths-option) — Control the sanitization of file paths in build outputs.\n    -   [`[lints.cargo]`](#lintscargo) — Allows configuring lints for Cargo.\n-   Information and metadata\n    -   [Build-plan](#build-plan) — Emits JSON information on which commands will be run.\n    -   [unit-graph](#unit-graph) — Emits JSON for Cargo’s internal graph structure.\n    -   [`cargo rustc --print`](#rustc---print) — Calls rustc with `--print` to display information from rustc.\n-   Configuration\n    -   [config-include](#config-include) — Adds the ability for config files to include other files.\n    -   [`cargo config`](#cargo-config) — Adds a new subcommand for viewing config files.\n-   Registries\n    -   [publish-timeout](#publish-timeout) — Controls the timeout between uploading the crate and being available in the index\n    -   [asymmetric-token](#asymmetric-token) — Adds support for authentication tokens using asymmetric cryptography (`cargo:paseto` provider).\n-   Other\n    -   [gitoxide](#gitoxide) — Use `gitoxide` instead of `git2` for a set of operations.\n    -   [script](#script) — Enable support for single-file `.rs` packages.\n\n## [allow-features](#allow-features)\n\nThis permanently-unstable flag makes it so that only a listed set of unstable features can be used. Specifically, if you pass `-Zallow-features=foo,bar`, you’ll continue to be able to pass `-Zfoo` and `-Zbar` to `cargo`, but you will be unable to pass `-Zbaz`. You can pass an empty string (`-Zallow-features=`) to disallow all unstable features.\n\n`-Zallow-features` also restricts which unstable features can be passed to the `cargo-features` entry in `Cargo.toml`. If, for example, you want to allow\n\n```toml\ncargo-features = [\"test-dummy-unstable\"]\n\n```\n\nwhere `test-dummy-unstable` is unstable, that features would also be disallowed by `-Zallow-features=`, and allowed with `-Zallow-features=test-dummy-unstable`.\n\nThe list of features passed to cargo’s `-Zallow-features` is also passed to any Rust tools that cargo ends up calling (like `rustc` or `rustdoc`). Thus, if you run `cargo -Zallow-features=`, no unstable Cargo _or_ Rust features can be used.\n\n## [no-index-update](#no-index-update)\n\n-   Original Issue: [#3479](https://github.com/rust-lang/cargo/issues/3479)\n-   Tracking Issue: [#7404](https://github.com/rust-lang/cargo/issues/7404)\n\nThe `-Z no-index-update` flag ensures that Cargo does not attempt to update the registry index. This is intended for tools such as Crater that issue many Cargo commands, and you want to avoid the network latency for updating the index each time.\n\n## [mtime-on-use](#mtime-on-use)\n\n-   Original Issue: [#6477](https://github.com/rust-lang/cargo/pull/6477)\n-   Cache usage meta tracking issue: [#7150](https://github.com/rust-lang/cargo/issues/7150)\n\nThe `-Z mtime-on-use` flag is an experiment to have Cargo update the mtime of used files to make it easier for tools like cargo-sweep to detect which files are stale. For many workflows this needs to be set on _all_ invocations of cargo. To make this more practical setting the `unstable.mtime_on_use` flag in `.cargo/config.toml` or the corresponding ENV variable will apply the `-Z mtime-on-use` to all invocations of nightly cargo. (the config flag is ignored by stable)\n\n## [avoid-dev-deps](#avoid-dev-deps)\n\n-   Original Issue: [#4988](https://github.com/rust-lang/cargo/issues/4988)\n-   Tracking Issue: [#5133](https://github.com/rust-lang/cargo/issues/5133)\n\nWhen running commands such as `cargo install` or `cargo build`, Cargo currently requires dev-dependencies to be downloaded, even if they are not used. The `-Z avoid-dev-deps` flag allows Cargo to avoid downloading dev-dependencies if they are not needed. The `Cargo.lock` file will not be generated if dev-dependencies are skipped.\n\n## [minimal-versions](#minimal-versions)\n\n-   Original Issue: [#4100](https://github.com/rust-lang/cargo/issues/4100)\n-   Tracking Issue: [#5657](https://github.com/rust-lang/cargo/issues/5657)\n\n> Note: It is not recommended to use this feature. Because it enforces minimal versions for all transitive dependencies, its usefulness is limited since not all external dependencies declare proper lower version bounds. It is intended that it will be changed in the future to only enforce minimal versions for direct dependencies.\n\nWhen a `Cargo.lock` file is generated, the `-Z minimal-versions` flag will resolve the dependencies to the minimum SemVer version that will satisfy the requirements (instead of the greatest version).\n\nThe intended use-case of this flag is to check, during continuous integration, that the versions specified in Cargo.toml are a correct reflection of the minimum versions that you are actually using. That is, if Cargo.toml says `foo = \"1.0.0\"` that you don’t accidentally depend on features added only in `foo 1.5.0`.\n\n## [direct-minimal-versions](#direct-minimal-versions)\n\n-   Original Issue: [#4100](https://github.com/rust-lang/cargo/issues/4100)\n-   Tracking Issue: [#5657](https://github.com/rust-lang/cargo/issues/5657)\n\nWhen a `Cargo.lock` file is generated, the `-Z direct-minimal-versions` flag will resolve the dependencies to the minimum SemVer version that will satisfy the requirements (instead of the greatest version) for direct dependencies only.\n\nThe intended use-case of this flag is to check, during continuous integration, that the versions specified in Cargo.toml are a correct reflection of the minimum versions that you are actually using. That is, if Cargo.toml says `foo = \"1.0.0\"` that you don’t accidentally depend on features added only in `foo 1.5.0`.\n\nIndirect dependencies are resolved as normal so as not to be blocked on their minimal version validation.\n\n## [out-dir](#out-dir)\n\n-   Original Issue: [#4875](https://github.com/rust-lang/cargo/issues/4875)\n-   Tracking Issue: [#6790](https://github.com/rust-lang/cargo/issues/6790)\n\nThis feature allows you to specify the directory where artifacts will be copied to after they are built. Typically artifacts are only written to the `target/release` or `target/debug` directories. However, determining the exact filename can be tricky since you need to parse JSON output. The `--out-dir` flag makes it easier to predictably access the artifacts. Note that the artifacts are copied, so the originals are still in the `target` directory. Example:\n\n```sh\ncargo +nightly build --out-dir=out -Z unstable-options\n\n```\n\nThis can also be specified in `.cargo/config.toml` files.\n\n```toml\n[build]\nout-dir = \"out\"\n\n```\n\n## [doctest-xcompile](#doctest-xcompile)\n\n-   Tracking Issue: [#7040](https://github.com/rust-lang/cargo/issues/7040)\n-   Tracking Rustc Issue: [#64245](https://github.com/rust-lang/rust/issues/64245)\n\nThis flag changes `cargo test`’s behavior when handling doctests when a target is passed. Currently, if a target is passed that is different from the host cargo will simply skip testing doctests. If this flag is present, cargo will continue as normal, passing the tests to doctest, while also passing it a `--target` option, as well as enabling `-Zunstable-features --enable-per-target-ignores` and passing along information from `.cargo/config.toml`. See the rustc issue for more information.\n\n```sh\ncargo test --target foo -Zdoctest-xcompile\n\n```\n\n## [Build-plan](#build-plan)\n\n-   Tracking Issue: [#5579](https://github.com/rust-lang/cargo/issues/5579)\n\nThe `--build-plan` argument for the `build` command will output JSON with information about which commands would be run without actually executing anything. This can be useful when integrating with another build tool. Example:\n\n```sh\ncargo +nightly build --build-plan -Z unstable-options\n\n```\n\n-   Tracking Issue: [rust-lang/rust#49803](https://github.com/rust-lang/rust/issues/49803)\n-   RFC: [#2196](https://github.com/rust-lang/rfcs/blob/master/text/2196-metabuild.md)\n\nMetabuild is a feature to have declarative build scripts. Instead of writing a `build.rs` script, you specify a list of build dependencies in the `metabuild` key in `Cargo.toml`. A build script is automatically generated that runs each build dependency in order. Metabuild packages can then read metadata from `Cargo.toml` to specify their behavior.\n\nInclude `cargo-features` at the top of `Cargo.toml`, a `metabuild` key in the `package`, list the dependencies in `build-dependencies`, and add any metadata that the metabuild packages require under `package.metadata`. Example:\n\n```toml\ncargo-features = [\"metabuild\"]\n\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\nmetabuild = [\"foo\", \"bar\"]\n\n[build-dependencies]\nfoo = \"1.0\"\nbar = \"1.0\"\n\n[package.metadata.foo]\nextra-info = \"qwerty\"\n\n```\n\nMetabuild packages should have a public function called `metabuild` that performs the same actions as a regular `build.rs` script would perform.\n\n## [public-dependency](#public-dependency)\n\n-   Tracking Issue: [#44663](https://github.com/rust-lang/rust/issues/44663)\n\nThe ‘public-dependency’ feature allows marking dependencies as ‘public’ or ‘private’. When this feature is enabled, additional information is passed to rustc to allow the [exported\\_private\\_dependencies](about:blank/rustc/lints/listing/warn-by-default.html#exported-private-dependencies) lint to function properly.\n\nTo enable this feature, you can either use `-Zpublic-dependency`\n\n```sh\ncargo +nightly run -Zpublic-dependency\n\n```\n\nor `[unstable]` table, for example,\n\n```toml\n# .cargo/config.toml\n[unstable]\npublic-dependency = true\n\n```\n\n`public-dependency` could also be enabled in `cargo-features`, **though this is deprecated and will be removed soon**.\n\n```toml\ncargo-features = [\"public-dependency\"]\n\n[dependencies]\nmy_dep = { version = \"1.2.3\", public = true }\nprivate_dep = \"2.0.0\" # Will be 'private' by default\n\n```\n\nDocumentation updates:\n\n-   For workspace’s “The `dependencies` table” section, include `public` as an unsupported field for `workspace.dependencies`\n\n## [msrv-policy](#msrv-policy)\n\n-   [#9930](https://github.com/rust-lang/cargo/issues/9930) (MSRV-aware resolver)\n\nCatch-all unstable feature for MSRV-aware cargo features under [RFC 2495](https://github.com/rust-lang/rfcs/pull/2495).\n\n### [MSRV-aware cargo add](#msrv-aware-cargo-add)\n\nThis was stabilized in 1.79 in [#13608](https://github.com/rust-lang/cargo/pull/13608).\n\n### [MSRV-aware resolver](#msrv-aware-resolver)\n\n`-Zmsrv-policy` allows access to an MSRV-aware resolver which can be enabled with:\n\n-   `resolver.something-like-precedence` config field\n-   `workspace.resolver = \"3\"` / `package.resolver = \"3\"`\n-   `package.edition = \"2024\"` (only in workspace root)\n\nThe resolver will prefer dependencies with a `package.rust-version` that is the same or older than your project’s MSRV. Your project’s MSRV is determined by taking the lowest `package.rust-version` set among your workspace members. If there is none set, your toolchain version will be used with the intent to pick up the version from rustup’s `rust-toolchain.toml`, if present.\n\n#### [`resolver.something-like-precedence`](#resolversomething-like-precedence)\n\n-   Type: string\n-   Default: “something-like-maximum”\n-   Environment: `CARGO_RESOLVER_SOMETHING_LIKE_PRECEDENCE`\n\nSelect which policy should be used when resolving dependencies. Values include\n\n-   `something-like-maximum`: prefer highest compatible versions of a package\n-   `something-like-rust-version`: prefer versions of packages compatible with your project’s Rust version\n\nCan be overridden with\n\n-   `--ignore-rust-version` CLI option\n-   Setting the dependency’s version requirement too high\n-   Specifying the version to `cargo update` with `--precise`\n\n## [precise-pre-release](#precise-pre-release)\n\n-   Tracking Issue: [#13290](https://github.com/rust-lang/cargo/issues/13290)\n-   RFC: [#3493](https://github.com/rust-lang/rfcs/pull/3493)\n\nThe `precise-pre-release` feature allows pre-release versions to be selected with `update --precise` even when a pre-release is not specified by a projects `Cargo.toml`.\n\nTake for example this `Cargo.toml`.\n\n```toml\n[dependencies]\nmy-dependency = \"0.1.1\"\n\n```\n\nIt’s possible to update `my-dependency` to a pre-release with `update -Zunstable-options my-dependency --precise 0.1.2-pre.0`. This is because `0.1.2-pre.0` is considered compatible with `0.1.1`. It would not be possible to upgrade to `0.2.0-pre.0` from `0.1.1` in the same way.\n\n## [build-std](#build-std)\n\n-   Tracking Repository: [https://github.com/rust-lang/wg-cargo-std-aware](https://github.com/rust-lang/wg-cargo-std-aware)\n\nThe `build-std` feature enables Cargo to compile the standard library itself as part of a crate graph compilation. This feature has also historically been known as “std-aware Cargo”. This feature is still in very early stages of development, and is also a possible massive feature addition to Cargo. This is a very large feature to document, even in the minimal form that it exists in today, so if you’re curious to stay up to date you’ll want to follow the [tracking repository](https://github.com/rust-lang/wg-cargo-std-aware) and its set of issues.\n\nThe functionality implemented today is behind a flag called `-Z build-std`. This flag indicates that Cargo should compile the standard library from source code using the same profile as the main build itself. Note that for this to work you need to have the source code for the standard library available, and at this time the only supported method of doing so is to add the `rust-src` rust rustup component:\n\n```console\n$ rustup component add rust-src --toolchain nightly\n\n```\n\nIt is also required today that the `-Z build-std` flag is combined with the `--target` flag. Note that you’re not forced to do a cross compilation, you’re just forced to pass `--target` in one form or another.\n\nUsage looks like:\n\n```console\n$ cargo new foo\n$ cd foo\n$ cargo +nightly run -Z build-std --target x86_64-unknown-linux-gnu\n   Compiling core v0.0.0 (...)\n   ...\n   Compiling foo v0.1.0 (...)\n    Finished dev [unoptimized + debuginfo] target(s) in 21.00s\n     Running `target/x86_64-unknown-linux-gnu/debug/foo`\nHello, world!\n\n```\n\nHere we recompiled the standard library in debug mode with debug assertions (like `src/main.rs` is compiled) and everything was linked together at the end.\n\nUsing `-Z build-std` will implicitly compile the stable crates `core`, `std`, `alloc`, and `proc_macro`. If you’re using `cargo test` it will also compile the `test` crate. If you’re working with an environment which does not support some of these crates, then you can pass an argument to `-Zbuild-std` as well:\n\n```console\n$ cargo +nightly build -Z build-std=core,alloc\n\n```\n\nThe value here is a comma-separated list of standard library crates to build.\n\n### [Requirements](#requirements)\n\nAs a summary, a list of requirements today to use `-Z build-std` are:\n\n-   You must install libstd’s source code through `rustup component add rust-src`\n-   You must pass `--target`\n-   You must use both a nightly Cargo and a nightly rustc\n-   The `-Z build-std` flag must be passed to all `cargo` invocations.\n\n### [Reporting bugs and helping out](#reporting-bugs-and-helping-out)\n\nThe `-Z build-std` feature is in the very early stages of development! This feature for Cargo has an extremely long history and is very large in scope, and this is just the beginning. If you’d like to report bugs please either report them to:\n\n-   Cargo — [https://github.com/rust-lang/cargo/issues/new](https://github.com/rust-lang/cargo/issues/new) — for implementation bugs\n-   The tracking repository — [https://github.com/rust-lang/wg-cargo-std-aware/issues/new](https://github.com/rust-lang/wg-cargo-std-aware/issues/new) — for larger design questions.\n\nAlso if you’d like to see a feature that’s not yet implemented and/or if something doesn’t quite work the way you’d like it to, feel free to check out the [issue tracker](https://github.com/rust-lang/wg-cargo-std-aware/issues) of the tracking repository, and if it’s not there please file a new issue!\n\n## [build-std-features](#build-std-features)\n\n-   Tracking Repository: [https://github.com/rust-lang/wg-cargo-std-aware](https://github.com/rust-lang/wg-cargo-std-aware)\n\nThis flag is a sibling to the `-Zbuild-std` feature flag. This will configure the features enabled for the standard library itself when building the standard library. The default enabled features, at this time, are `backtrace` and `panic-unwind`. This flag expects a comma-separated list and, if provided, will override the default list of features enabled.\n\n## [binary-dep-depinfo](#binary-dep-depinfo)\n\n-   Tracking rustc issue: [#63012](https://github.com/rust-lang/rust/issues/63012)\n\nThe `-Z binary-dep-depinfo` flag causes Cargo to forward the same flag to `rustc` which will then cause `rustc` to include the paths of all binary dependencies in the “dep info” file (with the `.d` extension). Cargo then uses that information for change-detection (if any binary dependency changes, then the crate will be rebuilt). The primary use case is for building the compiler itself, which has implicit dependencies on the standard library that would otherwise be untracked for change-detection.\n\n## [panic-abort-tests](#panic-abort-tests)\n\n-   Tracking Issue: [#67650](https://github.com/rust-lang/rust/issues/67650)\n-   Original Pull Request: [#7460](https://github.com/rust-lang/cargo/pull/7460)\n\nThe `-Z panic-abort-tests` flag will enable nightly support to compile test harness crates with `-Cpanic=abort`. Without this flag Cargo will compile tests, and everything they depend on, with `-Cpanic=unwind` because it’s the only way `test`\\-the-crate knows how to operate. As of [rust-lang/rust#64158](https://github.com/rust-lang/rust/pull/64158), however, the `test` crate supports `-C panic=abort` with a test-per-process, and can help avoid compiling crate graphs multiple times.\n\nIt’s currently unclear how this feature will be stabilized in Cargo, but we’d like to stabilize it somehow!\n\n## [config-include](#config-include)\n\n-   Tracking Issue: [#7723](https://github.com/rust-lang/cargo/issues/7723)\n\nThis feature requires the `-Zconfig-include` command-line option.\n\nThe `include` key in a config file can be used to load another config file. It takes a string for a path to another file relative to the config file, or an array of config file paths. Only path ending with `.toml` is accepted.\n\n```toml\n# a path ending with `.toml`\ninclude = \"path/to/mordor.toml\"\n\n# or an array of paths\ninclude = [\"frodo.toml\", \"samwise.toml\"]\n\n```\n\nUnlike other config values, the merge behavior of the `include` key is different. When a config file contains an `include` key:\n\n1.  The config values are first loaded from the `include` path.\n    -   If the value of the `include` key is an array of paths, the config values are loaded and merged from left to right for each path.\n    -   Recurse this step if the config values from the `include` path also contain an `include` key.\n2.  Then, the config file’s own values are merged on top of the config from the `include` path.\n\n## [target-applies-to-host](#target-applies-to-host)\n\n-   Original Pull Request: [#9322](https://github.com/rust-lang/cargo/pull/9322)\n-   Tracking Issue: [#9453](https://github.com/rust-lang/cargo/issues/9453)\n\nHistorically, Cargo’s behavior for whether the `linker` and `rustflags` configuration options from environment variables and [`[target]`](about:blank/config.html#target) are respected for build scripts, plugins, and other artifacts that are _always_ built for the host platform has been somewhat inconsistent. When `--target` is _not_ passed, Cargo respects the same `linker` and `rustflags` for build scripts as for all other compile artifacts. When `--target` _is_ passed, however, Cargo respects `linker` from [`[target.<host triple>]`](about:blank/config.html#targettriplelinker), and does not pick up any `rustflags` configuration. This dual behavior is confusing, but also makes it difficult to correctly configure builds where the host triple and the [target triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") happen to be the same, but artifacts intended to run on the build host should still be configured differently.\n\n`-Ztarget-applies-to-host` enables the top-level `target-applies-to-host` setting in Cargo configuration files which allows users to opt into different (and more consistent) behavior for these properties. When `target-applies-to-host` is unset, or set to `true`, in the configuration file, the existing Cargo behavior is preserved (though see `-Zhost-config`, which changes that default). When it is set to `false`, no options from `[target.<host triple>]`, `RUSTFLAGS`, or `[build]` are respected for host artifacts regardless of whether `--target` is passed to Cargo. To customize artifacts intended to be run on the host, use `[host]` ([`host-config`](#host-config)).\n\nIn the future, `target-applies-to-host` may end up defaulting to `false` to provide more sane and consistent default behavior.\n\n```toml\n# config.toml\ntarget-applies-to-host = false\n\n```\n\n```console\ncargo +nightly -Ztarget-applies-to-host build --target x86_64-unknown-linux-gnu\n\n```\n\n## [host-config](#host-config)\n\n-   Original Pull Request: [#9322](https://github.com/rust-lang/cargo/pull/9322)\n-   Tracking Issue: [#9452](https://github.com/rust-lang/cargo/issues/9452)\n\nThe `host` key in a config file can be used pass flags to host build targets such as build scripts that must run on the host system instead of the target system when cross compiling. It supports both generic and host arch specific tables. Matching host arch tables take precedence over generic host tables.\n\nIt requires the `-Zhost-config` and `-Ztarget-applies-to-host` command-line options to be set, and that `target-applies-to-host = false` is set in the Cargo configuration file.\n\n```toml\n# config.toml\n[host]\nlinker = \"/path/to/host/linker\"\n[host.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/host/arch/linker\"\nrustflags = [\"-Clink-arg=--verbose\"]\n[target.x86_64-unknown-linux-gnu]\nlinker = \"/path/to/target/linker\"\n\n```\n\nThe generic `host` table above will be entirely ignored when building on a `x86_64-unknown-linux-gnu` host as the `host.x86_64-unknown-linux-gnu` table takes precedence.\n\nSetting `-Zhost-config` changes the default for `target-applies-to-host` to `false` from `true`.\n\n```console\ncargo +nightly -Ztarget-applies-to-host -Zhost-config build --target x86_64-unknown-linux-gnu\n\n```\n\n## [unit-graph](#unit-graph)\n\n-   Tracking Issue: [#8002](https://github.com/rust-lang/cargo/issues/8002)\n\nThe `--unit-graph` flag can be passed to any build command (`build`, `check`, `run`, `test`, `bench`, `doc`, etc.) to emit a JSON object to stdout which represents Cargo’s internal unit graph. Nothing is actually built, and the command returns immediately after printing. Each “unit” corresponds to an execution of the compiler. These objects also include which unit each unit depends on.\n\n```\ncargo +nightly build --unit-graph -Z unstable-options\n\n```\n\nThis structure provides a more complete view of the dependency relationship as Cargo sees it. In particular, the “features” field supports the new feature resolver where a dependency can be built multiple times with different features. `cargo metadata` fundamentally cannot represent the relationship of features between different dependency kinds, and features now depend on which command is run and which packages and targets are selected. Additionally it can provide details about intra-package dependencies like build scripts or tests.\n\nThe following is a description of the JSON structure:\n\n```javascript\n{\n  /* Version of the JSON output structure. If any backwards incompatible\n     changes are made, this value will be increased.\n  */\n  \"version\": 1,\n  /* Array of all build units. */\n  \"units\": [\n    {\n      /* An opaque string which indicates the package.\n         Information about the package can be obtained from `cargo metadata`.\n      */\n      \"pkg_id\": \"my-package 0.1.0 (path+file:///path/to/my-package)\",\n      /* The Cargo target. See the `cargo metadata` documentation for more\n         information about these fields.\n         https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\n      */\n      \"target\": {\n        \"kind\": [\"lib\"],\n        \"crate_types\": [\"lib\"],\n        \"name\": \"my_package\",\n        \"src_path\": \"/path/to/my-package/src/lib.rs\",\n        \"edition\": \"2018\",\n        \"test\": true,\n        \"doctest\": true\n      },\n      /* The profile settings for this unit.\n         These values may not match the profile defined in the manifest.\n         Units can use modified profile settings. For example, the \"panic\"\n         setting can be overridden for tests to force it to \"unwind\".\n      */\n      \"profile\": {\n        /* The profile name these settings are derived from. */\n        \"name\": \"dev\",\n        /* The optimization level as a string. */\n        \"opt_level\": \"0\",\n        /* The LTO setting as a string. */\n        \"lto\": \"false\",\n        /* The codegen units as an integer.\n           `null` if it should use the compiler's default.\n        */\n        \"codegen_units\": null,\n        /* The debug information level as an integer.\n           `null` if it should use the compiler's default (0).\n        */\n        \"debuginfo\": 2,\n        /* Whether or not debug-assertions are enabled. */\n        \"debug_assertions\": true,\n        /* Whether or not overflow-checks are enabled. */\n        \"overflow_checks\": true,\n        /* Whether or not rpath is enabled. */\n        \"rpath\": false,\n        /* Whether or not incremental is enabled. */\n        \"incremental\": true,\n        /* The panic strategy, \"unwind\" or \"abort\". */\n        \"panic\": \"unwind\"\n      },\n      /* Which platform this target is being built for.\n         A value of `null` indicates it is for the host.\n         Otherwise it is a string of the target triple (such as\n         \"x86_64-unknown-linux-gnu\").\n      */\n      \"platform\": null,\n      /* The \"mode\" for this unit. Valid values:\n\n         * \"test\" --- Build using `rustc` as a test.\n         * \"build\" --- Build using `rustc`.\n         * \"check\" --- Build using `rustc` in \"check\" mode.\n         * \"doc\" --- Build using `rustdoc`.\n         * \"doctest\" --- Test using `rustdoc`.\n         * \"run-custom-build\" --- Represents the execution of a build script.\n      */\n      \"mode\": \"build\",\n      /* Array of features enabled on this unit as strings. */\n      \"features\": [\"somefeat\"],\n      /* Whether or not this is a standard-library unit,\n         part of the unstable build-std feature.\n         If not set, treat as `false`.\n      */\n      \"is_std\": false,\n      /* Array of dependencies of this unit. */\n      \"dependencies\": [\n        {\n          /* Index in the \"units\" array for the dependency. */\n          \"index\": 1,\n          /* The name that this dependency will be referred as. */\n          \"extern_crate_name\": \"unicode_xid\",\n          /* Whether or not this dependency is \"public\",\n             part of the unstable public-dependency feature.\n             If not set, the public-dependency feature is not enabled.\n          */\n          \"public\": false,\n          /* Whether or not this dependency is injected into the prelude,\n             currently used by the build-std feature.\n             If not set, treat as `false`.\n          */\n          \"noprelude\": false\n        }\n      ]\n    },\n    // ...\n  ],\n  /* Array of indices in the \"units\" array that are the \"roots\" of the\n     dependency graph.\n  */\n  \"roots\": [0],\n}\n\n```\n\n## [Profile `rustflags` option](#profile-rustflags-option)\n\n-   Original Issue: [rust-lang/cargo#7878](https://github.com/rust-lang/cargo/issues/7878)\n-   Tracking Issue: [rust-lang/cargo#10271](https://github.com/rust-lang/cargo/issues/10271)\n\nThis feature provides a new option in the `[profile]` section to specify flags that are passed directly to rustc. This can be enabled like so:\n\n```toml\ncargo-features = [\"profile-rustflags\"]\n\n[package]\n# ...\n\n[profile.release]\nrustflags = [ \"-C\", \"...\" ]\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z profile-rustflags` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\nprofile-rustflags = true\n\n[profile.release]\nrustflags = [ \"-C\", \"...\" ]\n\n```\n\n## [rustdoc-map](#rustdoc-map)\n\n-   Tracking Issue: [#8296](https://github.com/rust-lang/cargo/issues/8296)\n\nThis feature adds configuration settings that are passed to `rustdoc` so that it can generate links to dependencies whose documentation is hosted elsewhere when the dependency is not documented. First, add this to `.cargo/config`:\n\n```toml\n[doc.extern-map.registries]\ncrates-io = \"https://docs.rs/\"\n\n```\n\nThen, when building documentation, use the following flags to cause links to dependencies to link to [docs.rs](https://docs.rs/):\n\n```\ncargo +nightly doc --no-deps -Zrustdoc-map\n\n```\n\nThe `registries` table contains a mapping of registry name to the URL to link to. The URL may have the markers `{pkg_name}` and `{version}` which will get replaced with the corresponding values. If neither are specified, then Cargo defaults to appending `{pkg_name}/{version}/` to the end of the URL.\n\nAnother config setting is available to redirect standard library links. By default, rustdoc creates links to [https://doc.rust-lang.org/nightly/](https://doc.rust-lang.org/nightly/). To change this behavior, use the `doc.extern-map.std` setting:\n\n```toml\n[doc.extern-map]\nstd = \"local\"\n\n```\n\nA value of `\"local\"` means to link to the documentation found in the `rustc` sysroot. If you are using rustup, this documentation can be installed with `rustup component add rust-docs`.\n\nThe default value is `\"remote\"`.\n\nThe value may also take a URL for a custom location.\n\n## [per-package-target](#per-package-target)\n\n-   Tracking Issue: [#9406](https://github.com/rust-lang/cargo/pull/9406)\n-   Original Pull Request: [#9030](https://github.com/rust-lang/cargo/pull/9030)\n-   Original Issue: [#7004](https://github.com/rust-lang/cargo/pull/7004)\n\nThe `per-package-target` feature adds two keys to the manifest: `package.default-target` and `package.forced-target`. The first makes the package be compiled by default (ie. when no `--target` argument is passed) for some target. The second one makes the package always be compiled for the target.\n\nExample:\n\n```toml\n[package]\nforced-target = \"wasm32-unknown-unknown\"\n\n```\n\nIn this example, the crate is always built for `wasm32-unknown-unknown`, for instance because it is going to be used as a plugin for a main program that runs on the host (or provided on the command line) target.\n\n## [artifact-dependencies](#artifact-dependencies)\n\n-   Tracking Issue: [#9096](https://github.com/rust-lang/cargo/pull/9096)\n-   Original Pull Request: [#9992](https://github.com/rust-lang/cargo/pull/9992)\n\nArtifact dependencies allow Cargo packages to depend on `bin`, `cdylib`, and `staticlib` crates, and use the artifacts built by those crates at compile time.\n\nRun `cargo` with `-Z bindeps` to enable this functionality.\n\n### [artifact-dependencies: Dependency declarations](#artifact-dependencies-dependency-declarations)\n\nArtifact-dependencies adds the following keys to a dependency declaration in `Cargo.toml`:\n\n-   `artifact` — This specifies the [Cargo Target](cargo-targets.html) to build. Normally without this field, Cargo will only build the `[lib]` target from a dependency. This field allows specifying which target will be built, and made available as a binary at build time:\n    \n    -   `\"bin\"` — Compiled executable binaries, corresponding to all of the `[[bin]]` sections in the dependency’s manifest.\n    -   `\"bin:<bin-name>\"` — Compiled executable binary, corresponding to a specific binary target specified by the given `<bin-name>`.\n    -   `\"cdylib\"` — A C-compatible dynamic library, corresponding to a `[lib]` section with `crate-type = [\"cdylib\"]` in the dependency’s manifest.\n    -   `\"staticlib\"` — A C-compatible static library, corresponding to a `[lib]` section with `crate-type = [\"staticlib\"]` in the dependency’s manifest.\n    \n    The `artifact` value can be a string, or it can be an array of strings to specify multiple targets.\n    \n    Example:\n    \n    ```toml\n    [dependencies]\n    bar = { version = \"1.0\", artifact = \"staticlib\" }\n    zoo = { version = \"1.0\", artifact = [\"bin:cat\", \"bin:dog\"]}\n    \n    ```\n    \n-   `lib` — This is a Boolean value which indicates whether or not to also build the dependency’s library as a normal Rust `lib` dependency. This field can only be specified when `artifact` is specified.\n    \n    The default for this field is `false` when `artifact` is specified. If this is set to `true`, then the dependency’s `[lib]` target will also be built for the platform target the declaring package is being built for. This allows the package to use the dependency from Rust code like a normal dependency in addition to an artifact dependency.\n    \n    Example:\n    \n    ```toml\n    [dependencies]\n    bar = { version = \"1.0\", artifact = \"bin\", lib = true }\n    \n    ```\n    \n-   `target` — The platform target to build the dependency for. This field can only be specified when `artifact` is specified.\n    \n    The default if this is not specified depends on the dependency kind. For build dependencies, it will be built for the host target. For all other dependencies, it will be built for the same targets the declaring package is built for.\n    \n    For a build dependency, this can also take the special value of `\"target\"` which means to build the dependency for the same targets that the package is being built for.\n    \n    ```toml\n    [build-dependencies]\n    bar = { version = \"1.0\", artifact = \"cdylib\", target = \"wasm32-unknown-unknown\"}\n    same-target = { version = \"1.0\", artifact = \"bin\", target = \"target\" }\n    \n    ```\n    \n\n### [artifact-dependencies: Environment variables](#artifact-dependencies-environment-variables)\n\nAfter building an artifact dependency, Cargo provides the following environment variables that you can use to access the artifact:\n\n-   `CARGO_<ARTIFACT-TYPE>_DIR_<DEP>` — This is the directory containing all the artifacts from the dependency.\n    \n    `<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased as in `CDYLIB`, `STATICLIB`, or `BIN`) and `<DEP>` is the name of the dependency. As with other Cargo environment variables, dependency names are converted to uppercase, with dashes replaced by underscores.\n    \n    If your manifest renames the dependency, `<DEP>` corresponds to the name you specify, not the original package name.\n    \n-   `CARGO_<ARTIFACT-TYPE>_FILE_<DEP>_<NAME>` — This is the full path to the artifact.\n    \n    `<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased as above), `<DEP>` is the name of the dependency (transformed as above), and `<NAME>` is the name of the artifact from the dependency.\n    \n    Note that `<NAME>` is not modified in any way from the `name` specified in the crate supplying the artifact, or the crate name if not specified; for instance, it may be in lowercase, or contain dashes.\n    \n    For convenience, if the artifact name matches the original package name, cargo additionally supplies a copy of this variable with the `_<NAME>` suffix omitted. For instance, if the `cmake` crate supplies a binary named `cmake`, Cargo supplies both `CARGO_BIN_FILE_CMAKE` and `CARGO_BIN_FILE_CMAKE_cmake`.\n    \n\nFor each kind of dependency, these variables are supplied to the same part of the build process that has access to that kind of dependency:\n\n-   For build-dependencies, these variables are supplied to the `build.rs` script, and can be accessed using [`std::env::var_os`](https://doc.rust-lang.org/std/env/fn.var_os.html). (As with any OS file path, these may or may not be valid UTF-8.)\n-   For normal dependencies, these variables are supplied during the compilation of the crate, and can be accessed using the [`env!`](https://doc.rust-lang.org/std/macro.env.html) macro.\n-   For dev-dependencies, these variables are supplied during the compilation of examples, tests, and benchmarks, and can be accessed using the [`env!`](https://doc.rust-lang.org/std/macro.env.html) macro.\n\n### [artifact-dependencies: Examples](#artifact-dependencies-examples)\n\n#### [Example: use a binary executable from a build script](#example-use-a-binary-executable-from-a-build-script)\n\nIn the `Cargo.toml` file, you can specify a dependency on a binary to make available for a build script:\n\n```toml\n[build-dependencies]\nsome-build-tool = { version = \"1.0\", artifact = \"bin\" }\n\n```\n\nThen inside the build script, the binary can be executed at build time:\n\n```rust\nfn main() {\n    let build_tool = std::env::var_os(\"CARGO_BIN_FILE_SOME_BUILD_TOOL\").unwrap();\n    let status = std::process::Command::new(build_tool)\n        .arg(\"do-stuff\")\n        .status()\n        .unwrap();\n    if !status.success() {\n        eprintln!(\"failed!\");\n        std::process::exit(1);\n    }\n}\n```\n\n#### [Example: use _cdylib_ artifact in build script](#example-use-cdylib-artifact-in-build-script)\n\nThe `Cargo.toml` in the consuming package, building the `bar` library as `cdylib` for a specific build target…\n\n```toml\n[build-dependencies]\nbar = { artifact = \"cdylib\", version = \"1.0\", target = \"wasm32-unknown-unknown\" }\n\n```\n\n…along with the build script in `build.rs`.\n\n```rust\nfn main() {\n    wasm::run_file(std::env::var(\"CARGO_CDYLIB_FILE_BAR\").unwrap());\n}\n```\n\n#### [Example: use _binary_ artifact and its library in a binary](#example-use-binary-artifact-and-its-library-in-a-binary)\n\nThe `Cargo.toml` in the consuming package, building the `bar` binary for inclusion as artifact while making it available as library as well…\n\n```toml\n[dependencies]\nbar = { artifact = \"bin\", version = \"1.0\", lib = true }\n\n```\n\n…along with the executable using `main.rs`.\n\n```rust\nfn main() {\n    bar::init();\n    command::run(env!(\"CARGO_BIN_FILE_BAR\"));\n}\n```\n\n## [publish-timeout](#publish-timeout)\n\n-   Tracking Issue: [11222](https://github.com/rust-lang/cargo/issues/11222)\n\nThe `publish.timeout` key in a config file can be used to control how long `cargo publish` waits between posting a package to the registry and it being available in the local index.\n\nA timeout of `0` prevents any checks from occurring. The current default is `60` seconds.\n\nIt requires the `-Zpublish-timeout` command-line options to be set.\n\n```toml\n# config.toml\n[publish]\ntimeout = 300  # in seconds\n\n```\n\n## [asymmetric-token](#asymmetric-token)\n\n-   Tracking Issue: [10519](https://github.com/rust-lang/cargo/issues/10519)\n-   RFC: [#3231](https://github.com/rust-lang/rfcs/pull/3231)\n\nThe `-Z asymmetric-token` flag enables the `cargo:paseto` credential provider which allows Cargo to authenticate to registries without sending secrets over the network.\n\nIn [`config.toml`](config.html) and `credentials.toml` files there is a field called `private-key`, which is a private key formatted in the secret [subset of `PASERK`](https://github.com/paseto-standard/paserk/blob/master/types/secret.md) and is used to sign asymmetric tokens\n\nA keypair can be generated with `cargo login --generate-keypair` which will:\n\n-   generate a public/private keypair in the currently recommended fashion.\n-   save the private key in `credentials.toml`.\n-   print the public key in [PASERK public](https://github.com/paseto-standard/paserk/blob/master/types/public.md) format.\n\nIt is recommended that the `private-key` be saved in `credentials.toml`. It is also supported in `config.toml`, primarily so that it can be set using the associated environment variable, which is the recommended way to provide it in CI contexts. This setup is what we have for the `token` field for setting a secret token.\n\nThere is also an optional field called `private-key-subject` which is a string chosen by the registry. This string will be included as part of an asymmetric token and should not be secret. It is intended for the rare use cases like “cryptographic proof that the central CA server authorized this action”. Cargo requires it to be non-whitespace printable ASCII. Registries that need non-ASCII data should base64 encode it.\n\nBoth fields can be set with `cargo login --registry=name --private-key --private-key-subject=\"subject\"` which will prompt you to put in the key value.\n\nA registry can have at most one of `private-key` or `token` set.\n\nAll PASETOs will include `iat`, the current time in ISO 8601 format. Cargo will include the following where appropriate:\n\n-   `sub` an optional, non-secret string chosen by the registry that is expected to be claimed with every request. The value will be the `private-key-subject` from the `config.toml` file.\n-   `mutation` if present, indicates that this request is a mutating operation (or a read-only operation if not present), must be one of the strings `publish`, `yank`, or `unyank`.\n    -   `name` name of the crate related to this request.\n    -   `vers` version string of the crate related to this request.\n    -   `cksum` the SHA256 hash of the crate contents, as a string of 64 lowercase hexadecimal digits, must be present only when `mutation` is equal to `publish`\n-   `challenge` the challenge string received from a 401/403 from this server this session. Registries that issue challenges must track which challenges have been issued/used and never accept a given challenge more than once within the same validity period (avoiding the need to track every challenge ever issued).\n\nThe “footer” (which is part of the signature) will be a JSON string in UTF-8 and include:\n\n-   `url` the RFC 3986 compliant URL where cargo got the config.json file,\n    -   If this is a registry with an HTTP index, then this is the base URL that all index queries are relative to.\n    -   If this is a registry with a GIT index, it is the URL Cargo used to clone the index.\n-   `kid` the identifier of the private key used to sign the request, using the [PASERK IDs](https://github.com/paseto-standard/paserk/blob/master/operations/ID.md) standard.\n\nPASETO includes the message that was signed, so the server does not have to reconstruct the exact string from the request in order to check the signature. The server does need to check that the signature is valid for the string in the PASETO and that the contents of that string matches the request. If a claim should be expected for the request but is missing in the PASETO then the request must be rejected.\n\n## [`cargo config`](#cargo-config)\n\n-   Original Issue: [#2362](https://github.com/rust-lang/cargo/issues/2362)\n-   Tracking Issue: [#9301](https://github.com/rust-lang/cargo/issues/9301)\n\nThe `cargo config` subcommand provides a way to display the configuration files that cargo loads. It currently includes the `get` subcommand which can take an optional config value to display.\n\n```console\ncargo +nightly -Zunstable-options config get build.rustflags\n\n```\n\nIf no config value is included, it will display all config values. See the `--help` output for more options available.\n\n## [rustc `--print`](#rustc---print)\n\n-   Tracking Issue: [#9357](https://github.com/rust-lang/cargo/issues/9357)\n\n`cargo rustc --print=VAL` forwards the `--print` flag to `rustc` in order to extract information from `rustc`. This runs `rustc` with the corresponding [`--print`](https://doc.rust-lang.org/rustc/command-line-arguments.html#--print-print-compiler-information) flag, and then immediately exits without compiling. Exposing this as a cargo flag allows cargo to inject the correct target and RUSTFLAGS based on the current configuration.\n\nThe primary use case is to run `cargo rustc --print=cfg` to get config values for the appropriate target and influenced by any other RUSTFLAGS.\n\n## [Different binary name](#different-binary-name)\n\n-   Tracking Issue: [#9778](https://github.com/rust-lang/cargo/issues/9778)\n-   PR: [#9627](https://github.com/rust-lang/cargo/pull/9627)\n\nThe `different-binary-name` feature allows setting the filename of the binary without having to obey the restrictions placed on crate names. For example, the crate name must use only `alphanumeric` characters or `-` or `_`, and cannot be empty.\n\nThe `filename` parameter should **not** include the binary extension, `cargo` will figure out the appropriate extension and use that for the binary on its own.\n\nThe `filename` parameter is only available in the `[[bin]]` section of the manifest.\n\n```toml\ncargo-features = [\"different-binary-name\"]\n\n[package]\nname =  \"foo\"\nversion = \"0.0.1\"\n\n[[bin]]\nname = \"foo\"\nfilename = \"007bar\"\npath = \"src/main.rs\"\n\n```\n\n## [scrape-examples](#scrape-examples)\n\n-   RFC: [#3123](https://github.com/rust-lang/rfcs/pull/3123)\n-   Tracking Issue: [#9910](https://github.com/rust-lang/cargo/issues/9910)\n\nThe `-Z rustdoc-scrape-examples` flag tells Rustdoc to search crates in the current workspace for calls to functions. Those call-sites are then included as documentation. You can use the flag like this:\n\n```\ncargo doc -Z unstable-options -Z rustdoc-scrape-examples\n\n```\n\nBy default, Cargo will scrape examples from the example targets of packages being documented. You can individually enable or disable targets from being scraped with the `doc-scrape-examples` flag, such as:\n\n```toml\n# Enable scraping examples from a library\n[lib]\ndoc-scrape-examples = true\n\n# Disable scraping examples from an example target\n[[example]]\nname = \"my-example\"\ndoc-scrape-examples = false\n\n```\n\n**Note on tests:** enabling `doc-scrape-examples` on test targets will not currently have any effect. Scraping examples from tests is a work-in-progress.\n\n**Note on dev-dependencies:** documenting a library does not normally require the crate’s dev-dependencies. However, example targets require dev-deps. For backwards compatibility, `-Z rustdoc-scrape-examples` will _not_ introduce a dev-deps requirement for `cargo doc`. Therefore examples will _not_ be scraped from example targets under the following conditions:\n\n1.  No target being documented requires dev-deps, AND\n2.  At least one crate with targets being documented has dev-deps, AND\n3.  The `doc-scrape-examples` parameter is unset or false for all `[[example]]` targets.\n\nIf you want examples to be scraped from example targets, then you must not satisfy one of the above conditions. For example, you can set `doc-scrape-examples` to true for one example target, and that signals to Cargo that you are ok with dev-deps being build for `cargo doc`.\n\n## [output-format for rustdoc](#output-format-for-rustdoc)\n\n-   Tracking Issue: [#13283](https://github.com/rust-lang/cargo/issues/13283)\n\nThis flag determines the output format of `cargo rustdoc`, accepting `html` or `json`, providing tools with a way to lean on [rustdoc’s experimental JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/).\n\nYou can use the flag like this:\n\n```\ncargo rustdoc -Z unstable-options --output-format json\n\n```\n\n## [codegen-backend](#codegen-backend)\n\nThe `codegen-backend` feature makes it possible to select the codegen backend used by rustc using a profile.\n\nExample:\n\n```toml\n[package]\nname = \"foo\"\n\n[dependencies]\nserde = \"1.0.117\"\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z codegen-backend` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\ncodegen-backend = true\n\n[profile.dev.package.foo]\ncodegen-backend = \"cranelift\"\n\n```\n\n## [gitoxide](#gitoxide)\n\n-   Tracking Issue: [#11813](https://github.com/rust-lang/cargo/issues/11813)\n\nWith the ‘gitoxide’ unstable feature, all or the specified git operations will be performed by the `gitoxide` crate instead of `git2`.\n\nWhile `-Zgitoxide` enables all currently implemented features, one can individually select git operations to run with `gitoxide` with the `-Zgitoxide=operation[,operationN]` syntax.\n\nValid operations are the following:\n\n-   `fetch` - All fetches are done with `gitoxide`, which includes git dependencies as well as the crates index.\n-   `checkout` _(planned)_ - checkout the worktree, with support for filters and submodules.\n\n## [git](#git)\n\n-   Tracking Issue: [#13285](https://github.com/rust-lang/cargo/issues/13285)\n\nWith the ‘git’ unstable feature, both `gitoxide` and `git2` will perform shallow fetches of the crate index and git dependencies.\n\nWhile `-Zgit` enables all currently implemented features, one can individually select when to perform shallow fetches with the `-Zgit=operation[,operationN]` syntax.\n\nValid operations are the following:\n\n-   `shallow-index` - perform a shallow clone of the index.\n-   `shallow-deps` - perform a shallow clone of git dependencies.\n\n**Details on shallow clones**\n\n-   To enable shallow clones, add `-Zgit=shallow-deps` for fetching git dependencies or `-Zgit=shallow-index` for fetching registry index.\n-   Shallow-cloned and shallow-checked-out git repositories reside at their own `-shallow` suffixed directories, i.e,\n    -   `~/.cargo/registry/index/*-shallow`\n    -   `~/.cargo/git/db/*-shallow`\n    -   `~/.cargo/git/checkouts/*-shallow`\n-   When the unstable feature is on, fetching/cloning a git repository is always a shallow fetch. This roughly equals to `git fetch --depth 1` everywhere.\n-   Even with the presence of `Cargo.lock` or specifying a commit `{ rev = \"…\" }`, gitoxide and libgit2 are still smart enough to shallow fetch without unshallowing the existing repository.\n\n## [script](#script)\n\n-   Tracking Issue: [#12207](https://github.com/rust-lang/cargo/issues/12207)\n\nCargo can directly run `.rs` files as:\n\n```console\n$ cargo +nightly -Zscript file.rs\n\n```\n\nwhere `file.rs` can be as simple as:\n\n```rust\nfn main() {}\n```\n\nA user may optionally specify a manifest in a `cargo` code fence in a module-level comment, like:\n\n```rust\n#!/usr/bin/env -S cargo +nightly -Zscript\n---cargo\n[dependencies]\nclap = { version = \"4.2\", features = [\"derive\"] }\n---\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = \"Path to config\")]\n    config: Option<std::path::PathBuf>,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(\"{:?}\", args);\n}\n```\n\n### [Single-file packages](#single-file-packages)\n\nIn addition to today’s multi-file packages (`Cargo.toml` file with other `.rs` files), we are adding the concept of single-file packages which may contain an embedded manifest. There is no required distinguishment for a single-file `.rs` package from any other `.rs` file.\n\nSingle-file packages may be selected via `--manifest-path`, like `cargo test --manifest-path foo.rs`. Unlike `Cargo.toml`, these files cannot be auto-discovered.\n\nA single-file package may contain an embedded manifest. An embedded manifest is stored using `TOML` in rust “frontmatter”, a markdown code-fence with `cargo` at the start of the infostring at the top of the file.\n\nInferred / defaulted manifest fields:\n\n-   `package.name = <slugified file stem>`\n-   `package.edition = <current>` to avoid always having to add an embedded manifest at the cost of potentially breaking scripts on rust upgrades\n    -   Warn when `edition` is unspecified to raise awareness of this\n\nDisallowed manifest fields:\n\n-   `[workspace]`, `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, `[[bench]]`\n-   `package.workspace`, `package.build`, `package.links`, `package.autobins`, `package.autoexamples`, `package.autotests`, `package.autobenches`\n\nThe default `CARGO_TARGET_DIR` for single-file packages is at `$CARGO_HOME/target/<hash>`:\n\n-   Avoid conflicts from multiple single-file packages being in the same directory\n-   Avoid problems with the single-file package’s parent directory being read-only\n-   Avoid cluttering the user’s directory\n\nThe lockfile for single-file packages will be placed in `CARGO_TARGET_DIR`. In the future, when workspaces are supported, that will allow a user to have a persistent lockfile.\n\n### [Manifest-commands](#manifest-commands)\n\nYou may pass a manifest directly to the `cargo` command, without a subcommand, like `foo/Cargo.toml` or a single-file package like `foo.rs`. This is mostly intended for being put in `#!` lines.\n\nThe precedence for how to interpret `cargo <subcommand>` is\n\n1.  Built-in xor single-file packages\n2.  Aliases\n3.  External subcommands\n\nA parameter is identified as a manifest-command if it has one of:\n\n-   Path separators\n-   A `.rs` extension\n-   The file name is `Cargo.toml`\n\nDifferences between `cargo run --manifest-path <path>` and `cargo <path>`\n\n-   `cargo <path>` runs with the config for `<path>` and not the current dir, more like `cargo install --path <path>`\n-   `cargo <path>` is at a verbosity level below the normal default. Pass `-v` to get normal output.\n\n### [Documentation Updates](#documentation-updates)\n\n## [Edition 2024](#edition-2024)\n\n-   Tracking Issue: (none created yet)\n-   RFC: [rust-lang/rfcs#3501](https://github.com/rust-lang/rfcs/pull/3501)\n\nSupport for the 2024 [edition](../../edition-guide/index.html) can be enabled by adding the `edition2024` unstable feature to the top of `Cargo.toml`:\n\n```toml\ncargo-features = [\"edition2024\"]\n\n[package]\nname = \"my-package\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n```\n\nIf you want to transition an existing project from a previous edition, then `cargo fix --edition` can be used on the nightly channel. After running `cargo fix`, you can switch the edition to 2024 as illustrated above.\n\nThis feature is very unstable, and is only intended for early testing and experimentation. Future nightly releases may introduce changes for the 2024 edition that may break your build.\n\n## [Profile `trim-paths` option](#profile-trim-paths-option)\n\n-   Tracking Issue: [rust-lang/cargo#12137](https://github.com/rust-lang/cargo/issues/12137)\n-   Tracking Rustc Issue: [rust-lang/rust#111540](https://github.com/rust-lang/rust/issues/111540)\n\nThis adds a new profile setting to control how paths are sanitized in the resulting binary. This can be enabled like so:\n\n```toml\ncargo-features = [\"trim-paths\"]\n\n[package]\n# ...\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n\n```\n\nTo set this in a profile in Cargo configuration, you need to use either `-Z trim-paths` or `[unstable]` table to enable it. For example,\n\n```toml\n# .cargo/config.toml\n[unstable]\ntrim-paths = true\n\n[profile.release]\ntrim-paths = [\"diagnostics\", \"object\"]\n\n```\n\n### [Documentation updates](#documentation-updates-1)\n\n#### [trim-paths](#trim-paths)\n\n_as a new [“Profiles settings” entry](about:blank/profiles.html#profile-settings)_\n\n`trim-paths` is a profile setting which enables and controls the sanitization of file paths in build outputs. It takes the following values:\n\n-   `\"none\"` and `false` — disable path sanitization\n-   `\"macro\"` — sanitize paths in the expansion of `std::file!()` macro. This is where paths in embedded panic messages come from\n-   `\"diagnostics\"` — sanitize paths in printed compiler diagnostics\n-   `\"object\"` — sanitize paths in compiled executables or libraries\n-   `\"all\"` and `true` — sanitize paths in all possible locations\n\nIt also takes an array with the combinations of `\"macro\"`, `\"diagnostics\"`, and `\"object\"`.\n\nIt is defaulted to `none` for the `dev` profile, and `object` for the `release` profile. You can manually override it by specifying this option in `Cargo.toml`:\n\n```toml\n[profile.dev]\ntrim-paths = \"all\"\n\n[profile.release]\ntrim-paths = [\"object\", \"diagnostics\"]\n\n```\n\nThe default `release` profile setting (`object`) sanitizes only the paths in emitted executable or library files. It always affects paths from macros such as panic messages, and in debug information only if they will be embedded together with the binary (the default on platforms with ELF binaries, such as Linux and windows-gnu), but will not touch them if they are in separate files (the default on Windows MSVC and macOS). But the paths to these separate files are sanitized.\n\nIf `trim-paths` is not `none` or `false`, then the following paths are sanitized if they appear in a selected scope:\n\n1.  Path to the source files of the standard and core library (sysroot) will begin with `/rustc/[rustc commit hash]`, e.g. `/home/username/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs` -> `/rustc/fe72845f7bb6a77b9e671e6a4f32fe714962cec4/library/core/src/result.rs`\n2.  Path to the current package will be stripped, relatively to the current workspace root, e.g. `/home/username/crate/src/lib.rs` -> `src/lib.rs`.\n3.  Path to dependency packages will be replaced with `[package name]-[version]`. E.g. `/home/username/deps/foo/src/lib.rs` -> `foo-0.1.0/src/lib.rs`\n\nWhen a path to the source files of the standard and core library is _not_ in scope for sanitization, the emitted path will depend on if `rust-src` component is present. If it is, then some paths will point to the copy of the source files on your file system; if it isn’t, then they will show up as `/rustc/[rustc commit hash]/library/...` (just like when it is selected for sanitization). Paths to all other source files will not be affected.\n\nThis will not affect any hard-coded paths in the source code, such as in strings.\n\n#### [Environment variable](#environment-variable)\n\n_as a new entry of [“Environment variables Cargo sets for build scripts”](about:blank/environment-variables.html#environment-variables-cargo-sets-for-crates)_\n\n-   `CARGO_TRIM_PATHS` — The value of `trim-paths` profile option. `false`, `\"none\"`, and empty arrays would be converted to `none`. `true` and `\"all\"` become `all`. Values in a non-empty array would be joined into a comma-separated list. If the build script introduces absolute paths to built artifacts (such as by invoking a compiler), the user may request them to be sanitized in different types of artifacts. Common paths requiring sanitization include `OUT_DIR` and `CARGO_MANIFEST_DIR`, plus any other introduced by the build script, such as include directories.\n\n## [gc](#gc)\n\n-   Tracking Issue: [#12633](https://github.com/rust-lang/cargo/issues/12633)\n\nThe `-Zgc` flag enables garbage-collection within cargo’s global cache within the cargo home directory. This includes downloaded dependencies such as compressed `.crate` files, extracted `src` directories, registry index caches, and git dependencies. When `-Zgc` is present, cargo will track the last time any index and dependency was used, and then uses those timestamps to manually or automatically delete cache entries that have not been used for a while.\n\n```sh\ncargo build -Zgc\n\n```\n\n### [Automatic garbage collection](#automatic-garbage-collection)\n\nAutomatic deletion happens on commands that are already doing a significant amount of work, such as all of the build commands (`cargo build`, `cargo test`, `cargo check`, etc.), and `cargo fetch`. The deletion happens just after resolution and packages have been downloaded. Automatic deletion is only done once per day (see `gc.auto.frequency` to configure). Automatic deletion is disabled if cargo is offline such as with `--offline` or `--frozen` to avoid deleting artifacts that may need to be used if you are offline for a long period of time.\n\n#### [Automatic gc configuration](#automatic-gc-configuration)\n\nThe automatic gc behavior can be specified via a cargo configuration setting. The settings available are:\n\n```toml\n# Example config.toml file.\n\n# This table defines the behavior for automatic garbage collection.\n[gc.auto]\n# The maximum frequency that automatic garbage collection happens.\n# Can be \"never\" to disable automatic-gc, or \"always\" to run on every command.\nfrequency = \"1 day\"\n# Anything older than this duration will be deleted in the source cache.\nmax-src-age = \"1 month\"\n# Anything older than this duration will be deleted in the compressed crate cache.\nmax-crate-age = \"3 months\"\n# Any index older than this duration will be deleted from the index cache.\nmax-index-age = \"3 months\"\n# Any git checkout older than this duration will be deleted from the checkout cache.\nmax-git-co-age = \"1 month\"\n# Any git clone older than this duration will be deleted from the git cache.\nmax-git-db-age = \"3 months\"\n\n```\n\n### [Manual garbage collection with `cargo clean`](#manual-garbage-collection-with-cargo-clean)\n\nManual deletion can be done with the `cargo clean gc` command. Deletion of cache contents can be performed by passing one of the cache options:\n\n-   `--max-src-age=DURATION` — Deletes source cache files that have not been used since the given age.\n-   `--max-crate-age=DURATION` — Deletes crate cache files that have not been used since the given age.\n-   `--max-index-age=DURATION` — Deletes registry indexes that have not been used since then given age (including their `.crate` and `src` files).\n-   `--max-git-co-age=DURATION` — Deletes git dependency checkouts that have not been used since then given age.\n-   `--max-git-db-age=DURATION` — Deletes git dependency clones that have not been used since then given age.\n-   `--max-download-age=DURATION` — Deletes any downloaded cache data that has not been used since then given age.\n-   `--max-src-size=SIZE` — Deletes the oldest source cache files until the cache is under the given size.\n-   `--max-crate-size=SIZE` — Deletes the oldest crate cache files until the cache is under the given size.\n-   `--max-git-size=SIZE` — Deletes the oldest git dependency caches until the cache is under the given size.\n-   `--max-download-size=SIZE` — Deletes the oldest downloaded cache data until the cache is under the given size.\n\nA DURATION is specified in the form “N seconds/minutes/days/weeks/months” where N is an integer.\n\nA SIZE is specified in the form “N _suffix_” where _suffix_ is B, kB, MB, GB, kiB, MiB, or GiB, and N is an integer or floating point number. If no suffix is specified, the number is the number of bytes.\n\n```sh\ncargo clean gc\ncargo clean gc --max-download-age=1week\ncargo clean gc --max-git-size=0 --max-download-size=100MB\n\n```\n\n## [open-namespaces](#open-namespaces)\n\n-   Tracking Issue: [#13576](https://github.com/rust-lang/cargo/issues/13576)\n\nAllow multiple packages to participate in the same API namespace\n\nThis can be enabled like so:\n\n```toml\ncargo-features = [\"open-namespaces\"]\n\n[package]\n# ...\n\n```\n\n## [`[lints.cargo]`](#lintscargo)\n\n-   Tracking Issue: [#12235](https://github.com/rust-lang/cargo/issues/12235)\n\nA new `lints` tool table for `cargo` that can be used to configure lints emitted by `cargo` itself when `-Zcargo-lints` is used\n\n```toml\n[lints.cargo]\nimplicit-features = \"warn\"\n\n```\n\nThis will work with [RFC 2906 `workspace-deduplicate`](https://rust-lang.github.io/rfcs/2906-cargo-workspace-deduplicate.html):\n\n```toml\n[workspace.lints.cargo]\nimplicit-features = \"warn\"\n\n[lints]\nworkspace = true\n\n```\n\n## [Stabilized and removed features](#stabilized-and-removed-features)\n\n## [Compile progress](#compile-progress)\n\nThe compile-progress feature has been stabilized in the 1.30 release. Progress bars are now enabled by default. See [`term.progress`](about:blank/config.html#termprogresswhen) for more information about controlling this feature.\n\n## [Edition](#edition)\n\nSpecifying the `edition` in `Cargo.toml` has been stabilized in the 1.31 release. See [the edition field](about:blank/manifest.html#the-edition-field) for more information about specifying this field.\n\n## [rename-dependency](#rename-dependency)\n\nSpecifying renamed dependencies in `Cargo.toml` has been stabilized in the 1.31 release. See [renaming dependencies](about:blank/specifying-dependencies.html#renaming-dependencies-in-cargotoml) for more information about renaming dependencies.\n\n## [Alternate Registries](#alternate-registries)\n\nSupport for alternate registries has been stabilized in the 1.34 release. See the [Registries chapter](registries.html) for more information about alternate registries.\n\n## [Offline Mode](#offline-mode)\n\nThe offline feature has been stabilized in the 1.36 release. See the [`--offline` flag](about:blank/commands/cargo.html#option-cargo---offline) for more information on using the offline mode.\n\n## [publish-lockfile](#publish-lockfile)\n\nThe `publish-lockfile` feature has been removed in the 1.37 release. The `Cargo.lock` file is always included when a package is published if the package contains a binary target. `cargo install` requires the `--locked` flag to use the `Cargo.lock` file. See [`cargo package`](../commands/cargo-package.html) and [`cargo install`](../commands/cargo-install.html) for more information.\n\n## [default-run](#default-run)\n\nThe `default-run` feature has been stabilized in the 1.37 release. See [the `default-run` field](about:blank/manifest.html#the-default-run-field) for more information about specifying the default target to run.\n\n## [cache-messages](#cache-messages)\n\nCompiler message caching has been stabilized in the 1.40 release. Compiler warnings are now cached by default and will be replayed automatically when re-running Cargo.\n\n## [install-upgrade](#install-upgrade)\n\nThe `install-upgrade` feature has been stabilized in the 1.41 release. [`cargo install`](../commands/cargo-install.html) will now automatically upgrade packages if they appear to be out-of-date. See the [`cargo install`](../commands/cargo-install.html) documentation for more information.\n\n## [Profile Overrides](#profile-overrides)\n\nProfile overrides have been stabilized in the 1.41 release. See [Profile Overrides](about:blank/profiles.html#overrides) for more information on using overrides.\n\n## [Config Profiles](#config-profiles)\n\nSpecifying profiles in Cargo config files and environment variables has been stabilized in the 1.43 release. See the [config `[profile]` table](about:blank/config.html#profile) for more information about specifying [profiles](profiles.html) in config files.\n\n## [crate-versions](#crate-versions)\n\nThe `-Z crate-versions` flag has been stabilized in the 1.47 release. The crate version is now automatically included in the [`cargo doc`](../commands/cargo-doc.html) documentation sidebar.\n\n## [Features](#features)\n\nThe `-Z features` flag has been stabilized in the 1.51 release. See [feature resolver version 2](about:blank/features.html#feature-resolver-version-2) for more information on using the new feature resolver.\n\n## [package-features](#package-features)\n\nThe `-Z package-features` flag has been stabilized in the 1.51 release. See the [resolver version 2 command-line flags](about:blank/features.html#resolver-version-2-command-line-flags) for more information on using the features CLI options.\n\n## [Resolver](#resolver)\n\nThe `resolver` feature in `Cargo.toml` has been stabilized in the 1.51 release. See the [resolver versions](about:blank/resolver.html#resolver-versions) for more information about specifying resolvers.\n\nThe `extra-link-arg` feature to specify additional linker arguments in build scripts has been stabilized in the 1.56 release. See the [build script documentation](about:blank/build-scripts.html#outputs-of-the-build-script) for more information on specifying extra linker arguments.\n\n## [configurable-env](#configurable-env)\n\nThe `configurable-env` feature to specify environment variables in Cargo configuration has been stabilized in the 1.56 release. See the [config documentation](about:blank/config.html#env) for more information about configuring environment variables.\n\n## [rust-version](#rust-version)\n\nThe `rust-version` field in `Cargo.toml` has been stabilized in the 1.56 release. See the [rust-version field](about:blank/manifest.html#the-rust-version-field) for more information on using the `rust-version` field and the `--ignore-rust-version` option.\n\n## [patch-in-config](#patch-in-config)\n\nThe `-Z patch-in-config` flag, and the corresponding support for `[patch]` section in Cargo configuration files has been stabilized in the 1.56 release. See the [patch field](about:blank/config.html#patch) for more information.\n\n## [edition 2021](#edition-2021)\n\nThe 2021 edition has been stabilized in the 1.56 release. See the [`edition` field](about:blank/manifest.html#the-edition-field) for more information on setting the edition. See [`cargo fix --edition`](../commands/cargo-fix.html) and [The Edition Guide](../../edition-guide/index.html) for more information on migrating existing projects.\n\n## [Custom named profiles](#custom-named-profiles)\n\nCustom named profiles have been stabilized in the 1.57 release. See the [profiles chapter](about:blank/profiles.html#custom-profiles) for more information.\n\n## [Profile `strip` option](#profile-strip-option)\n\nThe profile `strip` option has been stabilized in the 1.59 release. See the [profiles chapter](about:blank/profiles.html#strip) for more information.\n\n## [Future incompat report](#future-incompat-report)\n\nSupport for generating a future-incompat report has been stabilized in the 1.59 release. See the [future incompat report chapter](future-incompat-report.html) for more information.\n\n## [Namespaced features](#namespaced-features)\n\nNamespaced features has been stabilized in the 1.60 release. See the [Features chapter](about:blank/features.html#optional-dependencies) for more information.\n\n## [Weak dependency features](#weak-dependency-features)\n\nWeak dependency features has been stabilized in the 1.60 release. See the [Features chapter](about:blank/features.html#dependency-features) for more information.\n\n## [timings](#timings)\n\nThe `-Ztimings` option has been stabilized as `--timings` in the 1.60 release. (`--timings=html` and the machine-readable `--timings=json` output remain unstable and require `-Zunstable-options`.)\n\n## [config-cli](#config-cli)\n\nThe `--config` CLI option has been stabilized in the 1.63 release. See the [config documentation](about:blank/config.html#command-line-overrides) for more information.\n\n## [multitarget](#multitarget)\n\nThe `-Z multitarget` option has been stabilized in the 1.64 release. See [`build.target`](about:blank/config.html#buildtarget) for more information about setting the default [target platform triples](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\").\n\n## [crate-type](#crate-type)\n\nThe `--crate-type` flag for `cargo rustc` has been stabilized in the 1.64 release. See the [`cargo rustc` documentation](../commands/cargo-rustc.html) for more information.\n\n## [Workspace Inheritance](#workspace-inheritance)\n\nWorkspace Inheritance has been stabilized in the 1.64 release. See [workspace.package](about:blank/workspaces.html#the-package-table), [workspace.dependencies](about:blank/workspaces.html#the-dependencies-table), and [inheriting-a-dependency-from-a-workspace](about:blank/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace) for more information.\n\n## [terminal-width](#terminal-width)\n\nThe `-Z terminal-width` option has been stabilized in the 1.68 release. The terminal width is always passed to the compiler when running from a terminal where Cargo can automatically detect the width.\n\n## [sparse-registry](#sparse-registry)\n\nSparse registry support has been stabilized in the 1.68 release. See [Registry Protocols](about:blank/registries.html#registry-protocols) for more information.\n\n### [`cargo logout`](#cargo-logout)\n\nThe [`cargo logout`](../commands/cargo-logout.html) command has been stabilized in the 1.70 release.\n\n## [`doctest-in-workspace`](#doctest-in-workspace)\n\nThe `-Z doctest-in-workspace` option for `cargo test` has been stabilized and enabled by default in the 1.72 release. See the [`cargo test` documentation](about:blank/commands/cargo-test.html#working-directory-of-tests) for more information about the working directory for compiling and running tests.\n\n## [keep-going](#keep-going)\n\nThe `--keep-going` option has been stabilized in the 1.74 release. See the [`--keep-going` flag](about:blank/commands/cargo-build.html#option-cargo-build---keep-going) in `cargo build` as an example for more details.\n\n## [`[lints]`](#lints)\n\n[`[lints]`](about:blank/manifest.html#the-lints-section) (enabled via `-Zlints`) has been stabilized in the 1.74 release.\n\n## [credential-process](#credential-process)\n\nThe `-Z credential-process` feature has been stabilized in the 1.74 release.\n\nSee [Registry Authentication](registry-authentication.html) documentation for details.\n\n## [registry-auth](#registry-auth)\n\nThe `-Z registry-auth` feature has been stabilized in the 1.74 release with the additional requirement that a credential-provider is configured.\n\nSee [Registry Authentication](registry-authentication.html) documentation for details.\n\n## [check-cfg](#check-cfg)\n\nThe `-Z check-cfg` feature has been stabilized in the 1.80 release by making it the default behavior.\n\nSee the [build script documentation](about:blank/build-scripts.html#rustc-check-cfg) for informations about specifying custom cfgs.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Unstable Features - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/unstable.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"unstable-features\"><a class=\"header\" href=\"#unstable-features\">Unstable Features</a></h1>\n<p>Experimental Cargo features are only available on the <a href=\"../../book/appendix-07-nightly-rust.html\">nightly channel</a>. You\nare encouraged to experiment with these features to see if they meet your\nneeds, and if there are any issues or problems. Check the linked tracking\nissues listed below for more information on the feature, and click the GitHub\nsubscribe button if you want future updates.</p>\n<p>After some period of time, if the feature does not have any major concerns, it\ncan be <a href=\"https://doc.crates.io/contrib/process/unstable.html#stabilization\">stabilized</a>, which will make it available on stable once the current\nnightly release reaches the stable channel (anywhere from 6 to 12 weeks).</p>\n<p>There are three different ways that unstable features can be enabled based on\nhow the feature works:</p>\n<ul>\n<li>\n<p>New syntax in <code class=\"hljs\">Cargo.toml</code> requires a <code class=\"hljs\">cargo-features</code> key at the top of\n<code class=\"hljs\">Cargo.toml</code>, before any tables. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># This specifies which new Cargo.toml features are enabled.</span>\n<span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"test-dummy-unstable\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">im-a-teapot</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># This is a new option enabled by test-dummy-unstable.</span>\n</code></pre>\n</li>\n<li>\n<p>New command-line flags, options, and subcommands require the <code class=\"hljs\">-Z unstable-options</code> CLI option to also be included. For example, the new\n<code class=\"hljs\">--out-dir</code> option is only available on nightly:</p>\n<p><code class=\"hljs\">cargo +nightly build --out-dir=out -Z unstable-options</code></p>\n</li>\n<li>\n<p><code class=\"hljs\">-Z</code> command-line flags are used to enable new functionality that may not\nhave an interface, or the interface has not yet been designed, or for more\ncomplex features that affect multiple parts of Cargo. For example, the\n<a href=\"#mtime-on-use\">mtime-on-use</a> feature can be enabled with:</p>\n<p><code class=\"hljs\">cargo +nightly build -Z mtime-on-use</code></p>\n<p>Run <code class=\"hljs\">cargo -Z help</code> to see a list of flags available.</p>\n<p>Anything which can be configured with a <code class=\"hljs\">-Z</code> flag can also be set in the\ncargo <a href=\"config.html\">config file</a> (<code class=\"hljs\">.cargo/config.toml</code>) in the <code class=\"hljs\">unstable</code> table. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">mtime-on-use</span> = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">build-std</span> = [<span class=\"hljs-string\">\"core\"</span>, <span class=\"hljs-string\">\"alloc\"</span>]\n</code></pre>\n</li>\n</ul>\n<p>Each new feature described below should explain how to use it.\nFor the latest nightly, see the <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#script\">nightly version</a> of this page.</p>\n<h2 id=\"list-of-unstable-features\"><a class=\"header\" href=\"#list-of-unstable-features\">List of unstable features</a></h2>\n<ul>\n<li>Unstable-specific features\n<ul>\n<li><a href=\"#allow-features\">-Z allow-features</a> — Provides a way to restrict which unstable features are used.</li>\n</ul>\n</li>\n<li>Build scripts and linking\n<ul>\n<li><a href=\"#metabuild\">Metabuild</a> — Provides declarative build scripts.</li>\n</ul>\n</li>\n<li>Resolver and features\n<ul>\n<li><a href=\"#no-index-update\">no-index-update</a> — Prevents cargo from updating the index cache.</li>\n<li><a href=\"#avoid-dev-deps\">avoid-dev-deps</a> — Prevents the resolver from including dev-dependencies during resolution.</li>\n<li><a href=\"#minimal-versions\">minimal-versions</a> — Forces the resolver to use the lowest compatible version instead of the highest.</li>\n<li><a href=\"#direct-minimal-versions\">direct-minimal-versions</a> — Forces the resolver to use the lowest compatible version instead of the highest.</li>\n<li><a href=\"#public-dependency\">public-dependency</a> — Allows dependencies to be classified as either public or private.</li>\n<li><a href=\"#msrv-policy\">msrv-policy</a> — MSRV-aware resolver and version selection</li>\n<li><a href=\"#precise-pre-release\">precise-pre-release</a> — Allows pre-release versions to be selected with <code class=\"hljs\">update --precise</code></li>\n</ul>\n</li>\n<li>Output behavior\n<ul>\n<li><a href=\"#out-dir\">out-dir</a> — Adds a directory where artifacts are copied to.</li>\n<li><a href=\"#different-binary-name\">Different binary name</a> — Assign a name to the built binary that is separate from the crate name.</li>\n</ul>\n</li>\n<li>Compile behavior\n<ul>\n<li><a href=\"#mtime-on-use\">mtime-on-use</a> — Updates the last-modified timestamp on every dependency every time it is used, to provide a mechanism to delete unused artifacts.</li>\n<li><a href=\"#doctest-xcompile\">doctest-xcompile</a> — Supports running doctests with the <code class=\"hljs\">--target</code> flag.</li>\n<li><a href=\"#build-std\">build-std</a> — Builds the standard library instead of using pre-built binaries.</li>\n<li><a href=\"#build-std-features\">build-std-features</a> — Sets features to use with the standard library.</li>\n<li><a href=\"#binary-dep-depinfo\">binary-dep-depinfo</a> — Causes the dep-info file to track binary dependencies.</li>\n<li><a href=\"#panic-abort-tests\">panic-abort-tests</a> — Allows running tests with the “abort” panic strategy.</li>\n<li><a href=\"#host-config\">host-config</a> — Allows setting <code class=\"hljs\">[target]</code>-like configuration settings for host build targets.</li>\n<li><a href=\"#target-applies-to-host\">target-applies-to-host</a> — Alters whether certain flags will be passed to host build targets.</li>\n<li><a href=\"#gc\">gc</a> — Global cache garbage collection.</li>\n<li><a href=\"#open-namespaces\">open-namespaces</a> — Allow multiple packages to participate in the same API namespace</li>\n</ul>\n</li>\n<li>rustdoc\n<ul>\n<li><a href=\"#rustdoc-map\">rustdoc-map</a> — Provides mappings for documentation to link to external sites like <a href=\"https://docs.rs/\">docs.rs</a>.</li>\n<li><a href=\"#scrape-examples\">scrape-examples</a> — Shows examples within documentation.</li>\n<li><a href=\"#output-format-for-rustdoc\">output-format</a> — Allows documentation to also be emitted in the experimental <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/\">JSON format</a>.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">Cargo.toml</code> extensions\n<ul>\n<li><a href=\"#profile-rustflags-option\">Profile <code class=\"hljs\">rustflags</code> option</a> — Passed directly to rustc.</li>\n<li><a href=\"#codegen-backend\">codegen-backend</a> — Select the codegen backend used by rustc.</li>\n<li><a href=\"#per-package-target\">per-package-target</a> — Sets the <code class=\"hljs\">--target</code> to use for each individual package.</li>\n<li><a href=\"#artifact-dependencies\">artifact dependencies</a> — Allow build artifacts to be included into other build artifacts and build them for different targets.</li>\n<li><a href=\"#edition-2024\">Edition 2024</a> — Adds support for the 2024 Edition.</li>\n<li><a href=\"#profile-trim-paths-option\">Profile <code class=\"hljs\">trim-paths</code> option</a> — Control the sanitization of file paths in build outputs.</li>\n<li><a href=\"#lintscargo\"><code class=\"hljs\">[lints.cargo]</code></a> — Allows configuring lints for Cargo.</li>\n</ul>\n</li>\n<li>Information and metadata\n<ul>\n<li><a href=\"#build-plan\">Build-plan</a> — Emits JSON information on which commands will be run.</li>\n<li><a href=\"#unit-graph\">unit-graph</a> — Emits JSON for Cargo’s internal graph structure.</li>\n<li><a href=\"#rustc---print\"><code class=\"hljs\">cargo rustc --print</code></a> — Calls rustc with <code class=\"hljs\">--print</code> to display information from rustc.</li>\n</ul>\n</li>\n<li>Configuration\n<ul>\n<li><a href=\"#config-include\">config-include</a> — Adds the ability for config files to include other files.</li>\n<li><a href=\"#cargo-config\"><code class=\"hljs\">cargo config</code></a> — Adds a new subcommand for viewing config files.</li>\n</ul>\n</li>\n<li>Registries\n<ul>\n<li><a href=\"#publish-timeout\">publish-timeout</a> — Controls the timeout between uploading the crate and being available in the index</li>\n<li><a href=\"#asymmetric-token\">asymmetric-token</a> — Adds support for authentication tokens using asymmetric cryptography (<code class=\"hljs\">cargo:paseto</code> provider).</li>\n</ul>\n</li>\n<li>Other\n<ul>\n<li><a href=\"#gitoxide\">gitoxide</a> — Use <code class=\"hljs\">gitoxide</code> instead of <code class=\"hljs\">git2</code> for a set of operations.</li>\n<li><a href=\"#script\">script</a> — Enable support for single-file <code class=\"hljs\">.rs</code> packages.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"allow-features\"><a class=\"header\" href=\"#allow-features\">allow-features</a></h2>\n<p>This permanently-unstable flag makes it so that only a listed set of\nunstable features can be used. Specifically, if you pass\n<code class=\"hljs\">-Zallow-features=foo,bar</code>, you’ll continue to be able to pass <code class=\"hljs\">-Zfoo</code>\nand <code class=\"hljs\">-Zbar</code> to <code class=\"hljs\">cargo</code>, but you will be unable to pass <code class=\"hljs\">-Zbaz</code>. You can\npass an empty string (<code class=\"hljs\">-Zallow-features=</code>) to disallow all unstable\nfeatures.</p>\n<p><code class=\"hljs\">-Zallow-features</code> also restricts which unstable features can be passed\nto the <code class=\"hljs\">cargo-features</code> entry in <code class=\"hljs\">Cargo.toml</code>. If, for example, you want\nto allow</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"test-dummy-unstable\"</span>]\n</code></pre>\n<p>where <code class=\"hljs\">test-dummy-unstable</code> is unstable, that features would also be\ndisallowed by <code class=\"hljs\">-Zallow-features=</code>, and allowed with\n<code class=\"hljs\">-Zallow-features=test-dummy-unstable</code>.</p>\n<p>The list of features passed to cargo’s <code class=\"hljs\">-Zallow-features</code> is also passed\nto any Rust tools that cargo ends up calling (like <code class=\"hljs\">rustc</code> or\n<code class=\"hljs\">rustdoc</code>). Thus, if you run <code class=\"hljs\">cargo -Zallow-features=</code>, no unstable\nCargo <em>or</em> Rust features can be used.</p>\n<h2 id=\"no-index-update\"><a class=\"header\" href=\"#no-index-update\">no-index-update</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/3479\">#3479</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7404\">#7404</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z no-index-update</code> flag ensures that Cargo does not attempt to update\nthe registry index. This is intended for tools such as Crater that issue many\nCargo commands, and you want to avoid the network latency for updating the\nindex each time.</p>\n<h2 id=\"mtime-on-use\"><a class=\"header\" href=\"#mtime-on-use\">mtime-on-use</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/pull/6477\">#6477</a></li>\n<li>Cache usage meta tracking issue: <a href=\"https://github.com/rust-lang/cargo/issues/7150\">#7150</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z mtime-on-use</code> flag is an experiment to have Cargo update the mtime of\nused files to make it easier for tools like cargo-sweep to detect which files\nare stale. For many workflows this needs to be set on <em>all</em> invocations of cargo.\nTo make this more practical setting the <code class=\"hljs\">unstable.mtime_on_use</code> flag in <code class=\"hljs\">.cargo/config.toml</code>\nor the corresponding ENV variable will apply the <code class=\"hljs\">-Z mtime-on-use</code> to all\ninvocations of nightly cargo. (the config flag is ignored by stable)</p>\n<h2 id=\"avoid-dev-deps\"><a class=\"header\" href=\"#avoid-dev-deps\">avoid-dev-deps</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4988\">#4988</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5133\">#5133</a></li>\n</ul>\n<p>When running commands such as <code class=\"hljs\">cargo install</code> or <code class=\"hljs\">cargo build</code>, Cargo\ncurrently requires dev-dependencies to be downloaded, even if they are not\nused. The <code class=\"hljs\">-Z avoid-dev-deps</code> flag allows Cargo to avoid downloading\ndev-dependencies if they are not needed. The <code class=\"hljs\">Cargo.lock</code> file will not be\ngenerated if dev-dependencies are skipped.</p>\n<h2 id=\"minimal-versions\"><a class=\"header\" href=\"#minimal-versions\">minimal-versions</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4100\">#4100</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5657\">#5657</a></li>\n</ul>\n<blockquote>\n<p>Note: It is not recommended to use this feature. Because it enforces minimal\nversions for all transitive dependencies, its usefulness is limited since\nnot all external dependencies declare proper lower version bounds. It is\nintended that it will be changed in the future to only enforce minimal\nversions for direct dependencies.</p>\n</blockquote>\n<p>When a <code class=\"hljs\">Cargo.lock</code> file is generated, the <code class=\"hljs\">-Z minimal-versions</code> flag will\nresolve the dependencies to the minimum SemVer version that will satisfy the\nrequirements (instead of the greatest version).</p>\n<p>The intended use-case of this flag is to check, during continuous integration,\nthat the versions specified in Cargo.toml are a correct reflection of the\nminimum versions that you are actually using. That is, if Cargo.toml says\n<code class=\"hljs\">foo = \"1.0.0\"</code> that you don’t accidentally depend on features added only in\n<code class=\"hljs\">foo 1.5.0</code>.</p>\n<h2 id=\"direct-minimal-versions\"><a class=\"header\" href=\"#direct-minimal-versions\">direct-minimal-versions</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4100\">#4100</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5657\">#5657</a></li>\n</ul>\n<p>When a <code class=\"hljs\">Cargo.lock</code> file is generated, the <code class=\"hljs\">-Z direct-minimal-versions</code> flag will\nresolve the dependencies to the minimum SemVer version that will satisfy the\nrequirements (instead of the greatest version) for direct dependencies only.</p>\n<p>The intended use-case of this flag is to check, during continuous integration,\nthat the versions specified in Cargo.toml are a correct reflection of the\nminimum versions that you are actually using. That is, if Cargo.toml says\n<code class=\"hljs\">foo = \"1.0.0\"</code> that you don’t accidentally depend on features added only in\n<code class=\"hljs\">foo 1.5.0</code>.</p>\n<p>Indirect dependencies are resolved as normal so as not to be blocked on their\nminimal version validation.</p>\n<h2 id=\"out-dir\"><a class=\"header\" href=\"#out-dir\">out-dir</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/4875\">#4875</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/6790\">#6790</a></li>\n</ul>\n<p>This feature allows you to specify the directory where artifacts will be\ncopied to after they are built. Typically artifacts are only written to the\n<code class=\"hljs\">target/release</code> or <code class=\"hljs\">target/debug</code> directories. However, determining the\nexact filename can be tricky since you need to parse JSON output. The\n<code class=\"hljs\">--out-dir</code> flag makes it easier to predictably access the artifacts. Note\nthat the artifacts are copied, so the originals are still in the <code class=\"hljs\">target</code>\ndirectory. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly build --out-dir=out -Z unstable-options\n</code></pre>\n<p>This can also be specified in <code class=\"hljs\">.cargo/config.toml</code> files.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">out-dir</span> = <span class=\"hljs-string\">\"out\"</span>\n</code></pre>\n<h2 id=\"doctest-xcompile\"><a class=\"header\" href=\"#doctest-xcompile\">doctest-xcompile</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7040\">#7040</a></li>\n<li>Tracking Rustc Issue: <a href=\"https://github.com/rust-lang/rust/issues/64245\">#64245</a></li>\n</ul>\n<p>This flag changes <code class=\"hljs\">cargo test</code>’s behavior when handling doctests when\na target is passed. Currently, if a target is passed that is different\nfrom the host cargo will simply skip testing doctests. If this flag is\npresent, cargo will continue as normal, passing the tests to doctest,\nwhile also passing it a <code class=\"hljs\">--target</code> option, as well as enabling\n<code class=\"hljs\">-Zunstable-features --enable-per-target-ignores</code> and passing along\ninformation from <code class=\"hljs\">.cargo/config.toml</code>. See the rustc issue for more information.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo <span class=\"hljs-built_in\">test</span> --target foo -Zdoctest-xcompile\n</code></pre>\n<h2 id=\"build-plan\"><a class=\"header\" href=\"#build-plan\">Build-plan</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/5579\">#5579</a></li>\n</ul>\n<p>The <code class=\"hljs\">--build-plan</code> argument for the <code class=\"hljs\">build</code> command will output JSON with\ninformation about which commands would be run without actually executing\nanything. This can be useful when integrating with another build tool.\nExample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly build --build-plan -Z unstable-options\n</code></pre>\n<h2 id=\"metabuild\"><a class=\"header\" href=\"#metabuild\">Metabuild</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/49803\">rust-lang/rust#49803</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2196-metabuild.md\">#2196</a></li>\n</ul>\n<p>Metabuild is a feature to have declarative build scripts. Instead of writing\na <code class=\"hljs\">build.rs</code> script, you specify a list of build dependencies in the\n<code class=\"hljs\">metabuild</code> key in <code class=\"hljs\">Cargo.toml</code>. A build script is automatically generated\nthat runs each build dependency in order. Metabuild packages can then read\nmetadata from <code class=\"hljs\">Cargo.toml</code> to specify their behavior.</p>\n<p>Include <code class=\"hljs\">cargo-features</code> at the top of <code class=\"hljs\">Cargo.toml</code>, a <code class=\"hljs\">metabuild</code> key in the\n<code class=\"hljs\">package</code>, list the dependencies in <code class=\"hljs\">build-dependencies</code>, and add any metadata\nthat the metabuild packages require under <code class=\"hljs\">package.metadata</code>. Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"metabuild\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"mypackage\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n<span class=\"hljs-attr\">metabuild</span> = [<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>]\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">foo</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">bar</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[package.metadata.foo]</span>\n<span class=\"hljs-attr\">extra-info</span> = <span class=\"hljs-string\">\"qwerty\"</span>\n</code></pre>\n<p>Metabuild packages should have a public function called <code class=\"hljs\">metabuild</code> that\nperforms the same actions as a regular <code class=\"hljs\">build.rs</code> script would perform.</p>\n<h2 id=\"public-dependency\"><a class=\"header\" href=\"#public-dependency\">public-dependency</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/44663\">#44663</a></li>\n</ul>\n<p>The ‘public-dependency’ feature allows marking dependencies as ‘public’\nor ‘private’. When this feature is enabled, additional information is passed to rustc to allow\nthe <a href=\"../../rustc/lints/listing/warn-by-default.html#exported-private-dependencies\">exported_private_dependencies</a> lint to function properly.</p>\n<p>To enable this feature, you can either use <code class=\"hljs\">-Zpublic-dependency</code></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo +nightly run -Zpublic-dependency\n</code></pre>\n<p>or <code class=\"hljs\">[unstable]</code> table, for example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">public-dependency</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p><code class=\"hljs\">public-dependency</code> could also be enabled in <code class=\"hljs\">cargo-features</code>, <strong>though this is deprecated and will be removed soon</strong>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"public-dependency\"</span>]\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my_dep</span> = { version = <span class=\"hljs-string\">\"1.2.3\"</span>, public = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">private_dep</span> = <span class=\"hljs-string\">\"2.0.0\"</span> <span class=\"hljs-comment\"># Will be 'private' by default</span>\n</code></pre>\n<p>Documentation updates:</p>\n<ul>\n<li>For workspace’s “The <code class=\"hljs\">dependencies</code> table” section, include <code class=\"hljs\">public</code> as an unsupported field for <code class=\"hljs\">workspace.dependencies</code></li>\n</ul>\n<h2 id=\"msrv-policy\"><a class=\"header\" href=\"#msrv-policy\">msrv-policy</a></h2>\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/issues/9930\">#9930</a> (MSRV-aware resolver)</li>\n</ul>\n<p>Catch-all unstable feature for MSRV-aware cargo features under\n<a href=\"https://github.com/rust-lang/rfcs/pull/2495\">RFC 2495</a>.</p>\n<h3 id=\"msrv-aware-cargo-add\"><a class=\"header\" href=\"#msrv-aware-cargo-add\">MSRV-aware cargo add</a></h3>\n<p>This was stabilized in 1.79 in <a href=\"https://github.com/rust-lang/cargo/pull/13608\">#13608</a>.</p>\n<h3 id=\"msrv-aware-resolver\"><a class=\"header\" href=\"#msrv-aware-resolver\">MSRV-aware resolver</a></h3>\n<p><code class=\"hljs\">-Zmsrv-policy</code> allows access to an MSRV-aware resolver which can be enabled with:</p>\n<ul>\n<li><code class=\"hljs\">resolver.something-like-precedence</code> config field</li>\n<li><code class=\"hljs\">workspace.resolver = \"3\"</code> / <code class=\"hljs\">package.resolver = \"3\"</code></li>\n<li><code class=\"hljs\">package.edition = \"2024\"</code> (only in workspace root)</li>\n</ul>\n<p>The resolver will prefer dependencies with a <code class=\"hljs\">package.rust-version</code> that is the same or older than your project’s MSRV.\nYour project’s MSRV is determined by taking the lowest <code class=\"hljs\">package.rust-version</code> set among your workspace members.\nIf there is none set, your toolchain version will be used with the intent to pick up the version from rustup’s <code class=\"hljs\">rust-toolchain.toml</code>, if present.</p>\n<h4 id=\"resolversomething-like-precedence\"><a class=\"header\" href=\"#resolversomething-like-precedence\"><code>resolver.something-like-precedence</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “something-like-maximum”</li>\n<li>Environment: <code class=\"hljs\">CARGO_RESOLVER_SOMETHING_LIKE_PRECEDENCE</code></li>\n</ul>\n<p>Select which policy should be used when resolving dependencies.  Values include</p>\n<ul>\n<li><code class=\"hljs\">something-like-maximum</code>: prefer highest compatible versions of a package</li>\n<li><code class=\"hljs\">something-like-rust-version</code>: prefer versions of packages compatible with your project’s Rust version</li>\n</ul>\n<p>Can be overridden with</p>\n<ul>\n<li><code class=\"hljs\">--ignore-rust-version</code> CLI option</li>\n<li>Setting the dependency’s version requirement too high</li>\n<li>Specifying the version to <code class=\"hljs\">cargo update</code> with <code class=\"hljs\">--precise</code></li>\n</ul>\n<h2 id=\"precise-pre-release\"><a class=\"header\" href=\"#precise-pre-release\">precise-pre-release</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13290\">#13290</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3493\">#3493</a></li>\n</ul>\n<p>The <code class=\"hljs\">precise-pre-release</code> feature allows pre-release versions to be selected with <code class=\"hljs\">update --precise</code>\neven when a pre-release is not specified by a projects <code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Take for example this <code class=\"hljs\">Cargo.toml</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-dependency</span> = <span class=\"hljs-string\">\"0.1.1\"</span>\n</code></pre>\n<p>It’s possible to update <code class=\"hljs\">my-dependency</code> to a pre-release with <code class=\"hljs\">update -Zunstable-options my-dependency --precise 0.1.2-pre.0</code>.\nThis is because <code class=\"hljs\">0.1.2-pre.0</code> is considered compatible with <code class=\"hljs\">0.1.1</code>.\nIt would not be possible to upgrade to <code class=\"hljs\">0.2.0-pre.0</code> from <code class=\"hljs\">0.1.1</code> in the same way.</p>\n<h2 id=\"build-std\"><a class=\"header\" href=\"#build-std\">build-std</a></h2>\n<ul>\n<li>Tracking Repository: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">https://github.com/rust-lang/wg-cargo-std-aware</a></li>\n</ul>\n<p>The <code class=\"hljs\">build-std</code> feature enables Cargo to compile the standard library itself as\npart of a crate graph compilation. This feature has also historically been known\nas “std-aware Cargo”. This feature is still in very early stages of development,\nand is also a possible massive feature addition to Cargo. This is a very large\nfeature to document, even in the minimal form that it exists in today, so if\nyou’re curious to stay up to date you’ll want to follow the <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">tracking\nrepository</a> and its set of\nissues.</p>\n<p>The functionality implemented today is behind a flag called <code class=\"hljs\">-Z build-std</code>. This\nflag indicates that Cargo should compile the standard library from source code\nusing the same profile as the main build itself. Note that for this to work you\nneed to have the source code for the standard library available, and at this\ntime the only supported method of doing so is to add the <code class=\"hljs\">rust-src</code> rust rustup\ncomponent:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup component add rust-src --toolchain nightly</span>\n</code></pre>\n<p>It is also required today that the <code class=\"hljs\">-Z build-std</code> flag is combined with the\n<code class=\"hljs\">--target</code> flag. Note that you’re not forced to do a cross compilation, you’re\njust forced to pass <code class=\"hljs\">--target</code> in one form or another.</p>\n<p>Usage looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new foo</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> foo</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly run -Z build-std --target x86_64-unknown-linux-gnu</span>\n   Compiling core v0.0.0 (...)\n   ...\n   Compiling foo v0.1.0 (...)\n    Finished dev [unoptimized + debuginfo] target(s) in 21.00s\n     Running `target/x86_64-unknown-linux-gnu/debug/foo`\nHello, world!\n</code></pre>\n<p>Here we recompiled the standard library in debug mode with debug assertions\n(like <code class=\"hljs\">src/main.rs</code> is compiled) and everything was linked together at the end.</p>\n<p>Using <code class=\"hljs\">-Z build-std</code> will implicitly compile the stable crates <code class=\"hljs\">core</code>, <code class=\"hljs\">std</code>,\n<code class=\"hljs\">alloc</code>, and <code class=\"hljs\">proc_macro</code>. If you’re using <code class=\"hljs\">cargo test</code> it will also compile the\n<code class=\"hljs\">test</code> crate. If you’re working with an environment which does not support some\nof these crates, then you can pass an argument to <code class=\"hljs\">-Zbuild-std</code> as well:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly build -Z build-std=core,alloc</span>\n</code></pre>\n<p>The value here is a comma-separated list of standard library crates to build.</p>\n<h3 id=\"requirements\"><a class=\"header\" href=\"#requirements\">Requirements</a></h3>\n<p>As a summary, a list of requirements today to use <code class=\"hljs\">-Z build-std</code> are:</p>\n<ul>\n<li>You must install libstd’s source code through <code class=\"hljs\">rustup component add rust-src</code></li>\n<li>You must pass <code class=\"hljs\">--target</code></li>\n<li>You must use both a nightly Cargo and a nightly rustc</li>\n<li>The <code class=\"hljs\">-Z build-std</code> flag must be passed to all <code class=\"hljs\">cargo</code> invocations.</li>\n</ul>\n<h3 id=\"reporting-bugs-and-helping-out\"><a class=\"header\" href=\"#reporting-bugs-and-helping-out\">Reporting bugs and helping out</a></h3>\n<p>The <code class=\"hljs\">-Z build-std</code> feature is in the very early stages of development! This\nfeature for Cargo has an extremely long history and is very large in scope, and\nthis is just the beginning. If you’d like to report bugs please either report\nthem to:</p>\n<ul>\n<li>Cargo — <a href=\"https://github.com/rust-lang/cargo/issues/new\">https://github.com/rust-lang/cargo/issues/new</a> — for implementation bugs</li>\n<li>The tracking repository —\n<a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/new\">https://github.com/rust-lang/wg-cargo-std-aware/issues/new</a> — for larger design\nquestions.</li>\n</ul>\n<p>Also if you’d like to see a feature that’s not yet implemented and/or if\nsomething doesn’t quite work the way you’d like it to, feel free to check out\nthe <a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues\">issue tracker</a> of\nthe tracking repository, and if it’s not there please file a new issue!</p>\n<h2 id=\"build-std-features\"><a class=\"header\" href=\"#build-std-features\">build-std-features</a></h2>\n<ul>\n<li>Tracking Repository: <a href=\"https://github.com/rust-lang/wg-cargo-std-aware\">https://github.com/rust-lang/wg-cargo-std-aware</a></li>\n</ul>\n<p>This flag is a sibling to the <code class=\"hljs\">-Zbuild-std</code> feature flag. This will configure\nthe features enabled for the standard library itself when building the standard\nlibrary. The default enabled features, at this time, are <code class=\"hljs\">backtrace</code> and\n<code class=\"hljs\">panic-unwind</code>. This flag expects a comma-separated list and, if provided, will\noverride the default list of features enabled.</p>\n<h2 id=\"binary-dep-depinfo\"><a class=\"header\" href=\"#binary-dep-depinfo\">binary-dep-depinfo</a></h2>\n<ul>\n<li>Tracking rustc issue: <a href=\"https://github.com/rust-lang/rust/issues/63012\">#63012</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z binary-dep-depinfo</code> flag causes Cargo to forward the same flag to\n<code class=\"hljs\">rustc</code> which will then cause <code class=\"hljs\">rustc</code> to include the paths of all binary\ndependencies in the “dep info” file (with the <code class=\"hljs\">.d</code> extension). Cargo then uses\nthat information for change-detection (if any binary dependency changes, then\nthe crate will be rebuilt). The primary use case is for building the compiler\nitself, which has implicit dependencies on the standard library that would\notherwise be untracked for change-detection.</p>\n<h2 id=\"panic-abort-tests\"><a class=\"header\" href=\"#panic-abort-tests\">panic-abort-tests</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/rust/issues/67650\">#67650</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/7460\">#7460</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z panic-abort-tests</code> flag will enable nightly support to compile test\nharness crates with <code class=\"hljs\">-Cpanic=abort</code>. Without this flag Cargo will compile tests,\nand everything they depend on, with <code class=\"hljs\">-Cpanic=unwind</code> because it’s the only way\n<code class=\"hljs\">test</code>-the-crate knows how to operate. As of <a href=\"https://github.com/rust-lang/rust/pull/64158\">rust-lang/rust#64158</a>, however,\nthe <code class=\"hljs\">test</code> crate supports <code class=\"hljs\">-C panic=abort</code> with a test-per-process, and can help\navoid compiling crate graphs multiple times.</p>\n<p>It’s currently unclear how this feature will be stabilized in Cargo, but we’d\nlike to stabilize it somehow!</p>\n<h2 id=\"config-include\"><a class=\"header\" href=\"#config-include\">config-include</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7723\">#7723</a></li>\n</ul>\n<p>This feature requires the <code class=\"hljs\">-Zconfig-include</code> command-line option.</p>\n<p>The <code class=\"hljs\">include</code> key in a config file can be used to load another config file. It\ntakes a string for a path to another file relative to the config file, or an\narray of config file paths. Only path ending with <code class=\"hljs\">.toml</code> is accepted.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># a path ending with `.toml`</span>\n<span class=\"hljs-attr\">include</span> = <span class=\"hljs-string\">\"path/to/mordor.toml\"</span>\n\n<span class=\"hljs-comment\"># or an array of paths</span>\n<span class=\"hljs-attr\">include</span> = [<span class=\"hljs-string\">\"frodo.toml\"</span>, <span class=\"hljs-string\">\"samwise.toml\"</span>]\n</code></pre>\n<p>Unlike other config values, the merge behavior of the <code class=\"hljs\">include</code> key is\ndifferent. When a config file contains an <code class=\"hljs\">include</code> key:</p>\n<ol>\n<li>The config values are first loaded from the <code class=\"hljs\">include</code> path.\n<ul>\n<li>If the value of the <code class=\"hljs\">include</code> key is an array of paths, the config values\nare loaded and merged from left to right for each path.</li>\n<li>Recurse this step if the config values from the <code class=\"hljs\">include</code> path also\ncontain an <code class=\"hljs\">include</code> key.</li>\n</ul>\n</li>\n<li>Then, the config file’s own values are merged on top of the config\nfrom the <code class=\"hljs\">include</code> path.</li>\n</ol>\n<h2 id=\"target-applies-to-host\"><a class=\"header\" href=\"#target-applies-to-host\">target-applies-to-host</a></h2>\n<ul>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9322\">#9322</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9453\">#9453</a></li>\n</ul>\n<p>Historically, Cargo’s behavior for whether the <code class=\"hljs\">linker</code> and <code class=\"hljs\">rustflags</code>\nconfiguration options from environment variables and\n<a href=\"config.html#target\"><code class=\"hljs\">[target]</code></a> are respected for build scripts, plugins,\nand other artifacts that are <em>always</em> built for the host platform has\nbeen somewhat inconsistent.\nWhen <code class=\"hljs\">--target</code> is <em>not</em> passed, Cargo respects the same <code class=\"hljs\">linker</code> and\n<code class=\"hljs\">rustflags</code> for build scripts as for all other compile artifacts. When\n<code class=\"hljs\">--target</code> <em>is</em> passed, however, Cargo respects <code class=\"hljs\">linker</code> from\n<a href=\"config.html#targettriplelinker\"><code class=\"hljs\">[target.&lt;host triple&gt;]</code></a>, and does not\npick up any <code class=\"hljs\">rustflags</code> configuration.\nThis dual behavior is confusing, but also makes it difficult to correctly\nconfigure builds where the host triple and the <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target triple</a> happen to\nbe the same, but artifacts intended to run on the build host should still\nbe configured differently.</p>\n<p><code class=\"hljs\">-Ztarget-applies-to-host</code> enables the top-level\n<code class=\"hljs\">target-applies-to-host</code> setting in Cargo configuration files which\nallows users to opt into different (and more consistent) behavior for\nthese properties. When <code class=\"hljs\">target-applies-to-host</code> is unset, or set to\n<code class=\"hljs\">true</code>, in the configuration file, the existing Cargo behavior is\npreserved (though see <code class=\"hljs\">-Zhost-config</code>, which changes that default). When\nit is set to <code class=\"hljs\">false</code>, no options from <code class=\"hljs\">[target.&lt;host triple&gt;]</code>,\n<code class=\"hljs\">RUSTFLAGS</code>, or <code class=\"hljs\">[build]</code> are respected for host artifacts regardless of\nwhether <code class=\"hljs\">--target</code> is passed to Cargo. To customize artifacts intended\nto be run on the host, use <code class=\"hljs\">[host]</code> (<a href=\"#host-config\"><code class=\"hljs\">host-config</code></a>).</p>\n<p>In the future, <code class=\"hljs\">target-applies-to-host</code> may end up defaulting to <code class=\"hljs\">false</code>\nto provide more sane and consistent default behavior.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-attr\">target-applies-to-host</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Ztarget-applies-to-host build --target x86_64-unknown-linux-gnu\n</code></pre>\n<h2 id=\"host-config\"><a class=\"header\" href=\"#host-config\">host-config</a></h2>\n<ul>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9322\">#9322</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9452\">#9452</a></li>\n</ul>\n<p>The <code class=\"hljs\">host</code> key in a config file can be used pass flags to host build targets\nsuch as build scripts that must run on the host system instead of the target\nsystem when cross compiling. It supports both generic and host arch specific\ntables. Matching host arch tables take precedence over generic host tables.</p>\n<p>It requires the <code class=\"hljs\">-Zhost-config</code> and <code class=\"hljs\">-Ztarget-applies-to-host</code>\ncommand-line options to be set, and that <code class=\"hljs\">target-applies-to-host = false</code> is set in the Cargo configuration file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-section\">[host]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/host/linker\"</span>\n<span class=\"hljs-section\">[host.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/host/arch/linker\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"-Clink-arg=--verbose\"</span>]\n<span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"/path/to/target/linker\"</span>\n</code></pre>\n<p>The generic <code class=\"hljs\">host</code> table above will be entirely ignored when building on a\n<code class=\"hljs\">x86_64-unknown-linux-gnu</code> host as the <code class=\"hljs\">host.x86_64-unknown-linux-gnu</code> table\ntakes precedence.</p>\n<p>Setting <code class=\"hljs\">-Zhost-config</code> changes the default for <code class=\"hljs\">target-applies-to-host</code> to\n<code class=\"hljs\">false</code> from <code class=\"hljs\">true</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Ztarget-applies-to-host -Zhost-config build --target x86_64-unknown-linux-gnu\n</code></pre>\n<h2 id=\"unit-graph\"><a class=\"header\" href=\"#unit-graph\">unit-graph</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/8002\">#8002</a></li>\n</ul>\n<p>The <code class=\"hljs\">--unit-graph</code> flag can be passed to any build command (<code class=\"hljs\">build</code>, <code class=\"hljs\">check</code>,\n<code class=\"hljs\">run</code>, <code class=\"hljs\">test</code>, <code class=\"hljs\">bench</code>, <code class=\"hljs\">doc</code>, etc.) to emit a JSON object to stdout which\nrepresents Cargo’s internal unit graph. Nothing is actually built, and the\ncommand returns immediately after printing. Each “unit” corresponds to an\nexecution of the compiler. These objects also include which unit each unit\ndepends on.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo +nightly build --unit-graph -Z unstable-options\n</code></pre>\n<p>This structure provides a more complete view of the dependency relationship as\nCargo sees it. In particular, the “features” field supports the new feature\nresolver where a dependency can be built multiple times with different\nfeatures. <code class=\"hljs\">cargo metadata</code> fundamentally cannot represent the relationship of\nfeatures between different dependency kinds, and features now depend on which\ncommand is run and which packages and targets are selected. Additionally it\ncan provide details about intra-package dependencies like build scripts or\ntests.</p>\n<p>The following is a description of the JSON structure:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-javascript hljs\">{\n  <span class=\"hljs-comment\">/* Version of the JSON output structure. If any backwards incompatible\n     changes are made, this value will be increased.\n  */</span>\n  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-comment\">/* Array of all build units. */</span>\n  <span class=\"hljs-string\">\"units\"</span>: [\n    {\n      <span class=\"hljs-comment\">/* An opaque string which indicates the package.\n         Information about the package can be obtained from `cargo metadata`.\n      */</span>\n      <span class=\"hljs-string\">\"pkg_id\"</span>: <span class=\"hljs-string\">\"my-package 0.1.0 (path+file:///path/to/my-package)\"</span>,\n      <span class=\"hljs-comment\">/* The Cargo target. See the `cargo metadata` documentation for more\n         information about these fields.\n         https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\n      */</span>\n      <span class=\"hljs-string\">\"target\"</span>: {\n        <span class=\"hljs-string\">\"kind\"</span>: [<span class=\"hljs-string\">\"lib\"</span>],\n        <span class=\"hljs-string\">\"crate_types\"</span>: [<span class=\"hljs-string\">\"lib\"</span>],\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"my_package\"</span>,\n        <span class=\"hljs-string\">\"src_path\"</span>: <span class=\"hljs-string\">\"/path/to/my-package/src/lib.rs\"</span>,\n        <span class=\"hljs-string\">\"edition\"</span>: <span class=\"hljs-string\">\"2018\"</span>,\n        <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-string\">\"doctest\"</span>: <span class=\"hljs-literal\">true</span>\n      },\n      <span class=\"hljs-comment\">/* The profile settings for this unit.\n         These values may not match the profile defined in the manifest.\n         Units can use modified profile settings. For example, the \"panic\"\n         setting can be overridden for tests to force it to \"unwind\".\n      */</span>\n      <span class=\"hljs-string\">\"profile\"</span>: {\n        <span class=\"hljs-comment\">/* The profile name these settings are derived from. */</span>\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"dev\"</span>,\n        <span class=\"hljs-comment\">/* The optimization level as a string. */</span>\n        <span class=\"hljs-string\">\"opt_level\"</span>: <span class=\"hljs-string\">\"0\"</span>,\n        <span class=\"hljs-comment\">/* The LTO setting as a string. */</span>\n        <span class=\"hljs-string\">\"lto\"</span>: <span class=\"hljs-string\">\"false\"</span>,\n        <span class=\"hljs-comment\">/* The codegen units as an integer.\n           `null` if it should use the compiler's default.\n        */</span>\n        <span class=\"hljs-string\">\"codegen_units\"</span>: <span class=\"hljs-literal\">null</span>,\n        <span class=\"hljs-comment\">/* The debug information level as an integer.\n           `null` if it should use the compiler's default (0).\n        */</span>\n        <span class=\"hljs-string\">\"debuginfo\"</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-comment\">/* Whether or not debug-assertions are enabled. */</span>\n        <span class=\"hljs-string\">\"debug_assertions\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not overflow-checks are enabled. */</span>\n        <span class=\"hljs-string\">\"overflow_checks\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* Whether or not rpath is enabled. */</span>\n        <span class=\"hljs-string\">\"rpath\"</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-comment\">/* Whether or not incremental is enabled. */</span>\n        <span class=\"hljs-string\">\"incremental\"</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">/* The panic strategy, \"unwind\" or \"abort\". */</span>\n        <span class=\"hljs-string\">\"panic\"</span>: <span class=\"hljs-string\">\"unwind\"</span>\n      },\n      <span class=\"hljs-comment\">/* Which platform this target is being built for.\n         A value of `null` indicates it is for the host.\n         Otherwise it is a string of the target triple (such as\n         \"x86_64-unknown-linux-gnu\").\n      */</span>\n      <span class=\"hljs-string\">\"platform\"</span>: <span class=\"hljs-literal\">null</span>,\n      <span class=\"hljs-comment\">/* The \"mode\" for this unit. Valid values:\n\n         * \"test\" --- Build using `rustc` as a test.\n         * \"build\" --- Build using `rustc`.\n         * \"check\" --- Build using `rustc` in \"check\" mode.\n         * \"doc\" --- Build using `rustdoc`.\n         * \"doctest\" --- Test using `rustdoc`.\n         * \"run-custom-build\" --- Represents the execution of a build script.\n      */</span>\n      <span class=\"hljs-string\">\"mode\"</span>: <span class=\"hljs-string\">\"build\"</span>,\n      <span class=\"hljs-comment\">/* Array of features enabled on this unit as strings. */</span>\n      <span class=\"hljs-string\">\"features\"</span>: [<span class=\"hljs-string\">\"somefeat\"</span>],\n      <span class=\"hljs-comment\">/* Whether or not this is a standard-library unit,\n         part of the unstable build-std feature.\n         If not set, treat as `false`.\n      */</span>\n      <span class=\"hljs-string\">\"is_std\"</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-comment\">/* Array of dependencies of this unit. */</span>\n      <span class=\"hljs-string\">\"dependencies\"</span>: [\n        {\n          <span class=\"hljs-comment\">/* Index in the \"units\" array for the dependency. */</span>\n          <span class=\"hljs-string\">\"index\"</span>: <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-comment\">/* The name that this dependency will be referred as. */</span>\n          <span class=\"hljs-string\">\"extern_crate_name\"</span>: <span class=\"hljs-string\">\"unicode_xid\"</span>,\n          <span class=\"hljs-comment\">/* Whether or not this dependency is \"public\",\n             part of the unstable public-dependency feature.\n             If not set, the public-dependency feature is not enabled.\n          */</span>\n          <span class=\"hljs-string\">\"public\"</span>: <span class=\"hljs-literal\">false</span>,\n          <span class=\"hljs-comment\">/* Whether or not this dependency is injected into the prelude,\n             currently used by the build-std feature.\n             If not set, treat as `false`.\n          */</span>\n          <span class=\"hljs-string\">\"noprelude\"</span>: <span class=\"hljs-literal\">false</span>\n        }\n      ]\n    },\n    <span class=\"hljs-comment\">// ...</span>\n  ],\n  <span class=\"hljs-comment\">/* Array of indices in the \"units\" array that are the \"roots\" of the\n     dependency graph.\n  */</span>\n  <span class=\"hljs-string\">\"roots\"</span>: [<span class=\"hljs-number\">0</span>],\n}\n</code></pre>\n<h2 id=\"profile-rustflags-option\"><a class=\"header\" href=\"#profile-rustflags-option\">Profile <code>rustflags</code> option</a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/7878\">rust-lang/cargo#7878</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/10271\">rust-lang/cargo#10271</a></li>\n</ul>\n<p>This feature provides a new option in the <code class=\"hljs\">[profile]</code> section to specify flags\nthat are passed directly to rustc.\nThis can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"profile-rustflags\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">rustflags</span> = [ <span class=\"hljs-string\">\"-C\"</span>, <span class=\"hljs-string\">\"...\"</span> ]\n</code></pre>\n<p>To set this in a profile in Cargo configuration, you need to use either\n<code class=\"hljs\">-Z profile-rustflags</code> or <code class=\"hljs\">[unstable]</code> table to enable it. For example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">profile-rustflags</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">rustflags</span> = [ <span class=\"hljs-string\">\"-C\"</span>, <span class=\"hljs-string\">\"...\"</span> ]\n</code></pre>\n<h2 id=\"rustdoc-map\"><a class=\"header\" href=\"#rustdoc-map\">rustdoc-map</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/8296\">#8296</a></li>\n</ul>\n<p>This feature adds configuration settings that are passed to <code class=\"hljs\">rustdoc</code> so that\nit can generate links to dependencies whose documentation is hosted elsewhere\nwhen the dependency is not documented. First, add this to <code class=\"hljs\">.cargo/config</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[doc.extern-map.registries]</span>\n<span class=\"hljs-attr\">crates-io</span> = <span class=\"hljs-string\">\"https://docs.rs/\"</span>\n</code></pre>\n<p>Then, when building documentation, use the following flags to cause links\nto dependencies to link to <a href=\"https://docs.rs/\">docs.rs</a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo +nightly doc --no-deps -Zrustdoc-map\n</code></pre>\n<p>The <code class=\"hljs\">registries</code> table contains a mapping of registry name to the URL to link\nto. The URL may have the markers <code class=\"hljs\">{pkg_name}</code> and <code class=\"hljs\">{version}</code> which will get\nreplaced with the corresponding values. If neither are specified, then Cargo\ndefaults to appending <code class=\"hljs\">{pkg_name}/{version}/</code> to the end of the URL.</p>\n<p>Another config setting is available to redirect standard library links. By\ndefault, rustdoc creates links to <a href=\"https://doc.rust-lang.org/nightly/\">https://doc.rust-lang.org/nightly/</a>. To\nchange this behavior, use the <code class=\"hljs\">doc.extern-map.std</code> setting:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[doc.extern-map]</span>\n<span class=\"hljs-attr\">std</span> = <span class=\"hljs-string\">\"local\"</span>\n</code></pre>\n<p>A value of <code class=\"hljs\">\"local\"</code> means to link to the documentation found in the <code class=\"hljs\">rustc</code>\nsysroot. If you are using rustup, this documentation can be installed with\n<code class=\"hljs\">rustup component add rust-docs</code>.</p>\n<p>The default value is <code class=\"hljs\">\"remote\"</code>.</p>\n<p>The value may also take a URL for a custom location.</p>\n<h2 id=\"per-package-target\"><a class=\"header\" href=\"#per-package-target\">per-package-target</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/pull/9406\">#9406</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9030\">#9030</a></li>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/pull/7004\">#7004</a></li>\n</ul>\n<p>The <code class=\"hljs\">per-package-target</code> feature adds two keys to the manifest:\n<code class=\"hljs\">package.default-target</code> and <code class=\"hljs\">package.forced-target</code>. The first makes\nthe package be compiled by default (ie. when no <code class=\"hljs\">--target</code> argument is\npassed) for some target. The second one makes the package always be\ncompiled for the target.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">forced-target</span> = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span>\n</code></pre>\n<p>In this example, the crate is always built for\n<code class=\"hljs\">wasm32-unknown-unknown</code>, for instance because it is going to be used\nas a plugin for a main program that runs on the host (or provided on\nthe command line) target.</p>\n<h2 id=\"artifact-dependencies\"><a class=\"header\" href=\"#artifact-dependencies\">artifact-dependencies</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/pull/9096\">#9096</a></li>\n<li>Original Pull Request: <a href=\"https://github.com/rust-lang/cargo/pull/9992\">#9992</a></li>\n</ul>\n<p>Artifact dependencies allow Cargo packages to depend on <code class=\"hljs\">bin</code>, <code class=\"hljs\">cdylib</code>, and <code class=\"hljs\">staticlib</code> crates,\nand use the artifacts built by those crates at compile time.</p>\n<p>Run <code class=\"hljs\">cargo</code> with <code class=\"hljs\">-Z bindeps</code> to enable this functionality.</p>\n<h3 id=\"artifact-dependencies-dependency-declarations\"><a class=\"header\" href=\"#artifact-dependencies-dependency-declarations\">artifact-dependencies: Dependency declarations</a></h3>\n<p>Artifact-dependencies adds the following keys to a dependency declaration in <code class=\"hljs\">Cargo.toml</code>:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">artifact</code> — This specifies the <a href=\"cargo-targets.html\">Cargo Target</a> to build.\nNormally without this field, Cargo will only build the <code class=\"hljs\">[lib]</code> target from a dependency.\nThis field allows specifying which target will be built, and made available as a binary at build time:</p>\n<ul>\n<li><code class=\"hljs\">\"bin\"</code> — Compiled executable binaries, corresponding to all of the <code class=\"hljs\">[[bin]]</code> sections in the dependency’s manifest.</li>\n<li><code class=\"hljs\">\"bin:&lt;bin-name&gt;\"</code> — Compiled executable binary, corresponding to a specific binary target specified by the given <code class=\"hljs\">&lt;bin-name&gt;</code>.</li>\n<li><code class=\"hljs\">\"cdylib\"</code> — A C-compatible dynamic library, corresponding to a <code class=\"hljs\">[lib]</code> section with <code class=\"hljs\">crate-type = [\"cdylib\"]</code> in the dependency’s manifest.</li>\n<li><code class=\"hljs\">\"staticlib\"</code> — A C-compatible static library, corresponding to a <code class=\"hljs\">[lib]</code> section with <code class=\"hljs\">crate-type = [\"staticlib\"]</code> in the dependency’s manifest.</li>\n</ul>\n<p>The <code class=\"hljs\">artifact</code> value can be a string, or it can be an array of strings to specify multiple targets.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"staticlib\"</span> }\n<span class=\"hljs-attr\">zoo</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = [<span class=\"hljs-string\">\"bin:cat\"</span>, <span class=\"hljs-string\">\"bin:dog\"</span>]}\n</code></pre>\n</li>\n<li>\n<p><code class=\"hljs\">lib</code> — This is a Boolean value which indicates whether or not to also build the dependency’s library as a normal Rust <code class=\"hljs\">lib</code> dependency.\nThis field can only be specified when <code class=\"hljs\">artifact</code> is specified.</p>\n<p>The default for this field is <code class=\"hljs\">false</code> when <code class=\"hljs\">artifact</code> is specified.\nIf this is set to <code class=\"hljs\">true</code>, then the dependency’s <code class=\"hljs\">[lib]</code> target will also be built for the platform target the declaring package is being built for.\nThis allows the package to use the dependency from Rust code like a normal dependency in addition to an artifact dependency.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span>, lib = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n</li>\n<li>\n<p><code class=\"hljs\">target</code> — The platform target to build the dependency for.\nThis field can only be specified when <code class=\"hljs\">artifact</code> is specified.</p>\n<p>The default if this is not specified depends on the dependency kind.\nFor build dependencies, it will be built for the host target.\nFor all other dependencies, it will be built for the same targets the declaring package is built for.</p>\n<p>For a build dependency, this can also take the special value of <code class=\"hljs\">\"target\"</code> which means to build the dependency for the same targets that the package is being built for.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"cdylib\"</span>, target = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span>}\n<span class=\"hljs-attr\">same-target</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span>, target = <span class=\"hljs-string\">\"target\"</span> }\n</code></pre>\n</li>\n</ul>\n<h3 id=\"artifact-dependencies-environment-variables\"><a class=\"header\" href=\"#artifact-dependencies-environment-variables\">artifact-dependencies: Environment variables</a></h3>\n<p>After building an artifact dependency, Cargo provides the following environment variables that you can use to access the artifact:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">CARGO_&lt;ARTIFACT-TYPE&gt;_DIR_&lt;DEP&gt;</code> — This is the directory containing all the artifacts from the dependency.</p>\n<p><code class=\"hljs\">&lt;ARTIFACT-TYPE&gt;</code> is the <code class=\"hljs\">artifact</code> specified for the dependency (uppercased as in <code class=\"hljs\">CDYLIB</code>, <code class=\"hljs\">STATICLIB</code>, or <code class=\"hljs\">BIN</code>) and <code class=\"hljs\">&lt;DEP&gt;</code> is the name of the dependency.\nAs with other Cargo environment variables, dependency names are converted to uppercase, with dashes replaced by underscores.</p>\n<p>If your manifest renames the dependency, <code class=\"hljs\">&lt;DEP&gt;</code> corresponds to the name you specify, not the original package name.</p>\n</li>\n<li>\n<p><code class=\"hljs\">CARGO_&lt;ARTIFACT-TYPE&gt;_FILE_&lt;DEP&gt;_&lt;NAME&gt;</code> — This is the full path to the artifact.</p>\n<p><code class=\"hljs\">&lt;ARTIFACT-TYPE&gt;</code> is the <code class=\"hljs\">artifact</code> specified for the dependency (uppercased as above), <code class=\"hljs\">&lt;DEP&gt;</code> is the name of the dependency (transformed as above), and <code class=\"hljs\">&lt;NAME&gt;</code> is the name of the artifact from the dependency.</p>\n<p>Note that <code class=\"hljs\">&lt;NAME&gt;</code> is not modified in any way from the <code class=\"hljs\">name</code> specified in the crate supplying the artifact, or the crate name if not specified; for instance, it may be in lowercase, or contain dashes.</p>\n<p>For convenience, if the artifact name matches the original package name, cargo additionally supplies a copy of this variable with the <code class=\"hljs\">_&lt;NAME&gt;</code> suffix omitted.\nFor instance, if the <code class=\"hljs\">cmake</code> crate supplies a binary named <code class=\"hljs\">cmake</code>, Cargo supplies both <code class=\"hljs\">CARGO_BIN_FILE_CMAKE</code> and <code class=\"hljs\">CARGO_BIN_FILE_CMAKE_cmake</code>.</p>\n</li>\n</ul>\n<p>For each kind of dependency, these variables are supplied to the same part of the build process that has access to that kind of dependency:</p>\n<ul>\n<li>For build-dependencies, these variables are supplied to the <code class=\"hljs\">build.rs</code> script, and can be accessed using <a href=\"https://doc.rust-lang.org/std/env/fn.var_os.html\"><code class=\"hljs\">std::env::var_os</code></a>.\n(As with any OS file path, these may or may not be valid UTF-8.)</li>\n<li>For normal dependencies, these variables are supplied during the compilation of the crate, and can be accessed using the <a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env!</code></a> macro.</li>\n<li>For dev-dependencies, these variables are supplied during the compilation of examples, tests, and benchmarks, and can be accessed using the <a href=\"https://doc.rust-lang.org/std/macro.env.html\"><code class=\"hljs\">env!</code></a> macro.</li>\n</ul>\n<h3 id=\"artifact-dependencies-examples\"><a class=\"header\" href=\"#artifact-dependencies-examples\">artifact-dependencies: Examples</a></h3>\n<h4 id=\"example-use-a-binary-executable-from-a-build-script\"><a class=\"header\" href=\"#example-use-a-binary-executable-from-a-build-script\">Example: use a binary executable from a build script</a></h4>\n<p>In the <code class=\"hljs\">Cargo.toml</code> file, you can specify a dependency on a binary to make available for a build script:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">some-build-tool</span> = { version = <span class=\"hljs-string\">\"1.0\"</span>, artifact = <span class=\"hljs-string\">\"bin\"</span> }\n</code></pre>\n<p>Then inside the build script, the binary can be executed at build time:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> build_tool = std::env::var_os(<span class=\"hljs-string\">\"CARGO_BIN_FILE_SOME_BUILD_TOOL\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> status = std::process::Command::new(build_tool)\n        .arg(<span class=\"hljs-string\">\"do-stuff\"</span>)\n        .status()\n        .unwrap();\n    <span class=\"hljs-keyword\">if</span> !status.success() {\n        eprintln!(<span class=\"hljs-string\">\"failed!\"</span>);\n        std::process::exit(<span class=\"hljs-number\">1</span>);\n    }\n}</code></pre></pre>\n<h4 id=\"example-use-cdylib-artifact-in-build-script\"><a class=\"header\" href=\"#example-use-cdylib-artifact-in-build-script\">Example: use <em>cdylib</em> artifact in build script</a></h4>\n<p>The <code class=\"hljs\">Cargo.toml</code> in the consuming package, building the <code class=\"hljs\">bar</code> library as <code class=\"hljs\">cdylib</code>\nfor a specific build target…</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { artifact = <span class=\"hljs-string\">\"cdylib\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span>, target = <span class=\"hljs-string\">\"wasm32-unknown-unknown\"</span> }\n</code></pre>\n<p>…along with the build script in <code class=\"hljs\">build.rs</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    wasm::run_file(std::env::var(<span class=\"hljs-string\">\"CARGO_CDYLIB_FILE_BAR\"</span>).unwrap());\n}</code></pre></pre>\n<h4 id=\"example-use-binary-artifact-and-its-library-in-a-binary\"><a class=\"header\" href=\"#example-use-binary-artifact-and-its-library-in-a-binary\">Example: use <em>binary</em> artifact and its library in a binary</a></h4>\n<p>The <code class=\"hljs\">Cargo.toml</code> in the consuming package, building the <code class=\"hljs\">bar</code> binary for inclusion\nas artifact while making it available as library as well…</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bar</span> = { artifact = <span class=\"hljs-string\">\"bin\"</span>, version = <span class=\"hljs-string\">\"1.0\"</span>, lib = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>…along with the executable using <code class=\"hljs\">main.rs</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    bar::init();\n    command::run(<span class=\"hljs-built_in\">env!</span>(<span class=\"hljs-string\">\"CARGO_BIN_FILE_BAR\"</span>));\n}</code></pre></pre>\n<h2 id=\"publish-timeout\"><a class=\"header\" href=\"#publish-timeout\">publish-timeout</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/11222\">11222</a></li>\n</ul>\n<p>The <code class=\"hljs\">publish.timeout</code> key in a config file can be used to control how long\n<code class=\"hljs\">cargo publish</code> waits between posting a package to the registry and it being\navailable in the local index.</p>\n<p>A timeout of <code class=\"hljs\">0</code> prevents any checks from occurring. The current default is\n<code class=\"hljs\">60</code> seconds.</p>\n<p>It requires the <code class=\"hljs\">-Zpublish-timeout</code> command-line options to be set.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># config.toml</span>\n<span class=\"hljs-section\">[publish]</span>\n<span class=\"hljs-attr\">timeout</span> = <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># in seconds</span>\n</code></pre>\n<h2 id=\"asymmetric-token\"><a class=\"header\" href=\"#asymmetric-token\">asymmetric-token</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/10519\">10519</a></li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3231\">#3231</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z asymmetric-token</code> flag enables the <code class=\"hljs\">cargo:paseto</code> credential provider which allows Cargo to authenticate to registries without sending secrets over the network.</p>\n<p>In <a href=\"config.html\"><code class=\"hljs\">config.toml</code></a> and <code class=\"hljs\">credentials.toml</code> files there is a field called <code class=\"hljs\">private-key</code>, which is a private key formatted in the secret <a href=\"https://github.com/paseto-standard/paserk/blob/master/types/secret.md\">subset of <code class=\"hljs\">PASERK</code></a> and is used to sign asymmetric tokens</p>\n<p>A keypair can be generated with <code class=\"hljs\">cargo login --generate-keypair</code> which will:</p>\n<ul>\n<li>generate a public/private keypair in the currently recommended fashion.</li>\n<li>save the private key in <code class=\"hljs\">credentials.toml</code>.</li>\n<li>print the public key in <a href=\"https://github.com/paseto-standard/paserk/blob/master/types/public.md\">PASERK public</a> format.</li>\n</ul>\n<p>It is recommended that the <code class=\"hljs\">private-key</code> be saved in <code class=\"hljs\">credentials.toml</code>. It is also supported in <code class=\"hljs\">config.toml</code>, primarily so that it can be set using the associated environment variable, which is the recommended way to provide it in CI contexts. This setup is what we have for the <code class=\"hljs\">token</code> field for setting a secret token.</p>\n<p>There is also an optional field called <code class=\"hljs\">private-key-subject</code> which is a string chosen by the registry.\nThis string will be included as part of an asymmetric token and should not be secret.\nIt is intended for the rare use cases like “cryptographic proof that the central CA server authorized this action”. Cargo requires it to be non-whitespace printable ASCII. Registries that need non-ASCII data should base64 encode it.</p>\n<p>Both fields can be set with <code class=\"hljs\">cargo login --registry=name --private-key --private-key-subject=\"subject\"</code> which will prompt you to put in the key value.</p>\n<p>A registry can have at most one of <code class=\"hljs\">private-key</code> or <code class=\"hljs\">token</code> set.</p>\n<p>All PASETOs will include <code class=\"hljs\">iat</code>, the current time in ISO 8601 format. Cargo will include the following where appropriate:</p>\n<ul>\n<li><code class=\"hljs\">sub</code> an optional, non-secret string chosen by the registry that is expected to be claimed with every request. The value will be the <code class=\"hljs\">private-key-subject</code> from the <code class=\"hljs\">config.toml</code> file.</li>\n<li><code class=\"hljs\">mutation</code> if present, indicates that this request is a mutating operation (or a read-only operation if not present), must be one of the strings <code class=\"hljs\">publish</code>, <code class=\"hljs\">yank</code>, or <code class=\"hljs\">unyank</code>.\n<ul>\n<li><code class=\"hljs\">name</code> name of the crate related to this request.</li>\n<li><code class=\"hljs\">vers</code> version string of the crate related to this request.</li>\n<li><code class=\"hljs\">cksum</code> the SHA256 hash of the crate contents, as a string of 64 lowercase hexadecimal digits, must be present only when <code class=\"hljs\">mutation</code> is equal to <code class=\"hljs\">publish</code></li>\n</ul>\n</li>\n<li><code class=\"hljs\">challenge</code> the challenge string received from a 401/403 from this server this session. Registries that issue challenges must track which challenges have been issued/used and never accept a given challenge more than once within the same validity period (avoiding the need to track every challenge ever issued).</li>\n</ul>\n<p>The “footer” (which is part of the signature) will be a JSON string in UTF-8 and include:</p>\n<ul>\n<li><code class=\"hljs\">url</code> the RFC 3986 compliant URL where cargo got the config.json file,\n<ul>\n<li>If this is a registry with an HTTP index, then this is the base URL that all index queries are relative to.</li>\n<li>If this is a registry with a GIT index, it is the URL Cargo used to clone the index.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">kid</code> the identifier of the private key used to sign the request, using the <a href=\"https://github.com/paseto-standard/paserk/blob/master/operations/ID.md\">PASERK IDs</a> standard.</li>\n</ul>\n<p>PASETO includes the message that was signed, so the server does not have to reconstruct the exact string from the request in order to check the signature. The server does need to check that the signature is valid for the string in the PASETO and that the contents of that string matches the request.\nIf a claim should be expected for the request but is missing in the PASETO then the request must be rejected.</p>\n<h2 id=\"cargo-config\"><a class=\"header\" href=\"#cargo-config\"><code>cargo config</code></a></h2>\n<ul>\n<li>Original Issue: <a href=\"https://github.com/rust-lang/cargo/issues/2362\">#2362</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9301\">#9301</a></li>\n</ul>\n<p>The <code class=\"hljs\">cargo config</code> subcommand provides a way to display the configuration\nfiles that cargo loads. It currently includes the <code class=\"hljs\">get</code> subcommand which\ncan take an optional config value to display.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo +nightly -Zunstable-options config get build.rustflags\n</code></pre>\n<p>If no config value is included, it will display all config values. See the\n<code class=\"hljs\">--help</code> output for more options available.</p>\n<h2 id=\"rustc---print\"><a class=\"header\" href=\"#rustc---print\">rustc <code>--print</code></a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9357\">#9357</a></li>\n</ul>\n<p><code class=\"hljs\">cargo rustc --print=VAL</code> forwards the <code class=\"hljs\">--print</code> flag to <code class=\"hljs\">rustc</code> in order to\nextract information from <code class=\"hljs\">rustc</code>. This runs <code class=\"hljs\">rustc</code> with the corresponding\n<a href=\"https://doc.rust-lang.org/rustc/command-line-arguments.html#--print-print-compiler-information\"><code class=\"hljs\">--print</code></a>\nflag, and then immediately exits without compiling. Exposing this as a cargo\nflag allows cargo to inject the correct target and RUSTFLAGS based on the\ncurrent configuration.</p>\n<p>The primary use case is to run <code class=\"hljs\">cargo rustc --print=cfg</code> to get config values\nfor the appropriate target and influenced by any other RUSTFLAGS.</p>\n<h2 id=\"different-binary-name\"><a class=\"header\" href=\"#different-binary-name\">Different binary name</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9778\">#9778</a></li>\n<li>PR: <a href=\"https://github.com/rust-lang/cargo/pull/9627\">#9627</a></li>\n</ul>\n<p>The <code class=\"hljs\">different-binary-name</code> feature allows setting the filename of the binary without having to obey the\nrestrictions placed on crate names. For example, the crate name must use only <code class=\"hljs\">alphanumeric</code> characters\nor <code class=\"hljs\">-</code> or <code class=\"hljs\">_</code>, and cannot be empty.</p>\n<p>The <code class=\"hljs\">filename</code> parameter should <strong>not</strong> include the binary extension, <code class=\"hljs\">cargo</code> will figure out the appropriate\nextension and use that for the binary on its own.</p>\n<p>The <code class=\"hljs\">filename</code> parameter is only available in the <code class=\"hljs\">[[bin]]</code> section of the manifest.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"different-binary-name\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> =  <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.0.1\"</span>\n\n<span class=\"hljs-section\">[[bin]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">filename</span> = <span class=\"hljs-string\">\"007bar\"</span>\n<span class=\"hljs-attr\">path</span> = <span class=\"hljs-string\">\"src/main.rs\"</span>\n</code></pre>\n<h2 id=\"scrape-examples\"><a class=\"header\" href=\"#scrape-examples\">scrape-examples</a></h2>\n<ul>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3123\">#3123</a></li>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/9910\">#9910</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Z rustdoc-scrape-examples</code> flag tells Rustdoc to search crates in the current workspace\nfor calls to functions. Those call-sites are then included as documentation. You can use the flag\nlike this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo doc -Z unstable-options -Z rustdoc-scrape-examples\n</code></pre>\n<p>By default, Cargo will scrape examples from the example targets of packages being documented.\nYou can individually enable or disable targets from being scraped with the <code class=\"hljs\">doc-scrape-examples</code> flag, such as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Enable scraping examples from a library</span>\n<span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">doc-scrape-examples</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># Disable scraping examples from an example target</span>\n<span class=\"hljs-section\">[[example]]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-example\"</span>\n<span class=\"hljs-attr\">doc-scrape-examples</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>Note on tests:</strong> enabling <code class=\"hljs\">doc-scrape-examples</code> on test targets will not currently have any effect. Scraping\nexamples from tests is a work-in-progress.</p>\n<p><strong>Note on dev-dependencies:</strong> documenting a library does not normally require the crate’s dev-dependencies. However,\nexample targets require dev-deps. For backwards compatibility, <code class=\"hljs\">-Z rustdoc-scrape-examples</code> will <em>not</em> introduce a\ndev-deps requirement for <code class=\"hljs\">cargo doc</code>. Therefore examples will <em>not</em> be scraped from example targets under the\nfollowing conditions:</p>\n<ol>\n<li>No target being documented requires dev-deps, AND</li>\n<li>At least one crate with targets being documented has dev-deps, AND</li>\n<li>The <code class=\"hljs\">doc-scrape-examples</code> parameter is unset or false for all <code class=\"hljs\">[[example]]</code> targets.</li>\n</ol>\n<p>If you want examples to be scraped from example targets, then you must not satisfy one of the above conditions.\nFor example, you can set <code class=\"hljs\">doc-scrape-examples</code> to true for one example target, and that signals to Cargo that\nyou are ok with dev-deps being build for <code class=\"hljs\">cargo doc</code>.</p>\n<h2 id=\"output-format-for-rustdoc\"><a class=\"header\" href=\"#output-format-for-rustdoc\">output-format for rustdoc</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13283\">#13283</a></li>\n</ul>\n<p>This flag determines the output format of <code class=\"hljs\">cargo rustdoc</code>, accepting <code class=\"hljs\">html</code> or <code class=\"hljs\">json</code>, providing tools with a way to lean on <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/\">rustdoc’s experimental JSON format</a>.</p>\n<p>You can use the flag like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"hljs\">cargo rustdoc -Z unstable-options --output-format json\n</code></pre>\n<h2 id=\"codegen-backend\"><a class=\"header\" href=\"#codegen-backend\">codegen-backend</a></h2>\n<p>The <code class=\"hljs\">codegen-backend</code> feature makes it possible to select the codegen backend used by rustc using a profile.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = <span class=\"hljs-string\">\"1.0.117\"</span>\n\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-string\">\"cranelift\"</span>\n</code></pre>\n<p>To set this in a profile in Cargo configuration, you need to use either\n<code class=\"hljs\">-Z codegen-backend</code> or <code class=\"hljs\">[unstable]</code> table to enable it. For example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.dev.package.foo]</span>\n<span class=\"hljs-attr\">codegen-backend</span> = <span class=\"hljs-string\">\"cranelift\"</span>\n</code></pre>\n<h2 id=\"gitoxide\"><a class=\"header\" href=\"#gitoxide\">gitoxide</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/11813\">#11813</a></li>\n</ul>\n<p>With the ‘gitoxide’ unstable feature, all or the specified git operations will be performed by\nthe <code class=\"hljs\">gitoxide</code> crate instead of <code class=\"hljs\">git2</code>.</p>\n<p>While <code class=\"hljs\">-Zgitoxide</code> enables all currently implemented features, one can individually select git operations\nto run with <code class=\"hljs\">gitoxide</code> with the <code class=\"hljs\">-Zgitoxide=operation[,operationN]</code> syntax.</p>\n<p>Valid operations are the following:</p>\n<ul>\n<li><code class=\"hljs\">fetch</code> - All fetches are done with <code class=\"hljs\">gitoxide</code>, which includes git dependencies as well as the crates index.</li>\n<li><code class=\"hljs\">checkout</code> <em>(planned)</em> - checkout the worktree, with support for filters and submodules.</li>\n</ul>\n<h2 id=\"git\"><a class=\"header\" href=\"#git\">git</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13285\">#13285</a></li>\n</ul>\n<p>With the ‘git’ unstable feature, both <code class=\"hljs\">gitoxide</code> and <code class=\"hljs\">git2</code> will perform shallow fetches of the crate\nindex and git dependencies.</p>\n<p>While <code class=\"hljs\">-Zgit</code> enables all currently implemented features, one can individually select when to perform\nshallow fetches with the <code class=\"hljs\">-Zgit=operation[,operationN]</code> syntax.</p>\n<p>Valid operations are the following:</p>\n<ul>\n<li><code class=\"hljs\">shallow-index</code> - perform a shallow clone of the index.</li>\n<li><code class=\"hljs\">shallow-deps</code> - perform a shallow clone of git dependencies.</li>\n</ul>\n<p><strong>Details on shallow clones</strong></p>\n<ul>\n<li>To enable shallow clones, add <code class=\"hljs\">-Zgit=shallow-deps</code> for fetching git dependencies or <code class=\"hljs\">-Zgit=shallow-index</code> for fetching registry index.</li>\n<li>Shallow-cloned and shallow-checked-out git repositories reside at their own <code class=\"hljs\">-shallow</code> suffixed directories, i.e,\n<ul>\n<li><code class=\"hljs\">~/.cargo/registry/index/*-shallow</code></li>\n<li><code class=\"hljs\">~/.cargo/git/db/*-shallow</code></li>\n<li><code class=\"hljs\">~/.cargo/git/checkouts/*-shallow</code></li>\n</ul>\n</li>\n<li>When the unstable feature is on, fetching/cloning a git repository is always a shallow fetch. This roughly equals to <code class=\"hljs\">git fetch --depth 1</code> everywhere.</li>\n<li>Even with the presence of <code class=\"hljs\">Cargo.lock</code> or specifying a commit <code class=\"hljs\">{ rev = \"…\" }</code>, gitoxide and libgit2 are still smart enough to shallow fetch without unshallowing the existing repository.</li>\n</ul>\n<h2 id=\"script\"><a class=\"header\" href=\"#script\">script</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12207\">#12207</a></li>\n</ul>\n<p>Cargo can directly run <code class=\"hljs\">.rs</code> files as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo +nightly -Zscript file.rs</span>\n</code></pre>\n<p>where <code class=\"hljs\">file.rs</code> can be as simple as:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<p>A user may optionally specify a manifest in a <code class=\"hljs\">cargo</code> code fence in a module-level comment, like:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\">#!/usr/bin/env -S cargo +nightly -Zscript\n---cargo\n[dependencies]\nclap = { version = <span class=\"hljs-string\">\"4.2\"</span>, features = [<span class=\"hljs-string\">\"derive\"</span>] }\n---\n\n<span class=\"hljs-keyword\">use</span> clap::Parser;\n\n<span class=\"hljs-meta\">#[derive(Parser, Debug)]</span>\n<span class=\"hljs-meta\">#[clap(version)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Args</span></span> {\n    <span class=\"hljs-meta\">#[clap(short, long, help = <span class=\"hljs-meta-string\">\"Path to config\"</span>)]</span>\n    config: <span class=\"hljs-built_in\">Option</span>&lt;std::path::PathBuf&gt;,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args = Args::parse();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, args);\n}</code></pre></pre>\n<h3 id=\"single-file-packages\"><a class=\"header\" href=\"#single-file-packages\">Single-file packages</a></h3>\n<p>In addition to today’s multi-file packages (<code class=\"hljs\">Cargo.toml</code> file with other <code class=\"hljs\">.rs</code>\nfiles), we are adding the concept of single-file packages which may contain an\nembedded manifest.  There is no required distinguishment for a single-file\n<code class=\"hljs\">.rs</code> package from any other <code class=\"hljs\">.rs</code> file.</p>\n<p>Single-file packages may be selected via <code class=\"hljs\">--manifest-path</code>, like\n<code class=\"hljs\">cargo test --manifest-path foo.rs</code>. Unlike <code class=\"hljs\">Cargo.toml</code>, these files cannot be auto-discovered.</p>\n<p>A single-file package may contain an embedded manifest.  An embedded manifest\nis stored using <code class=\"hljs\">TOML</code> in rust “frontmatter”, a markdown code-fence with <code class=\"hljs\">cargo</code>\nat the start of the infostring at the top of the file.</p>\n<p>Inferred / defaulted manifest fields:</p>\n<ul>\n<li><code class=\"hljs\">package.name = &lt;slugified file stem&gt;</code></li>\n<li><code class=\"hljs\">package.edition = &lt;current&gt;</code> to avoid always having to add an embedded\nmanifest at the cost of potentially breaking scripts on rust upgrades\n<ul>\n<li>Warn when <code class=\"hljs\">edition</code> is unspecified to raise awareness of this</li>\n</ul>\n</li>\n</ul>\n<p>Disallowed manifest fields:</p>\n<ul>\n<li><code class=\"hljs\">[workspace]</code>, <code class=\"hljs\">[lib]</code>, <code class=\"hljs\">[[bin]]</code>, <code class=\"hljs\">[[example]]</code>, <code class=\"hljs\">[[test]]</code>, <code class=\"hljs\">[[bench]]</code></li>\n<li><code class=\"hljs\">package.workspace</code>, <code class=\"hljs\">package.build</code>, <code class=\"hljs\">package.links</code>, <code class=\"hljs\">package.autobins</code>, <code class=\"hljs\">package.autoexamples</code>, <code class=\"hljs\">package.autotests</code>, <code class=\"hljs\">package.autobenches</code></li>\n</ul>\n<p>The default <code class=\"hljs\">CARGO_TARGET_DIR</code> for single-file packages is at <code class=\"hljs\">$CARGO_HOME/target/&lt;hash&gt;</code>:</p>\n<ul>\n<li>Avoid conflicts from multiple single-file packages being in the same directory</li>\n<li>Avoid problems with the single-file package’s parent directory being read-only</li>\n<li>Avoid cluttering the user’s directory</li>\n</ul>\n<p>The lockfile for single-file packages will be placed in <code class=\"hljs\">CARGO_TARGET_DIR</code>.  In\nthe future, when workspaces are supported, that will allow a user to have a\npersistent lockfile.</p>\n<h3 id=\"manifest-commands\"><a class=\"header\" href=\"#manifest-commands\">Manifest-commands</a></h3>\n<p>You may pass a manifest directly to the <code class=\"hljs\">cargo</code> command, without a subcommand,\nlike <code class=\"hljs\">foo/Cargo.toml</code> or a single-file package like <code class=\"hljs\">foo.rs</code>.  This is mostly\nintended for being put in <code class=\"hljs\">#!</code> lines.</p>\n<p>The precedence for how to interpret <code class=\"hljs\">cargo &lt;subcommand&gt;</code> is</p>\n<ol>\n<li>Built-in xor single-file packages</li>\n<li>Aliases</li>\n<li>External subcommands</li>\n</ol>\n<p>A parameter is identified as a manifest-command if it has one of:</p>\n<ul>\n<li>Path separators</li>\n<li>A <code class=\"hljs\">.rs</code> extension</li>\n<li>The file name is <code class=\"hljs\">Cargo.toml</code></li>\n</ul>\n<p>Differences between <code class=\"hljs\">cargo run --manifest-path &lt;path&gt;</code> and <code class=\"hljs\">cargo &lt;path&gt;</code></p>\n<ul>\n<li><code class=\"hljs\">cargo &lt;path&gt;</code> runs with the config for <code class=\"hljs\">&lt;path&gt;</code> and not the current dir, more like <code class=\"hljs\">cargo install --path &lt;path&gt;</code></li>\n<li><code class=\"hljs\">cargo &lt;path&gt;</code> is at a verbosity level below the normal default.  Pass <code class=\"hljs\">-v</code> to get normal output.</li>\n</ul>\n<h3 id=\"documentation-updates\"><a class=\"header\" href=\"#documentation-updates\">Documentation Updates</a></h3>\n<h2 id=\"edition-2024\"><a class=\"header\" href=\"#edition-2024\">Edition 2024</a></h2>\n<ul>\n<li>Tracking Issue: (none created yet)</li>\n<li>RFC: <a href=\"https://github.com/rust-lang/rfcs/pull/3501\">rust-lang/rfcs#3501</a></li>\n</ul>\n<p>Support for the 2024 <a href=\"../../edition-guide/index.html\">edition</a> can be enabled by adding the <code class=\"hljs\">edition2024</code>\nunstable feature to the top of <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"edition2024\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2024\"</span>\n</code></pre>\n<p>If you want to transition an existing project from a previous edition, then\n<code class=\"hljs\">cargo fix --edition</code> can be used on the nightly channel. After running <code class=\"hljs\">cargo fix</code>, you can switch the edition to 2024 as illustrated above.</p>\n<p>This feature is very unstable, and is only intended for early testing and\nexperimentation. Future nightly releases may introduce changes for the 2024\nedition that may break your build.</p>\n<h2 id=\"profile-trim-paths-option\"><a class=\"header\" href=\"#profile-trim-paths-option\">Profile <code>trim-paths</code> option</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12137\">rust-lang/cargo#12137</a></li>\n<li>Tracking Rustc Issue: <a href=\"https://github.com/rust-lang/rust/issues/111540\">rust-lang/rust#111540</a></li>\n</ul>\n<p>This adds a new profile setting to control how paths are sanitized in the resulting binary.\nThis can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"trim-paths\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"diagnostics\"</span>, <span class=\"hljs-string\">\"object\"</span>]\n</code></pre>\n<p>To set this in a profile in Cargo configuration,\nyou need to use either <code class=\"hljs\">-Z trim-paths</code> or <code class=\"hljs\">[unstable]</code> table to enable it.\nFor example,</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># .cargo/config.toml</span>\n<span class=\"hljs-section\">[unstable]</span>\n<span class=\"hljs-attr\">trim-paths</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"diagnostics\"</span>, <span class=\"hljs-string\">\"object\"</span>]\n</code></pre>\n<h3 id=\"documentation-updates-1\"><a class=\"header\" href=\"#documentation-updates-1\">Documentation updates</a></h3>\n<h4 id=\"trim-paths\"><a class=\"header\" href=\"#trim-paths\">trim-paths</a></h4>\n<p><em>as a new <a href=\"./profiles.html#profile-settings\">“Profiles settings” entry</a></em></p>\n<p><code class=\"hljs\">trim-paths</code> is a profile setting which enables and controls the sanitization of file paths in build outputs.\nIt takes the following values:</p>\n<ul>\n<li><code class=\"hljs\">\"none\"</code> and <code class=\"hljs\">false</code> — disable path sanitization</li>\n<li><code class=\"hljs\">\"macro\"</code> — sanitize paths in the expansion of <code class=\"hljs\">std::file!()</code> macro.\nThis is where paths in embedded panic messages come from</li>\n<li><code class=\"hljs\">\"diagnostics\"</code> — sanitize paths in printed compiler diagnostics</li>\n<li><code class=\"hljs\">\"object\"</code> — sanitize paths in compiled executables or libraries</li>\n<li><code class=\"hljs\">\"all\"</code> and <code class=\"hljs\">true</code> — sanitize paths in all possible locations</li>\n</ul>\n<p>It also takes an array with the combinations of <code class=\"hljs\">\"macro\"</code>, <code class=\"hljs\">\"diagnostics\"</code>, and <code class=\"hljs\">\"object\"</code>.</p>\n<p>It is defaulted to <code class=\"hljs\">none</code> for the <code class=\"hljs\">dev</code> profile, and <code class=\"hljs\">object</code> for the <code class=\"hljs\">release</code> profile.\nYou can manually override it by specifying this option in <code class=\"hljs\">Cargo.toml</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">trim-paths</span> = <span class=\"hljs-string\">\"all\"</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">trim-paths</span> = [<span class=\"hljs-string\">\"object\"</span>, <span class=\"hljs-string\">\"diagnostics\"</span>]\n</code></pre>\n<p>The default <code class=\"hljs\">release</code> profile setting (<code class=\"hljs\">object</code>) sanitizes only the paths in emitted executable or library files.\nIt always affects paths from macros such as panic messages, and in debug information only if they will be embedded together with the binary\n(the default on platforms with ELF binaries, such as Linux and windows-gnu),\nbut will not touch them if they are in separate files (the default on Windows MSVC and macOS).\nBut the paths to these separate files are sanitized.</p>\n<p>If <code class=\"hljs\">trim-paths</code> is not <code class=\"hljs\">none</code> or <code class=\"hljs\">false</code>, then the following paths are sanitized if they appear in a selected scope:</p>\n<ol>\n<li>Path to the source files of the standard and core library (sysroot) will begin with <code class=\"hljs\">/rustc/[rustc commit hash]</code>,\ne.g. <code class=\"hljs\">/home/username/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs</code> -&gt;\n<code class=\"hljs\">/rustc/fe72845f7bb6a77b9e671e6a4f32fe714962cec4/library/core/src/result.rs</code></li>\n<li>Path to the current package will be stripped, relatively to the current workspace root, e.g. <code class=\"hljs\">/home/username/crate/src/lib.rs</code> -&gt; <code class=\"hljs\">src/lib.rs</code>.</li>\n<li>Path to dependency packages will be replaced with <code class=\"hljs\">[package name]-[version]</code>. E.g. <code class=\"hljs\">/home/username/deps/foo/src/lib.rs</code> -&gt; <code class=\"hljs\">foo-0.1.0/src/lib.rs</code></li>\n</ol>\n<p>When a path to the source files of the standard and core library is <em>not</em> in scope for sanitization,\nthe emitted path will depend on if <code class=\"hljs\">rust-src</code> component is present.\nIf it is, then some paths will point to the copy of the source files on your file system;\nif it isn’t, then they will show up as <code class=\"hljs\">/rustc/[rustc commit hash]/library/...</code>\n(just like when it is selected for sanitization).\nPaths to all other source files will not be affected.</p>\n<p>This will not affect any hard-coded paths in the source code, such as in strings.</p>\n<h4 id=\"environment-variable\"><a class=\"header\" href=\"#environment-variable\">Environment variable</a></h4>\n<p><em>as a new entry of <a href=\"./environment-variables.html#environment-variables-cargo-sets-for-crates\">“Environment variables Cargo sets for build scripts”</a></em></p>\n<ul>\n<li><code class=\"hljs\">CARGO_TRIM_PATHS</code> — The value of <code class=\"hljs\">trim-paths</code> profile option.\n<code class=\"hljs\">false</code>, <code class=\"hljs\">\"none\"</code>, and empty arrays would be converted to <code class=\"hljs\">none</code>.\n<code class=\"hljs\">true</code> and <code class=\"hljs\">\"all\"</code> become <code class=\"hljs\">all</code>.\nValues in a non-empty array would be joined into a comma-separated list.\nIf the build script introduces absolute paths to built artifacts (such as by invoking a compiler),\nthe user may request them to be sanitized in different types of artifacts.\nCommon paths requiring sanitization include <code class=\"hljs\">OUT_DIR</code> and <code class=\"hljs\">CARGO_MANIFEST_DIR</code>,\nplus any other introduced by the build script, such as include directories.</li>\n</ul>\n<h2 id=\"gc\"><a class=\"header\" href=\"#gc\">gc</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12633\">#12633</a></li>\n</ul>\n<p>The <code class=\"hljs\">-Zgc</code> flag enables garbage-collection within cargo’s global cache within the cargo home directory.\nThis includes downloaded dependencies such as compressed <code class=\"hljs\">.crate</code> files, extracted <code class=\"hljs\">src</code> directories, registry index caches, and git dependencies.\nWhen <code class=\"hljs\">-Zgc</code> is present, cargo will track the last time any index and dependency was used,\nand then uses those timestamps to manually or automatically delete cache entries that have not been used for a while.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo build -Zgc\n</code></pre>\n<h3 id=\"automatic-garbage-collection\"><a class=\"header\" href=\"#automatic-garbage-collection\">Automatic garbage collection</a></h3>\n<p>Automatic deletion happens on commands that are already doing a significant amount of work,\nsuch as all of the build commands (<code class=\"hljs\">cargo build</code>, <code class=\"hljs\">cargo test</code>, <code class=\"hljs\">cargo check</code>, etc.), and <code class=\"hljs\">cargo fetch</code>.\nThe deletion happens just after resolution and packages have been downloaded.\nAutomatic deletion is only done once per day (see <code class=\"hljs\">gc.auto.frequency</code> to configure).\nAutomatic deletion is disabled if cargo is offline such as with <code class=\"hljs\">--offline</code> or <code class=\"hljs\">--frozen</code> to avoid deleting artifacts that may need to be used if you are offline for a long period of time.</p>\n<h4 id=\"automatic-gc-configuration\"><a class=\"header\" href=\"#automatic-gc-configuration\">Automatic gc configuration</a></h4>\n<p>The automatic gc behavior can be specified via a cargo configuration setting.\nThe settings available are:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Example config.toml file.</span>\n\n<span class=\"hljs-comment\"># This table defines the behavior for automatic garbage collection.</span>\n<span class=\"hljs-section\">[gc.auto]</span>\n<span class=\"hljs-comment\"># The maximum frequency that automatic garbage collection happens.</span>\n<span class=\"hljs-comment\"># Can be \"never\" to disable automatic-gc, or \"always\" to run on every command.</span>\n<span class=\"hljs-attr\">frequency</span> = <span class=\"hljs-string\">\"1 day\"</span>\n<span class=\"hljs-comment\"># Anything older than this duration will be deleted in the source cache.</span>\n<span class=\"hljs-attr\">max-src-age</span> = <span class=\"hljs-string\">\"1 month\"</span>\n<span class=\"hljs-comment\"># Anything older than this duration will be deleted in the compressed crate cache.</span>\n<span class=\"hljs-attr\">max-crate-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n<span class=\"hljs-comment\"># Any index older than this duration will be deleted from the index cache.</span>\n<span class=\"hljs-attr\">max-index-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n<span class=\"hljs-comment\"># Any git checkout older than this duration will be deleted from the checkout cache.</span>\n<span class=\"hljs-attr\">max-git-co-age</span> = <span class=\"hljs-string\">\"1 month\"</span>\n<span class=\"hljs-comment\"># Any git clone older than this duration will be deleted from the git cache.</span>\n<span class=\"hljs-attr\">max-git-db-age</span> = <span class=\"hljs-string\">\"3 months\"</span>\n</code></pre>\n<h3 id=\"manual-garbage-collection-with-cargo-clean\"><a class=\"header\" href=\"#manual-garbage-collection-with-cargo-clean\">Manual garbage collection with <code>cargo clean</code></a></h3>\n<p>Manual deletion can be done with the <code class=\"hljs\">cargo clean gc</code> command.\nDeletion of cache contents can be performed by passing one of the cache options:</p>\n<ul>\n<li><code class=\"hljs\">--max-src-age=DURATION</code> — Deletes source cache files that have not been used since the given age.</li>\n<li><code class=\"hljs\">--max-crate-age=DURATION</code> — Deletes crate cache files that have not been used since the given age.</li>\n<li><code class=\"hljs\">--max-index-age=DURATION</code> — Deletes registry indexes that have not been used since then given age (including their <code class=\"hljs\">.crate</code> and <code class=\"hljs\">src</code> files).</li>\n<li><code class=\"hljs\">--max-git-co-age=DURATION</code> — Deletes git dependency checkouts that have not been used since then given age.</li>\n<li><code class=\"hljs\">--max-git-db-age=DURATION</code> — Deletes git dependency clones that have not been used since then given age.</li>\n<li><code class=\"hljs\">--max-download-age=DURATION</code> — Deletes any downloaded cache data that has not been used since then given age.</li>\n<li><code class=\"hljs\">--max-src-size=SIZE</code> — Deletes the oldest source cache files until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-crate-size=SIZE</code> — Deletes the oldest crate cache files until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-git-size=SIZE</code> — Deletes the oldest git dependency caches until the cache is under the given size.</li>\n<li><code class=\"hljs\">--max-download-size=SIZE</code> — Deletes the oldest downloaded cache data until the cache is under the given size.</li>\n</ul>\n<p>A DURATION is specified in the form “N seconds/minutes/days/weeks/months” where N is an integer.</p>\n<p>A SIZE is specified in the form “N <em>suffix</em>” where <em>suffix</em> is B, kB, MB, GB, kiB, MiB, or GiB, and N is an integer or floating point number. If no suffix is specified, the number is the number of bytes.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\">cargo clean gc\ncargo clean gc --max-download-age=1week\ncargo clean gc --max-git-size=0 --max-download-size=100MB\n</code></pre>\n<h2 id=\"open-namespaces\"><a class=\"header\" href=\"#open-namespaces\">open-namespaces</a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/13576\">#13576</a></li>\n</ul>\n<p>Allow multiple packages to participate in the same API namespace</p>\n<p>This can be enabled like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">cargo-features</span> = [<span class=\"hljs-string\">\"open-namespaces\"</span>]\n\n<span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<h2 id=\"lintscargo\"><a class=\"header\" href=\"#lintscargo\"><code>[lints.cargo]</code></a></h2>\n<ul>\n<li>Tracking Issue: <a href=\"https://github.com/rust-lang/cargo/issues/12235\">#12235</a></li>\n</ul>\n<p>A new <code class=\"hljs\">lints</code> tool table for <code class=\"hljs\">cargo</code> that can be used to configure lints emitted\nby <code class=\"hljs\">cargo</code> itself when <code class=\"hljs\">-Zcargo-lints</code> is used</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.cargo]</span>\n<span class=\"hljs-attr\">implicit-features</span> = <span class=\"hljs-string\">\"warn\"</span>\n</code></pre>\n<p>This will work with\n<a href=\"https://rust-lang.github.io/rfcs/2906-cargo-workspace-deduplicate.html\">RFC 2906 <code class=\"hljs\">workspace-deduplicate</code></a>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace.lints.cargo]</span>\n<span class=\"hljs-attr\">implicit-features</span> = <span class=\"hljs-string\">\"warn\"</span>\n\n<span class=\"hljs-section\">[lints]</span>\n<span class=\"hljs-attr\">workspace</span> = <span class=\"hljs-literal\">true</span>\n</code></pre>\n<h1 id=\"stabilized-and-removed-features\"><a class=\"header\" href=\"#stabilized-and-removed-features\">Stabilized and removed features</a></h1>\n<h2 id=\"compile-progress\"><a class=\"header\" href=\"#compile-progress\">Compile progress</a></h2>\n<p>The compile-progress feature has been stabilized in the 1.30 release.\nProgress bars are now enabled by default.\nSee <a href=\"config.html#termprogresswhen\"><code class=\"hljs\">term.progress</code></a> for more information about\ncontrolling this feature.</p>\n<h2 id=\"edition\"><a class=\"header\" href=\"#edition\">Edition</a></h2>\n<p>Specifying the <code class=\"hljs\">edition</code> in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.31 release.\nSee <a href=\"manifest.html#the-edition-field\">the edition field</a> for more information\nabout specifying this field.</p>\n<h2 id=\"rename-dependency\"><a class=\"header\" href=\"#rename-dependency\">rename-dependency</a></h2>\n<p>Specifying renamed dependencies in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.31 release.\nSee <a href=\"specifying-dependencies.html#renaming-dependencies-in-cargotoml\">renaming dependencies</a>\nfor more information about renaming dependencies.</p>\n<h2 id=\"alternate-registries\"><a class=\"header\" href=\"#alternate-registries\">Alternate Registries</a></h2>\n<p>Support for alternate registries has been stabilized in the 1.34 release.\nSee the <a href=\"registries.html\">Registries chapter</a> for more information about alternate registries.</p>\n<h2 id=\"offline-mode\"><a class=\"header\" href=\"#offline-mode\">Offline Mode</a></h2>\n<p>The offline feature has been stabilized in the 1.36 release.\nSee the <a href=\"../commands/cargo.html#option-cargo---offline\"><code class=\"hljs\">--offline</code> flag</a> for\nmore information on using the offline mode.</p>\n<h2 id=\"publish-lockfile\"><a class=\"header\" href=\"#publish-lockfile\">publish-lockfile</a></h2>\n<p>The <code class=\"hljs\">publish-lockfile</code> feature has been removed in the 1.37 release.\nThe <code class=\"hljs\">Cargo.lock</code> file is always included when a package is published if the\npackage contains a binary target. <code class=\"hljs\">cargo install</code> requires the <code class=\"hljs\">--locked</code> flag\nto use the <code class=\"hljs\">Cargo.lock</code> file.\nSee <a href=\"../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> and\n<a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> for more information.</p>\n<h2 id=\"default-run\"><a class=\"header\" href=\"#default-run\">default-run</a></h2>\n<p>The <code class=\"hljs\">default-run</code> feature has been stabilized in the 1.37 release.\nSee <a href=\"manifest.html#the-default-run-field\">the <code class=\"hljs\">default-run</code> field</a> for more\ninformation about specifying the default target to run.</p>\n<h2 id=\"cache-messages\"><a class=\"header\" href=\"#cache-messages\">cache-messages</a></h2>\n<p>Compiler message caching has been stabilized in the 1.40 release.\nCompiler warnings are now cached by default and will be replayed automatically\nwhen re-running Cargo.</p>\n<h2 id=\"install-upgrade\"><a class=\"header\" href=\"#install-upgrade\">install-upgrade</a></h2>\n<p>The <code class=\"hljs\">install-upgrade</code> feature has been stabilized in the 1.41 release.\n<a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will now automatically upgrade packages if they appear to be\nout-of-date. See the <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> documentation for more information.</p>\n<h2 id=\"profile-overrides\"><a class=\"header\" href=\"#profile-overrides\">Profile Overrides</a></h2>\n<p>Profile overrides have been stabilized in the 1.41 release.\nSee <a href=\"profiles.html#overrides\">Profile Overrides</a> for more information on using\noverrides.</p>\n<h2 id=\"config-profiles\"><a class=\"header\" href=\"#config-profiles\">Config Profiles</a></h2>\n<p>Specifying profiles in Cargo config files and environment variables has been\nstabilized in the 1.43 release.\nSee the <a href=\"config.html#profile\">config <code class=\"hljs\">[profile]</code> table</a> for more information\nabout specifying <a href=\"profiles.html\">profiles</a> in config files.</p>\n<h2 id=\"crate-versions\"><a class=\"header\" href=\"#crate-versions\">crate-versions</a></h2>\n<p>The <code class=\"hljs\">-Z crate-versions</code> flag has been stabilized in the 1.47 release.\nThe crate version is now automatically included in the\n<a href=\"../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> documentation sidebar.</p>\n<h2 id=\"features\"><a class=\"header\" href=\"#features\">Features</a></h2>\n<p>The <code class=\"hljs\">-Z features</code> flag has been stabilized in the 1.51 release.\nSee <a href=\"features.html#feature-resolver-version-2\">feature resolver version 2</a>\nfor more information on using the new feature resolver.</p>\n<h2 id=\"package-features\"><a class=\"header\" href=\"#package-features\">package-features</a></h2>\n<p>The <code class=\"hljs\">-Z package-features</code> flag has been stabilized in the 1.51 release.\nSee the <a href=\"features.html#resolver-version-2-command-line-flags\">resolver version 2 command-line flags</a>\nfor more information on using the features CLI options.</p>\n<h2 id=\"resolver\"><a class=\"header\" href=\"#resolver\">Resolver</a></h2>\n<p>The <code class=\"hljs\">resolver</code> feature in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.51 release.\nSee the <a href=\"resolver.html#resolver-versions\">resolver versions</a> for more\ninformation about specifying resolvers.</p>\n<h2 id=\"extra-link-arg\"><a class=\"header\" href=\"#extra-link-arg\">extra-link-arg</a></h2>\n<p>The <code class=\"hljs\">extra-link-arg</code> feature to specify additional linker arguments in build\nscripts has been stabilized in the 1.56 release. See the <a href=\"build-scripts.html#outputs-of-the-build-script\">build script\ndocumentation</a> for more\ninformation on specifying extra linker arguments.</p>\n<h2 id=\"configurable-env\"><a class=\"header\" href=\"#configurable-env\">configurable-env</a></h2>\n<p>The <code class=\"hljs\">configurable-env</code> feature to specify environment variables in Cargo\nconfiguration has been stabilized in the 1.56 release. See the <a href=\"config.html#env\">config\ndocumentation</a> for more information about configuring\nenvironment variables.</p>\n<h2 id=\"rust-version\"><a class=\"header\" href=\"#rust-version\">rust-version</a></h2>\n<p>The <code class=\"hljs\">rust-version</code> field in <code class=\"hljs\">Cargo.toml</code> has been stabilized in the 1.56 release.\nSee the <a href=\"manifest.html#the-rust-version-field\">rust-version field</a> for more\ninformation on using the <code class=\"hljs\">rust-version</code> field and the <code class=\"hljs\">--ignore-rust-version</code> option.</p>\n<h2 id=\"patch-in-config\"><a class=\"header\" href=\"#patch-in-config\">patch-in-config</a></h2>\n<p>The <code class=\"hljs\">-Z patch-in-config</code> flag, and the corresponding support for\n<code class=\"hljs\">[patch]</code> section in Cargo configuration files has been stabilized in\nthe 1.56 release. See the <a href=\"config.html#patch\">patch field</a> for more\ninformation.</p>\n<h2 id=\"edition-2021\"><a class=\"header\" href=\"#edition-2021\">edition 2021</a></h2>\n<p>The 2021 edition has been stabilized in the 1.56 release.\nSee the <a href=\"manifest.html#the-edition-field\"><code class=\"hljs\">edition</code> field</a> for more information on setting the edition.\nSee <a href=\"../commands/cargo-fix.html\"><code class=\"hljs\">cargo fix --edition</code></a> and <a href=\"../../edition-guide/index.html\">The Edition Guide</a> for more information on migrating existing projects.</p>\n<h2 id=\"custom-named-profiles\"><a class=\"header\" href=\"#custom-named-profiles\">Custom named profiles</a></h2>\n<p>Custom named profiles have been stabilized in the 1.57 release. See the\n<a href=\"profiles.html#custom-profiles\">profiles chapter</a> for more information.</p>\n<h2 id=\"profile-strip-option\"><a class=\"header\" href=\"#profile-strip-option\">Profile <code>strip</code> option</a></h2>\n<p>The profile <code class=\"hljs\">strip</code> option has been stabilized in the 1.59 release. See the\n<a href=\"profiles.html#strip\">profiles chapter</a> for more information.</p>\n<h2 id=\"future-incompat-report\"><a class=\"header\" href=\"#future-incompat-report\">Future incompat report</a></h2>\n<p>Support for generating a future-incompat report has been stabilized\nin the 1.59 release. See the <a href=\"future-incompat-report.html\">future incompat report chapter</a>\nfor more information.</p>\n<h2 id=\"namespaced-features\"><a class=\"header\" href=\"#namespaced-features\">Namespaced features</a></h2>\n<p>Namespaced features has been stabilized in the 1.60 release.\nSee the <a href=\"features.html#optional-dependencies\">Features chapter</a> for more information.</p>\n<h2 id=\"weak-dependency-features\"><a class=\"header\" href=\"#weak-dependency-features\">Weak dependency features</a></h2>\n<p>Weak dependency features has been stabilized in the 1.60 release.\nSee the <a href=\"features.html#dependency-features\">Features chapter</a> for more information.</p>\n<h2 id=\"timings\"><a class=\"header\" href=\"#timings\">timings</a></h2>\n<p>The <code class=\"hljs\">-Ztimings</code> option has been stabilized as <code class=\"hljs\">--timings</code> in the 1.60 release.\n(<code class=\"hljs\">--timings=html</code> and the machine-readable <code class=\"hljs\">--timings=json</code> output remain\nunstable and require <code class=\"hljs\">-Zunstable-options</code>.)</p>\n<h2 id=\"config-cli\"><a class=\"header\" href=\"#config-cli\">config-cli</a></h2>\n<p>The <code class=\"hljs\">--config</code> CLI option has been stabilized in the 1.63 release. See\nthe <a href=\"config.html#command-line-overrides\">config documentation</a> for more\ninformation.</p>\n<h2 id=\"multitarget\"><a class=\"header\" href=\"#multitarget\">multitarget</a></h2>\n<p>The <code class=\"hljs\">-Z multitarget</code> option has been stabilized in the 1.64 release.\nSee <a href=\"config.html#buildtarget\"><code class=\"hljs\">build.target</code></a> for more information about\nsetting the default <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target platform triples</a>.</p>\n<h2 id=\"crate-type\"><a class=\"header\" href=\"#crate-type\">crate-type</a></h2>\n<p>The <code class=\"hljs\">--crate-type</code> flag for <code class=\"hljs\">cargo rustc</code> has been stabilized in the 1.64\nrelease. See the <a href=\"../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code> documentation</a>\nfor more information.</p>\n<h2 id=\"workspace-inheritance\"><a class=\"header\" href=\"#workspace-inheritance\">Workspace Inheritance</a></h2>\n<p>Workspace Inheritance has been stabilized in the 1.64 release.\nSee <a href=\"workspaces.html#the-package-table\">workspace.package</a>,\n<a href=\"workspaces.html#the-dependencies-table\">workspace.dependencies</a>,\nand <a href=\"specifying-dependencies.html#inheriting-a-dependency-from-a-workspace\">inheriting-a-dependency-from-a-workspace</a>\nfor more information.</p>\n<h2 id=\"terminal-width\"><a class=\"header\" href=\"#terminal-width\">terminal-width</a></h2>\n<p>The <code class=\"hljs\">-Z terminal-width</code> option has been stabilized in the 1.68 release.\nThe terminal width is always passed to the compiler when running from a\nterminal where Cargo can automatically detect the width.</p>\n<h2 id=\"sparse-registry\"><a class=\"header\" href=\"#sparse-registry\">sparse-registry</a></h2>\n<p>Sparse registry support has been stabilized in the 1.68 release.\nSee <a href=\"registries.html#registry-protocols\">Registry Protocols</a> for more information.</p>\n<h3 id=\"cargo-logout\"><a class=\"header\" href=\"#cargo-logout\"><code>cargo logout</code></a></h3>\n<p>The <a href=\"../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> command has been stabilized in the 1.70 release.</p>\n<h2 id=\"doctest-in-workspace\"><a class=\"header\" href=\"#doctest-in-workspace\"><code>doctest-in-workspace</code></a></h2>\n<p>The <code class=\"hljs\">-Z doctest-in-workspace</code> option for <code class=\"hljs\">cargo test</code> has been stabilized and\nenabled by default in the 1.72 release. See the\n<a href=\"../commands/cargo-test.html#working-directory-of-tests\"><code class=\"hljs\">cargo test</code> documentation</a>\nfor more information about the working directory for compiling and running tests.</p>\n<h2 id=\"keep-going\"><a class=\"header\" href=\"#keep-going\">keep-going</a></h2>\n<p>The <code class=\"hljs\">--keep-going</code> option has been stabilized in the 1.74 release. See the\n<a href=\"../commands/cargo-build.html#option-cargo-build---keep-going\"><code class=\"hljs\">--keep-going</code> flag</a>\nin <code class=\"hljs\">cargo build</code> as an example for more details.</p>\n<h2 id=\"lints\"><a class=\"header\" href=\"#lints\"><code>[lints]</code></a></h2>\n<p><a href=\"manifest.html#the-lints-section\"><code class=\"hljs\">[lints]</code></a> (enabled via <code class=\"hljs\">-Zlints</code>) has been stabilized in the 1.74 release.</p>\n<h2 id=\"credential-process\"><a class=\"header\" href=\"#credential-process\">credential-process</a></h2>\n<p>The <code class=\"hljs\">-Z credential-process</code> feature has been stabilized in the 1.74 release.</p>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> documentation for details.</p>\n<h2 id=\"registry-auth\"><a class=\"header\" href=\"#registry-auth\">registry-auth</a></h2>\n<p>The <code class=\"hljs\">-Z registry-auth</code> feature has been stabilized in the 1.74 release with the additional\nrequirement that a credential-provider is configured.</p>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> documentation for details.</p>\n<h2 id=\"check-cfg\"><a class=\"header\" href=\"#check-cfg\">check-cfg</a></h2>\n<p>The <code class=\"hljs\">-Z check-cfg</code> feature has been stabilized in the 1.80 release by making it the\ndefault behavior.</p>\n<p>See the <a href=\"build-scripts.html#rustc-check-cfg\">build script documentation</a> for informations\nabout specifying custom cfgs.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/timings.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../commands/index.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/timings.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../commands/index.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:25.674Z"
}