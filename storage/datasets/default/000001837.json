{
	"title": "Implementations - The Rust Reference",
	"url": "https://doc.rust-lang.org/reference/items/implementations.html#inherent-implementations",
	"markdown": "# Implementations - The Rust Reference\n\n> **Syntax**  \n> _Implementation_ :  \n>    _InherentImpl_ | _TraitImpl_\n> \n> _InherentImpl_ :  \n>    `impl` [_GenericParams_](generics.html)? [_Type_](about:blank/types.html#type-expressions) [_WhereClause_](about:blank/generics.html#where-clauses)? `{`  \n>       [_InnerAttribute_](../attributes.html)\\*  \n>       [_AssociatedItem_](associated-items.html)\\*  \n>    `}`\n> \n> _TraitImpl_ :  \n>    `unsafe`? `impl` [_GenericParams_](generics.html)? `!`? [_TypePath_](about:blank/paths.html#paths-in-types) `for` [_Type_](about:blank/types.html#type-expressions)  \n>    [_WhereClause_](about:blank/generics.html#where-clauses)?  \n>    `{`  \n>       [_InnerAttribute_](../attributes.html)\\*  \n>       [_AssociatedItem_](associated-items.html)\\*  \n>    `}`\n\nAn _implementation_ is an item that associates items with an _implementing type_. Implementations are defined with the keyword `impl` and contain functions that belong to an instance of the type that is being implemented or to the type statically.\n\nThere are two types of implementations:\n\n-   inherent implementations\n-   [trait](traits.html) implementations\n\n## [Inherent Implementations](#inherent-implementations)\n\nAn inherent implementation is defined as the sequence of the `impl` keyword, generic type declarations, a path to a nominal type, a where clause, and a bracketed set of associable items.\n\nThe nominal type is called the _implementing type_ and the associable items are the _associated items_ to the implementing type.\n\nInherent implementations associate the contained items to the implementing type. Inherent implementations can contain [associated functions](about:blank/associated-items.html#associated-functions-and-methods) (including [methods](about:blank/associated-items.html#methods)) and [associated constants](about:blank/associated-items.html#associated-constants). They cannot contain associated type aliases.\n\nThe [path](../paths.html) to an associated item is any path to the implementing type, followed by the associated item's identifier as the final path component.\n\nA type can also have multiple inherent implementations. An implementing type must be defined within the same crate as the original type definition.\n\n```rust\npub mod color {\n    pub struct Color(pub u8, pub u8, pub u8);\n\n    impl Color {\n        pub const WHITE: Color = Color(255, 255, 255);\n    }\n}\n\nmod values {\n    use super::color::Color;\n    impl Color {\n        pub fn red() -> Color {\n            Color(255, 0, 0)\n        }\n    }\n}\n\npub use self::color::Color;\nfn main() {\n    // Actual path to the implementing type and impl in the same module.\n    color::Color::WHITE;\n\n    // Impl blocks in different modules are still accessed through a path to the type.\n    color::Color::red();\n\n    // Re-exported paths to the implementing type also work.\n    Color::red();\n\n    // Does not work, because use in `values` is not pub.\n    // values::Color::red();\n}\n```\n\n## [Trait Implementations](#trait-implementations)\n\nA _trait implementation_ is defined like an inherent implementation except that the optional generic type declarations are followed by a [trait](traits.html), followed by the keyword `for`, followed by a path to a nominal type.\n\nThe trait is known as the _implemented trait_. The implementing type implements the implemented trait.\n\nA trait implementation must define all non-default associated items declared by the implemented trait, may redefine default associated items defined by the implemented trait, and cannot define any other items.\n\nThe path to the associated items is `<` followed by a path to the implementing type followed by `as` followed by a path to the trait followed by `>` as a path component followed by the associated item's path component.\n\n[Unsafe traits](about:blank/traits.html#unsafe-traits) require the trait implementation to begin with the `unsafe` keyword.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[derive(Copy, Clone)]\nstruct Point {x: f64, y: f64};\ntype Surface = i32;\nstruct BoundingBox {x: f64, y: f64, width: f64, height: f64};\ntrait Shape { fn draw(&self, s: Surface); fn bounding_box(&self) -> BoundingBox; }\nfn do_draw_circle(s: Surface, c: Circle) { }\nstruct Circle {\n    radius: f64,\n    center: Point,\n}\n\nimpl Copy for Circle {}\n\nimpl Clone for Circle {\n    fn clone(&self) -> Circle { *self }\n}\n\nimpl Shape for Circle {\n    fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n    fn bounding_box(&self) -> BoundingBox {\n        let r = self.radius;\n        BoundingBox {\n            x: self.center.x - r,\n            y: self.center.y - r,\n            width: 2.0 * r,\n            height: 2.0 * r,\n        }\n    }\n}\n}\n```\n\n### [Trait Implementation Coherence](#trait-implementation-coherence)\n\nA trait implementation is considered incoherent if either the orphan rules check fails or there are overlapping implementation instances.\n\nTwo trait implementations overlap when there is a non-empty intersection of the traits the implementation is for, the implementations can be instantiated with the same type.\n\n#### [Orphan rules](#orphan-rules)\n\nGiven `impl<P1..=Pn> Trait<T1..=Tn> for T0`, an `impl` is valid only if at least one of the following is true:\n\n-   `Trait` is a [local trait](about:blank/glossary.html#local-trait)\n-   All of\n    -   At least one of the types `T0..=Tn` must be a [local type](about:blank/glossary.html#local-type). Let `Ti` be the first such type.\n    -   No [uncovered type](about:blank/glossary.html#uncovered-type) parameters `P1..=Pn` may appear in `T0..Ti` (excluding `Ti`)\n\nOnly the appearance of _uncovered_ type parameters is restricted. Note that for the purposes of coherence, [fundamental types](about:blank/glossary.html#fundamental-type-constructors) are special. The `T` in `Box<T>` is not considered covered, and `Box<LocalType>` is considered local.\n\n## [Generic Implementations](#generic-implementations)\n\nAn implementation can take [generic parameters](generics.html), which can be used in the rest of the implementation. Implementation parameters are written directly after the `impl` keyword.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Seq<T> { fn dummy(&self, _: T) { } }\nimpl<T> Seq<T> for Vec<T> {\n    /* ... */\n}\nimpl Seq<bool> for u32 {\n    /* Treat the integer as a sequence of bits */\n}\n}\n```\n\nGeneric parameters _constrain_ an implementation if the parameter appears at least once in one of:\n\n-   The implemented trait, if it has one\n-   The implementing type\n-   As an [associated type](about:blank/associated-items.html#associated-types) in the [bounds](../trait-bounds.html) of a type that contains another parameter that constrains the implementation\n\nType and const parameters must always constrain the implementation. Lifetimes must constrain the implementation if the lifetime is used in an associated type.\n\nExamples of constraining situations:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Trait{}\ntrait GenericTrait<T> {}\ntrait HasAssocType { type Ty; }\nstruct Struct;\nstruct GenericStruct<T>(T);\nstruct ConstGenericStruct<const N: usize>([(); N]);\n// T constrains by being an argument to GenericTrait.\nimpl<T> GenericTrait<T> for i32 { /* ... */ }\n\n// T constrains by being an argument to GenericStruct\nimpl<T> Trait for GenericStruct<T> { /* ... */ }\n\n// Likewise, N constrains by being an argument to ConstGenericStruct\nimpl<const N: usize> Trait for ConstGenericStruct<N> { /* ... */ }\n\n// T constrains by being in an associated type in a bound for type `U` which is\n// itself a generic parameter constraining the trait.\nimpl<T, U> GenericTrait<U> for u32 where U: HasAssocType<Ty = T> { /* ... */ }\n\n// Like previous, except the type is `(U, isize)`. `U` appears inside the type\n// that includes `T`, and is not the type itself.\nimpl<T, U> GenericStruct<U> where (U, isize): HasAssocType<Ty = T> { /* ... */ }\n}\n```\n\nExamples of non-constraining situations:\n\n```rust\n#![allow(unused)]\nfn main() {\n// The rest of these are errors, since they have type or const parameters that\n// do not constrain.\n\n// T does not constrain since it does not appear at all.\nimpl<T> Struct { /* ... */ }\n\n// N does not constrain for the same reason.\nimpl<const N: usize> Struct { /* ... */ }\n\n// Usage of T inside the implementation does not constrain the impl.\nimpl<T> Struct {\n    fn uses_t(t: &T) { /* ... */ }\n}\n\n// T is used as an associated type in the bounds for U, but U does not constrain.\nimpl<T, U> Struct where U: HasAssocType<Ty = T> { /* ... */ }\n\n// T is used in the bounds, but not as an associated type, so it does not constrain.\nimpl<T, U> GenericTrait<U> for u32 where U: GenericTrait<T> {}\n}\n```\n\nExample of an allowed unconstraining lifetime parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct;\nimpl<'a> Struct {}\n}\n```\n\nExample of a disallowed unconstraining lifetime parameter:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Struct;\ntrait HasAssocType { type Ty; }\nimpl<'a> HasAssocType for Struct {\n    type Ty = &'a Struct;\n}\n}\n```\n\n## [Attributes on Implementations](#attributes-on-implementations)\n\nImplementations may contain outer [attributes](../attributes.html) before the `impl` keyword and inner [attributes](../attributes.html) inside the brackets that contain the associated items. Inner attributes must come before any associated items. The attributes that have meaning here are [`cfg`](../conditional-compilation.html), [`deprecated`](about:blank/attributes/diagnostics.html#the-deprecated-attribute), [`doc`](../../rustdoc/the-doc-attribute.html), and [the lint check attributes](about:blank/attributes/diagnostics.html#lint-check-attributes).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Implementations - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar bordered\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/implementations.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"implementations\"><a class=\"header\" href=\"#implementations\">Implementations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Implementation</em> :<br>\n&nbsp;&nbsp; <em>InherentImpl</em> | <em>TraitImpl</em></p>\n<p><em>InherentImpl</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">impl</code> <a href=\"generics.html\"><em>GenericParams</em></a><sup>?</sup>&nbsp;<a href=\"../types.html#type-expressions\"><em>Type</em></a>&nbsp;<a href=\"generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>TraitImpl</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">impl</code> <a href=\"generics.html\"><em>GenericParams</em></a><sup>?</sup> <code class=\"hljs\">!</code><sup>?</sup>\n<a href=\"../paths.html#paths-in-types\"><em>TypePath</em></a> <code class=\"hljs\">for</code> <a href=\"../types.html#type-expressions\"><em>Type</em></a><br>\n&nbsp;&nbsp; <a href=\"generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"associated-items.html\"><em>AssociatedItem</em></a><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>An <em>implementation</em> is an item that associates items with an <em>implementing type</em>.\nImplementations are defined with the keyword <code class=\"hljs\">impl</code> and contain functions\nthat belong to an instance of the type that is being implemented or to the\ntype statically.</p>\n<p>There are two types of implementations:</p>\n<ul>\n<li>inherent implementations</li>\n<li><a href=\"traits.html\">trait</a> implementations</li>\n</ul>\n<h2 id=\"inherent-implementations\"><a class=\"header\" href=\"#inherent-implementations\">Inherent Implementations</a></h2>\n<p>An inherent implementation is defined as the sequence of the <code class=\"hljs\">impl</code> keyword,\ngeneric type declarations, a path to a nominal type, a where clause, and a\nbracketed set of associable items.</p>\n<p>The nominal type is called the <em>implementing type</em> and the associable items are\nthe <em>associated items</em> to the implementing type.</p>\n<p>Inherent implementations associate the contained items to the\nimplementing type.  Inherent implementations can contain <a href=\"associated-items.html#associated-functions-and-methods\">associated\nfunctions</a> (including <a href=\"associated-items.html#methods\">methods</a>) and <a href=\"associated-items.html#associated-constants\">associated constants</a>. They cannot\ncontain associated type aliases.</p>\n<p>The <a href=\"../paths.html\">path</a> to an associated item is any path to the implementing type,\nfollowed by the associated item's identifier as the final path\ncomponent.</p>\n<p>A type can also have multiple inherent implementations. An implementing type\nmust be defined within the same crate as the original type definition.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust edition2021 hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> color {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Color</span></span>(<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-built_in\">u8</span>);\n\n    <span class=\"hljs-keyword\">impl</span> Color {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">const</span> WHITE: Color = Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">mod</span> values {\n    <span class=\"hljs-keyword\">use</span> super::color::Color;\n    <span class=\"hljs-keyword\">impl</span> Color {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">red</span></span>() -&gt; Color {\n            Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::color::Color;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Actual path to the implementing type and impl in the same module.</span>\n    color::Color::WHITE;\n\n    <span class=\"hljs-comment\">// Impl blocks in different modules are still accessed through a path to the type.</span>\n    color::Color::red();\n\n    <span class=\"hljs-comment\">// Re-exported paths to the implementing type also work.</span>\n    Color::red();\n\n    <span class=\"hljs-comment\">// Does not work, because use in `values` is not pub.</span>\n    <span class=\"hljs-comment\">// values::Color::red();</span>\n}</code></pre></pre>\n<h2 id=\"trait-implementations\"><a class=\"header\" href=\"#trait-implementations\">Trait Implementations</a></h2>\n<p>A <em>trait implementation</em> is defined like an inherent implementation except that\nthe optional generic type declarations are followed by a <a href=\"traits.html\">trait</a>, followed\nby the keyword <code class=\"hljs\">for</code>, followed by a path to a nominal type.</p>\n<!-- To understand this, you have to back-reference to the previous section. :( -->\n<p>The trait is known as the <em>implemented trait</em>. The implementing type\nimplements the implemented trait.</p>\n<p>A trait implementation must define all non-default associated items declared\nby the implemented trait, may redefine default associated items defined by the\nimplemented trait, and cannot define any other items.</p>\n<p>The path to the associated items is <code class=\"hljs\">&lt;</code> followed by a path to the implementing\ntype followed by <code class=\"hljs\">as</code> followed by a path to the trait followed by <code class=\"hljs\">&gt;</code> as a path\ncomponent followed by the associated item's path component.</p>\n<p><a href=\"traits.html#unsafe-traits\">Unsafe traits</a> require the trait implementation to begin with the <code class=\"hljs\">unsafe</code>\nkeyword.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Copy, Clone)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span>};\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Surface</span></span> = <span class=\"hljs-built_in\">i32</span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BoundingBox</span></span> {x: <span class=\"hljs-built_in\">f64</span>, y: <span class=\"hljs-built_in\">f64</span>, width: <span class=\"hljs-built_in\">f64</span>, height: <span class=\"hljs-built_in\">f64</span>};\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Shape</span></span> { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, s: Surface); <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox; }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_draw_circle</span></span>(s: Surface, c: Circle) { }\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Circle</span></span> {\n    radius: <span class=\"hljs-built_in\">f64</span>,\n    center: Point,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Copy</span> <span class=\"hljs-keyword\">for</span> Circle {}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Clone</span> <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">clone</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Circle { *<span class=\"hljs-keyword\">self</span> }\n}\n\n<span class=\"hljs-keyword\">impl</span> Shape <span class=\"hljs-keyword\">for</span> Circle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, s: Surface) { do_draw_circle(s, *<span class=\"hljs-keyword\">self</span>); }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bounding_box</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; BoundingBox {\n        <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-keyword\">self</span>.radius;\n        BoundingBox {\n            x: <span class=\"hljs-keyword\">self</span>.center.x - r,\n            y: <span class=\"hljs-keyword\">self</span>.center.y - r,\n            width: <span class=\"hljs-number\">2.0</span> * r,\n            height: <span class=\"hljs-number\">2.0</span> * r,\n        }\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"trait-implementation-coherence\"><a class=\"header\" href=\"#trait-implementation-coherence\">Trait Implementation Coherence</a></h3>\n<p>A trait implementation is considered incoherent if either the orphan rules check fails\nor there are overlapping implementation instances.</p>\n<p>Two trait implementations overlap when there is a non-empty intersection of the\ntraits the implementation is for, the implementations can be instantiated with\nthe same type. <!-- This is probably wrong? Source: No two implementations can\nbe instantiable with the same set of types for the input type parameters. --></p>\n<h4 id=\"orphan-rules\"><a class=\"header\" href=\"#orphan-rules\">Orphan rules</a></h4>\n<p>Given <code class=\"hljs\">impl&lt;P1..=Pn&gt; Trait&lt;T1..=Tn&gt; for T0</code>, an <code class=\"hljs\">impl</code> is valid only if at\nleast one of the following is true:</p>\n<ul>\n<li><code class=\"hljs\">Trait</code> is a <a href=\"../glossary.html#local-trait\">local trait</a></li>\n<li>All of\n<ul>\n<li>At least one of the types <code class=\"hljs\">T0..=Tn</code> must be a <a href=\"../glossary.html#local-type\">local type</a>. Let <code class=\"hljs\">Ti</code> be the\nfirst such type.</li>\n<li>No <a href=\"../glossary.html#uncovered-type\">uncovered type</a> parameters <code class=\"hljs\">P1..=Pn</code> may appear in <code class=\"hljs\">T0..Ti</code> (excluding\n<code class=\"hljs\">Ti</code>)</li>\n</ul>\n</li>\n</ul>\n<p>Only the appearance of <em>uncovered</em> type parameters is restricted.\nNote that for the purposes of coherence, <a href=\"../glossary.html#fundamental-type-constructors\">fundamental types</a> are\nspecial. The <code class=\"hljs\">T</code> in <code class=\"hljs\">Box&lt;T&gt;</code> is not considered covered, and <code class=\"hljs\">Box&lt;LocalType&gt;</code>\nis considered local.</p>\n<h2 id=\"generic-implementations\"><a class=\"header\" href=\"#generic-implementations\">Generic Implementations</a></h2>\n<p>An implementation can take <a href=\"generics.html\">generic parameters</a>, which can be used in the rest\nof the implementation. Implementation parameters are written directly after the\n<code class=\"hljs\">impl</code> keyword.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Seq</span></span>&lt;T&gt; { <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">dummy</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, _: T) { } }\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Seq&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">Vec</span>&lt;T&gt; {\n    <span class=\"hljs-comment\">/* ... */</span>\n}\n<span class=\"hljs-keyword\">impl</span> Seq&lt;<span class=\"hljs-built_in\">bool</span>&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> {\n    <span class=\"hljs-comment\">/* Treat the integer as a sequence of bits */</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Generic parameters <em>constrain</em> an implementation if the parameter appears at\nleast once in one of:</p>\n<ul>\n<li>The implemented trait, if it has one</li>\n<li>The implementing type</li>\n<li>As an <a href=\"associated-items.html#associated-types\">associated type</a> in the <a href=\"../trait-bounds.html\">bounds</a> of a type that contains another\nparameter that constrains the implementation</li>\n</ul>\n<p>Type and const parameters must always constrain the implementation. Lifetimes\nmust constrain the implementation if the lifetime is used in an associated type.</p>\n<p>Examples of constraining situations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span>{}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">GenericTrait</span></span>&lt;T&gt; {}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HasAssocType</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span>; }\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">GenericStruct</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ConstGenericStruct</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([(); N]);\n</span><span class=\"hljs-comment\">// T constrains by being an argument to GenericTrait.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; GenericTrait&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T constrains by being an argument to GenericStruct</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Trait <span class=\"hljs-keyword\">for</span> GenericStruct&lt;T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Likewise, N constrains by being an argument to ConstGenericStruct</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Trait <span class=\"hljs-keyword\">for</span> ConstGenericStruct&lt;N&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T constrains by being in an associated type in a bound for type `U` which is</span>\n<span class=\"hljs-comment\">// itself a generic parameter constraining the trait.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericTrait&lt;U&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> <span class=\"hljs-keyword\">where</span> U: HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Like previous, except the type is `(U, isize)`. `U` appears inside the type</span>\n<span class=\"hljs-comment\">// that includes `T`, and is not the type itself.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericStruct&lt;U&gt; <span class=\"hljs-keyword\">where</span> (U, <span class=\"hljs-built_in\">isize</span>): HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Examples of non-constraining situations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// The rest of these are errors, since they have type or const parameters that</span>\n<span class=\"hljs-comment\">// do not constrain.</span>\n\n<span class=\"hljs-comment\">// T does not constrain since it does not appear at all.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Struct { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// N does not constrain for the same reason.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Struct { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// Usage of T inside the implementation does not constrain the impl.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Struct {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">uses_t</span></span>(t: &amp;T) { <span class=\"hljs-comment\">/* ... */</span> }\n}\n\n<span class=\"hljs-comment\">// T is used as an associated type in the bounds for U, but U does not constrain.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; Struct <span class=\"hljs-keyword\">where</span> U: HasAssocType&lt;Ty = T&gt; { <span class=\"hljs-comment\">/* ... */</span> }\n\n<span class=\"hljs-comment\">// T is used in the bounds, but not as an associated type, so it does not constrain.</span>\n<span class=\"hljs-keyword\">impl</span>&lt;T, U&gt; GenericTrait&lt;U&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">u32</span> <span class=\"hljs-keyword\">where</span> U: GenericTrait&lt;T&gt; {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Example of an allowed unconstraining lifetime parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; Struct {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Example of a disallowed unconstraining lifetime parameter:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HasAssocType</span></span> { <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span>; }\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; HasAssocType <span class=\"hljs-keyword\">for</span> Struct {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Ty</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> Struct;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-implementations\"><a class=\"header\" href=\"#attributes-on-implementations\">Attributes on Implementations</a></h2>\n<p>Implementations may contain outer <a href=\"../attributes.html\">attributes</a> before the <code class=\"hljs\">impl</code> keyword and\ninner <a href=\"../attributes.html\">attributes</a> inside the brackets that contain the associated items. Inner\nattributes must come before any associated items. The attributes that have\nmeaning here are <a href=\"../conditional-compilation.html\"><code class=\"hljs\">cfg</code></a>, <a href=\"../attributes/diagnostics.html#the-deprecated-attribute\"><code class=\"hljs\">deprecated</code></a>, <a href=\"../../rustdoc/the-doc-attribute.html\"><code class=\"hljs\">doc</code></a>, and <a href=\"../attributes/diagnostics.html#lint-check-attributes\">the lint check\nattributes</a>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/traits.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/external-blocks.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/traits.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/external-blocks.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:43.289Z"
}