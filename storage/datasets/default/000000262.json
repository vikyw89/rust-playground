{
	"title": "std::convert - Rust",
	"url": "https://doc.rust-lang.org/stable/std/convert/index.html",
	"markdown": "# std::convert - Rust\n\n## Module [std](../index.html)::[convert](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#379) ·\n\nExpand description\n\nTraits for conversions between types.\n\nThe traits in this module provide a way to convert from one type to another type. Each trait serves a different purpose:\n\n-   Implement the [`AsRef`](trait.AsRef.html \"trait std::convert::AsRef\") trait for cheap reference-to-reference conversions\n-   Implement the [`AsMut`](trait.AsMut.html \"trait std::convert::AsMut\") trait for cheap mutable-to-mutable conversions\n-   Implement the [`From`](trait.From.html \"trait std::convert::From\") trait for consuming value-to-value conversions\n-   Implement the [`Into`](trait.Into.html \"trait std::convert::Into\") trait for consuming value-to-value conversions to types outside the current crate\n-   The [`TryFrom`](trait.TryFrom.html \"trait std::convert::TryFrom\") and [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\") traits behave like [`From`](trait.From.html \"trait std::convert::From\") and [`Into`](trait.Into.html \"trait std::convert::Into\"), but should be implemented when the conversion can fail.\n\nThe traits in this module are often used as trait bounds for generic functions such that to arguments of multiple types are supported. See the documentation of each trait for examples.\n\nAs a library author, you should always prefer implementing [`From<T>`](trait.From.html \"trait std::convert::From\") or [`TryFrom<T>`](trait.TryFrom.html \"trait std::convert::TryFrom\") rather than [`Into<U>`](trait.Into.html \"trait std::convert::Into\") or [`TryInto<U>`](trait.TryInto.html \"trait std::convert::TryInto\"), as [`From`](trait.From.html \"trait std::convert::From\") and [`TryFrom`](trait.TryFrom.html \"trait std::convert::TryFrom\") provide greater flexibility and offer equivalent [`Into`](trait.Into.html \"trait std::convert::Into\") or [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\") implementations for free, thanks to a blanket implementation in the standard library. When targeting a version prior to Rust 1.41, it may be necessary to implement [`Into`](trait.Into.html \"trait std::convert::Into\") or [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\") directly when converting to a type outside the current crate.\n\n## [§](#generic-implementations)Generic Implementations\n\n-   [`AsRef`](trait.AsRef.html \"trait std::convert::AsRef\") and [`AsMut`](trait.AsMut.html \"trait std::convert::AsMut\") auto-dereference if the inner type is a reference (but not generally for all [dereferenceable types](../ops/trait.Deref.html \"trait std::ops::Deref\"))\n-   [`From`](trait.From.html \"trait std::convert::From\")`<U> for T` implies [`Into`](trait.Into.html \"trait std::convert::Into\")`<T> for U`\n-   [`TryFrom`](trait.TryFrom.html \"trait std::convert::TryFrom\")`<U> for T` implies [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\")`<T> for U`\n-   [`From`](trait.From.html \"trait std::convert::From\") and [`Into`](trait.Into.html \"trait std::convert::Into\") are reflexive, which means that all types can `into` themselves and `from` themselves\n\nSee each trait for usage examples.\n\n-   The error type for errors that can never happen.\n    \n\n-   Used to do a cheap mutable-to-mutable reference conversion.\n    \n-   Used to do a cheap reference-to-reference conversion.\n    \n-   Used to do value-to-value conversions while consuming the input value. It is the reciprocal of [`Into`](trait.Into.html \"trait std::convert::Into\").\n    \n-   A value-to-value conversion that consumes the input value. The opposite of [`From`](trait.From.html \"trait std::convert::From\").\n    \n-   Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`](trait.TryInto.html \"trait std::convert::TryInto\").\n    \n-   An attempted conversion that consumes `self`, which may or may not be expensive.\n    \n-   Supporting trait for inherent methods of `f32` and `f64` such as `to_int_unchecked`. Typically doesn’t need to be used directly.\n    \n\n-   The identity function.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Traits for conversions between types.\"><title>std::convert - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module convert</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module convert</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#enums\">Enums</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">convert</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#379\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Traits for conversions between types.</p>\n<p>The traits in this module provide a way to convert from one type to another type.\nEach trait serves a different purpose:</p>\n<ul>\n<li>Implement the <a href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\"><code>AsRef</code></a> trait for cheap reference-to-reference conversions</li>\n<li>Implement the <a href=\"trait.AsMut.html\" title=\"trait std::convert::AsMut\"><code>AsMut</code></a> trait for cheap mutable-to-mutable conversions</li>\n<li>Implement the <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> trait for consuming value-to-value conversions</li>\n<li>Implement the <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> trait for consuming value-to-value conversions to types\noutside the current crate</li>\n<li>The <a href=\"trait.TryFrom.html\" title=\"trait std::convert::TryFrom\"><code>TryFrom</code></a> and <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a> traits behave like <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> and <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a>,\nbut should be implemented when the conversion can fail.</li>\n</ul>\n<p>The traits in this module are often used as trait bounds for generic functions such that to\narguments of multiple types are supported. See the documentation of each trait for examples.</p>\n<p>As a library author, you should always prefer implementing <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From&lt;T&gt;</code></a> or\n<a href=\"trait.TryFrom.html\" title=\"trait std::convert::TryFrom\"><code>TryFrom&lt;T&gt;</code></a> rather than <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into&lt;U&gt;</code></a> or <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto&lt;U&gt;</code></a>,\nas <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> and <a href=\"trait.TryFrom.html\" title=\"trait std::convert::TryFrom\"><code>TryFrom</code></a> provide greater flexibility and offer\nequivalent <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> or <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a> implementations for free, thanks to a\nblanket implementation in the standard library. When targeting a version prior to Rust 1.41, it\nmay be necessary to implement <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> or <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a> directly when converting to a type\noutside the current crate.</p>\n<h2 id=\"generic-implementations\"><a class=\"doc-anchor\" href=\"#generic-implementations\">§</a>Generic Implementations</h2>\n<ul>\n<li><a href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\"><code>AsRef</code></a> and <a href=\"trait.AsMut.html\" title=\"trait std::convert::AsMut\"><code>AsMut</code></a> auto-dereference if the inner type is a reference\n(but not generally for all <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">dereferenceable types</a>)</li>\n<li><a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a><code>&lt;U&gt; for T</code> implies <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a><code>&lt;T&gt; for U</code></li>\n<li><a href=\"trait.TryFrom.html\" title=\"trait std::convert::TryFrom\"><code>TryFrom</code></a><code>&lt;U&gt; for T</code> implies <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a><code>&lt;T&gt; for U</code></li>\n<li><a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a> and <a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a> are reflexive, which means that all types can\n<code>into</code> themselves and <code>from</code> themselves</li>\n</ul>\n<p>See each trait for usage examples.</p>\n</div></details><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></div><div class=\"desc docblock-short\">The error type for errors that can never happen.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a></div><div class=\"desc docblock-short\">Used to do a cheap mutable-to-mutable reference conversion.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a></div><div class=\"desc docblock-short\">Used to do a cheap reference-to-reference conversion.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.From.html\" title=\"trait std::convert::From\">From</a></div><div class=\"desc docblock-short\">Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n<a href=\"trait.Into.html\" title=\"trait std::convert::Into\"><code>Into</code></a>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Into.html\" title=\"trait std::convert::Into\">Into</a></div><div class=\"desc docblock-short\">A value-to-value conversion that consumes the input value. The\nopposite of <a href=\"trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a></div><div class=\"desc docblock-short\">Simple and safe type conversions that may fail in a controlled\nway under some circumstances. It is the reciprocal of <a href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\"><code>TryInto</code></a>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a></div><div class=\"desc docblock-short\">An attempted conversion that consumes <code>self</code>, which may or may not be\nexpensive.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Supporting trait for inherent methods of <code>f32</code> and <code>f64</code> such as <code>to_int_unchecked</code>.\nTypically doesn’t need to be used directly.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.identity.html\" title=\"fn std::convert::identity\">identity</a></div><div class=\"desc docblock-short\">The identity function.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:51.953Z"
}