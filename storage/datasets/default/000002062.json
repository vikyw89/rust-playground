{
	"title": "OnceCell in std::cell - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cell/struct.OnceCell.html",
	"markdown": "# OnceCell in std::cell - Rust\n\n## Struct [std](../index.html)::[cell](index.html)::[OnceCell](#)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#33) ·\n\n```\npub struct OnceCell<T> { /* private fields */ }\n```\n\nExpand description\n\nA cell which can nominally be written to only once.\n\nThis allows obtaining a shared `&T` reference to its inner value without copying or replacing it (unlike [`Cell`](struct.Cell.html \"struct std::cell::Cell\")), and without runtime borrow checks (unlike [`RefCell`](struct.RefCell.html \"struct std::cell::RefCell\")). However, only immutable references can be obtained unless one has a mutable reference to the cell itself. In the same vein, the cell can only be re-initialized with such a mutable reference.\n\nFor a thread-safe version of this struct, see [`std::sync::OnceLock`](../../std/sync/struct.OnceLock.html).\n\n## [§](#examples)Examples\n\n```\nuse std::cell::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nlet value: &String = cell.get_or_init(|| {\n    \"Hello, World!\".to_string()\n});\nassert_eq!(value, \"Hello, World!\");\nassert!(cell.get().is_some());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value:+%26String+=+cell.get_or_init(%7C%7C+%7B%0A++++++++%22Hello,+World!%22.to_string()%0A++++%7D);%0A++++assert_eq!(value,+%22Hello,+World!%22);%0A++++assert!(cell.get().is_some());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#38)[§](#impl-OnceCell%3CT%3E)\n\n1.70.0 (const: 1.70.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#44)\n\nCreates a new empty cell.\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#53)\n\nGets the reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#63)\n\nGets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty.\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#89)\n\nSets the contents of the cell to `value`.\n\n##### [§](#errors)Errors\n\nThis method returns `Ok(())` if the cell was empty and `Err(value)` if it was full.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cell::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.set(92), Ok(()));\nassert_eq!(cell.set(62), Err(62));\n\nassert!(cell.get().is_some());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++assert_eq!(cell.set(92),+Ok(()));%0A++++assert_eq!(cell.set(62),+Err(62));%0A++++%0A++++assert!(cell.get().is_some());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#121)\n\n🔬This is a nightly-only experimental API. (`once_cell_try_insert` [#116693](https://github.com/rust-lang/rust/issues/116693))\n\nSets the contents of the cell to `value` if the cell was empty, then returns a reference to it.\n\n##### [§](#errors-1)Errors\n\nThis method returns `Ok(&value)` if the cell was empty and `Err(&current_value, value)` if it was full.\n\n##### [§](#examples-2)Examples\n\n```\n#![feature(once_cell_try_insert)]\n\nuse std::cell::OnceCell;\n\nlet cell = OnceCell::new();\nassert!(cell.get().is_none());\n\nassert_eq!(cell.try_insert(92), Ok(&92));\nassert_eq!(cell.try_insert(62), Err((&92, 62)));\n\nassert!(cell.get().is_some());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try_insert)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++assert_eq!(cell.try_insert(92),+Ok(%2692));%0A++++assert_eq!(cell.try_insert(62),+Err((%2692,+62)));%0A++++%0A++++assert!(cell.get().is_some());%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#158-160)\n\nGets the contents of the cell, initializing it with `f` if the cell was empty.\n\n##### [§](#panics)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing so results in a panic.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::cell::OnceCell;\n\nlet cell = OnceCell::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++let+value+=+cell.get_or_init(%7C%7C+92);%0A++++assert_eq!(value,+%2692);%0A++++let+value+=+cell.get_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(value,+%2692);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#194-196)\n\n🔬This is a nightly-only experimental API. (`once_cell_get_mut` [#121641](https://github.com/rust-lang/rust/issues/121641))\n\nGets the mutable reference of the contents of the cell, initializing it with `f` if the cell was empty.\n\n##### [§](#panics-1)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(once_cell_get_mut)]\n\nuse std::cell::OnceCell;\n\nlet mut cell = OnceCell::new();\nlet value = cell.get_mut_or_init(|| 92);\nassert_eq!(*value, 92);\n\n*value += 2;\nassert_eq!(*value, 94);\n\nlet value = cell.get_mut_or_init(|| unreachable!());\nassert_eq!(*value, 94);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell+=+OnceCell::new();%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+92);%0A++++assert_eq!(*value,+92);%0A++++%0A++++*value+%2B=+2;%0A++++assert_eq!(*value,+94);%0A++++%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(*value,+94);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#232-234)\n\n🔬This is a nightly-only experimental API. (`once_cell_try` [#109737](https://github.com/rust-lang/rust/issues/109737))\n\nGets the contents of the cell, initializing it with `f` if the cell was empty. If the cell was empty and `f` failed, an error is returned.\n\n##### [§](#panics-2)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. Doing so results in a panic.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(once_cell_try)]\n\nuse std::cell::OnceCell;\n\nlet cell = OnceCell::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert_eq!(cell.get_or_try_init(%7C%7C+Err(())),+Err(()));%0A++++assert!(cell.get().is_none());%0A++++let+value+=+cell.get_or_try_init(%7C%7C+-%3E+Result%3Ci32,+()%3E+%7B%0A++++++++Ok(92)%0A++++%7D);%0A++++assert_eq!(value,+Ok(%2692));%0A++++assert_eq!(cell.get(),+Some(%2692))%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#270-272)\n\n🔬This is a nightly-only experimental API. (`once_cell_get_mut` [#121641](https://github.com/rust-lang/rust/issues/121641))\n\nGets the mutable reference of the contents of the cell, initializing it with `f` if the cell was empty. If the cell was empty and `f` failed, an error is returned.\n\n##### [§](#panics-3)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\n##### [§](#examples-6)Examples\n\n```\n#![feature(once_cell_get_mut)]\n\nuse std::cell::OnceCell;\n\nlet mut cell: OnceCell<u32> = OnceCell::new();\n\n// Failed initializers do not change the value\nassert!(cell.get_mut_or_try_init(|| \"not a number!\".parse()).is_err());\nassert!(cell.get().is_none());\n\nlet value = cell.get_mut_or_try_init(|| \"1234\".parse());\nassert_eq!(value, Ok(&mut 1234));\n*value.unwrap() += 2;\nassert_eq!(cell.get(), Some(&1236))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell:+OnceCell%3Cu32%3E+=+OnceCell::new();%0A++++%0A++++//+Failed+initializers+do+not+change+the+value%0A++++assert!(cell.get_mut_or_try_init(%7C%7C+%22not+a+number!%22.parse()).is_err());%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value+=+cell.get_mut_or_try_init(%7C%7C+%221234%22.parse());%0A++++assert_eq!(value,+Ok(%26mut+1234));%0A++++*value.unwrap()+%2B=+2;%0A++++assert_eq!(cell.get(),+Some(%261236))%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#313)\n\nConsumes the cell, returning the wrapped value.\n\nReturns `None` if the cell was empty.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::cell::OnceCell;\n\nlet cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell:+OnceCell%3CString%3E+=+OnceCell::new();%0A++++assert_eq!(cell.into_inner(),+None);%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.into_inner(),+Some(%22hello%22.to_string()));%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#340)\n\nTakes the value out of this `OnceCell`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceCell` hasn’t been initialized.\n\nSafety is guaranteed by requiring a mutable reference.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::cell::OnceCell;\n\nlet mut cell: OnceCell<String> = OnceCell::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceCell::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell:+OnceCell%3CString%3E+=+OnceCell::new();%0A++++assert_eq!(cell.take(),+None);%0A++++%0A++++let+mut+cell+=+OnceCell::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.take(),+Some(%22hello%22.to_string()));%0A++++assert_eq!(cell.get(),+None);%0A%7D&edition=2021)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#366)[§](#impl-Clone-for-OnceCell%3CT%3E)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#354)[§](#impl-Debug-for-OnceCell%3CT%3E)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#346)[§](#impl-Default-for-OnceCell%3CT%3E)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#392)[§](#impl-From%3CT%3E-for-OnceCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#395)[§](#method.from)\n\nCreates a new `OnceCell<T>` which already contains the given `value`.\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#381)[§](#impl-PartialEq-for-OnceCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#383)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#389)[§](#impl-Eq-for-OnceCell%3CT%3E)\n\n1.70.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#402)[§](#impl-Sync-for-OnceCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A cell which can nominally be written to only once.\"><title>OnceCell in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OnceCell</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OnceCell</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_mut_or_init\">get_mut_or_init</a></li><li><a href=\"#method.get_mut_or_try_init\">get_mut_or_try_init</a></li><li><a href=\"#method.get_or_init\">get_or_init</a></li><li><a href=\"#method.get_or_try_init\">get_or_try_init</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.set\">set</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.try_insert\">try_insert</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Sync-for-OnceCell%3CT%3E\">!Sync</a></li><li><a href=\"#impl-Clone-for-OnceCell%3CT%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-OnceCell%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-OnceCell%3CT%3E\">Default</a></li><li><a href=\"#impl-Eq-for-OnceCell%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3CT%3E-for-OnceCell%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-PartialEq-for-OnceCell%3CT%3E\">PartialEq</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-OnceCell%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-OnceCell%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-OnceCell%3CT%3E\">Send</a></li><li><a href=\"#impl-Unpin-for-OnceCell%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-OnceCell%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">OnceCell</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#33\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct OnceCell&lt;T&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A cell which can nominally be written to only once.</p>\n<p>This allows obtaining a shared <code>&amp;T</code> reference to its inner value without copying or replacing\nit (unlike <a href=\"struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a>), and without runtime borrow checks (unlike <a href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a>). However,\nonly immutable references can be obtained unless one has a mutable reference to the cell\nitself. In the same vein, the cell can only be re-initialized with such a mutable reference.</p>\n<p>For a thread-safe version of this struct, see <a href=\"../../std/sync/struct.OnceLock.html\"><code>std::sync::OnceLock</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n\n<span class=\"kw\">let </span>value: <span class=\"kw-2\">&amp;</span>String = cell.get_or_init(|| {\n    <span class=\"string\">\"Hello, World!\"</span>.to_string()\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"string\">\"Hello, World!\"</span>);\n<span class=\"macro\">assert!</span>(cell.get().is_some());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value:+%26String+=+cell.get_or_init(%7C%7C+%7B%0A++++++++%22Hello,+World!%22.to_string()%0A++++%7D);%0A++++assert_eq!(value,+%22Hello,+World!%22);%0A++++assert!(cell.get().is_some());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OnceCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#38\">source</a><a href=\"#impl-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const since 1.70.0\">1.70.0 (const: 1.70.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#44\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty cell.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#53\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the reference to the underlying value.</p>\n<p>Returns <code>None</code> if the cell is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#63\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the mutable reference to the underlying value.</p>\n<p>Returns <code>None</code> if the cell is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#89\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set\" class=\"fn\">set</a>(&amp;self, value: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the contents of the cell to <code>value</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This method returns <code>Ok(())</code> if the cell was empty and <code>Err(value)</code> if\nit was full.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n\n<span class=\"macro\">assert_eq!</span>(cell.set(<span class=\"number\">92</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(cell.set(<span class=\"number\">62</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">62</span>));\n\n<span class=\"macro\">assert!</span>(cell.get().is_some());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++assert_eq!(cell.set(92),+Ok(()));%0A++++assert_eq!(cell.set(62),+Err(62));%0A++++%0A++++assert!(cell.get().is_some());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#121\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_insert\" class=\"fn\">try_insert</a>(&amp;self, value: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, T)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>once_cell_try_insert</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116693\">#116693</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the contents of the cell to <code>value</code> if the cell was empty, then\nreturns a reference to it.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This method returns <code>Ok(&amp;value)</code> if the cell was empty and\n<code>Err(&amp;current_value, value)</code> if it was full.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_try_insert)]\n\n</span><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n\n<span class=\"macro\">assert_eq!</span>(cell.try_insert(<span class=\"number\">92</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n<span class=\"macro\">assert_eq!</span>(cell.try_insert(<span class=\"number\">62</span>), <span class=\"prelude-val\">Err</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>, <span class=\"number\">62</span>)));\n\n<span class=\"macro\">assert!</span>(cell.get().is_some());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try_insert)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert!(cell.get().is_none());%0A++++%0A++++assert_eq!(cell.try_insert(92),+Ok(%2692));%0A++++assert_eq!(cell.try_insert(62),+Err((%2692,+62)));%0A++++%0A++++assert!(cell.get().is_some());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_init\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#158-160\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_init\" class=\"fn\">get_or_init</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Gets the contents of the cell, initializing it with <code>f</code>\nif the cell was empty.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<p>It is an error to reentrantly initialize the cell from <code>f</code>. Doing\nso results in a panic.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\n<span class=\"kw\">let </span>value = cell.get_or_init(|| <span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"kw\">let </span>value = cell.get_or_init(|| <span class=\"macro\">unreachable!</span>());\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++let+value+=+cell.get_or_init(%7C%7C+92);%0A++++assert_eq!(value,+%2692);%0A++++let+value+=+cell.get_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(value,+%2692);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut_or_init\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#194-196\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut_or_init\" class=\"fn\">get_mut_or_init</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>once_cell_get_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121641\">#121641</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the mutable reference of the contents of the cell,\ninitializing it with <code>f</code> if the cell was empty.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_get_mut)]\n\n</span><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell = OnceCell::new();\n<span class=\"kw\">let </span>value = cell.get_mut_or_init(|| <span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">92</span>);\n\n<span class=\"kw-2\">*</span>value += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">94</span>);\n\n<span class=\"kw\">let </span>value = cell.get_mut_or_init(|| <span class=\"macro\">unreachable!</span>());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">94</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell+=+OnceCell::new();%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+92);%0A++++assert_eq!(*value,+92);%0A++++%0A++++*value+%2B=+2;%0A++++assert_eq!(*value,+94);%0A++++%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(*value,+94);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_try_init\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#232-234\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_try_init\" class=\"fn\">get_or_try_init</a>&lt;F, E&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>once_cell_try</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/109737\">#109737</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the contents of the cell, initializing it with <code>f</code> if\nthe cell was empty. If the cell was empty and <code>f</code> failed, an\nerror is returned.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<p>It is an error to reentrantly initialize the cell from <code>f</code>. Doing\nso results in a panic.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_try)]\n\n</span><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\n<span class=\"macro\">assert_eq!</span>(cell.get_or_try_init(|| <span class=\"prelude-val\">Err</span>(())), <span class=\"prelude-val\">Err</span>(()));\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n<span class=\"kw\">let </span>value = cell.get_or_try_init(|| -&gt; <span class=\"prelude-ty\">Result</span>&lt;i32, ()&gt; {\n    <span class=\"prelude-val\">Ok</span>(<span class=\"number\">92</span>)\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++assert_eq!(cell.get_or_try_init(%7C%7C+Err(())),+Err(()));%0A++++assert!(cell.get().is_none());%0A++++let+value+=+cell.get_or_try_init(%7C%7C+-%3E+Result%3Ci32,+()%3E+%7B%0A++++++++Ok(92)%0A++++%7D);%0A++++assert_eq!(value,+Ok(%2692));%0A++++assert_eq!(cell.get(),+Some(%2692))%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut_or_try_init\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#270-272\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut_or_try_init\" class=\"fn\">get_mut_or_try_init</a>&lt;F, E&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>once_cell_get_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121641\">#121641</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the mutable reference of the contents of the cell, initializing\nit with <code>f</code> if the cell was empty. If the cell was empty and <code>f</code> failed,\nan error is returned.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_get_mut)]\n\n</span><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell: OnceCell&lt;u32&gt; = OnceCell::new();\n\n<span class=\"comment\">// Failed initializers do not change the value\n</span><span class=\"macro\">assert!</span>(cell.get_mut_or_try_init(|| <span class=\"string\">\"not a number!\"</span>.parse()).is_err());\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n\n<span class=\"kw\">let </span>value = cell.get_mut_or_try_init(|| <span class=\"string\">\"1234\"</span>.parse());\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">1234</span>));\n<span class=\"kw-2\">*</span>value.unwrap() += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1236</span>))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell:+OnceCell%3Cu32%3E+=+OnceCell::new();%0A++++%0A++++//+Failed+initializers+do+not+change+the+value%0A++++assert!(cell.get_mut_or_try_init(%7C%7C+%22not+a+number!%22.parse()).is_err());%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value+=+cell.get_mut_or_try_init(%7C%7C+%221234%22.parse());%0A++++assert_eq!(value,+Ok(%26mut+1234));%0A++++*value.unwrap()+%2B=+2;%0A++++assert_eq!(cell.get(),+Some(%261236))%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#313\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes the cell, returning the wrapped value.</p>\n<p>Returns <code>None</code> if the cell was empty.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span>cell: OnceCell&lt;String&gt; = OnceCell::new();\n<span class=\"macro\">assert_eq!</span>(cell.into_inner(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>cell = OnceCell::new();\ncell.set(<span class=\"string\">\"hello\"</span>.to_string()).unwrap();\n<span class=\"macro\">assert_eq!</span>(cell.into_inner(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hello\"</span>.to_string()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+cell:+OnceCell%3CString%3E+=+OnceCell::new();%0A++++assert_eq!(cell.into_inner(),+None);%0A++++%0A++++let+cell+=+OnceCell::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.into_inner(),+Some(%22hello%22.to_string()));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#340\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of this <code>OnceCell</code>, moving it back to an uninitialized state.</p>\n<p>Has no effect and returns <code>None</code> if the <code>OnceCell</code> hasn’t been initialized.</p>\n<p>Safety is guaranteed by requiring a mutable reference.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::OnceCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell: OnceCell&lt;String&gt; = OnceCell::new();\n<span class=\"macro\">assert_eq!</span>(cell.take(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell = OnceCell::new();\ncell.set(<span class=\"string\">\"hello\"</span>.to_string()).unwrap();\n<span class=\"macro\">assert_eq!</span>(cell.take(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hello\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::OnceCell;%0A++++%0A++++let+mut+cell:+OnceCell%3CString%3E+=+OnceCell::new();%0A++++assert_eq!(cell.take(),+None);%0A++++%0A++++let+mut+cell+=+OnceCell::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.take(),+Some(%22hello%22.to_string()));%0A++++assert_eq!(cell.get(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#366\">source</a></span><a href=\"#impl-Clone-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#368\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#354\">source</a></span><a href=\"#impl-Debug-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#355\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#346\">source</a></span><a href=\"#impl-Default-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#348\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#392\">source</a></span><a href=\"#impl-From%3CT%3E-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#395\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: T) -&gt; <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>OnceCell&lt;T&gt;</code> which already contains the given <code>value</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#381\">source</a></span><a href=\"#impl-PartialEq-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#383\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Eq-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#389\">source</a></span><a href=\"#impl-Eq-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-Sync-for-OnceCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/once.rs.html#402\">source</a></span><a href=\"#impl-Sync-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-OnceCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-OnceCell%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;</h3></section><section id=\"impl-Send-for-OnceCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Unpin-for-OnceCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-OnceCell%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-OnceCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.OnceCell.html\" title=\"struct std::cell::OnceCell\">OnceCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:49.744Z"
}