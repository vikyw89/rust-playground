{
	"title": "Types - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/types.html",
	"markdown": "# Types - The Rust Reference\n\nEvery variable, item, and value in a Rust program has a type. The _type_ of a _value_ defines the interpretation of the memory holding it and the operations that may be performed on the value.\n\nBuilt-in types are tightly integrated into the language, in nontrivial ways that are not possible to emulate in user-defined types. User-defined types have limited capabilities.\n\nThe list of types is:\n\n-   Primitive types:\n    -   [Boolean](types/boolean.html) — `bool`\n    -   [Numeric](types/numeric.html) — integer and float\n    -   [Textual](types/textual.html) — `char` and `str`\n    -   [Never](types/never.html) — `!` — a type with no values\n-   Sequence types:\n    -   [Tuple](types/tuple.html)\n    -   [Array](types/array.html)\n    -   [Slice](types/slice.html)\n-   User-defined types:\n    -   [Struct](types/struct.html)\n    -   [Enum](types/enum.html)\n    -   [Union](types/union.html)\n-   Function types:\n    -   [Functions](types/function-item.html)\n    -   [Closures](types/closure.html)\n-   Pointer types:\n    -   [References](about:blank/types/pointer.html#shared-references-)\n    -   [Raw pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut)\n    -   [Function pointers](types/function-pointer.html)\n-   Trait types:\n    -   [Trait objects](types/trait-object.html)\n    -   [Impl trait](types/impl-trait.html)\n\n## [Type expressions](#type-expressions)\n\n> **Syntax**  \n> _Type_ :  \n>       _TypeNoBounds_  \n>    | [_ImplTraitType_](types/impl-trait.html)  \n>    | [_TraitObjectType_](types/trait-object.html)\n> \n> _TypeNoBounds_ :  \n>       [_ParenthesizedType_](about:blank/types.html#parenthesized-types)  \n>    | [_ImplTraitTypeOneBound_](types/impl-trait.html)  \n>    | [_TraitObjectTypeOneBound_](types/trait-object.html)  \n>    | [_TypePath_](about:blank/paths.html#paths-in-types)  \n>    | [_TupleType_](about:blank/types/tuple.html#tuple-types)  \n>    | [_NeverType_](types/never.html)  \n>    | [_RawPointerType_](about:blank/types/pointer.html#raw-pointers-const-and-mut)  \n>    | [_ReferenceType_](about:blank/types/pointer.html#shared-references-)  \n>    | [_ArrayType_](types/array.html)  \n>    | [_SliceType_](types/slice.html)  \n>    | [_InferredType_](types/inferred.html)  \n>    | [_QualifiedPathInType_](about:blank/paths.html#qualified-paths)  \n>    | [_BareFunctionType_](types/function-pointer.html)  \n>    | [_MacroInvocation_](about:blank/macros.html#macro-invocation)\n\nA _type expression_ as defined in the _Type_ grammar rule above is the syntax for referring to a type. It may refer to:\n\n-   Sequence types ([tuple](types/tuple.html), [array](types/array.html), [slice](types/slice.html)).\n-   [Type paths](about:blank/paths.html#paths-in-types) which can reference:\n    -   Primitive types ([boolean](types/boolean.html), [numeric](types/numeric.html), [textual](types/textual.html)).\n    -   Paths to an [item](items.html) ([struct](types/struct.html), [enum](types/enum.html), [union](types/union.html), [type alias](items/type-aliases.html), [trait](types/trait-object.html)).\n    -   [`Self` path](about:blank/paths.html#self-1) where `Self` is the implementing type.\n    -   Generic [type parameters](types/parameters.html).\n-   Pointer types ([reference](about:blank/types/pointer.html#shared-references-), [raw pointer](about:blank/types/pointer.html#raw-pointers-const-and-mut), [function pointer](types/function-pointer.html)).\n-   The [inferred type](types/inferred.html) which asks the compiler to determine the type.\n-   [Parentheses](#parenthesized-types) which are used for disambiguation.\n-   Trait types: [Trait objects](types/trait-object.html) and [impl trait](types/impl-trait.html).\n-   The [never](types/never.html) type.\n-   [Macros](macros.html) which expand to a type expression.\n\n### [Parenthesized types](#parenthesized-types)\n\n> _ParenthesizedType_ :  \n>    `(` [_Type_](about:blank/types.html#type-expressions) `)`\n\nIn some situations the combination of types may be ambiguous. Use parentheses around a type to avoid ambiguity. For example, the `+` operator for [type boundaries](trait-bounds.html) within a [reference type](about:blank/types/pointer.html#shared-references-) is unclear where the boundary applies, so the use of parentheses is required. Grammar rules that require this disambiguation use the [_TypeNoBounds_](about:blank/types.html#type-expressions) rule instead of [_Type_](about:blank/types.html#type-expressions).\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::any::Any;\ntype T<'a> = &'a (dyn Any + Send);\n}\n```\n\n## [Recursive types](#recursive-types)\n\nNominal types — [structs](types/struct.html), [enumerations](types/enum.html), and [unions](types/union.html) — may be recursive. That is, each `enum` variant or `struct` or `union` field may refer, directly or indirectly, to the enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n\n-   Recursive types must include a nominal type in the recursion (not mere [type aliases](items/type-aliases.html), or other structural types such as [arrays](types/array.html) or [tuples](types/tuple.html)). So `type Rec = &'static [Rec]` is not allowed.\n-   The size of a recursive type must be finite; in other words the recursive fields of the type must be [pointer types](types/pointer.html).\n\nAn example of a _recursive_ type and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum List<T> {\n    Nil,\n    Cons(T, Box<List<T>>)\n}\n\nlet a: List<i32> = List::Cons(7, Box::new(List::Cons(13, Box::new(List::Nil))));\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Types - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/types.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <script>\n(function() {\n    var fragments = {\n        \"#boolean-type\": \"types/boolean.html\",\n        \"#numeric-types\": \"types/numeric.html\",\n        \"#machine-types\": \"types/numeric.html\",\n        \"#machine-dependent-integer-types\": \"types/numeric.html#machine-dependent-integer-types\",\n        \"#textual-types\": \"types/textual.html\",\n        \"#never-type\": \"types/never.html\",\n        \"#tuple-types\": \"types/tuple.html\",\n        \"#array-and-slice-types\": \"types/array.html\",\n        \"#struct-types\": \"types/struct.html\",\n        \"#enumerated-types\": \"types/enum.html\",\n        \"#union-types\": \"types/union.html\",\n        \"#pointer-types\": \"types/pointer.html\",\n        \"#shared-references-\": \"types/pointer.html#shared-references-\",\n        \"#mutable-references-\": \"types/pointer.html#mutable-references-mut\",\n        \"#raw-pointers-const-and-mut\": \"types/pointer.html#raw-pointers-const-and-mut\",\n        \"#smart-pointers\": \"types/pointer.html#smart-pointers\",\n        \"#function-item-types\": \"types/function-item.html\",\n        \"#function-pointer-types\": \"types/function-pointer.html\",\n        \"#closure-types\": \"types/closure.html\",\n        \"#capture-modes\": \"types/closure.html#capture-modes\",\n        \"#unique-immutable-borrows-in-captures\": \"types/closure.html#unique-immutable-borrows-in-captures\",\n        \"#call-traits-and-coercions\": \"types/closure.html#call-traits-and-coercions\",\n        \"#other-traits\": \"types/closure.html#other-traits\",\n        \"#trait-objects\": \"types/trait-object.html\",\n        \"#trait-object-lifetime-bounds\": \"types/trait-object.html#trait-object-lifetime-bounds\",\n        \"#impl-trait\": \"types/impl-trait.html\",\n        \"#anonymous-type-parameters\": \"types/impl-trait.html#anonymous-type-parameters\",\n        \"#abstract-return-types\": \"types/impl-trait.html#abstract-return-types\",\n        \"#self-types\": \"paths.html#self-1\",\n        \"#inferred-type\": \"types/inferred.html\",\n        \"#type-parameters\": \"types/parameters.html\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n<h1 id=\"types\"><a class=\"header\" href=\"#types\">Types</a></h1>\n<p>Every variable, item, and value in a Rust program has a type. The <em>type</em> of a\n<em>value</em> defines the interpretation of the memory holding it and the operations\nthat may be performed on the value.</p>\n<p>Built-in types are tightly integrated into the language, in nontrivial ways\nthat are not possible to emulate in user-defined types. User-defined types have\nlimited capabilities.</p>\n<p>The list of types is:</p>\n<ul>\n<li>Primitive types:\n<ul>\n<li><a href=\"types/boolean.html\">Boolean</a> — <code class=\"hljs\">bool</code></li>\n<li><a href=\"types/numeric.html\">Numeric</a> — integer and float</li>\n<li><a href=\"types/textual.html\">Textual</a> — <code class=\"hljs\">char</code> and <code class=\"hljs\">str</code></li>\n<li><a href=\"types/never.html\">Never</a> — <code class=\"hljs\">!</code> — a type with no values</li>\n</ul>\n</li>\n<li>Sequence types:\n<ul>\n<li><a href=\"types/tuple.html\">Tuple</a></li>\n<li><a href=\"types/array.html\">Array</a></li>\n<li><a href=\"types/slice.html\">Slice</a></li>\n</ul>\n</li>\n<li>User-defined types:\n<ul>\n<li><a href=\"types/struct.html\">Struct</a></li>\n<li><a href=\"types/enum.html\">Enum</a></li>\n<li><a href=\"types/union.html\">Union</a></li>\n</ul>\n</li>\n<li>Function types:\n<ul>\n<li><a href=\"types/function-item.html\">Functions</a></li>\n<li><a href=\"types/closure.html\">Closures</a></li>\n</ul>\n</li>\n<li>Pointer types:\n<ul>\n<li><a href=\"types/pointer.html#shared-references-\">References</a></li>\n<li><a href=\"types/pointer.html#raw-pointers-const-and-mut\">Raw pointers</a></li>\n<li><a href=\"types/function-pointer.html\">Function pointers</a></li>\n</ul>\n</li>\n<li>Trait types:\n<ul>\n<li><a href=\"types/trait-object.html\">Trait objects</a></li>\n<li><a href=\"types/impl-trait.html\">Impl trait</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"type-expressions\"><a class=\"header\" href=\"#type-expressions\">Type expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Type</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>TypeNoBounds</em><br>\n&nbsp;&nbsp; | <a href=\"types/impl-trait.html\"><em>ImplTraitType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/trait-object.html\"><em>TraitObjectType</em></a></p>\n<p><em>TypeNoBounds</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"types.html#parenthesized-types\"><em>ParenthesizedType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/impl-trait.html\"><em>ImplTraitTypeOneBound</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/trait-object.html\"><em>TraitObjectTypeOneBound</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#paths-in-types\"><em>TypePath</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/tuple.html#tuple-types\"><em>TupleType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/never.html\"><em>NeverType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/pointer.html#raw-pointers-const-and-mut\"><em>RawPointerType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/pointer.html#shared-references-\"><em>ReferenceType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/array.html\"><em>ArrayType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/slice.html\"><em>SliceType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/inferred.html\"><em>InferredType</em></a><br>\n&nbsp;&nbsp; | <a href=\"paths.html#qualified-paths\"><em>QualifiedPathInType</em></a><br>\n&nbsp;&nbsp; | <a href=\"types/function-pointer.html\"><em>BareFunctionType</em></a><br>\n&nbsp;&nbsp; | <a href=\"macros.html#macro-invocation\"><em>MacroInvocation</em></a></p>\n</blockquote>\n<p>A <em>type expression</em> as defined in the <em>Type</em> grammar rule above is the syntax\nfor referring to a type. It may refer to:</p>\n<ul>\n<li>Sequence types (<a href=\"types/tuple.html\">tuple</a>, <a href=\"types/array.html\">array</a>, <a href=\"types/slice.html\">slice</a>).</li>\n<li><a href=\"paths.html#paths-in-types\">Type paths</a> which can reference:\n<ul>\n<li>Primitive types (<a href=\"types/boolean.html\">boolean</a>, <a href=\"types/numeric.html\">numeric</a>, <a href=\"types/textual.html\">textual</a>).</li>\n<li>Paths to an <a href=\"items.html\">item</a> (<a href=\"types/struct.html\">struct</a>, <a href=\"types/enum.html\">enum</a>, <a href=\"types/union.html\">union</a>, <a href=\"items/type-aliases.html\">type alias</a>, <a href=\"types/trait-object.html\">trait</a>).</li>\n<li><a href=\"paths.html#self-1\"><code class=\"hljs\">Self</code> path</a> where <code class=\"hljs\">Self</code> is the implementing type.</li>\n<li>Generic <a href=\"types/parameters.html\">type parameters</a>.</li>\n</ul>\n</li>\n<li>Pointer types (<a href=\"types/pointer.html#shared-references-\">reference</a>, <a href=\"types/pointer.html#raw-pointers-const-and-mut\">raw pointer</a>, <a href=\"types/function-pointer.html\">function pointer</a>).</li>\n<li>The <a href=\"types/inferred.html\">inferred type</a> which asks the compiler to determine the type.</li>\n<li><a href=\"#parenthesized-types\">Parentheses</a> which are used for disambiguation.</li>\n<li>Trait types: <a href=\"types/trait-object.html\">Trait objects</a> and <a href=\"types/impl-trait.html\">impl trait</a>.</li>\n<li>The <a href=\"types/never.html\">never</a> type.</li>\n<li><a href=\"macros.html\">Macros</a> which expand to a type expression.</li>\n</ul>\n<h3 id=\"parenthesized-types\"><a class=\"header\" href=\"#parenthesized-types\">Parenthesized types</a></h3>\n<blockquote>\n<p><em>ParenthesizedType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">)</code></p>\n</blockquote>\n<p>In some situations the combination of types may be ambiguous. Use parentheses\naround a type to avoid ambiguity. For example, the <code class=\"hljs\">+</code> operator for <a href=\"trait-bounds.html\">type\nboundaries</a> within a <a href=\"types/pointer.html#shared-references-\">reference type</a> is unclear where the\nboundary applies, so the use of parentheses is required. Grammar rules that\nrequire this disambiguation use the <a href=\"types.html#type-expressions\"><em>TypeNoBounds</em></a> rule instead of\n<a href=\"types.html#type-expressions\"><em>Type</em></a>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::any::Any;\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">T</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; = &amp;<span class=\"hljs-symbol\">'a</span> (<span class=\"hljs-keyword\">dyn</span> Any + <span class=\"hljs-built_in\">Send</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"recursive-types\"><a class=\"header\" href=\"#recursive-types\">Recursive types</a></h2>\n<p>Nominal types — <a href=\"types/struct.html\">structs</a>, <a href=\"types/enum.html\">enumerations</a>, and <a href=\"types/union.html\">unions</a> — may be\nrecursive. That is, each <code class=\"hljs\">enum</code> variant or <code class=\"hljs\">struct</code> or <code class=\"hljs\">union</code> field may\nrefer, directly or indirectly, to the enclosing <code class=\"hljs\">enum</code> or <code class=\"hljs\">struct</code> type\nitself. Such recursion has restrictions:</p>\n<ul>\n<li>Recursive types must include a nominal type in the recursion (not mere <a href=\"items/type-aliases.html\">type\naliases</a>, or other structural types such as <a href=\"types/array.html\">arrays</a> or <a href=\"types/tuple.html\">tuples</a>). So <code class=\"hljs\">type Rec = &amp;'static [Rec]</code> is not allowed.</li>\n<li>The size of a recursive type must be finite; in other words the recursive\nfields of the type must be <a href=\"types/pointer.html\">pointer types</a>.</li>\n</ul>\n<p>An example of a <em>recursive</em> type and its use:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span>&lt;T&gt; {\n    Nil,\n    Cons(T, <span class=\"hljs-built_in\">Box</span>&lt;List&lt;T&gt;&gt;)\n}\n\n<span class=\"hljs-keyword\">let</span> a: List&lt;<span class=\"hljs-built_in\">i32</span>&gt; = List::Cons(<span class=\"hljs-number\">7</span>, <span class=\"hljs-built_in\">Box</span>::new(List::Cons(<span class=\"hljs-number\">13</span>, <span class=\"hljs-built_in\">Box</span>::new(List::Nil))));\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"type-system.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"types/boolean.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"type-system.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"types/boolean.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:13.691Z"
}