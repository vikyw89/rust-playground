{
	"title": "Stderr in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/struct.Stderr.html",
	"markdown": "# Stderr in std::io - Rust\n\n## Struct [std](../index.html)::[io](index.html)::[Stderr](#)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#845-847) ·\n\n```\npub struct Stderr { /* private fields */ }\n```\n\nExpand description\n\nA handle to the standard error stream of a process.\n\nFor more information, see the [`io::stderr`](fn.stderr.html \"fn std::io::stderr\") method.\n\n#### [§](#note-windows-portability-considerations)Note: Windows Portability Considerations\n\nWhen operating in a console, the Windows implementation of this stream does not support non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return an error.\n\nIn a process with a detached console, such as one using `#![windows_subsystem = \"windows\"]`, or in a child process spawned from such a process, the contained handle will be null. In such cases, the standard library’s `Read` and `Write` will do nothing and silently succeed. All other I/O operations, via the standard library or via raw Windows API calls, will fail.\n\n[source](about:blank/src/std/io/stdio.rs.html#928-956)[§](#impl-Stderr)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#950-955)\n\nLocks this handle to the standard error stream, returning a writable guard.\n\nThe lock is released when the returned lock goes out of scope. The returned guard also implements the [`Write`](trait.Write.html \"trait std::io::Write\") trait for writing data.\n\n##### [§](#examples)Examples\n\n```\nuse std::io::{self, Write};\n\nfn foo() -> io::Result<()> {\n    let stderr = io::stderr();\n    let mut handle = stderr.lock();\n\n    handle.write_all(b\"hello world\")?;\n\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++fn+foo()+-%3E+io::Result%3C()%3E+%7B%0A++++++++let+stderr+=+io::stderr();%0A++++++++let+mut+handle+=+stderr.lock();%0A++++%0A++++++++handle.write_all(b%22hello+world%22)?;%0A++++%0A++++++++Ok(())%0A++++%7D%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#465-470)[§](#impl-AsFd-for-Stderr)\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#580-585)[§](#impl-AsHandle-for-Stderr)\n\nAvailable on **Windows** only.\n\n1.21.0 · [source](about:blank/src/std/os/fd/raw.rs.html#206-211)[§](#impl-AsRawFd-for-Stderr)\n\n1.21.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#119-123)[§](#impl-AsRawHandle-for-Stderr)\n\nAvailable on **Windows** only.\n\n1.16.0 · [source](about:blank/src/std/io/stdio.rs.html#965-969)[§](#impl-Debug-for-Stderr)\n\n1.74.0 · [source](about:blank/src/std/process.rs.html#1624-1650)[§](#impl-From%3CStderr%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1647-1649)[§](#method.from)\n\nRedirect command stdout/stderr to our stderr\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(exit_status_error)]\nuse std::io;\nuse std::process::Command;\n\nlet output = Command::new(\"whoami\")\n    .stdout(io::stderr())\n    .output()?;\noutput.status.exit_ok()?;\nassert!(output.stdout.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stderr())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/io/stdio.rs.html#1217)[§](#impl-IsTerminal-for-Stderr)\n\n[source](about:blank/src/std/io/stdio.rs.html#1217)[§](#method.is_terminal)\n\nReturns `true` if the descriptor/handle refers to a terminal/tty. [Read more](about:blank/trait.IsTerminal.html#tymethod.is_terminal)\n\n1.48.0 · [source](about:blank/src/std/io/stdio.rs.html#998-1021)[§](#impl-Write-for-%26Stderr)\n\n[source](about:blank/src/std/io/stdio.rs.html#999-1001)[§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/stdio.rs.html#1002-1004)[§](#method.write_vectored)\n\nLike [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#1006-1008)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/stdio.rs.html#1009-1011)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/stdio.rs.html#1012-1014)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/stdio.rs.html#1015-1017)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/trait.Write.html#method.write_all_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#1018-1020)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/trait.Write.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#972-995)[§](#impl-Write-for-Stderr)\n\n[source](about:blank/src/std/io/stdio.rs.html#973-975)[§](#method.write-1)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/stdio.rs.html#976-978)[§](#method.write_vectored-1)\n\nLike [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#980-982)[§](#method.is_write_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/stdio.rs.html#983-985)[§](#method.flush-1)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/stdio.rs.html#986-988)[§](#method.write_all-1)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/stdio.rs.html#989-991)[§](#method.write_all_vectored-1)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/trait.Write.html#method.write_all_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#992-994)[§](#method.write_fmt-1)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-1)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/trait.Write.html#method.by_ref)\n\n1.9.0 · [source](about:blank/src/std/io/stdio.rs.html#962)[§](#impl-RefUnwindSafe-for-Stderr)\n\n1.9.0 · [source](about:blank/src/std/io/stdio.rs.html#959)[§](#impl-UnwindSafe-for-Stderr)\n\n[§](#impl-Freeze-for-Stderr)\n\n[§](#impl-Send-for-Stderr)\n\n[§](#impl-Sync-for-Stderr)\n\n[§](#impl-Unpin-for-Stderr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A handle to the standard error stream of a process.\"><title>Stderr in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Stderr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Stderr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.lock\">lock</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-Stderr\">AsFd</a></li><li><a href=\"#impl-AsHandle-for-Stderr\">AsHandle</a></li><li><a href=\"#impl-AsRawFd-for-Stderr\">AsRawFd</a></li><li><a href=\"#impl-AsRawHandle-for-Stderr\">AsRawHandle</a></li><li><a href=\"#impl-Debug-for-Stderr\">Debug</a></li><li><a href=\"#impl-From%3CStderr%3E-for-Stdio\">From&lt;Stderr&gt;</a></li><li><a href=\"#impl-IsTerminal-for-Stderr\">IsTerminal</a></li><li><a href=\"#impl-RefUnwindSafe-for-Stderr\">RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-Stderr\">UnwindSafe</a></li><li><a href=\"#impl-Write-for-%26Stderr\">Write</a></li><li><a href=\"#impl-Write-for-Stderr\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Stderr\">Freeze</a></li><li><a href=\"#impl-Send-for-Stderr\">Send</a></li><li><a href=\"#impl-Sync-for-Stderr\">Sync</a></li><li><a href=\"#impl-Unpin-for-Stderr\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"struct\" href=\"#\">Stderr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#845-847\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Stderr { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A handle to the standard error stream of a process.</p>\n<p>For more information, see the <a href=\"fn.stderr.html\" title=\"fn std::io::stderr\"><code>io::stderr</code></a> method.</p>\n<h4 id=\"note-windows-portability-considerations\"><a class=\"doc-anchor\" href=\"#note-windows-portability-considerations\">§</a>Note: Windows Portability Considerations</h4>\n<p>When operating in a console, the Windows implementation of this stream does not support\nnon-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\nan error.</p>\n<p>In a process with a detached console, such as one using\n<code>#![windows_subsystem = \"windows\"]</code>, or in a child process spawned from such a process,\nthe contained handle will be null. In such cases, the standard library’s <code>Read</code> and\n<code>Write</code> will do nothing and silently succeed. All other I/O operations, via the\nstandard library or via raw Windows API calls, will fail.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Stderr\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#928-956\">source</a><a href=\"#impl-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#950-955\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.StderrLock.html\" title=\"struct std::io::StderrLock\">StderrLock</a>&lt;'static&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StderrLock<'static>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Locks this handle to the standard error stream, returning a writable\nguard.</p>\n<p>The lock is released when the returned lock goes out of scope. The\nreturned guard also implements the <a href=\"trait.Write.html\" title=\"trait std::io::Write\"><code>Write</code></a> trait for writing data.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n\n<span class=\"kw\">fn </span>foo() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>stderr = io::stderr();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>handle = stderr.lock();\n\n    handle.write_all(<span class=\"string\">b\"hello world\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++%0A++++fn+foo()+-%3E+io::Result%3C()%3E+%7B%0A++++++++let+stderr+=+io::stderr();%0A++++++++let+mut+handle+=+stderr.lock();%0A++++%0A++++++++handle.write_all(b%22hello+world%22)?;%0A++++%0A++++++++Ok(())%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#465-470\">source</a></span><a href=\"#impl-AsFd-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#467-469\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#580-585\">source</a></span><a href=\"#impl-AsHandle-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#582-584\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#206-211\">source</a></span><a href=\"#impl-AsRawFd-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#208-210\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawHandle-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#119-123\">source</a></span><a href=\"#impl-AsRawHandle-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#120-122\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Extracts the raw handle. <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#965-969\">source</a></span><a href=\"#impl-Debug-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#966-968\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CStderr%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1624-1650\">source</a></span><a href=\"#impl-From%3CStderr%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a>&gt; for <a class=\"struct\" href=\"../process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1647-1649\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(inherit: <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a>) -&gt; <a class=\"struct\" href=\"../process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Redirect command stdout/stderr to our stderr</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exit_status_error)]\n</span><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"whoami\"</span>)\n    .stdout(io::stderr())\n    .output()<span class=\"question-mark\">?</span>;\noutput.status.exit_ok()<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert!</span>(output.stdout.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exit_status_error)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::process::Command;%0A++++%0A++++fn+test()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error%3E%3E+%7B%0A++++let+output+=+Command::new(%22whoami%22)%0A++++++++.stdout(io::stderr())%0A++++++++.output()?;%0A++++output.status.exit_ok()?;%0A++++assert!(output.stdout.is_empty());%0A++++Ok(())%0A++++%7D%0A++++%0A++++if+cfg!(unix)+%7B%0A++++++++test().unwrap();%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IsTerminal-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_terminal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a><a href=\"#method.is_terminal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.IsTerminal.html#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if the descriptor/handle refers to a terminal/tty. <a href=\"trait.IsTerminal.html#tymethod.is_terminal\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-%26Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#998-1021\">source</a></span><a href=\"#impl-Write-for-%26Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#999-1001\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1002-1004\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1006-1008\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1009-1011\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1012-1014\">source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1015-1017\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1018-1020\">source</a><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#972-995\">source</a></span><a href=\"#impl-Write-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#973-975\">source</a><a href=\"#method.write-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#976-978\">source</a><a href=\"#method.write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#980-982\">source</a><a href=\"#method.is_write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#983-985\">source</a><a href=\"#method.flush-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#986-988\">source</a><a href=\"#method.write_all-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#989-991\">source</a><a href=\"#method.write_all_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#992-994\">source</a><a href=\"#method.write_fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><section id=\"impl-RefUnwindSafe-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#962\">source</a></span><a href=\"#impl-RefUnwindSafe-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-UnwindSafe-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#959\">source</a></span><a href=\"#impl-UnwindSafe-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Stderr\" class=\"impl\"><a href=\"#impl-Freeze-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-Send-for-Stderr\" class=\"impl\"><a href=\"#impl-Send-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-Sync-for-Stderr\" class=\"impl\"><a href=\"#impl-Sync-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-Unpin-for-Stderr\" class=\"impl\"><a href=\"#impl-Unpin-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"StderrLock<'static>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.StderrLock.html\\\" title=\\\"struct std::io::StderrLock\\\">StderrLock</a>&lt;'_&gt;</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.StderrLock.html\\\" title=\\\"struct std::io::StderrLock\\\">StderrLock</a>&lt;'_&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:27.677Z"
}