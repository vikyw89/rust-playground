{
	"title": "FnMut in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.FnMut.html",
	"markdown": "# FnMut in std::ops - Rust\n\n## Trait [std](../index.html)::[ops](index.html)::[FnMut](#)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#163) Â·\n\n```\npub trait FnMut<Args>: FnOnce<Args>where\n    Args: Tuple,{\n    // Required method\n    extern \"rust-call\" fn call_mut(\n        &mut self,\n        args: Args,\n    ) -> Self::Output;\n}\n```\n\nExpand description\n\nThe version of the call operator that takes a mutable receiver.\n\nInstances of `FnMut` can be called repeatedly and may mutate state.\n\n`FnMut` is implemented automatically by closures which take mutable references to captured variables, as well as all types that implement [`Fn`](trait.Fn.html \"trait std::ops::Fn\"), e.g., (safe) [function pointers](../primitive.fn.html \"primitive fn\") (since `FnMut` is a supertrait of [`Fn`](trait.Fn.html \"trait std::ops::Fn\")). Additionally, for any type `F` that implements `FnMut`, `&mut F` implements `FnMut`, too.\n\nSince [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") is a supertrait of `FnMut`, any instance of `FnMut` can be used where a [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\") is expected, and since [`Fn`](trait.Fn.html \"trait std::ops::Fn\") is a subtrait of `FnMut`, any instance of [`Fn`](trait.Fn.html \"trait std::ops::Fn\") can be used where `FnMut` is expected.\n\nUse `FnMut` as a bound when you want to accept a parameter of function-like type and need to call it repeatedly, while allowing it to mutate state. If you donâ€™t want the parameter to mutate state, use [`Fn`](trait.Fn.html \"trait std::ops::Fn\") as a bound; if you donâ€™t need to call it repeatedly, use [`FnOnce`](trait.FnOnce.html \"trait std::ops::FnOnce\").\n\nSee the [chapter on closures in _The Rust Programming Language_](../../book/ch13-01-closures.html) for some more information on this topic.\n\nAlso of note is the special syntax for `Fn` traits (e.g. `Fn(usize, bool) -> usize`). Those interested in the technical details of this can refer to [the relevant section in the _Rustonomicon_](../../nomicon/hrtb.html).\n\n## [Â§](#examples)Examples\n\n### [Â§](#calling-a-mutably-capturing-closure)Calling a mutably capturing closure\n\n```\nlet mut x = 5;\n{\n    let mut square_x = || x *= x;\n    square_x();\n}\nassert_eq!(x, 25);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+5;%0A++++%7B%0A++++++++let+mut+square_x+=+%7C%7C+x+*=+x;%0A++++++++square_x();%0A++++%7D%0A++++assert_eq!(x,+25);%0A%7D&edition=2021)\n\n### [Â§](#using-a-fnmut-parameter)Using a `FnMut` parameter\n\n```\nfn do_twice<F>(mut func: F)\n    where F: FnMut()\n{\n    func();\n    func();\n}\n\nlet mut x: usize = 1;\n{\n    let add_two_to_x = || x += 2;\n    do_twice(add_two_to_x);\n}\n\nassert_eq!(x, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+do_twice%3CF%3E(mut+func:+F)%0A++++++++where+F:+FnMut()%0A++++%7B%0A++++++++func();%0A++++++++func();%0A++++%7D%0A++++%0A++++let+mut+x:+usize+=+1;%0A++++%7B%0A++++++++let+add_two_to_x+=+%7C%7C+x+%2B=+2;%0A++++++++do_twice(add_two_to_x);%0A++++%7D%0A++++%0A++++assert_eq!(x,+5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#166)\n\nðŸ”¬This is a nightly-only experimental API. (`fn_traits`Â [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The version of the call operator that takes a mutable receiver.\"><title>FnMut in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FnMut</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FnMut</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.call_mut\">call_mut</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">FnMut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#163\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait FnMut&lt;Args&gt;: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,</div>{\n    // Required method\n    extern \"rust-call\" fn <a href=\"#tymethod.call_mut\" class=\"fn\">call_mut</a>(\n        &amp;mut self,\n        args: Args,\n    ) -&gt; Self::<a class=\"associatedtype\" href=\"trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The version of the call operator that takes a mutable receiver.</p>\n<p>Instances of <code>FnMut</code> can be called repeatedly and may mutate state.</p>\n<p><code>FnMut</code> is implemented automatically by closures which take mutable\nreferences to captured variables, as well as all types that implement\n<a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a>, e.g., (safe) <a href=\"../primitive.fn.html\" title=\"primitive fn\">function pointers</a> (since <code>FnMut</code> is a supertrait of\n<a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a>). Additionally, for any type <code>F</code> that implements <code>FnMut</code>, <code>&amp;mut F</code>\nimplements <code>FnMut</code>, too.</p>\n<p>Since <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> is a supertrait of <code>FnMut</code>, any instance of <code>FnMut</code> can be\nused where a <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a> is expected, and since <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> is a subtrait of\n<code>FnMut</code>, any instance of <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> can be used where <code>FnMut</code> is expected.</p>\n<p>Use <code>FnMut</code> as a bound when you want to accept a parameter of function-like\ntype and need to call it repeatedly, while allowing it to mutate state.\nIf you donâ€™t want the parameter to mutate state, use <a href=\"trait.Fn.html\" title=\"trait std::ops::Fn\"><code>Fn</code></a> as a\nbound; if you donâ€™t need to call it repeatedly, use <a href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\"><code>FnOnce</code></a>.</p>\n<p>See the <a href=\"../../book/ch13-01-closures.html\">chapter on closures in <em>The Rust Programming Language</em></a> for\nsome more information on this topic.</p>\n<p>Also of note is the special syntax for <code>Fn</code> traits (e.g.\n<code>Fn(usize, bool) -&gt; usize</code>). Those interested in the technical details of\nthis can refer to <a href=\"../../nomicon/hrtb.html\">the relevant section in the <em>Rustonomicon</em></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2><h3 id=\"calling-a-mutably-capturing-closure\"><a class=\"doc-anchor\" href=\"#calling-a-mutably-capturing-closure\">Â§</a>Calling a mutably capturing closure</h3>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">5</span>;\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>square_x = || x <span class=\"kw-2\">*</span>= x;\n    square_x();\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">25</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+5;%0A++++%7B%0A++++++++let+mut+square_x+=+%7C%7C+x+*=+x;%0A++++++++square_x();%0A++++%7D%0A++++assert_eq!(x,+25);%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"using-a-fnmut-parameter\"><a class=\"doc-anchor\" href=\"#using-a-fnmut-parameter\">Â§</a>Using a <code>FnMut</code> parameter</h3>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>do_twice&lt;F&gt;(<span class=\"kw-2\">mut </span>func: F)\n    <span class=\"kw\">where </span>F: FnMut()\n{\n    func();\n    func();\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: usize = <span class=\"number\">1</span>;\n{\n    <span class=\"kw\">let </span>add_two_to_x = || x += <span class=\"number\">2</span>;\n    do_twice(add_two_to_x);\n}\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+do_twice%3CF%3E(mut+func:+F)%0A++++++++where+F:+FnMut()%0A++++%7B%0A++++++++func();%0A++++++++func();%0A++++%7D%0A++++%0A++++let+mut+x:+usize+=+1;%0A++++%7B%0A++++++++let+add_two_to_x+=+%7C%7C+x+%2B=+2;%0A++++++++do_twice(add_two_to_x);%0A++++%7D%0A++++%0A++++assert_eq!(x,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.call_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#166\">source</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"#tymethod.call_mut\" class=\"fn\">call_mut</a>(&amp;mut self, args: Args) -&gt; Self::<a class=\"associatedtype\" href=\"trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs the call operation.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-FnMut%3CA%3E-for-%26F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#267-269\">source</a></span><a href=\"#impl-FnMut%3CA%3E-for-%26F\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, F&gt; <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;A&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;F</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>&lt;A&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-FnMut%3CA%3E-for-%26mut+F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/function.rs.html#289-291\">source</a></span><a href=\"#impl-FnMut%3CA%3E-for-%26mut+F\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, F&gt; <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;A&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut F</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;A&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2068\">source</a></span><a href=\"#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#186-189\">source</a><a href=\"#impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;F, Args&gt; <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"../sync/struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt;,\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,</div></h3></section></div><script src=\"../../trait.impl/core/ops/function/trait.FnMut.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:40.454Z"
}