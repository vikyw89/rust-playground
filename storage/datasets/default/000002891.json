{
	"title": "UnixListener in std::os::unix::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/net/struct.UnixListener.html",
	"markdown": "# UnixListener in std::os::unix::net - Rust\n\n```\npub struct UnixListener(/* private fields */);\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nA structure representing a Unix domain socket server.\n\n## [§](#examples)Examples\n\n```\nuse std::thread;\nuse std::os::unix::net::{UnixStream, UnixListener};\n\nfn handle_client(stream: UnixStream) {\n    // ...\n}\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n\n    // accept connections and process them, spawning a new thread for each one\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => {\n                /* connection succeeded */\n                thread::spawn(|| handle_client(stream));\n            }\n            Err(err) => {\n                /* connection failed */\n                break;\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::thread;%0Ause+std::os::unix::net::%7BUnixStream,+UnixListener%7D;%0A%0Afn+handle_client(stream:+UnixStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++//+accept+connections+and+process+them,+spawning+a+new+thread+for+each+one%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++/*+connection+succeeded+*/%0A++++++++++++++++thread::spawn(%7C%7C+handle_client(stream));%0A++++++++++++%7D%0A++++++++++++Err(err)+=%3E+%7B%0A++++++++++++++++/*+connection+failed+*/%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/listener.rs.html#55-313)[§](#impl-UnixListener)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#72-115)\n\nCreates a new `UnixListener` bound to the specified socket.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nlet listener = match UnixListener::bind(\"/path/to/the/socket\") {\n    Ok(sock) => sock,\n    Err(e) => {\n        println!(\"Couldn't connect: {e:?}\");\n        return\n    }\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixListener;%0A++++%0A++++let+listener+=+match+UnixListener::bind(%22/path/to/the/socket%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+connect:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&edition=2021)\n\n1.70.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#141-156)\n\nCreates a new `UnixListener` bound to the specified [`socket address`](struct.SocketAddr.html \"struct std::os::unix::net::SocketAddr\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::os::unix::net::{UnixListener};\n\nfn main() -> std::io::Result<()> {\n    let listener1 = UnixListener::bind(\"path/to/socket\")?;\n    let addr = listener1.local_addr()?;\n\n    let listener2 = match UnixListener::bind_addr(&addr) {\n        Ok(sock) => sock,\n        Err(err) => {\n            println!(\"Couldn't bind: {err:?}\");\n            return Err(err);\n        }\n    };\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener%7D;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener1+=+UnixListener::bind(%22path/to/socket%22)?;%0A++++let+addr+=+listener1.local_addr()?;%0A%0A++++let+listener2+=+match+UnixListener::bind_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(err)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+bind:+%7Berr:?%7D%22);%0A++++++++++++return+Err(err);%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#182-188)\n\nAccepts a new incoming connection to this listener.\n\nThis function will block the calling thread until a new Unix connection is established. When established, the corresponding [`UnixStream`](struct.UnixStream.html \"struct std::os::unix::net::UnixStream\") and the remote peer’s address will be returned.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n\n    match listener.accept() {\n        Ok((socket, addr)) => println!(\"Got a client: {addr:?}\"),\n        Err(e) => println!(\"accept function failed: {e:?}\"),\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++match+listener.accept()+%7B%0A++++++++Ok((socket,+addr))+=%3E+println!(%22Got+a+client:+%7Baddr:?%7D%22),%0A++++++++Err(e)+=%3E+println!(%22accept+function+failed:+%7Be:?%7D%22),%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#208-210)\n\nCreates a new independently owned handle to the underlying socket.\n\nThe returned `UnixListener` is a reference to the same socket that this object references. Both handles can be used to accept incoming connections and options set on one listener will affect the other.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n    let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+listener_copy+=+listener.try_clone().expect(%22try_clone+failed%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#226-228)\n\nReturns the local socket address of this listener.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n    let addr = listener.local_addr().expect(\"Couldn't get local address\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+addr+=+listener.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#250-252)\n\nMoves the socket into or out of nonblocking mode.\n\nThis will result in the `accept` operation becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, `Ok` is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind [`io::ErrorKind::WouldBlock`](about:blank/io/enum.ErrorKind.html#variant.WouldBlock \"variant std::io::ErrorKind::WouldBlock\") is returned.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n    listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++listener.set_nonblocking(true).expect(%22Couldn%27t+set+non+blocking%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#274-276)\n\nReturns the value of the `SO_ERROR` option.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/tmp/sock\")?;\n\n    if let Ok(Some(err)) = listener.take_error() {\n        println!(\"Got error: {err:?}\");\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/tmp/sock%22)?;%0A%0A++++if+let+Ok(Some(err))+=+listener.take_error()+%7B%0A++++++++println!(%22Got+error:+%7Berr:?%7D%22);%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n##### [§](#platform-specific)Platform specific\n\nOn Redox this always returns `None`.\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/listener.rs.html#310-312)\n\nReturns an iterator over incoming connections.\n\nThe iterator will never return [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") and will also not yield the peer’s [`SocketAddr`](struct.SocketAddr.html \"struct std::os::unix::net::SocketAddr\") structure.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::thread;\nuse std::os::unix::net::{UnixStream, UnixListener};\n\nfn handle_client(stream: UnixStream) {\n    // ...\n}\n\nfn main() -> std::io::Result<()> {\n    let listener = UnixListener::bind(\"/path/to/the/socket\")?;\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) => {\n                thread::spawn(|| handle_client(stream));\n            }\n            Err(err) => {\n                break;\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::thread;%0Ause+std::os::unix::net::%7BUnixStream,+UnixListener%7D;%0A%0Afn+handle_client(stream:+UnixStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++thread::spawn(%7C%7C+handle_client(stream));%0A++++++++++++%7D%0A++++++++++++Err(err)+=%3E+%7B%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n[§](#impl-Freeze-for-UnixListener)\n\n[§](#impl-RefUnwindSafe-for-UnixListener)\n\n[§](#impl-Send-for-UnixListener)\n\n[§](#impl-Sync-for-UnixListener)\n\n[§](#impl-Unpin-for-UnixListener)\n\n[§](#impl-UnwindSafe-for-UnixListener)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A structure representing a Unix domain socket server.\"><title>UnixListener in std::os::unix::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">UnixListener</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">UnixListener</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.accept\">accept</a></li><li><a href=\"#method.bind\">bind</a></li><li><a href=\"#method.bind_addr\">bind_addr</a></li><li><a href=\"#method.incoming\">incoming</a></li><li><a href=\"#method.local_addr\">local_addr</a></li><li><a href=\"#method.set_nonblocking\">set_nonblocking</a></li><li><a href=\"#method.take_error\">take_error</a></li><li><a href=\"#method.try_clone\">try_clone</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-UnixListener\">AsFd</a></li><li><a href=\"#impl-AsRawFd-for-UnixListener\">AsRawFd</a></li><li><a href=\"#impl-Debug-for-UnixListener\">Debug</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-UnixListener\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3CUnixListener%3E-for-OwnedFd\">From&lt;UnixListener&gt;</a></li><li><a href=\"#impl-FromRawFd-for-UnixListener\">FromRawFd</a></li><li><a href=\"#impl-IntoIterator-for-%26UnixListener\">IntoIterator</a></li><li><a href=\"#impl-IntoRawFd-for-UnixListener\">IntoRawFd</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-UnixListener\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-UnixListener\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-UnixListener\">Send</a></li><li><a href=\"#impl-Sync-for-UnixListener\">Sync</a></li><li><a href=\"#impl-Unpin-for-UnixListener\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-UnixListener\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::os::unix::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.Messages.html\">Messages</a></li><li><a href=\"struct.ScmCredentials.html\">ScmCredentials</a></li><li><a href=\"struct.ScmRights.html\">ScmRights</a></li><li><a href=\"struct.SocketAddr.html\">SocketAddr</a></li><li><a href=\"struct.SocketAncillary.html\">SocketAncillary</a></li><li><a href=\"struct.SocketCred.html\">SocketCred</a></li><li><a href=\"struct.UCred.html\">UCred</a></li><li><a href=\"struct.UnixDatagram.html\">UnixDatagram</a></li><li><a href=\"struct.UnixListener.html\">UnixListener</a></li><li><a href=\"struct.UnixStream.html\">UnixStream</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.AncillaryData.html\">AncillaryData</a></li><li><a href=\"enum.AncillaryError.html\">AncillaryError</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">UnixListener</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#41\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct UnixListener(<span class=\"comment\">/* private fields */</span>);</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A structure representing a Unix domain socket server.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::os::unix::net::{UnixStream, UnixListener};\n\n<span class=\"kw\">fn </span>handle_client(stream: UnixStream) {\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// accept connections and process them, spawning a new thread for each one\n    </span><span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listener.incoming() {\n        <span class=\"kw\">match </span>stream {\n            <span class=\"prelude-val\">Ok</span>(stream) =&gt; {\n                <span class=\"comment\">/* connection succeeded */\n                </span>thread::spawn(|| handle_client(stream));\n            }\n            <span class=\"prelude-val\">Err</span>(err) =&gt; {\n                <span class=\"comment\">/* connection failed */\n                </span><span class=\"kw\">break</span>;\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::thread;%0Ause+std::os::unix::net::%7BUnixStream,+UnixListener%7D;%0A%0Afn+handle_client(stream:+UnixStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++//+accept+connections+and+process+them,+spawning+a+new+thread+for+each+one%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++/*+connection+succeeded+*/%0A++++++++++++++++thread::spawn(%7C%7C+handle_client(stream));%0A++++++++++++%7D%0A++++++++++++Err(err)+=%3E+%7B%0A++++++++++++++++/*+connection+failed+*/%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UnixListener\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#55-313\">source</a><a href=\"#impl-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#72-115\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.bind\" class=\"fn\">bind</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>UnixListener</code> bound to the specified socket.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">let </span>listener = <span class=\"kw\">match </span>UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>) {\n    <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n    <span class=\"prelude-val\">Err</span>(e) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect: {e:?}\"</span>);\n        <span class=\"kw\">return\n    </span>}\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixListener;%0A++++%0A++++let+listener+=+match+UnixListener::bind(%22/path/to/the/socket%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+connect:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bind_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#141-156\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.bind_addr\" class=\"fn\">bind_addr</a>(socket_addr: &amp;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>UnixListener</code> bound to the specified <a href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\"><code>socket address</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::{UnixListener};\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener1 = UnixListener::bind(<span class=\"string\">\"path/to/socket\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = listener1.local_addr()<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>listener2 = <span class=\"kw\">match </span>UnixListener::bind_addr(<span class=\"kw-2\">&amp;</span>addr) {\n        <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n        <span class=\"prelude-val\">Err</span>(err) =&gt; {\n            <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't bind: {err:?}\"</span>);\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(err);\n        }\n    };\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::%7BUnixListener%7D;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener1+=+UnixListener::bind(%22path/to/socket%22)?;%0A++++let+addr+=+listener1.local_addr()?;%0A%0A++++let+listener2+=+match+UnixListener::bind_addr(%26addr)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(err)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+bind:+%7Berr:?%7D%22);%0A++++++++++++return+Err(err);%0A++++++++%7D%0A++++%7D;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.accept\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#182-188\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.accept\" class=\"fn\">accept</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;(<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>, <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Accepts a new incoming connection to this listener.</p>\n<p>This function will block the calling thread until a new Unix connection\nis established. When established, the corresponding <a href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\"><code>UnixStream</code></a> and\nthe remote peer’s address will be returned.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">match </span>listener.accept() {\n        <span class=\"prelude-val\">Ok</span>((socket, addr)) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"Got a client: {addr:?}\"</span>),\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"accept function failed: {e:?}\"</span>),\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++match+listener.accept()+%7B%0A++++++++Ok((socket,+addr))+=%3E+println!(%22Got+a+client:+%7Baddr:?%7D%22),%0A++++++++Err(e)+=%3E+println!(%22accept+function+failed:+%7Be:?%7D%22),%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#208-210\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new independently owned handle to the underlying socket.</p>\n<p>The returned <code>UnixListener</code> is a reference to the same socket that this\nobject references. Both handles can be used to accept incoming\nconnections and options set on one listener will affect the other.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>listener_copy = listener.try_clone().expect(<span class=\"string\">\"try_clone failed\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+listener_copy+=+listener.try_clone().expect(%22try_clone+failed%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.local_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#226-228\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.local_addr\" class=\"fn\">local_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the local socket address of this listener.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = listener.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++let+addr+=+listener.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_nonblocking\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#250-252\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_nonblocking\" class=\"fn\">set_nonblocking</a>(&amp;self, nonblocking: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Moves the socket into or out of nonblocking mode.</p>\n<p>This will result in the <code>accept</code> operation becoming nonblocking,\ni.e., immediately returning from their calls. If the IO operation is\nsuccessful, <code>Ok</code> is returned and no further action is required. If the\nIO operation could not be completed and needs to be retried, an error\nwith kind <a href=\"../../../io/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a> is returned.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n    listener.set_nonblocking(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"Couldn't set non blocking\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A++++listener.set_nonblocking(true).expect(%22Couldn't+set+non+blocking%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#274-276\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take_error\" class=\"fn\">take_error</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../../../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the value of the <code>SO_ERROR</code> option.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(err)) = listener.take_error() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Got error: {err:?}\"</span>);\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/tmp/sock%22)?;%0A%0A++++if+let+Ok(Some(err))+=+listener.take_error()+%7B%0A++++++++println!(%22Got+error:+%7Berr:?%7D%22);%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"platform-specific\"><a class=\"doc-anchor\" href=\"#platform-specific\">§</a>Platform specific</h5>\n<p>On Redox this always returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.incoming\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#310-312\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.incoming\" class=\"fn\">incoming</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Incoming.html\" title=\"struct std::os::unix::net::Incoming\">Incoming</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Incoming<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over incoming connections.</p>\n<p>The iterator will never return <a href=\"../../../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> and will also not yield the\npeer’s <a href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\"><code>SocketAddr</code></a> structure.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::os::unix::net::{UnixStream, UnixListener};\n\n<span class=\"kw\">fn </span>handle_client(stream: UnixStream) {\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>listener = UnixListener::bind(<span class=\"string\">\"/path/to/the/socket\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">for </span>stream <span class=\"kw\">in </span>listener.incoming() {\n        <span class=\"kw\">match </span>stream {\n            <span class=\"prelude-val\">Ok</span>(stream) =&gt; {\n                thread::spawn(|| handle_client(stream));\n            }\n            <span class=\"prelude-val\">Err</span>(err) =&gt; {\n                <span class=\"kw\">break</span>;\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::thread;%0Ause+std::os::unix::net::%7BUnixStream,+UnixListener%7D;%0A%0Afn+handle_client(stream:+UnixStream)+%7B%0A++++//+...%0A%7D%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+listener+=+UnixListener::bind(%22/path/to/the/socket%22)?;%0A%0A++++for+stream+in+listener.incoming()+%7B%0A++++++++match+stream+%7B%0A++++++++++++Ok(stream)+=%3E+%7B%0A++++++++++++++++thread::spawn(%7C%7C+handle_client(stream));%0A++++++++++++%7D%0A++++++++++++Err(err)+=%3E+%7B%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#340-345\">source</a></span><a href=\"#impl-AsFd-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#342-344\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../../fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#316-321\">source</a></span><a href=\"#impl-AsRawFd-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#318-320\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../../fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#44-53\">source</a></span><a href=\"#impl-Debug-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#45-52\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#348-353\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#350-352\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(fd: <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CUnixListener%3E-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#356-362\">source</a></span><a href=\"#impl-From%3CUnixListener%3E-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a>&gt; for <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#359-361\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(listener: <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a>) -&gt; <a class=\"struct\" href=\"../../fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\"><code>UnixListener</code></a>’s socket file descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#324-329\">source</a></span><a href=\"#impl-FromRawFd-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#326-328\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../../fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../../fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#365-372\">source</a></span><a href=\"#impl-IntoIterator-for-%26UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a>, <a class=\"struct\" href=\"../../../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.Incoming.html\" title=\"struct std::os::unix::net::Incoming\">Incoming</a>&lt;'a&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#369-371\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.Incoming.html\" title=\"struct std::os::unix::net::Incoming\">Incoming</a>&lt;'a&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Incoming<'a>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../../../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawFd-for-UnixListener\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/listener.rs.html#332-337\">source</a></span><a href=\"#impl-IntoRawFd-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fd/trait.IntoRawFd.html\" title=\"trait std::os::fd::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/listener.rs.html#334-336\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fd/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"type\" href=\"../../fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying file descriptor. <a href=\"../../fd/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-UnixListener\" class=\"impl\"><a href=\"#impl-Freeze-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section><section id=\"impl-RefUnwindSafe-for-UnixListener\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section><section id=\"impl-Send-for-UnixListener\" class=\"impl\"><a href=\"#impl-Send-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section><section id=\"impl-Sync-for-UnixListener\" class=\"impl\"><a href=\"#impl-Sync-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section><section id=\"impl-Unpin-for-UnixListener\" class=\"impl\"><a href=\"#impl-Unpin-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section><section id=\"impl-UnwindSafe-for-UnixListener\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-UnixListener\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.UnixListener.html\" title=\"struct std::os::unix::net::UnixListener\">UnixListener</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Incoming<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::os::unix::net::Incoming\\\">Incoming</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::os::unix::net::Incoming\\\">Incoming</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a>&gt;;</div>\",\"Incoming<'a>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::os::unix::net::Incoming\\\">Incoming</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Incoming.html\\\" title=\\\"struct std::os::unix::net::Incoming\\\">Incoming</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"struct.UnixStream.html\\\" title=\\\"struct std::os::unix::net::UnixStream\\\">UnixStream</a>&gt;;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:20.069Z"
}