{
	"title": "OpenOptionsExt in std::os::windows::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/fs/trait.OpenOptionsExt.html",
	"markdown": "# OpenOptionsExt in std::os::windows::fs - Rust\n\n```\npub trait OpenOptionsExt {\n    // Required methods\n    fn access_mode(&mut self, access: u32) -> &mut Self;\n    fn share_mode(&mut self, val: u32) -> &mut Self;\n    fn custom_flags(&mut self, flags: u32) -> &mut Self;\n    fn attributes(&mut self, val: u32) -> &mut Self;\n    fn security_qos_flags(&mut self, flags: u32) -> &mut Self;\n}\n```\n\nAvailable on **Windows** only.\n\nExpand description\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#122)\n\nOverrides the `dwDesiredAccess` argument to the call to [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea) with the specified value.\n\nThis will override the `read`, `write`, and `append` flags on the `OpenOptions` structure. This method provides fine-grained control over the permissions to read, write and append data, attributes (like hidden and system), and extended attributes.\n\n##### [§](#examples)Examples\n\n```\nuse std::fs::OpenOptions;\nuse std::os::windows::prelude::*;\n\n// Open without read and write permission, for example if you only need\n// to call `stat` on the file\nlet file = OpenOptions::new().access_mode(0).open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+Open+without+read+and+write+permission,+for+example+if+you+only+need%0A++++//+to+call+%60stat%60+on+the+file%0A++++let+file+=+OpenOptions::new().access_mode(0).open(%22foo.txt%22);%0A%7D&edition=2021)\n\nOverrides the `dwShareMode` argument to the call to [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea) with the specified value.\n\nBy default `share_mode` is set to `FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE`. This allows other processes to read, write, and delete/rename the same file while it is open. Removing any of the flags will prevent other processes from performing the corresponding operation until the file handle is closed.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs::OpenOptions;\nuse std::os::windows::prelude::*;\n\n// Do not allow others to read or modify this file while we have it open\n// for writing.\nlet file = OpenOptions::new()\n    .write(true)\n    .share_mode(0)\n    .open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+Do+not+allow+others+to+read+or+modify+this+file+while+we+have+it+open%0A++++//+for+writing.%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.share_mode(0)%0A++++++++.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#181)\n\nSets extra flags for the `dwFileFlags` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `attributes` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)).\n\nCustom flags can only set flags, not remove flags set by Rust’s options. This option overwrites any previously set custom flags.\n\n##### [§](#examples-2)Examples\n\n```\nextern crate winapi;\n\nuse std::fs::OpenOptions;\nuse std::os::windows::prelude::*;\n\nlet file = OpenOptions::new()\n    .create(true)\n    .write(true)\n    .custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)\n    .open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+FILE_FLAG_DELETE_ON_CLOSE:+u32+=+0x04000000;+%7D%0A++++%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.create(true)%0A++++++++.write(true)%0A++++++++.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)%0A++++++++.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#219)\n\nSets the `dwFileAttributes` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `custom_flags` and `security_qos_flags` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)).\n\nIf a _new_ file is created because it does not yet exist and `.create(true)` or `.create_new(true)` are specified, the new file is given the attributes declared with `.attributes()`.\n\nIf an _existing_ file is opened with `.create(true).truncate(true)`, its existing attributes are preserved and combined with the ones declared with `.attributes()`.\n\nIn all other cases the attributes get ignored.\n\n##### [§](#examples-3)Examples\n\n```\nextern crate winapi;\n\nuse std::fs::OpenOptions;\nuse std::os::windows::prelude::*;\n\nlet file = OpenOptions::new()\n    .write(true)\n    .create(true)\n    .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n    .open(\"foo.txt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+FILE_ATTRIBUTE_HIDDEN:+u32+=+2;+%7D%0A++++%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.create(true)%0A++++++++.attributes(winapi::FILE_ATTRIBUTE_HIDDEN)%0A++++++++.open(%22foo.txt%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#265)\n\nSets the `dwSecurityQosFlags` argument to the call to [`CreateFile2`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2) to the specified value (or combines it with `custom_flags` and `attributes` to set the `dwFlagsAndAttributes` for [`CreateFile`](https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea)).\n\nBy default `security_qos_flags` is not set. It should be specified when opening a named pipe, to control to which degree a server process can act on behalf of a client process (security impersonation level).\n\nWhen `security_qos_flags` is not set, a malicious program can gain the elevated privileges of a privileged Rust process when it allows opening user-specified paths, by tricking it into opening a named pipe. So arguably `security_qos_flags` should also be set when opening arbitrary paths. However the bits can then conflict with other flags, specifically `FILE_FLAG_OPEN_NO_RECALL`.\n\nFor information about possible values, see [Impersonation Levels](https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level) on the Windows Dev Center site. The `SECURITY_SQOS_PRESENT` flag is set automatically when using this method.\n\n##### [§](#examples-4)Examples\n\n```\nextern crate winapi;\nuse std::fs::OpenOptions;\nuse std::os::windows::prelude::*;\n\nlet file = OpenOptions::new()\n    .write(true)\n    .create(true)\n\n    // Sets the flag value to `SecurityIdentification`.\n    .security_qos_flags(winapi::SECURITY_IDENTIFICATION)\n\n    .open(r\"\\\\.\\pipe\\MyPipe\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+SECURITY_IDENTIFICATION:+u32+=+0;+%7D%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.create(true)%0A++++%0A++++++++//+Sets+the+flag+value+to+%60SecurityIdentification%60.%0A++++++++.security_qos_flags(winapi::SECURITY_IDENTIFICATION)%0A++++%0A++++++++.open(r%22%5C%5C.%5Cpipe%5CMyPipe%22);%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/windows/fs.rs.html#269-294)[§](#impl-OpenOptionsExt-for-OpenOptions)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to `fs::OpenOptions`.\"><title>OpenOptionsExt in std::os::windows::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.access_mode\">access_mode</a></li><li><a href=\"#tymethod.attributes\">attributes</a></li><li><a href=\"#tymethod.custom_flags\">custom_flags</a></li><li><a href=\"#tymethod.security_qos_flags\">security_qos_flags</a></li><li><a href=\"#tymethod.share_mode\">share_mode</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::windows::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTimesExt.html\">FileTimesExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.junction_point.html\">junction_point</a></li><li><a href=\"fn.symlink_dir.html\">symlink_dir</a></li><li><a href=\"fn.symlink_file.html\">symlink_file</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">OpenOptionsExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#100-266\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait OpenOptionsExt {\n    // Required methods\n    fn <a href=\"#tymethod.access_mode\" class=\"fn\">access_mode</a>(&amp;mut self, access: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.share_mode\" class=\"fn\">share_mode</a>(&amp;mut self, val: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.attributes\" class=\"fn\">attributes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.security_qos_flags\" class=\"fn\">security_qos_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to <a href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\"><code>fs::OpenOptions</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.access_mode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#122\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.access_mode\" class=\"fn\">access_mode</a>(&amp;mut self, access: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Overrides the <code>dwDesiredAccess</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>\nwith the specified value.</p>\n<p>This will override the <code>read</code>, <code>write</code>, and <code>append</code> flags on the\n<code>OpenOptions</code> structure. This method provides fine-grained control over\nthe permissions to read, write and append data, attributes (like hidden\nand system), and extended attributes.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"comment\">// Open without read and write permission, for example if you only need\n// to call `stat` on the file\n</span><span class=\"kw\">let </span>file = OpenOptions::new().access_mode(<span class=\"number\">0</span>).open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+Open+without+read+and+write+permission,+for+example+if+you+only+need%0A++++//+to+call+%60stat%60+on+the+file%0A++++let+file+=+OpenOptions::new().access_mode(0).open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.share_mode\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#150\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.share_mode\" class=\"fn\">share_mode</a>(&amp;mut self, val: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Overrides the <code>dwShareMode</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a> with\nthe specified value.</p>\n<p>By default <code>share_mode</code> is set to\n<code>FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE</code>. This allows\nother processes to read, write, and delete/rename the same file\nwhile it is open. Removing any of the flags will prevent other\nprocesses from performing the corresponding operation until the file\nhandle is closed.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"comment\">// Do not allow others to read or modify this file while we have it open\n// for writing.\n</span><span class=\"kw\">let </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .share_mode(<span class=\"number\">0</span>)\n    .open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++//+Do+not+allow+others+to+read+or+modify+this+file+while+we+have+it+open%0A++++//+for+writing.%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.share_mode(0)%0A++++++++.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.custom_flags\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#181\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.custom_flags\" class=\"fn\">custom_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets extra flags for the <code>dwFileFlags</code> argument to the call to\n<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to the specified value (or combines it with\n<code>attributes</code> and <code>security_qos_flags</code> to set the <code>dwFlagsAndAttributes</code>\nfor <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>).</p>\n<p>Custom flags can only set flags, not remove flags set by Rust’s options.\nThis option overwrites any previously set custom flags.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>winapi;\n\n<span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>file = OpenOptions::new()\n    .create(<span class=\"bool-val\">true</span>)\n    .write(<span class=\"bool-val\">true</span>)\n    .custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)\n    .open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+FILE_FLAG_DELETE_ON_CLOSE:+u32+=+0x04000000;+%7D%0A++++%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.create(true)%0A++++++++.write(true)%0A++++++++.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE)%0A++++++++.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.attributes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#219\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.attributes\" class=\"fn\">attributes</a>(&amp;mut self, val: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the <code>dwFileAttributes</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to\nthe specified value (or combines it with <code>custom_flags</code> and\n<code>security_qos_flags</code> to set the <code>dwFlagsAndAttributes</code> for\n<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>).</p>\n<p>If a <em>new</em> file is created because it does not yet exist and\n<code>.create(true)</code> or <code>.create_new(true)</code> are specified, the new file is\ngiven the attributes declared with <code>.attributes()</code>.</p>\n<p>If an <em>existing</em> file is opened with <code>.create(true).truncate(true)</code>, its\nexisting attributes are preserved and combined with the ones declared\nwith <code>.attributes()</code>.</p>\n<p>In all other cases the attributes get ignored.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>winapi;\n\n<span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .create(<span class=\"bool-val\">true</span>)\n    .attributes(winapi::FILE_ATTRIBUTE_HIDDEN)\n    .open(<span class=\"string\">\"foo.txt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+FILE_ATTRIBUTE_HIDDEN:+u32+=+2;+%7D%0A++++%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.create(true)%0A++++++++.attributes(winapi::FILE_ATTRIBUTE_HIDDEN)%0A++++++++.open(%22foo.txt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.security_qos_flags\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#265\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.security_qos_flags\" class=\"fn\">security_qos_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section></summary><div class=\"docblock\"><p>Sets the <code>dwSecurityQosFlags</code> argument to the call to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2\"><code>CreateFile2</code></a> to\nthe specified value (or combines it with <code>custom_flags</code> and <code>attributes</code>\nto set the <code>dwFlagsAndAttributes</code> for <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea\"><code>CreateFile</code></a>).</p>\n<p>By default <code>security_qos_flags</code> is not set. It should be specified when\nopening a named pipe, to control to which degree a server process can\nact on behalf of a client process (security impersonation level).</p>\n<p>When <code>security_qos_flags</code> is not set, a malicious program can gain the\nelevated privileges of a privileged Rust process when it allows opening\nuser-specified paths, by tricking it into opening a named pipe. So\narguably <code>security_qos_flags</code> should also be set when opening arbitrary\npaths. However the bits can then conflict with other flags, specifically\n<code>FILE_FLAG_OPEN_NO_RECALL</code>.</p>\n<p>For information about possible values, see <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-security_impersonation_level\">Impersonation Levels</a> on the\nWindows Dev Center site. The <code>SECURITY_SQOS_PRESENT</code> flag is set\nautomatically when using this method.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>winapi;\n<span class=\"kw\">use </span>std::fs::OpenOptions;\n<span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .create(<span class=\"bool-val\">true</span>)\n\n    <span class=\"comment\">// Sets the flag value to `SecurityIdentification`.\n    </span>.security_qos_flags(winapi::SECURITY_IDENTIFICATION)\n\n    .open(<span class=\"string\">r\"\\\\.\\pipe\\MyPipe\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unexpected_cfgs)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(for_demonstration_only)%5D%0A++++extern+crate+winapi;%0A++++mod+winapi+%7B+pub+const+SECURITY_IDENTIFICATION:+u32+=+0;+%7D%0A++++use+std::fs::OpenOptions;%0A++++use+std::os::windows::prelude::*;%0A++++%0A++++let+file+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.create(true)%0A++++%0A++++++++//+Sets+the+flag+value+to+%60SecurityIdentification%60.%0A++++++++.security_qos_flags(winapi::SECURITY_IDENTIFICATION)%0A++++%0A++++++++.open(r%22%5C%5C.%5Cpipe%5CMyPipe%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-OpenOptionsExt-for-OpenOptions\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/fs.rs.html#269-294\">source</a></span><a href=\"#impl-OpenOptionsExt-for-OpenOptions\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.OpenOptionsExt.html\" title=\"trait std::os::windows::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></div><script src=\"../../../../trait.impl/std/os/windows/fs/trait.OpenOptionsExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:28.034Z"
}