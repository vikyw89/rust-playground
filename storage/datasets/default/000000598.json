{
	"title": "Poll in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/enum.Poll.html",
	"markdown": "# Poll in std::task - Rust\n\n## Enum [std](../index.html)::[task](index.html)::[Poll](#)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#12) Â·\n\n```\npub enum Poll<T> {\n    Ready(T),\n    Pending,\n}\n```\n\nExpand description\n\nIndicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.\n\n[Â§](#variant.Ready)1.36.0\n\nRepresents that a value is immediately ready.\n\n[Â§](#variant.Pending)1.36.0\n\nRepresents that a value is not ready yet.\n\nWhen a function returns `Pending`, the function _must_ also ensure that the current task is scheduled to be awoken when progress can be made.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#28)[Â§](#impl-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#47-49)\n\nMaps a `Poll<T>` to `Poll<U>` by applying a function to a contained value.\n\n##### [Â§](#examples)Examples\n\nConverts a `Poll<[String](../../std/string/struct.String.html \"String\")>` into a `Poll<[usize](../primitive.usize.html \"primitive usize\")>`, consuming the original:\n\n```\nlet poll_some_string = Poll::Ready(String::from(\"Hello, World!\"));\n// `Poll::map` takes self *by value*, consuming `poll_some_string`\nlet poll_some_len = poll_some_string.map(|s| s.len());\n\nassert_eq!(poll_some_len, Poll::Ready(13));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+poll_some_string+=+Poll::Ready(String::from(%22Hello,+World!%22));%0A++++//+%60Poll::map%60+takes+self+*by+value*,+consuming+%60poll_some_string%60%0A++++let+poll_some_len+=+poll_some_string.map(%7Cs%7C+s.len());%0A++++%0A++++assert_eq!(poll_some_len,+Poll::Ready(13));%0A%7D&edition=2021)\n\n1.36.0 (const: 1.49.0) Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#72)\n\nReturns `true` if the poll is a [`Poll::Ready`](about:blank/enum.Poll.html#variant.Ready \"variant std::task::Poll::Ready\") value.\n\n##### [Â§](#examples-1)Examples\n\n```\nlet x: Poll<u32> = Poll::Ready(2);\nassert_eq!(x.is_ready(), true);\n\nlet x: Poll<u32> = Poll::Pending;\nassert_eq!(x.is_ready(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Ready(2);%0A++++assert_eq!(x.is_ready(),+true);%0A++++%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Pending;%0A++++assert_eq!(x.is_ready(),+false);%0A%7D&edition=2021)\n\n1.36.0 (const: 1.49.0) Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#93)\n\nReturns `true` if the poll is a [`Pending`](about:blank/enum.Poll.html#variant.Pending \"variant std::task::Poll::Pending\") value.\n\n##### [Â§](#examples-2)Examples\n\n```\nlet x: Poll<u32> = Poll::Ready(2);\nassert_eq!(x.is_pending(), false);\n\nlet x: Poll<u32> = Poll::Pending;\nassert_eq!(x.is_pending(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Ready(2);%0A++++assert_eq!(x.is_pending(),+false);%0A++++%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Pending;%0A++++assert_eq!(x.is_pending(),+true);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#98)[Â§](#impl-Poll%3CResult%3CT,+E%3E%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#115-117)\n\nMaps a `Poll<Result<T, E>>` to `Poll<Result<U, E>>` by applying a function to a contained `Poll::Ready(Ok)` value, leaving all other variants untouched.\n\nThis function can be used to compose the results of two functions.\n\n##### [Â§](#examples-3)Examples\n\n```\nlet res: Poll<Result<u8, _>> = Poll::Ready(\"12\".parse());\nlet squared = res.map_ok(|n| n * n);\nassert_eq!(squared, Poll::Ready(Ok(144)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3CResult%3Cu8,+_%3E%3E+=+Poll::Ready(%2212%22.parse());%0A++++let+squared+=+res.map_ok(%7Cn%7C+n+*+n);%0A++++assert_eq!(squared,+Poll::Ready(Ok(144)));%0A%7D&edition=2021)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#143-145)\n\nMaps a `Poll::Ready<Result<T, E>>` to `Poll::Ready<Result<T, F>>` by applying a function to a contained `Poll::Ready(Err)` value, leaving all other variants untouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\n##### [Â§](#examples-4)Examples\n\n```\nlet res: Poll<Result<u8, _>> = Poll::Ready(\"oops\".parse());\nlet res = res.map_err(|_| 0_u8);\nassert_eq!(res, Poll::Ready(Err(0)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3CResult%3Cu8,+_%3E%3E+=+Poll::Ready(%22oops%22.parse());%0A++++let+res+=+res.map_err(%7C_%7C+0_u8);%0A++++assert_eq!(res,+Poll::Ready(Err(0)));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#155)[Â§](#impl-Poll%3COption%3CResult%3CT,+E%3E%3E%3E)\n\n1.51.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#172-174)\n\nMaps a `Poll<Option<Result<T, E>>>` to `Poll<Option<Result<U, E>>>` by applying a function to a contained `Poll::Ready(Some(Ok))` value, leaving all other variants untouched.\n\nThis function can be used to compose the results of two functions.\n\n##### [Â§](#examples-5)Examples\n\n```\nlet res: Poll<Option<Result<u8, _>>> = Poll::Ready(Some(\"12\".parse()));\nlet squared = res.map_ok(|n| n * n);\nassert_eq!(squared, Poll::Ready(Some(Ok(144))));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3COption%3CResult%3Cu8,+_%3E%3E%3E+=+Poll::Ready(Some(%2212%22.parse()));%0A++++let+squared+=+res.map_ok(%7Cn%7C+n+*+n);%0A++++assert_eq!(squared,+Poll::Ready(Some(Ok(144))));%0A%7D&edition=2021)\n\n1.51.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#202-204)\n\nMaps a `Poll::Ready<Option<Result<T, E>>>` to `Poll::Ready<Option<Result<T, F>>>` by applying a function to a contained `Poll::Ready(Some(Err))` value, leaving all other variants untouched.\n\nThis function can be used to pass through a successful result while handling an error.\n\n##### [Â§](#examples-6)Examples\n\n```\nlet res: Poll<Option<Result<u8, _>>> = Poll::Ready(Some(\"oops\".parse()));\nlet res = res.map_err(|_| 0_u8);\nassert_eq!(res, Poll::Ready(Some(Err(0))));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3COption%3CResult%3Cu8,+_%3E%3E%3E+=+Poll::Ready(Some(%22oops%22.parse()));%0A++++let+res+=+res.map_err(%7C_%7C+0_u8);%0A++++assert_eq!(res,+Poll::Ready(Some(Err(0))));%0A%7D&edition=2021)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Clone-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Debug-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#216)[Â§](#impl-From%3CT%3E-for-Poll%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#225)[Â§](#method.from)\n\nMoves the value into a [`Poll::Ready`](about:blank/enum.Poll.html#variant.Ready \"variant std::task::Poll::Ready\") to make a `Poll<T>`.\n\n##### [Â§](#example)Example\n\n```\nassert_eq!(Poll::from(true), Poll::Ready(true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++assert_eq!(Poll::from(true),+Poll::Ready(true));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#282-283)[Â§](#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3COption%3CResult%3CT,+F%3E%3E%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#286)[Â§](#method.from_residual)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from a compatible `Residual` type. [Read more](about:blank/ops/trait.FromResidual.html#tymethod.from_residual)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#251)[Â§](#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3CResult%3CT,+F%3E%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#253)[Â§](#method.from_residual-1)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from a compatible `Residual` type. [Read more](about:blank/ops/trait.FromResidual.html#tymethod.from_residual)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Hash-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Ord-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-PartialEq-for-Poll%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[Â§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-PartialOrd-for-Poll%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[Â§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[Â§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[Â§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[Â§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#261)[Â§](#impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E)\n\n[Â§](#associatedtype.Output)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value produced by `?` when _not_ short-circuiting.\n\n[Â§](#associatedtype.Residual)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#266)[Â§](#method.from_output)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from its `Output` type. [Read more](about:blank/ops/trait.Try.html#tymethod.from_output)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#271)[Â§](#method.branch)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nUsed in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`](about:blank/ops/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\")) or propagate a value back to the caller (because this returned [`ControlFlow::Break`](about:blank/ops/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\")). [Read more](about:blank/ops/trait.Try.html#tymethod.branch)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#231)[Â§](#impl-Try-for-Poll%3CResult%3CT,+E%3E%3E)\n\n[Â§](#associatedtype.Output-1)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nThe type of the value produced by `?` when _not_ short-circuiting.\n\n[Â§](#associatedtype.Residual-1)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#236)[Â§](#method.from_output-1)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nConstructs the type from its `Output` type. [Read more](about:blank/ops/trait.Try.html#tymethod.from_output)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#241)[Â§](#method.branch-1)\n\nðŸ”¬This is a nightly-only experimental API. (`try_trait_v2`Â [#84277](https://github.com/rust-lang/rust/issues/84277))\n\nUsed in `?` to decide whether the operator should produce a value (because this returned [`ControlFlow::Continue`](about:blank/ops/enum.ControlFlow.html#variant.Continue \"variant std::ops::ControlFlow::Continue\")) or propagate a value back to the caller (because this returned [`ControlFlow::Break`](about:blank/ops/enum.ControlFlow.html#variant.Break \"variant std::ops::ControlFlow::Break\")). [Read more](about:blank/ops/trait.Try.html#tymethod.branch)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Copy-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-Eq-for-Poll%3CT%3E)\n\n1.36.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9)[Â§](#impl-StructuralPartialEq-for-Poll%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[Â§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[Â§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead.\"><title>Poll in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc enum\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Poll</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Poll</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#variants\">Variants</a></h3><ul class=\"block variant\"><li><a href=\"#variant.Pending\">Pending</a></li><li><a href=\"#variant.Ready\">Ready</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.is_pending\">is_pending</a></li><li><a href=\"#method.is_ready\">is_ready</a></li><li><a href=\"#method.map\">map</a></li><li><a href=\"#method.map_err\">map_err</a></li><li><a href=\"#method.map_err-1\">map_err</a></li><li><a href=\"#method.map_ok\">map_ok</a></li><li><a href=\"#method.map_ok-1\">map_ok</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Poll%3CT%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Poll%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Poll%3CT%3E\">Debug</a></li><li><a href=\"#impl-Eq-for-Poll%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3CT%3E-for-Poll%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3COption%3CResult%3CT,+F%3E%3E%3E\">FromResidual&lt;Result&lt;Infallible, E&gt;&gt;</a></li><li><a href=\"#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3CResult%3CT,+F%3E%3E\">FromResidual&lt;Result&lt;Infallible, E&gt;&gt;</a></li><li><a href=\"#impl-Hash-for-Poll%3CT%3E\">Hash</a></li><li><a href=\"#impl-Ord-for-Poll%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Poll%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Poll%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-StructuralPartialEq-for-Poll%3CT%3E\">StructuralPartialEq</a></li><li><a href=\"#impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\">Try</a></li><li><a href=\"#impl-Try-for-Poll%3CResult%3CT,+E%3E%3E\">Try</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Poll%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Poll%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Poll%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Poll%3CT%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Poll%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Poll%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Enum <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"enum\" href=\"#\">Poll</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#12\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub enum Poll&lt;T&gt; {\n    Ready(T),\n    Pending,\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Indicates whether a value is available or if the current task has been\nscheduled to receive a wakeup instead.</p>\n</div></details><h2 id=\"variants\" class=\"variants section-header\">Variants<a href=\"#variants\" class=\"anchor\">Â§</a></h2><div class=\"variants\"><section id=\"variant.Ready\" class=\"variant\"><a href=\"#variant.Ready\" class=\"anchor\">Â§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><h3 class=\"code-header\">Ready(T)</h3></section><div class=\"docblock\"><p>Represents that a value is immediately ready.</p>\n</div><section id=\"variant.Pending\" class=\"variant\"><a href=\"#variant.Pending\" class=\"anchor\">Â§</a><span class=\"since rightside\" title=\"Stable since Rust version 1.36.0\">1.36.0</span><h3 class=\"code-header\">Pending</h3></section><div class=\"docblock\"><p>Represents that a value is not ready yet.</p>\n<p>When a function returns <code>Pending</code>, the function <em>must</em> also\nensure that the current task is scheduled to be awoken when\nprogress can be made.</p>\n</div></div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Poll%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#28\">source</a><a href=\"#impl-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#47-49\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map\" class=\"fn\">map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a contained value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<p>Converts a <code>Poll&lt;<a href=\"../../std/string/struct.String.html\" title=\"String\">String</a>&gt;</code> into a <code>Poll&lt;<a href=\"../primitive.usize.html\" title=\"primitive usize\">usize</a>&gt;</code>, consuming\nthe original:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>poll_some_string = Poll::Ready(String::from(<span class=\"string\">\"Hello, World!\"</span>));\n<span class=\"comment\">// `Poll::map` takes self *by value*, consuming `poll_some_string`\n</span><span class=\"kw\">let </span>poll_some_len = poll_some_string.map(|s| s.len());\n\n<span class=\"macro\">assert_eq!</span>(poll_some_len, Poll::Ready(<span class=\"number\">13</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+poll_some_string+=+Poll::Ready(String::from(%22Hello,+World!%22));%0A++++//+%60Poll::map%60+takes+self+*by+value*,+consuming+%60poll_some_string%60%0A++++let+poll_some_len+=+poll_some_string.map(%7Cs%7C+s.len());%0A++++%0A++++assert_eq!(poll_some_len,+Poll::Ready(13));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ready\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const since 1.49.0\">1.36.0 (const: 1.49.0)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#72\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_ready\" class=\"fn\">is_ready</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the poll is a <a href=\"enum.Poll.html#variant.Ready\" title=\"variant std::task::Poll::Ready\"><code>Poll::Ready</code></a> value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: Poll&lt;u32&gt; = Poll::Ready(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_ready(), <span class=\"bool-val\">true</span>);\n\n<span class=\"kw\">let </span>x: Poll&lt;u32&gt; = Poll::Pending;\n<span class=\"macro\">assert_eq!</span>(x.is_ready(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Ready(2);%0A++++assert_eq!(x.is_ready(),+true);%0A++++%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Pending;%0A++++assert_eq!(x.is_ready(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_pending\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0, const since 1.49.0\">1.36.0 (const: 1.49.0)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#93\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_pending\" class=\"fn\">is_pending</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the poll is a <a href=\"enum.Poll.html#variant.Pending\" title=\"variant std::task::Poll::Pending\"><code>Pending</code></a> value.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: Poll&lt;u32&gt; = Poll::Ready(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(x.is_pending(), <span class=\"bool-val\">false</span>);\n\n<span class=\"kw\">let </span>x: Poll&lt;u32&gt; = Poll::Pending;\n<span class=\"macro\">assert_eq!</span>(x.is_pending(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Ready(2);%0A++++assert_eq!(x.is_pending(),+false);%0A++++%0A++++let+x:+Poll%3Cu32%3E+=+Poll::Pending;%0A++++assert_eq!(x.is_pending(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Poll%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#98\">source</a><a href=\"#impl-Poll%3CResult%3CT,+E%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_ok\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#115-117\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_ok\" class=\"fn\">map_ok</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, E&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by applying a\nfunction to a contained <code>Poll::Ready(Ok)</code> value, leaving all other\nvariants untouched.</p>\n<p>This function can be used to compose the results of two functions.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>res: Poll&lt;<span class=\"prelude-ty\">Result</span>&lt;u8, <span class=\"kw\">_</span>&gt;&gt; = Poll::Ready(<span class=\"string\">\"12\"</span>.parse());\n<span class=\"kw\">let </span>squared = res.map_ok(|n| n * n);\n<span class=\"macro\">assert_eq!</span>(squared, Poll::Ready(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">144</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3CResult%3Cu8,+_%3E%3E+=+Poll::Ready(%2212%22.parse());%0A++++let+squared+=+res.map_ok(%7Cn%7C+n+*+n);%0A++++assert_eq!(squared,+Poll::Ready(Ok(144)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_err\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#143-145\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_err\" class=\"fn\">map_err</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, U&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(E) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll::Ready&lt;Result&lt;T, F&gt;&gt;</code> by\napplying a function to a contained <code>Poll::Ready(Err)</code> value, leaving all other\nvariants untouched.</p>\n<p>This function can be used to pass through a successful result while handling\nan error.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>res: Poll&lt;<span class=\"prelude-ty\">Result</span>&lt;u8, <span class=\"kw\">_</span>&gt;&gt; = Poll::Ready(<span class=\"string\">\"oops\"</span>.parse());\n<span class=\"kw\">let </span>res = res.map_err(|<span class=\"kw\">_</span>| <span class=\"number\">0_u8</span>);\n<span class=\"macro\">assert_eq!</span>(res, Poll::Ready(<span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3CResult%3Cu8,+_%3E%3E+=+Poll::Ready(%22oops%22.parse());%0A++++let+res+=+res.map_err(%7C_%7C+0_u8);%0A++++assert_eq!(res,+Poll::Ready(Err(0)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#155\">source</a><a href=\"#impl-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_ok-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#172-174\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_ok-1\" class=\"fn\">map_ok</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, E&gt;&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(T) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to <code>Poll&lt;Option&lt;Result&lt;U, E&gt;&gt;&gt;</code> by\napplying a function to a contained <code>Poll::Ready(Some(Ok))</code> value,\nleaving all other variants untouched.</p>\n<p>This function can be used to compose the results of two functions.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>res: Poll&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;u8, <span class=\"kw\">_</span>&gt;&gt;&gt; = Poll::Ready(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"12\"</span>.parse()));\n<span class=\"kw\">let </span>squared = res.map_ok(|n| n * n);\n<span class=\"macro\">assert_eq!</span>(squared, Poll::Ready(<span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(<span class=\"number\">144</span>))));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3COption%3CResult%3Cu8,+_%3E%3E%3E+=+Poll::Ready(Some(%2212%22.parse()));%0A++++let+squared+=+res.map_ok(%7Cn%7C+n+*+n);%0A++++assert_eq!(squared,+Poll::Ready(Some(Ok(144))));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_err-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#202-204\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.map_err-1\" class=\"fn\">map_err</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, U&gt;&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(E) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Maps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to\n<code>Poll::Ready&lt;Option&lt;Result&lt;T, F&gt;&gt;&gt;</code> by applying a function to a\ncontained <code>Poll::Ready(Some(Err))</code> value, leaving all other variants\nuntouched.</p>\n<p>This function can be used to pass through a successful result while handling\nan error.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>res: Poll&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;u8, <span class=\"kw\">_</span>&gt;&gt;&gt; = Poll::Ready(<span class=\"prelude-val\">Some</span>(<span class=\"string\">\"oops\"</span>.parse()));\n<span class=\"kw\">let </span>res = res.map_err(|<span class=\"kw\">_</span>| <span class=\"number\">0_u8</span>);\n<span class=\"macro\">assert_eq!</span>(res, Poll::Ready(<span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(<span class=\"number\">0</span>))));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++let+res:+Poll%3COption%3CResult%3Cu8,+_%3E%3E%3E+=+Poll::Ready(Some(%22oops%22.parse()));%0A++++let+res+=+res.map_err(%7C_%7C+0_u8);%0A++++assert_eq!(res,+Poll::Ready(Some(Err(0))));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Clone-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Debug-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#216\">source</a></span><a href=\"#impl-From%3CT%3E-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#225\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Moves the value into a <a href=\"enum.Poll.html#variant.Ready\" title=\"variant std::task::Poll::Ready\"><code>Poll::Ready</code></a> to make a <code>Poll&lt;T&gt;</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Poll::from(<span class=\"bool-val\">true</span>), Poll::Ready(<span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::Poll;%0A++++assert_eq!(Poll::from(true),+Poll::Ready(true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3COption%3CResult%3CT,+F%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#282-283\">source</a><a href=\"#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3COption%3CResult%3CT,+F%3E%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"../ops/trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;&gt; for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, F&gt;&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_residual\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#286\">source</a><a href=\"#method.from_residual\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(x: <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, F&gt;&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from a compatible <code>Residual</code> type. <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3CResult%3CT,+F%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#251\">source</a><a href=\"#impl-FromResidual%3CResult%3CInfallible,+E%3E%3E-for-Poll%3CResult%3CT,+F%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E, F&gt; <a class=\"trait\" href=\"../ops/trait.FromResidual.html\" title=\"trait std::ops::FromResidual\">FromResidual</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;&gt; for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, F&gt;&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_residual-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#253\">source</a><a href=\"#method.from_residual-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" class=\"fn\">from_residual</a>(x: <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, F&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from a compatible <code>Residual</code> type. <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Hash-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.hash\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Ord-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-PartialEq-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.eq\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-PartialOrd-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#261\">source</a><a href=\"#impl-Try-for-Poll%3COption%3CResult%3CT,+E%3E%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Residual\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value passed to <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"../ops/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#266\">source</a><a href=\"#method.from_output\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(\n    c: &lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>,\n) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from its <code>Output</code> type. <a href=\"../ops/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.branch\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#271\">source</a><a href=\"#method.branch\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"../ops/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Try-for-Poll%3CResult%3CT,+E%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#231\">source</a><a href=\"#impl-Try-for-Poll%3CResult%3CT,+E%3E%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value produced by <code>?</code> when <em>not</em> short-circuiting.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Residual-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Residual-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Try.html#associatedtype.Residual\" class=\"associatedtype\">Residual</a> = <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a>, E&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">The type of the value passed to <a href=\"../ops/trait.FromResidual.html#tymethod.from_residual\" title=\"associated function std::ops::FromResidual::from_residual\"><code>FromResidual::from_residual</code></a>\nas part of <code>?</code> when short-circuiting. <a href=\"../ops/trait.Try.html#associatedtype.Residual\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_output-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#236\">source</a><a href=\"#method.from_output-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.from_output\" class=\"fn\">from_output</a>(c: &lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>) -&gt; <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Constructs the type from its <code>Output</code> type. <a href=\"../ops/trait.Try.html#tymethod.from_output\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.branch-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#241\">source</a><a href=\"#method.branch-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Try.html#tymethod.branch\" class=\"fn\">branch</a>(\n    self,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.ControlFlow.html\" title=\"enum std::ops::ControlFlow\">ControlFlow</a>&lt;&lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>, &lt;<a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>try_trait_v2</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/84277\">#84277</a>)</span></div></span><div class=\"docblock\">Used in <code>?</code> to decide whether the operator should produce a value\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Continue\" title=\"variant std::ops::ControlFlow::Continue\"><code>ControlFlow::Continue</code></a>)\nor propagate a value back to the caller\n(because this returned <a href=\"../ops/enum.ControlFlow.html#variant.Break\" title=\"variant std::ops::ControlFlow::Break\"><code>ControlFlow::Break</code></a>). <a href=\"../ops/trait.Try.html#tymethod.branch\">Read more</a></div></details></div></details><section id=\"impl-Copy-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Copy-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Eq-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Eq-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section><section id=\"impl-StructuralPartialEq-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-StructuralPartialEq-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Poll%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Poll%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"enum\" href=\"enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:37.963Z"
}