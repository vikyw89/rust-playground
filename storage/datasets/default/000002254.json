{
	"title": "std::intrinsics::simd - Rust",
	"url": "https://doc.rust-lang.org/stable/std/intrinsics/simd/index.html",
	"markdown": "# std::intrinsics::simd - Rust\n\nüî¨This is a nightly-only experimental API. (`core_intrinsics`)\n\nExpand description\n\nSIMD compiler intrinsics.\n\nIn this module, a ‚Äúvector‚Äù is any `repr(simd)` type.\n\n-   Add two simd vectors elementwise.\n    \n-   Elementwise vector ‚Äúand‚Äù.\n    \n-   Elementwise calculates the offset from a pointer vector, potentially wrapping.\n    \n-   Numerically cast a vector, elementwise.\n    \n-   Truncate an integer vector to a bitmask.\n    \n-   Reverse bits of each element.\n    \n-   Swap bytes of each element.\n    \n-   Numerically cast a vector, elementwise.\n    \n-   Cast a vector of pointers.\n    \n-   Round up each element to the next highest integer-valued float.\n    \n-   Count the leading zeros of each element.\n    \n-   Count the number of ones in each element.\n    \n-   Count the trailing zeros of each element.\n    \n-   Divide `lhs` by `rhs` elementwise.\n    \n-   Tests elementwise equality of two vectors.\n    \n-   Expose a vector of pointers as a vector of addresses.\n    \n-   Extract an element from a vector.\n    \n-   Elementwise absolute value of a vector.\n    \n-   `T` must be a vector of floats.\n    \n-   `T` must be a vector of floats.\n    \n-   `T` must be a vector of floats.\n    \n-   `T` must be a vector of floats.\n    \n-   `T` must be a vector of floats.\n    \n-   `T` must be a vector of floats.\n    \n-   Round down each element to the next lowest integer-valued float.\n    \n-   Computes `(x*y) + z` for each element, but without any intermediate rounding.\n    \n-   Elementwise maximum of two vectors.\n    \n-   Elementwise minimum of two vectors.\n    \n-   `T` must be a vector of floats.\n    \n-   Takes the square root of each element.\n    \n-   Read a vector of pointers.\n    \n-   Tests if `x` is greater than or equal to `y`, elementwise.\n    \n-   Tests if `x` is greater than `y`, elementwise.\n    \n-   Insert an element into a vector, returning the updated vector.\n    \n-   Tests if `x` is less than or equal to `y`, elementwise.\n    \n-   Tests if `x` is less than `y`, elementwise.\n    \n-   Read a vector of pointers.\n    \n-   Write to a vector of pointers.\n    \n-   Multiply two simd vectors elementwise.\n    \n-   Tests elementwise inequality equality of two vectors.\n    \n-   Elementwise negation of a vector.\n    \n-   Elementwise vector ‚Äúor‚Äù.\n    \n-   Add elements within a vector from left to right.\n    \n-   Add elements within a vector in arbitrary order. May also be re-associated with unordered additions on the inputs/outputs.\n    \n-   Check if all mask values are true.\n    \n-   Logical ‚Äúand‚Äù all elements together.\n    \n-   Check if any mask value is true.\n    \n-   Return the maximum element of a vector.\n    \n-   Return the minimum element of a vector.\n    \n-   Multiply elements within a vector from left to right.\n    \n-   Multiply elements within a vector in arbitrary order. May also be re-associated with unordered additions on the inputs/outputs.\n    \n-   Logical ‚Äúor‚Äù all elements together.\n    \n-   Logical ‚Äúexclusive or‚Äù all elements together.\n    \n-   Remainder of two vectors elementwise\n    \n-   Round each element to the closest integer-valued float. Ties are resolved by rounding away from 0.\n    \n-   Add two simd vectors elementwise, with saturation.\n    \n-   Subtract two simd vectors elementwise, with saturation.\n    \n-   Write to a vector of pointers.\n    \n-   Select elements from a mask.\n    \n-   Select elements from a bitmask.\n    \n-   Elementwise vector left shift, with UB on overflow.\n    \n-   Elementwise vector right shift, with UB on overflow.\n    \n-   Shuffle two vectors by const indices.\n    \n-   Shuffle two vectors by const indices.\n    \n-   Subtract `rhs` from `lhs` elementwise.\n    \n-   Return the integer part of each element as an integer-valued float. In other words, non-integer values are truncated towards zero.\n    \n-   Create a vector of pointers from a vector of addresses.\n    \n-   Elementwise vector ‚Äúexclusive or‚Äù.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"SIMD compiler intrinsics.\"><title>std::intrinsics::simd - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module simd</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module simd</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In std::intrinsics</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../mir/index.html\">mir</a></li><li><a href=\"../simd/index.html\">simd</a></li></ul><h3><a href=\"../index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"../trait.AggregateRawPtr.html\">AggregateRawPtr</a></li></ul><h3><a href=\"../index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"../fn.abort.html\">abort</a></li><li><a href=\"../fn.add_with_overflow.html\">add_with_overflow</a></li><li><a href=\"../fn.aggregate_raw_ptr.html\">aggregate_raw_ptr</a></li><li><a href=\"../fn.arith_offset.html\">arith_offset</a></li><li><a href=\"../fn.assert_inhabited.html\">assert_inhabited</a></li><li><a href=\"../fn.assert_mem_uninitialized_valid.html\">assert_mem_uninitialized_valid</a></li><li><a href=\"../fn.assert_zero_valid.html\">assert_zero_valid</a></li><li><a href=\"../fn.assume.html\">assume</a></li><li><a href=\"../fn.atomic_and_acqrel.html\">atomic_and_acqrel</a></li><li><a href=\"../fn.atomic_and_acquire.html\">atomic_and_acquire</a></li><li><a href=\"../fn.atomic_and_relaxed.html\">atomic_and_relaxed</a></li><li><a href=\"../fn.atomic_and_release.html\">atomic_and_release</a></li><li><a href=\"../fn.atomic_and_seqcst.html\">atomic_and_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_acquire.html\">atomic_cxchg_acqrel_acquire</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_relaxed.html\">atomic_cxchg_acqrel_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_acqrel_seqcst.html\">atomic_cxchg_acqrel_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_acquire_acquire.html\">atomic_cxchg_acquire_acquire</a></li><li><a href=\"../fn.atomic_cxchg_acquire_relaxed.html\">atomic_cxchg_acquire_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_acquire_seqcst.html\">atomic_cxchg_acquire_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_acquire.html\">atomic_cxchg_relaxed_acquire</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_relaxed.html\">atomic_cxchg_relaxed_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_relaxed_seqcst.html\">atomic_cxchg_relaxed_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_release_acquire.html\">atomic_cxchg_release_acquire</a></li><li><a href=\"../fn.atomic_cxchg_release_relaxed.html\">atomic_cxchg_release_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_release_seqcst.html\">atomic_cxchg_release_seqcst</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_acquire.html\">atomic_cxchg_seqcst_acquire</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_relaxed.html\">atomic_cxchg_seqcst_relaxed</a></li><li><a href=\"../fn.atomic_cxchg_seqcst_seqcst.html\">atomic_cxchg_seqcst_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_acquire.html\">atomic_cxchgweak_acqrel_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_relaxed.html\">atomic_cxchgweak_acqrel_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_acqrel_seqcst.html\">atomic_cxchgweak_acqrel_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_acquire.html\">atomic_cxchgweak_acquire_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_relaxed.html\">atomic_cxchgweak_acquire_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_acquire_seqcst.html\">atomic_cxchgweak_acquire_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_acquire.html\">atomic_cxchgweak_relaxed_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_relaxed.html\">atomic_cxchgweak_relaxed_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_relaxed_seqcst.html\">atomic_cxchgweak_relaxed_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_release_acquire.html\">atomic_cxchgweak_release_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_release_relaxed.html\">atomic_cxchgweak_release_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_release_seqcst.html\">atomic_cxchgweak_release_seqcst</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_acquire.html\">atomic_cxchgweak_seqcst_acquire</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_relaxed.html\">atomic_cxchgweak_seqcst_relaxed</a></li><li><a href=\"../fn.atomic_cxchgweak_seqcst_seqcst.html\">atomic_cxchgweak_seqcst_seqcst</a></li><li><a href=\"../fn.atomic_fence_acqrel.html\">atomic_fence_acqrel</a></li><li><a href=\"../fn.atomic_fence_acquire.html\">atomic_fence_acquire</a></li><li><a href=\"../fn.atomic_fence_release.html\">atomic_fence_release</a></li><li><a href=\"../fn.atomic_fence_seqcst.html\">atomic_fence_seqcst</a></li><li><a href=\"../fn.atomic_load_acquire.html\">atomic_load_acquire</a></li><li><a href=\"../fn.atomic_load_relaxed.html\">atomic_load_relaxed</a></li><li><a href=\"../fn.atomic_load_seqcst.html\">atomic_load_seqcst</a></li><li><a href=\"../fn.atomic_load_unordered.html\">atomic_load_unordered</a></li><li><a href=\"../fn.atomic_max_acqrel.html\">atomic_max_acqrel</a></li><li><a href=\"../fn.atomic_max_acquire.html\">atomic_max_acquire</a></li><li><a href=\"../fn.atomic_max_relaxed.html\">atomic_max_relaxed</a></li><li><a href=\"../fn.atomic_max_release.html\">atomic_max_release</a></li><li><a href=\"../fn.atomic_max_seqcst.html\">atomic_max_seqcst</a></li><li><a href=\"../fn.atomic_min_acqrel.html\">atomic_min_acqrel</a></li><li><a href=\"../fn.atomic_min_acquire.html\">atomic_min_acquire</a></li><li><a href=\"../fn.atomic_min_relaxed.html\">atomic_min_relaxed</a></li><li><a href=\"../fn.atomic_min_release.html\">atomic_min_release</a></li><li><a href=\"../fn.atomic_min_seqcst.html\">atomic_min_seqcst</a></li><li><a href=\"../fn.atomic_nand_acqrel.html\">atomic_nand_acqrel</a></li><li><a href=\"../fn.atomic_nand_acquire.html\">atomic_nand_acquire</a></li><li><a href=\"../fn.atomic_nand_relaxed.html\">atomic_nand_relaxed</a></li><li><a href=\"../fn.atomic_nand_release.html\">atomic_nand_release</a></li><li><a href=\"../fn.atomic_nand_seqcst.html\">atomic_nand_seqcst</a></li><li><a href=\"../fn.atomic_or_acqrel.html\">atomic_or_acqrel</a></li><li><a href=\"../fn.atomic_or_acquire.html\">atomic_or_acquire</a></li><li><a href=\"../fn.atomic_or_relaxed.html\">atomic_or_relaxed</a></li><li><a href=\"../fn.atomic_or_release.html\">atomic_or_release</a></li><li><a href=\"../fn.atomic_or_seqcst.html\">atomic_or_seqcst</a></li><li><a href=\"../fn.atomic_singlethreadfence_acqrel.html\">atomic_singlethreadfence_acqrel</a></li><li><a href=\"../fn.atomic_singlethreadfence_acquire.html\">atomic_singlethreadfence_acquire</a></li><li><a href=\"../fn.atomic_singlethreadfence_release.html\">atomic_singlethreadfence_release</a></li><li><a href=\"../fn.atomic_singlethreadfence_seqcst.html\">atomic_singlethreadfence_seqcst</a></li><li><a href=\"../fn.atomic_store_relaxed.html\">atomic_store_relaxed</a></li><li><a href=\"../fn.atomic_store_release.html\">atomic_store_release</a></li><li><a href=\"../fn.atomic_store_seqcst.html\">atomic_store_seqcst</a></li><li><a href=\"../fn.atomic_store_unordered.html\">atomic_store_unordered</a></li><li><a href=\"../fn.atomic_umax_acqrel.html\">atomic_umax_acqrel</a></li><li><a href=\"../fn.atomic_umax_acquire.html\">atomic_umax_acquire</a></li><li><a href=\"../fn.atomic_umax_relaxed.html\">atomic_umax_relaxed</a></li><li><a href=\"../fn.atomic_umax_release.html\">atomic_umax_release</a></li><li><a href=\"../fn.atomic_umax_seqcst.html\">atomic_umax_seqcst</a></li><li><a href=\"../fn.atomic_umin_acqrel.html\">atomic_umin_acqrel</a></li><li><a href=\"../fn.atomic_umin_acquire.html\">atomic_umin_acquire</a></li><li><a href=\"../fn.atomic_umin_relaxed.html\">atomic_umin_relaxed</a></li><li><a href=\"../fn.atomic_umin_release.html\">atomic_umin_release</a></li><li><a href=\"../fn.atomic_umin_seqcst.html\">atomic_umin_seqcst</a></li><li><a href=\"../fn.atomic_xadd_acqrel.html\">atomic_xadd_acqrel</a></li><li><a href=\"../fn.atomic_xadd_acquire.html\">atomic_xadd_acquire</a></li><li><a href=\"../fn.atomic_xadd_relaxed.html\">atomic_xadd_relaxed</a></li><li><a href=\"../fn.atomic_xadd_release.html\">atomic_xadd_release</a></li><li><a href=\"../fn.atomic_xadd_seqcst.html\">atomic_xadd_seqcst</a></li><li><a href=\"../fn.atomic_xchg_acqrel.html\">atomic_xchg_acqrel</a></li><li><a href=\"../fn.atomic_xchg_acquire.html\">atomic_xchg_acquire</a></li><li><a href=\"../fn.atomic_xchg_relaxed.html\">atomic_xchg_relaxed</a></li><li><a href=\"../fn.atomic_xchg_release.html\">atomic_xchg_release</a></li><li><a href=\"../fn.atomic_xchg_seqcst.html\">atomic_xchg_seqcst</a></li><li><a href=\"../fn.atomic_xor_acqrel.html\">atomic_xor_acqrel</a></li><li><a href=\"../fn.atomic_xor_acquire.html\">atomic_xor_acquire</a></li><li><a href=\"../fn.atomic_xor_relaxed.html\">atomic_xor_relaxed</a></li><li><a href=\"../fn.atomic_xor_release.html\">atomic_xor_release</a></li><li><a href=\"../fn.atomic_xor_seqcst.html\">atomic_xor_seqcst</a></li><li><a href=\"../fn.atomic_xsub_acqrel.html\">atomic_xsub_acqrel</a></li><li><a href=\"../fn.atomic_xsub_acquire.html\">atomic_xsub_acquire</a></li><li><a href=\"../fn.atomic_xsub_relaxed.html\">atomic_xsub_relaxed</a></li><li><a href=\"../fn.atomic_xsub_release.html\">atomic_xsub_release</a></li><li><a href=\"../fn.atomic_xsub_seqcst.html\">atomic_xsub_seqcst</a></li><li><a href=\"../fn.bitreverse.html\">bitreverse</a></li><li><a href=\"../fn.black_box.html\">black_box</a></li><li><a href=\"../fn.breakpoint.html\">breakpoint</a></li><li><a href=\"../fn.bswap.html\">bswap</a></li><li><a href=\"../fn.caller_location.html\">caller_location</a></li><li><a href=\"../fn.catch_unwind.html\">catch_unwind</a></li><li><a href=\"../fn.ceilf32.html\">ceilf32</a></li><li><a href=\"../fn.ceilf64.html\">ceilf64</a></li><li><a href=\"../fn.compare_bytes.html\">compare_bytes</a></li><li><a href=\"../fn.const_allocate.html\">const_allocate</a></li><li><a href=\"../fn.const_deallocate.html\">const_deallocate</a></li><li><a href=\"../fn.const_eval_select.html\">const_eval_select</a></li><li><a href=\"../fn.copy.html\">copy</a></li><li><a href=\"../fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"../fn.copysignf32.html\">copysignf32</a></li><li><a href=\"../fn.copysignf64.html\">copysignf64</a></li><li><a href=\"../fn.cosf32.html\">cosf32</a></li><li><a href=\"../fn.cosf64.html\">cosf64</a></li><li><a href=\"../fn.ctlz.html\">ctlz</a></li><li><a href=\"../fn.ctlz_nonzero.html\">ctlz_nonzero</a></li><li><a href=\"../fn.ctpop.html\">ctpop</a></li><li><a href=\"../fn.cttz.html\">cttz</a></li><li><a href=\"../fn.cttz_nonzero.html\">cttz_nonzero</a></li><li><a href=\"../fn.discriminant_value.html\">discriminant_value</a></li><li><a href=\"../fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"../fn.exact_div.html\">exact_div</a></li><li><a href=\"../fn.exp2f32.html\">exp2f32</a></li><li><a href=\"../fn.exp2f64.html\">exp2f64</a></li><li><a href=\"../fn.expf32.html\">expf32</a></li><li><a href=\"../fn.expf64.html\">expf64</a></li><li><a href=\"../fn.fabsf32.html\">fabsf32</a></li><li><a href=\"../fn.fabsf64.html\">fabsf64</a></li><li><a href=\"../fn.fadd_algebraic.html\">fadd_algebraic</a></li><li><a href=\"../fn.fadd_fast.html\">fadd_fast</a></li><li><a href=\"../fn.fdiv_algebraic.html\">fdiv_algebraic</a></li><li><a href=\"../fn.fdiv_fast.html\">fdiv_fast</a></li><li><a href=\"../fn.float_to_int_unchecked.html\">float_to_int_unchecked</a></li><li><a href=\"../fn.floorf32.html\">floorf32</a></li><li><a href=\"../fn.floorf64.html\">floorf64</a></li><li><a href=\"../fn.fmaf32.html\">fmaf32</a></li><li><a href=\"../fn.fmaf64.html\">fmaf64</a></li><li><a href=\"../fn.fmul_algebraic.html\">fmul_algebraic</a></li><li><a href=\"../fn.fmul_fast.html\">fmul_fast</a></li><li><a href=\"../fn.forget.html\">forget</a></li><li><a href=\"../fn.frem_algebraic.html\">frem_algebraic</a></li><li><a href=\"../fn.frem_fast.html\">frem_fast</a></li><li><a href=\"../fn.fsub_algebraic.html\">fsub_algebraic</a></li><li><a href=\"../fn.fsub_fast.html\">fsub_fast</a></li><li><a href=\"../fn.is_val_statically_known.html\">is_val_statically_known</a></li><li><a href=\"../fn.likely.html\">likely</a></li><li><a href=\"../fn.log10f32.html\">log10f32</a></li><li><a href=\"../fn.log10f64.html\">log10f64</a></li><li><a href=\"../fn.log2f32.html\">log2f32</a></li><li><a href=\"../fn.log2f64.html\">log2f64</a></li><li><a href=\"../fn.logf32.html\">logf32</a></li><li><a href=\"../fn.logf64.html\">logf64</a></li><li><a href=\"../fn.maxnumf32.html\">maxnumf32</a></li><li><a href=\"../fn.maxnumf64.html\">maxnumf64</a></li><li><a href=\"../fn.min_align_of.html\">min_align_of</a></li><li><a href=\"../fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"../fn.minnumf32.html\">minnumf32</a></li><li><a href=\"../fn.minnumf64.html\">minnumf64</a></li><li><a href=\"../fn.mul_with_overflow.html\">mul_with_overflow</a></li><li><a href=\"../fn.nearbyintf32.html\">nearbyintf32</a></li><li><a href=\"../fn.nearbyintf64.html\">nearbyintf64</a></li><li><a href=\"../fn.needs_drop.html\">needs_drop</a></li><li><a href=\"../fn.nontemporal_store.html\">nontemporal_store</a></li><li><a href=\"../fn.offset.html\">offset</a></li><li><a href=\"../fn.powf32.html\">powf32</a></li><li><a href=\"../fn.powf64.html\">powf64</a></li><li><a href=\"../fn.powif128.html\">powif128</a></li><li><a href=\"../fn.powif16.html\">powif16</a></li><li><a href=\"../fn.powif32.html\">powif32</a></li><li><a href=\"../fn.powif64.html\">powif64</a></li><li><a href=\"../fn.pref_align_of.html\">pref_align_of</a></li><li><a href=\"../fn.prefetch_read_data.html\">prefetch_read_data</a></li><li><a href=\"../fn.prefetch_read_instruction.html\">prefetch_read_instruction</a></li><li><a href=\"../fn.prefetch_write_data.html\">prefetch_write_data</a></li><li><a href=\"../fn.prefetch_write_instruction.html\">prefetch_write_instruction</a></li><li><a href=\"../fn.ptr_guaranteed_cmp.html\">ptr_guaranteed_cmp</a></li><li><a href=\"../fn.ptr_mask.html\">ptr_mask</a></li><li><a href=\"../fn.ptr_metadata.html\">ptr_metadata</a></li><li><a href=\"../fn.ptr_offset_from.html\">ptr_offset_from</a></li><li><a href=\"../fn.ptr_offset_from_unsigned.html\">ptr_offset_from_unsigned</a></li><li><a href=\"../fn.raw_eq.html\">raw_eq</a></li><li><a href=\"../fn.read_via_copy.html\">read_via_copy</a></li><li><a href=\"../fn.rintf32.html\">rintf32</a></li><li><a href=\"../fn.rintf64.html\">rintf64</a></li><li><a href=\"../fn.rotate_left.html\">rotate_left</a></li><li><a href=\"../fn.rotate_right.html\">rotate_right</a></li><li><a href=\"../fn.roundevenf32.html\">roundevenf32</a></li><li><a href=\"../fn.roundevenf64.html\">roundevenf64</a></li><li><a href=\"../fn.roundf32.html\">roundf32</a></li><li><a href=\"../fn.roundf64.html\">roundf64</a></li><li><a href=\"../fn.rustc_peek.html\">rustc_peek</a></li><li><a href=\"../fn.saturating_add.html\">saturating_add</a></li><li><a href=\"../fn.saturating_sub.html\">saturating_sub</a></li><li><a href=\"../fn.sinf32.html\">sinf32</a></li><li><a href=\"../fn.sinf64.html\">sinf64</a></li><li><a href=\"../fn.size_of.html\">size_of</a></li><li><a href=\"../fn.size_of_val.html\">size_of_val</a></li><li><a href=\"../fn.sqrtf32.html\">sqrtf32</a></li><li><a href=\"../fn.sqrtf64.html\">sqrtf64</a></li><li><a href=\"../fn.sub_with_overflow.html\">sub_with_overflow</a></li><li><a href=\"../fn.three_way_compare.html\">three_way_compare</a></li><li><a href=\"../fn.transmute.html\">transmute</a></li><li><a href=\"../fn.transmute_unchecked.html\">transmute_unchecked</a></li><li><a href=\"../fn.truncf32.html\">truncf32</a></li><li><a href=\"../fn.truncf64.html\">truncf64</a></li><li><a href=\"../fn.type_id.html\">type_id</a></li><li><a href=\"../fn.type_name.html\">type_name</a></li><li><a href=\"../fn.typed_swap.html\">typed_swap</a></li><li><a href=\"../fn.ub_checks.html\">ub_checks</a></li><li><a href=\"../fn.unaligned_volatile_load.html\">unaligned_volatile_load</a></li><li><a href=\"../fn.unaligned_volatile_store.html\">unaligned_volatile_store</a></li><li><a href=\"../fn.unchecked_add.html\">unchecked_add</a></li><li><a href=\"../fn.unchecked_div.html\">unchecked_div</a></li><li><a href=\"../fn.unchecked_mul.html\">unchecked_mul</a></li><li><a href=\"../fn.unchecked_rem.html\">unchecked_rem</a></li><li><a href=\"../fn.unchecked_shl.html\">unchecked_shl</a></li><li><a href=\"../fn.unchecked_shr.html\">unchecked_shr</a></li><li><a href=\"../fn.unchecked_sub.html\">unchecked_sub</a></li><li><a href=\"../fn.unlikely.html\">unlikely</a></li><li><a href=\"../fn.unreachable.html\">unreachable</a></li><li><a href=\"../fn.variant_count.html\">variant_count</a></li><li><a href=\"../fn.volatile_copy_memory.html\">volatile_copy_memory</a></li><li><a href=\"../fn.volatile_copy_nonoverlapping_memory.html\">volatile_copy_nonoverlapping_memory</a></li><li><a href=\"../fn.volatile_load.html\">volatile_load</a></li><li><a href=\"../fn.volatile_set_memory.html\">volatile_set_memory</a></li><li><a href=\"../fn.volatile_store.html\">volatile_store</a></li><li><a href=\"../fn.vtable_align.html\">vtable_align</a></li><li><a href=\"../fn.vtable_size.html\">vtable_size</a></li><li><a href=\"../fn.wrapping_add.html\">wrapping_add</a></li><li><a href=\"../fn.wrapping_mul.html\">wrapping_mul</a></li><li><a href=\"../fn.wrapping_sub.html\">wrapping_sub</a></li><li><a href=\"../fn.write_bytes.html\">write_bytes</a></li><li><a href=\"../fn.write_via_move.html\">write_via_move</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">intrinsics</a>::<wbr><a class=\"mod\" href=\"#\">simd</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#72\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>core_intrinsics</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>SIMD compiler intrinsics.</p>\n<p>In this module, a ‚Äúvector‚Äù is any <code>repr(simd)</code> type.</p>\n</div></details><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">¬ß</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_add.html\" title=\"fn std::intrinsics::simd::simd_add\">simd_add</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Add two simd vectors elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_and.html\" title=\"fn std::intrinsics::simd::simd_and\">simd_and</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise vector ‚Äúand‚Äù.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_arith_offset.html\" title=\"fn std::intrinsics::simd::simd_arith_offset\">simd_arith_offset</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise calculates the offset from a pointer vector, potentially wrapping.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_as.html\" title=\"fn std::intrinsics::simd::simd_as\">simd_as</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Numerically cast a vector, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_bitmask.html\" title=\"fn std::intrinsics::simd::simd_bitmask\">simd_bitmask</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Truncate an integer vector to a bitmask.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_bitreverse.html\" title=\"fn std::intrinsics::simd::simd_bitreverse\">simd_bitreverse</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Reverse bits of each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_bswap.html\" title=\"fn std::intrinsics::simd::simd_bswap\">simd_bswap</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Swap bytes of each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_cast.html\" title=\"fn std::intrinsics::simd::simd_cast\">simd_cast</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Numerically cast a vector, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_cast_ptr.html\" title=\"fn std::intrinsics::simd::simd_cast_ptr\">simd_cast_ptr</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Cast a vector of pointers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_ceil.html\" title=\"fn std::intrinsics::simd::simd_ceil\">simd_ceil</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Round up each element to the next highest integer-valued float.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_ctlz.html\" title=\"fn std::intrinsics::simd::simd_ctlz\">simd_ctlz</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Count the leading zeros of each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_ctpop.html\" title=\"fn std::intrinsics::simd::simd_ctpop\">simd_ctpop</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Count the number of ones in each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_cttz.html\" title=\"fn std::intrinsics::simd::simd_cttz\">simd_cttz</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Count the trailing zeros of each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_div.html\" title=\"fn std::intrinsics::simd::simd_div\">simd_div</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Divide <code>lhs</code> by <code>rhs</code> elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_eq.html\" title=\"fn std::intrinsics::simd::simd_eq\">simd_eq</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests elementwise equality of two vectors.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_expose_provenance.html\" title=\"fn std::intrinsics::simd::simd_expose_provenance\">simd_expose_provenance</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Expose a vector of pointers as a vector of addresses.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_extract.html\" title=\"fn std::intrinsics::simd::simd_extract\">simd_extract</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Extract an element from a vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fabs.html\" title=\"fn std::intrinsics::simd::simd_fabs\">simd_fabs</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise absolute value of a vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fcos.html\" title=\"fn std::intrinsics::simd::simd_fcos\">simd_fcos</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fexp.html\" title=\"fn std::intrinsics::simd::simd_fexp\">simd_fexp</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fexp2.html\" title=\"fn std::intrinsics::simd::simd_fexp2\">simd_fexp2</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_flog.html\" title=\"fn std::intrinsics::simd::simd_flog\">simd_flog</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_flog2.html\" title=\"fn std::intrinsics::simd::simd_flog2\">simd_flog2</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_flog10.html\" title=\"fn std::intrinsics::simd::simd_flog10\">simd_flog10</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_floor.html\" title=\"fn std::intrinsics::simd::simd_floor\">simd_floor</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Round down each element to the next lowest integer-valued float.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fma.html\" title=\"fn std::intrinsics::simd::simd_fma\">simd_fma</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Computes <code>(x*y) + z</code> for each element, but without any intermediate rounding.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fmax.html\" title=\"fn std::intrinsics::simd::simd_fmax\">simd_fmax</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise maximum of two vectors.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fmin.html\" title=\"fn std::intrinsics::simd::simd_fmin\">simd_fmin</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise minimum of two vectors.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fsin.html\" title=\"fn std::intrinsics::simd::simd_fsin\">simd_fsin</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\"><code>T</code> must be a vector of floats.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_fsqrt.html\" title=\"fn std::intrinsics::simd::simd_fsqrt\">simd_fsqrt</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Takes the square root of each element.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_gather.html\" title=\"fn std::intrinsics::simd::simd_gather\">simd_gather</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Read a vector of pointers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_ge.html\" title=\"fn std::intrinsics::simd::simd_ge\">simd_ge</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests if <code>x</code> is greater than or equal to <code>y</code>, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_gt.html\" title=\"fn std::intrinsics::simd::simd_gt\">simd_gt</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests if <code>x</code> is greater than <code>y</code>, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_insert.html\" title=\"fn std::intrinsics::simd::simd_insert\">simd_insert</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Insert an element into a vector, returning the updated vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_le.html\" title=\"fn std::intrinsics::simd::simd_le\">simd_le</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests if <code>x</code> is less than or equal to <code>y</code>, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_lt.html\" title=\"fn std::intrinsics::simd::simd_lt\">simd_lt</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests if <code>x</code> is less than <code>y</code>, elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_masked_load.html\" title=\"fn std::intrinsics::simd::simd_masked_load\">simd_masked_load</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Read a vector of pointers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_masked_store.html\" title=\"fn std::intrinsics::simd::simd_masked_store\">simd_masked_store</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Write to a vector of pointers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_mul.html\" title=\"fn std::intrinsics::simd::simd_mul\">simd_mul</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Multiply two simd vectors elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_ne.html\" title=\"fn std::intrinsics::simd::simd_ne\">simd_ne</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Tests elementwise inequality equality of two vectors.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_neg.html\" title=\"fn std::intrinsics::simd::simd_neg\">simd_neg</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise negation of a vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_or.html\" title=\"fn std::intrinsics::simd::simd_or\">simd_or</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise vector ‚Äúor‚Äù.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_add_ordered.html\" title=\"fn std::intrinsics::simd::simd_reduce_add_ordered\">simd_reduce_add_ordered</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Add elements within a vector from left to right.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_add_unordered.html\" title=\"fn std::intrinsics::simd::simd_reduce_add_unordered\">simd_reduce_add_unordered</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Add elements within a vector in arbitrary order. May also be re-associated with\nunordered additions on the inputs/outputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_all.html\" title=\"fn std::intrinsics::simd::simd_reduce_all\">simd_reduce_all</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Check if all mask values are true.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_and.html\" title=\"fn std::intrinsics::simd::simd_reduce_and\">simd_reduce_and</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Logical ‚Äúand‚Äù all elements together.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_any.html\" title=\"fn std::intrinsics::simd::simd_reduce_any\">simd_reduce_any</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Check if any mask value is true.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_max.html\" title=\"fn std::intrinsics::simd::simd_reduce_max\">simd_reduce_max</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Return the maximum element of a vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_min.html\" title=\"fn std::intrinsics::simd::simd_reduce_min\">simd_reduce_min</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Return the minimum element of a vector.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_mul_ordered.html\" title=\"fn std::intrinsics::simd::simd_reduce_mul_ordered\">simd_reduce_mul_ordered</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Multiply elements within a vector from left to right.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_mul_unordered.html\" title=\"fn std::intrinsics::simd::simd_reduce_mul_unordered\">simd_reduce_mul_unordered</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Multiply elements within a vector in arbitrary order. May also be re-associated with\nunordered additions on the inputs/outputs.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_or.html\" title=\"fn std::intrinsics::simd::simd_reduce_or\">simd_reduce_or</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Logical ‚Äúor‚Äù all elements together.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_reduce_xor.html\" title=\"fn std::intrinsics::simd::simd_reduce_xor\">simd_reduce_xor</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Logical ‚Äúexclusive or‚Äù all elements together.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_rem.html\" title=\"fn std::intrinsics::simd::simd_rem\">simd_rem</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Remainder of two vectors elementwise</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_round.html\" title=\"fn std::intrinsics::simd::simd_round\">simd_round</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Round each element to the closest integer-valued float.\nTies are resolved by rounding away from 0.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_saturating_add.html\" title=\"fn std::intrinsics::simd::simd_saturating_add\">simd_saturating_add</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Add two simd vectors elementwise, with saturation.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_saturating_sub.html\" title=\"fn std::intrinsics::simd::simd_saturating_sub\">simd_saturating_sub</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Subtract two simd vectors elementwise, with saturation.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_scatter.html\" title=\"fn std::intrinsics::simd::simd_scatter\">simd_scatter</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Write to a vector of pointers.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_select.html\" title=\"fn std::intrinsics::simd::simd_select\">simd_select</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Select elements from a mask.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_select_bitmask.html\" title=\"fn std::intrinsics::simd::simd_select_bitmask\">simd_select_bitmask</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Select elements from a bitmask.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_shl.html\" title=\"fn std::intrinsics::simd::simd_shl\">simd_shl</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise vector left shift, with UB on overflow.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_shr.html\" title=\"fn std::intrinsics::simd::simd_shr\">simd_shr</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise vector right shift, with UB on overflow.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_shuffle.html\" title=\"fn std::intrinsics::simd::simd_shuffle\">simd_shuffle</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Shuffle two vectors by const indices.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_shuffle_generic.html\" title=\"fn std::intrinsics::simd::simd_shuffle_generic\">simd_shuffle_generic</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Shuffle two vectors by const indices.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_sub.html\" title=\"fn std::intrinsics::simd::simd_sub\">simd_sub</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Subtract <code>rhs</code> from <code>lhs</code> elementwise.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_trunc.html\" title=\"fn std::intrinsics::simd::simd_trunc\">simd_trunc</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Return the integer part of each element as an integer-valued float.\nIn other words, non-integer values are truncated towards zero.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_with_exposed_provenance.html\" title=\"fn std::intrinsics::simd::simd_with_exposed_provenance\">simd_with_exposed_provenance</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Create a vector of pointers from a vector of addresses.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.simd_xor.html\" title=\"fn std::intrinsics::simd::simd_xor\">simd_xor</a><sup title=\"unsafe function\">‚ö†</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Elementwise vector ‚Äúexclusive or‚Äù.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:19.320Z"
}