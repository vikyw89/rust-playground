{
	"title": "f64x8 in std::simd::prelude - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/prelude/type.f64x8.html",
	"markdown": "# f64x8 in std::simd::prelude - Rust\n\n```\npub type f64x8 = Simd<f64, 8>;\n```\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nA SIMD vector with eight elements of type [`f64`](../../primitive.f64.html \"primitive f64\").\n\n```\nstruct f64x8(/* private fields */);\n```\n\n## Implementations\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#181-184)[§](#impl-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#189)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReverse the order of the elements in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#212)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRotates the vector such that the first `OFFSET` elements of the slice move to the end while the last `self.len() - OFFSET` elements move to the front. After calling `rotate_elements_left`, the element previously at index `OFFSET` will become the first element in the slice.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#236)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRotates the vector such that the first `self.len() - OFFSET` elements of the vector move to the end while the last `OFFSET` elements move to the front. After calling `rotate_elements_right`, the element previously at index `self.len() - OFFSET` will become the first element in the slice.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#273)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nInterleave two vectors.\n\nThe resulting vectors contain elements taken alternatively from `self` and `other`, first filling the first result, and then the second.\n\nThe reverse of this operation is [`Simd::deinterleave`](about:blank/std/simd/prelude/struct.Simd.html#method.deinterleave \"method std::simd::prelude::Simd::deinterleave\").\n\n```\nlet a = Simd::from_array([0, 1, 2, 3]);\nlet b = Simd::from_array([4, 5, 6, 7]);\nlet (x, y) = a.interleave(b);\nassert_eq!(x.to_array(), [0, 4, 1, 5]);\nassert_eq!(y.to_array(), [2, 6, 3, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+(x,+y)+=+a.interleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+4,+1,+5%5D);%0A++++assert_eq!(y.to_array(),+%5B2,+6,+3,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#324)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nDeinterleave two vectors.\n\nThe first result takes every other element of `self` and then `other`, starting with the first element.\n\nThe second result takes every other element of `self` and then `other`, starting with the second element.\n\nThe reverse of this operation is [`Simd::interleave`](about:blank/std/simd/prelude/struct.Simd.html#method.interleave \"method std::simd::prelude::Simd::interleave\").\n\n```\nlet a = Simd::from_array([0, 4, 1, 5]);\nlet b = Simd::from_array([2, 6, 3, 7]);\nlet (x, y) = a.deinterleave(b);\nassert_eq!(x.to_array(), [0, 1, 2, 3]);\nassert_eq!(y.to_array(), [4, 5, 6, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+4,+1,+5%5D);%0A++++let+b+=+Simd::from_array(%5B2,+6,+3,+7%5D);%0A++++let+(x,+y)+=+a.deinterleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+1,+2,+3%5D);%0A++++assert_eq!(y.to_array(),+%5B4,+5,+6,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#368-370)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nResize a vector.\n\nIf `M` > `N`, extends the length of a vector, setting the new elements to `value`. If `M` < `N`, truncates the vector to the first `M` elements.\n\n```\nlet x = u32x4::from_array([0, 1, 2, 3]);\nassert_eq!(x.resize::<8>(9).to_array(), [0, 1, 2, 3, 9, 9, 9, 9]);\nassert_eq!(x.resize::<2>(9).to_array(), [0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+x+=+u32x4::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(x.resize::%3C8%3E(9).to_array(),+%5B0,+1,+2,+3,+9,+9,+9,+9%5D);%0A++++assert_eq!(x.resize::%3C2%3E(9).to_array(),+%5B0,+1%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#108-111)[§](#impl-Simd%3CT,+N%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#114)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nNumber of elements in this vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#130)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the number of elements in this SIMD vector.\n\n##### [§](#examples)Examples\n\n```\nlet v = u32x4::splat(0);\nassert_eq!(v.len(), 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(0);%0A++++assert_eq!(v.len(),+4);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#147)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConstructs a new SIMD vector with all elements set to the given value.\n\n##### [§](#examples-1)Examples\n\n```\nlet v = u32x4::splat(8);\nassert_eq!(v.as_array(), &[8, 8, 8, 8]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(8);%0A++++assert_eq!(v.as_array(),+%26%5B8,+8,+8,+8%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#168)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns an array reference containing the entire SIMD vector.\n\n##### [§](#examples-2)Examples\n\n```\nlet v: u64x4 = Simd::from_array([0, 1, 2, 3]);\nassert_eq!(v.as_array(), &[0, 1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+u64x4%7D;%0A++++let+v:+u64x4+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(v.as_array(),+%26%5B0,+1,+2,+3%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#180)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns a mutable array reference containing the entire SIMD vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#232)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts an array to a SIMD vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#245)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a SIMD vector to an array.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#279)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a slice to a SIMD vector containing `slice[..N]`.\n\n##### [§](#panics)Panics\n\nPanics if the slice’s length is less than the vector’s `Simd::N`. Use `load_or_default` for an alternative that does not panic.\n\n##### [§](#example)Example\n\n```\nlet source = vec![1, 2, 3, 4, 5, 6];\nlet v = u32x4::from_slice(&source);\nassert_eq!(v.as_array(), &[1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::u32x4;%0A++++let+source+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+v+=+u32x4::from_slice(%26source);%0A++++assert_eq!(v.as_array(),+%26%5B1,+2,+3,+4%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#309)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites a SIMD vector to the first `N` elements of a slice.\n\n##### [§](#panics-1)Panics\n\nPanics if the slice’s length is less than the vector’s `Simd::N`.\n\n##### [§](#example-1)Example\n\n```\nlet mut dest = vec![0; 6];\nlet v = u32x4::from_array([1, 2, 3, 4]);\nv.copy_to_slice(&mut dest);\nassert_eq!(&dest, &[1, 2, 3, 4, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+mut+dest+=+vec!%5B0;+6%5D;%0A++++let+v+=+u32x4::from_array(%5B1,+2,+3,+4%5D);%0A++++v.copy_to_slice(%26mut+dest);%0A++++assert_eq!(%26dest,+%26%5B1,+2,+3,+4,+0,+0%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#335-337)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Elements are read so long as they’re in-bounds for the `slice`. Otherwise, the default value for the element type is returned.\n\n##### [§](#examples-3)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11];\n\nlet result = Simd::<i32, 4>::load_or_default(&vec);\nassert_eq!(result, Simd::from_array([10, 11, 0, 0]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++%0A++++let+result+=+Simd::%3Ci32,+4%3E::load_or_default(%26vec);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+0,+0%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#359)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Elements are read so long as they’re in-bounds for the `slice`. Otherwise, the corresponding value from `or` is passed through.\n\n##### [§](#examples-4)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11];\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_or(&vec, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_or(%26vec,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#384-386)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled or out of bounds for the slice, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n##### [§](#examples-5)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet enable = Mask::from_array([true, true, false, true]);\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_select(&vec, enable, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, 13]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#412-416)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled or out of bounds for the slice, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n##### [§](#examples-6)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet enable = Mask::from_array([true, true, false, true]);\nlet or = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::load_select(&vec, enable, or);\nassert_eq!(result, Simd::from_array([10, 11, -3, 13]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#430-434)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements from `slice`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#447-451)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads contiguous elements starting at `ptr`. Each element is read from memory if its corresponding element in `enable` is `true`.\n\nWhen the element is disabled, that memory location is not accessed and the corresponding value from `or` is passed through.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#472)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from potentially discontiguous indices in `slice` to construct a SIMD vector. If an index is out-of-bounds, the element is instead selected from the `or` vector.\n\n##### [§](#examples-7)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]);  // Note the index that is out-of-bounds\nlet alt = Simd::from_array([-5, -4, -3, -2]);\n\nlet result = Simd::gather_or(&vec, idxs, alt);\nassert_eq!(result, Simd::from_array([-5, 13, 10, 15]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::gather_or(%26vec,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+15%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#491-493)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. If an index is out-of-bounds, the element is set to the default given by `T: Default`.\n\n##### [§](#examples-8)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]);  // Note the index that is out-of-bounds\n\nlet result = Simd::gather_or_default(&vec, idxs);\nassert_eq!(result, Simd::from_array([0, 13, 10, 15]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++%0A++++let+result+=+Simd::gather_or_default(%26vec,+idxs);%0A++++assert_eq!(result,+Simd::from_array(%5B0,+13,+10,+15%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#516-521)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. The mask `enable`s all `true` indices and disables all `false` indices. If an index is disabled or is out-of-bounds, the element is selected from the `or` vector.\n\n##### [§](#examples-9)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]); // Includes an out-of-bounds index\nlet alt = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n\nlet result = Simd::gather_select(&vec, enable, idxs, alt);\nassert_eq!(result, Simd::from_array([-5, 13, 10, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++let+result+=+Simd::gather_select(%26vec,+enable,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#557-562)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReads from indices in `slice` to construct a SIMD vector. The mask `enable`s all `true` indices and disables all `false` indices. If an index is disabled, the element is selected from the `or` vector.\n\n##### [§](#safety)Safety\n\nCalling this function with an `enable`d out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting value is not used.\n\n##### [§](#examples-10)Examples\n\n```\nlet vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 5]); // Includes an out-of-bounds index\nlet alt = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n// If this mask was used to gather, it would be unsound. Let's fix that.\nlet enable = enable & idxs.simd_lt(Simd::splat(vec.len()));\n\n// The out-of-bounds index has been masked, so it's safe to gather now.\nlet result = unsafe { Simd::gather_select_unchecked(&vec, enable, idxs, alt) };\nassert_eq!(result, Simd::from_array([-5, 13, 10, -2]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++//+If+this+mask+was+used+to+gather,+it+would+be+unsound.+Let%27s+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+The+out-of-bounds+index+has+been+masked,+so+it%27s+safe+to+gather+now.%0A++++let+result+=+unsafe+%7B+Simd::gather_select_unchecked(%26vec,+enable,+idxs,+alt)+%7D;%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#591-593)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRead elementwise from pointers into a SIMD vector.\n\n##### [§](#safety-1)Safety\n\nEach read must satisfy the same conditions as [`core::ptr::read`](../../../std/ptr/fn.read.html \"fn std::ptr::read\").\n\n##### [§](#example-2)Example\n\n```\nlet values = [6, 2, 4, 9];\nlet offsets = Simd::from_array([1, 0, 0, 3]);\nlet source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\nlet gathered = unsafe { Simd::gather_ptr(source) };\nassert_eq!(gathered, Simd::from_array([2, 6, 6, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_ptr(source)+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+6,+9%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#625-629)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally read elementwise from pointers into a SIMD vector. The mask `enable`s all `true` pointers and disables all `false` pointers. If a pointer is disabled, the element is selected from the `or` vector, and no read is performed.\n\n##### [§](#safety-2)Safety\n\nEnabled elements must satisfy the same conditions as [`core::ptr::read`](../../../std/ptr/fn.read.html \"fn std::ptr::read\").\n\n##### [§](#example-3)Example\n\n```\nlet values = [6, 2, 4, 9];\nlet enable = Mask::from_array([true, true, false, true]);\nlet offsets = Simd::from_array([1, 0, 0, 3]);\nlet source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\nlet gathered = unsafe { Simd::gather_select_ptr(source, enable, Simd::splat(0)) };\nassert_eq!(gathered, Simd::from_array([2, 6, 0, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_select_ptr(source,+enable,+Simd::splat(0))+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+0,+9%5D));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#653)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements to `slice`. The `enable` mask controls which elements are written, as long as they’re in-bounds of the `slice`. If the element is disabled or out of bounds, no memory access to that location is made.\n\n##### [§](#examples-11)Examples\n\n```\nlet mut arr = [0i32; 4];\nlet write = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([false, true, true, true]);\n\nwrite.store_select(&mut arr[..3], enable);\nassert_eq!(arr, [0, -4, -3, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++write.store_select(%26mut+arr%5B..3%5D,+enable);%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+0%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#681-685)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements to `slice`. The `enable` mask controls which elements are written.\n\n##### [§](#safety-3)Safety\n\nEvery enabled element must be in bounds for the `slice`.\n\n##### [§](#examples-12)Examples\n\n```\nlet mut arr = [0i32; 4];\nlet write = Simd::from_array([-5, -4, -3, -2]);\nlet enable = Mask::from_array([false, true, true, true]);\n\nunsafe { write.store_select_unchecked(&mut arr, enable) };\nassert_eq!(arr, [0, -4, -3, -2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++unsafe+%7B+write.store_select_unchecked(%26mut+arr,+enable)+%7D;%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+-2%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#700)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write contiguous elements starting from `ptr`. The `enable` mask controls which elements are written. When disabled, the memory location corresponding to that element is not accessed.\n\n##### [§](#safety-4)Safety\n\nMemory addresses for element are calculated [`pointer::wrapping_offset`](about:blank/std/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") and each enabled element must satisfy the same conditions as [`core::ptr::write`](../../../std/ptr/fn.write.html \"fn std::ptr::write\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#722)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites the values in a SIMD vector to potentially discontiguous indices in `slice`. If an index is out-of-bounds, the write is suppressed without panicking. If two elements in the scattered vector would write to the same index only the last element is guaranteed to actually be written.\n\n##### [§](#examples-13)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]); // Note the duplicate index.\nlet vals = Simd::from_array([-27, 82, -41, 124]);\n\nvals.scatter(&mut vec, idxs); // two logical writes means the last wins.\nassert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Note+the+duplicate+index.%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++%0A++++vals.scatter(%26mut+vec,+idxs);+//+two+logical+writes+means+the+last+wins.%0A++++assert_eq!(vec,+vec!%5B124,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#747)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites values from a SIMD vector to multiple potentially discontiguous indices in `slice`. The mask `enable`s all `true` indices and disables all `false` indices. If an enabled index is out-of-bounds, the write is suppressed without panicking. If two enabled elements in the scattered vector would write to the same index, only the last element is guaranteed to actually be written.\n\n##### [§](#examples-14)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]); // Includes an out-of-bounds index\nlet vals = Simd::from_array([-27, 82, -41, 124]);\nlet enable = Mask::from_array([true, true, true, false]); // Includes a masked element\n\nvals.scatter_select(&mut vec, enable, idxs); // The last write is masked, thus omitted.\nassert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Includes+an+out-of-bounds+index%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++vals.scatter_select(%26mut+vec,+enable,+idxs);+//+The+last+write+is+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#784-789)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrites values from a SIMD vector to multiple potentially discontiguous indices in `slice`. The mask `enable`s all `true` indices and disables all `false` indices. If two enabled elements in the scattered vector would write to the same index, only the last element is guaranteed to actually be written.\n\n##### [§](#safety-5)Safety\n\nCalling this function with an enabled out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_, and may lead to memory corruption.\n\n##### [§](#examples-15)Examples\n\n```\nlet mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\nlet idxs = Simd::from_array([9, 3, 0, 0]);\nlet vals = Simd::from_array([-27, 82, -41, 124]);\nlet enable = Mask::from_array([true, true, true, false]); // Masks the final index\n// If this mask was used to scatter, it would be unsound. Let's fix that.\nlet enable = enable & idxs.simd_lt(Simd::splat(vec.len()));\n\n// We have masked the OOB index, so it's safe to scatter now.\nunsafe { vals.scatter_select_unchecked(&mut vec, enable, idxs); }\n// The second write to index 0 was masked, thus omitted.\nassert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Masks+the+final+index%0A++++//+If+this+mask+was+used+to+scatter,+it+would+be+unsound.+Let%27s+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+We+have+masked+the+OOB+index,+so+it%27s+safe+to+scatter+now.%0A++++unsafe+%7B+vals.scatter_select_unchecked(%26mut+vec,+enable,+idxs);+%7D%0A++++//+The+second+write+to+index+0+was+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#831)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nWrite pointers elementwise into a SIMD vector.\n\n##### [§](#safety-6)Safety\n\nEach write must satisfy the same conditions as [`core::ptr::write`](../../../std/ptr/fn.write.html \"fn std::ptr::write\").\n\n##### [§](#example-4)Example\n\n```\nlet mut values = [0; 4];\nlet offset = Simd::from_array([3, 2, 1, 0]);\nlet ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\nunsafe { Simd::from_array([6, 3, 5, 7]).scatter_ptr(ptrs); }\nassert_eq!(values, [7, 5, 3, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_ptr(ptrs);+%7D%0A++++assert_eq!(values,+%5B7,+5,+3,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#859)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConditionally write pointers elementwise into a SIMD vector. The mask `enable`s all `true` pointers and disables all `false` pointers. If a pointer is disabled, the write to its pointee is skipped.\n\n##### [§](#safety-7)Safety\n\nEnabled pointers must satisfy the same conditions as [`core::ptr::write`](../../../std/ptr/fn.write.html \"fn std::ptr::write\").\n\n##### [§](#example-5)Example\n\n```\nlet mut values = [0; 4];\nlet offset = Simd::from_array([3, 2, 1, 0]);\nlet ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\nlet enable = Mask::from_array([true, true, false, false]);\nunsafe { Simd::from_array([6, 3, 5, 7]).scatter_select_ptr(ptrs, enable); }\nassert_eq!(values, [0, 0, 3, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BMask,+Simd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+false%5D);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_select_ptr(ptrs,+enable);+%7D%0A++++assert_eq!(values,+%5B0,+0,+3,+6%5D);%0A%7D&version=nightly&edition=2021)\n\n## Trait Implementations\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.add)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#impl-Add-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `+` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#method.add-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1007-1010)[§](#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1013)[§](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987)[§](#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990)[§](#method.as_mut-1)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#996-999)[§](#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1002)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976)[§](#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.bitand)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.bitor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.bitxor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#872-875)[§](#impl-Clone-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#4-7)[§](#impl-Debug-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#18)[§](#method.fmt)\n\nA `Simd<T, N>` has a debug format like the one for `[T]`:\n\n```\nlet floats = Simd::<f32, 4>::splat(-1.0);\nassert_eq!(format!(\"{:?}\", [-1.0; 4]), format!(\"{:?}\", floats));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd::Simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd::Simd;%0A++++let+floats+=+Simd::%3Cf32,+4%3E::splat(-1.0);%0A++++assert_eq!(format!(%22%7B:?%7D%22,+%5B-1.0;+4%5D),+format!(%22%7B:?%7D%22,+floats));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#883-886)[§](#impl-Default-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.div)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#impl-Div-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `/` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#method.div-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022)[§](#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025)[§](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#293-296)[§](#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#299)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[§](#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961)[§](#impl-Hash-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#12-16)[§](#impl-Index%3CI%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#20)[§](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/std/ops/trait.Index.html#tymethod.index)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#25-29)[§](#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.mul)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#impl-Mul-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `*` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#method.mul-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[§](#impl-Neg-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37)[§](#method.neg)\n\nPerforms the unary `-` operation. [Read more](about:blank/std/ops/trait.Neg.html#tymethod.neg)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#946-949)[§](#impl-Ord-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#894-897)[§](#impl-PartialEq-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#900)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#914)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-930)[§](#impl-PartialOrd-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#933)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/std/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/std/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/std/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/std/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/std/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#method.product)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#impl-Product-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#method.product-1)\n\nMethod which takes an iterator and generates `Self` from the elements by multiplying the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.rem)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#impl-Rem-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `%` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#method.rem-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `<<` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.shl)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `>>` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.shr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#impl-SimdFloat-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Mask)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[§](#associatedtype.Scalar)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nScalar type contained by this SIMD vector type.\n\n[§](#associatedtype.Bits)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nBit representation of this SIMD vector type.\n\n[§](#associatedtype.Cast)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nA SIMD vector with a different element type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.cast)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nPerforms elementwise conversion of this vector’s elements to another SIMD-valid type. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.cast)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.to_int_unchecked)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds toward zero and converts to the same-width integer type, assuming that the value is finite and fits in that type. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.to_int_unchecked)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.to_bits)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation to an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.from_bits)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRaw transmutation from an unsigned integer vector type with the same size and number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.abs)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the absolute value of the equivalently-indexed element in `self`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.recip)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTakes the reciprocal (inverse) of each element, `1/x`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.to_degrees)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from radians to degrees.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.to_radians)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts each element from degrees to radians.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_sign_positive)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a positive sign, including `+0.0`, `NaN`s with positive sign bit and positive infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_sign_negative)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if it has a negative sign, including `-0.0`, `NaN`s with negative sign bit and negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_nan)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_infinite)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is positive infinity or negative infinity.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_finite)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither infinite nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_subnormal)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is subnormal.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.is_normal)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true for each element if its value is neither zero, infinite, subnormal, nor `NaN`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.signum)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReplaces each element with a number that represents its sign. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.signum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.copysign)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns each element with the magnitude of `self` and the sign of `sign`. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.copysign)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.simd_min)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum of each element. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.simd_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.simd_max)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum of each element. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.simd_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.simd_clamp)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval unless it is NaN. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.reduce_sum)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the sum of the elements of the vector. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_sum)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.reduce_product)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReducing multiply. Returns the product of the elements of the vector. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.reduce_max)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the maximum element in the vector. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_max)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425)[§](#method.reduce_min)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the minimum element in the vector. [Read more](about:blank/std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_min)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[§](#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Mask-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[§](#method.simd_eq)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47)[§](#method.simd_ne)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[§](#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[§](#method.simd_lt)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[§](#method.simd_le)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[§](#method.simd_gt)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153)[§](#method.simd_ge)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#impl-StdFloat-for-Simd%3Cf64,+N%3E)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.fract)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point’s fractional value, with its integer part removed.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.sin)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the sine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.cos)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the cosine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.exp)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base e) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.exp2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base 2) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.ln)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the natural logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.log2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-2 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207)[§](#method.log10)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-10 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57)[§](#method.mul_add)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nElementwise fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add. [Read more](about:blank/std/simd/trait.StdFloat.html#method.mul_add)\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65)[§](#method.sqrt)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the square root value of the equivalently-indexed element in `self`\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98)[§](#method.log)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the logarithm with respect to an arbitrary in the equivalently-indexed elements in `self` and `base`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115)[§](#method.ceil)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the smallest integer greater than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122)[§](#method.floor)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the largest integer value less than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129)[§](#method.round)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds to the nearest integer value. Ties round toward zero.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136)[§](#method.trunc)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point’s integer value, with its fractional part removed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124)[§](#method.sub)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#impl-Sub-for-Simd%3Cf64,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `-` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261)[§](#method.sub-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124)[§](#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#method.sum)\n\nMethod which takes an iterator and generates `Self` from the elements by “summing up” the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#impl-Sum-for-Simd%3Cf64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52)[§](#method.sum-1)\n\nMethod which takes an iterator and generates `Self` from the elements by “summing up” the items.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#impl-ToBytes-for-Simd%3Cf64,+8%3E)\n\n[§](#associatedtype.Bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThis type, reinterpreted as bytes.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.to_ne_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in native byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.to_be_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in big-endian (network) byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.to_le_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturn the memory representation of this integer as a byte array in little-endian byte order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.from_ne_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a native endian integer value from its memory representation as a byte array in native endianness.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.from_be_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in big endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145)[§](#method.from_le_bytes)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate an integer value from its representation as a byte array in little endian.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1041-1044)[§](#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1049)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1054-1057)[§](#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1062)[§](#method.try_from-1)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#865-868)[§](#impl-Copy-for-Simd%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#939-942)[§](#impl-Eq-for-Simd%3CT,+N%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A SIMD vector with eight elements of type `f64`.\"><title>f64x8 in std::simd::prelude - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc type\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">f64x8</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">f64x8</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#aliased-type\">Aliased type</a></h3><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.LEN\">LEN</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_array\">as_array</a></li><li><a href=\"#method.as_mut_array\">as_mut_array</a></li><li><a href=\"#method.copy_to_slice\">copy_to_slice</a></li><li><a href=\"#method.deinterleave\">deinterleave</a></li><li><a href=\"#method.from_array\">from_array</a></li><li><a href=\"#method.from_slice\">from_slice</a></li><li><a href=\"#method.gather_or\">gather_or</a></li><li><a href=\"#method.gather_or_default\">gather_or_default</a></li><li><a href=\"#method.gather_ptr\">gather_ptr</a></li><li><a href=\"#method.gather_select\">gather_select</a></li><li><a href=\"#method.gather_select_ptr\">gather_select_ptr</a></li><li><a href=\"#method.gather_select_unchecked\">gather_select_unchecked</a></li><li><a href=\"#method.interleave\">interleave</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.load_or\">load_or</a></li><li><a href=\"#method.load_or_default\">load_or_default</a></li><li><a href=\"#method.load_select\">load_select</a></li><li><a href=\"#method.load_select_or_default\">load_select_or_default</a></li><li><a href=\"#method.load_select_ptr\">load_select_ptr</a></li><li><a href=\"#method.load_select_unchecked\">load_select_unchecked</a></li><li><a href=\"#method.resize\">resize</a></li><li><a href=\"#method.reverse\">reverse</a></li><li><a href=\"#method.rotate_elements_left\">rotate_elements_left</a></li><li><a href=\"#method.rotate_elements_right\">rotate_elements_right</a></li><li><a href=\"#method.scatter\">scatter</a></li><li><a href=\"#method.scatter_ptr\">scatter_ptr</a></li><li><a href=\"#method.scatter_select\">scatter_select</a></li><li><a href=\"#method.scatter_select_ptr\">scatter_select_ptr</a></li><li><a href=\"#method.scatter_select_unchecked\">scatter_select_unchecked</a></li><li><a href=\"#method.splat\">splat</a></li><li><a href=\"#method.store_select\">store_select</a></li><li><a href=\"#method.store_select_ptr\">store_select_ptr</a></li><li><a href=\"#method.store_select_unchecked\">store_select_unchecked</a></li><li><a href=\"#method.to_array\">to_array</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Add-for-Simd%3Cf64,+N%3E\">Add</a></li><li><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Add&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\">AddAssign&lt;U&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsMut&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\">AsMut&lt;[T]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">AsRef&lt;[T; N]&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\">AsRef&lt;[T]&gt;</a></li><li><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitAnd&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitAndAssign&lt;U&gt;</a></li><li><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitOr&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitOrAssign&lt;U&gt;</a></li><li><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">BitXor&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\">BitXorAssign&lt;U&gt;</a></li><li><a href=\"#impl-Clone-for-Simd%3CT,+N%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Simd%3CT,+N%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Simd%3CT,+N%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Simd%3CT,+N%3E\">Default</a></li><li><a href=\"#impl-Div-for-Simd%3Cf64,+N%3E\">Div</a></li><li><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Div&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\">DivAssign&lt;U&gt;</a></li><li><a href=\"#impl-Eq-for-Simd%3CT,+N%3E\">Eq</a></li><li><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">From&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\">From&lt;__m512d&gt;</a></li><li><a href=\"#impl-Hash-for-Simd%3CT,+N%3E\">Hash</a></li><li><a href=\"#impl-Index%3CI%3E-for-Simd%3CT,+N%3E\">Index&lt;I&gt;</a></li><li><a href=\"#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\">IndexMut&lt;I&gt;</a></li><li><a href=\"#impl-Mul-for-Simd%3Cf64,+N%3E\">Mul</a></li><li><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Mul&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\">MulAssign&lt;U&gt;</a></li><li><a href=\"#impl-Neg-for-Simd%3Cf64,+N%3E\">Neg</a></li><li><a href=\"#impl-Ord-for-Simd%3CT,+N%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Simd%3CT,+N%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Simd%3CT,+N%3E\">PartialOrd</a></li><li><a href=\"#impl-Product-for-Simd%3Cf64,+N%3E\">Product</a></li><li><a href=\"#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\">Product&lt;&amp;'a Simd&lt;f64, N&gt;&gt;</a></li><li><a href=\"#impl-Rem-for-Simd%3Cf64,+N%3E\">Rem</a></li><li><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Rem&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\">RemAssign&lt;U&gt;</a></li><li><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Shl&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\">ShlAssign&lt;U&gt;</a></li><li><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Shr&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\">ShrAssign&lt;U&gt;</a></li><li><a href=\"#impl-SimdFloat-for-Simd%3Cf64,+N%3E\">SimdFloat</a></li><li><a href=\"#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-StdFloat-for-Simd%3Cf64,+N%3E\">StdFloat</a></li><li><a href=\"#impl-Sub-for-Simd%3Cf64,+N%3E\">Sub</a></li><li><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\">Sub&lt;&amp;Simd&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\">SubAssign&lt;U&gt;</a></li><li><a href=\"#impl-Sum-for-Simd%3Cf64,+N%3E\">Sum</a></li><li><a href=\"#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\">Sum&lt;&amp;'a Simd&lt;f64, N&gt;&gt;</a></li><li><a href=\"#impl-ToBytes-for-Simd%3Cf64,+8%3E\">ToBytes</a></li><li><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\">TryFrom&lt;&amp;[T]&gt;</a></li><li><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\">TryFrom&lt;&amp;mut [T]&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::simd::prelude</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SimdConstPtr.html\">SimdConstPtr</a></li><li><a href=\"trait.SimdFloat.html\">SimdFloat</a></li><li><a href=\"trait.SimdInt.html\">SimdInt</a></li><li><a href=\"trait.SimdMutPtr.html\">SimdMutPtr</a></li><li><a href=\"trait.SimdOrd.html\">SimdOrd</a></li><li><a href=\"trait.SimdPartialEq.html\">SimdPartialEq</a></li><li><a href=\"trait.SimdPartialOrd.html\">SimdPartialOrd</a></li><li><a href=\"trait.SimdUint.html\">SimdUint</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Type Alias <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">simd</a>::<wbr><a href=\"index.html\">prelude</a>::<wbr><a class=\"type\" href=\"#\">f64x8</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/alias.rs.html#55-175\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub type f64x8 = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.f64.html\">f64</a>, 8&gt;;</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A SIMD vector with eight elements of type <a href=\"../../primitive.f64.html\" title=\"primitive f64\"><code>f64</code></a>.</p>\n</div></details><h2 id=\"aliased-type\" class=\"section-header\">Aliased Type<a href=\"#aliased-type\" class=\"anchor\">§</a></h2><pre class=\"rust item-decl\"><code>struct f64x8(<span class=\"comment\">/* private fields */</span>);</code></pre><script src=\"../../../type.impl/std/simd/prelude/struct.Simd.js\" data-self-path=\"std::simd::f64x8\" async=\"\"></script><h2 id=\"implementations\">Implementations</h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#181-184\">source</a><a href=\"#impl-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#189\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.reverse\" class=\"fn\">reverse</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reverse the order of the elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_elements_left\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#212\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.rotate_elements_left\" class=\"fn\">rotate_elements_left</a>&lt;const OFFSET: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rotates the vector such that the first <code>OFFSET</code> elements of the slice move to the end\nwhile the last <code>self.len() - OFFSET</code> elements move to the front. After calling <code>rotate_elements_left</code>,\nthe element previously at index <code>OFFSET</code> will become the first element in the slice.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_elements_right\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#236\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.rotate_elements_right\" class=\"fn\">rotate_elements_right</a>&lt;const OFFSET: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rotates the vector such that the first <code>self.len() - OFFSET</code> elements of the vector move to\nthe end while the last <code>OFFSET</code> elements move to the front. After calling <code>rotate_elements_right</code>,\nthe element previously at index <code>self.len() - OFFSET</code> will become the first element in the slice.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.interleave\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#273\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.interleave\" class=\"fn\">interleave</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; (<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Interleave two vectors.</p>\n<p>The resulting vectors contain elements taken alternatively from <code>self</code> and <code>other</code>, first\nfilling the first result, and then the second.</p>\n<p>The reverse of this operation is <a href=\"../../../std/simd/prelude/struct.Simd.html#method.deinterleave\" title=\"method std::simd::prelude::Simd::deinterleave\"><code>Simd::deinterleave</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = Simd::from_array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span>(x, y) = a.interleave(b);\n<span class=\"macro\">assert_eq!</span>(x.to_array(), [<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(y.to_array(), [<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+(x,+y)+=+a.interleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+4,+1,+5%5D);%0A++++assert_eq!(y.to_array(),+%5B2,+6,+3,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deinterleave\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#324\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.deinterleave\" class=\"fn\">deinterleave</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; (<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Deinterleave two vectors.</p>\n<p>The first result takes every other element of <code>self</code> and then <code>other</code>, starting with\nthe first element.</p>\n<p>The second result takes every other element of <code>self</code> and then <code>other</code>, starting with\nthe second element.</p>\n<p>The reverse of this operation is <a href=\"../../../std/simd/prelude/struct.Simd.html#method.interleave\" title=\"method std::simd::prelude::Simd::interleave\"><code>Simd::interleave</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]);\n<span class=\"kw\">let </span>b = Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span>(x, y) = a.deinterleave(b);\n<span class=\"macro\">assert_eq!</span>(x.to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(y.to_array(), [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+a+=+Simd::from_array(%5B0,+4,+1,+5%5D);%0A++++let+b+=+Simd::from_array(%5B2,+6,+3,+7%5D);%0A++++let+(x,+y)+=+a.deinterleave(b);%0A++++assert_eq!(x.to_array(),+%5B0,+1,+2,+3%5D);%0A++++assert_eq!(y.to_array(),+%5B4,+5,+6,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/swizzle.rs.html#368-370\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.resize\" class=\"fn\">resize</a>&lt;const M: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt;(self, value: T) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, M&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;M&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Resize a vector.</p>\n<p>If <code>M</code> &gt; <code>N</code>, extends the length of a vector, setting the new elements to <code>value</code>.\nIf <code>M</code> &lt; <code>N</code>, truncates the vector to the first <code>M</code> elements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = u32x4::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(x.resize::&lt;<span class=\"number\">8</span>&gt;(<span class=\"number\">9</span>).to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>]);\n<span class=\"macro\">assert_eq!</span>(x.resize::&lt;<span class=\"number\">2</span>&gt;(<span class=\"number\">9</span>).to_array(), [<span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+x+=+u32x4::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(x.resize::%3C8%3E(9).to_array(),+%5B0,+1,+2,+3,+9,+9,+9,+9%5D);%0A++++assert_eq!(x.resize::%3C2%3E(9).to_array(),+%5B0,+1%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Simd%3CT,+N%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#108-111\">source</a><a href=\"#impl-Simd%3CT,+N%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.LEN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#114\">source</a><h4 class=\"code-header\">pub const <a href=\"../../../std/simd/prelude/struct.Simd.html#associatedconstant.LEN\" class=\"constant\">LEN</a>: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a> = N</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Number of elements in this vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#130\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the number of elements in this SIMD vector.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = u32x4::splat(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(v.len(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(0);%0A++++assert_eq!(v.len(),+4);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splat\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#147\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.splat\" class=\"fn\">splat</a>(value: T) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new SIMD vector with all elements set to the given value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = u32x4::splat(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+v+=+u32x4::splat(8);%0A++++assert_eq!(v.as_array(),+%26%5B8,+8,+8,+8%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#168\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.as_array\" class=\"fn\">as_array</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an array reference containing the entire SIMD vector.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v: u64x4 = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+u64x4%7D;%0A++++let+v:+u64x4+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++assert_eq!(v.as_array(),+%26%5B0,+1,+2,+3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#180\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.as_mut_array\" class=\"fn\">as_mut_array</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable array reference containing the entire SIMD vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#232\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.from_array\" class=\"fn\">from_array</a>(array: <a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts an array to a SIMD vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#245\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.to_array\" class=\"fn\">to_array</a>(self) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a SIMD vector to an array.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#279\">source</a><h4 class=\"code-header\">pub const fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.from_slice\" class=\"fn\">from_slice</a>(slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a slice to a SIMD vector containing <code>slice[..N]</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the slice’s length is less than the vector’s <code>Simd::N</code>.\nUse <code>load_or_default</code> for an alternative that does not panic.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>source = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>v = u32x4::from_slice(<span class=\"kw-2\">&amp;</span>source);\n<span class=\"macro\">assert_eq!</span>(v.as_array(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::u32x4;%0A++++let+source+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+v+=+u32x4::from_slice(%26source);%0A++++assert_eq!(v.as_array(),+%26%5B1,+2,+3,+4%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#309\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.copy_to_slice\" class=\"fn\">copy_to_slice</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a SIMD vector to the first <code>N</code> elements of a slice.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the slice’s length is less than the vector’s <code>Simd::N</code>.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dest = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>v = u32x4::from_array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\nv.copy_to_slice(<span class=\"kw-2\">&amp;mut </span>dest);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>dest, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::u32x4;%0A++++let+mut+dest+=+vec!%5B0;+6%5D;%0A++++let+v+=+u32x4::from_array(%5B1,+2,+3,+4%5D);%0A++++v.copy_to_slice(%26mut+dest);%0A++++assert_eq!(%26dest,+%26%5B1,+2,+3,+4,+0,+0%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#335-337\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_or_default\" class=\"fn\">load_or_default</a>(slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Elements are read so long as they’re in-bounds for\nthe <code>slice</code>. Otherwise, the default value for the element type is returned.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>];\n\n<span class=\"kw\">let </span>result = Simd::&lt;i32, <span class=\"number\">4</span>&gt;::load_or_default(<span class=\"kw-2\">&amp;</span>vec);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++%0A++++let+result+=+Simd::%3Ci32,+4%3E::load_or_default(%26vec);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+0,+0%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_or\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#359\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_or\" class=\"fn\">load_or</a>(slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>, or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Elements are read so long as they’re in-bounds for\nthe <code>slice</code>. Otherwise, the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>];\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_or(<span class=\"kw-2\">&amp;</span>vec, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11%5D;%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_or(%26vec,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#384-386\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_select_or_default\" class=\"fn\">load_select_or_default</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled or out of bounds for the slice, that memory location\nis not accessed and the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_select(<span class=\"kw-2\">&amp;</span>vec, enable, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, <span class=\"number\">13</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#412-416\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_select\" class=\"fn\">load_select</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled or out of bounds for the slice, that memory location\nis not accessed and the corresponding value from <code>or</code> is passed through.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>or = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::load_select(<span class=\"kw-2\">&amp;</span>vec, enable, or);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">10</span>, <span class=\"number\">11</span>, -<span class=\"number\">3</span>, <span class=\"number\">13</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+or+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::load_select(%26vec,+enable,+or);%0A++++assert_eq!(result,+Simd::from_array(%5B10,+11,+-3,+13%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#430-434\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_select_unchecked\" class=\"fn\">load_select_unchecked</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements from <code>slice</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled, that memory location is not accessed and the corresponding\nvalue from <code>or</code> is passed through.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.load_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#447-451\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.load_select_ptr\" class=\"fn\">load_select_ptr</a>(\n    ptr: <a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*const T</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads contiguous elements starting at <code>ptr</code>. Each element is read from memory if its\ncorresponding element in <code>enable</code> is <code>true</code>.</p>\n<p>When the element is disabled, that memory location is not accessed and the corresponding\nvalue from <code>or</code> is passed through.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_or\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#472\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_or\" class=\"fn\">gather_or</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from potentially discontiguous indices in <code>slice</code> to construct a SIMD vector.\nIf an index is out-of-bounds, the element is instead selected from the <code>or</code> vector.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);  <span class=\"comment\">// Note the index that is out-of-bounds\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>result = Simd::gather_or(<span class=\"kw-2\">&amp;</span>vec, idxs, alt);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++%0A++++let+result+=+Simd::gather_or(%26vec,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+15%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_or_default\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#491-493\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_or_default\" class=\"fn\">gather_or_default</a>(slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>, idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nIf an index is out-of-bounds, the element is set to the default given by <code>T: Default</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);  <span class=\"comment\">// Note the index that is out-of-bounds\n\n</span><span class=\"kw\">let </span>result = Simd::gather_or_default(<span class=\"kw-2\">&amp;</span>vec, idxs);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);++//+Note+the+index+that+is+out-of-bounds%0A++++%0A++++let+result+=+Simd::gather_or_default(%26vec,+idxs);%0A++++assert_eq!(result,+Simd::from_array(%5B0,+13,+10,+15%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#516-521\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_select\" class=\"fn\">gather_select</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an index is disabled or is out-of-bounds, the element is selected from the <code>or</code> vector.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n\n</span><span class=\"kw\">let </span>result = Simd::gather_select(<span class=\"kw-2\">&amp;</span>vec, enable, idxs, alt);\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++let+result+=+Simd::gather_select(%26vec,+enable,+idxs,+alt);%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#557-562\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_select_unchecked\" class=\"fn\">gather_select_unchecked</a>(\n    slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads from indices in <code>slice</code> to construct a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an index is disabled, the element is selected from the <code>or</code> vector.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this function with an <code>enable</code>d out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting value is not used.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>alt = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n// If this mask was used to gather, it would be unsound. Let's fix that.\n</span><span class=\"kw\">let </span>enable = enable &amp; idxs.simd_lt(Simd::splat(vec.len()));\n\n<span class=\"comment\">// The out-of-bounds index has been masked, so it's safe to gather now.\n</span><span class=\"kw\">let </span>result = <span class=\"kw\">unsafe </span>{ Simd::gather_select_unchecked(<span class=\"kw-2\">&amp;</span>vec, enable, idxs, alt) };\n<span class=\"macro\">assert_eq!</span>(result, Simd::from_array([-<span class=\"number\">5</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>, -<span class=\"number\">2</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+5%5D);+//+Includes+an+out-of-bounds+index%0A++++let+alt+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++//+If+this+mask+was+used+to+gather,+it+would+be+unsound.+Let's+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+The+out-of-bounds+index+has+been+masked,+so+it's+safe+to+gather+now.%0A++++let+result+=+unsafe+%7B+Simd::gather_select_unchecked(%26vec,+enable,+idxs,+alt)+%7D;%0A++++assert_eq!(result,+Simd::from_array(%5B-5,+13,+10,+-2%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#591-593\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_ptr\" class=\"fn\">gather_ptr</a>(source: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*const T</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Read elementwise from pointers into a SIMD vector.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>Each read must satisfy the same conditions as <a href=\"../../../std/ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>core::ptr::read</code></a>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>values = [<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>offsets = Simd::from_array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n<span class=\"kw\">let </span>gathered = <span class=\"kw\">unsafe </span>{ Simd::gather_ptr(source) };\n<span class=\"macro\">assert_eq!</span>(gathered, Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_ptr(source)+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+6,+9%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gather_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#625-629\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.gather_select_ptr\" class=\"fn\">gather_select_ptr</a>(\n    source: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*const T</a>, N&gt;,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n    or: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally read elementwise from pointers into a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> pointers and disables all <code>false</code> pointers.\nIf a pointer is disabled, the element is selected from the <code>or</code> vector,\nand no read is performed.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>Enabled elements must satisfy the same conditions as <a href=\"../../../std/ptr/fn.read.html\" title=\"fn std::ptr::read\"><code>core::ptr::read</code></a>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>values = [<span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>offsets = Simd::from_array([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>source = Simd::splat(values.as_ptr()).wrapping_add(offsets);\n<span class=\"kw\">let </span>gathered = <span class=\"kw\">unsafe </span>{ Simd::gather_select_ptr(source, enable, Simd::splat(<span class=\"number\">0</span>)) };\n<span class=\"macro\">assert_eq!</span>(gathered, Simd::from_array([<span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::prelude::*;%0A++++let+values+=+%5B6,+2,+4,+9%5D;%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+true%5D);%0A++++let+offsets+=+Simd::from_array(%5B1,+0,+0,+3%5D);%0A++++let+source+=+Simd::splat(values.as_ptr()).wrapping_add(offsets);%0A++++let+gathered+=+unsafe+%7B+Simd::gather_select_ptr(source,+enable,+Simd::splat(0))+%7D;%0A++++assert_eq!(gathered,+Simd::from_array(%5B2,+6,+0,+9%5D));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#653\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.store_select\" class=\"fn\">store_select</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements to <code>slice</code>. The <code>enable</code> mask controls\nwhich elements are written, as long as they’re in-bounds of the <code>slice</code>.\nIf the element is disabled or out of bounds, no memory access to that location\nis made.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = [<span class=\"number\">0i32</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>write = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>]);\n\nwrite.store_select(<span class=\"kw-2\">&amp;mut </span>arr[..<span class=\"number\">3</span>], enable);\n<span class=\"macro\">assert_eq!</span>(arr, [<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++write.store_select(%26mut+arr%5B..3%5D,+enable);%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+0%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#681-685\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.store_select_unchecked\" class=\"fn\">store_select_unchecked</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements to <code>slice</code>. The <code>enable</code> mask controls\nwhich elements are written.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Every enabled element must be in bounds for the <code>slice</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = [<span class=\"number\">0i32</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>write = Simd::from_array([-<span class=\"number\">5</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>]);\n\n<span class=\"kw\">unsafe </span>{ write.store_select_unchecked(<span class=\"kw-2\">&amp;mut </span>arr, enable) };\n<span class=\"macro\">assert_eq!</span>(arr, [<span class=\"number\">0</span>, -<span class=\"number\">4</span>, -<span class=\"number\">3</span>, -<span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+arr+=+%5B0i32;+4%5D;%0A++++let+write+=+Simd::from_array(%5B-5,+-4,+-3,+-2%5D);%0A++++let+enable+=+Mask::from_array(%5Bfalse,+true,+true,+true%5D);%0A++++%0A++++unsafe+%7B+write.store_select_unchecked(%26mut+arr,+enable)+%7D;%0A++++assert_eq!(arr,+%5B0,+-4,+-3,+-2%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.store_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#700\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.store_select_ptr\" class=\"fn\">store_select_ptr</a>(\n    self,\n    ptr: <a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*mut T</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;T as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write contiguous elements starting from <code>ptr</code>.\nThe <code>enable</code> mask controls which elements are written.\nWhen disabled, the memory location corresponding to that element is not accessed.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>Memory addresses for element are calculated <a href=\"../../../std/primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>pointer::wrapping_offset</code></a> and\neach enabled element must satisfy the same conditions as <a href=\"../../../std/ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#722\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.scatter\" class=\"fn\">scatter</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>, idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes the values in a SIMD vector to potentially discontiguous indices in <code>slice</code>.\nIf an index is out-of-bounds, the write is suppressed without panicking.\nIf two elements in the scattered vector would write to the same index\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// Note the duplicate index.\n</span><span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n\nvals.scatter(<span class=\"kw-2\">&amp;mut </span>vec, idxs); <span class=\"comment\">// two logical writes means the last wins.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[<span class=\"number\">124</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Simd;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Note+the+duplicate+index.%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++%0A++++vals.scatter(%26mut+vec,+idxs);+//+two+logical+writes+means+the+last+wins.%0A++++assert_eq!(vec,+vec!%5B124,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#747\">source</a><h4 class=\"code-header\">pub fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.scatter_select\" class=\"fn\">scatter_select</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes values from a SIMD vector to multiple potentially discontiguous indices in <code>slice</code>.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf an enabled index is out-of-bounds, the write is suppressed without panicking.\nIf two enabled elements in the scattered vector would write to the same index,\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]); <span class=\"comment\">// Includes an out-of-bounds index\n</span><span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Includes a masked element\n\n</span>vals.scatter_select(<span class=\"kw-2\">&amp;mut </span>vec, enable, idxs); <span class=\"comment\">// The last write is masked, thus omitted.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[-<span class=\"number\">41</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);+//+Includes+an+out-of-bounds+index%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Includes+a+masked+element%0A++++%0A++++vals.scatter_select(%26mut+vec,+enable,+idxs);+//+The+last+write+is+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#784-789\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.scatter_select_unchecked\" class=\"fn\">scatter_select_unchecked</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n    idxs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes values from a SIMD vector to multiple potentially discontiguous indices in <code>slice</code>.\nThe mask <code>enable</code>s all <code>true</code> indices and disables all <code>false</code> indices.\nIf two enabled elements in the scattered vector would write to the same index,\nonly the last element is guaranteed to actually be written.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>Calling this function with an enabled out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>,\nand may lead to memory corruption.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>];\n<span class=\"kw\">let </span>idxs = Simd::from_array([<span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>vals = Simd::from_array([-<span class=\"number\">27</span>, <span class=\"number\">82</span>, -<span class=\"number\">41</span>, <span class=\"number\">124</span>]);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]); <span class=\"comment\">// Masks the final index\n// If this mask was used to scatter, it would be unsound. Let's fix that.\n</span><span class=\"kw\">let </span>enable = enable &amp; idxs.simd_lt(Simd::splat(vec.len()));\n\n<span class=\"comment\">// We have masked the OOB index, so it's safe to scatter now.\n</span><span class=\"kw\">unsafe </span>{ vals.scatter_select_unchecked(<span class=\"kw-2\">&amp;mut </span>vec, enable, idxs); }\n<span class=\"comment\">// The second write to index 0 was masked, thus omitted.\n</span><span class=\"macro\">assert_eq!</span>(vec, <span class=\"macro\">vec!</span>[-<span class=\"number\">41</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">82</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>, <span class=\"number\">16</span>, <span class=\"number\">17</span>, <span class=\"number\">18</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+cmp::SimdPartialOrd,+Mask%7D;%0A++++let+mut+vec:+Vec%3Ci32%3E+=+vec!%5B10,+11,+12,+13,+14,+15,+16,+17,+18%5D;%0A++++let+idxs+=+Simd::from_array(%5B9,+3,+0,+0%5D);%0A++++let+vals+=+Simd::from_array(%5B-27,+82,+-41,+124%5D);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+true,+false%5D);+//+Masks+the+final+index%0A++++//+If+this+mask+was+used+to+scatter,+it+would+be+unsound.+Let's+fix+that.%0A++++let+enable+=+enable+%26+idxs.simd_lt(Simd::splat(vec.len()));%0A++++%0A++++//+We+have+masked+the+OOB+index,+so+it's+safe+to+scatter+now.%0A++++unsafe+%7B+vals.scatter_select_unchecked(%26mut+vec,+enable,+idxs);+%7D%0A++++//+The+second+write+to+index+0+was+masked,+thus+omitted.%0A++++assert_eq!(vec,+vec!%5B-41,+11,+12,+82,+14,+15,+16,+17,+18%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#831\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.scatter_ptr\" class=\"fn\">scatter_ptr</a>(self, dest: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*mut T</a>, N&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Write pointers elementwise into a SIMD vector.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>Each write must satisfy the same conditions as <a href=\"../../../std/ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = [<span class=\"number\">0</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>offset = Simd::from_array([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n<span class=\"kw\">unsafe </span>{ Simd::from_array([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]).scatter_ptr(ptrs); }\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BSimd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_ptr(ptrs);+%7D%0A++++assert_eq!(values,+%5B7,+5,+3,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scatter_select_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#859\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"../../../std/simd/prelude/struct.Simd.html#tymethod.scatter_select_ptr\" class=\"fn\">scatter_select_ptr</a>(\n    self,\n    dest: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.pointer.html\">*mut T</a>, N&gt;,\n    enable: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.isize.html\">isize</a>, N&gt;,\n)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Conditionally write pointers elementwise into a SIMD vector.\nThe mask <code>enable</code>s all <code>true</code> pointers and disables all <code>false</code> pointers.\nIf a pointer is disabled, the write to its pointee is skipped.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>Enabled pointers must satisfy the same conditions as <a href=\"../../../std/ptr/fn.write.html\" title=\"fn std::ptr::write\"><code>core::ptr::write</code></a>.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = [<span class=\"number\">0</span>; <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>offset = Simd::from_array([<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"kw\">let </span>ptrs = Simd::splat(values.as_mut_ptr()).wrapping_add(offset);\n<span class=\"kw\">let </span>enable = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>]);\n<span class=\"kw\">unsafe </span>{ Simd::from_array([<span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]).scatter_select_ptr(ptrs, enable); }\n<span class=\"macro\">assert_eq!</span>(values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7BMask,+Simd,+ptr::SimdMutPtr%7D;%0A++++let+mut+values+=+%5B0;+4%5D;%0A++++let+offset+=+Simd::from_array(%5B3,+2,+1,+0%5D);%0A++++let+ptrs+=+Simd::splat(values.as_mut_ptr()).wrapping_add(offset);%0A++++let+enable+=+Mask::from_array(%5Btrue,+true,+false,+false%5D);%0A++++unsafe+%7B+Simd::from_array(%5B6,+3,+5,+7%5D).scatter_select_ptr(ptrs,+enable);+%7D%0A++++assert_eq!(values,+%5B0,+0,+3,+6%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\">Trait Implementations</h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Add%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../../../std/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Add-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Add-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.add-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Add.html#associatedtype.Output\" title=\"type std::ops::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>+</code> operation. <a href=\"../../../std/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-AddAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.AddAssign.html\" title=\"trait std::ops::AddAssign\">AddAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Add.html\" title=\"trait std::ops::Add\">Add</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>+=</code> operation. <a href=\"../../../std/ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1007-1010\">source</a><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1013\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#984-987\">source</a><a href=\"#impl-AsMut%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#990\">source</a><a href=\"#method.as_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#996-999\">source</a><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1002\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#973-976\">source</a><a href=\"#impl-AsRef%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#979\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitAnd%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type std::ops::BitAnd::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../../../std/ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitAndAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../../../std/ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitOr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.BitOr.html#associatedtype.Output\" title=\"type std::ops::BitOr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../../std/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitOrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../../../std/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-BitXor%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../../../std/ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-BitXorAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"../../../std/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#872-875\">source</a><a href=\"#impl-Clone-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#878\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../../std/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../../std/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#4-7\">source</a><a href=\"#impl-Debug-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/fmt.rs.html#18\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../../std/fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../../std/fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>A <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>floats = Simd::&lt;f32, <span class=\"number\">4</span>&gt;::splat(-<span class=\"number\">1.0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, [-<span class=\"number\">1.0</span>; <span class=\"number\">4</span>]), <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, floats));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd::Simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd::Simd;%0A++++let+floats+=+Simd::%3Cf32,+4%3E::splat(-1.0);%0A++++assert_eq!(format!(%22%7B:?%7D%22,+%5B-1.0;+4%5D),+format!(%22%7B:?%7D%22,+floats));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#883-886\">source</a><a href=\"#impl-Default-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#889\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../../../std/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Div%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../../../std/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Div-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Div-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.div-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Div.html#associatedtype.Output\" title=\"type std::ops::Div::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>/</code> operation. <a href=\"../../../std/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-DivAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.DivAssign.html\" title=\"trait std::ops::DivAssign\">DivAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Div.html\" title=\"trait std::ops::Div\">Div</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>/=</code> operation. <a href=\"../../../std/ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1019-1022\">source</a><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1025\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"../../../std/primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#293-296\">source</a><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;Mask&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html#299\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: Mask&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#impl-From%3C__m512d%3E-for-Simd%3Cf64,+8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../std/convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html#41\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/struct.__m512d.html\" title=\"struct core::core_arch::x86::__m512d\">__m512d</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#958-961\">source</a><a href=\"#impl-Hash-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#964-966\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../../std/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../../../std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../../../std/hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../../std/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#12-16\">source</a><a href=\"#impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    I: <a class=\"trait\" href=\"../../../std/slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../../../std/slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#20\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../../../std/ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#25-29\">source</a><a href=\"#impl-IndexMut%3CI%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    I: <a class=\"trait\" href=\"../../../std/slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#32\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"../../../std/ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Mul%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../../../std/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mul-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Mul-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.mul-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Mul.html#associatedtype.Output\" title=\"type std::ops::Mul::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>*</code> operation. <a href=\"../../../std/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-MulAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.MulAssign.html\" title=\"trait std::ops::MulAssign\">MulAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Mul.html\" title=\"trait std::ops::Mul\">Mul</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>*=</code> operation. <a href=\"../../../std/ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Neg-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#impl-Neg-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html#23-37\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Neg.html\" title=\"trait std::ops::Neg\">Neg</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Neg.html#associatedtype.Output\" title=\"type std::ops::Neg::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>-</code> operation. <a href=\"../../../std/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#946-949\">source</a><a href=\"#impl-Ord-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#952\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"../../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../../std/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../../../std/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../../../std/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../../std/marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../../../std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../../../std/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#894-897\">source</a><a href=\"#impl-PartialEq-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#900\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#914\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-930\">source</a><a href=\"#impl-PartialOrd-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#933\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"../../../std/option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../../std/cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../../std/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../../std/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../../std/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../../std/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../../std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../../std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../../std/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Product%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../../std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Product-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Product-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.product-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../../std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Rem%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../../../std/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Rem-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Rem-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.rem-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Rem.html#associatedtype.Output\" title=\"type std::ops::Rem::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>%</code> operation. <a href=\"../../../std/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-RemAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.RemAssign.html\" title=\"trait std::ops::RemAssign\">RemAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Rem.html\" title=\"trait std::ops::Rem\">Rem</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>%=</code> operation. <a href=\"../../../std/ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shl%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Shl.html#associatedtype.Output\" title=\"type std::ops::Shl::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;</code> operation. <a href=\"../../../std/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-ShlAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.ShlAssign.html\" title=\"trait std::ops::ShlAssign\">ShlAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Shl.html\" title=\"trait std::ops::Shl\">Shl</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&lt;&lt;=</code> operation. <a href=\"../../../std/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Shr%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Shr.html#associatedtype.Output\" title=\"type std::ops::Shr::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;</code> operation. <a href=\"../../../std/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-ShrAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.ShrAssign.html\" title=\"trait std::ops::ShrAssign\">ShrAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Shr.html\" title=\"trait std::ops::Shr\">Shr</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>&gt;&gt;=</code> operation. <a href=\"../../../std/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#impl-SimdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../../../std/primitive.i64.html\">i64</a> as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Mask type used for manipulating this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Scalar\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Scalar\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" class=\"associatedtype\">Scalar</a> = <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Scalar type contained by this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Bits\" class=\"associatedtype\">Bits</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Bit representation of this SIMD vector type.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Cast\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cast\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Cast\" class=\"associatedtype\">Cast</a>&lt;T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt; = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">A SIMD vector with a different element type.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.cast\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Performs elementwise conversion of this vector’s elements to another SIMD-valid type. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.cast\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_int_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_int_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\" class=\"fn\">to_int_unchecked</a>&lt;I&gt;(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Cast\" title=\"type std::simd::prelude::SimdFloat::Cast\">Cast</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../../std/simd/trait.SimdCast.html\" title=\"trait std::simd::SimdCast\">SimdCast</a>,\n    &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a>: <a class=\"trait\" href=\"../../../std/convert/trait.FloatToInt.html\" title=\"trait std::convert::FloatToInt\">FloatToInt</a>&lt;I&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds toward zero and converts to the same-width integer type, assuming that\nthe value is finite and fits in that type. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.to_int_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.to_bits\" class=\"fn\">to_bits</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.u64.html\">u64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation to an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.from_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.from_bits\" class=\"fn\">from_bits</a>(bits: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.u64.html\">u64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Raw transmutation from an unsigned integer vector type with the\nsame size and number of elements.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the absolute value of the\nequivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.recip\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.recip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.recip\" class=\"fn\">recip</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Takes the reciprocal (inverse) of each element, <code>1/x</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_degrees\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_degrees\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.to_degrees\" class=\"fn\">to_degrees</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from radians to degrees.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_radians\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.to_radians\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.to_radians\" class=\"fn\">to_radians</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Converts each element from degrees to radians.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_positive\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_positive\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_sign_positive\" class=\"fn\">is_sign_positive</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a positive sign, including\n<code>+0.0</code>, <code>NaN</code>s with positive sign bit and positive infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sign_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_sign_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_sign_negative\" class=\"fn\">is_sign_negative</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if it has a negative sign, including\n<code>-0.0</code>, <code>NaN</code>s with negative sign bit and negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_nan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_nan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_nan\" class=\"fn\">is_nan</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_infinite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_infinite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_infinite\" class=\"fn\">is_infinite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is positive infinity or negative infinity.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_finite\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_finite\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_finite\" class=\"fn\">is_finite</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither infinite nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_subnormal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_subnormal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_subnormal\" class=\"fn\">is_subnormal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is subnormal.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_normal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.is_normal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.is_normal\" class=\"fn\">is_normal</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdFloat::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns true for each element if its value is neither zero, infinite,\nsubnormal, nor <code>NaN</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.signum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.signum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Replaces each element with a number that represents its sign. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.signum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copysign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.copysign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.copysign\" class=\"fn\">copysign</a>(self, sign: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns each element with the magnitude of <code>self</code> and the sign of <code>sign</code>. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.copysign\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum of each element. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum of each element. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.simd_clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;, max: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval unless it is NaN. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.simd_clamp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_sum\" class=\"fn\">reduce_sum</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the sum of the elements of the vector. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_product\" class=\"fn\">reduce_product</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Reducing multiply.  Returns the product of the elements of the vector. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_max\" class=\"fn\">reduce_max</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the maximum element in the vector. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html#425\">source</a><a href=\"#method.reduce_min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_min\" class=\"fn\">reduce_min</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdFloat.html\" title=\"trait std::simd::prelude::SimdFloat\">SimdFloat</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdFloat.html#associatedtype.Scalar\" title=\"type std::simd::prelude::SimdFloat::Scalar\">Scalar</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the minimum element in the vector. <a href=\"../../../std/simd/prelude/trait.SimdFloat.html#tymethod.reduce_min\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#impl-SimdPartialEq-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a> as <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.SimdElement.html#associatedtype.Mask\" title=\"type std::simd::SimdElement::Mask\">Mask</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#47\">source</a><a href=\"#method.simd_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#impl-SimdPartialOrd-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#153\">source</a><a href=\"#method.simd_ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/prelude/trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/prelude/trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/simd/trait.StdFloat.html\" title=\"trait std::simd::StdFloat\">StdFloat</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fract\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.fract\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point’s fractional value, with its integer part removed.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sin\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.sin\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the sine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cos\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.cos\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the cosine of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base e) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exp2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.exp2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the exponential (base 2) of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ln\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.ln\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the natural logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-2 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#method.log10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the base-10 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57\">source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.mul_add\" class=\"fn\">mul_add</a>(self, a: Self, b: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Elementwise fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding error,\nyielding a more accurate result than an unfused multiply-add. <a href=\"../../../std/simd/trait.StdFloat.html#method.mul_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65\">source</a><a href=\"#method.sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the square root value\nof the equivalently-indexed element in <code>self</code></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98\">source</a><a href=\"#method.log\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.log\" class=\"fn\">log</a>(self, base: Self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Produces a vector where every element has the logarithm with respect to an arbitrary\nin the equivalently-indexed elements in <code>self</code> and <code>base</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115\">source</a><a href=\"#method.ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the smallest integer greater than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122\">source</a><a href=\"#method.floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.floor\" class=\"fn\">floor</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the largest integer value less than or equal to each element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.round\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129\">source</a><a href=\"#method.round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.round\" class=\"fn\">round</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Rounds to the nearest integer value. Ties round toward zero.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trunc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136\">source</a><a href=\"#method.trunc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.StdFloat.html#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the floating point’s integer value, with its fractional part removed.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#impl-Sub%3C%26Simd%3CT,+N%3E%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html#82-124\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../../../std/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sub-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#impl-Sub-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#236-261\">source</a><a href=\"#method.sub-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt; as <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/ops/trait.Sub.html#associatedtype.Output\" title=\"type std::ops::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>-</code> operation. <a href=\"../../../std/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#impl-SubAssign%3CU%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/ops/trait.SubAssign.html\" title=\"trait std::ops::SubAssign\">SubAssign</a>&lt;U&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;: <a class=\"trait\" href=\"../../../std/ops/trait.Sub.html\" title=\"trait std::ops::Sub\">Sub</a>&lt;U, Output = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;&gt;,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html#33-124\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: U)</h4></section></summary><div class=\"docblock\">Performs the <code>-=</code> operation. <a href=\"../../../std/ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Sum%3C%26Simd%3Cf64,+N%3E%3E-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../../std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Sum-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#impl-Sum-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/iter.rs.html#52\">source</a><a href=\"#method.sum-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../../std/iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, N&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToBytes-for-Simd%3Cf64,+8%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#impl-ToBytes-for-Simd%3Cf64,+8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.u8.html\">u8</a>, core::::core_simd::to_bytes::{impl#60}::Bytes::{constant#0}&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">This type, reinterpreted as bytes.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in native byte\norder.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in big-endian\n(network) byte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.to_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Return the memory representation of this integer as a byte array in little-endian\nbyte order.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create a native endian integer value from its memory representation as a byte array\nin native endianness.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in big endian.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html#145\">source</a><a href=\"#method.from_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/simd/trait.ToBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt; as <a class=\"trait\" href=\"../../../std/simd/trait.ToBytes.html\" title=\"trait std::simd::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"../../../std/simd/trait.ToBytes.html#associatedtype.Bytes\" title=\"type std::simd::ToBytes::Bytes\">Bytes</a>) -&gt; <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../../std/primitive.f64.html\">f64</a>, 8&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Create an integer value from its representation as a byte array in little endian.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1041-1044\">source</a><a href=\"#impl-TryFrom%3C%26%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../../std/array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1049\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;<a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../../../std/array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1054-1057\">source</a><a href=\"#impl-TryFrom%3C%26mut+%5BT%5D%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../std/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../../std/array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1062\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../std/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(slice: &amp;mut <a class=\"primitive\" href=\"../../../std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../../../std/result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;, <a class=\"struct\" href=\"../../../std/array/struct.TryFromSliceError.html\" title=\"struct std::array::TryFromSliceError\">TryFromSliceError</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><section id=\"impl-Copy-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#865-868\">source</a><a href=\"#impl-Copy-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,</div></h3></section><section id=\"impl-Eq-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#939-942\">source</a><a href=\"#impl-Eq-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../../std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../../std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../../../std/simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../../../std/simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../../../std/simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../../../std/simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"../../../std/cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:27:06.917Z"
}