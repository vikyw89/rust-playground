{
	"title": "UpperHex in std::fmt - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fmt/trait.UpperHex.html",
	"markdown": "# UpperHex in std::fmt - Rust\n\n## Trait [std](../index.html)::[fmt](index.html)::[UpperHex](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#959) ·\n\n```\npub trait UpperHex {\n    // Required method\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), Error>;\n}\n```\n\nExpand description\n\n`X` formatting.\n\nThe `UpperHex` trait should format its output as a number in hexadecimal, with `A` through `F` in upper case.\n\nFor primitive signed integers (`i8` to `i128`, and `isize`), negative values are formatted as the two’s complement representation.\n\nThe alternate flag, `#`, adds a `0x` in front of the output.\n\nFor more information on formatters, see [the module-level documentation](../../std/fmt/index.html).\n\n## [§](#examples)Examples\n\nBasic usage with `i32`:\n\n```\nlet y = 42; // 42 is '2A' in hex\n\nassert_eq!(format!(\"{y:X}\"), \"2A\");\nassert_eq!(format!(\"{y:#X}\"), \"0x2A\");\n\nassert_eq!(format!(\"{:X}\", -16), \"FFFFFFF0\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+y+=+42;+//+42+is+%272A%27+in+hex%0A++++%0A++++assert_eq!(format!(%22%7By:X%7D%22),+%222A%22);%0A++++assert_eq!(format!(%22%7By:%23X%7D%22),+%220x2A%22);%0A++++%0A++++assert_eq!(format!(%22%7B:X%7D%22,+-16),+%22FFFFFFF0%22);%0A%7D&edition=2021)\n\nImplementing `UpperHex` on a type:\n\n```\nuse std::fmt;\n\nstruct Length(i32);\n\nimpl fmt::UpperHex for Length {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let val = self.0;\n\n        fmt::UpperHex::fmt(&val, f) // delegate to i32's implementation\n    }\n}\n\nlet l = Length(i32::MAX);\n\nassert_eq!(format!(\"l as hex is: {l:X}\"), \"l as hex is: 7FFFFFFF\");\n\nassert_eq!(format!(\"l as hex is: {l:#010X}\"), \"l as hex is: 0x7FFFFFFF\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Length(i32);%0A++++%0A++++impl+fmt::UpperHex+for+Length+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+val+=+self.0;%0A++++%0A++++++++++++fmt::UpperHex::fmt(%26val,+f)+//+delegate+to+i32%27s+implementation%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+l+=+Length(i32::MAX);%0A++++%0A++++assert_eq!(format!(%22l+as+hex+is:+%7Bl:X%7D%22),+%22l+as+hex+is:+7FFFFFFF%22);%0A++++%0A++++assert_eq!(format!(%22l+as+hex+is:+%7Bl:%23010X%7D%22),+%22l+as+hex+is:+0x7FFFFFFF%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#962)\n\nFormats the value using the given formatter.\n\n##### [§](#errors)Errors\n\nThis function should return [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") if, and only if, the provided [`Formatter`](struct.Formatter.html \"struct std::fmt::Formatter\") returns [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\"). String formatting is considered an infallible operation; this function only returns a [`Result`](type.Result.html \"type std::fmt::Result\") because writing to the underlying stream might fail and it must provide a way to propagate the fact that an error has occurred back up the stack.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`X` formatting.\"><title>UpperHex in std::fmt - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">UpperHex</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">UpperHex</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.fmt\">fmt</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::fmt</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arguments.html\">Arguments</a></li><li><a href=\"struct.DebugList.html\">DebugList</a></li><li><a href=\"struct.DebugMap.html\">DebugMap</a></li><li><a href=\"struct.DebugSet.html\">DebugSet</a></li><li><a href=\"struct.DebugStruct.html\">DebugStruct</a></li><li><a href=\"struct.DebugTuple.html\">DebugTuple</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.Formatter.html\">Formatter</a></li><li><a href=\"struct.FormatterFn.html\">FormatterFn</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Alignment.html\">Alignment</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Binary.html\">Binary</a></li><li><a href=\"trait.Debug.html\">Debug</a></li><li><a href=\"trait.Display.html\">Display</a></li><li><a href=\"trait.LowerExp.html\">LowerExp</a></li><li><a href=\"trait.LowerHex.html\">LowerHex</a></li><li><a href=\"trait.Octal.html\">Octal</a></li><li><a href=\"trait.Pointer.html\">Pointer</a></li><li><a href=\"trait.UpperExp.html\">UpperExp</a></li><li><a href=\"trait.UpperHex.html\">UpperHex</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.format.html\">format</a></li><li><a href=\"fn.write.html\">write</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Debug.html\">Debug</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fmt</a>::<wbr><a class=\"trait\" href=\"#\">UpperHex</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#959\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait UpperHex {\n    // Required method\n    fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>X</code> formatting.</p>\n<p>The <code>UpperHex</code> trait should format its output as a number in hexadecimal, with <code>A</code> through <code>F</code>\nin upper case.</p>\n<p>For primitive signed integers (<code>i8</code> to <code>i128</code>, and <code>isize</code>),\nnegative values are formatted as the two’s complement representation.</p>\n<p>The alternate flag, <code>#</code>, adds a <code>0x</code> in front of the output.</p>\n<p>For more information on formatters, see <a href=\"../../std/fmt/index.html\">the module-level documentation</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage with <code>i32</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>y = <span class=\"number\">42</span>; <span class=\"comment\">// 42 is '2A' in hex\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{y:X}\"</span>), <span class=\"string\">\"2A\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{y:#X}\"</span>), <span class=\"string\">\"0x2A\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:X}\"</span>, -<span class=\"number\">16</span>), <span class=\"string\">\"FFFFFFF0\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+y+=+42;+//+42+is+'2A'+in+hex%0A++++%0A++++assert_eq!(format!(%22%7By:X%7D%22),+%222A%22);%0A++++assert_eq!(format!(%22%7By:%23X%7D%22),+%220x2A%22);%0A++++%0A++++assert_eq!(format!(%22%7B:X%7D%22,+-16),+%22FFFFFFF0%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Implementing <code>UpperHex</code> on a type:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Length(i32);\n\n<span class=\"kw\">impl </span>fmt::UpperHex <span class=\"kw\">for </span>Length {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span>val = <span class=\"self\">self</span>.<span class=\"number\">0</span>;\n\n        fmt::UpperHex::fmt(<span class=\"kw-2\">&amp;</span>val, f) <span class=\"comment\">// delegate to i32's implementation\n    </span>}\n}\n\n<span class=\"kw\">let </span>l = Length(i32::MAX);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"l as hex is: {l:X}\"</span>), <span class=\"string\">\"l as hex is: 7FFFFFFF\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"l as hex is: {l:#010X}\"</span>), <span class=\"string\">\"l as hex is: 0x7FFFFFFF\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Length(i32);%0A++++%0A++++impl+fmt::UpperHex+for+Length+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+val+=+self.0;%0A++++%0A++++++++++++fmt::UpperHex::fmt(%26val,+f)+//+delegate+to+i32's+implementation%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+l+=+Length(i32::MAX);%0A++++%0A++++assert_eq!(format!(%22l+as+hex+is:+%7Bl:X%7D%22),+%22l+as+hex+is:+7FFFFFFF%22);%0A++++%0A++++assert_eq!(format!(%22l+as+hex+is:+%7Bl:%23010X%7D%22),+%22l+as+hex+is:+0x7FFFFFFF%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fmt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#962\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Formats the value using the given formatter.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function should return <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> if, and only if, the provided <a href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\"><code>Formatter</code></a> returns <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>.\nString formatting is considered an infallible operation; this function only\nreturns a <a href=\"type.Result.html\" title=\"type std::fmt::Result\"><code>Result</code></a> because writing to the underlying stream might fail and it must\nprovide a way to propagate the fact that an error has occurred back up the stack.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-UpperHex-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-UpperHex-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h3></section><section id=\"impl-UpperHex-for-i16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#180\">source</a></span><a href=\"#impl-UpperHex-for-i16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a></h3></section><section id=\"impl-UpperHex-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h3></section><section id=\"impl-UpperHex-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h3></section><section id=\"impl-UpperHex-for-i128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#183\">source</a></span><a href=\"#impl-UpperHex-for-i128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a></h3></section><section id=\"impl-UpperHex-for-isize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#178\">source</a></span><a href=\"#impl-UpperHex-for-isize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h3></section><section id=\"impl-UpperHex-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#179\">source</a></span><a href=\"#impl-UpperHex-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section><section id=\"impl-UpperHex-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#180\">source</a></span><a href=\"#impl-UpperHex-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section><section id=\"impl-UpperHex-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section><section id=\"impl-UpperHex-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#182\">source</a></span><a href=\"#impl-UpperHex-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section><section id=\"impl-UpperHex-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#183\">source</a></span><a href=\"#impl-UpperHex-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section><section id=\"impl-UpperHex-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#178\">source</a></span><a href=\"#impl-UpperHex-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section><section id=\"impl-UpperHex-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2364\">source</a></span><a href=\"#impl-UpperHex-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UpperHex-for-%26mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2364\">source</a></span><a href=\"#impl-UpperHex-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UpperHex-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#138\">source</a></span><a href=\"#impl-UpperHex-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a>,</div></h3></section><section id=\"impl-UpperHex-for-Saturating%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/saturating.rs.html#76\">source</a></span><a href=\"#impl-UpperHex-for-Saturating%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"../num/struct.Saturating.html\" title=\"struct std::num::Saturating\">Saturating</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a>,</div></h3></section><section id=\"impl-UpperHex-for-Wrapping%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/wrapping.rs.html#81\">source</a></span><a href=\"#impl-UpperHex-for-Wrapping%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a> for <a class=\"struct\" href=\"../num/struct.Wrapping.html\" title=\"struct std::num::Wrapping\">Wrapping</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.UpperHex.html\" title=\"trait std::fmt::UpperHex\">UpperHex</a>,</div></h3></section></div><script src=\"../../trait.impl/core/fmt/trait.UpperHex.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:26.811Z"
}