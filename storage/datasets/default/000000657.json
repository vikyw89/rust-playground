{
	"title": "Enumerations - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/enumerations.html",
	"markdown": "# Enumerations - The Rust Reference\n\n> **Syntax**  \n> _Enumeration_ :  \n>    `enum` [IDENTIFIER](../identifiers.html)  [_GenericParams_](generics.html)? [_WhereClause_](about:blank/generics.html#where-clauses)? `{` _EnumItems_? `}`\n> \n> _EnumItems_ :  \n>    _EnumItem_ ( `,` _EnumItem_ )\\* `,`?\n> \n> _EnumItem_ :  \n>    _OuterAttribute_\\* [_Visibility_](../visibility-and-privacy.html)?  \n>    [IDENTIFIER](../identifiers.html) ( _EnumItemTuple_ | _EnumItemStruct_ )? _EnumItemDiscriminant_?\n> \n> _EnumItemTuple_ :  \n>    `(` [_TupleFields_](structs.html)? `)`\n> \n> _EnumItemStruct_ :  \n>    `{` [_StructFields_](structs.html)? `}`\n> \n> _EnumItemDiscriminant_ :  \n>    `=` [_Expression_](../expressions.html)\n\nAn _enumeration_, also referred to as an _enum_, is a simultaneous definition of a nominal [enumerated type](../types/enum.html) as well as a set of _constructors_, that can be used to create or pattern-match values of the corresponding enumerated type.\n\nEnumerations are declared with the keyword `enum`.\n\nAn example of an `enum` item and its use:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Animal {\n    Dog,\n    Cat,\n}\n\nlet mut a: Animal = Animal::Dog;\na = Animal::Cat;\n}\n```\n\nEnum constructors can have either named or unnamed fields:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Animal {\n    Dog(String, f64),\n    Cat { name: String, weight: f64 },\n}\n\nlet mut a: Animal = Animal::Dog(\"Cocoa\".to_string(), 37.2);\na = Animal::Cat { name: \"Spotty\".to_string(), weight: 2.7 };\n}\n```\n\nIn this example, `Cat` is a _struct-like enum variant_, whereas `Dog` is simply called an enum variant.\n\nAn enum where no constructors contain fields are called a _field-less enum_. For example, this is a fieldless enum:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Fieldless {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n}\n```\n\nIf a field-less enum only contains unit variants, the enum is called an _unit-only enum_. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Enum {\n    Foo = 3,\n    Bar = 2,\n    Baz = 1,\n}\n}\n```\n\n## [Discriminants](#discriminants)\n\nEach enum instance has a _discriminant_: an integer logically associated to it that is used to determine which variant it holds.\n\nUnder the [default representation](about:blank/type-layout.html#the-default-representation), the discriminant is interpreted as an `isize` value. However, the compiler is allowed to use a smaller type (or another means of distinguishing variants) in its actual memory layout.\n\n### [Assigning discriminant values](#assigning-discriminant-values)\n\n#### [Explicit discriminants](#explicit-discriminants)\n\nIn two circumstances, the discriminant of a variant may be explicitly set by following the variant name with `=` and a [constant expression](about:blank/const_eval.html#constant-expressions):\n\n1.  if the enumeration is \"[unit-only](#unit-only-enum)\".\n    \n2.  if a [primitive representation](about:blank/type-layout.html#primitive-representations) is used. For example:\n    \n    ```rust\n    #![allow(unused)]\n    fn main() {\n    #[repr(u8)]\n    enum Enum {\n        Unit = 3,\n        Tuple(u16),\n        Struct {\n            a: u8,\n            b: u16,\n        } = 1,\n    }\n    }\n    ```\n    \n\n#### [Implicit discriminants](#implicit-discriminants)\n\nIf a discriminant for a variant is not specified, then it is set to one higher than the discriminant of the previous variant in the declaration. If the discriminant of the first variant in the declaration is unspecified, then it is set to zero.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Foo {\n    Bar,            // 0\n    Baz = 123,      // 123\n    Quux,           // 124\n}\n\nlet baz_discriminant = Foo::Baz as u32;\nassert_eq!(baz_discriminant, 123);\n}\n```\n\n#### [Restrictions](#restrictions)\n\nIt is an error when two variants share the same discriminant.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum SharedDiscriminantError {\n    SharedA = 1,\n    SharedB = 1\n}\n\nenum SharedDiscriminantError2 {\n    Zero,       // 0\n    One,        // 1\n    OneToo = 1  // 1 (collision with previous!)\n}\n}\n```\n\nIt is also an error to have an unspecified discriminant where the previous discriminant is the maximum value for the size of the discriminant.\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u8)]\nenum OverflowingDiscriminantError {\n    Max = 255,\n    MaxPlusOne // Would be 256, but that overflows the enum.\n}\n\n#[repr(u8)]\nenum OverflowingDiscriminantError2 {\n    MaxMinusOne = 254, // 254\n    Max,               // 255\n    MaxPlusOne         // Would be 256, but that overflows the enum.\n}\n}\n```\n\n### [Accessing discriminant](#accessing-discriminant)\n\n#### [Via `mem::discriminant`](#via-memdiscriminant)\n\n[`mem::discriminant`](../../std/mem/fn.discriminant.html) returns an opaque reference to the discriminant of an enum value which can be compared. This cannot be used to get the value of the discriminant.\n\n#### [Casting](#casting)\n\nIf an enumeration is [unit-only](#unit-only-enum) (with no tuple and struct variants), then its discriminant can be directly accessed with a [numeric cast](about:blank/expressions/operator-expr.html#semantics); e.g.:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Enum {\n    Foo,\n    Bar,\n    Baz,\n}\n\nassert_eq!(0, Enum::Foo as isize);\nassert_eq!(1, Enum::Bar as isize);\nassert_eq!(2, Enum::Baz as isize);\n}\n```\n\n[Field-less enums](#field-less-enum) can be casted if they do not have explicit discriminants, or where only unit variants are explicit.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Fieldless {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n\nassert_eq!(0, Fieldless::Tuple() as isize);\nassert_eq!(1, Fieldless::Struct{} as isize);\nassert_eq!(2, Fieldless::Unit as isize);\n\n#[repr(u8)]\nenum FieldlessWithDiscrimants {\n    First = 10,\n    Tuple(),\n    Second = 20,\n    Struct{},\n    Unit,\n}\n\nassert_eq!(10, FieldlessWithDiscrimants::First as u8);\nassert_eq!(11, FieldlessWithDiscrimants::Tuple() as u8);\nassert_eq!(20, FieldlessWithDiscrimants::Second as u8);\nassert_eq!(21, FieldlessWithDiscrimants::Struct{} as u8);\nassert_eq!(22, FieldlessWithDiscrimants::Unit as u8);\n}\n```\n\n#### [Pointer casting](#pointer-casting)\n\nIf the enumeration specifies a [primitive representation](about:blank/type-layout.html#primitive-representations), then the discriminant may be reliably accessed via unsafe pointer casting:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[repr(u8)]\nenum Enum {\n    Unit,\n    Tuple(bool),\n    Struct{a: bool},\n}\n\nimpl Enum {\n    fn discriminant(&self) -> u8 {\n        unsafe { *(self as *const Self as *const u8) }\n    }\n}\n\nlet unit_like = Enum::Unit;\nlet tuple_like = Enum::Tuple(true);\nlet struct_like = Enum::Struct{a: false};\n\nassert_eq!(0, unit_like.discriminant());\nassert_eq!(1, tuple_like.discriminant());\nassert_eq!(2, struct_like.discriminant());\n}\n```\n\n## [Zero-variant enums](#zero-variant-enums)\n\nEnums with zero variants are known as _zero-variant enums_. As they have no valid values, they cannot be instantiated.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum ZeroVariants {}\n}\n```\n\nZero-variant enums are equivalent to the [never type](../types/never.html), but they cannot be coerced into other types.\n\n```rust\n#![allow(unused)]\nfn main() {\nenum ZeroVariants {}\nlet x: ZeroVariants = panic!();\nlet y: u32 = x; // mismatched type error\n}\n```\n\n## [Variant visibility](#variant-visibility)\n\nEnum variants syntactically allow a [_Visibility_](../visibility-and-privacy.html) annotation, but this is rejected when the enum is validated. This allows items to be parsed with a unified syntax across different contexts where they are used.\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! mac_variant {\n    ($vis:vis $name:ident) => {\n        enum $name {\n            $vis Unit,\n\n            $vis Tuple(u8, u16),\n\n            $vis Struct { f: u8 },\n        }\n    }\n}\n\n// Empty `vis` is allowed.\nmac_variant! { E }\n\n// This is allowed, since it is removed before being validated.\n#[cfg(FALSE)]\nenum E {\n    pub U,\n    pub(crate) T(u8),\n    pub(super) T { f: String }\n}\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Enumerations - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/enumerations.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"enumerations\"><a class=\"header\" href=\"#enumerations\">Enumerations</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>Enumeration</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">enum</code>\n<a href=\"../identifiers.html\">IDENTIFIER</a>&nbsp;\n<a href=\"generics.html\"><em>GenericParams</em></a><sup>?</sup>\n<a href=\"generics.html#where-clauses\"><em>WhereClause</em></a><sup>?</sup>\n<code class=\"hljs\">{</code> <em>EnumItems</em><sup>?</sup> <code class=\"hljs\">}</code></p>\n<p><em>EnumItems</em> :<br>\n&nbsp;&nbsp; <em>EnumItem</em> ( <code class=\"hljs\">,</code> <em>EnumItem</em> )<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n<p><em>EnumItem</em> :<br>\n&nbsp;&nbsp; <em>OuterAttribute</em><sup>*</sup> <a href=\"../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup><br>\n&nbsp;&nbsp; <a href=\"../identifiers.html\">IDENTIFIER</a>&nbsp;( <em>EnumItemTuple</em> | <em>EnumItemStruct</em> )<sup>?</sup>\n<em>EnumItemDiscriminant</em><sup>?</sup></p>\n<p><em>EnumItemTuple</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">(</code> <a href=\"structs.html\"><em>TupleFields</em></a><sup>?</sup> <code class=\"hljs\">)</code></p>\n<p><em>EnumItemStruct</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">{</code> <a href=\"structs.html\"><em>StructFields</em></a><sup>?</sup> <code class=\"hljs\">}</code></p>\n<p><em>EnumItemDiscriminant</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">=</code> <a href=\"../expressions.html\"><em>Expression</em></a></p>\n</blockquote>\n<p>An <em>enumeration</em>, also referred to as an <em>enum</em>, is a simultaneous definition of a\nnominal <a href=\"../types/enum.html\">enumerated type</a> as well as a set of <em>constructors</em>, that can be used\nto create or pattern-match values of the corresponding enumerated type.</p>\n<p>Enumerations are declared with the keyword <code class=\"hljs\">enum</code>.</p>\n<p>An example of an <code class=\"hljs\">enum</code> item and its use:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Animal</span></span> {\n    Dog,\n    Cat,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a: Animal = Animal::Dog;\na = Animal::Cat;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Enum constructors can have either named or unnamed fields:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Animal</span></span> {\n    Dog(<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">f64</span>),\n    Cat { name: <span class=\"hljs-built_in\">String</span>, weight: <span class=\"hljs-built_in\">f64</span> },\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> a: Animal = Animal::Dog(<span class=\"hljs-string\">\"Cocoa\"</span>.to_string(), <span class=\"hljs-number\">37.2</span>);\na = Animal::Cat { name: <span class=\"hljs-string\">\"Spotty\"</span>.to_string(), weight: <span class=\"hljs-number\">2.7</span> };\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this example, <code class=\"hljs\">Cat</code> is a <em>struct-like enum variant</em>, whereas <code class=\"hljs\">Dog</code> is simply\ncalled an enum variant.</p>\n<p>An enum where no constructors contain fields are called a\n<em><span id=\"field-less-enum\">field-less enum</span></em>. For example, this is a fieldless enum:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Fieldless</span></span> {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If a field-less enum only contains unit variants, the enum is called an\n<em><span id=\"unit-only-enum\">unit-only enum</span></em>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Foo = <span class=\"hljs-number\">3</span>,\n    Bar = <span class=\"hljs-number\">2</span>,\n    Baz = <span class=\"hljs-number\">1</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span id=\"custom-discriminant-values-for-fieldless-enumerations\"></span></p>\n<h2 id=\"discriminants\"><a class=\"header\" href=\"#discriminants\">Discriminants</a></h2>\n<p>Each enum instance has a <em>discriminant</em>: an integer logically associated to it\nthat is used to determine which variant it holds.</p>\n<p>Under the <a href=\"../type-layout.html#the-default-representation\">default representation</a>, the discriminant is interpreted as\nan <code class=\"hljs\">isize</code> value. However, the compiler is allowed to use a smaller type (or\nanother means of distinguishing variants) in its actual memory layout.</p>\n<h3 id=\"assigning-discriminant-values\"><a class=\"header\" href=\"#assigning-discriminant-values\">Assigning discriminant values</a></h3>\n<h4 id=\"explicit-discriminants\"><a class=\"header\" href=\"#explicit-discriminants\">Explicit discriminants</a></h4>\n<p>In two circumstances, the discriminant of a variant may be explicitly set by\nfollowing the variant name with <code class=\"hljs\">=</code> and a <a href=\"../const_eval.html#constant-expressions\">constant expression</a>:</p>\n<ol>\n<li>\n<p>if the enumeration is \"<a href=\"#unit-only-enum\">unit-only</a>\".</p>\n</li>\n<li>\n<p>if a <a href=\"../type-layout.html#primitive-representations\">primitive representation</a> is used. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Unit = <span class=\"hljs-number\">3</span>,\n    Tuple(<span class=\"hljs-built_in\">u16</span>),\n    Struct {\n        a: <span class=\"hljs-built_in\">u8</span>,\n        b: <span class=\"hljs-built_in\">u16</span>,\n    } = <span class=\"hljs-number\">1</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n</li>\n</ol>\n<h4 id=\"implicit-discriminants\"><a class=\"header\" href=\"#implicit-discriminants\">Implicit discriminants</a></h4>\n<p>If a discriminant for a variant is not specified, then it is set to one higher\nthan the discriminant of the previous variant in the declaration. If the\ndiscriminant of the first variant in the declaration is unspecified, then\nit is set to zero.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span></span> {\n    Bar,            <span class=\"hljs-comment\">// 0</span>\n    Baz = <span class=\"hljs-number\">123</span>,      <span class=\"hljs-comment\">// 123</span>\n    Quux,           <span class=\"hljs-comment\">// 124</span>\n}\n\n<span class=\"hljs-keyword\">let</span> baz_discriminant = Foo::Baz <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u32</span>;\n<span class=\"hljs-built_in\">assert_eq!</span>(baz_discriminant, <span class=\"hljs-number\">123</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"restrictions\"><a class=\"header\" href=\"#restrictions\">Restrictions</a></h4>\n<p>It is an error when two variants share the same discriminant.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SharedDiscriminantError</span></span> {\n    SharedA = <span class=\"hljs-number\">1</span>,\n    SharedB = <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SharedDiscriminantError2</span></span> {\n    Zero,       <span class=\"hljs-comment\">// 0</span>\n    One,        <span class=\"hljs-comment\">// 1</span>\n    OneToo = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\">// 1 (collision with previous!)</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It is also an error to have an unspecified discriminant where the previous\ndiscriminant is the maximum value for the size of the discriminant.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OverflowingDiscriminantError</span></span> {\n    Max = <span class=\"hljs-number\">255</span>,\n    MaxPlusOne <span class=\"hljs-comment\">// Would be 256, but that overflows the enum.</span>\n}\n\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">OverflowingDiscriminantError2</span></span> {\n    MaxMinusOne = <span class=\"hljs-number\">254</span>, <span class=\"hljs-comment\">// 254</span>\n    Max,               <span class=\"hljs-comment\">// 255</span>\n    MaxPlusOne         <span class=\"hljs-comment\">// Would be 256, but that overflows the enum.</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"accessing-discriminant\"><a class=\"header\" href=\"#accessing-discriminant\">Accessing discriminant</a></h3>\n<h4 id=\"via-memdiscriminant\"><a class=\"header\" href=\"#via-memdiscriminant\">Via <code>mem::discriminant</code></a></h4>\n<p><a href=\"../../std/mem/fn.discriminant.html\"><code class=\"hljs\">mem::discriminant</code></a> returns an opaque reference to the discriminant of\nan enum value which can be compared. This cannot be used to get the value\nof the discriminant.</p>\n<h4 id=\"casting\"><a class=\"header\" href=\"#casting\">Casting</a></h4>\n<p>If an enumeration is <a href=\"#unit-only-enum\">unit-only</a> (with no tuple and struct variants), then its\ndiscriminant can be directly accessed with a <a href=\"../expressions/operator-expr.html#semantics\">numeric cast</a>; e.g.:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Foo,\n    Bar,\n    Baz,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, Enum::Foo <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Enum::Bar <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, Enum::Baz <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><a href=\"#field-less-enum\">Field-less enums</a> can be casted if they do not have explicit discriminants, or where only unit variants are explicit.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Fieldless</span></span> {\n    Tuple(),\n    Struct{},\n    Unit,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, Fieldless::Tuple() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, Fieldless::Struct{} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, Fieldless::Unit <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">isize</span>);\n\n<span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">FieldlessWithDiscrimants</span></span> {\n    First = <span class=\"hljs-number\">10</span>,\n    Tuple(),\n    Second = <span class=\"hljs-number\">20</span>,\n    Struct{},\n    Unit,\n}\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">10</span>, FieldlessWithDiscrimants::First <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">11</span>, FieldlessWithDiscrimants::Tuple() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">20</span>, FieldlessWithDiscrimants::Second <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">21</span>, FieldlessWithDiscrimants::Struct{} <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">22</span>, FieldlessWithDiscrimants::Unit <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">u8</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"pointer-casting\"><a class=\"header\" href=\"#pointer-casting\">Pointer casting</a></h4>\n<p>If the enumeration specifies a <a href=\"../type-layout.html#primitive-representations\">primitive representation</a>, then the\ndiscriminant may be reliably accessed via unsafe pointer casting:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[repr(u8)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Enum</span></span> {\n    Unit,\n    Tuple(<span class=\"hljs-built_in\">bool</span>),\n    Struct{a: <span class=\"hljs-built_in\">bool</span>},\n}\n\n<span class=\"hljs-keyword\">impl</span> Enum {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">discriminant</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u8</span> {\n        <span class=\"hljs-keyword\">unsafe</span> { *(<span class=\"hljs-keyword\">self</span> <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">Self</span> <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) }\n    }\n}\n\n<span class=\"hljs-keyword\">let</span> unit_like = Enum::Unit;\n<span class=\"hljs-keyword\">let</span> tuple_like = Enum::Tuple(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">let</span> struct_like = Enum::Struct{a: <span class=\"hljs-literal\">false</span>};\n\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, unit_like.discriminant());\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, tuple_like.discriminant());\n<span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, struct_like.discriminant());\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"zero-variant-enums\"><a class=\"header\" href=\"#zero-variant-enums\">Zero-variant enums</a></h2>\n<p>Enums with zero variants are known as <em>zero-variant enums</em>. As they have\nno valid values, they cannot be instantiated.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">ZeroVariants</span></span> {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Zero-variant enums are equivalent to the <a href=\"../types/never.html\">never type</a>, but they cannot be\ncoerced into other types.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">ZeroVariants</span></span> {}\n</span><span class=\"hljs-keyword\">let</span> x: ZeroVariants = <span class=\"hljs-built_in\">panic!</span>();\n<span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">u32</span> = x; <span class=\"hljs-comment\">// mismatched type error</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"variant-visibility\"><a class=\"header\" href=\"#variant-visibility\">Variant visibility</a></h2>\n<p>Enum variants syntactically allow a <a href=\"../visibility-and-privacy.html\"><em>Visibility</em></a> annotation, but this is\nrejected when the enum is validated. This allows items to be parsed with a\nunified syntax across different contexts where they are used.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> mac_variant {\n    ($vis:vis $name:ident) =&gt; {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> $<span class=\"hljs-title\">name</span></span> {\n            $vis Unit,\n\n            $vis Tuple(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u16</span>),\n\n            $vis Struct { f: <span class=\"hljs-built_in\">u8</span> },\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Empty `vis` is allowed.</span>\nmac_variant! { E }\n\n<span class=\"hljs-comment\">// This is allowed, since it is removed before being validated.</span>\n<span class=\"hljs-meta\">#[cfg(FALSE)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">E</span></span> {\n    <span class=\"hljs-keyword\">pub</span> U,\n    <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">crate</span>) T(<span class=\"hljs-built_in\">u8</span>),\n    <span class=\"hljs-keyword\">pub</span>(<span class=\"hljs-keyword\">super</span>) T { f: <span class=\"hljs-built_in\">String</span> }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/structs.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/unions.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/structs.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/unions.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:52.808Z"
}