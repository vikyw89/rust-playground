{
	"title": "Pin in std::pin - Rust",
	"url": "https://doc.rust-lang.org/stable/std/pin/struct.Pin.html",
	"markdown": "# Pin in std::pin - Rust\n\n## Struct [std](../index.html)::[pin](index.html)::[Pin](#)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1090) ·\n\n```\n#[repr(transparent)]pub struct Pin<Ptr> { /* private fields */ }\n```\n\nExpand description\n\nA pointer which pins its pointee in place.\n\n[`Pin`](struct.Pin.html \"struct std::pin::Pin\") is a wrapper around some kind of pointer `Ptr` which makes that pointer “pin” its pointee value in place, thus preventing the value referenced by that pointer from being moved or otherwise invalidated at that place in memory unless it implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\").\n\n_See the [`pin` module](index.html \"pin module\") documentation for a more thorough exploration of pinning._\n\n### [§](#pinning-values-with-pinptr)Pinning values with [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\")\n\nIn order to pin a value, we wrap a _pointer to that value_ (of some type `Ptr`) in a [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\"). [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\") can wrap any pointer type, forming a promise that the **pointee** will not be _moved_ or [otherwise invalidated](about:blank/index.html#subtle-details-and-the-drop-guarantee \"pin subtle details\"). If the pointee value’s type implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), we are free to disregard these requirements entirely and can wrap any pointer to that value in [`Pin`](struct.Pin.html \"struct std::pin::Pin\") directly via [`Pin::new`](about:blank/struct.Pin.html#method.new \"associated function std::pin::Pin::new\"). If the pointee value’s type does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then Rust will not let us use the [`Pin::new`](about:blank/struct.Pin.html#method.new \"associated function std::pin::Pin::new\") function directly and we’ll need to construct a [`Pin`](struct.Pin.html \"struct std::pin::Pin\")\\-wrapped pointer in one of the more specialized manners discussed below.\n\nWe call such a [`Pin`](struct.Pin.html \"struct std::pin::Pin\")\\-wrapped pointer a **pinning pointer** (or pinning ref, or pinning [`Box`](../../std/boxed/struct.Box.html \"Box\"), etc.) because its existence is the thing that is pinning the underlying pointee in place: it is the metaphorical “pin” securing the data in place on the pinboard (in memory).\n\nIt is important to stress that the thing in the [`Pin`](struct.Pin.html \"struct std::pin::Pin\") is not the value which we want to pin itself, but rather a pointer to that value! A [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\") does not pin the `Ptr` but rather the pointer’s _**pointee** value_.\n\nThe most common set of types which require pinning related guarantees for soundness are the compiler-generated state machines that implement [`Future`](../future/trait.Future.html \"Future\") for the return value of `async fn`s. These compiler-generated [`Future`](../future/trait.Future.html \"Future\")s may contain self-referential pointers, one of the most common use cases for [`Pin`](struct.Pin.html \"struct std::pin::Pin\"). More details on this point are provided in the [`pin` module](index.html \"pin module\") docs, but suffice it to say they require the guarantees provided by pinning to be implemented soundly.\n\nThis requirement for the implementation of `async fn`s means that the [`Future`](../future/trait.Future.html \"Future\") trait requires all calls to [`poll`](about:blank/future/trait.Future.html#tymethod.poll \"Future::poll\") to use a `self: [Pin](struct.Pin.html \"struct std::pin::Pin\")<&mut Self>` parameter instead of the usual `&mut self`. Therefore, when manually polling a future, you will need to pin it first.\n\nYou may notice that `async fn`\\-sourced [`Future`](../future/trait.Future.html \"Future\")s are only a small percentage of all [`Future`](../future/trait.Future.html \"Future\")s that exist, yet we had to modify the signature of [`poll`](about:blank/future/trait.Future.html#tymethod.poll \"Future::poll\") for all [`Future`](../future/trait.Future.html \"Future\")s to accommodate them. This is unfortunate, but there is a way that the language attempts to alleviate the extra friction that this API choice incurs: the [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") trait.\n\nThe vast majority of Rust types have no reason to ever care about being pinned. These types implement the [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") trait, which entirely opts all values of that type out of pinning-related guarantees. For values of these types, pinning a value by pointing to it with a [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\") will have no actual effect.\n\nThe reason this distinction exists is exactly to allow APIs like [`Future::poll`](about:blank/future/trait.Future.html#tymethod.poll \"Future::poll\") to take a [`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\") as an argument for all types while only forcing [`Future`](../future/trait.Future.html \"Future\") types that actually care about pinning guarantees pay the ergonomics cost. For the majority of [`Future`](../future/trait.Future.html \"Future\") types that don’t have a reason to care about being pinned and therefore implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), the `[Pin](struct.Pin.html \"struct std::pin::Pin\")<&mut Self>` will act exactly like a regular `&mut Self`, allowing direct access to the underlying value. Only types that _don’t_ implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") will be restricted.\n\n#### [§](#pinning-a-value-of-a-type-that-implements-unpin)Pinning a value of a type that implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\")\n\nIf the type of the value you need to “pin” implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), you can trivially wrap any pointer to that value in a [`Pin`](struct.Pin.html \"struct std::pin::Pin\") by calling [`Pin::new`](about:blank/struct.Pin.html#method.new \"associated function std::pin::Pin::new\").\n\n```\nuse std::pin::Pin;\n\n// Create a value of a type that implements `Unpin`\nlet mut unpin_future = std::future::ready(5);\n\n// Pin it by creating a pinning mutable reference to it (ready to be `poll`ed!)\nlet my_pinned_unpin_future: Pin<&mut _> = Pin::new(&mut unpin_future);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++//+Create+a+value+of+a+type+that+implements+%60Unpin%60%0A++++let+mut+unpin_future+=+std::future::ready(5);%0A++++%0A++++//+Pin+it+by+creating+a+pinning+mutable+reference+to+it+(ready+to+be+%60poll%60ed!)%0A++++let+my_pinned_unpin_future:+Pin%3C%26mut+_%3E+=+Pin::new(%26mut+unpin_future);%0A%7D&edition=2021)\n\n#### [§](#pinning-a-value-inside-a-box)Pinning a value inside a [`Box`](../../std/boxed/struct.Box.html \"Box\")\n\nThe simplest and most flexible way to pin a value that does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") is to put that value inside a [`Box`](../../std/boxed/struct.Box.html \"Box\") and then turn that [`Box`](../../std/boxed/struct.Box.html \"Box\") into a “pinning [`Box`](../../std/boxed/struct.Box.html \"Box\")” by wrapping it in a [`Pin`](struct.Pin.html \"struct std::pin::Pin\"). You can do both of these in a single step using [`Box::pin`](about:blank/std/boxed/struct.Box.html#method.pin \"Box::pin\"). Let’s see an example of using this flow to pin a [`Future`](../future/trait.Future.html \"Future\") returned from calling an `async fn`, a common use case as described above.\n\n```\nuse std::pin::Pin;\n\nasync fn add_one(x: u32) -> u32 {\n    x + 1\n}\n\n// Call the async function to get a future back\nlet fut = add_one(42);\n\n// Pin the future inside a pinning box\nlet pinned_fut: Pin<Box<_>> = Box::pin(fut);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++async+fn+add_one(x:+u32)+-%3E+u32+%7B%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++//+Call+the+async+function+to+get+a+future+back%0A++++let+fut+=+add_one(42);%0A++++%0A++++//+Pin+the+future+inside+a+pinning+box%0A++++let+pinned_fut:+Pin%3CBox%3C_%3E%3E+=+Box::pin(fut);%0A%7D&edition=2021)\n\nIf you have a value which is already boxed, for example a [`Box<dyn Future>`](../../std/boxed/struct.Box.html \"Box\"), you can pin that value in-place at its current memory address using [`Box::into_pin`](about:blank/std/boxed/struct.Box.html#method.into_pin \"Box::into_pin\").\n\n```\nuse std::pin::Pin;\nuse std::future::Future;\n\nasync fn add_one(x: u32) -> u32 {\n    x + 1\n}\n\nfn boxed_add_one(x: u32) -> Box<dyn Future<Output = u32>> {\n    Box::new(add_one(x))\n}\n\nlet boxed_fut = boxed_add_one(42);\n\n// Pin the future inside the existing box\nlet pinned_fut: Pin<Box<_>> = Box::into_pin(boxed_fut);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++use+std::future::Future;%0A++++%0A++++async+fn+add_one(x:+u32)+-%3E+u32+%7B%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++fn+boxed_add_one(x:+u32)+-%3E+Box%3Cdyn+Future%3COutput+=+u32%3E%3E+%7B%0A++++++++Box::new(add_one(x))%0A++++%7D%0A++++%0A++++let+boxed_fut+=+boxed_add_one(42);%0A++++%0A++++//+Pin+the+future+inside+the+existing+box%0A++++let+pinned_fut:+Pin%3CBox%3C_%3E%3E+=+Box::into_pin(boxed_fut);%0A%7D&edition=2021)\n\nThere are similar pinning methods offered on the other standard library smart pointer types as well, like [`Rc`](../../std/rc/struct.Rc.html \"Rc\") and [`Arc`](../../std/sync/struct.Arc.html \"Arc\").\n\n#### [§](#pinning-a-value-on-the-stack-using-pin)Pinning a value on the stack using [`pin!`](macro.pin.html \"pin!\")\n\nThere are some situations where it is desirable or even required (for example, in a `#[no_std]` context where you don’t have access to the standard library or allocation in general) to pin a value which does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") to its location on the stack. Doing so is possible using the [`pin!`](macro.pin.html \"pin!\") macro. See its documentation for more.\n\n### [§](#layout-and-abi)Layout and ABI\n\n[`Pin<Ptr>`](struct.Pin.html \"struct std::pin::Pin\") is guaranteed to have the same memory layout and ABI[1](#fn1) as `Ptr`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1170)[§](#impl-Pin%3CPtr%3E)\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1192)\n\nConstruct a new `Pin<Ptr>` around a pointer to some data of a type that implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\").\n\nUnlike `Pin::new_unchecked`, this method is safe because the pointer `Ptr` dereferences to an [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") type, which cancels the pinning guarantees.\n\n##### [§](#examples)Examples\n\n```\nuse std::pin::Pin;\n\nlet mut val: u8 = 5;\n\n// Since `val` doesn't care about being moved, we can safely create a \"facade\" `Pin`\n// which will allow `val` to participate in `Pin`-bound apis  without checking that\n// pinning guarantees are actually upheld.\nlet mut pinned: Pin<&mut u8> = Pin::new(&mut val);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++%0A++++//+Since+%60val%60+doesn%27t+care+about+being+moved,+we+can+safely+create+a+%22facade%22+%60Pin%60%0A++++//+which+will+allow+%60val%60+to+participate+in+%60Pin%60-bound+apis++without+checking+that%0A++++//+pinning+guarantees+are+actually+upheld.%0A++++let+mut+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A%7D&edition=2021)\n\n1.39.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1220)\n\nUnwraps this `Pin<Ptr>`, returning the underlying pointer.\n\nDoing this operation safely requires that the data pointed at by this pinning pointer implements [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") so that we can ignore the pinning invariants when unwrapping it.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::pin::Pin;\n\nlet mut val: u8 = 5;\nlet pinned: Pin<&mut u8> = Pin::new(&mut val);\n\n// Unwrap the pin to get the underlying mutable reference to the value. We can do\n// this because `val` doesn't care about being moved, so the `Pin` was just\n// a \"facade\" anyway.\nlet r = Pin::into_inner(pinned);\nassert_eq!(*r, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++let+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A++++%0A++++//+Unwrap+the+pin+to+get+the+underlying+mutable+reference+to+the+value.+We+can+do%0A++++//+this+because+%60val%60+doesn%27t+care+about+being+moved,+so+the+%60Pin%60+was+just%0A++++//+a+%22facade%22+anyway.%0A++++let+r+=+Pin::into_inner(pinned);%0A++++assert_eq!(*r,+5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1225)[§](#impl-Pin%3CPtr%3E-1)\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1357)\n\nConstruct a new `Pin<Ptr>` around a reference to some data of a type that may or may not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\").\n\nIf `pointer` dereferences to an [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\") type, [`Pin::new`](about:blank/struct.Pin.html#method.new \"associated function std::pin::Pin::new\") should be used instead.\n\n##### [§](#safety)Safety\n\nThis constructor is unsafe because we cannot guarantee that the data pointed to by `pointer` is pinned. At its core, pinning a value means making the guarantee that the value’s data will not be moved nor have its storage invalidated until it gets dropped. For a more thorough explanation of pinning, see the [`pin` module docs](index.html \"mod std::pin\").\n\nIf the caller that is constructing this `Pin<Ptr>` does not ensure that the data `Ptr` points to is pinned, that is a violation of the API contract and may lead to undefined behavior in later (even safe) operations.\n\nBy using this method, you are also making a promise about the [`Deref`](../ops/trait.Deref.html \"trait std::ops::Deref\") and [`DerefMut`](../ops/trait.DerefMut.html \"trait std::ops::DerefMut\") implementations of `Ptr`, if they exist. Most importantly, they must not move out of their `self` arguments: `Pin::as_mut` and `Pin::as_ref` will call `DerefMut::deref_mut` and `Deref::deref` _on the pointer type `Ptr`_ and expect these methods to uphold the pinning invariants. Moreover, by calling this method you promise that the reference `Ptr` dereferences to will not be moved out of again; in particular, it must not be possible to obtain a `&mut Ptr::Target` and then move out of that reference (using, for example [`mem::swap`](../mem/fn.swap.html \"fn std::mem::swap\")).\n\nFor example, calling `Pin::new_unchecked` on an `&'a mut T` is unsafe because while you are able to pin it for the given lifetime `'a`, you have no control over whether it is kept pinned once `'a` ends, and therefore cannot uphold the guarantee that a value, once pinned, remains pinned until it is dropped:\n\n```\nuse std::mem;\nuse std::pin::Pin;\n\nfn move_pinned_ref<T>(mut a: T, mut b: T) {\n    unsafe {\n        let p: Pin<&mut T> = Pin::new_unchecked(&mut a);\n        // This should mean the pointee `a` can never move again.\n    }\n    mem::swap(&mut a, &mut b); // Potential UB down the road ⚠️\n    // The address of `a` changed to `b`'s stack slot, so `a` got moved even\n    // though we have previously pinned it! We have violated the pinning API contract.\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++use+std::pin::Pin;%0A++++%0A++++fn+move_pinned_ref%3CT%3E(mut+a:+T,+mut+b:+T)+%7B%0A++++++++unsafe+%7B%0A++++++++++++let+p:+Pin%3C%26mut+T%3E+=+Pin::new_unchecked(%26mut+a);%0A++++++++++++//+This+should+mean+the+pointee+%60a%60+can+never+move+again.%0A++++++++%7D%0A++++++++mem::swap(%26mut+a,+%26mut+b);+//+Potential+UB+down+the+road+%E2%9A%A0%EF%B8%8F%0A++++++++//+The+address+of+%60a%60+changed+to+%60b%60%27s+stack+slot,+so+%60a%60+got+moved+even%0A++++++++//+though+we+have+previously+pinned+it!+We+have+violated+the+pinning+API+contract.%0A++++%7D%0A%7D&edition=2021)\n\nA value, once pinned, must remain pinned until it is dropped (unless its type implements `Unpin`). Because `Pin<&mut T>` does not own the value, dropping the `Pin` will not drop the value and will not end the pinning contract. So moving the value after dropping the `Pin<&mut T>` is still a violation of the API contract.\n\nSimilarly, calling `Pin::new_unchecked` on an `Rc<T>` is unsafe because there could be aliases to the same data that are not subject to the pinning restrictions:\n\n```\nuse std::rc::Rc;\nuse std::pin::Pin;\n\nfn move_pinned_rc<T>(mut x: Rc<T>) {\n    // This should mean the pointee can never move again.\n    let pin = unsafe { Pin::new_unchecked(Rc::clone(&x)) };\n    {\n        let p: Pin<&T> = pin.as_ref();\n        // ...\n    }\n    drop(pin);\n\n    let content = Rc::get_mut(&mut x).unwrap(); // Potential UB down the road ⚠️\n    // Now, if `x` was the only reference, we have a mutable reference to\n    // data that we pinned above, which we could use to move it as we have\n    // seen in the previous example. We have violated the pinning API contract.\n }\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++use+std::pin::Pin;%0A++++%0A++++fn+move_pinned_rc%3CT%3E(mut+x:+Rc%3CT%3E)+%7B%0A++++++++//+This+should+mean+the+pointee+can+never+move+again.%0A++++++++let+pin+=+unsafe+%7B+Pin::new_unchecked(Rc::clone(%26x))+%7D;%0A++++++++%7B%0A++++++++++++let+p:+Pin%3C%26T%3E+=+pin.as_ref();%0A++++++++++++//+...%0A++++++++%7D%0A++++++++drop(pin);%0A++++%0A++++++++let+content+=+Rc::get_mut(%26mut+x).unwrap();+//+Potential+UB+down+the+road+%E2%9A%A0%EF%B8%8F%0A++++++++//+Now,+if+%60x%60+was+the+only+reference,+we+have+a+mutable+reference+to%0A++++++++//+data+that+we+pinned+above,+which+we+could+use+to+move+it+as+we+have%0A++++++++//+seen+in+the+previous+example.+We+have+violated+the+pinning+API+contract.%0A+++++%7D%0A%7D&edition=2021)\n\n###### [§](#pinning-of-closure-captures)Pinning of closure captures\n\nParticular care is required when using `Pin::new_unchecked` in a closure: `Pin::new_unchecked(&mut var)` where `var` is a by-value (moved) closure capture implicitly makes the promise that the closure itself is pinned, and that _all_ uses of this closure capture respect that pinning.\n\n```\nuse std::pin::Pin;\nuse std::task::Context;\nuse std::future::Future;\n\nfn move_pinned_closure(mut x: impl Future, cx: &mut Context<'_>) {\n    // Create a closure that moves `x`, and then internally uses it in a pinned way.\n    let mut closure = move || unsafe {\n        let _ignore = Pin::new_unchecked(&mut x).poll(cx);\n    };\n    // Call the closure, so the future can assume it has been pinned.\n    closure();\n    // Move the closure somewhere else. This also moves `x`!\n    let mut moved = closure;\n    // Calling it again means we polled the future from two different locations,\n    // violating the pinning API contract.\n    moved(); // Potential UB ⚠️\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++use+std::task::Context;%0A++++use+std::future::Future;%0A++++%0A++++fn+move_pinned_closure(mut+x:+impl+Future,+cx:+%26mut+Context%3C%27_%3E)+%7B%0A++++++++//+Create+a+closure+that+moves+%60x%60,+and+then+internally+uses+it+in+a+pinned+way.%0A++++++++let+mut+closure+=+move+%7C%7C+unsafe+%7B%0A++++++++++++let+_ignore+=+Pin::new_unchecked(%26mut+x).poll(cx);%0A++++++++%7D;%0A++++++++//+Call+the+closure,+so+the+future+can+assume+it+has+been+pinned.%0A++++++++closure();%0A++++++++//+Move+the+closure+somewhere+else.+This+also+moves+%60x%60!%0A++++++++let+mut+moved+=+closure;%0A++++++++//+Calling+it+again+means+we+polled+the+future+from+two+different+locations,%0A++++++++//+violating+the+pinning+API+contract.%0A++++++++moved();+//+Potential+UB+%E2%9A%A0%EF%B8%8F%0A++++%7D%0A%7D&edition=2021)\n\nWhen passing a closure to another API, it might be moving the closure any time, so `Pin::new_unchecked` on closure captures may only be used if the API explicitly documents that the closure is pinned.\n\nThe better alternative is to avoid all that trouble and do the pinning in the outer function instead (here using the [`pin!`](macro.pin.html \"macro std::pin::pin\") macro):\n\n```\nuse std::pin::pin;\nuse std::task::Context;\nuse std::future::Future;\n\nfn move_pinned_closure(mut x: impl Future, cx: &mut Context<'_>) {\n    let mut x = pin!(x);\n    // Create a closure that captures `x: Pin<&mut _>`, which is safe to move.\n    let mut closure = move || {\n        let _ignore = x.as_mut().poll(cx);\n    };\n    // Call the closure, so the future can assume it has been pinned.\n    closure();\n    // Move the closure somewhere else.\n    let mut moved = closure;\n    // Calling it again here is fine (except that we might be polling a future that already\n    // returned `Poll::Ready`, but that is a separate problem).\n    moved();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::pin;%0A++++use+std::task::Context;%0A++++use+std::future::Future;%0A++++%0A++++fn+move_pinned_closure(mut+x:+impl+Future,+cx:+%26mut+Context%3C%27_%3E)+%7B%0A++++++++let+mut+x+=+pin!(x);%0A++++++++//+Create+a+closure+that+captures+%60x:+Pin%3C%26mut+_%3E%60,+which+is+safe+to+move.%0A++++++++let+mut+closure+=+move+%7C%7C+%7B%0A++++++++++++let+_ignore+=+x.as_mut().poll(cx);%0A++++++++%7D;%0A++++++++//+Call+the+closure,+so+the+future+can+assume+it+has+been+pinned.%0A++++++++closure();%0A++++++++//+Move+the+closure+somewhere+else.%0A++++++++let+mut+moved+=+closure;%0A++++++++//+Calling+it+again+here+is+fine+(except+that+we+might+be+polling+a+future+that+already%0A++++++++//+returned+%60Poll::Ready%60,+but+that+is+a+separate+problem).%0A++++++++moved();%0A++++%7D%0A%7D&edition=2021)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1370)\n\nGets a shared reference to the pinned value this [`Pin`](struct.Pin.html \"struct std::pin::Pin\") points to.\n\nThis is a generic method to go from `&Pin<Pointer<T>>` to `Pin<&T>`. It is safe because, as part of the contract of `Pin::new_unchecked`, the pointee cannot move after `Pin<Pointer<T>>` got created. “Malicious” implementations of `Pointer::Deref` are likewise ruled out by the contract of `Pin::new_unchecked`.\n\n1.39.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1396)\n\nUnwraps this `Pin<Ptr>`, returning the underlying `Ptr`.\n\n##### [§](#safety-1)Safety\n\nThis function is unsafe. You must guarantee that you will continue to treat the pointer `Ptr` as pinned after you call this function, so that the invariants on the `Pin` type can be upheld. If the code using the resulting `Ptr` does not continue to maintain the pinning invariants that is a violation of the API contract and may lead to undefined behavior in later (safe) operations.\n\nNote that you must be able to guarantee that the data pointed to by `Ptr` will be treated as pinned all the way until its `drop` handler is complete!\n\n_For more information, see the [`pin` module docs](index.html \"mod std::pin\")_\n\nIf the underlying data is [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), [`Pin::into_inner`](about:blank/struct.Pin.html#method.into_inner \"associated function std::pin::Pin::into_inner\") should be used instead.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1401)[§](#impl-Pin%3CPtr%3E-2)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1433)\n\nGets a mutable reference to the pinned value this `Pin<Ptr>` points to.\n\nThis is a generic method to go from `&mut Pin<Pointer<T>>` to `Pin<&mut T>`. It is safe because, as part of the contract of `Pin::new_unchecked`, the pointee cannot move after `Pin<Pointer<T>>` got created. “Malicious” implementations of `Pointer::DerefMut` are likewise ruled out by the contract of `Pin::new_unchecked`.\n\nThis method is useful when doing multiple calls to functions that consume the pinning pointer.\n\n##### [§](#example)Example\n\n```\nuse std::pin::Pin;\n\nimpl Type {\n    fn method(self: Pin<&mut Self>) {\n        // do something\n    }\n\n    fn call_method_twice(mut self: Pin<&mut Self>) {\n        // `method` consumes `self`, so reborrow the `Pin<&mut Self>` via `as_mut`.\n        self.as_mut().method();\n        self.as_mut().method();\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++struct+Type+%7B%7D%0A++++impl+Type+%7B%0A++++++++fn+method(self:+Pin%3C%26mut+Self%3E)+%7B%0A++++++++++++//+do+something%0A++++++++%7D%0A++++%0A++++++++fn+call_method_twice(mut+self:+Pin%3C%26mut+Self%3E)+%7B%0A++++++++++++//+%60method%60+consumes+%60self%60,+so+reborrow+the+%60Pin%3C%26mut+Self%3E%60+via+%60as_mut%60.%0A++++++++++++self.as_mut().method();%0A++++++++++++self.as_mut().method();%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1460-1462)\n\nAssigns a new value to the memory location pointed to by the `Pin<Ptr>`.\n\nThis overwrites pinned data, but that is okay: the original pinned value’s destructor gets run before being overwritten and the new value is also a valid value of the same type, so no pinning invariant is violated. See [the `pin` module documentation](about:blank/index.html#subtle-details-and-the-drop-guarantee \"mod std::pin\") for more information on how this upholds the pinning invariants.\n\n##### [§](#example-1)Example\n\n```\nuse std::pin::Pin;\n\nlet mut val: u8 = 5;\nlet mut pinned: Pin<&mut u8> = Pin::new(&mut val);\nprintln!(\"{}\", pinned); // 5\npinned.set(10);\nprintln!(\"{}\", pinned); // 10\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++let+mut+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A++++println!(%22%7B%7D%22,+pinned);+//+5%0A++++pinned.set(10);%0A++++println!(%22%7B%7D%22,+pinned);+//+10%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1468)[§](#impl-Pin%3C%26T%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1485-1488)\n\nConstructs a new pin by mapping the interior value.\n\nFor example, if you wanted to get a `Pin` of a field of something, you could use this to get access to that field in one line of code. However, there are several gotchas with these “pinning projections”; see the [`pin` module](about:blank/index.html#projections-and-structural-pinning \"mod std::pin\") documentation for further details on that topic.\n\n##### [§](#safety-2)Safety\n\nThis function is unsafe. You must guarantee that the data you return will not move so long as the argument value does not move (for example, because it is one of the fields of that value), and also that you do not move out of the argument you receive to the interior function.\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1519)\n\nGets a shared reference out of a pin.\n\nThis is safe because it is not possible to move out of a shared reference. It may seem like there is an issue here with interior mutability: in fact, it _is_ possible to move a `T` out of a `&RefCell<T>`. However, this is not a problem as long as there does not also exist a `Pin<&T>` pointing to the inner `T` inside the `RefCell`, and `RefCell<T>` does not let you get a `Pin<&T>` pointer to its contents. See the discussion on [“pinning projections”](about:blank/index.html#projections-and-structural-pinning \"mod std::pin\") for further details.\n\nNote: `Pin` also implements `Deref` to the target, which can be used to access the inner value. However, `Deref` only provides a reference that lives for as long as the borrow of the `Pin`, not the lifetime of the reference contained in the `Pin`. This method allows turning the `Pin` into a reference with the same lifetime as the reference it wraps.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1524)[§](#impl-Pin%3C%26mut+T%3E)\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1530)\n\nConverts this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1547-1549)\n\nGets a mutable reference to the data inside of this `Pin`.\n\nThis requires that the data inside this `Pin` is `Unpin`.\n\nNote: `Pin` also implements `DerefMut` to the data, which can be used to access the inner value. However, `DerefMut` only provides a reference that lives for as long as the borrow of the `Pin`, not the lifetime of the `Pin` itself. This method allows turning the `Pin` into a reference with the same lifetime as the original `Pin`.\n\n1.33.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1568)\n\nGets a mutable reference to the data inside of this `Pin`.\n\n##### [§](#safety-3)Safety\n\nThis function is unsafe. You must guarantee that you will never move the data out of the mutable reference you receive when you call this function, so that the invariants on the `Pin` type can be upheld.\n\nIf the underlying data is `Unpin`, `Pin::get_mut` should be used instead.\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1589-1592)\n\nConstruct a new pin by mapping the interior value.\n\nFor example, if you wanted to get a `Pin` of a field of something, you could use this to get access to that field in one line of code. However, there are several gotchas with these “pinning projections”; see the [`pin` module](about:blank/index.html#projections-and-structural-pinning \"mod std::pin\") documentation for further details on that topic.\n\n##### [§](#safety-4)Safety\n\nThis function is unsafe. You must guarantee that the data you return will not move so long as the argument value does not move (for example, because it is one of the fields of that value), and also that you do not move out of the argument you receive to the interior function.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1604)[§](#impl-Pin%3C%26T%3E-1)\n\n1.61.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1611)\n\nGet a pinning reference from a `&'static` reference.\n\nThis is safe because `T` is borrowed immutably for the `'static` lifetime, which never ends.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1618)[§](#impl-Pin%3C%26mut+Pin%3CPtr%3E%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1629)\n\n🔬This is a nightly-only experimental API. (`pin_deref_mut` [#86918](https://github.com/rust-lang/rust/issues/86918))\n\nGets `Pin<&mut T>` to the underlying pinned value from this nested `Pin`\\-pointer.\n\nThis is a generic method to go from `Pin<&mut Pin<Pointer<T>>>` to `Pin<&mut T>`. It is safe because the existence of a `Pin<Pointer<T>>` ensures that the pointee, `T`, cannot move in the future, and this method does not enable the pointee to move. “Malicious” implementations of `Ptr::DerefMut` are likewise ruled out by the contract of `Pin::new_unchecked`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1658)[§](#impl-Pin%3C%26mut+T%3E-1)\n\n1.61.0 (const: [unstable](https://github.com/rust-lang/rust/issues/76654 \"Tracking issue for const_pin\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1665)\n\nGet a pinning mutable reference from a static mutable reference.\n\nThis is safe because `T` is borrowed for the `'static` lifetime, which never ends.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#99-102)[§](#impl-AsyncIterator-for-Pin%3CP%3E)\n\n[§](#associatedtype.Item)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of items yielded by the async iterator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#106)[§](#method.poll_next)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nAttempt to pull out the next value of this async iterator, registering the current task for wakeup if the value is not yet available, and returning `None` if the async iterator is exhausted. [Read more](about:blank/async_iter/trait.AsyncIterator.html#tymethod.poll_next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#110)[§](#method.size_hint)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nReturns the bounds on the remaining length of the async iterator. [Read more](about:blank/async_iter/trait.AsyncIterator.html#method.size_hint)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1089)[§](#impl-Clone-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#120)[§](#impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E)\n\n[§](#associatedtype.Yield)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Yield)\n\n[§](#associatedtype.Return)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Return)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#124)[§](#method.resume)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine. [Read more](about:blank/ops/trait.Coroutine.html#tymethod.resume)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2316-2318)[§](#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E)\n\n[§](#associatedtype.Yield-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Yield)\n\n[§](#associatedtype.Return-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Return)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2323)[§](#method.resume-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine. [Read more](about:blank/ops/trait.Coroutine.html#tymethod.resume)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1694)[§](#impl-Debug-for-Pin%3CPtr%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1673)[§](#impl-Deref-for-Pin%3CPtr%3E)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1675)[§](#method.deref)\n\nDereferences the value.\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1681)[§](#impl-DerefMut-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1682)[§](#method.deref_mut)\n\nMutably dereferences the value.\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1701)[§](#impl-Display-for-Pin%3CPtr%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1513-1515)[§](#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1528)[§](#method.from)\n\nConverts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then `*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`Box::into_pin`](about:blank/boxed/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\").\n\nConstructing and pinning a `Box` with `<Pin<Box<T>>>::from([Box::new](about:blank/boxed/struct.Box.html#method.new \"associated function std::boxed::Box::new\")(x))` can also be written more concisely using `[Box::pin](about:blank/boxed/struct.Box.html#method.pin \"associated function std::boxed::Box::pin\")(x)`. This `From` implementation is useful if you already have a `Box<T>`, or you are constructing a (pinned) `Box` in a different way than with [`Box::new`](about:blank/boxed/struct.Box.html#method.new \"associated function std::boxed::Box::new\").\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#116-118)[§](#impl-Future-for-Pin%3CP%3E)\n\n[§](#associatedtype.Output)\n\nThe type of value produced on completion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#122)[§](#method.poll)\n\nAttempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available. [Read more](about:blank/future/trait.Future.html#tymethod.poll)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1164)[§](#impl-Hash-for-Pin%3CPtr%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1157)[§](#impl-Ord-for-Pin%3CPtr%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1114-1116)[§](#impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1118)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1122)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1131-1133)[§](#impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1135)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1139)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1143)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1147)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1151)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1708)[§](#impl-Pointer-for-Pin%3CPtr%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1720)[§](#impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1089)[§](#impl-Copy-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1688)[§](#impl-DerefPure-for-Pin%3CPtr%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1723)[§](#impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E)\n\n1.41.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1128)[§](#impl-Eq-for-Pin%3CPtr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#156)[§](#impl-IntoAsyncIterator-for-I)\n\n[§](#associatedtype.Item-1)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of the item yielded by the iterator\n\n[§](#associatedtype.IntoAsyncIter)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of the resulting iterator\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#160)[§](#method.into_async_iter)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nConverts `self` into an async iterator\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138)[§](#impl-IntoFuture-for-F)\n\n[§](#associatedtype.Output-1)\n\nThe output that the future will produce on completion.\n\n[§](#associatedtype.IntoFuture)\n\nWhich kind of future are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142)[§](#method.into_future)\n\nCreates a future from a value. [Read more](about:blank/future/trait.IntoFuture.html#tymethod.into_future)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552)[§](#impl-ToString-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A pointer which pins its pointee in place.\"><title>Pin in std::pin - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Pin</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Pin</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_deref_mut\">as_deref_mut</a></li><li><a href=\"#method.as_mut\">as_mut</a></li><li><a href=\"#method.as_ref\">as_ref</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_ref\">get_ref</a></li><li><a href=\"#method.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.into_inner_unchecked\">into_inner_unchecked</a></li><li><a href=\"#method.into_ref\">into_ref</a></li><li><a href=\"#method.map_unchecked\">map_unchecked</a></li><li><a href=\"#method.map_unchecked_mut\">map_unchecked_mut</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_unchecked\">new_unchecked</a></li><li><a href=\"#method.set\">set</a></li><li><a href=\"#method.static_mut\">static_mut</a></li><li><a href=\"#method.static_ref\">static_ref</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsyncIterator-for-Pin%3CP%3E\">AsyncIterator</a></li><li><a href=\"#impl-Clone-for-Pin%3CPtr%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\">CoerceUnsized&lt;Pin&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Copy-for-Pin%3CPtr%3E\">Copy</a></li><li><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E\">Coroutine&lt;R&gt;</a></li><li><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\">Coroutine&lt;R&gt;</a></li><li><a href=\"#impl-Debug-for-Pin%3CPtr%3E\">Debug</a></li><li><a href=\"#impl-Deref-for-Pin%3CPtr%3E\">Deref</a></li><li><a href=\"#impl-DerefMut-for-Pin%3CPtr%3E\">DerefMut</a></li><li><a href=\"#impl-DerefPure-for-Pin%3CPtr%3E\">DerefPure</a></li><li><a href=\"#impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\">DispatchFromDyn&lt;Pin&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Display-for-Pin%3CPtr%3E\">Display</a></li><li><a href=\"#impl-Eq-for-Pin%3CPtr%3E\">Eq</a></li><li><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\">From&lt;Box&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-Future-for-Pin%3CP%3E\">Future</a></li><li><a href=\"#impl-Hash-for-Pin%3CPtr%3E\">Hash</a></li><li><a href=\"#impl-Ord-for-Pin%3CPtr%3E\">Ord</a></li><li><a href=\"#impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\">PartialEq&lt;Pin&lt;Q&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\">PartialOrd&lt;Pin&lt;Q&gt;&gt;</a></li><li><a href=\"#impl-Pointer-for-Pin%3CPtr%3E\">Pointer</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Pin%3CPtr%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Pin%3CPtr%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Pin%3CPtr%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Pin%3CPtr%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Pin%3CPtr%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Pin%3CPtr%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-IntoAsyncIterator-for-I\">IntoAsyncIterator</a></li><li><a href=\"#impl-IntoFuture-for-F\">IntoFuture</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::pin</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.pin.html\">pin</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Pin.html\">Pin</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">pin</a>::<wbr><a class=\"struct\" href=\"#\">Pin</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1090\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code><div class=\"code-attribute\">#[repr(transparent)]</div>pub struct Pin&lt;Ptr&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A pointer which pins its pointee in place.</p>\n<p><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a> is a wrapper around some kind of pointer <code>Ptr</code> which makes that pointer “pin” its\npointee value in place, thus preventing the value referenced by that pointer from being moved\nor otherwise invalidated at that place in memory unless it implements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>.</p>\n<p><em>See the <a href=\"index.html\" title=\"pin module\"><code>pin</code> module</a> documentation for a more thorough exploration of pinning.</em></p>\n<h3 id=\"pinning-values-with-pinptr\"><a class=\"doc-anchor\" href=\"#pinning-values-with-pinptr\">§</a>Pinning values with <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a></h3>\n<p>In order to pin a value, we wrap a <em>pointer to that value</em> (of some type <code>Ptr</code>) in a\n<a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a>. <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a> can wrap any pointer type, forming a promise that the <strong>pointee</strong>\nwill not be <em>moved</em> or <a href=\"index.html#subtle-details-and-the-drop-guarantee\" title=\"pin subtle details\">otherwise invalidated</a>. If the pointee value’s type\nimplements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, we are free to disregard these requirements entirely and can wrap any\npointer to that value in <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a> directly via <a href=\"struct.Pin.html#method.new\" title=\"associated function std::pin::Pin::new\"><code>Pin::new</code></a>. If the pointee value’s type does\nnot implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then Rust will not let us use the <a href=\"struct.Pin.html#method.new\" title=\"associated function std::pin::Pin::new\"><code>Pin::new</code></a> function directly and\nwe’ll need to construct a <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a>-wrapped pointer in one of the more specialized manners\ndiscussed below.</p>\n<p>We call such a <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a>-wrapped pointer a <strong>pinning pointer</strong> (or pinning ref, or pinning\n<a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box</code></a>, etc.) because its existence is the thing that is pinning the underlying pointee in\nplace: it is the metaphorical “pin” securing the data in place on the pinboard (in memory).</p>\n<p>It is important to stress that the thing in the <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a> is not the value which we want to pin\nitself, but rather a pointer to that value! A <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a> does not pin the <code>Ptr</code> but rather\nthe pointer’s <em><strong>pointee</strong> value</em>.</p>\n<p>The most common set of types which require pinning related guarantees for soundness are the\ncompiler-generated state machines that implement <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a> for the return value of\n<code>async fn</code>s. These compiler-generated <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a>s may contain self-referential pointers, one\nof the most common use cases for <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a>. More details on this point are provided in the\n<a href=\"index.html\" title=\"pin module\"><code>pin</code> module</a> docs, but suffice it to say they require the guarantees provided by pinning to\nbe implemented soundly.</p>\n<p>This requirement for the implementation of <code>async fn</code>s means that the <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a> trait\nrequires all calls to <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"Future::poll\"><code>poll</code></a> to use a <code>self: <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut Self&gt;</code> parameter instead\nof the usual <code>&amp;mut self</code>. Therefore, when manually polling a future, you will need to pin it\nfirst.</p>\n<p>You may notice that <code>async fn</code>-sourced <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a>s are only a small percentage of all\n<a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a>s that exist, yet we had to modify the signature of <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"Future::poll\"><code>poll</code></a> for all <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a>s\nto accommodate them. This is unfortunate, but there is a way that the language attempts to\nalleviate the extra friction that this API choice incurs: the <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> trait.</p>\n<p>The vast majority of Rust types have no reason to ever care about being pinned. These\ntypes implement the <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> trait, which entirely opts all values of that type out of\npinning-related guarantees. For values of these types, pinning a value by pointing to it with a\n<a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a> will have no actual effect.</p>\n<p>The reason this distinction exists is exactly to allow APIs like <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"Future::poll\"><code>Future::poll</code></a> to take a\n<a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a> as an argument for all types while only forcing <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a> types that actually\ncare about pinning guarantees pay the ergonomics cost. For the majority of <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a> types\nthat don’t have a reason to care about being pinned and therefore implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, the\n<code><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut Self&gt;</code> will act exactly like a regular <code>&amp;mut Self</code>, allowing direct\naccess to the underlying value. Only types that <em>don’t</em> implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> will be restricted.</p>\n<h4 id=\"pinning-a-value-of-a-type-that-implements-unpin\"><a class=\"doc-anchor\" href=\"#pinning-a-value-of-a-type-that-implements-unpin\">§</a>Pinning a value of a type that implements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a></h4>\n<p>If the type of the value you need to “pin” implements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, you can trivially wrap any\npointer to that value in a <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a> by calling <a href=\"struct.Pin.html#method.new\" title=\"associated function std::pin::Pin::new\"><code>Pin::new</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"comment\">// Create a value of a type that implements `Unpin`\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>unpin_future = std::future::ready(<span class=\"number\">5</span>);\n\n<span class=\"comment\">// Pin it by creating a pinning mutable reference to it (ready to be `poll`ed!)\n</span><span class=\"kw\">let </span>my_pinned_unpin_future: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"kw\">_</span>&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>unpin_future);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++//+Create+a+value+of+a+type+that+implements+%60Unpin%60%0A++++let+mut+unpin_future+=+std::future::ready(5);%0A++++%0A++++//+Pin+it+by+creating+a+pinning+mutable+reference+to+it+(ready+to+be+%60poll%60ed!)%0A++++let+my_pinned_unpin_future:+Pin%3C%26mut+_%3E+=+Pin::new(%26mut+unpin_future);%0A%7D&amp;edition=2021\">Run</a></div>\n<h4 id=\"pinning-a-value-inside-a-box\"><a class=\"doc-anchor\" href=\"#pinning-a-value-inside-a-box\">§</a>Pinning a value inside a <a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box</code></a></h4>\n<p>The simplest and most flexible way to pin a value that does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> is to put\nthat value inside a <a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box</code></a> and then turn that <a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box</code></a> into a “pinning <a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box</code></a>” by wrapping it\nin a <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a>. You can do both of these in a single step using <a href=\"../../std/boxed/struct.Box.html#method.pin\" title=\"Box::pin\"><code>Box::pin</code></a>. Let’s see an\nexample of using this flow to pin a <a href=\"../future/trait.Future.html\" title=\"Future\"><code>Future</code></a> returned from calling an <code>async fn</code>, a common\nuse case as described above.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">async fn </span>add_one(x: u32) -&gt; u32 {\n    x + <span class=\"number\">1\n</span>}\n\n<span class=\"comment\">// Call the async function to get a future back\n</span><span class=\"kw\">let </span>fut = add_one(<span class=\"number\">42</span>);\n\n<span class=\"comment\">// Pin the future inside a pinning box\n</span><span class=\"kw\">let </span>pinned_fut: Pin&lt;Box&lt;<span class=\"kw\">_</span>&gt;&gt; = Box::pin(fut);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++async+fn+add_one(x:+u32)+-%3E+u32+%7B%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++//+Call+the+async+function+to+get+a+future+back%0A++++let+fut+=+add_one(42);%0A++++%0A++++//+Pin+the+future+inside+a+pinning+box%0A++++let+pinned_fut:+Pin%3CBox%3C_%3E%3E+=+Box::pin(fut);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you have a value which is already boxed, for example a <a href=\"../../std/boxed/struct.Box.html\" title=\"Box\"><code>Box&lt;dyn Future&gt;</code></a>, you can pin\nthat value in-place at its current memory address using <a href=\"../../std/boxed/struct.Box.html#method.into_pin\" title=\"Box::into_pin\"><code>Box::into_pin</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n<span class=\"kw\">use </span>std::future::Future;\n\n<span class=\"kw\">async fn </span>add_one(x: u32) -&gt; u32 {\n    x + <span class=\"number\">1\n</span>}\n\n<span class=\"kw\">fn </span>boxed_add_one(x: u32) -&gt; Box&lt;<span class=\"kw\">dyn </span>Future&lt;Output = u32&gt;&gt; {\n    Box::new(add_one(x))\n}\n\n<span class=\"kw\">let </span>boxed_fut = boxed_add_one(<span class=\"number\">42</span>);\n\n<span class=\"comment\">// Pin the future inside the existing box\n</span><span class=\"kw\">let </span>pinned_fut: Pin&lt;Box&lt;<span class=\"kw\">_</span>&gt;&gt; = Box::into_pin(boxed_fut);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++use+std::future::Future;%0A++++%0A++++async+fn+add_one(x:+u32)+-%3E+u32+%7B%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++fn+boxed_add_one(x:+u32)+-%3E+Box%3Cdyn+Future%3COutput+=+u32%3E%3E+%7B%0A++++++++Box::new(add_one(x))%0A++++%7D%0A++++%0A++++let+boxed_fut+=+boxed_add_one(42);%0A++++%0A++++//+Pin+the+future+inside+the+existing+box%0A++++let+pinned_fut:+Pin%3CBox%3C_%3E%3E+=+Box::into_pin(boxed_fut);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>There are similar pinning methods offered on the other standard library smart pointer types\nas well, like <a href=\"../../std/rc/struct.Rc.html\" title=\"Rc\"><code>Rc</code></a> and <a href=\"../../std/sync/struct.Arc.html\" title=\"Arc\"><code>Arc</code></a>.</p>\n<h4 id=\"pinning-a-value-on-the-stack-using-pin\"><a class=\"doc-anchor\" href=\"#pinning-a-value-on-the-stack-using-pin\">§</a>Pinning a value on the stack using <a href=\"macro.pin.html\" title=\"pin!\"><code>pin!</code></a></h4>\n<p>There are some situations where it is desirable or even required (for example, in a <code>#[no_std]</code>\ncontext where you don’t have access to the standard library or allocation in general) to\npin a value which does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> to its location on the stack. Doing so is\npossible using the <a href=\"macro.pin.html\" title=\"pin!\"><code>pin!</code></a> macro. See its documentation for more.</p>\n<h3 id=\"layout-and-abi\"><a class=\"doc-anchor\" href=\"#layout-and-abi\">§</a>Layout and ABI</h3>\n<p><a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin&lt;Ptr&gt;</code></a> is guaranteed to have the same memory layout and ABI<sup id=\"fnref1\"><a href=\"#fn1\">1</a></sup> as <code>Ptr</code>.</p>\n<div class=\"footnotes\"><hr><ol><li id=\"fn1\"><p>There is a bit of nuance here that is still being decided about whether the\naliasing semantics of <code>Pin&lt;&amp;mut T&gt;</code> should be different than <code>&amp;mut T</code>, but this is true as of\ntoday.&nbsp;<a href=\"#fnref1\">↩</a></p></li></ol></div></div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3CPtr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1170\">source</a><a href=\"#impl-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1192\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(pointer: Ptr) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>Pin&lt;Ptr&gt;</code> around a pointer to some data of a type that\nimplements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>.</p>\n<p>Unlike <code>Pin::new_unchecked</code>, this method is safe because the pointer\n<code>Ptr</code> dereferences to an <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> type, which cancels the pinning guarantees.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n\n<span class=\"comment\">// Since `val` doesn't care about being moved, we can safely create a \"facade\" `Pin`\n// which will allow `val` to participate in `Pin`-bound apis  without checking that\n// pinning guarantees are actually upheld.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++%0A++++//+Since+%60val%60+doesn't+care+about+being+moved,+we+can+safely+create+a+%22facade%22+%60Pin%60%0A++++//+which+will+allow+%60val%60+to+participate+in+%60Pin%60-bound+apis++without+checking+that%0A++++//+pinning+guarantees+are+actually+upheld.%0A++++let+mut+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0, const unstable\">1.39.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1220\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(pin: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;) -&gt; Ptr</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying pointer.</p>\n<p>Doing this operation safely requires that the data pointed at by this pinning pointer\nimplements <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> so that we can ignore the pinning invariants when unwrapping it.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);\n\n<span class=\"comment\">// Unwrap the pin to get the underlying mutable reference to the value. We can do\n// this because `val` doesn't care about being moved, so the `Pin` was just\n// a \"facade\" anyway.\n</span><span class=\"kw\">let </span>r = Pin::into_inner(pinned);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++let+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A++++%0A++++//+Unwrap+the+pin+to+get+the+underlying+mutable+reference+to+the+value.+We+can+do%0A++++//+this+because+%60val%60+doesn't+care+about+being+moved,+so+the+%60Pin%60+was+just%0A++++//+a+%22facade%22+anyway.%0A++++let+r+=+Pin::into_inner(pinned);%0A++++assert_eq!(*r,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3CPtr%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1225\">source</a><a href=\"#impl-Pin%3CPtr%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1357\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.new_unchecked\" class=\"fn\">new_unchecked</a>(pointer: Ptr) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;</h4></section></summary><div class=\"docblock\"><p>Construct a new <code>Pin&lt;Ptr&gt;</code> around a reference to some data of a type that\nmay or may not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>.</p>\n<p>If <code>pointer</code> dereferences to an <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a> type, <a href=\"struct.Pin.html#method.new\" title=\"associated function std::pin::Pin::new\"><code>Pin::new</code></a> should be used\ninstead.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This constructor is unsafe because we cannot guarantee that the data\npointed to by <code>pointer</code> is pinned. At its core, pinning a value means making the\nguarantee that the value’s data will not be moved nor have its storage invalidated until\nit gets dropped. For a more thorough explanation of pinning, see the <a href=\"index.html\" title=\"mod std::pin\"><code>pin</code> module docs</a>.</p>\n<p>If the caller that is constructing this <code>Pin&lt;Ptr&gt;</code> does not ensure that the data <code>Ptr</code>\npoints to is pinned, that is a violation of the API contract and may lead to undefined\nbehavior in later (even safe) operations.</p>\n<p>By using this method, you are also making a promise about the <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a> and\n<a href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\"><code>DerefMut</code></a> implementations of <code>Ptr</code>, if they exist. Most importantly, they\nmust not move out of their <code>self</code> arguments: <code>Pin::as_mut</code> and <code>Pin::as_ref</code>\nwill call <code>DerefMut::deref_mut</code> and <code>Deref::deref</code> <em>on the pointer type <code>Ptr</code></em>\nand expect these methods to uphold the pinning invariants.\nMoreover, by calling this method you promise that the reference <code>Ptr</code>\ndereferences to will not be moved out of again; in particular, it\nmust not be possible to obtain a <code>&amp;mut Ptr::Target</code> and then\nmove out of that reference (using, for example <a href=\"../mem/fn.swap.html\" title=\"fn std::mem::swap\"><code>mem::swap</code></a>).</p>\n<p>For example, calling <code>Pin::new_unchecked</code> on an <code>&amp;'a mut T</code> is unsafe because\nwhile you are able to pin it for the given lifetime <code>'a</code>, you have no control\nover whether it is kept pinned once <code>'a</code> ends, and therefore cannot uphold the\nguarantee that a value, once pinned, remains pinned until it is dropped:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">fn </span>move_pinned_ref&lt;T&gt;(<span class=\"kw-2\">mut </span>a: T, <span class=\"kw-2\">mut </span>b: T) {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>p: Pin&lt;<span class=\"kw-2\">&amp;mut </span>T&gt; = Pin::new_unchecked(<span class=\"kw-2\">&amp;mut </span>a);\n        <span class=\"comment\">// This should mean the pointee `a` can never move again.\n    </span>}\n    mem::swap(<span class=\"kw-2\">&amp;mut </span>a, <span class=\"kw-2\">&amp;mut </span>b); <span class=\"comment\">// Potential UB down the road ⚠️\n    // The address of `a` changed to `b`'s stack slot, so `a` got moved even\n    // though we have previously pinned it! We have violated the pinning API contract.\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++use+std::pin::Pin;%0A++++%0A++++fn+move_pinned_ref%3CT%3E(mut+a:+T,+mut+b:+T)+%7B%0A++++++++unsafe+%7B%0A++++++++++++let+p:+Pin%3C%26mut+T%3E+=+Pin::new_unchecked(%26mut+a);%0A++++++++++++//+This+should+mean+the+pointee+%60a%60+can+never+move+again.%0A++++++++%7D%0A++++++++mem::swap(%26mut+a,+%26mut+b);+//+Potential+UB+down+the+road+%E2%9A%A0%EF%B8%8F%0A++++++++//+The+address+of+%60a%60+changed+to+%60b%60's+stack+slot,+so+%60a%60+got+moved+even%0A++++++++//+though+we+have+previously+pinned+it!+We+have+violated+the+pinning+API+contract.%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A value, once pinned, must remain pinned until it is dropped (unless its type implements\n<code>Unpin</code>). Because <code>Pin&lt;&amp;mut T&gt;</code> does not own the value, dropping the <code>Pin</code> will not drop\nthe value and will not end the pinning contract. So moving the value after dropping the\n<code>Pin&lt;&amp;mut T&gt;</code> is still a violation of the API contract.</p>\n<p>Similarly, calling <code>Pin::new_unchecked</code> on an <code>Rc&lt;T&gt;</code> is unsafe because there could be\naliases to the same data that are not subject to the pinning restrictions:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::rc::Rc;\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">fn </span>move_pinned_rc&lt;T&gt;(<span class=\"kw-2\">mut </span>x: Rc&lt;T&gt;) {\n    <span class=\"comment\">// This should mean the pointee can never move again.\n    </span><span class=\"kw\">let </span>pin = <span class=\"kw\">unsafe </span>{ Pin::new_unchecked(Rc::clone(<span class=\"kw-2\">&amp;</span>x)) };\n    {\n        <span class=\"kw\">let </span>p: Pin&lt;<span class=\"kw-2\">&amp;</span>T&gt; = pin.as_ref();\n        <span class=\"comment\">// ...\n    </span>}\n    drop(pin);\n\n    <span class=\"kw\">let </span>content = Rc::get_mut(<span class=\"kw-2\">&amp;mut </span>x).unwrap(); <span class=\"comment\">// Potential UB down the road ⚠️\n    // Now, if `x` was the only reference, we have a mutable reference to\n    // data that we pinned above, which we could use to move it as we have\n    // seen in the previous example. We have violated the pinning API contract.\n </span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++use+std::pin::Pin;%0A++++%0A++++fn+move_pinned_rc%3CT%3E(mut+x:+Rc%3CT%3E)+%7B%0A++++++++//+This+should+mean+the+pointee+can+never+move+again.%0A++++++++let+pin+=+unsafe+%7B+Pin::new_unchecked(Rc::clone(%26x))+%7D;%0A++++++++%7B%0A++++++++++++let+p:+Pin%3C%26T%3E+=+pin.as_ref();%0A++++++++++++//+...%0A++++++++%7D%0A++++++++drop(pin);%0A++++%0A++++++++let+content+=+Rc::get_mut(%26mut+x).unwrap();+//+Potential+UB+down+the+road+%E2%9A%A0%EF%B8%8F%0A++++++++//+Now,+if+%60x%60+was+the+only+reference,+we+have+a+mutable+reference+to%0A++++++++//+data+that+we+pinned+above,+which+we+could+use+to+move+it+as+we+have%0A++++++++//+seen+in+the+previous+example.+We+have+violated+the+pinning+API+contract.%0A+++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h6 id=\"pinning-of-closure-captures\"><a class=\"doc-anchor\" href=\"#pinning-of-closure-captures\">§</a>Pinning of closure captures</h6>\n<p>Particular care is required when using <code>Pin::new_unchecked</code> in a closure:\n<code>Pin::new_unchecked(&amp;mut var)</code> where <code>var</code> is a by-value (moved) closure capture\nimplicitly makes the promise that the closure itself is pinned, and that <em>all</em> uses\nof this closure capture respect that pinning.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n<span class=\"kw\">use </span>std::task::Context;\n<span class=\"kw\">use </span>std::future::Future;\n\n<span class=\"kw\">fn </span>move_pinned_closure(<span class=\"kw-2\">mut </span>x: <span class=\"kw\">impl </span>Future, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) {\n    <span class=\"comment\">// Create a closure that moves `x`, and then internally uses it in a pinned way.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>closure = <span class=\"kw\">move </span>|| <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>_ignore = Pin::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x).poll(cx);\n    };\n    <span class=\"comment\">// Call the closure, so the future can assume it has been pinned.\n    </span>closure();\n    <span class=\"comment\">// Move the closure somewhere else. This also moves `x`!\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>moved = closure;\n    <span class=\"comment\">// Calling it again means we polled the future from two different locations,\n    // violating the pinning API contract.\n    </span>moved(); <span class=\"comment\">// Potential UB ⚠️\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++use+std::task::Context;%0A++++use+std::future::Future;%0A++++%0A++++fn+move_pinned_closure(mut+x:+impl+Future,+cx:+%26mut+Context%3C'_%3E)+%7B%0A++++++++//+Create+a+closure+that+moves+%60x%60,+and+then+internally+uses+it+in+a+pinned+way.%0A++++++++let+mut+closure+=+move+%7C%7C+unsafe+%7B%0A++++++++++++let+_ignore+=+Pin::new_unchecked(%26mut+x).poll(cx);%0A++++++++%7D;%0A++++++++//+Call+the+closure,+so+the+future+can+assume+it+has+been+pinned.%0A++++++++closure();%0A++++++++//+Move+the+closure+somewhere+else.+This+also+moves+%60x%60!%0A++++++++let+mut+moved+=+closure;%0A++++++++//+Calling+it+again+means+we+polled+the+future+from+two+different+locations,%0A++++++++//+violating+the+pinning+API+contract.%0A++++++++moved();+//+Potential+UB+%E2%9A%A0%EF%B8%8F%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When passing a closure to another API, it might be moving the closure any time, so\n<code>Pin::new_unchecked</code> on closure captures may only be used if the API explicitly documents\nthat the closure is pinned.</p>\n<p>The better alternative is to avoid all that trouble and do the pinning in the outer function\ninstead (here using the <a href=\"macro.pin.html\" title=\"macro std::pin::pin\"><code>pin!</code></a> macro):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::pin;\n<span class=\"kw\">use </span>std::task::Context;\n<span class=\"kw\">use </span>std::future::Future;\n\n<span class=\"kw\">fn </span>move_pinned_closure(<span class=\"kw-2\">mut </span>x: <span class=\"kw\">impl </span>Future, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"macro\">pin!</span>(x);\n    <span class=\"comment\">// Create a closure that captures `x: Pin&lt;&amp;mut _&gt;`, which is safe to move.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>closure = <span class=\"kw\">move </span>|| {\n        <span class=\"kw\">let </span>_ignore = x.as_mut().poll(cx);\n    };\n    <span class=\"comment\">// Call the closure, so the future can assume it has been pinned.\n    </span>closure();\n    <span class=\"comment\">// Move the closure somewhere else.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>moved = closure;\n    <span class=\"comment\">// Calling it again here is fine (except that we might be polling a future that already\n    // returned `Poll::Ready`, but that is a separate problem).\n    </span>moved();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::pin;%0A++++use+std::task::Context;%0A++++use+std::future::Future;%0A++++%0A++++fn+move_pinned_closure(mut+x:+impl+Future,+cx:+%26mut+Context%3C'_%3E)+%7B%0A++++++++let+mut+x+=+pin!(x);%0A++++++++//+Create+a+closure+that+captures+%60x:+Pin%3C%26mut+_%3E%60,+which+is+safe+to+move.%0A++++++++let+mut+closure+=+move+%7C%7C+%7B%0A++++++++++++let+_ignore+=+x.as_mut().poll(cx);%0A++++++++%7D;%0A++++++++//+Call+the+closure,+so+the+future+can+assume+it+has+been+pinned.%0A++++++++closure();%0A++++++++//+Move+the+closure+somewhere+else.%0A++++++++let+mut+moved+=+closure;%0A++++++++//+Calling+it+again+here+is+fine+(except+that+we+might+be+polling+a+future+that+already%0A++++++++//+returned+%60Poll::Ready%60,+but+that+is+a+separate+problem).%0A++++++++moved();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1370\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;&lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a shared reference to the pinned value this <a href=\"struct.Pin.html\" title=\"struct std::pin::Pin\"><code>Pin</code></a> points to.</p>\n<p>This is a generic method to go from <code>&amp;Pin&lt;Pointer&lt;T&gt;&gt;</code> to <code>Pin&lt;&amp;T&gt;</code>.\nIt is safe because, as part of the contract of <code>Pin::new_unchecked</code>,\nthe pointee cannot move after <code>Pin&lt;Pointer&lt;T&gt;&gt;</code> got created.\n“Malicious” implementations of <code>Pointer::Deref</code> are likewise\nruled out by the contract of <code>Pin::new_unchecked</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0, const unstable\">1.39.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1396\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.into_inner_unchecked\" class=\"fn\">into_inner_unchecked</a>(pin: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;) -&gt; Ptr</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>Pin&lt;Ptr&gt;</code>, returning the underlying <code>Ptr</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is unsafe. You must guarantee that you will continue to\ntreat the pointer <code>Ptr</code> as pinned after you call this function, so that\nthe invariants on the <code>Pin</code> type can be upheld. If the code using the\nresulting <code>Ptr</code> does not continue to maintain the pinning invariants that\nis a violation of the API contract and may lead to undefined behavior in\nlater (safe) operations.</p>\n<p>Note that you must be able to guarantee that the data pointed to by <code>Ptr</code>\nwill be treated as pinned all the way until its <code>drop</code> handler is complete!</p>\n<p><em>For more information, see the <a href=\"index.html\" title=\"mod std::pin\"><code>pin</code> module docs</a></em></p>\n<p>If the underlying data is <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, <a href=\"struct.Pin.html#method.into_inner\" title=\"associated function std::pin::Pin::into_inner\"><code>Pin::into_inner</code></a> should be used\ninstead.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3CPtr%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1401\">source</a><a href=\"#impl-Pin%3CPtr%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1433\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the pinned value this <code>Pin&lt;Ptr&gt;</code> points to.</p>\n<p>This is a generic method to go from <code>&amp;mut Pin&lt;Pointer&lt;T&gt;&gt;</code> to <code>Pin&lt;&amp;mut T&gt;</code>.\nIt is safe because, as part of the contract of <code>Pin::new_unchecked</code>,\nthe pointee cannot move after <code>Pin&lt;Pointer&lt;T&gt;&gt;</code> got created.\n“Malicious” implementations of <code>Pointer::DerefMut</code> are likewise\nruled out by the contract of <code>Pin::new_unchecked</code>.</p>\n<p>This method is useful when doing multiple calls to functions that consume the\npinning pointer.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">impl </span>Type {\n    <span class=\"kw\">fn </span>method(<span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;) {\n        <span class=\"comment\">// do something\n    </span>}\n\n    <span class=\"kw\">fn </span>call_method_twice(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;) {\n        <span class=\"comment\">// `method` consumes `self`, so reborrow the `Pin&lt;&amp;mut Self&gt;` via `as_mut`.\n        </span><span class=\"self\">self</span>.as_mut().method();\n        <span class=\"self\">self</span>.as_mut().method();\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++struct+Type+%7B%7D%0A++++impl+Type+%7B%0A++++++++fn+method(self:+Pin%3C%26mut+Self%3E)+%7B%0A++++++++++++//+do+something%0A++++++++%7D%0A++++%0A++++++++fn+call_method_twice(mut+self:+Pin%3C%26mut+Self%3E)+%7B%0A++++++++++++//+%60method%60+consumes+%60self%60,+so+reborrow+the+%60Pin%3C%26mut+Self%3E%60+via+%60as_mut%60.%0A++++++++++++self.as_mut().method();%0A++++++++++++self.as_mut().method();%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1460-1462\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set\" class=\"fn\">set</a>(&amp;mut self, value: &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>)<div class=\"where\">where\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Assigns a new value to the memory location pointed to by the <code>Pin&lt;Ptr&gt;</code>.</p>\n<p>This overwrites pinned data, but that is okay: the original pinned value’s destructor gets\nrun before being overwritten and the new value is also a valid value of the same type, so\nno pinning invariant is violated. See <a href=\"index.html#subtle-details-and-the-drop-guarantee\" title=\"mod std::pin\">the <code>pin</code> module documentation</a>\nfor more information on how this upholds the pinning invariants.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val: u8 = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pinned: Pin&lt;<span class=\"kw-2\">&amp;mut </span>u8&gt; = Pin::new(<span class=\"kw-2\">&amp;mut </span>val);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, pinned); <span class=\"comment\">// 5\n</span>pinned.set(<span class=\"number\">10</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, pinned); <span class=\"comment\">// 10</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++%0A++++let+mut+val:+u8+=+5;%0A++++let+mut+pinned:+Pin%3C%26mut+u8%3E+=+Pin::new(%26mut+val);%0A++++println!(%22%7B%7D%22,+pinned);+//+5%0A++++pinned.set(10);%0A++++println!(%22%7B%7D%22,+pinned);+//+10%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1468\">source</a><a href=\"#impl-Pin%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1485-1488\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.map_unchecked\" class=\"fn\">map_unchecked</a>&lt;U, F&gt;(self, func: F) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a U</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;U</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a new pin by mapping the interior value.</p>\n<p>For example, if you wanted to get a <code>Pin</code> of a field of something,\nyou could use this to get access to that field in one line of code.\nHowever, there are several gotchas with these “pinning projections”;\nsee the <a href=\"index.html#projections-and-structural-pinning\" title=\"mod std::pin\"><code>pin</code> module</a> documentation for further details on that topic.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe. You must guarantee that the data you return\nwill not move so long as the argument value does not move (for example,\nbecause it is one of the fields of that value), and also that you do\nnot move out of the argument you receive to the interior function.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1519\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_ref\" class=\"fn\">get_ref</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Gets a shared reference out of a pin.</p>\n<p>This is safe because it is not possible to move out of a shared reference.\nIt may seem like there is an issue here with interior mutability: in fact,\nit <em>is</em> possible to move a <code>T</code> out of a <code>&amp;RefCell&lt;T&gt;</code>. However, this is\nnot a problem as long as there does not also exist a <code>Pin&lt;&amp;T&gt;</code> pointing\nto the inner <code>T</code> inside the <code>RefCell</code>, and <code>RefCell&lt;T&gt;</code> does not let you get a\n<code>Pin&lt;&amp;T&gt;</code> pointer to its contents. See the discussion on <a href=\"index.html#projections-and-structural-pinning\" title=\"mod std::pin\">“pinning projections”</a>\nfor further details.</p>\n<p>Note: <code>Pin</code> also implements <code>Deref</code> to the target, which can be used\nto access the inner value. However, <code>Deref</code> only provides a reference\nthat lives for as long as the borrow of the <code>Pin</code>, not the lifetime of\nthe reference contained in the <code>Pin</code>. This method allows turning the <code>Pin</code> into a reference\nwith the same lifetime as the reference it wraps.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3C%26mut+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1524\">source</a><a href=\"#impl-Pin%3C%26mut+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a>&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1530\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_ref\" class=\"fn\">into_ref</a>(self) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this <code>Pin&lt;&amp;mut T&gt;</code> into a <code>Pin&lt;&amp;T&gt;</code> with the same lifetime.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1547-1549\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the data inside of this <code>Pin</code>.</p>\n<p>This requires that the data inside this <code>Pin</code> is <code>Unpin</code>.</p>\n<p>Note: <code>Pin</code> also implements <code>DerefMut</code> to the data, which can be used\nto access the inner value. However, <code>DerefMut</code> only provides a reference\nthat lives for as long as the borrow of the <code>Pin</code>, not the lifetime of\nthe <code>Pin</code> itself. This method allows turning the <code>Pin</code> into a reference\nwith the same lifetime as the original <code>Pin</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const unstable\">1.33.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1568\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the data inside of this <code>Pin</code>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe. You must guarantee that you will never move\nthe data out of the mutable reference you receive when you call this\nfunction, so that the invariants on the <code>Pin</code> type can be upheld.</p>\n<p>If the underlying data is <code>Unpin</code>, <code>Pin::get_mut</code> should be used\ninstead.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1589-1592\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.map_unchecked_mut\" class=\"fn\">map_unchecked_mut</a>&lt;U, F&gt;(self, func: F) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut U</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut U</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Construct a new pin by mapping the interior value.</p>\n<p>For example, if you wanted to get a <code>Pin</code> of a field of something,\nyou could use this to get access to that field in one line of code.\nHowever, there are several gotchas with these “pinning projections”;\nsee the <a href=\"index.html#projections-and-structural-pinning\" title=\"mod std::pin\"><code>pin</code> module</a> documentation for further details on that topic.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This function is unsafe. You must guarantee that the data you return\nwill not move so long as the argument value does not move (for example,\nbecause it is one of the fields of that value), and also that you do\nnot move out of the argument you receive to the interior function.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3C%26T%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1604\">source</a><a href=\"#impl-Pin%3C%26T%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static T</a>&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.static_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0, const unstable\">1.61.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1611\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.static_ref\" class=\"fn\">static_ref</a>(r: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static T</a>) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a pinning reference from a <code>&amp;'static</code> reference.</p>\n<p>This is safe because <code>T</code> is borrowed immutably for the <code>'static</code> lifetime, which\nnever ends.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3C%26mut+Pin%3CPtr%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1618\">source</a><a href=\"#impl-Pin%3C%26mut+Pin%3CPtr%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, Ptr&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;'a mut <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_deref_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1629\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_deref_mut\" class=\"fn\">as_deref_mut</a>(self) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;'a mut &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pin_deref_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86918\">#86918</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets <code>Pin&lt;&amp;mut T&gt;</code> to the underlying pinned value from this nested <code>Pin</code>-pointer.</p>\n<p>This is a generic method to go from <code>Pin&lt;&amp;mut Pin&lt;Pointer&lt;T&gt;&gt;&gt;</code> to <code>Pin&lt;&amp;mut T&gt;</code>. It is\nsafe because the existence of a <code>Pin&lt;Pointer&lt;T&gt;&gt;</code> ensures that the pointee, <code>T</code>, cannot\nmove in the future, and this method does not enable the pointee to move. “Malicious”\nimplementations of <code>Ptr::DerefMut</code> are likewise ruled out by the contract of\n<code>Pin::new_unchecked</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pin%3C%26mut+T%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1658\">source</a><a href=\"#impl-Pin%3C%26mut+T%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static mut T</a>&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.static_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0, const unstable\">1.61.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/76654\" title=\"Tracking issue for const_pin\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1665\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.static_mut\" class=\"fn\">static_mut</a>(r: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static mut T</a>) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'static mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get a pinning mutable reference from a static mutable reference.</p>\n<p>This is safe because <code>T</code> is borrowed for the <code>'static</code> lifetime, which\nnever ends.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsyncIterator-for-Pin%3CP%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#99-102\">source</a><a href=\"#impl-AsyncIterator-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;&lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a> as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of items yielded by the async iterator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#106\">source</a><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.AsyncIterator.html#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt; as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the async iterator is exhausted. <a href=\"../async_iter/trait.AsyncIterator.html#tymethod.poll_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#110\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.AsyncIterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Returns the bounds on the remaining length of the async iterator. <a href=\"../async_iter/trait.AsyncIterator.html#method.size_hint\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1089\">source</a></span><a href=\"#impl-Clone-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1089\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#120\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3C%26mut+G%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R&gt; <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a>&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine yields. <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine returns. <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#124\">source</a><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a>&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut G</a>&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">Resumes the execution of this coroutine. <a href=\"../ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2316-2318\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine yields. <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine returns. <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resume-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2323\">source</a><a href=\"#method.resume-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">Resumes the execution of this coroutine. <a href=\"../ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1694\">source</a></span><a href=\"#impl-Debug-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1695\">source</a><a href=\"#method.fmt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1673\">source</a></span><a href=\"#impl-Deref-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1675\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1681\">source</a></span><a href=\"#impl-DerefMut-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1682\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1701\">source</a></span><a href=\"#impl-Display-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1702\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1513-1515\">source</a></span><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + 'static,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1528\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via <a href=\"../boxed/struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\"><code>Box::into_pin</code></a>.</p>\n<p>Constructing and pinning a <code>Box</code> with <code>&lt;Pin&lt;Box&lt;T&gt;&gt;&gt;::from(<a href=\"../boxed/struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\">Box::new</a>(x))</code>\ncan also be written more concisely using <code><a href=\"../boxed/struct.Box.html#method.pin\" title=\"associated function std::boxed::Box::pin\">Box::pin</a>(x)</code>.\nThis <code>From</code> implementation is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with <a href=\"../boxed/struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\"><code>Box::new</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Future-for-Pin%3CP%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#116-118\">source</a></span><a href=\"#impl-Future-for-Pin%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.Future.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;&lt;P as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a> as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.poll\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/future.rs.html#122\">source</a><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.Future.html#tymethod.poll\" class=\"fn\">poll</a>(\n    self: <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;P&gt; as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\">Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a href=\"../future/trait.Future.html#tymethod.poll\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1164\">source</a></span><a href=\"#impl-Hash-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1165\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1157\">source</a></span><a href=\"#impl-Ord-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1158\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1114-1116\">source</a></span><a href=\"#impl-PartialEq%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr, Q&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    Q: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;Q as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1118\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1122\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1131-1133\">source</a></span><a href=\"#impl-PartialOrd%3CPin%3CQ%3E%3E-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr, Q&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    Q: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;Q as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1135\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1139\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1143\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1147\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1151\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Q&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pointer-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1708\">source</a></span><a href=\"#impl-Pointer-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1709\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1720\">source</a></span><a href=\"#impl-CoerceUnsized%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</div></h3></section><section id=\"impl-Copy-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1089\">source</a></span><a href=\"#impl-Copy-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-DerefPure-for-Pin%3CPtr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1688\">source</a><a href=\"#impl-DerefPure-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../ops/trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1723\">source</a></span><a href=\"#impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-Eq-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1128\">source</a></span><a href=\"#impl-Eq-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-Send-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Pin%3CPtr%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoAsyncIterator-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#156\">source</a><a href=\"#impl-IntoAsyncIterator-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"../async_iter/trait.IntoAsyncIterator.html\" title=\"trait std::async_iter::IntoAsyncIterator\">IntoAsyncIterator</a> for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of the item yielded by the iterator</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoAsyncIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoAsyncIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.IntoAsyncIter\" class=\"associatedtype\">IntoAsyncIter</a> = I</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of the resulting iterator</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_async_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#160\">source</a><a href=\"#method.into_async_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.IntoAsyncIterator.html#tymethod.into_async_iter\" class=\"fn\">into_async_iter</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"../async_iter/trait.IntoAsyncIterator.html\" title=\"trait std::async_iter::IntoAsyncIterator\">IntoAsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.IntoAsyncIter\" title=\"type std::async_iter::IntoAsyncIterator::IntoAsyncIter\">IntoAsyncIter</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Converts <code>self</code> into an async iterator</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoFuture-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138\">source</a><a href=\"#impl-IntoFuture-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The output that the future will produce on completion.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoFuture\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a> = F</h4></section></summary><div class=\"docblock\">Which kind of future are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_future\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142\">source</a><a href=\"#method.into_future\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\" class=\"fn\">into_future</a>(self) -&gt; &lt;F as <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" title=\"type std::future::IntoFuture::IntoFuture\">IntoFuture</a></h4></section></summary><div class=\"docblock\">Creates a future from a value. <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:56.741Z"
}