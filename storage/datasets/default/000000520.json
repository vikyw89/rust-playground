{
	"title": "Index in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.Index.html",
	"markdown": "# Index in std::ops - Rust\n\n## Trait [std](../index.html)::[ops](index.html)::[Index](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#58) ·\n\n```\npub trait Index<Idx>where\n    Idx: ?Sized,{\n    type Output: ?Sized;\n\n    // Required method\n    fn index(&self, index: Idx) -> &Self::Output;\n}\n```\n\nExpand description\n\nUsed for indexing operations (`container[index]`) in immutable contexts.\n\n`container[index]` is actually syntactic sugar for `*container.index(index)`, but only when used as an immutable value. If a mutable value is requested, [`IndexMut`](trait.IndexMut.html \"trait std::ops::IndexMut\") is used instead. This allows nice things such as `let value = v[index]` if the type of `value` implements [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\").\n\n## [§](#examples)Examples\n\nThe following example implements `Index` on a read-only `NucleotideCount` container, enabling individual counts to be retrieved with index syntax.\n\n```\nuse std::ops::Index;\n\nenum Nucleotide {\n    A,\n    C,\n    G,\n    T,\n}\n\nstruct NucleotideCount {\n    a: usize,\n    c: usize,\n    g: usize,\n    t: usize,\n}\n\nimpl Index<Nucleotide> for NucleotideCount {\n    type Output = usize;\n\n    fn index(&self, nucleotide: Nucleotide) -> &Self::Output {\n        match nucleotide {\n            Nucleotide::A => &self.a,\n            Nucleotide::C => &self.c,\n            Nucleotide::G => &self.g,\n            Nucleotide::T => &self.t,\n        }\n    }\n}\n\nlet nucleotide_count = NucleotideCount {a: 14, c: 9, g: 10, t: 12};\nassert_eq!(nucleotide_count[Nucleotide::A], 14);\nassert_eq!(nucleotide_count[Nucleotide::C], 9);\nassert_eq!(nucleotide_count[Nucleotide::G], 10);\nassert_eq!(nucleotide_count[Nucleotide::T], 12);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Index;%0A++++%0A++++enum+Nucleotide+%7B%0A++++++++A,%0A++++++++C,%0A++++++++G,%0A++++++++T,%0A++++%7D%0A++++%0A++++struct+NucleotideCount+%7B%0A++++++++a:+usize,%0A++++++++c:+usize,%0A++++++++g:+usize,%0A++++++++t:+usize,%0A++++%7D%0A++++%0A++++impl+Index%3CNucleotide%3E+for+NucleotideCount+%7B%0A++++++++type+Output+=+usize;%0A++++%0A++++++++fn+index(%26self,+nucleotide:+Nucleotide)+-%3E+%26Self::Output+%7B%0A++++++++++++match+nucleotide+%7B%0A++++++++++++++++Nucleotide::A+=%3E+%26self.a,%0A++++++++++++++++Nucleotide::C+=%3E+%26self.c,%0A++++++++++++++++Nucleotide::G+=%3E+%26self.g,%0A++++++++++++++++Nucleotide::T+=%3E+%26self.t,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+nucleotide_count+=+NucleotideCount+%7Ba:+14,+c:+9,+g:+10,+t:+12%7D;%0A++++assert_eq!(nucleotide_count%5BNucleotide::A%5D,+14);%0A++++assert_eq!(nucleotide_count%5BNucleotide::C%5D,+9);%0A++++assert_eq!(nucleotide_count%5BNucleotide::G%5D,+10);%0A++++assert_eq!(nucleotide_count%5BNucleotide::T%5D,+12);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#62)\n\nThe returned type after indexing.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#71)\n\nPerforms the indexing (`container[index]`) operation.\n\n##### [§](#panics)Panics\n\nMay panic if the index is out of bounds.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Used for indexing operations (`container[index]`) in immutable contexts.\"><title>Index in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Index</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Index</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Output\">Output</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.index\">index</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">Index</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#58\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Index&lt;Idx&gt;<div class=\"where\">where\n    Idx: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{\n    type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Used for indexing operations (<code>container[index]</code>) in immutable contexts.</p>\n<p><code>container[index]</code> is actually syntactic sugar for <code>*container.index(index)</code>,\nbut only when used as an immutable value. If a mutable value is requested,\n<a href=\"trait.IndexMut.html\" title=\"trait std::ops::IndexMut\"><code>IndexMut</code></a> is used instead. This allows nice things such as\n<code>let value = v[index]</code> if the type of <code>value</code> implements <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>The following example implements <code>Index</code> on a read-only <code>NucleotideCount</code>\ncontainer, enabling individual counts to be retrieved with index syntax.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Index;\n\n<span class=\"kw\">enum </span>Nucleotide {\n    A,\n    C,\n    G,\n    T,\n}\n\n<span class=\"kw\">struct </span>NucleotideCount {\n    a: usize,\n    c: usize,\n    g: usize,\n    t: usize,\n}\n\n<span class=\"kw\">impl </span>Index&lt;Nucleotide&gt; <span class=\"kw\">for </span>NucleotideCount {\n    <span class=\"kw\">type </span>Output = usize;\n\n    <span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, nucleotide: Nucleotide) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n        <span class=\"kw\">match </span>nucleotide {\n            Nucleotide::A =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.a,\n            Nucleotide::C =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.c,\n            Nucleotide::G =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.g,\n            Nucleotide::T =&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.t,\n        }\n    }\n}\n\n<span class=\"kw\">let </span>nucleotide_count = NucleotideCount {a: <span class=\"number\">14</span>, c: <span class=\"number\">9</span>, g: <span class=\"number\">10</span>, t: <span class=\"number\">12</span>};\n<span class=\"macro\">assert_eq!</span>(nucleotide_count[Nucleotide::A], <span class=\"number\">14</span>);\n<span class=\"macro\">assert_eq!</span>(nucleotide_count[Nucleotide::C], <span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(nucleotide_count[Nucleotide::G], <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(nucleotide_count[Nucleotide::T], <span class=\"number\">12</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Index;%0A++++%0A++++enum+Nucleotide+%7B%0A++++++++A,%0A++++++++C,%0A++++++++G,%0A++++++++T,%0A++++%7D%0A++++%0A++++struct+NucleotideCount+%7B%0A++++++++a:+usize,%0A++++++++c:+usize,%0A++++++++g:+usize,%0A++++++++t:+usize,%0A++++%7D%0A++++%0A++++impl+Index%3CNucleotide%3E+for+NucleotideCount+%7B%0A++++++++type+Output+=+usize;%0A++++%0A++++++++fn+index(%26self,+nucleotide:+Nucleotide)+-%3E+%26Self::Output+%7B%0A++++++++++++match+nucleotide+%7B%0A++++++++++++++++Nucleotide::A+=%3E+%26self.a,%0A++++++++++++++++Nucleotide::C+=%3E+%26self.c,%0A++++++++++++++++Nucleotide::G+=%3E+%26self.g,%0A++++++++++++++++Nucleotide::T+=%3E+%26self.t,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+nucleotide_count+=+NucleotideCount+%7Ba:+14,+c:+9,+g:+10,+t:+12%7D;%0A++++assert_eq!(nucleotide_count%5BNucleotide::A%5D,+14);%0A++++assert_eq!(nucleotide_count%5BNucleotide::C%5D,+9);%0A++++assert_eq!(nucleotide_count%5BNucleotide::G%5D,+10);%0A++++assert_eq!(nucleotide_count%5BNucleotide::T%5D,+12);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#62\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></h4></section></summary><div class=\"docblock\"><p>The returned type after indexing.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.index\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/index.rs.html#71\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>Performs the indexing (<code>container[index]</code>) operation.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>May panic if the index is out of bounds.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#705\">source</a></span><a href=\"#impl-Index%3CRangeFrom%3Cusize%3E%3E-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"struct\" href=\"struct.RangeFrom.html\" title=\"struct std::ops::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; for <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CRangeFull%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#1051\">source</a></span><a href=\"#impl-Index%3CRangeFull%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"struct\" href=\"struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CRangeFull%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#564-571\">source</a></span><a href=\"#impl-Index%3CRangeFull%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"struct\" href=\"struct.RangeFull.html\" title=\"struct std::ops::RangeFull\">RangeFull</a>&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#54-56\">source</a></span><a href=\"#impl-Index%3CI%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"../primitive.str.html\">str</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2455-2457\">source</a></span><a href=\"#impl-Index%3CI%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/ops.rs.html#12-16\">source</a><a href=\"#impl-Index%3CI%3E-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3C%26Q%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2319-2322\">source</a></span><a href=\"#impl-Index%3C%26Q%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, Q, V, A&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"../collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1328-1345\">source</a></span><a href=\"#impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, Q, V, S&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"../collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2843\">source</a></span><a href=\"#impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#9-11\">source</a></span><a href=\"#impl-Index%3CI%3E-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2900\">source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#340-342\">source</a></span><a href=\"#impl-Index%3CI%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a> as <a class=\"trait\" href=\"trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a></h4></section></div></details></div><script src=\"../../trait.impl/core/ops/index/trait.Index.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:02.933Z"
}