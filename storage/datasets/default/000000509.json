{
	"title": "DoubleEndedIterator in std::iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/iter/trait.DoubleEndedIterator.html",
	"markdown": "# DoubleEndedIterator in std::iter - Rust\n\n```\npub trait DoubleEndedIterator: Iterator {\n    // Required method\n    fn next_back(&mut self) -> Option<Self::Item>;\n\n    // Provided methods\n    fn advance_back_by(&mut self, n: usize) -> Result<(), NonZero<usize>> { ... }\n    fn nth_back(&mut self, n: usize) -> Option<Self::Item> { ... }\n    fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R\n       where Self: Sized,\n             F: FnMut(B, Self::Item) -> R,\n             R: Try<Output = B> { ... }\n    fn rfold<B, F>(self, init: B, f: F) -> B\n       where Self: Sized,\n             F: FnMut(B, Self::Item) -> B { ... }\n    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n       where Self: Sized,\n             P: FnMut(&Self::Item) -> bool { ... }\n}\n```\n\nExpand description\n\nAn iterator able to yield elements from both ends.\n\nSomething that implements `DoubleEndedIterator` has one extra capability over something that implements [`Iterator`](trait.Iterator.html \"trait std::iter::Iterator\"): the ability to also take `Item`s from the back, as well as the front.\n\nIt is important to note that both back and forth work on the same range, and do not cross: iteration is over when they meet in the middle.\n\nIn a similar fashion to the [`Iterator`](trait.Iterator.html \"trait std::iter::Iterator\") protocol, once a `DoubleEndedIterator` returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") from a [`next_back()`](about:blank/trait.DoubleEndedIterator.html#tymethod.next_back \"method std::iter::DoubleEndedIterator::next_back\"), calling it again may or may not ever return [`Some`](about:blank/option/enum.Option.html#variant.Some \"variant std::option::Option::Some\") again. [`next()`](about:blank/trait.Iterator.html#tymethod.next \"method std::iter::Iterator::next\") and [`next_back()`](about:blank/trait.DoubleEndedIterator.html#tymethod.next_back \"method std::iter::DoubleEndedIterator::next_back\") are interchangeable for this purpose.\n\n## [Â§](#examples)Examples\n\nBasic usage:\n\n```\nlet numbers = vec![1, 2, 3, 4, 5, 6];\n\nlet mut iter = numbers.iter();\n\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&6), iter.next_back());\nassert_eq!(Some(&5), iter.next_back());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\nassert_eq!(Some(&4), iter.next());\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next_back());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++let+mut+iter+=+numbers.iter();%0A++++%0A++++assert_eq!(Some(%261),+iter.next());%0A++++assert_eq!(Some(%266),+iter.next_back());%0A++++assert_eq!(Some(%265),+iter.next_back());%0A++++assert_eq!(Some(%262),+iter.next());%0A++++assert_eq!(Some(%263),+iter.next());%0A++++assert_eq!(Some(%264),+iter.next());%0A++++assert_eq!(None,+iter.next());%0A++++assert_eq!(None,+iter.next_back());%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#94)\n\nRemoves and returns an element from the end of the iterator.\n\nReturns `None` when there are no more elements.\n\nThe [trait-level](trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") docs contain more details.\n\n##### [Â§](#examples-1)Examples\n\nBasic usage:\n\n```\nlet numbers = vec![1, 2, 3, 4, 5, 6];\n\nlet mut iter = numbers.iter();\n\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&6), iter.next_back());\nassert_eq!(Some(&5), iter.next_back());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\nassert_eq!(Some(&4), iter.next());\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next_back());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++let+mut+iter+=+numbers.iter();%0A++++%0A++++assert_eq!(Some(%261),+iter.next());%0A++++assert_eq!(Some(%266),+iter.next_back());%0A++++assert_eq!(Some(%265),+iter.next_back());%0A++++assert_eq!(Some(%262),+iter.next());%0A++++assert_eq!(Some(%263),+iter.next());%0A++++assert_eq!(Some(%264),+iter.next());%0A++++assert_eq!(None,+iter.next());%0A++++assert_eq!(None,+iter.next_back());%0A%7D&edition=2021)\n\nThe elements yielded by `DoubleEndedIterator`â€™s methods may differ from the ones yielded by [`Iterator`](trait.Iterator.html \"trait std::iter::Iterator\")â€™s methods:\n\n```\nlet vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\nlet uniq_by_fst_comp = || {\n    let mut seen = std::collections::HashSet::new();\n    vec.iter().copied().filter(move |x| seen.insert(x.0))\n};\n\nassert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));\nassert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));\n\nassert_eq!(\n    uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(1, 'a'), (2, 'a')]\n);\nassert_eq!(\n    uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(2, 'b'), (1, 'c')]\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+vec+=+vec!%5B(1,+%27a%27),+(1,+%27b%27),+(1,+%27c%27),+(2,+%27a%27),+(2,+%27b%27)%5D;%0A++++let+uniq_by_fst_comp+=+%7C%7C+%7B%0A++++++++let+mut+seen+=+std::collections::HashSet::new();%0A++++++++vec.iter().copied().filter(move+%7Cx%7C+seen.insert(x.0))%0A++++%7D;%0A++++%0A++++assert_eq!(uniq_by_fst_comp().last(),+Some((2,+%27a%27)));%0A++++assert_eq!(uniq_by_fst_comp().next_back(),+Some((2,+%27b%27)));%0A++++%0A++++assert_eq!(%0A++++++++uniq_by_fst_comp().fold(vec!%5B%5D,+%7Cmut+v,+x%7C+%7Bv.push(x);+v%7D),%0A++++++++vec!%5B(1,+%27a%27),+(2,+%27a%27)%5D%0A++++);%0A++++assert_eq!(%0A++++++++uniq_by_fst_comp().rfold(vec!%5B%5D,+%7Cmut+v,+x%7C+%7Bv.push(x);+v%7D),%0A++++++++vec!%5B(2,+%27b%27),+(1,+%27c%27)%5D%0A++++);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#138)\n\nðŸ”¬This is a nightly-only experimental API. (`iter_advance_by`Â [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator from the back by `n` elements.\n\n`advance_back_by` is the reverse version of [`advance_by`](about:blank/trait.Iterator.html#method.advance_by \"method std::iter::Iterator::advance_by\"). This method will eagerly skip `n` elements starting from the back by calling [`next_back`](about:blank/trait.DoubleEndedIterator.html#tymethod.next_back \"method std::iter::DoubleEndedIterator::next_back\") up to `n` times until [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") is encountered.\n\n`advance_back_by(n)` will return `Ok(())` if the iterator successfully advances by `n` elements, or a `Err(NonZero<usize>)` with value `k` if [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") is encountered, where `k` is remaining number of steps that could not be advanced because the iterator ran out. If `self` is empty and `n` is non-zero, then this returns `Err(n)`. Otherwise, `k` is always less than `n`.\n\nCalling `advance_back_by(0)` can do meaningful work, for example [`Flatten`](struct.Flatten.html \"struct std::iter::Flatten\") can advance its outer iterator until it finds an inner iterator that is not empty, which then often allows it to return a more accurate `size_hint()` than in its initial state.\n\n##### [Â§](#examples-2)Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nuse std::num::NonZero;\n\nlet a = [3, 4, 5, 6];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_back_by(2), Ok(()));\nassert_eq!(iter.next_back(), Some(&4));\nassert_eq!(iter.advance_back_by(0), Ok(()));\nassert_eq!(iter.advance_back_by(100), Err(NonZero::new(99).unwrap())); // only `&3` was skipped\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(iter_advance_by)%5D%0A%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+a+=+%5B3,+4,+5,+6%5D;%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.advance_back_by(2),+Ok(()));%0A++++assert_eq!(iter.next_back(),+Some(%264));%0A++++assert_eq!(iter.advance_back_by(0),+Ok(()));%0A++++assert_eq!(iter.advance_back_by(100),+Err(NonZero::new(99).unwrap()));+//+only+%60%263%60+was+skipped%0A%7D&version=nightly&edition=2021)\n\n1.37.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#191)\n\nReturns the `n`th element from the end of the iterator.\n\nThis is essentially the reversed version of [`Iterator::nth()`](about:blank/trait.Iterator.html#method.nth \"method std::iter::Iterator::nth\"). Although like most indexing operations, the count starts from zero, so `nth_back(0)` returns the first value from the end, `nth_back(1)` the second, and so on.\n\nNote that all elements between the end and the returned element will be consumed, including the returned element. This also means that calling `nth_back(0)` multiple times on the same iterator will return different elements.\n\n`nth_back()` will return [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if `n` is greater than or equal to the length of the iterator.\n\n##### [Â§](#examples-3)Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(2), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.iter().nth_back(2),+Some(%261));%0A%7D&edition=2021)\n\nCalling `nth_back()` multiple times doesnâ€™t rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth_back(1), Some(&2));\nassert_eq!(iter.nth_back(1), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.nth_back(1),+Some(%262));%0A++++assert_eq!(iter.nth_back(1),+None);%0A%7D&edition=2021)\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(10), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.iter().nth_back(10),+None);%0A%7D&edition=2021)\n\n1.27.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#230-234)\n\nThis is the reverse version of [`Iterator::try_fold()`](about:blank/trait.Iterator.html#method.try_fold \"method std::iter::Iterator::try_fold\"): it takes elements starting from the back of the iterator.\n\n##### [Â§](#examples-4)Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"2\", \"3\"];\nlet sum = a.iter()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert_eq!(sum, Ok(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%222%22,+%223%22%5D;%0A++++let+sum+=+a.iter()%0A++++++++.map(%7C%26s%7C+s.parse::%3Ci32%3E())%0A++++++++.try_rfold(0,+%7Cacc,+x%7C+x.and_then(%7Cy%7C+Ok(acc+%2B+y)));%0A++++assert_eq!(sum,+Ok(6));%0A%7D&edition=2021)\n\nShort-circuiting:\n\n```\nlet a = [\"1\", \"rust\", \"3\"];\nlet mut it = a.iter();\nlet sum = it\n    .by_ref()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert!(sum.is_err());\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.next_back(), Some(&\"1\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%22rust%22,+%223%22%5D;%0A++++let+mut+it+=+a.iter();%0A++++let+sum+=+it%0A++++++++.by_ref()%0A++++++++.map(%7C%26s%7C+s.parse::%3Ci32%3E())%0A++++++++.try_rfold(0,+%7Cacc,+x%7C+x.and_then(%7Cy%7C+Ok(acc+%2B+y)));%0A++++assert!(sum.is_err());%0A++++%0A++++//+Because+it+short-circuited,+the+remaining+elements+are+still%0A++++//+available+through+the+iterator.%0A++++assert_eq!(it.next_back(),+Some(%26%221%22));%0A%7D&edition=2021)\n\n1.27.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#301-304)\n\nAn iterator method that reduces the iteratorâ€™s elements to a single, final value, starting from the back.\n\nThis is the reverse version of [`Iterator::fold()`](about:blank/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"): it takes elements starting from the back of the iterator.\n\n`rfold()` takes two arguments: an initial value, and a closure with two arguments: an â€˜accumulatorâ€™, and an element. The closure returns the value that the accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first call.\n\nAfter applying this closure to every element of the iterator, `rfold()` returns the accumulator.\n\nThis operation is sometimes called â€˜reduceâ€™ or â€˜injectâ€™.\n\nFolding is useful whenever you have a collection of something, and want to produce a single value from it.\n\nNote: `rfold()` combines elements in a _right-associative_ fashion. For associative operators like `+`, the order the elements are combined in is not important, but for non-associative operators like `-` the order will affect the final result. For a _left-associative_ version of `rfold()`, see [`Iterator::fold()`](about:blank/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\").\n\n##### [Â§](#examples-5)Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of a\nlet sum = a.iter()\n           .rfold(0, |acc, &x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++//+the+sum+of+all+of+the+elements+of+a%0A++++let+sum+=+a.iter()%0A+++++++++++++++.rfold(0,+%7Cacc,+%26x%7C+acc+%2B+x);%0A++++%0A++++assert_eq!(sum,+6);%0A%7D&edition=2021)\n\nThis example demonstrates the right-associative nature of `rfold()`: it builds a string, starting with an initial value and continuing with each element from the back until the front:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().rfold(zero, |acc, &x| {\n    format!(\"({x} + {acc})\")\n});\n\nassert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++let+zero+=+%220%22.to_string();%0A++++%0A++++let+result+=+numbers.iter().rfold(zero,+%7Cacc,+%26x%7C+%7B%0A++++++++format!(%22(%7Bx%7D+%2B+%7Bacc%7D)%22)%0A++++%7D);%0A++++%0A++++assert_eq!(result,+%22(1+%2B+(2+%2B+(3+%2B+(4+%2B+(5+%2B+0)))))%22);%0A%7D&edition=2021)\n\n1.27.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#356-359)\n\nSearches for an element of an iterator from the back that satisfies a predicate.\n\n`rfind()` takes a closure that returns `true` or `false`. It applies this closure to each element of the iterator, starting at the end, and if any of them return `true`, then `rfind()` returns [`Some(element)`](about:blank/option/enum.Option.html#variant.Some \"variant std::option::Option::Some\"). If they all return `false`, it returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n`rfind()` is short-circuiting; in other words, it will stop processing as soon as the closure returns `true`.\n\nBecause `rfind()` takes a reference, and many iterators iterate over references, this leads to a possibly confusing situation where the argument is a double reference. You can see this effect in the examples below, with `&&x`.\n\n##### [Â§](#examples-6)Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().rfind(|&&x| x == 5), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++assert_eq!(a.iter().rfind(%7C%26%26x%7C+x+==+2),+Some(%262));%0A++++%0A++++assert_eq!(a.iter().rfind(%7C%26%26x%7C+x+==+5),+None);%0A%7D&edition=2021)\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next_back(), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.rfind(%7C%26%26x%7C+x+==+2),+Some(%262));%0A++++%0A++++//+we+can+still+use+%60iter%60,+as+there+are+more+elements.%0A++++assert_eq!(iter.next_back(),+Some(%261));%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An iterator able to yield elements from both ends.\"><title>DoubleEndedIterator in std::iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">DoubleEndedIterator</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">DoubleEndedIterator</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.next_back\">next_back</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.advance_back_by\">advance_back_by</a></li><li><a href=\"#method.nth_back\">nth_back</a></li><li><a href=\"#method.rfind\">rfind</a></li><li><a href=\"#method.rfold\">rfold</a></li><li><a href=\"#method.try_rfold\">try_rfold</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::iter</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ByRefSized.html\">ByRefSized</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cloned.html\">Cloned</a></li><li><a href=\"struct.Copied.html\">Copied</a></li><li><a href=\"struct.Cycle.html\">Cycle</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Enumerate.html\">Enumerate</a></li><li><a href=\"struct.Filter.html\">Filter</a></li><li><a href=\"struct.FilterMap.html\">FilterMap</a></li><li><a href=\"struct.FlatMap.html\">FlatMap</a></li><li><a href=\"struct.Flatten.html\">Flatten</a></li><li><a href=\"struct.FromFn.html\">FromFn</a></li><li><a href=\"struct.Fuse.html\">Fuse</a></li><li><a href=\"struct.Inspect.html\">Inspect</a></li><li><a href=\"struct.Intersperse.html\">Intersperse</a></li><li><a href=\"struct.IntersperseWith.html\">IntersperseWith</a></li><li><a href=\"struct.Map.html\">Map</a></li><li><a href=\"struct.MapWhile.html\">MapWhile</a></li><li><a href=\"struct.MapWindows.html\">MapWindows</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceWith.html\">OnceWith</a></li><li><a href=\"struct.Peekable.html\">Peekable</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.RepeatN.html\">RepeatN</a></li><li><a href=\"struct.RepeatWith.html\">RepeatWith</a></li><li><a href=\"struct.Rev.html\">Rev</a></li><li><a href=\"struct.Scan.html\">Scan</a></li><li><a href=\"struct.Skip.html\">Skip</a></li><li><a href=\"struct.SkipWhile.html\">SkipWhile</a></li><li><a href=\"struct.StepBy.html\">StepBy</a></li><li><a href=\"struct.Successors.html\">Successors</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.TakeWhile.html\">TakeWhile</a></li><li><a href=\"struct.Zip.html\">Zip</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedIterator.html\">DoubleEndedIterator</a></li><li><a href=\"trait.ExactSizeIterator.html\">ExactSizeIterator</a></li><li><a href=\"trait.Extend.html\">Extend</a></li><li><a href=\"trait.FromIterator.html\">FromIterator</a></li><li><a href=\"trait.FusedIterator.html\">FusedIterator</a></li><li><a href=\"trait.IntoIterator.html\">IntoIterator</a></li><li><a href=\"trait.Iterator.html\">Iterator</a></li><li><a href=\"trait.Product.html\">Product</a></li><li><a href=\"trait.Step.html\">Step</a></li><li><a href=\"trait.Sum.html\">Sum</a></li><li><a href=\"trait.TrustedLen.html\">TrustedLen</a></li><li><a href=\"trait.TrustedStep.html\">TrustedStep</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.chain.html\">chain</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.from_coroutine.html\">from_coroutine</a></li><li><a href=\"fn.from_fn.html\">from_fn</a></li><li><a href=\"fn.once.html\">once</a></li><li><a href=\"fn.once_with.html\">once_with</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.repeat_n.html\">repeat_n</a></li><li><a href=\"fn.repeat_with.html\">repeat_with</a></li><li><a href=\"fn.successors.html\">successors</a></li><li><a href=\"fn.zip.html\">zip</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">iter</a>::<wbr><a class=\"trait\" href=\"#\">DoubleEndedIterator</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#41\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait DoubleEndedIterator: <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> {\n    // Required method\n    fn <a href=\"#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.advance_back_by\" class=\"fn\">advance_back_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.nth_back\" class=\"fn\">nth_back</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.try_rfold\" class=\"fn\">try_rfold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n             F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n             R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;</span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.rfold\" class=\"fn\">rfold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n             F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B</span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.rfind\" class=\"fn\">rfind</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n             P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An iterator able to yield elements from both ends.</p>\n<p>Something that implements <code>DoubleEndedIterator</code> has one extra capability\nover something that implements <a href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>: the ability to also take\n<code>Item</code>s from the back, as well as the front.</p>\n<p>It is important to note that both back and forth work on the same range,\nand do not cross: iteration is over when they meet in the middle.</p>\n<p>In a similar fashion to the <a href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> protocol, once a\n<code>DoubleEndedIterator</code> returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> from a <a href=\"trait.DoubleEndedIterator.html#tymethod.next_back\" title=\"method std::iter::DoubleEndedIterator::next_back\"><code>next_back()</code></a>, calling it\nagain may or may not ever return <a href=\"../option/enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some</code></a> again. <a href=\"trait.Iterator.html#tymethod.next\" title=\"method std::iter::Iterator::next\"><code>next()</code></a> and\n<a href=\"trait.DoubleEndedIterator.html#tymethod.next_back\" title=\"method std::iter::DoubleEndedIterator::next_back\"><code>next_back()</code></a> are interchangeable for this purpose.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = numbers.iter();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>), iter.next_back());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>), iter.next_back());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next_back());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++let+mut+iter+=+numbers.iter();%0A++++%0A++++assert_eq!(Some(%261),+iter.next());%0A++++assert_eq!(Some(%266),+iter.next_back());%0A++++assert_eq!(Some(%265),+iter.next_back());%0A++++assert_eq!(Some(%262),+iter.next());%0A++++assert_eq!(Some(%263),+iter.next());%0A++++assert_eq!(Some(%264),+iter.next());%0A++++assert_eq!(None,+iter.next());%0A++++assert_eq!(None,+iter.next_back());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#94\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns an element from the end of the iterator.</p>\n<p>Returns <code>None</code> when there are no more elements.</p>\n<p>The <a href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">trait-level</a> docs contain more details.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = numbers.iter();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">6</span>), iter.next_back());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>), iter.next_back());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>), iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, iter.next_back());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++let+mut+iter+=+numbers.iter();%0A++++%0A++++assert_eq!(Some(%261),+iter.next());%0A++++assert_eq!(Some(%266),+iter.next_back());%0A++++assert_eq!(Some(%265),+iter.next_back());%0A++++assert_eq!(Some(%262),+iter.next());%0A++++assert_eq!(Some(%263),+iter.next());%0A++++assert_eq!(Some(%264),+iter.next());%0A++++assert_eq!(None,+iter.next());%0A++++assert_eq!(None,+iter.next_back());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"remarks\"><a class=\"doc-anchor\" href=\"#remarks\">Â§</a>Remarks</h5>\n<p>The elements yielded by <code>DoubleEndedIterator</code>â€™s methods may differ from\nthe ones yielded by <a href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a>â€™s methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'c'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'b'</span>)];\n<span class=\"kw\">let </span>uniq_by_fst_comp = || {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>seen = std::collections::HashSet::new();\n    vec.iter().copied().filter(<span class=\"kw\">move </span>|x| seen.insert(x.<span class=\"number\">0</span>))\n};\n\n<span class=\"macro\">assert_eq!</span>(uniq_by_fst_comp().last(), <span class=\"prelude-val\">Some</span>((<span class=\"number\">2</span>, <span class=\"string\">'a'</span>)));\n<span class=\"macro\">assert_eq!</span>(uniq_by_fst_comp().next_back(), <span class=\"prelude-val\">Some</span>((<span class=\"number\">2</span>, <span class=\"string\">'b'</span>)));\n\n<span class=\"macro\">assert_eq!</span>(\n    uniq_by_fst_comp().fold(<span class=\"macro\">vec!</span>[], |<span class=\"kw-2\">mut </span>v, x| {v.push(x); v}),\n    <span class=\"macro\">vec!</span>[(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'a'</span>)]\n);\n<span class=\"macro\">assert_eq!</span>(\n    uniq_by_fst_comp().rfold(<span class=\"macro\">vec!</span>[], |<span class=\"kw-2\">mut </span>v, x| {v.push(x); v}),\n    <span class=\"macro\">vec!</span>[(<span class=\"number\">2</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'c'</span>)]\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+vec+=+vec!%5B(1,+'a'),+(1,+'b'),+(1,+'c'),+(2,+'a'),+(2,+'b')%5D;%0A++++let+uniq_by_fst_comp+=+%7C%7C+%7B%0A++++++++let+mut+seen+=+std::collections::HashSet::new();%0A++++++++vec.iter().copied().filter(move+%7Cx%7C+seen.insert(x.0))%0A++++%7D;%0A++++%0A++++assert_eq!(uniq_by_fst_comp().last(),+Some((2,+'a')));%0A++++assert_eq!(uniq_by_fst_comp().next_back(),+Some((2,+'b')));%0A++++%0A++++assert_eq!(%0A++++++++uniq_by_fst_comp().fold(vec!%5B%5D,+%7Cmut+v,+x%7C+%7Bv.push(x);+v%7D),%0A++++++++vec!%5B(1,+'a'),+(2,+'a')%5D%0A++++);%0A++++assert_eq!(%0A++++++++uniq_by_fst_comp().rfold(vec!%5B%5D,+%7Cmut+v,+x%7C+%7Bv.push(x);+v%7D),%0A++++++++vec!%5B(2,+'b'),+(1,+'c')%5D%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_back_by\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#138\">source</a><h4 class=\"code-header\">fn <a href=\"#method.advance_back_by\" class=\"fn\">advance_back_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span></summary><div class=\"docblock\"><p>Advances the iterator from the back by <code>n</code> elements.</p>\n<p><code>advance_back_by</code> is the reverse version of <a href=\"trait.Iterator.html#method.advance_by\" title=\"method std::iter::Iterator::advance_by\"><code>advance_by</code></a>. This method will\neagerly skip <code>n</code> elements starting from the back by calling <a href=\"trait.DoubleEndedIterator.html#tymethod.next_back\" title=\"method std::iter::DoubleEndedIterator::next_back\"><code>next_back</code></a> up\nto <code>n</code> times until <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is encountered.</p>\n<p><code>advance_back_by(n)</code> will return <code>Ok(())</code> if the iterator successfully advances by\n<code>n</code> elements, or a <code>Err(NonZero&lt;usize&gt;)</code> with value <code>k</code> if <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is encountered, where <code>k</code>\nis remaining number of steps that could not be advanced because the iterator ran out.\nIf <code>self</code> is empty and <code>n</code> is non-zero, then this returns <code>Err(n)</code>.\nOtherwise, <code>k</code> is always less than <code>n</code>.</p>\n<p>Calling <code>advance_back_by(0)</code> can do meaningful work, for example <a href=\"struct.Flatten.html\" title=\"struct std::iter::Flatten\"><code>Flatten</code></a> can advance its\nouter iterator until it finds an inner iterator that is not empty, which then often\nallows it to return a more accurate <code>size_hint()</code> than in its initial state.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(iter_advance_by)]\n\n</span><span class=\"kw\">use </span>std::num::NonZero;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = a.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.advance_back_by(<span class=\"number\">2</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(iter.next_back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iter.advance_back_by(<span class=\"number\">0</span>), <span class=\"prelude-val\">Ok</span>(()));\n<span class=\"macro\">assert_eq!</span>(iter.advance_back_by(<span class=\"number\">100</span>), <span class=\"prelude-val\">Err</span>(NonZero::new(<span class=\"number\">99</span>).unwrap())); <span class=\"comment\">// only `&amp;3` was skipped</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(iter_advance_by)%5D%0A%0Afn+main()+%7B%0A++++use+std::num::NonZero;%0A++++%0A++++let+a+=+%5B3,+4,+5,+6%5D;%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.advance_back_by(2),+Ok(()));%0A++++assert_eq!(iter.next_back(),+Some(%264));%0A++++assert_eq!(iter.advance_back_by(0),+Ok(()));%0A++++assert_eq!(iter.advance_back_by(100),+Err(NonZero::new(99).unwrap()));+//+only+%60%263%60+was+skipped%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#191\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.nth_back\" class=\"fn\">nth_back</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <code>n</code>th element from the end of the iterator.</p>\n<p>This is essentially the reversed version of <a href=\"trait.Iterator.html#method.nth\" title=\"method std::iter::Iterator::nth\"><code>Iterator::nth()</code></a>.\nAlthough like most indexing operations, the count starts from zero, so\n<code>nth_back(0)</code> returns the first value from the end, <code>nth_back(1)</code> the\nsecond, and so on.</p>\n<p>Note that all elements between the end and the returned element will be\nconsumed, including the returned element. This also means that calling\n<code>nth_back(0)</code> multiple times on the same iterator will return different\nelements.</p>\n<p><code>nth_back()</code> will return <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if <code>n</code> is greater than or equal to the\nlength of the iterator.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.iter().nth_back(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.iter().nth_back(2),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Calling <code>nth_back()</code> multiple times doesnâ€™t rewind the iterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = a.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.nth_back(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.nth_back(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.nth_back(1),+Some(%262));%0A++++assert_eq!(iter.nth_back(1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Returning <code>None</code> if there are less than <code>n + 1</code> elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.iter().nth_back(<span class=\"number\">10</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.iter().nth_back(10),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_rfold\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#230-234\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.try_rfold\" class=\"fn\">try_rfold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\"><p>This is the reverse version of <a href=\"trait.Iterator.html#method.try_fold\" title=\"method std::iter::Iterator::try_fold\"><code>Iterator::try_fold()</code></a>: it takes\nelements starting from the back of the iterator.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span>sum = a.iter()\n    .map(|<span class=\"kw-2\">&amp;</span>s| s.parse::&lt;i32&gt;())\n    .try_rfold(<span class=\"number\">0</span>, |acc, x| x.and_then(|y| <span class=\"prelude-val\">Ok</span>(acc + y)));\n<span class=\"macro\">assert_eq!</span>(sum, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%222%22,+%223%22%5D;%0A++++let+sum+=+a.iter()%0A++++++++.map(%7C%26s%7C+s.parse::%3Ci32%3E())%0A++++++++.try_rfold(0,+%7Cacc,+x%7C+x.and_then(%7Cy%7C+Ok(acc+%2B+y)));%0A++++assert_eq!(sum,+Ok(6));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Short-circuiting:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"string\">\"1\"</span>, <span class=\"string\">\"rust\"</span>, <span class=\"string\">\"3\"</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = a.iter();\n<span class=\"kw\">let </span>sum = it\n    .by_ref()\n    .map(|<span class=\"kw-2\">&amp;</span>s| s.parse::&lt;i32&gt;())\n    .try_rfold(<span class=\"number\">0</span>, |acc, x| x.and_then(|y| <span class=\"prelude-val\">Ok</span>(acc + y)));\n<span class=\"macro\">assert!</span>(sum.is_err());\n\n<span class=\"comment\">// Because it short-circuited, the remaining elements are still\n// available through the iterator.\n</span><span class=\"macro\">assert_eq!</span>(it.next_back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"1\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B%221%22,+%22rust%22,+%223%22%5D;%0A++++let+mut+it+=+a.iter();%0A++++let+sum+=+it%0A++++++++.by_ref()%0A++++++++.map(%7C%26s%7C+s.parse::%3Ci32%3E())%0A++++++++.try_rfold(0,+%7Cacc,+x%7C+x.and_then(%7Cy%7C+Ok(acc+%2B+y)));%0A++++assert!(sum.is_err());%0A++++%0A++++//+Because+it+short-circuited,+the+remaining+elements+are+still%0A++++//+available+through+the+iterator.%0A++++assert_eq!(it.next_back(),+Some(%26%221%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rfold\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#301-304\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.rfold\" class=\"fn\">rfold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\"><p>An iterator method that reduces the iteratorâ€™s elements to a single,\nfinal value, starting from the back.</p>\n<p>This is the reverse version of <a href=\"trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>Iterator::fold()</code></a>: it takes elements\nstarting from the back of the iterator.</p>\n<p><code>rfold()</code> takes two arguments: an initial value, and a closure with two\narguments: an â€˜accumulatorâ€™, and an element. The closure returns the value that\nthe accumulator should have for the next iteration.</p>\n<p>The initial value is the value the accumulator will have on the first\ncall.</p>\n<p>After applying this closure to every element of the iterator, <code>rfold()</code>\nreturns the accumulator.</p>\n<p>This operation is sometimes called â€˜reduceâ€™ or â€˜injectâ€™.</p>\n<p>Folding is useful whenever you have a collection of something, and want\nto produce a single value from it.</p>\n<p>Note: <code>rfold()</code> combines elements in a <em>right-associative</em> fashion. For associative\noperators like <code>+</code>, the order the elements are combined in is not important, but for non-associative\noperators like <code>-</code> the order will affect the final result.\nFor a <em>left-associative</em> version of <code>rfold()</code>, see <a href=\"trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>Iterator::fold()</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// the sum of all of the elements of a\n</span><span class=\"kw\">let </span>sum = a.iter()\n           .rfold(<span class=\"number\">0</span>, |acc, <span class=\"kw-2\">&amp;</span>x| acc + x);\n\n<span class=\"macro\">assert_eq!</span>(sum, <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++//+the+sum+of+all+of+the+elements+of+a%0A++++let+sum+=+a.iter()%0A+++++++++++++++.rfold(0,+%7Cacc,+%26x%7C+acc+%2B+x);%0A++++%0A++++assert_eq!(sum,+6);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This example demonstrates the right-associative nature of <code>rfold()</code>:\nit builds a string, starting with an initial value\nand continuing with each element from the back until the front:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n<span class=\"kw\">let </span>zero = <span class=\"string\">\"0\"</span>.to_string();\n\n<span class=\"kw\">let </span>result = numbers.iter().rfold(zero, |acc, <span class=\"kw-2\">&amp;</span>x| {\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"({x} + {acc})\"</span>)\n});\n\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"string\">\"(1 + (2 + (3 + (4 + (5 + 0)))))\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+numbers+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++let+zero+=+%220%22.to_string();%0A++++%0A++++let+result+=+numbers.iter().rfold(zero,+%7Cacc,+%26x%7C+%7B%0A++++++++format!(%22(%7Bx%7D+%2B+%7Bacc%7D)%22)%0A++++%7D);%0A++++%0A++++assert_eq!(result,+%22(1+%2B+(2+%2B+(3+%2B+(4+%2B+(5+%2B+0)))))%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rfind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#356-359\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.rfind\" class=\"fn\">rfind</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Searches for an element of an iterator from the back that satisfies a predicate.</p>\n<p><code>rfind()</code> takes a closure that returns <code>true</code> or <code>false</code>. It applies\nthis closure to each element of the iterator, starting at the end, and if any\nof them return <code>true</code>, then <code>rfind()</code> returns <a href=\"../option/enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\"><code>Some(element)</code></a>. If they all return\n<code>false</code>, it returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<p><code>rfind()</code> is short-circuiting; in other words, it will stop processing\nas soon as the closure returns <code>true</code>.</p>\n<p>Because <code>rfind()</code> takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with <code>&amp;&amp;x</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"macro\">assert_eq!</span>(a.iter().rfind(|&amp;&amp;x| x == <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"macro\">assert_eq!</span>(a.iter().rfind(|&amp;&amp;x| x == <span class=\"number\">5</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++assert_eq!(a.iter().rfind(%7C%26%26x%7C+x+==+2),+Some(%262));%0A++++%0A++++assert_eq!(a.iter().rfind(%7C%26%26x%7C+x+==+5),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Stopping at the first <code>true</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = a.iter();\n\n<span class=\"macro\">assert_eq!</span>(iter.rfind(|&amp;&amp;x| x == <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n\n<span class=\"comment\">// we can still use `iter`, as there are more elements.\n</span><span class=\"macro\">assert_eq!</span>(iter.next_back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++%0A++++let+mut+iter+=+a.iter();%0A++++%0A++++assert_eq!(iter.rfind(%7C%26%26x%7C+x+==+2),+Some(%262));%0A++++%0A++++//+we+can+still+use+%60iter%60,+as+there+are+more+elements.%0A++++assert_eq!(iter.next_back(),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-DoubleEndedIterator-for-EscapeDefault\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii.rs.html#146\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-EscapeDefault\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../ascii/struct.EscapeDefault.html\" title=\"struct std::ascii::EscapeDefault\">EscapeDefault</a></h3></section><section id=\"impl-DoubleEndedIterator-for-ToLowercase\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/mod.rs.html#478-486\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ToLowercase\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../char/struct.ToLowercase.html\" title=\"struct std::char::ToLowercase\">ToLowercase</a></h3></section><section id=\"impl-DoubleEndedIterator-for-ToUppercase\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/char/mod.rs.html#488-496\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ToUppercase\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../char/struct.ToUppercase.html\" title=\"struct std::char::ToUppercase\">ToUppercase</a></h3></section><section id=\"impl-DoubleEndedIterator-for-Args\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> Â· <a class=\"src\" href=\"../../src/std/env.rs.html#900-904\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Args\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../env/struct.Args.html\" title=\"struct std::env::Args\">Args</a></h3></section><section id=\"impl-DoubleEndedIterator-for-ArgsOs\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> Â· <a class=\"src\" href=\"../../src/std/env.rs.html#942-946\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ArgsOs\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../env/struct.ArgsOs.html\" title=\"struct std::env::ArgsOs\">ArgsOs</a></h3></section><section id=\"impl-DoubleEndedIterator-for-Bytes%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#359\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Bytes%3C'_%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.Bytes.html\" title=\"struct std::str::Bytes\">Bytes</a>&lt;'_&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Drain%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#3029\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Drain%3C'_%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::string::<a class=\"struct\" href=\"../string/struct.Drain.html\" title=\"struct std::string::Drain\">Drain</a>&lt;'_&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Components%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/path.rs.html#940-984\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Components%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/path.rs.html#876-881\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::path::<a class=\"struct\" href=\"../path/struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-EscapeAscii%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#239\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-EscapeAscii%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.EscapeAscii.html\" title=\"struct std::slice::EscapeAscii\">EscapeAscii</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-CharIndices%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#219\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-CharIndices%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.CharIndices.html\" title=\"struct std::str::CharIndices\">CharIndices</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Chars%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#129\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Chars%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.Chars.html\" title=\"struct std::str::Chars\">Chars</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Lines%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1180\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Lines%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.Lines.html\" title=\"struct std::str::Lines\">Lines</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-LinesAny%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1243\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-LinesAny%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.LinesAny.html\" title=\"struct std::str::LinesAny\">LinesAny</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-SplitAsciiWhitespace%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1372\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitAsciiWhitespace%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.SplitAsciiWhitespace.html\" title=\"struct std::str::SplitAsciiWhitespace\">SplitAsciiWhitespace</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-SplitWhitespace%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1316\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitWhitespace%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.SplitWhitespace.html\" title=\"struct std::str::SplitWhitespace\">SplitWhitespace</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2261\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::option::<a class=\"struct\" href=\"../option/struct.Iter.html\" title=\"struct std::option::Iter\">Iter</a>&lt;'a, A&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2311\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::option::<a class=\"struct\" href=\"../option/struct.IterMut.html\" title=\"struct std::option::IterMut\">IterMut</a>&lt;'a, A&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-%26mut+I\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#373\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-%26mut+I\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut I</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Cloned%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/cloned.rs.html#75-78\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Cloned%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, I, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Cloned.html\" title=\"struct std::iter::Cloned\">Cloned</a>&lt;I&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Copied%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/copied.rs.html#108-111\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Copied%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, I, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Copied.html\" title=\"struct std::iter::Copied\">Copied</a>&lt;I&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1534\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_map::<a class=\"struct\" href=\"../collections/btree_map/struct.Iter.html\" title=\"struct std::collections::btree_map::Iter\">Iter</a>&lt;'a, K, V&gt;<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1606\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_map::<a class=\"struct\" href=\"../collections/btree_map/struct.IterMut.html\" title=\"struct std::collections::btree_map::IterMut\">IterMut</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Keys%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1780\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Keys%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.Keys.html\" title=\"struct std::collections::btree_map::Keys\">Keys</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Range%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2170\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Range%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_map::<a class=\"struct\" href=\"../collections/btree_map/struct.Range.html\" title=\"struct std::collections::btree_map::Range\">Range</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-RangeMut%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2214\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RangeMut%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.RangeMut.html\" title=\"struct std::collections::btree_map::RangeMut\">RangeMut</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Values%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1835\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Values%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.Values.html\" title=\"struct std::collections::btree_map::Values\">Values</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ValuesMut%3C'a,+K,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2037\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ValuesMut%3C'a,+K,+V%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.ValuesMut.html\" title=\"struct std::collections::btree_map::ValuesMut\">ValuesMut</a>&lt;'a, K, V&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-MatchIndices%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1073-1089\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-MatchIndices%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.MatchIndices.html\" title=\"struct std::str::MatchIndices\">MatchIndices</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Matches%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1130-1146\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Matches%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.Matches.html\" title=\"struct std::str::Matches\">Matches</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RMatchIndices%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1073-1089\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RMatchIndices%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.RMatchIndices.html\" title=\"struct std::str::RMatchIndices\">RMatchIndices</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RMatches%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1130-1146\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RMatches%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.RMatches.html\" title=\"struct std::str::RMatches\">RMatches</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RSplit%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#781-797\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RSplit%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::str::<a class=\"struct\" href=\"../str/struct.RSplit.html\" title=\"struct std::str::RSplit\">RSplit</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RSplitTerminator%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#845-861\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RSplitTerminator%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.RSplitTerminator.html\" title=\"struct std::str::RSplitTerminator\">RSplitTerminator</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Split%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#781-797\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Split%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::str::<a class=\"struct\" href=\"../str/struct.Split.html\" title=\"struct std::str::Split\">Split</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-SplitInclusive%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#1440-1441\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitInclusive%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::str::<a class=\"struct\" href=\"../str/struct.SplitInclusive.html\" title=\"struct std::str::SplitInclusive\">SplitInclusive</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-SplitTerminator%3C'a,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/iter.rs.html#845-861\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitTerminator%3C'a,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../str/struct.SplitTerminator.html\" title=\"struct std::str::SplitTerminator\">SplitTerminator</a>&lt;'a, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;,\n    &lt;P as <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" title=\"type std::str::pattern::Pattern::Searcher\">Searcher</a>: <a class=\"trait\" href=\"../str/pattern/trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1472\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::binary_heap::<a class=\"struct\" href=\"../collections/binary_heap/struct.Iter.html\" title=\"struct std::collections::binary_heap::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1496\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_set::<a class=\"struct\" href=\"../collections/btree_set/struct.Iter.html\" title=\"struct std::collections::btree_set::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Range%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1606\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Range%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_set::<a class=\"struct\" href=\"../collections/btree_set/struct.Range.html\" title=\"struct std::collections::btree_set::Range\">Range</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1220\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::linked_list::<a class=\"struct\" href=\"../collections/linked_list/struct.Iter.html\" title=\"struct std::collections::linked_list::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1288\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::linked_list::<a class=\"struct\" href=\"../collections/linked_list/struct.IterMut.html\" title=\"struct std::collections::linked_list::IterMut\">IterMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/iter.rs.html#114\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-3\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::vec_deque::<a class=\"struct\" href=\"../collections/vec_deque/struct.Iter.html\" title=\"struct std::collections::vec_deque::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/iter_mut.rs.html#105\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::vec_deque::<a class=\"struct\" href=\"../collections/vec_deque/struct.IterMut.html\" title=\"struct std::collections::vec_deque::IterMut\">IterMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1799\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-4\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::result::<a class=\"struct\" href=\"../result/struct.Iter.html\" title=\"struct std::result::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1848\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::result::<a class=\"struct\" href=\"../result/struct.IterMut.html\" title=\"struct std::result::IterMut\">IterMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Chunks%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#1556\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Chunks%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.Chunks.html\" title=\"struct std::slice::Chunks\">Chunks</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ChunksExact%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#1931\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ChunksExact%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ChunksExact.html\" title=\"struct std::slice::ChunksExact\">ChunksExact</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ChunksExactMut%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2092\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ChunksExactMut%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ChunksExactMut.html\" title=\"struct std::slice::ChunksExactMut\">ChunksExactMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ChunksMut%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#1744\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ChunksMut%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ChunksMut.html\" title=\"struct std::slice::ChunksMut\">ChunksMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-5\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#136-144\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Iter%3C'a,+T%3E-5\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#370\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IterMut%3C'a,+T%3E-3\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-RChunks%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2638\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RChunks%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.RChunks.html\" title=\"struct std::slice::RChunks\">RChunks</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-RChunksExact%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#3004\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RChunksExact%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.RChunksExact.html\" title=\"struct std::slice::RChunksExact\">RChunksExact</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-RChunksExactMut%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#3169\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RChunksExactMut%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.RChunksExactMut.html\" title=\"struct std::slice::RChunksExactMut\">RChunksExactMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-RChunksMut%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2819\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RChunksMut%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.RChunksMut.html\" title=\"struct std::slice::RChunksMut\">RChunksMut</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Windows%3C'a,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#1394\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Windows%3C'a,+T%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.Windows.html\" title=\"struct std::slice::Windows\">Windows</a>&lt;'a, T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ChunkBy%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#3310-3312\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ChunkBy%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ChunkBy.html\" title=\"struct std::slice::ChunkBy\">ChunkBy</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    T: 'a,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-ChunkByMut%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#3398-3400\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-ChunkByMut%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ChunkByMut.html\" title=\"struct std::slice::ChunkByMut\">ChunkByMut</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    T: 'a,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RSplit%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#981-983\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RSplit%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.RSplit.html\" title=\"struct std::slice::RSplit\">RSplit</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RSplitMut%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#1078-1080\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RSplitMut%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.RSplitMut.html\" title=\"struct std::slice::RSplitMut\">RSplitMut</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Split%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#490-492\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Split%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.Split.html\" title=\"struct std::slice::Split\">Split</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-SplitInclusive%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#628-630\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitInclusive%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.SplitInclusive.html\" title=\"struct std::slice::SplitInclusive\">SplitInclusive</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-SplitInclusiveMut%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#872-874\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitInclusiveMut%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.SplitInclusiveMut.html\" title=\"struct std::slice::SplitInclusiveMut\">SplitInclusiveMut</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-SplitMut%3C'a,+T,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#753-755\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-SplitMut%3C'a,+T,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.SplitMut.html\" title=\"struct std::slice::SplitMut\">SplitMut</a>&lt;'a, T, P&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-ArrayChunks%3C'a,+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2364\">source</a><a href=\"#impl-DoubleEndedIterator-for-ArrayChunks%3C'a,+T,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::slice::<a class=\"struct\" href=\"../slice/struct.ArrayChunks.html\" title=\"struct std::slice::ArrayChunks\">ArrayChunks</a>&lt;'a, T, N&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ArrayChunksMut%3C'a,+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2482\">source</a><a href=\"#impl-DoubleEndedIterator-for-ArrayChunksMut%3C'a,+T,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ArrayChunksMut.html\" title=\"struct std::slice::ArrayChunksMut\">ArrayChunksMut</a>&lt;'a, T, N&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-ArrayWindows%3C'a,+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/iter.rs.html#2241\">source</a><a href=\"#impl-DoubleEndedIterator-for-ArrayWindows%3C'a,+T,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../slice/struct.ArrayWindows.html\" title=\"struct std::slice::ArrayWindows\">ArrayWindows</a>&lt;'a, T, N&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Range%3CA%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#964\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Range%3CA%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::ops::<a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RangeInclusive%3CA%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/range.rs.html#1342\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-RangeInclusive%3CA%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../ops/struct.RangeInclusive.html\" title=\"struct std::ops::RangeInclusive\">RangeInclusive</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.Step.html\" title=\"trait std::iter::Step\">Step</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CA%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2352\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CA%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::option::<a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;A&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Repeat%3CA%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/repeat.rs.html#106\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Repeat%3CA%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Repeat.html\" title=\"struct std::iter::Repeat\">Repeat</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-RepeatN%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/repeat_n.rs.html#174\">source</a><a href=\"#impl-DoubleEndedIterator-for-RepeatN%3CA%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.RepeatN.html\" title=\"struct std::iter::RepeatN\">RepeatN</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Chain%3CA,+B%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/chain.rs.html#207-210\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Chain%3CA,+B%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::iter::Chain\">Chain</a>&lt;A, B&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    B: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>&lt;Item = &lt;A as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Zip%3CA,+B%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/zip.rs.html#118-121\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Zip%3CA,+B%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, B&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Zip.html\" title=\"struct std::iter::Zip\">Zip</a>&lt;A, B&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,\n    B: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-OnceWith%3CF%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/once_with.rs.html#104\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-OnceWith%3CF%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;A, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.OnceWith.html\" title=\"struct std::iter::OnceWith\">OnceWith</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; A,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-FilterMap%3CI,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/filter_map.rs.html#153-155\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-FilterMap%3CI,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B, I, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.FilterMap.html\" title=\"struct std::iter::FilterMap\">FilterMap</a>&lt;I, F&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Map%3CI,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/map.rs.html#144-146\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Map%3CI,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B, I, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Map.html\" title=\"struct std::iter::Map\">Map</a>&lt;I, F&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-ByRefSized%3C'_,+I%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/by_ref_sized.rs.html#59\">source</a><a href=\"#impl-DoubleEndedIterator-for-ByRefSized%3C'_,+I%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.ByRefSized.html\" title=\"struct std::iter::ByRefSized\">ByRefSized</a>&lt;'_, I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Enumerate%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/enumerate.rs.html#143-145\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Enumerate%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Enumerate.html\" title=\"struct std::iter::Enumerate\">Enumerate</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a> + <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Fuse%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/fuse.rs.html#127-129\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Fuse%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Fuse.html\" title=\"struct std::iter::Fuse\">Fuse</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Peekable%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/peekable.rs.html#120-122\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Peekable%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Peekable.html\" title=\"struct std::iter::Peekable\">Peekable</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Rev%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/rev.rs.html#77-79\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Rev%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Rev.html\" title=\"struct std::iter::Rev\">Rev</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Skip%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/skip.rs.html#191-193\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Skip%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Skip.html\" title=\"struct std::iter::Skip\">Skip</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-StepBy%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/step_by.rs.html#104-106\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-StepBy%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.StepBy.html\" title=\"struct std::iter::StepBy\">StepBy</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Take%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0\">1.38.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/take.rs.html#153-155\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Take%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::iter::Take\">Take</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2037\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Splice%3C'_,+I,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/splice.rs.html#44\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Splice%3C'_,+I,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../vec/struct.Splice.html\" title=\"struct std::vec::Splice\">Splice</a>&lt;'_, I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Inspect%3CI,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/inspect.rs.html#106-108\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Inspect%3CI,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Inspect.html\" title=\"struct std::iter::Inspect\">Inspect</a>&lt;I, F&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;&lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Filter%3CI,+P%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/filter.rs.html#162-164\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Filter%3CI,+P%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, P&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Filter.html\" title=\"struct std::iter::Filter\">Filter</a>&lt;I, P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;&lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Flatten%3CI%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/flatten.rs.html#341-344\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Flatten%3CI%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, U&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Flatten.html\" title=\"struct std::iter::Flatten\">Flatten</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    &lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;IntoIter = U, Item = &lt;U as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    U: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-FlatMap%3CI,+U,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/flatten.rs.html#109-112\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-FlatMap%3CI,+U,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, U, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.FlatMap.html\" title=\"struct std::iter::FlatMap\">FlatMap</a>&lt;I, U, F&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&lt;I as <a class=\"trait\" href=\"trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; U,\n    U: <a class=\"trait\" href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    &lt;U as <a class=\"trait\" href=\"trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-ArrayChunks%3CI,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/adapters/array_chunks.rs.html#112-114\">source</a><a href=\"#impl-DoubleEndedIterator-for-ArrayChunks%3CI,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;I, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::iter::<a class=\"struct\" href=\"struct.ArrayChunks.html\" title=\"struct std::iter::ArrayChunks\">ArrayChunks</a>&lt;I, N&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + <a class=\"trait\" href=\"trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1731\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_map::<a class=\"struct\" href=\"../collections/btree_map/struct.IntoIter.html\" title=\"struct std::collections::btree_map::IntoIter\">IntoIter</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoKeys%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2085\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoKeys%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.IntoKeys.html\" title=\"struct std::collections::btree_map::IntoKeys\">IntoKeys</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoValues%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2136\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoValues%3CK,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"../collections/btree_map/struct.IntoValues.html\" title=\"struct std::collections::btree_map::IntoValues\">IntoValues</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#1894\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::result::<a class=\"struct\" href=\"../result/struct.IntoIter.html\" title=\"struct std::result::IntoIter\">IntoIter</a>&lt;T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Empty%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/empty.rs.html#54\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Empty%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::iter::Empty\">Empty</a>&lt;T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Once%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/once.rs.html#83\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Once%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::iter::Once\">Once</a>&lt;T&gt;</h3></section><section id=\"impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1681\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::binary_heap::<a class=\"struct\" href=\"../collections/binary_heap/struct.Drain.html\" title=\"struct std::collections::binary_heap::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1535\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::binary_heap::<a class=\"struct\" href=\"../collections/binary_heap/struct.IntoIter.html\" title=\"struct std::collections::binary_heap::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#1539\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::btree_set::<a class=\"struct\" href=\"../collections/btree_set/struct.IntoIter.html\" title=\"struct std::collections::btree_set::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1988\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::linked_list::<a class=\"struct\" href=\"../collections/linked_list/struct.IntoIter.html\" title=\"struct std::collections::linked_list::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/drain.rs.html#259\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::vec_deque::<a class=\"struct\" href=\"../collections/vec_deque/struct.Drain.html\" title=\"struct std::collections::vec_deque::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-3\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/into_iter.rs.html#179\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-3\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::collections::vec_deque::<a class=\"struct\" href=\"../collections/vec_deque/struct.IntoIter.html\" title=\"struct std::collections::vec_deque::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/drain.rs.html#166\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Drain%3C'_,+T,+A%3E-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::vec::<a class=\"struct\" href=\"../vec/struct.Drain.html\" title=\"struct std::vec::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/into_iter.rs.html#363\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+A%3E-4\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::vec::<a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DoubleEndedIterator-for-IntoIter%3CT,+N%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#306\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-IntoIter%3CT,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for std::array::<a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;T, N&gt;</h3></section></div><script src=\"../../trait.impl/core/iter/traits/double_ended/trait.DoubleEndedIterator.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:58.843Z"
}