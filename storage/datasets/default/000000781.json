{
	"title": "Weak in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.Weak.html",
	"markdown": "# Weak in std::sync - Rust\n\n## Struct [std](../index.html)::[sync](index.html)::[Weak](#)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#319-322) Â·\n\n```\npub struct Weak<T, A = Global>where\n    A: Allocator,\n    T: ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\n`Weak` is a version of [`Arc`](struct.Arc.html \"struct std::sync::Arc\") that holds a non-owning reference to the managed allocation. The allocation is accessed by calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") on the `Weak` pointer, which returns an `[Option](../option/enum.Option.html \"enum std::option::Option\")<[Arc](struct.Arc.html \"struct std::sync::Arc\")<T>>`.\n\nSince a `Weak` reference does not count towards ownership, it will not prevent the value stored in the allocation from being dropped, and `Weak` itself makes no guarantees about the value still being present. Thus it may return [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") when [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\")d. Note however that a `Weak` reference _does_ prevent the allocation itself (the backing store) from being deallocated.\n\nA `Weak` pointer is useful for keeping a temporary reference to the allocation managed by [`Arc`](struct.Arc.html \"struct std::sync::Arc\") without preventing its inner value from being dropped. It is also used to prevent circular references between [`Arc`](struct.Arc.html \"struct std::sync::Arc\") pointers, since mutual owning references would never allow either [`Arc`](struct.Arc.html \"struct std::sync::Arc\") to be dropped. For example, a tree could have strong [`Arc`](struct.Arc.html \"struct std::sync::Arc\") pointers from parent nodes to children, and `Weak` pointers from children back to their parents.\n\nThe typical way to obtain a `Weak` pointer is to call [`Arc::downgrade`](about:blank/struct.Arc.html#method.downgrade \"associated function std::sync::Arc::downgrade\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2585)[Â§](#impl-Weak%3CT%3E)\n\n1.10.0 (const: 1.73.0) Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2603)\n\nConstructs a new `Weak<T>`, without allocating any memory. Calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") on the return value always gives [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [Â§](#examples)Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++%0A++++let+empty:+Weak%3Ci64%3E+=+Weak::new();%0A++++assert!(empty.upgrade().is_none());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2613)[Â§](#impl-Weak%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2633)\n\nðŸ”¬This is a nightly-only experimental API. (`allocator_api`Â [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new `Weak<T, A>`, without allocating any memory, technically in the provided allocator. Calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") on the return value always gives [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [Â§](#examples-1)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::sync::Weak;\nuse std::alloc::System;\n\nlet empty: Weak<i64, _> = Weak::new_in(System);\nassert!(empty.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++use+std::alloc::System;%0A++++%0A++++let+empty:+Weak%3Ci64,+_%3E+=+Weak::new_in(System);%0A++++assert!(empty.upgrade().is_none());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2650)[Â§](#impl-Weak%3CT%3E-1)\n\n1.45.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2694)\n\nConverts a raw pointer previously created by [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\") back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") later) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`](about:blank/struct.Weak.html#method.new \"associated function std::sync::Weak::new\"), as these donâ€™t own anything; the method still works on them).\n\n##### [Â§](#safety)Safety\n\nThe pointer must have originated from the [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\") and must still own its potential weak reference.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this takes ownership of one weak reference currently represented as a raw pointer (the weak count is not modified by this operation) and therefore it must be paired with a previous call to [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\").\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\n\nlet raw_1 = Arc::downgrade(&strong).into_raw();\nlet raw_2 = Arc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Arc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Arc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++%0A++++let+raw_1+=+Arc::downgrade(%26strong).into_raw();%0A++++let+raw_2+=+Arc::downgrade(%26strong).into_raw();%0A++++%0A++++assert_eq!(2,+Arc::weak_count(%26strong));%0A++++%0A++++assert_eq!(%22hello%22,+%26*unsafe+%7B+Weak::from_raw(raw_1)+%7D.upgrade().unwrap());%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++%0A++++drop(strong);%0A++++%0A++++//+Decrement+the+last+weak+count.%0A++++assert!(unsafe+%7B+Weak::from_raw(raw_2)+%7D.upgrade().is_none());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2699)[Â§](#impl-Weak%3CT,+A%3E-1)\n\n1.45.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2727)\n\nReturns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n\nThe pointer is valid only if there are some strong references. The pointer may be dangling, unaligned or even [`null`](../ptr/fn.null.html \"ptr::null\") otherwise.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::sync::Arc;\nuse std::ptr;\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\n// Both point to the same object\nassert!(ptr::eq(&*strong, weak.as_ptr()));\n// The strong here keeps it alive, so we can still access the object.\nassert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n\ndrop(strong);\n// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++use+std::ptr;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++//+Both+point+to+the+same+object%0A++++assert!(ptr::eq(%26*strong,+weak.as_ptr()));%0A++++//+The+strong+here+keeps+it+alive,+so+we+can+still+access+the+object.%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*weak.as_ptr()+%7D);%0A++++%0A++++drop(strong);%0A++++//+But+not+any+more.+We+can+do+weak.as_ptr(),+but+accessing+the+pointer+would+lead+to%0A++++//+undefined+behaviour.%0A++++//+assert_eq!(%22hello%22,+unsafe+%7B+%26*weak.as_ptr()+%7D);%0A%7D&edition=2021)\n\n1.45.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2771)\n\nConsumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of one weak reference (the weak count is not modified by this operation). It can be turned back into the `Weak<T>` with [`from_raw`](about:blank/struct.Weak.html#method.from_raw \"associated function std::sync::Weak::from_raw\").\n\nThe same restrictions of accessing the target of the pointer as with [`as_ptr`](about:blank/struct.Weak.html#method.as_ptr \"method std::sync::Weak::as_ptr\") apply.\n\n##### [Â§](#examples-4)Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Arc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Arc::weak_count(&strong));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++let+raw+=+weak.into_raw();%0A++++%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*raw+%7D);%0A++++%0A++++drop(unsafe+%7B+Weak::from_raw(raw)+%7D);%0A++++assert_eq!(0,+Arc::weak_count(%26strong));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2808)\n\nðŸ”¬This is a nightly-only experimental API. (`allocator_api`Â [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConsumes the `Weak<T>`, returning the wrapped pointer and allocator.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of one weak reference (the weak count is not modified by this operation). It can be turned back into the `Weak<T>` with [`from_raw_in`](about:blank/struct.Weak.html#method.from_raw_in \"associated function std::sync::Weak::from_raw_in\").\n\nThe same restrictions of accessing the target of the pointer as with [`as_ptr`](about:blank/struct.Weak.html#method.as_ptr \"method std::sync::Weak::as_ptr\") apply.\n\n##### [Â§](#examples-5)Examples\n\n```\n#![feature(allocator_api)]\nuse std::sync::{Arc, Weak};\nuse std::alloc::System;\n\nlet strong = Arc::new_in(\"hello\".to_owned(), System);\nlet weak = Arc::downgrade(&strong);\nlet (raw, alloc) = weak.into_raw_with_allocator();\n\nassert_eq!(1, Arc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw_in(raw, alloc) });\nassert_eq!(0, Arc::weak_count(&strong));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++use+std::alloc::System;%0A++++%0A++++let+strong+=+Arc::new_in(%22hello%22.to_owned(),+System);%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++let+(raw,+alloc)+=+weak.into_raw_with_allocator();%0A++++%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*raw+%7D);%0A++++%0A++++drop(unsafe+%7B+Weak::from_raw_in(raw,+alloc)+%7D);%0A++++assert_eq!(0,+Arc::weak_count(%26strong));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2860)\n\nðŸ”¬This is a nightly-only experimental API. (`allocator_api`Â [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConverts a raw pointer previously created by [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\") back into `Weak<T>` in the provided allocator.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") later) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`](about:blank/struct.Weak.html#method.new \"associated function std::sync::Weak::new\"), as these donâ€™t own anything; the method still works on them).\n\n##### [Â§](#safety-1)Safety\n\nThe pointer must have originated from the [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\") and must still own its potential weak reference, and must point to a block of memory allocated by `alloc`.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this takes ownership of one weak reference currently represented as a raw pointer (the weak count is not modified by this operation) and therefore it must be paired with a previous call to [`into_raw`](about:blank/struct.Weak.html#method.into_raw \"method std::sync::Weak::into_raw\").\n\n##### [Â§](#examples-6)Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\n\nlet raw_1 = Arc::downgrade(&strong).into_raw();\nlet raw_2 = Arc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Arc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Arc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++%0A++++let+raw_1+=+Arc::downgrade(%26strong).into_raw();%0A++++let+raw_2+=+Arc::downgrade(%26strong).into_raw();%0A++++%0A++++assert_eq!(2,+Arc::weak_count(%26strong));%0A++++%0A++++assert_eq!(%22hello%22,+%26*unsafe+%7B+Weak::from_raw(raw_1)+%7D.upgrade().unwrap());%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++%0A++++drop(strong);%0A++++%0A++++//+Decrement+the+last+weak+count.%0A++++assert!(unsafe+%7B+Weak::from_raw(raw_2)+%7D.upgrade().is_none());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2880)[Â§](#impl-Weak%3CT,+A%3E-2)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2907-2909)\n\nAttempts to upgrade the `Weak` pointer to an [`Arc`](struct.Arc.html \"struct std::sync::Arc\"), delaying dropping of the inner value if successful.\n\nReturns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the inner value has since been dropped.\n\n##### [Â§](#examples-7)Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet weak_five = Arc::downgrade(&five);\n\nlet strong_five: Option<Arc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++%0A++++let+five+=+Arc::new(5);%0A++++%0A++++let+weak_five+=+Arc::downgrade(%26five);%0A++++%0A++++let+strong_five:+Option%3CArc%3C_%3E%3E+=+weak_five.upgrade();%0A++++assert!(strong_five.is_some());%0A++++%0A++++//+Destroy+all+strong+pointers.%0A++++drop(strong_five);%0A++++drop(five);%0A++++%0A++++assert!(weak_five.upgrade().is_none());%0A%7D&edition=2021)\n\n1.41.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2943)\n\nGets the number of strong (`Arc`) pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`](about:blank/struct.Weak.html#method.new \"associated function std::sync::Weak::new\"), this will return 0.\n\n1.41.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2960)\n\nGets an approximation of the number of `Weak` pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`](about:blank/struct.Weak.html#method.new \"associated function std::sync::Weak::new\"), or if there are no remaining strong pointers, this will return 0.\n\n##### [Â§](#accuracy)Accuracy\n\nDue to implementation details, the returned value can be off by 1 in either direction when other threads are manipulating any `Arc`s or `Weak`s pointing to the same allocation.\n\n1.39.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3038)\n\nReturns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`](../ptr/fn.eq.html \"ptr::eq\"), or if both donâ€™t point to any allocation (because they were created with `Weak::new()`). However, this function ignores the metadata of `dyn Trait` pointers.\n\n##### [Â§](#notes)Notes\n\nSince this compares pointers it means that `Weak::new()` will equal each other, even though they donâ€™t point to any allocation.\n\n##### [Â§](#examples-8)Examples\n\n```\nuse std::sync::Arc;\n\nlet first_rc = Arc::new(5);\nlet first = Arc::downgrade(&first_rc);\nlet second = Arc::downgrade(&first_rc);\n\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(5);\nlet third = Arc::downgrade(&third_rc);\n\nassert!(!first.ptr_eq(&third));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++%0A++++let+first_rc+=+Arc::new(5);%0A++++let+first+=+Arc::downgrade(%26first_rc);%0A++++let+second+=+Arc::downgrade(%26first_rc);%0A++++%0A++++assert!(first.ptr_eq(%26second));%0A++++%0A++++let+third_rc+=+Arc::new(5);%0A++++let+third+=+Arc::downgrade(%26third_rc);%0A++++%0A++++assert!(!first.ptr_eq(%26third));%0A%7D&edition=2021)\n\nComparing `Weak::new`.\n\n```\nuse std::sync::{Arc, Weak};\n\nlet first = Weak::new();\nlet second = Weak::new();\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(());\nlet third = Arc::downgrade(&third_rc);\nassert!(!first.ptr_eq(&third));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+first+=+Weak::new();%0A++++let+second+=+Weak::new();%0A++++assert!(first.ptr_eq(%26second));%0A++++%0A++++let+third_rc+=+Arc::new(());%0A++++let+third+=+Arc::downgrade(%26third_rc);%0A++++assert!(!first.ptr_eq(%26third));%0A%7D&edition=2021)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3044)[Â§](#impl-Clone-for-Weak%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3057)[Â§](#method.clone)\n\nMakes a clone of the `Weak` pointer that points to the same allocation.\n\n##### [Â§](#examples-9)Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet weak_five = Arc::downgrade(&Arc::new(5));\n\nlet _ = Weak::clone(&weak_five);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+weak_five+=+Arc::downgrade(%26Arc::new(5));%0A++++%0A++++let+_+=+Weak::clone(%26weak_five);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169)[Â§](#method.clone_from)\n\nPerforms copy-assignment from `source`. [Read more](about:blank/clone/trait.Clone.html#method.clone_from)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#344)[Â§](#impl-Debug-for-Weak%3CT%3E)\n\n1.10.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3076)[Â§](#impl-Default-for-Weak%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3091)[Â§](#method.default)\n\nConstructs a new `Weak<T>`, without allocating memory. Calling [`upgrade`](about:blank/struct.Weak.html#method.upgrade \"method std::sync::Weak::upgrade\") on the return value always gives [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\n##### [Â§](#examples-10)Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Default::default();\nassert!(empty.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++%0A++++let+empty:+Weak%3Ci64%3E+=+Default::default();%0A++++assert!(empty.upgrade().is_none());%0A%7D&edition=2021)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3097)[Â§](#impl-Drop-for-Weak%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3122)[Â§](#method.drop)\n\nDrops the `Weak` pointer.\n\n##### [Â§](#examples-11)Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo = Arc::new(Foo);\nlet weak_foo = Arc::downgrade(&foo);\nlet other_weak_foo = Weak::clone(&weak_foo);\n\ndrop(weak_foo);   // Doesn't print anything\ndrop(foo);        // Prints \"dropped!\"\n\nassert!(other_weak_foo.upgrade().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+Drop+for+Foo+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++println!(%22dropped!%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+foo+=+Arc::new(Foo);%0A++++let+weak_foo+=+Arc::downgrade(%26foo);%0A++++let+other_weak_foo+=+Weak::clone(%26weak_foo);%0A++++%0A++++drop(weak_foo);+++//+Doesn%27t+print+anything%0A++++drop(foo);++++++++//+Prints+%22dropped!%22%0A++++%0A++++assert!(other_weak_foo.upgrade().is_none());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#339)[Â§](#impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#341)[Â§](#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#334)[Â§](#impl-Send-for-Weak%3CT,+A%3E)\n\n1.4.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#336)[Â§](#impl-Sync-for-Weak%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`Weak` is a version of `Arc` that holds a non-owning reference to the managed allocation. The allocation is accessed by calling `upgrade` on the `Weak` pointer, which returns an Option<Arc<T>>.\"><title>Weak in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Weak</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Weak</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.from_raw\">from_raw</a></li><li><a href=\"#method.from_raw_in\">from_raw_in</a></li><li><a href=\"#method.into_raw\">into_raw</a></li><li><a href=\"#method.into_raw_with_allocator\">into_raw_with_allocator</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.ptr_eq\">ptr_eq</a></li><li><a href=\"#method.strong_count\">strong_count</a></li><li><a href=\"#method.upgrade\">upgrade</a></li><li><a href=\"#method.weak_count\">weak_count</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-Weak%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\">CoerceUnsized&lt;Weak&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-Debug-for-Weak%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Weak%3CT%3E\">Default</a></li><li><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\">DispatchFromDyn&lt;Weak&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Drop-for-Weak%3CT,+A%3E\">Drop</a></li><li><a href=\"#impl-Send-for-Weak%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Weak%3CT,+A%3E\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Weak%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Weak%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-Weak%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Weak%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">Weak</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#319-322\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Weak&lt;T, A = <a class=\"struct\" href=\"../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>Weak</code> is a version of <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> that holds a non-owning reference to the\nmanaged allocation. The allocation is accessed by calling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a> on the <code>Weak</code>\npointer, which returns an <code><a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T&gt;&gt;</code>.</p>\n<p>Since a <code>Weak</code> reference does not count towards ownership, it will not\nprevent the value stored in the allocation from being dropped, and <code>Weak</code> itself makes no\nguarantees about the value still being present. Thus it may return <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>\nwhen <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a>d. Note however that a <code>Weak</code> reference <em>does</em> prevent the allocation\nitself (the backing store) from being deallocated.</p>\n<p>A <code>Weak</code> pointer is useful for keeping a temporary reference to the allocation\nmanaged by <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> without preventing its inner value from being dropped. It is also used to\nprevent circular references between <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> pointers, since mutual owning references\nwould never allow either <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> to be dropped. For example, a tree could\nhave strong <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a> pointers from parent nodes to children, and <code>Weak</code>\npointers from children back to their parents.</p>\n<p>The typical way to obtain a <code>Weak</code> pointer is to call <a href=\"struct.Arc.html#method.downgrade\" title=\"associated function std::sync::Arc::downgrade\"><code>Arc::downgrade</code></a>.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2585\">source</a><a href=\"#impl-Weak%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0, const since 1.73.0\">1.10.0 (const: 1.73.0)</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2603\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory.\nCalling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Weak::new();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++%0A++++let+empty:+Weak%3Ci64%3E+=+Weak::new();%0A++++assert!(empty.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2613\">source</a><a href=\"#impl-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2633\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any memory, technically in the provided\nallocator.\nCalling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always gives <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::sync::Weak;\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64, <span class=\"kw\">_</span>&gt; = Weak::new_in(System);\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++use+std::alloc::System;%0A++++%0A++++let+empty:+Weak%3Ci64,+_%3E+=+Weak::new_in(System);%0A++++assert!(empty.upgrade().is_none());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Weak%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2650\">source</a><a href=\"#impl-Weak%3CT%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2694\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw\" class=\"fn\">from_raw</a>(ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>) -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code>.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"struct.Weak.html#method.new\" title=\"associated function std::sync::Weak::new\"><code>new</code></a>,\nas these donâ€™t own anything; the method still works on them).</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++%0A++++let+raw_1+=+Arc::downgrade(%26strong).into_raw();%0A++++let+raw_2+=+Arc::downgrade(%26strong).into_raw();%0A++++%0A++++assert_eq!(2,+Arc::weak_count(%26strong));%0A++++%0A++++assert_eq!(%22hello%22,+%26*unsafe+%7B+Weak::from_raw(raw_1)+%7D.upgrade().unwrap());%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++%0A++++drop(strong);%0A++++%0A++++//+Decrement+the+last+weak+count.%0A++++assert!(unsafe+%7B+Weak::from_raw(raw_2)+%7D.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Weak%3CT,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2699\">source</a><a href=\"#impl-Weak%3CT,+A%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2727\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the object <code>T</code> pointed to by this <code>Weak&lt;T&gt;</code>.</p>\n<p>The pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even <a href=\"../ptr/fn.null.html\" title=\"ptr::null\"><code>null</code></a> otherwise.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"comment\">// Both point to the same object\n</span><span class=\"macro\">assert!</span>(ptr::eq(<span class=\"kw-2\">&amp;*</span>strong, weak.as_ptr()));\n<span class=\"comment\">// The strong here keeps it alive, so we can still access the object.\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>weak.as_ptr() });\n\ndrop(strong);\n<span class=\"comment\">// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &amp;*weak.as_ptr() });</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++use+std::ptr;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++//+Both+point+to+the+same+object%0A++++assert!(ptr::eq(%26*strong,+weak.as_ptr()));%0A++++//+The+strong+here+keeps+it+alive,+so+we+can+still+access+the+object.%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*weak.as_ptr()+%7D);%0A++++%0A++++drop(strong);%0A++++//+But+not+any+more.+We+can+do+weak.as_ptr(),+but+accessing+the+pointer+would+lead+to%0A++++//+undefined+behaviour.%0A++++//+assert_eq!(%22hello%22,+unsafe+%7B+%26*weak.as_ptr()+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2771\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw\" class=\"fn\">into_raw</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"struct.Weak.html#method.from_raw\" title=\"associated function std::sync::Weak::from_raw\"><code>from_raw</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"struct.Weak.html#method.as_ptr\" title=\"method std::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>raw = weak.into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++let+raw+=+weak.into_raw();%0A++++%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*raw+%7D);%0A++++%0A++++drop(unsafe+%7B+Weak::from_raw(raw)+%7D);%0A++++assert_eq!(0,+Arc::weak_count(%26strong));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2808\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw_with_allocator\" class=\"fn\">into_raw_with_allocator</a>(self) -&gt; (<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and allocator.</p>\n<p>This converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the <code>Weak&lt;T&gt;</code> with <a href=\"struct.Weak.html#method.from_raw_in\" title=\"associated function std::sync::Weak::from_raw_in\"><code>from_raw_in</code></a>.</p>\n<p>The same restrictions of accessing the target of the pointer as with\n<a href=\"struct.Weak.html#method.as_ptr\" title=\"method std::sync::Weak::as_ptr\"><code>as_ptr</code></a> apply.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n</span><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n<span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>strong = Arc::new_in(<span class=\"string\">\"hello\"</span>.to_owned(), System);\n<span class=\"kw\">let </span>weak = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong);\n<span class=\"kw\">let </span>(raw, alloc) = weak.into_raw_with_allocator();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>raw });\n\ndrop(<span class=\"kw\">unsafe </span>{ Weak::from_raw_in(raw, alloc) });\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++use+std::alloc::System;%0A++++%0A++++let+strong+=+Arc::new_in(%22hello%22.to_owned(),+System);%0A++++let+weak+=+Arc::downgrade(%26strong);%0A++++let+(raw,+alloc)+=+weak.into_raw_with_allocator();%0A++++%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++assert_eq!(%22hello%22,+unsafe+%7B+%26*raw+%7D);%0A++++%0A++++drop(unsafe+%7B+Weak::from_raw_in(raw,+alloc)+%7D);%0A++++assert_eq!(0,+Arc::weak_count(%26strong));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2860\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw_in\" class=\"fn\">from_raw_in</a>(ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a raw pointer previously created by <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a> back into <code>Weak&lt;T&gt;</code> in the provided\nallocator.</p>\n<p>This can be used to safely get a strong reference (by calling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a>\nlater) or to deallocate the weak count by dropping the <code>Weak&lt;T&gt;</code>.</p>\n<p>It takes ownership of one weak reference (with the exception of pointers created by <a href=\"struct.Weak.html#method.new\" title=\"associated function std::sync::Weak::new\"><code>new</code></a>,\nas these donâ€™t own anything; the method still works on them).</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">Â§</a>Safety</h5>\n<p>The pointer must have originated from the <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a> and must still own its potential\nweak reference, and must point to a block of memory allocated by <code>alloc</code>.</p>\n<p>It is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to <a href=\"struct.Weak.html#method.into_raw\" title=\"method std::sync::Weak::into_raw\"><code>into_raw</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>strong = Arc::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw\">let </span>raw_1 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n<span class=\"kw\">let </span>raw_2 = Arc::downgrade(<span class=\"kw-2\">&amp;</span>strong).into_raw();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello\"</span>, <span class=\"kw-2\">&amp;*</span><span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_1) }.upgrade().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Arc::weak_count(<span class=\"kw-2\">&amp;</span>strong));\n\ndrop(strong);\n\n<span class=\"comment\">// Decrement the last weak count.\n</span><span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ Weak::from_raw(raw_2) }.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+strong+=+Arc::new(%22hello%22.to_owned());%0A++++%0A++++let+raw_1+=+Arc::downgrade(%26strong).into_raw();%0A++++let+raw_2+=+Arc::downgrade(%26strong).into_raw();%0A++++%0A++++assert_eq!(2,+Arc::weak_count(%26strong));%0A++++%0A++++assert_eq!(%22hello%22,+%26*unsafe+%7B+Weak::from_raw(raw_1)+%7D.upgrade().unwrap());%0A++++assert_eq!(1,+Arc::weak_count(%26strong));%0A++++%0A++++drop(strong);%0A++++%0A++++//+Decrement+the+last+weak+count.%0A++++assert!(unsafe+%7B+Weak::from_raw(raw_2)+%7D.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Weak%3CT,+A%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2880\">source</a><a href=\"#impl-Weak%3CT,+A%3E-2\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.upgrade\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2907-2909\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.upgrade\" class=\"fn\">upgrade</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to upgrade the <code>Weak</code> pointer to an <a href=\"struct.Arc.html\" title=\"struct std::sync::Arc\"><code>Arc</code></a>, delaying\ndropping of the inner value if successful.</p>\n<p>Returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the inner value has since been dropped.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>five = Arc::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>five);\n\n<span class=\"kw\">let </span>strong_five: <span class=\"prelude-ty\">Option</span>&lt;Arc&lt;<span class=\"kw\">_</span>&gt;&gt; = weak_five.upgrade();\n<span class=\"macro\">assert!</span>(strong_five.is_some());\n\n<span class=\"comment\">// Destroy all strong pointers.\n</span>drop(strong_five);\ndrop(five);\n\n<span class=\"macro\">assert!</span>(weak_five.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++%0A++++let+five+=+Arc::new(5);%0A++++%0A++++let+weak_five+=+Arc::downgrade(%26five);%0A++++%0A++++let+strong_five:+Option%3CArc%3C_%3E%3E+=+weak_five.upgrade();%0A++++assert!(strong_five.is_some());%0A++++%0A++++//+Destroy+all+strong+pointers.%0A++++drop(strong_five);%0A++++drop(five);%0A++++%0A++++assert!(weak_five.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strong_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2943\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strong_count\" class=\"fn\">strong_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets the number of strong (<code>Arc</code>) pointers pointing to this allocation.</p>\n<p>If <code>self</code> was created using <a href=\"struct.Weak.html#method.new\" title=\"associated function std::sync::Weak::new\"><code>Weak::new</code></a>, this will return 0.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.weak_count\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2960\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.weak_count\" class=\"fn\">weak_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Gets an approximation of the number of <code>Weak</code> pointers pointing to this\nallocation.</p>\n<p>If <code>self</code> was created using <a href=\"struct.Weak.html#method.new\" title=\"associated function std::sync::Weak::new\"><code>Weak::new</code></a>, or if there are no remaining\nstrong pointers, this will return 0.</p>\n<h5 id=\"accuracy\"><a class=\"doc-anchor\" href=\"#accuracy\">Â§</a>Accuracy</h5>\n<p>Due to implementation details, the returned value can be off by 1 in\neither direction when other threads are manipulating any <code>Arc</code>s or\n<code>Weak</code>s pointing to the same allocation.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ptr_eq\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.39.0\">1.39.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3038\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ptr_eq\" class=\"fn\">ptr_eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation similar to <a href=\"../ptr/fn.eq.html\" title=\"ptr::eq\"><code>ptr::eq</code></a>, or if\nboth donâ€™t point to any allocation (because they were created with <code>Weak::new()</code>). However,\nthis function ignores the metadata of  <code>dyn Trait</code> pointers.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">Â§</a>Notes</h5>\n<p>Since this compares pointers it means that <code>Weak::new()</code> will equal each\nother, even though they donâ€™t point to any allocation.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n\n<span class=\"kw\">let </span>first_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>first = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n<span class=\"kw\">let </span>second = Arc::downgrade(<span class=\"kw-2\">&amp;</span>first_rc);\n\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++%0A++++let+first_rc+=+Arc::new(5);%0A++++let+first+=+Arc::downgrade(%26first_rc);%0A++++let+second+=+Arc::downgrade(%26first_rc);%0A++++%0A++++assert!(first.ptr_eq(%26second));%0A++++%0A++++let+third_rc+=+Arc::new(5);%0A++++let+third+=+Arc::downgrade(%26third_rc);%0A++++%0A++++assert!(!first.ptr_eq(%26third));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Comparing <code>Weak::new</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>first = Weak::new();\n<span class=\"kw\">let </span>second = Weak::new();\n<span class=\"macro\">assert!</span>(first.ptr_eq(<span class=\"kw-2\">&amp;</span>second));\n\n<span class=\"kw\">let </span>third_rc = Arc::new(());\n<span class=\"kw\">let </span>third = Arc::downgrade(<span class=\"kw-2\">&amp;</span>third_rc);\n<span class=\"macro\">assert!</span>(!first.ptr_eq(<span class=\"kw-2\">&amp;</span>third));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+first+=+Weak::new();%0A++++let+second+=+Weak::new();%0A++++assert!(first.ptr_eq(%26second));%0A++++%0A++++let+third_rc+=+Arc::new(());%0A++++let+third+=+Arc::downgrade(%26third_rc);%0A++++assert!(!first.ptr_eq(%26third));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3044\">source</a></span><a href=\"#impl-Clone-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3057\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a clone of the <code>Weak</code> pointer that points to the same allocation.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">let </span>weak_five = Arc::downgrade(<span class=\"kw-2\">&amp;</span>Arc::new(<span class=\"number\">5</span>));\n\n<span class=\"kw\">let _ </span>= Weak::clone(<span class=\"kw-2\">&amp;</span>weak_five);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++let+weak_five+=+Arc::downgrade(%26Arc::new(5));%0A++++%0A++++let+_+=+Weak::clone(%26weak_five);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Weak%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#344\">source</a></span><a href=\"#impl-Debug-for-Weak%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#345\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Weak%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3076\">source</a></span><a href=\"#impl-Default-for-Weak%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3091\">source</a><a href=\"#method.default\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Weak&lt;T&gt;</code>, without allocating memory.\nCalling <a href=\"struct.Weak.html#method.upgrade\" title=\"method std::sync::Weak::upgrade\"><code>upgrade</code></a> on the return value always\ngives <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Weak;\n\n<span class=\"kw\">let </span>empty: Weak&lt;i64&gt; = Default::default();\n<span class=\"macro\">assert!</span>(empty.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Weak;%0A++++%0A++++let+empty:+Weak%3Ci64%3E+=+Default::default();%0A++++assert!(empty.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3097\">source</a></span><a href=\"#impl-Drop-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3122\">source</a><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Drops the <code>Weak</code> pointer.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, Weak};\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"dropped!\"</span>);\n    }\n}\n\n<span class=\"kw\">let </span>foo = Arc::new(Foo);\n<span class=\"kw\">let </span>weak_foo = Arc::downgrade(<span class=\"kw-2\">&amp;</span>foo);\n<span class=\"kw\">let </span>other_weak_foo = Weak::clone(<span class=\"kw-2\">&amp;</span>weak_foo);\n\ndrop(weak_foo);   <span class=\"comment\">// Doesn't print anything\n</span>drop(foo);        <span class=\"comment\">// Prints \"dropped!\"\n\n</span><span class=\"macro\">assert!</span>(other_weak_foo.upgrade().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+Weak%7D;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+Drop+for+Foo+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++println!(%22dropped!%22);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+foo+=+Arc::new(Foo);%0A++++let+weak_foo+=+Arc::downgrade(%26foo);%0A++++let+other_weak_foo+=+Weak::clone(%26weak_foo);%0A++++%0A++++drop(weak_foo);+++//+Doesn't+print+anything%0A++++drop(foo);++++++++//+Prints+%22dropped!%22%0A++++%0A++++assert!(other_weak_foo.upgrade().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><section id=\"impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#339\">source</a><a href=\"#impl-CoerceUnsized%3CWeak%3CU,+A%3E%3E-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#341\">source</a><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#334\">source</a></span><a href=\"#impl-Send-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#336\">source</a></span><a href=\"#impl-Sync-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Weak%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Weak%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-Weak%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Weak%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Weak%3CT,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:29.673Z"
}