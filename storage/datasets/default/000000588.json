{
	"title": "result.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#527",
	"markdown": "# result.rs - source\n\n```\n//! Error handling with the `Result` type.\n//!\n//! [`Result<T, E>`][`Result`] is the type used for returning and propagating\n//! errors. It is an enum with the variants, [`Ok(T)`], representing\n//! success and containing a value, and [`Err(E)`], representing error\n//! and containing an error value.\n//!\n//! ```\n//! # #[allow(dead_code)]\n//! enum Result<T, E> {\n//!    Ok(T),\n//!    Err(E),\n//! }\n//! ```\n//!\n//! Functions return [`Result`] whenever errors are expected and\n//! recoverable. In the `std` crate, [`Result`] is most prominently used\n//! for [I/O](../../std/io/index.html).\n//!\n//! A simple function returning [`Result`] might be\n//! defined and used like so:\n//!\n//! ```\n//! #[derive(Debug)]\n//! enum Version { Version1, Version2 }\n//!\n//! fn parse_version(header: &[u8]) -> Result<Version, &'static str> {\n//!     match header.get(0) {\n//!         None => Err(\"invalid header length\"),\n//!         Some(&1) => Ok(Version::Version1),\n//!         Some(&2) => Ok(Version::Version2),\n//!         Some(_) => Err(\"invalid version\"),\n//!     }\n//! }\n//!\n//! let version = parse_version(&[1, 2, 3, 4]);\n//! match version {\n//!     Ok(v) => println!(\"working with version: {v:?}\"),\n//!     Err(e) => println!(\"error parsing header: {e:?}\"),\n//! }\n//! ```\n//!\n//! Pattern matching on [`Result`]s is clear and straightforward for\n//! simple cases, but [`Result`] comes with some convenience methods\n//! that make working with it more succinct.\n//!\n//! ```\n//! // The `is_ok` and `is_err` methods do what they say.\n//! let good_result: Result<i32, i32> = Ok(10);\n//! let bad_result: Result<i32, i32> = Err(10);\n//! assert!(good_result.is_ok() && !good_result.is_err());\n//! assert!(bad_result.is_err() && !bad_result.is_ok());\n//!\n//! // `map` and `map_err` consume the `Result` and produce another.\n//! let good_result: Result<i32, i32> = good_result.map(|i| i + 1);\n//! let bad_result: Result<i32, i32> = bad_result.map_err(|i| i - 1);\n//! assert_eq!(good_result, Ok(11));\n//! assert_eq!(bad_result, Err(9));\n//!\n//! // Use `and_then` to continue the computation.\n//! let good_result: Result<bool, i32> = good_result.and_then(|i| Ok(i == 11));\n//! assert_eq!(good_result, Ok(true));\n//!\n//! // Use `or_else` to handle the error.\n//! let bad_result: Result<i32, i32> = bad_result.or_else(|i| Ok(i + 20));\n//! assert_eq!(bad_result, Ok(29));\n//!\n//! // Consume the result and return the contents with `unwrap`.\n//! let final_awesome_result = good_result.unwrap();\n//! assert!(final_awesome_result)\n//! ```\n//!\n//! # Results must be used\n//!\n//! A common problem with using return values to indicate errors is\n//! that it is easy to ignore the return value, thus failing to handle\n//! the error. [`Result`] is annotated with the `#[must_use]` attribute,\n//! which will cause the compiler to issue a warning when a Result\n//! value is ignored. This makes [`Result`] especially useful with\n//! functions that may encounter errors but don't otherwise return a\n//! useful value.\n//!\n//! Consider the [`write_all`] method defined for I/O types\n//! by the [`Write`] trait:\n//!\n//! ```\n//! use std::io;\n//!\n//! trait Write {\n//!     fn write_all(&mut self, bytes: &[u8]) -> Result<(), io::Error>;\n//! }\n//! ```\n//!\n//! *Note: The actual definition of [`Write`] uses [`io::Result`], which\n//! is just a synonym for <code>[Result]<T, [io::Error]></code>.*\n//!\n//! This method doesn't produce a value, but the write may\n//! fail. It's crucial to handle the error case, and *not* write\n//! something like this:\n//!\n//! ```no_run\n//! # #![allow(unused_must_use)] // \\o/\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//!\n//! let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! // If `write_all` errors, then we'll never know, because the return\n//! // value is ignored.\n//! file.write_all(b\"important message\");\n//! ```\n//!\n//! If you *do* write that in Rust, the compiler will give you a\n//! warning (by default, controlled by the `unused_must_use` lint).\n//!\n//! You might instead, if you don't want to handle the error, simply\n//! assert success with [`expect`]. This will panic if the\n//! write fails, providing a marginally useful message indicating why:\n//!\n//! ```no_run\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//!\n//! let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! file.write_all(b\"important message\").expect(\"failed to write message\");\n//! ```\n//!\n//! You might also simply assert success:\n//!\n//! ```no_run\n//! # use std::fs::File;\n//! # use std::io::prelude::*;\n//! # let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! assert!(file.write_all(b\"important message\").is_ok());\n//! ```\n//!\n//! Or propagate the error up the call stack with [`?`]:\n//!\n//! ```\n//! # use std::fs::File;\n//! # use std::io::prelude::*;\n//! # use std::io;\n//! # #[allow(dead_code)]\n//! fn write_message() -> io::Result<()> {\n//!     let mut file = File::create(\"valuable_data.txt\")?;\n//!     file.write_all(b\"important message\")?;\n//!     Ok(())\n//! }\n//! ```\n//!\n//! # The question mark operator, `?`\n//!\n//! When writing code that calls many functions that return the\n//! [`Result`] type, the error handling can be tedious. The question mark\n//! operator, [`?`], hides some of the boilerplate of propagating errors\n//! up the call stack.\n//!\n//! It replaces this:\n//!\n//! ```\n//! # #![allow(dead_code)]\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//! use std::io;\n//!\n//! struct Info {\n//!     name: String,\n//!     age: i32,\n//!     rating: i32,\n//! }\n//!\n//! fn write_info(info: &Info) -> io::Result<()> {\n//!     // Early return on error\n//!     let mut file = match File::create(\"my_best_friends.txt\") {\n//!            Err(e) => return Err(e),\n//!            Ok(f) => f,\n//!     };\n//!     if let Err(e) = file.write_all(format!(\"name: {}\\n\", info.name).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     if let Err(e) = file.write_all(format!(\"age: {}\\n\", info.age).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     if let Err(e) = file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     Ok(())\n//! }\n//! ```\n//!\n//! With this:\n//!\n//! ```\n//! # #![allow(dead_code)]\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//! use std::io;\n//!\n//! struct Info {\n//!     name: String,\n//!     age: i32,\n//!     rating: i32,\n//! }\n//!\n//! fn write_info(info: &Info) -> io::Result<()> {\n//!     let mut file = File::create(\"my_best_friends.txt\")?;\n//!     // Early return on error\n//!     file.write_all(format!(\"name: {}\\n\", info.name).as_bytes())?;\n//!     file.write_all(format!(\"age: {}\\n\", info.age).as_bytes())?;\n//!     file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes())?;\n//!     Ok(())\n//! }\n//! ```\n//!\n//! *It's much nicer!*\n//!\n//! Ending the expression with [`?`] will result in the [`Ok`]'s unwrapped value, unless the result\n//! is [`Err`], in which case [`Err`] is returned early from the enclosing function.\n//!\n//! [`?`] can be used in functions that return [`Result`] because of the\n//! early return of [`Err`] that it provides.\n//!\n//! [`expect`]: Result::expect\n//! [`Write`]: ../../std/io/trait.Write.html \"io::Write\"\n//! [`write_all`]: ../../std/io/trait.Write.html#method.write_all \"io::Write::write_all\"\n//! [`io::Result`]: ../../std/io/type.Result.html \"io::Result\"\n//! [`?`]: crate::ops::Try\n//! [`Ok(T)`]: Ok\n//! [`Err(E)`]: Err\n//! [io::Error]: ../../std/io/struct.Error.html \"io::Error\"\n//!\n//! # Representation\n//!\n//! In some cases, [`Result<T, E>`] will gain the same size, alignment, and ABI\n//! guarantees as [`Option<U>`] has. One of either the `T` or `E` type must be a\n//! type that qualifies for the `Option` [representation guarantees][opt-rep],\n//! and the *other* type must meet all of the following conditions:\n//! * Is a zero-sized type with alignment 1 (a \"1-ZST\").\n//! * Has no fields.\n//! * Does not have the `#[non_exhaustive]` attribute.\n//!\n//! For example, `NonZeroI32` qualifies for the `Option` representation\n//! guarantees, and `()` is a zero-sized type with alignment 1, no fields, and\n//! it isn't `non_exhaustive`. This means that both `Result<NonZeroI32, ()>` and\n//! `Result<(), NonZeroI32>` have the same size, alignment, and ABI guarantees\n//! as `Option<NonZeroI32>`. The only difference is the implied semantics:\n//! * `Option<NonZeroI32>` is \"a non-zero i32 might be present\"\n//! * `Result<NonZeroI32, ()>` is \"a non-zero i32 success result, if any\"\n//! * `Result<(), NonZeroI32>` is \"a non-zero i32 error result, if any\"\n//!\n//! [opt-rep]: ../option/index.html#representation \"Option Representation\"\n//!\n//! # Method overview\n//!\n//! In addition to working with pattern matching, [`Result`] provides a\n//! wide variety of different methods.\n//!\n//! ## Querying the variant\n//!\n//! The [`is_ok`] and [`is_err`] methods return [`true`] if the [`Result`]\n//! is [`Ok`] or [`Err`], respectively.\n//!\n//! [`is_err`]: Result::is_err\n//! [`is_ok`]: Result::is_ok\n//!\n//! ## Adapters for working with references\n//!\n//! * [`as_ref`] converts from `&Result<T, E>` to `Result<&T, &E>`\n//! * [`as_mut`] converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`\n//! * [`as_deref`] converts from `&Result<T, E>` to `Result<&T::Target, &E>`\n//! * [`as_deref_mut`] converts from `&mut Result<T, E>` to\n//!   `Result<&mut T::Target, &mut E>`\n//!\n//! [`as_deref`]: Result::as_deref\n//! [`as_deref_mut`]: Result::as_deref_mut\n//! [`as_mut`]: Result::as_mut\n//! [`as_ref`]: Result::as_ref\n//!\n//! ## Extracting contained values\n//!\n//! These methods extract the contained value in a [`Result<T, E>`] when it\n//! is the [`Ok`] variant. If the [`Result`] is [`Err`]:\n//!\n//! * [`expect`] panics with a provided custom message\n//! * [`unwrap`] panics with a generic message\n//! * [`unwrap_or`] returns the provided default value\n//! * [`unwrap_or_default`] returns the default value of the type `T`\n//!   (which must implement the [`Default`] trait)\n//! * [`unwrap_or_else`] returns the result of evaluating the provided\n//!   function\n//!\n//! The panicking methods [`expect`] and [`unwrap`] require `E` to\n//! implement the [`Debug`] trait.\n//!\n//! [`Debug`]: crate::fmt::Debug\n//! [`expect`]: Result::expect\n//! [`unwrap`]: Result::unwrap\n//! [`unwrap_or`]: Result::unwrap_or\n//! [`unwrap_or_default`]: Result::unwrap_or_default\n//! [`unwrap_or_else`]: Result::unwrap_or_else\n//!\n//! These methods extract the contained value in a [`Result<T, E>`] when it\n//! is the [`Err`] variant. They require `T` to implement the [`Debug`]\n//! trait. If the [`Result`] is [`Ok`]:\n//!\n//! * [`expect_err`] panics with a provided custom message\n//! * [`unwrap_err`] panics with a generic message\n//!\n//! [`Debug`]: crate::fmt::Debug\n//! [`expect_err`]: Result::expect_err\n//! [`unwrap_err`]: Result::unwrap_err\n//!\n//! ## Transforming contained values\n//!\n//! These methods transform [`Result`] to [`Option`]:\n//!\n//! * [`err`][Result::err] transforms [`Result<T, E>`] into [`Option<E>`],\n//!   mapping [`Err(e)`] to [`Some(e)`] and [`Ok(v)`] to [`None`]\n//! * [`ok`][Result::ok] transforms [`Result<T, E>`] into [`Option<T>`],\n//!   mapping [`Ok(v)`] to [`Some(v)`] and [`Err(e)`] to [`None`]\n//! * [`transpose`] transposes a [`Result`] of an [`Option`] into an\n//!   [`Option`] of a [`Result`]\n//!\n// Do NOT add link reference definitions for `err` or `ok`, because they\n// will generate numerous incorrect URLs for `Err` and `Ok` elsewhere, due\n// to case folding.\n//!\n//! [`Err(e)`]: Err\n//! [`Ok(v)`]: Ok\n//! [`Some(e)`]: Option::Some\n//! [`Some(v)`]: Option::Some\n//! [`transpose`]: Result::transpose\n//!\n//! This method transforms the contained value of the [`Ok`] variant:\n//!\n//! * [`map`] transforms [`Result<T, E>`] into [`Result<U, E>`] by applying\n//!   the provided function to the contained value of [`Ok`] and leaving\n//!   [`Err`] values unchanged\n//!\n//! [`map`]: Result::map\n//!\n//! This method transforms the contained value of the [`Err`] variant:\n//!\n//! * [`map_err`] transforms [`Result<T, E>`] into [`Result<T, F>`] by\n//!   applying the provided function to the contained value of [`Err`] and\n//!   leaving [`Ok`] values unchanged\n//!\n//! [`map_err`]: Result::map_err\n//!\n//! These methods transform a [`Result<T, E>`] into a value of a possibly\n//! different type `U`:\n//!\n//! * [`map_or`] applies the provided function to the contained value of\n//!   [`Ok`], or returns the provided default value if the [`Result`] is\n//!   [`Err`]\n//! * [`map_or_else`] applies the provided function to the contained value\n//!   of [`Ok`], or applies the provided default fallback function to the\n//!   contained value of [`Err`]\n//!\n//! [`map_or`]: Result::map_or\n//! [`map_or_else`]: Result::map_or_else\n//!\n//! ## Boolean operators\n//!\n//! These methods treat the [`Result`] as a boolean value, where [`Ok`]\n//! acts like [`true`] and [`Err`] acts like [`false`]. There are two\n//! categories of these methods: ones that take a [`Result`] as input, and\n//! ones that take a function as input (to be lazily evaluated).\n//!\n//! The [`and`] and [`or`] methods take another [`Result`] as input, and\n//! produce a [`Result`] as output. The [`and`] method can produce a\n//! [`Result<U, E>`] value having a different inner type `U` than\n//! [`Result<T, E>`]. The [`or`] method can produce a [`Result<T, F>`]\n//! value having a different error type `F` than [`Result<T, E>`].\n//!\n//! | method  | self     | input     | output   |\n//! |---------|----------|-----------|----------|\n//! | [`and`] | `Err(e)` | (ignored) | `Err(e)` |\n//! | [`and`] | `Ok(x)`  | `Err(d)`  | `Err(d)` |\n//! | [`and`] | `Ok(x)`  | `Ok(y)`   | `Ok(y)`  |\n//! | [`or`]  | `Err(e)` | `Err(d)`  | `Err(d)` |\n//! | [`or`]  | `Err(e)` | `Ok(y)`   | `Ok(y)`  |\n//! | [`or`]  | `Ok(x)`  | (ignored) | `Ok(x)`  |\n//!\n//! [`and`]: Result::and\n//! [`or`]: Result::or\n//!\n//! The [`and_then`] and [`or_else`] methods take a function as input, and\n//! only evaluate the function when they need to produce a new value. The\n//! [`and_then`] method can produce a [`Result<U, E>`] value having a\n//! different inner type `U` than [`Result<T, E>`]. The [`or_else`] method\n//! can produce a [`Result<T, F>`] value having a different error type `F`\n//! than [`Result<T, E>`].\n//!\n//! | method       | self     | function input | function result | output   |\n//! |--------------|----------|----------------|-----------------|----------|\n//! | [`and_then`] | `Err(e)` | (not provided) | (not evaluated) | `Err(e)` |\n//! | [`and_then`] | `Ok(x)`  | `x`            | `Err(d)`        | `Err(d)` |\n//! | [`and_then`] | `Ok(x)`  | `x`            | `Ok(y)`         | `Ok(y)`  |\n//! | [`or_else`]  | `Err(e)` | `e`            | `Err(d)`        | `Err(d)` |\n//! | [`or_else`]  | `Err(e)` | `e`            | `Ok(y)`         | `Ok(y)`  |\n//! | [`or_else`]  | `Ok(x)`  | (not provided) | (not evaluated) | `Ok(x)`  |\n//!\n//! [`and_then`]: Result::and_then\n//! [`or_else`]: Result::or_else\n//!\n//! ## Comparison operators\n//!\n//! If `T` and `E` both implement [`PartialOrd`] then [`Result<T, E>`] will\n//! derive its [`PartialOrd`] implementation.  With this order, an [`Ok`]\n//! compares as less than any [`Err`], while two [`Ok`] or two [`Err`]\n//! compare as their contained values would in `T` or `E` respectively.  If `T`\n//! and `E` both also implement [`Ord`], then so does [`Result<T, E>`].\n//!\n//! ```\n//! assert!(Ok(1) < Err(0));\n//! let x: Result<i32, ()> = Ok(0);\n//! let y = Ok(1);\n//! assert!(x < y);\n//! let x: Result<(), i32> = Err(0);\n//! let y = Err(1);\n//! assert!(x < y);\n//! ```\n//!\n//! ## Iterating over `Result`\n//!\n//! A [`Result`] can be iterated over. This can be helpful if you need an\n//! iterator that is conditionally empty. The iterator will either produce\n//! a single value (when the [`Result`] is [`Ok`]), or produce no values\n//! (when the [`Result`] is [`Err`]). For example, [`into_iter`] acts like\n//! [`once(v)`] if the [`Result`] is [`Ok(v)`], and like [`empty()`] if the\n//! [`Result`] is [`Err`].\n//!\n//! [`Ok(v)`]: Ok\n//! [`empty()`]: crate::iter::empty\n//! [`once(v)`]: crate::iter::once\n//!\n//! Iterators over [`Result<T, E>`] come in three types:\n//!\n//! * [`into_iter`] consumes the [`Result`] and produces the contained\n//!   value\n//! * [`iter`] produces an immutable reference of type `&T` to the\n//!   contained value\n//! * [`iter_mut`] produces a mutable reference of type `&mut T` to the\n//!   contained value\n//!\n//! See [Iterating over `Option`] for examples of how this can be useful.\n//!\n//! [Iterating over `Option`]: crate::option#iterating-over-option\n//! [`into_iter`]: Result::into_iter\n//! [`iter`]: Result::iter\n//! [`iter_mut`]: Result::iter_mut\n//!\n//! You might want to use an iterator chain to do multiple instances of an\n//! operation that can fail, but would like to ignore failures while\n//! continuing to process the successful results. In this example, we take\n//! advantage of the iterable nature of [`Result`] to select only the\n//! [`Ok`] values using [`flatten`][Iterator::flatten].\n//!\n//! ```\n//! # use std::str::FromStr;\n//! let mut results = vec![];\n//! let mut errs = vec![];\n//! let nums: Vec<_> = [\"17\", \"not a number\", \"99\", \"-27\", \"768\"]\n//!    .into_iter()\n//!    .map(u8::from_str)\n//!    // Save clones of the raw `Result` values to inspect\n//!    .inspect(|x| results.push(x.clone()))\n//!    // Challenge: explain how this captures only the `Err` values\n//!    .inspect(|x| errs.extend(x.clone().err()))\n//!    .flatten()\n//!    .collect();\n//! assert_eq!(errs.len(), 3);\n//! assert_eq!(nums, [17, 99]);\n//! println!(\"results {results:?}\");\n//! println!(\"errs {errs:?}\");\n//! println!(\"nums {nums:?}\");\n//! ```\n//!\n//! ## Collecting into `Result`\n//!\n//! [`Result`] implements the [`FromIterator`][impl-FromIterator] trait,\n//! which allows an iterator over [`Result`] values to be collected into a\n//! [`Result`] of a collection of each contained value of the original\n//! [`Result`] values, or [`Err`] if any of the elements was [`Err`].\n//!\n//! [impl-FromIterator]: Result#impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\n//!\n//! ```\n//! let v = [Ok(2), Ok(4), Err(\"err!\"), Ok(8)];\n//! let res: Result<Vec<_>, &str> = v.into_iter().collect();\n//! assert_eq!(res, Err(\"err!\"));\n//! let v = [Ok(2), Ok(4), Ok(8)];\n//! let res: Result<Vec<_>, &str> = v.into_iter().collect();\n//! assert_eq!(res, Ok(vec![2, 4, 8]));\n//! ```\n//!\n//! [`Result`] also implements the [`Product`][impl-Product] and\n//! [`Sum`][impl-Sum] traits, allowing an iterator over [`Result`] values\n//! to provide the [`product`][Iterator::product] and\n//! [`sum`][Iterator::sum] methods.\n//!\n//! [impl-Product]: Result#impl-Product%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\n//! [impl-Sum]: Result#impl-Sum%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\n//!\n//! ```\n//! let v = [Err(\"error!\"), Ok(1), Ok(2), Ok(3), Err(\"foo\")];\n//! let res: Result<i32, &str> = v.into_iter().sum();\n//! assert_eq!(res, Err(\"error!\"));\n//! let v = [Ok(1), Ok(2), Ok(21)];\n//! let res: Result<i32, &str> = v.into_iter().product();\n//! assert_eq!(res, Ok(42));\n//! ```\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::iter::{self, FusedIterator, TrustedLen};\nuse crate::ops::{self, ControlFlow, Deref, DerefMut};\nuse crate::{convert, fmt, hint};\n\n/// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n///\n/// See the [module documentation](self) for details.\n#[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n#[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n#[rustc_diagnostic_item = \"Result\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub enum Result<T, E> {\n    /// Contains the success value\n    #[lang = \"Ok\"]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n\n    /// Contains the error value\n    #[lang = \"Err\"]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Type implementation\n/////////////////////////////////////////////////////////////////////////////\n\nimpl<T, E> Result<T, E> {\n    /////////////////////////////////////////////////////////////////////////\n    // Querying the contained values\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Returns `true` if the result is [`Ok`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<i32, &str> = Ok(-3);\n    /// assert_eq!(x.is_ok(), true);\n    ///\n    /// let x: Result<i32, &str> = Err(\"Some error message\");\n    /// assert_eq!(x.is_ok(), false);\n    /// ```\n    #[must_use = \"if you intended to assert that this is ok, consider `.unwrap()` instead\"]\n    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub const fn is_ok(&self) -> bool {\n        matches!(*self, Ok(_))\n    }\n\n    /// Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.is_ok_and(|x| x > 1), true);\n    ///\n    /// let x: Result<u32, &str> = Ok(0);\n    /// assert_eq!(x.is_ok_and(|x| x > 1), false);\n    ///\n    /// let x: Result<u32, &str> = Err(\"hey\");\n    /// assert_eq!(x.is_ok_and(|x| x > 1), false);\n    /// ```\n    #[must_use]\n    #[inline]\n    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n    pub fn is_ok_and(self, f: impl FnOnce(T) -> bool) -> bool {\n        match self {\n            Err(_) => false,\n            Ok(x) => f(x),\n        }\n    }\n\n    /// Returns `true` if the result is [`Err`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<i32, &str> = Ok(-3);\n    /// assert_eq!(x.is_err(), false);\n    ///\n    /// let x: Result<i32, &str> = Err(\"Some error message\");\n    /// assert_eq!(x.is_err(), true);\n    /// ```\n    #[must_use = \"if you intended to assert that this is err, consider `.unwrap_err()` instead\"]\n    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub const fn is_err(&self) -> bool {\n        !self.is_ok()\n    }\n\n    /// Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{Error, ErrorKind};\n    ///\n    /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::NotFound, \"!\"));\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);\n    ///\n    /// let x: Result<u32, Error> = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n    ///\n    /// let x: Result<u32, Error> = Ok(123);\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n    /// ```\n    #[must_use]\n    #[inline]\n    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n    pub fn is_err_and(self, f: impl FnOnce(E) -> bool) -> bool {\n        match self {\n            Ok(_) => false,\n            Err(e) => f(e),\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // Adapter for each variant\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Converts from `Result<T, E>` to [`Option<T>`].\n    ///\n    /// Converts `self` into an [`Option<T>`], consuming `self`,\n    /// and discarding the error, if any.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.ok(), Some(2));\n    ///\n    /// let x: Result<u32, &str> = Err(\"Nothing here\");\n    /// assert_eq!(x.ok(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn ok(self) -> Option<T> {\n        match self {\n            Ok(x) => Some(x),\n            Err(_) => None,\n        }\n    }\n\n    /// Converts from `Result<T, E>` to [`Option<E>`].\n    ///\n    /// Converts `self` into an [`Option<E>`], consuming `self`,\n    /// and discarding the success value, if any.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.err(), None);\n    ///\n    /// let x: Result<u32, &str> = Err(\"Nothing here\");\n    /// assert_eq!(x.err(), Some(\"Nothing here\"));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn err(self) -> Option<E> {\n        match self {\n            Ok(_) => None,\n            Err(x) => Some(x),\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // Adapter for working with references\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Converts from `&Result<T, E>` to `Result<&T, &E>`.\n    ///\n    /// Produces a new `Result`, containing a reference\n    /// into the original, leaving the original in place.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.as_ref(), Ok(&2));\n    ///\n    /// let x: Result<u32, &str> = Err(\"Error\");\n    /// assert_eq!(x.as_ref(), Err(&\"Error\"));\n    /// ```\n    #[inline]\n    #[rustc_const_stable(feature = \"const_result_basics\", since = \"1.48.0\")]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub const fn as_ref(&self) -> Result<&T, &E> {\n        match *self {\n            Ok(ref x) => Ok(x),\n            Err(ref x) => Err(x),\n        }\n    }\n\n    /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn mutate(r: &mut Result<i32, i32>) {\n    ///     match r.as_mut() {\n    ///         Ok(v) => *v = 42,\n    ///         Err(e) => *e = 0,\n    ///     }\n    /// }\n    ///\n    /// let mut x: Result<i32, i32> = Ok(2);\n    /// mutate(&mut x);\n    /// assert_eq!(x.unwrap(), 42);\n    ///\n    /// let mut x: Result<i32, i32> = Err(13);\n    /// mutate(&mut x);\n    /// assert_eq!(x.unwrap_err(), 0);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_const_unstable(feature = \"const_result\", issue = \"82814\")]\n    pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {\n        match *self {\n            Ok(ref mut x) => Ok(x),\n            Err(ref mut x) => Err(x),\n        }\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // Transforming contained values\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\n    /// contained [`Ok`] value, leaving an [`Err`] value untouched.\n    ///\n    /// This function can be used to compose the results of two functions.\n    ///\n    /// # Examples\n    ///\n    /// Print the numbers on each line of a string multiplied by two.\n    ///\n    /// ```\n    /// let line = \"1\\n2\\n3\\n4\\n\";\n    ///\n    /// for num in line.lines() {\n    ///     match num.parse::<i32>().map(|i| i * 2) {\n    ///         Ok(n) => println!(\"{n}\"),\n    ///         Err(..) => {}\n    ///     }\n    /// }\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {\n        match self {\n            Ok(t) => Ok(op(t)),\n            Err(e) => Err(e),\n        }\n    }\n\n    /// Returns the provided default (if [`Err`]), or\n    /// applies a function to the contained value (if [`Ok`]).\n    ///\n    /// Arguments passed to `map_or` are eagerly evaluated; if you are passing\n    /// the result of a function call, it is recommended to use [`map_or_else`],\n    /// which is lazily evaluated.\n    ///\n    /// [`map_or_else`]: Result::map_or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<_, &str> = Ok(\"foo\");\n    /// assert_eq!(x.map_or(42, |v| v.len()), 3);\n    ///\n    /// let x: Result<&str, _> = Err(\"bar\");\n    /// assert_eq!(x.map_or(42, |v| v.len()), 42);\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_map_or\", since = \"1.41.0\")]\n    #[must_use = \"if you don't need the returned value, use `if let` instead\"]\n    pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {\n        match self {\n            Ok(t) => f(t),\n            Err(_) => default,\n        }\n    }\n\n    /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to\n    /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.\n    ///\n    /// This function can be used to unpack a successful result\n    /// while handling an error.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let k = 21;\n    ///\n    /// let x : Result<_, &str> = Ok(\"foo\");\n    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 3);\n    ///\n    /// let x : Result<&str, _> = Err(\"bar\");\n    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 42);\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_map_or_else\", since = \"1.41.0\")]\n    pub fn map_or_else<U, D: FnOnce(E) -> U, F: FnOnce(T) -> U>(self, default: D, f: F) -> U {\n        match self {\n            Ok(t) => f(t),\n            Err(e) => default(e),\n        }\n    }\n\n    /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\n    /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n    ///\n    /// This function can be used to pass through a successful result while handling\n    /// an error.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn stringify(x: u32) -> String { format!(\"error code: {x}\") }\n    ///\n    /// let x: Result<u32, u32> = Ok(2);\n    /// assert_eq!(x.map_err(stringify), Ok(2));\n    ///\n    /// let x: Result<u32, u32> = Err(13);\n    /// assert_eq!(x.map_err(stringify), Err(\"error code: 13\".to_string()));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {\n        match self {\n            Ok(t) => Ok(t),\n            Err(e) => Err(op(e)),\n        }\n    }\n\n    /// Calls a function with a reference to the contained value if [`Ok`].\n    ///\n    /// Returns the original result.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: u8 = \"4\"\n    ///     .parse::<u8>()\n    ///     .inspect(|x| println!(\"original: {x}\"))\n    ///     .map(|x| x.pow(3))\n    ///     .expect(\"failed to parse number\");\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_option_inspect\", since = \"1.76.0\")]\n    pub fn inspect<F: FnOnce(&T)>(self, f: F) -> Self {\n        if let Ok(ref t) = self {\n            f(t);\n        }\n\n        self\n    }\n\n    /// Calls a function with a reference to the contained value if [`Err`].\n    ///\n    /// Returns the original result.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::{fs, io};\n    ///\n    /// fn read() -> io::Result<String> {\n    ///     fs::read_to_string(\"address.txt\")\n    ///         .inspect_err(|e| eprintln!(\"failed to read file: {e}\"))\n    /// }\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_option_inspect\", since = \"1.76.0\")]\n    pub fn inspect_err<F: FnOnce(&E)>(self, f: F) -> Self {\n        if let Err(ref e) = self {\n            f(e);\n        }\n\n        self\n    }\n\n    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n    ///\n    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n    /// and returns the new [`Result`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n    /// let y: Result<&str, &u32> = Ok(\"hello\");\n    /// assert_eq!(x.as_deref(), y);\n    ///\n    /// let x: Result<String, u32> = Err(42);\n    /// let y: Result<&str, &u32> = Err(&42);\n    /// assert_eq!(x.as_deref(), y);\n    /// ```\n    #[inline]\n    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n    pub fn as_deref(&self) -> Result<&T::Target, &E>\n    where\n        T: Deref,\n    {\n        self.as_ref().map(|t| t.deref())\n    }\n\n    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.\n    ///\n    /// Coerces the [`Ok`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n    /// and returns the new [`Result`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut s = \"HELLO\".to_string();\n    /// let mut x: Result<String, u32> = Ok(\"hello\".to_string());\n    /// let y: Result<&mut str, &mut u32> = Ok(&mut s);\n    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n    ///\n    /// let mut i = 42;\n    /// let mut x: Result<String, u32> = Err(42);\n    /// let y: Result<&mut str, &mut u32> = Err(&mut i);\n    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n    /// ```\n    #[inline]\n    #[stable(feature = \"inner_deref\", since = \"1.47.0\")]\n    pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E>\n    where\n        T: DerefMut,\n    {\n        self.as_mut().map(|t| t.deref_mut())\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // Iterator constructors\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Returns an iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(7);\n    /// assert_eq!(x.iter().next(), Some(&7));\n    ///\n    /// let x: Result<u32, &str> = Err(\"nothing!\");\n    /// assert_eq!(x.iter().next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn iter(&self) -> Iter<'_, T> {\n        Iter { inner: self.as_ref().ok() }\n    }\n\n    /// Returns a mutable iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut x: Result<u32, &str> = Ok(7);\n    /// match x.iter_mut().next() {\n    ///     Some(v) => *v = 40,\n    ///     None => {},\n    /// }\n    /// assert_eq!(x, Ok(40));\n    ///\n    /// let mut x: Result<u32, &str> = Err(\"nothing!\");\n    /// assert_eq!(x.iter_mut().next(), None);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n        IterMut { inner: self.as_mut().ok() }\n    }\n\n    /////////////////////////////////////////////////////////////////////////\n    // Extract a value\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Returns the contained [`Ok`] value, consuming the `self` value.\n    ///\n    /// Because this function may panic, its use is generally discouraged.\n    /// Instead, prefer to use pattern matching and handle the [`Err`]\n    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n    /// [`unwrap_or_default`].\n    ///\n    /// [`unwrap_or`]: Result::unwrap_or\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    /// [`unwrap_or_default`]: Result::unwrap_or_default\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Err`], with a panic message including the\n    /// passed message, and the content of the [`Err`].\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n    /// ```\n    ///\n    /// # Recommended Message Style\n    ///\n    /// We recommend that `expect` messages are used to describe the reason you\n    /// _expect_ the `Result` should be `Ok`.\n    ///\n    /// ```should_panic\n    /// let path = std::env::var(\"IMPORTANT_PATH\")\n    ///     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n    /// ```\n    ///\n    /// **Hint**: If you're having trouble remembering how to phrase expect\n    /// error messages remember to focus on the word \"should\" as in \"env\n    /// variable should be set by blah\" or \"the given binary should be available\n    /// and executable by the current user\".\n    ///\n    /// For more detail on expect message styles and the reasoning behind our recommendation please\n    /// refer to the section on [\"Common Message\n    /// Styles\"](../../std/error/index.html#common-message-styles) in the\n    /// [`std::error`](../../std/error/index.html) module docs.\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n    pub fn expect(self, msg: &str) -> T\n    where\n        E: fmt::Debug,\n    {\n        match self {\n            Ok(t) => t,\n            Err(e) => unwrap_failed(msg, &e),\n        }\n    }\n\n    /// Returns the contained [`Ok`] value, consuming the `self` value.\n    ///\n    /// Because this function may panic, its use is generally discouraged.\n    /// Instead, prefer to use pattern matching and handle the [`Err`]\n    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n    /// [`unwrap_or_default`].\n    ///\n    /// [`unwrap_or`]: Result::unwrap_or\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    /// [`unwrap_or_default`]: Result::unwrap_or_default\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Err`], with a panic message provided by the\n    /// [`Err`]'s value.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.unwrap(), 2);\n    /// ```\n    ///\n    /// ```should_panic\n    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n    /// x.unwrap(); // panics with `emergency failure`\n    /// ```\n    #[inline(always)]\n    #[track_caller]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn unwrap(self) -> T\n    where\n        E: fmt::Debug,\n    {\n        match self {\n            Ok(t) => t,\n            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n        }\n    }\n\n    /// Returns the contained [`Ok`] value or a default\n    ///\n    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n    /// value, otherwise if [`Err`], returns the default value for that\n    /// type.\n    ///\n    /// # Examples\n    ///\n    /// Converts a string to an integer, turning poorly-formed strings\n    /// into 0 (the default value for integers). [`parse`] converts\n    /// a string to any other type that implements [`FromStr`], returning an\n    /// [`Err`] on error.\n    ///\n    /// ```\n    /// let good_year_from_input = \"1909\";\n    /// let bad_year_from_input = \"190blarg\";\n    /// let good_year = good_year_from_input.parse().unwrap_or_default();\n    /// let bad_year = bad_year_from_input.parse().unwrap_or_default();\n    ///\n    /// assert_eq!(1909, good_year);\n    /// assert_eq!(0, bad_year);\n    /// ```\n    ///\n    /// [`parse`]: str::parse\n    /// [`FromStr`]: crate::str::FromStr\n    #[inline]\n    #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n    pub fn unwrap_or_default(self) -> T\n    where\n        T: Default,\n    {\n        match self {\n            Ok(x) => x,\n            Err(_) => Default::default(),\n        }\n    }\n\n    /// Returns the contained [`Err`] value, consuming the `self` value.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Ok`], with a panic message including the\n    /// passed message, and the content of the [`Ok`].\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result<u32, &str> = Ok(10);\n    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n    /// ```\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n    pub fn expect_err(self, msg: &str) -> E\n    where\n        T: fmt::Debug,\n    {\n        match self {\n            Ok(t) => unwrap_failed(msg, &t),\n            Err(e) => e,\n        }\n    }\n\n    /// Returns the contained [`Err`] value, consuming the `self` value.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Ok`], with a custom panic message provided\n    /// by the [`Ok`]'s value.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result<u32, &str> = Ok(2);\n    /// x.unwrap_err(); // panics with `2`\n    /// ```\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n    /// ```\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn unwrap_err(self) -> E\n    where\n        T: fmt::Debug,\n    {\n        match self {\n            Ok(t) => unwrap_failed(\"called `Result::unwrap_err()` on an `Ok` value\", &t),\n            Err(e) => e,\n        }\n    }\n\n    /// Returns the contained [`Ok`] value, but never panics.\n    ///\n    /// Unlike [`unwrap`], this method is known to never panic on the\n    /// result types it is implemented for. Therefore, it can be used\n    /// instead of `unwrap` as a maintainability safeguard that will fail\n    /// to compile if the error type of the `Result` is later changed\n    /// to an error that can actually occur.\n    ///\n    /// [`unwrap`]: Result::unwrap\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![feature(never_type)]\n    /// # #![feature(unwrap_infallible)]\n    ///\n    /// fn only_good_news() -> Result<String, !> {\n    ///     Ok(\"this is fine\".into())\n    /// }\n    ///\n    /// let s: String = only_good_news().into_ok();\n    /// println!(\"{s}\");\n    /// ```\n    #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n    #[inline]\n    pub fn into_ok(self) -> T\n    where\n        E: Into<!>,\n    {\n        match self {\n            Ok(x) => x,\n            Err(e) => e.into(),\n        }\n    }\n\n    /// Returns the contained [`Err`] value, but never panics.\n    ///\n    /// Unlike [`unwrap_err`], this method is known to never panic on the\n    /// result types it is implemented for. Therefore, it can be used\n    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n    /// to compile if the ok type of the `Result` is later changed\n    /// to a type that can actually occur.\n    ///\n    /// [`unwrap_err`]: Result::unwrap_err\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![feature(never_type)]\n    /// # #![feature(unwrap_infallible)]\n    ///\n    /// fn only_bad_news() -> Result<!, String> {\n    ///     Err(\"Oops, it failed\".into())\n    /// }\n    ///\n    /// let error: String = only_bad_news().into_err();\n    /// println!(\"{error}\");\n    /// ```\n    #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n    #[inline]\n    pub fn into_err(self) -> E\n    where\n        T: Into<!>,\n    {\n        match self {\n            Ok(x) => x.into(),\n            Err(e) => e,\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////\n    // Boolean operations on the values, eager and lazy\n    /////////////////////////////////////////////////////////////////////////\n\n    /// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n    ///\n    /// Arguments passed to `and` are eagerly evaluated; if you are passing the\n    /// result of a function call, it is recommended to use [`and_then`], which is\n    /// lazily evaluated.\n    ///\n    /// [`and_then`]: Result::and_then\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// let y: Result<&str, &str> = Err(\"late error\");\n    /// assert_eq!(x.and(y), Err(\"late error\"));\n    ///\n    /// let x: Result<u32, &str> = Err(\"early error\");\n    /// let y: Result<&str, &str> = Ok(\"foo\");\n    /// assert_eq!(x.and(y), Err(\"early error\"));\n    ///\n    /// let x: Result<u32, &str> = Err(\"not a 2\");\n    /// let y: Result<&str, &str> = Err(\"late error\");\n    /// assert_eq!(x.and(y), Err(\"not a 2\"));\n    ///\n    /// let x: Result<u32, &str> = Ok(2);\n    /// let y: Result<&str, &str> = Ok(\"different result type\");\n    /// assert_eq!(x.and(y), Ok(\"different result type\"));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn and<U>(self, res: Result<U, E>) -> Result<U, E> {\n        match self {\n            Ok(_) => res,\n            Err(e) => Err(e),\n        }\n    }\n\n    /// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n    ///\n    ///\n    /// This function can be used for control flow based on `Result` values.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn sq_then_to_string(x: u32) -> Result<String, &'static str> {\n    ///     x.checked_mul(x).map(|sq| sq.to_string()).ok_or(\"overflowed\")\n    /// }\n    ///\n    /// assert_eq!(Ok(2).and_then(sq_then_to_string), Ok(4.to_string()));\n    /// assert_eq!(Ok(1_000_000).and_then(sq_then_to_string), Err(\"overflowed\"));\n    /// assert_eq!(Err(\"not a number\").and_then(sq_then_to_string), Err(\"not a number\"));\n    /// ```\n    ///\n    /// Often used to chain fallible operations that may return [`Err`].\n    ///\n    /// ```\n    /// use std::{io::ErrorKind, path::Path};\n    ///\n    /// // Note: on Windows \"/\" maps to \"C:\\\"\n    /// let root_modified_time = Path::new(\"/\").metadata().and_then(|md| md.modified());\n    /// assert!(root_modified_time.is_ok());\n    ///\n    /// let should_fail = Path::new(\"/bad/path\").metadata().and_then(|md| md.modified());\n    /// assert!(should_fail.is_err());\n    /// assert_eq!(should_fail.unwrap_err().kind(), ErrorKind::NotFound);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_confusables(\"flat_map\", \"flatmap\")]\n    pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {\n        match self {\n            Ok(t) => op(t),\n            Err(e) => Err(e),\n        }\n    }\n\n    /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n    ///\n    /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n    /// result of a function call, it is recommended to use [`or_else`], which is\n    /// lazily evaluated.\n    ///\n    /// [`or_else`]: Result::or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// let y: Result<u32, &str> = Err(\"late error\");\n    /// assert_eq!(x.or(y), Ok(2));\n    ///\n    /// let x: Result<u32, &str> = Err(\"early error\");\n    /// let y: Result<u32, &str> = Ok(2);\n    /// assert_eq!(x.or(y), Ok(2));\n    ///\n    /// let x: Result<u32, &str> = Err(\"not a 2\");\n    /// let y: Result<u32, &str> = Err(\"late error\");\n    /// assert_eq!(x.or(y), Err(\"late error\"));\n    ///\n    /// let x: Result<u32, &str> = Ok(2);\n    /// let y: Result<u32, &str> = Ok(100);\n    /// assert_eq!(x.or(y), Ok(2));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn or<F>(self, res: Result<T, F>) -> Result<T, F> {\n        match self {\n            Ok(v) => Ok(v),\n            Err(_) => res,\n        }\n    }\n\n    /// Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n    ///\n    /// This function can be used for control flow based on result values.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn sq(x: u32) -> Result<u32, u32> { Ok(x * x) }\n    /// fn err(x: u32) -> Result<u32, u32> { Err(x) }\n    ///\n    /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));\n    /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));\n    /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));\n    /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {\n        match self {\n            Ok(t) => Ok(t),\n            Err(e) => op(e),\n        }\n    }\n\n    /// Returns the contained [`Ok`] value or a provided default.\n    ///\n    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n    /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n    /// which is lazily evaluated.\n    ///\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let default = 2;\n    /// let x: Result<u32, &str> = Ok(9);\n    /// assert_eq!(x.unwrap_or(default), 9);\n    ///\n    /// let x: Result<u32, &str> = Err(\"error\");\n    /// assert_eq!(x.unwrap_or(default), default);\n    /// ```\n    #[inline]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn unwrap_or(self, default: T) -> T {\n        match self {\n            Ok(t) => t,\n            Err(_) => default,\n        }\n    }\n\n    /// Returns the contained [`Ok`] value or computes it from a closure.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn count(x: &str) -> usize { x.len() }\n    ///\n    /// assert_eq!(Ok(2).unwrap_or_else(count), 2);\n    /// assert_eq!(Err(\"foo\").unwrap_or_else(count), 3);\n    /// ```\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {\n        match self {\n            Ok(t) => t,\n            Err(e) => op(e),\n        }\n    }\n\n    /// Returns the contained [`Ok`] value, consuming the `self` value,\n    /// without checking that the value is not an [`Err`].\n    ///\n    /// # Safety\n    ///\n    /// Calling this method on an [`Err`] is *[undefined behavior]*.\n    ///\n    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(2);\n    /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n    /// ```\n    ///\n    /// ```no_run\n    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n    /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n    /// ```\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n    pub unsafe fn unwrap_unchecked(self) -> T {\n        debug_assert!(self.is_ok());\n        match self {\n            Ok(t) => t,\n            // SAFETY: the safety contract must be upheld by the caller.\n            Err(_) => unsafe { hint::unreachable_unchecked() },\n        }\n    }\n\n    /// Returns the contained [`Err`] value, consuming the `self` value,\n    /// without checking that the value is not an [`Ok`].\n    ///\n    /// # Safety\n    ///\n    /// Calling this method on an [`Ok`] is *[undefined behavior]*.\n    ///\n    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// let x: Result<u32, &str> = Ok(2);\n    /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n    /// ```\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n    /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n    /// ```\n    #[inline]\n    #[track_caller]\n    #[stable(feature = \"option_result_unwrap_unchecked\", since = \"1.58.0\")]\n    pub unsafe fn unwrap_err_unchecked(self) -> E {\n        debug_assert!(self.is_err());\n        match self {\n            // SAFETY: the safety contract must be upheld by the caller.\n            Ok(_) => unsafe { hint::unreachable_unchecked() },\n            Err(e) => e,\n        }\n    }\n}\n\nimpl<T, E> Result<&T, E> {\n    /// Maps a `Result<&T, E>` to a `Result<T, E>` by copying the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let val = 12;\n    /// let x: Result<&i32, i32> = Ok(&val);\n    /// assert_eq!(x, Ok(&12));\n    /// let copied = x.copied();\n    /// assert_eq!(copied, Ok(12));\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_copied\", since = \"1.59.0\")]\n    pub fn copied(self) -> Result<T, E>\n    where\n        T: Copy,\n    {\n        self.map(|&t| t)\n    }\n\n    /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let val = 12;\n    /// let x: Result<&i32, i32> = Ok(&val);\n    /// assert_eq!(x, Ok(&12));\n    /// let cloned = x.cloned();\n    /// assert_eq!(cloned, Ok(12));\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_cloned\", since = \"1.59.0\")]\n    pub fn cloned(self) -> Result<T, E>\n    where\n        T: Clone,\n    {\n        self.map(|t| t.clone())\n    }\n}\n\nimpl<T, E> Result<&mut T, E> {\n    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut val = 12;\n    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n    /// assert_eq!(x, Ok(&mut 12));\n    /// let copied = x.copied();\n    /// assert_eq!(copied, Ok(12));\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_copied\", since = \"1.59.0\")]\n    pub fn copied(self) -> Result<T, E>\n    where\n        T: Copy,\n    {\n        self.map(|&mut t| t)\n    }\n\n    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut val = 12;\n    /// let x: Result<&mut i32, i32> = Ok(&mut val);\n    /// assert_eq!(x, Ok(&mut 12));\n    /// let cloned = x.cloned();\n    /// assert_eq!(cloned, Ok(12));\n    /// ```\n    #[inline]\n    #[stable(feature = \"result_cloned\", since = \"1.59.0\")]\n    pub fn cloned(self) -> Result<T, E>\n    where\n        T: Clone,\n    {\n        self.map(|t| t.clone())\n    }\n}\n\nimpl<T, E> Result<Option<T>, E> {\n    /// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n    ///\n    /// `Ok(None)` will be mapped to `None`.\n    /// `Ok(Some(_))` and `Err(_)` will be mapped to `Some(Ok(_))` and `Some(Err(_))`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #[derive(Debug, Eq, PartialEq)]\n    /// struct SomeErr;\n    ///\n    /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));\n    /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));\n    /// assert_eq!(x.transpose(), y);\n    /// ```\n    #[inline]\n    #[stable(feature = \"transpose_result\", since = \"1.33.0\")]\n    #[rustc_const_unstable(feature = \"const_result\", issue = \"82814\")]\n    pub const fn transpose(self) -> Option<Result<T, E>> {\n        match self {\n            Ok(Some(x)) => Some(Ok(x)),\n            Ok(None) => None,\n            Err(e) => Some(Err(e)),\n        }\n    }\n}\n\nimpl<T, E> Result<Result<T, E>, E> {\n    /// Converts from `Result<Result<T, E>, E>` to `Result<T, E>`\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(result_flattening)]\n    /// let x: Result<Result<&'static str, u32>, u32> = Ok(Ok(\"hello\"));\n    /// assert_eq!(Ok(\"hello\"), x.flatten());\n    ///\n    /// let x: Result<Result<&'static str, u32>, u32> = Ok(Err(6));\n    /// assert_eq!(Err(6), x.flatten());\n    ///\n    /// let x: Result<Result<&'static str, u32>, u32> = Err(6);\n    /// assert_eq!(Err(6), x.flatten());\n    /// ```\n    ///\n    /// Flattening only removes one level of nesting at a time:\n    ///\n    /// ```\n    /// #![feature(result_flattening)]\n    /// let x: Result<Result<Result<&'static str, u32>, u32>, u32> = Ok(Ok(Ok(\"hello\")));\n    /// assert_eq!(Ok(Ok(\"hello\")), x.flatten());\n    /// assert_eq!(Ok(\"hello\"), x.flatten().flatten());\n    /// ```\n    #[inline]\n    #[unstable(feature = \"result_flattening\", issue = \"70142\")]\n    pub fn flatten(self) -> Result<T, E> {\n        self.and_then(convert::identity)\n    }\n}\n\n// This is a separate function to reduce the code size of the methods\n#[cfg(not(feature = \"panic_immediate_abort\"))]\n#[inline(never)]\n#[cold]\n#[track_caller]\nfn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n    panic!(\"{msg}: {error:?}\")\n}\n\n// This is a separate function to avoid constructing a `dyn Debug`\n// that gets immediately thrown away, since vtables don't get cleaned up\n// by dead code elimination if a trait object is constructed even if it goes\n// unused\n#[cfg(feature = \"panic_immediate_abort\")]\n#[inline]\n#[cold]\n#[track_caller]\nfn unwrap_failed<T>(_msg: &str, _error: &T) -> ! {\n    panic!()\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Trait implementations\n/////////////////////////////////////////////////////////////////////////////\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, E> Clone for Result<T, E>\nwhere\n    T: Clone,\n    E: Clone,\n{\n    #[inline]\n    fn clone(&self) -> Self {\n        match self {\n            Ok(x) => Ok(x.clone()),\n            Err(x) => Err(x.clone()),\n        }\n    }\n\n    #[inline]\n    fn clone_from(&mut self, source: &Self) {\n        match (self, source) {\n            (Ok(to), Ok(from)) => to.clone_from(from),\n            (Err(to), Err(from)) => to.clone_from(from),\n            (to, from) => *to = from.clone(),\n        }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, E> IntoIterator for Result<T, E> {\n    type Item = T;\n    type IntoIter = IntoIter<T>;\n\n    /// Returns a consuming iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result<u32, &str> = Ok(5);\n    /// let v: Vec<u32> = x.into_iter().collect();\n    /// assert_eq!(v, [5]);\n    ///\n    /// let x: Result<u32, &str> = Err(\"nothing!\");\n    /// let v: Vec<u32> = x.into_iter().collect();\n    /// assert_eq!(v, []);\n    /// ```\n    #[inline]\n    fn into_iter(self) -> IntoIter<T> {\n        IntoIter { inner: self.ok() }\n    }\n}\n\n#[stable(since = \"1.4.0\", feature = \"result_iter\")]\nimpl<'a, T, E> IntoIterator for &'a Result<T, E> {\n    type Item = &'a T;\n    type IntoIter = Iter<'a, T>;\n\n    fn into_iter(self) -> Iter<'a, T> {\n        self.iter()\n    }\n}\n\n#[stable(since = \"1.4.0\", feature = \"result_iter\")]\nimpl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n    type Item = &'a mut T;\n    type IntoIter = IterMut<'a, T>;\n\n    fn into_iter(self) -> IterMut<'a, T> {\n        self.iter_mut()\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// The Result Iterators\n/////////////////////////////////////////////////////////////////////////////\n\n/// An iterator over a reference to the [`Ok`] variant of a [`Result`].\n///\n/// The iterator yields one value if the result is [`Ok`], otherwise none.\n///\n/// Created by [`Result::iter`].\n#[derive(Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct Iter<'a, T: 'a> {\n    inner: Option<&'a T>,\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T> Iterator for Iter<'a, T> {\n    type Item = &'a T;\n\n    #[inline]\n    fn next(&mut self) -> Option<&'a T> {\n        self.inner.take()\n    }\n    #[inline]\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let n = if self.inner.is_some() { 1 } else { 0 };\n        (n, Some(n))\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n    #[inline]\n    fn next_back(&mut self) -> Option<&'a T> {\n        self.inner.take()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> ExactSizeIterator for Iter<'_, T> {}\n\n#[stable(feature = \"fused\", since = \"1.26.0\")]\nimpl<T> FusedIterator for Iter<'_, T> {}\n\n#[unstable(feature = \"trusted_len\", issue = \"37572\")]\nunsafe impl<A> TrustedLen for Iter<'_, A> {}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> Clone for Iter<'_, T> {\n    #[inline]\n    fn clone(&self) -> Self {\n        Iter { inner: self.inner }\n    }\n}\n\n/// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n///\n/// Created by [`Result::iter_mut`].\n#[derive(Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct IterMut<'a, T: 'a> {\n    inner: Option<&'a mut T>,\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n\n    #[inline]\n    fn next(&mut self) -> Option<&'a mut T> {\n        self.inner.take()\n    }\n    #[inline]\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let n = if self.inner.is_some() { 1 } else { 0 };\n        (n, Some(n))\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n    #[inline]\n    fn next_back(&mut self) -> Option<&'a mut T> {\n        self.inner.take()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> ExactSizeIterator for IterMut<'_, T> {}\n\n#[stable(feature = \"fused\", since = \"1.26.0\")]\nimpl<T> FusedIterator for IterMut<'_, T> {}\n\n#[unstable(feature = \"trusted_len\", issue = \"37572\")]\nunsafe impl<A> TrustedLen for IterMut<'_, A> {}\n\n/// An iterator over the value in a [`Ok`] variant of a [`Result`].\n///\n/// The iterator yields one value if the result is [`Ok`], otherwise none.\n///\n/// This struct is created by the [`into_iter`] method on\n/// [`Result`] (provided by the [`IntoIterator`] trait).\n///\n/// [`into_iter`]: IntoIterator::into_iter\n#[derive(Clone, Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct IntoIter<T> {\n    inner: Option<T>,\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> Iterator for IntoIter<T> {\n    type Item = T;\n\n    #[inline]\n    fn next(&mut self) -> Option<T> {\n        self.inner.take()\n    }\n    #[inline]\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let n = if self.inner.is_some() { 1 } else { 0 };\n        (n, Some(n))\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> DoubleEndedIterator for IntoIter<T> {\n    #[inline]\n    fn next_back(&mut self) -> Option<T> {\n        self.inner.take()\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> ExactSizeIterator for IntoIter<T> {}\n\n#[stable(feature = \"fused\", since = \"1.26.0\")]\nimpl<T> FusedIterator for IntoIter<T> {}\n\n#[unstable(feature = \"trusted_len\", issue = \"37572\")]\nunsafe impl<A> TrustedLen for IntoIter<A> {}\n\n/////////////////////////////////////////////////////////////////////////////\n// FromIterator\n/////////////////////////////////////////////////////////////////////////////\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n    /// Takes each element in the `Iterator`: if it is an `Err`, no further\n    /// elements are taken, and the `Err` is returned. Should no `Err` occur, a\n    /// container with the values of each `Result` is returned.\n    ///\n    /// Here is an example which increments every integer in a vector,\n    /// checking for overflow:\n    ///\n    /// ```\n    /// let v = vec![1, 2];\n    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32|\n    ///     x.checked_add(1).ok_or(\"Overflow!\")\n    /// ).collect();\n    /// assert_eq!(res, Ok(vec![2, 3]));\n    /// ```\n    ///\n    /// Here is another example that tries to subtract one from another list\n    /// of integers, this time checking for underflow:\n    ///\n    /// ```\n    /// let v = vec![1, 2, 0];\n    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32|\n    ///     x.checked_sub(1).ok_or(\"Underflow!\")\n    /// ).collect();\n    /// assert_eq!(res, Err(\"Underflow!\"));\n    /// ```\n    ///\n    /// Here is a variation on the previous example, showing that no\n    /// further elements are taken from `iter` after the first `Err`.\n    ///\n    /// ```\n    /// let v = vec![3, 2, 1, 10];\n    /// let mut shared = 0;\n    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32| {\n    ///     shared += x;\n    ///     x.checked_sub(2).ok_or(\"Underflow!\")\n    /// }).collect();\n    /// assert_eq!(res, Err(\"Underflow!\"));\n    /// assert_eq!(shared, 6);\n    /// ```\n    ///\n    /// Since the third element caused an underflow, no further elements were taken,\n    /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.\n    #[inline]\n    fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {\n        iter::try_process(iter.into_iter(), |i| i.collect())\n    }\n}\n\n#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\nimpl<T, E> ops::Try for Result<T, E> {\n    type Output = T;\n    type Residual = Result<convert::Infallible, E>;\n\n    #[inline]\n    fn from_output(output: Self::Output) -> Self {\n        Ok(output)\n    }\n\n    #[inline]\n    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n        match self {\n            Ok(v) => ControlFlow::Continue(v),\n            Err(e) => ControlFlow::Break(Err(e)),\n        }\n    }\n}\n\n#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\nimpl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Result<T, F> {\n    #[inline]\n    #[track_caller]\n    fn from_residual(residual: Result<convert::Infallible, E>) -> Self {\n        match residual {\n            Err(e) => Err(From::from(e)),\n        }\n    }\n}\n\n#[unstable(feature = \"try_trait_v2_yeet\", issue = \"96374\")]\nimpl<T, E, F: From<E>> ops::FromResidual<ops::Yeet<E>> for Result<T, F> {\n    #[inline]\n    fn from_residual(ops::Yeet(e): ops::Yeet<E>) -> Self {\n        Err(From::from(e))\n    }\n}\n\n#[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]\nimpl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {\n    type TryType = Result<T, E>;\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/result.rs`.\"><title>result.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/any.rs.html\">any.rs</a><a href=\"../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/default.rs.html\">default.rs</a><a href=\"../../src/core/error.rs.html\">error.rs</a><a href=\"../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../src/core/option.rs.html\">option.rs</a><a href=\"../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../src/core/result.rs.html\" class=\"selected\">result.rs</a><a href=\"../../src/core/time.rs.html\">time.rs</a><a href=\"../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/env.rs.html\">env.rs</a><a href=\"../../src/std/error.rs.html\">error.rs</a><a href=\"../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../src/std/num.rs.html\">num.rs</a><a href=\"../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../src/std/path.rs.html\">path.rs</a><a href=\"../../src/std/process.rs.html\">process.rs</a><a href=\"../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../src/test/console.rs.html\">console.rs</a><a href=\"../../src/test/event.rs.html\">event.rs</a><a href=\"../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../src/test/options.rs.html\">options.rs</a><a href=\"../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../src/test/term.rs.html\">term.rs</a><a href=\"../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../src/test/time.rs.html\">time.rs</a><a href=\"../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\" class=\"line-highlighted\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Error handling with the `Result` type.\n//!\n//! [`Result&lt;T, E&gt;`][`Result`] is the type used for returning and propagating\n//! errors. It is an enum with the variants, [`Ok(T)`], representing\n//! success and containing a value, and [`Err(E)`], representing error\n//! and containing an error value.\n//!\n//! ```\n//! # #[allow(dead_code)]\n//! enum Result&lt;T, E&gt; {\n//!    Ok(T),\n//!    Err(E),\n//! }\n//! ```\n//!\n//! Functions return [`Result`] whenever errors are expected and\n//! recoverable. In the `std` crate, [`Result`] is most prominently used\n//! for [I/O](../../std/io/index.html).\n//!\n//! A simple function returning [`Result`] might be\n//! defined and used like so:\n//!\n//! ```\n//! #[derive(Debug)]\n//! enum Version { Version1, Version2 }\n//!\n//! fn parse_version(header: &amp;[u8]) -&gt; Result&lt;Version, &amp;'static str&gt; {\n//!     match header.get(0) {\n//!         None =&gt; Err(\"invalid header length\"),\n//!         Some(&amp;1) =&gt; Ok(Version::Version1),\n//!         Some(&amp;2) =&gt; Ok(Version::Version2),\n//!         Some(_) =&gt; Err(\"invalid version\"),\n//!     }\n//! }\n//!\n//! let version = parse_version(&amp;[1, 2, 3, 4]);\n//! match version {\n//!     Ok(v) =&gt; println!(\"working with version: {v:?}\"),\n//!     Err(e) =&gt; println!(\"error parsing header: {e:?}\"),\n//! }\n//! ```\n//!\n//! Pattern matching on [`Result`]s is clear and straightforward for\n//! simple cases, but [`Result`] comes with some convenience methods\n//! that make working with it more succinct.\n//!\n//! ```\n//! // The `is_ok` and `is_err` methods do what they say.\n//! let good_result: Result&lt;i32, i32&gt; = Ok(10);\n//! let bad_result: Result&lt;i32, i32&gt; = Err(10);\n//! assert!(good_result.is_ok() &amp;&amp; !good_result.is_err());\n//! assert!(bad_result.is_err() &amp;&amp; !bad_result.is_ok());\n//!\n//! // `map` and `map_err` consume the `Result` and produce another.\n//! let good_result: Result&lt;i32, i32&gt; = good_result.map(|i| i + 1);\n//! let bad_result: Result&lt;i32, i32&gt; = bad_result.map_err(|i| i - 1);\n//! assert_eq!(good_result, Ok(11));\n//! assert_eq!(bad_result, Err(9));\n//!\n//! // Use `and_then` to continue the computation.\n//! let good_result: Result&lt;bool, i32&gt; = good_result.and_then(|i| Ok(i == 11));\n//! assert_eq!(good_result, Ok(true));\n//!\n//! // Use `or_else` to handle the error.\n//! let bad_result: Result&lt;i32, i32&gt; = bad_result.or_else(|i| Ok(i + 20));\n//! assert_eq!(bad_result, Ok(29));\n//!\n//! // Consume the result and return the contents with `unwrap`.\n//! let final_awesome_result = good_result.unwrap();\n//! assert!(final_awesome_result)\n//! ```\n//!\n//! # Results must be used\n//!\n//! A common problem with using return values to indicate errors is\n//! that it is easy to ignore the return value, thus failing to handle\n//! the error. [`Result`] is annotated with the `#[must_use]` attribute,\n//! which will cause the compiler to issue a warning when a Result\n//! value is ignored. This makes [`Result`] especially useful with\n//! functions that may encounter errors but don't otherwise return a\n//! useful value.\n//!\n//! Consider the [`write_all`] method defined for I/O types\n//! by the [`Write`] trait:\n//!\n//! ```\n//! use std::io;\n//!\n//! trait Write {\n//!     fn write_all(&amp;mut self, bytes: &amp;[u8]) -&gt; Result&lt;(), io::Error&gt;;\n//! }\n//! ```\n//!\n//! *Note: The actual definition of [`Write`] uses [`io::Result`], which\n//! is just a synonym for &lt;code&gt;[Result]&lt;T, [io::Error]&gt;&lt;/code&gt;.*\n//!\n//! This method doesn't produce a value, but the write may\n//! fail. It's crucial to handle the error case, and *not* write\n//! something like this:\n//!\n//! ```no_run\n//! # #![allow(unused_must_use)] // \\o/\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//!\n//! let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! // If `write_all` errors, then we'll never know, because the return\n//! // value is ignored.\n//! file.write_all(b\"important message\");\n//! ```\n//!\n//! If you *do* write that in Rust, the compiler will give you a\n//! warning (by default, controlled by the `unused_must_use` lint).\n//!\n//! You might instead, if you don't want to handle the error, simply\n//! assert success with [`expect`]. This will panic if the\n//! write fails, providing a marginally useful message indicating why:\n//!\n//! ```no_run\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//!\n//! let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! file.write_all(b\"important message\").expect(\"failed to write message\");\n//! ```\n//!\n//! You might also simply assert success:\n//!\n//! ```no_run\n//! # use std::fs::File;\n//! # use std::io::prelude::*;\n//! # let mut file = File::create(\"valuable_data.txt\").unwrap();\n//! assert!(file.write_all(b\"important message\").is_ok());\n//! ```\n//!\n//! Or propagate the error up the call stack with [`?`]:\n//!\n//! ```\n//! # use std::fs::File;\n//! # use std::io::prelude::*;\n//! # use std::io;\n//! # #[allow(dead_code)]\n//! fn write_message() -&gt; io::Result&lt;()&gt; {\n//!     let mut file = File::create(\"valuable_data.txt\")?;\n//!     file.write_all(b\"important message\")?;\n//!     Ok(())\n//! }\n//! ```\n//!\n//! # The question mark operator, `?`\n//!\n//! When writing code that calls many functions that return the\n//! [`Result`] type, the error handling can be tedious. The question mark\n//! operator, [`?`], hides some of the boilerplate of propagating errors\n//! up the call stack.\n//!\n//! It replaces this:\n//!\n//! ```\n//! # #![allow(dead_code)]\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//! use std::io;\n//!\n//! struct Info {\n//!     name: String,\n//!     age: i32,\n//!     rating: i32,\n//! }\n//!\n//! fn write_info(info: &amp;Info) -&gt; io::Result&lt;()&gt; {\n//!     // Early return on error\n//!     let mut file = match File::create(\"my_best_friends.txt\") {\n//!            Err(e) =&gt; return Err(e),\n//!            Ok(f) =&gt; f,\n//!     };\n//!     if let Err(e) = file.write_all(format!(\"name: {}\\n\", info.name).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     if let Err(e) = file.write_all(format!(\"age: {}\\n\", info.age).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     if let Err(e) = file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes()) {\n//!         return Err(e)\n//!     }\n//!     Ok(())\n//! }\n//! ```\n//!\n//! With this:\n//!\n//! ```\n//! # #![allow(dead_code)]\n//! use std::fs::File;\n//! use std::io::prelude::*;\n//! use std::io;\n//!\n//! struct Info {\n//!     name: String,\n//!     age: i32,\n//!     rating: i32,\n//! }\n//!\n//! fn write_info(info: &amp;Info) -&gt; io::Result&lt;()&gt; {\n//!     let mut file = File::create(\"my_best_friends.txt\")?;\n//!     // Early return on error\n//!     file.write_all(format!(\"name: {}\\n\", info.name).as_bytes())?;\n//!     file.write_all(format!(\"age: {}\\n\", info.age).as_bytes())?;\n//!     file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes())?;\n//!     Ok(())\n//! }\n//! ```\n//!\n//! *It's much nicer!*\n//!\n//! Ending the expression with [`?`] will result in the [`Ok`]'s unwrapped value, unless the result\n//! is [`Err`], in which case [`Err`] is returned early from the enclosing function.\n//!\n//! [`?`] can be used in functions that return [`Result`] because of the\n//! early return of [`Err`] that it provides.\n//!\n//! [`expect`]: Result::expect\n//! [`Write`]: ../../std/io/trait.Write.html \"io::Write\"\n//! [`write_all`]: ../../std/io/trait.Write.html#method.write_all \"io::Write::write_all\"\n//! [`io::Result`]: ../../std/io/type.Result.html \"io::Result\"\n//! [`?`]: crate::ops::Try\n//! [`Ok(T)`]: Ok\n//! [`Err(E)`]: Err\n//! [io::Error]: ../../std/io/struct.Error.html \"io::Error\"\n//!\n//! # Representation\n//!\n//! In some cases, [`Result&lt;T, E&gt;`] will gain the same size, alignment, and ABI\n//! guarantees as [`Option&lt;U&gt;`] has. One of either the `T` or `E` type must be a\n//! type that qualifies for the `Option` [representation guarantees][opt-rep],\n//! and the *other* type must meet all of the following conditions:\n//! * Is a zero-sized type with alignment 1 (a \"1-ZST\").\n//! * Has no fields.\n//! * Does not have the `#[non_exhaustive]` attribute.\n//!\n//! For example, `NonZeroI32` qualifies for the `Option` representation\n//! guarantees, and `()` is a zero-sized type with alignment 1, no fields, and\n//! it isn't `non_exhaustive`. This means that both `Result&lt;NonZeroI32, ()&gt;` and\n//! `Result&lt;(), NonZeroI32&gt;` have the same size, alignment, and ABI guarantees\n//! as `Option&lt;NonZeroI32&gt;`. The only difference is the implied semantics:\n//! * `Option&lt;NonZeroI32&gt;` is \"a non-zero i32 might be present\"\n//! * `Result&lt;NonZeroI32, ()&gt;` is \"a non-zero i32 success result, if any\"\n//! * `Result&lt;(), NonZeroI32&gt;` is \"a non-zero i32 error result, if any\"\n//!\n//! [opt-rep]: ../option/index.html#representation \"Option Representation\"\n//!\n//! # Method overview\n//!\n//! In addition to working with pattern matching, [`Result`] provides a\n//! wide variety of different methods.\n//!\n//! ## Querying the variant\n//!\n//! The [`is_ok`] and [`is_err`] methods return [`true`] if the [`Result`]\n//! is [`Ok`] or [`Err`], respectively.\n//!\n//! [`is_err`]: Result::is_err\n//! [`is_ok`]: Result::is_ok\n//!\n//! ## Adapters for working with references\n//!\n//! * [`as_ref`] converts from `&amp;Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`\n//! * [`as_mut`] converts from `&amp;mut Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`\n//! * [`as_deref`] converts from `&amp;Result&lt;T, E&gt;` to `Result&lt;&amp;T::Target, &amp;E&gt;`\n//! * [`as_deref_mut`] converts from `&amp;mut Result&lt;T, E&gt;` to\n//!   `Result&lt;&amp;mut T::Target, &amp;mut E&gt;`\n//!\n//! [`as_deref`]: Result::as_deref\n//! [`as_deref_mut`]: Result::as_deref_mut\n//! [`as_mut`]: Result::as_mut\n//! [`as_ref`]: Result::as_ref\n//!\n//! ## Extracting contained values\n//!\n//! These methods extract the contained value in a [`Result&lt;T, E&gt;`] when it\n//! is the [`Ok`] variant. If the [`Result`] is [`Err`]:\n//!\n//! * [`expect`] panics with a provided custom message\n//! * [`unwrap`] panics with a generic message\n//! * [`unwrap_or`] returns the provided default value\n//! * [`unwrap_or_default`] returns the default value of the type `T`\n//!   (which must implement the [`Default`] trait)\n//! * [`unwrap_or_else`] returns the result of evaluating the provided\n//!   function\n//!\n//! The panicking methods [`expect`] and [`unwrap`] require `E` to\n//! implement the [`Debug`] trait.\n//!\n//! [`Debug`]: crate::fmt::Debug\n//! [`expect`]: Result::expect\n//! [`unwrap`]: Result::unwrap\n//! [`unwrap_or`]: Result::unwrap_or\n//! [`unwrap_or_default`]: Result::unwrap_or_default\n//! [`unwrap_or_else`]: Result::unwrap_or_else\n//!\n//! These methods extract the contained value in a [`Result&lt;T, E&gt;`] when it\n//! is the [`Err`] variant. They require `T` to implement the [`Debug`]\n//! trait. If the [`Result`] is [`Ok`]:\n//!\n//! * [`expect_err`] panics with a provided custom message\n//! * [`unwrap_err`] panics with a generic message\n//!\n//! [`Debug`]: crate::fmt::Debug\n//! [`expect_err`]: Result::expect_err\n//! [`unwrap_err`]: Result::unwrap_err\n//!\n//! ## Transforming contained values\n//!\n//! These methods transform [`Result`] to [`Option`]:\n//!\n//! * [`err`][Result::err] transforms [`Result&lt;T, E&gt;`] into [`Option&lt;E&gt;`],\n//!   mapping [`Err(e)`] to [`Some(e)`] and [`Ok(v)`] to [`None`]\n//! * [`ok`][Result::ok] transforms [`Result&lt;T, E&gt;`] into [`Option&lt;T&gt;`],\n//!   mapping [`Ok(v)`] to [`Some(v)`] and [`Err(e)`] to [`None`]\n//! * [`transpose`] transposes a [`Result`] of an [`Option`] into an\n//!   [`Option`] of a [`Result`]\n//!\n</span><span class=\"comment\">// Do NOT add link reference definitions for `err` or `ok`, because they\n// will generate numerous incorrect URLs for `Err` and `Ok` elsewhere, due\n// to case folding.\n</span><span class=\"doccomment\">//!\n//! [`Err(e)`]: Err\n//! [`Ok(v)`]: Ok\n//! [`Some(e)`]: Option::Some\n//! [`Some(v)`]: Option::Some\n//! [`transpose`]: Result::transpose\n//!\n//! This method transforms the contained value of the [`Ok`] variant:\n//!\n//! * [`map`] transforms [`Result&lt;T, E&gt;`] into [`Result&lt;U, E&gt;`] by applying\n//!   the provided function to the contained value of [`Ok`] and leaving\n//!   [`Err`] values unchanged\n//!\n//! [`map`]: Result::map\n//!\n//! This method transforms the contained value of the [`Err`] variant:\n//!\n//! * [`map_err`] transforms [`Result&lt;T, E&gt;`] into [`Result&lt;T, F&gt;`] by\n//!   applying the provided function to the contained value of [`Err`] and\n//!   leaving [`Ok`] values unchanged\n//!\n//! [`map_err`]: Result::map_err\n//!\n//! These methods transform a [`Result&lt;T, E&gt;`] into a value of a possibly\n//! different type `U`:\n//!\n//! * [`map_or`] applies the provided function to the contained value of\n//!   [`Ok`], or returns the provided default value if the [`Result`] is\n//!   [`Err`]\n//! * [`map_or_else`] applies the provided function to the contained value\n//!   of [`Ok`], or applies the provided default fallback function to the\n//!   contained value of [`Err`]\n//!\n//! [`map_or`]: Result::map_or\n//! [`map_or_else`]: Result::map_or_else\n//!\n//! ## Boolean operators\n//!\n//! These methods treat the [`Result`] as a boolean value, where [`Ok`]\n//! acts like [`true`] and [`Err`] acts like [`false`]. There are two\n//! categories of these methods: ones that take a [`Result`] as input, and\n//! ones that take a function as input (to be lazily evaluated).\n//!\n//! The [`and`] and [`or`] methods take another [`Result`] as input, and\n//! produce a [`Result`] as output. The [`and`] method can produce a\n//! [`Result&lt;U, E&gt;`] value having a different inner type `U` than\n//! [`Result&lt;T, E&gt;`]. The [`or`] method can produce a [`Result&lt;T, F&gt;`]\n//! value having a different error type `F` than [`Result&lt;T, E&gt;`].\n//!\n//! | method  | self     | input     | output   |\n//! |---------|----------|-----------|----------|\n//! | [`and`] | `Err(e)` | (ignored) | `Err(e)` |\n//! | [`and`] | `Ok(x)`  | `Err(d)`  | `Err(d)` |\n//! | [`and`] | `Ok(x)`  | `Ok(y)`   | `Ok(y)`  |\n//! | [`or`]  | `Err(e)` | `Err(d)`  | `Err(d)` |\n//! | [`or`]  | `Err(e)` | `Ok(y)`   | `Ok(y)`  |\n//! | [`or`]  | `Ok(x)`  | (ignored) | `Ok(x)`  |\n//!\n//! [`and`]: Result::and\n//! [`or`]: Result::or\n//!\n//! The [`and_then`] and [`or_else`] methods take a function as input, and\n//! only evaluate the function when they need to produce a new value. The\n//! [`and_then`] method can produce a [`Result&lt;U, E&gt;`] value having a\n//! different inner type `U` than [`Result&lt;T, E&gt;`]. The [`or_else`] method\n//! can produce a [`Result&lt;T, F&gt;`] value having a different error type `F`\n//! than [`Result&lt;T, E&gt;`].\n//!\n//! | method       | self     | function input | function result | output   |\n//! |--------------|----------|----------------|-----------------|----------|\n//! | [`and_then`] | `Err(e)` | (not provided) | (not evaluated) | `Err(e)` |\n//! | [`and_then`] | `Ok(x)`  | `x`            | `Err(d)`        | `Err(d)` |\n//! | [`and_then`] | `Ok(x)`  | `x`            | `Ok(y)`         | `Ok(y)`  |\n//! | [`or_else`]  | `Err(e)` | `e`            | `Err(d)`        | `Err(d)` |\n//! | [`or_else`]  | `Err(e)` | `e`            | `Ok(y)`         | `Ok(y)`  |\n//! | [`or_else`]  | `Ok(x)`  | (not provided) | (not evaluated) | `Ok(x)`  |\n//!\n//! [`and_then`]: Result::and_then\n//! [`or_else`]: Result::or_else\n//!\n//! ## Comparison operators\n//!\n//! If `T` and `E` both implement [`PartialOrd`] then [`Result&lt;T, E&gt;`] will\n//! derive its [`PartialOrd`] implementation.  With this order, an [`Ok`]\n//! compares as less than any [`Err`], while two [`Ok`] or two [`Err`]\n//! compare as their contained values would in `T` or `E` respectively.  If `T`\n//! and `E` both also implement [`Ord`], then so does [`Result&lt;T, E&gt;`].\n//!\n//! ```\n//! assert!(Ok(1) &lt; Err(0));\n//! let x: Result&lt;i32, ()&gt; = Ok(0);\n//! let y = Ok(1);\n//! assert!(x &lt; y);\n//! let x: Result&lt;(), i32&gt; = Err(0);\n//! let y = Err(1);\n//! assert!(x &lt; y);\n//! ```\n//!\n//! ## Iterating over `Result`\n//!\n//! A [`Result`] can be iterated over. This can be helpful if you need an\n//! iterator that is conditionally empty. The iterator will either produce\n//! a single value (when the [`Result`] is [`Ok`]), or produce no values\n//! (when the [`Result`] is [`Err`]). For example, [`into_iter`] acts like\n//! [`once(v)`] if the [`Result`] is [`Ok(v)`], and like [`empty()`] if the\n//! [`Result`] is [`Err`].\n//!\n//! [`Ok(v)`]: Ok\n//! [`empty()`]: crate::iter::empty\n//! [`once(v)`]: crate::iter::once\n//!\n//! Iterators over [`Result&lt;T, E&gt;`] come in three types:\n//!\n//! * [`into_iter`] consumes the [`Result`] and produces the contained\n//!   value\n//! * [`iter`] produces an immutable reference of type `&amp;T` to the\n//!   contained value\n//! * [`iter_mut`] produces a mutable reference of type `&amp;mut T` to the\n//!   contained value\n//!\n//! See [Iterating over `Option`] for examples of how this can be useful.\n//!\n//! [Iterating over `Option`]: crate::option#iterating-over-option\n//! [`into_iter`]: Result::into_iter\n//! [`iter`]: Result::iter\n//! [`iter_mut`]: Result::iter_mut\n//!\n//! You might want to use an iterator chain to do multiple instances of an\n//! operation that can fail, but would like to ignore failures while\n//! continuing to process the successful results. In this example, we take\n//! advantage of the iterable nature of [`Result`] to select only the\n//! [`Ok`] values using [`flatten`][Iterator::flatten].\n//!\n//! ```\n//! # use std::str::FromStr;\n//! let mut results = vec![];\n//! let mut errs = vec![];\n//! let nums: Vec&lt;_&gt; = [\"17\", \"not a number\", \"99\", \"-27\", \"768\"]\n//!    .into_iter()\n//!    .map(u8::from_str)\n//!    // Save clones of the raw `Result` values to inspect\n//!    .inspect(|x| results.push(x.clone()))\n//!    // Challenge: explain how this captures only the `Err` values\n//!    .inspect(|x| errs.extend(x.clone().err()))\n//!    .flatten()\n//!    .collect();\n//! assert_eq!(errs.len(), 3);\n//! assert_eq!(nums, [17, 99]);\n//! println!(\"results {results:?}\");\n//! println!(\"errs {errs:?}\");\n//! println!(\"nums {nums:?}\");\n//! ```\n//!\n//! ## Collecting into `Result`\n//!\n//! [`Result`] implements the [`FromIterator`][impl-FromIterator] trait,\n//! which allows an iterator over [`Result`] values to be collected into a\n//! [`Result`] of a collection of each contained value of the original\n//! [`Result`] values, or [`Err`] if any of the elements was [`Err`].\n//!\n//! [impl-FromIterator]: Result#impl-FromIterator%3CResult%3CA,+E%3E%3E-for-Result%3CV,+E%3E\n//!\n//! ```\n//! let v = [Ok(2), Ok(4), Err(\"err!\"), Ok(8)];\n//! let res: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = v.into_iter().collect();\n//! assert_eq!(res, Err(\"err!\"));\n//! let v = [Ok(2), Ok(4), Ok(8)];\n//! let res: Result&lt;Vec&lt;_&gt;, &amp;str&gt; = v.into_iter().collect();\n//! assert_eq!(res, Ok(vec![2, 4, 8]));\n//! ```\n//!\n//! [`Result`] also implements the [`Product`][impl-Product] and\n//! [`Sum`][impl-Sum] traits, allowing an iterator over [`Result`] values\n//! to provide the [`product`][Iterator::product] and\n//! [`sum`][Iterator::sum] methods.\n//!\n//! [impl-Product]: Result#impl-Product%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\n//! [impl-Sum]: Result#impl-Sum%3CResult%3CU,+E%3E%3E-for-Result%3CT,+E%3E\n//!\n//! ```\n//! let v = [Err(\"error!\"), Ok(1), Ok(2), Ok(3), Err(\"foo\")];\n//! let res: Result&lt;i32, &amp;str&gt; = v.into_iter().sum();\n//! assert_eq!(res, Err(\"error!\"));\n//! let v = [Ok(1), Ok(2), Ok(21)];\n//! let res: Result&lt;i32, &amp;str&gt; = v.into_iter().product();\n//! assert_eq!(res, Ok(42));\n//! ```\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::iter::{<span class=\"self\">self</span>, FusedIterator, TrustedLen};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ops::{<span class=\"self\">self</span>, ControlFlow, Deref, DerefMut};\n<span class=\"kw\">use crate</span>::{convert, fmt, hint};\n\n<span class=\"doccomment\">/// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n///\n/// See the [module documentation](self) for details.\n</span><span class=\"attr\">#[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n#[must_use = <span class=\"string\">\"this `Result` may be an `Err` variant, which should be handled\"</span>]\n#[rustc_diagnostic_item = <span class=\"string\">\"Result\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub enum </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"doccomment\">/// Contains the success value\n    </span><span class=\"attr\">#[lang = <span class=\"string\">\"Ok\"</span>]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"prelude-val\">Ok</span>(<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)] </span>T),\n\n    <span class=\"doccomment\">/// Contains the error value\n    </span><span class=\"attr\">#[lang = <span class=\"string\">\"Err\"</span>]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"prelude-val\">Err</span>(<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)] </span>E),\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Type implementation\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"kw\">impl</span>&lt;T, E&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Querying the contained values\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Returns `true` if the result is [`Ok`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;i32, &amp;str&gt; = Ok(-3);\n    /// assert_eq!(x.is_ok(), true);\n    ///\n    /// let x: Result&lt;i32, &amp;str&gt; = Err(\"Some error message\");\n    /// assert_eq!(x.is_ok(), false);\n    /// ```\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"if you intended to assert that this is ok, consider `.unwrap()` instead\"</span>]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_result_basics\"</span>, since = <span class=\"string\">\"1.48.0\"</span>)]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>is_ok(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>))\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if the result is [`Ok`] and the value inside of it matches a predicate.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.is_ok_and(|x| x &gt; 1), true);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(0);\n    /// assert_eq!(x.is_ok_and(|x| x &gt; 1), false);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"hey\");\n    /// assert_eq!(x.is_ok_and(|x| x &gt; 1), false);\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"is_some_and\"</span>, since = <span class=\"string\">\"1.70.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_ok_and(<span class=\"self\">self</span>, f: <span class=\"kw\">impl </span>FnOnce(T) -&gt; bool) -&gt; bool {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"bool-val\">false</span>,\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; f(x),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if the result is [`Err`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;i32, &amp;str&gt; = Ok(-3);\n    /// assert_eq!(x.is_err(), false);\n    ///\n    /// let x: Result&lt;i32, &amp;str&gt; = Err(\"Some error message\");\n    /// assert_eq!(x.is_err(), true);\n    /// ```\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"if you intended to assert that this is err, consider `.unwrap_err()` instead\"</span>]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_result_basics\"</span>, since = <span class=\"string\">\"1.48.0\"</span>)]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>is_err(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        !<span class=\"self\">self</span>.is_ok()\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if the result is [`Err`] and the value inside of it matches a predicate.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::io::{Error, ErrorKind};\n    ///\n    /// let x: Result&lt;u32, Error&gt; = Err(Error::new(ErrorKind::NotFound, \"!\"));\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), true);\n    ///\n    /// let x: Result&lt;u32, Error&gt; = Err(Error::new(ErrorKind::PermissionDenied, \"!\"));\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n    ///\n    /// let x: Result&lt;u32, Error&gt; = Ok(123);\n    /// assert_eq!(x.is_err_and(|x| x.kind() == ErrorKind::NotFound), false);\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[inline]\n    #[stable(feature = <span class=\"string\">\"is_some_and\"</span>, since = <span class=\"string\">\"1.70.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_err_and(<span class=\"self\">self</span>, f: <span class=\"kw\">impl </span>FnOnce(E) -&gt; bool) -&gt; bool {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"bool-val\">false</span>,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; f(e),\n        }\n    }\n\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Adapter for each variant\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Converts from `Result&lt;T, E&gt;` to [`Option&lt;T&gt;`].\n    ///\n    /// Converts `self` into an [`Option&lt;T&gt;`], consuming `self`,\n    /// and discarding the error, if any.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.ok(), Some(2));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"Nothing here\");\n    /// assert_eq!(x.ok(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>ok(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; <span class=\"prelude-val\">Some</span>(x),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n        }\n    }\n\n    <span class=\"doccomment\">/// Converts from `Result&lt;T, E&gt;` to [`Option&lt;E&gt;`].\n    ///\n    /// Converts `self` into an [`Option&lt;E&gt;`], consuming `self`,\n    /// and discarding the success value, if any.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.err(), None);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"Nothing here\");\n    /// assert_eq!(x.err(), Some(\"Nothing here\"));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>err(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;E&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n            <span class=\"prelude-val\">Err</span>(x) =&gt; <span class=\"prelude-val\">Some</span>(x),\n        }\n    }\n\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Adapter for working with references\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Converts from `&amp;Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`.\n    ///\n    /// Produces a new `Result`, containing a reference\n    /// into the original, leaving the original in place.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.as_ref(), Ok(&amp;2));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"Error\");\n    /// assert_eq!(x.as_ref(), Err(&amp;\"Error\"));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_result_basics\"</span>, since = <span class=\"string\">\"1.48.0\"</span>)]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>E&gt; {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref </span>x) =&gt; <span class=\"prelude-val\">Ok</span>(x),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>x) =&gt; <span class=\"prelude-val\">Err</span>(x),\n        }\n    }\n\n    <span class=\"doccomment\">/// Converts from `&amp;mut Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn mutate(r: &amp;mut Result&lt;i32, i32&gt;) {\n    ///     match r.as_mut() {\n    ///         Ok(v) =&gt; *v = 42,\n    ///         Err(e) =&gt; *e = 0,\n    ///     }\n    /// }\n    ///\n    /// let mut x: Result&lt;i32, i32&gt; = Ok(2);\n    /// mutate(&amp;mut x);\n    /// assert_eq!(x.unwrap(), 42);\n    ///\n    /// let mut x: Result&lt;i32, i32&gt; = Err(13);\n    /// mutate(&amp;mut x);\n    /// assert_eq!(x.unwrap_err(), 0);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"const_result\"</span>, issue = <span class=\"string\">\"82814\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>T, <span class=\"kw-2\">&amp;mut </span>E&gt; {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref mut </span>x) =&gt; <span class=\"prelude-val\">Ok</span>(x),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref mut </span>x) =&gt; <span class=\"prelude-val\">Err</span>(x),\n        }\n    }\n\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Transforming contained values\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\n    /// contained [`Ok`] value, leaving an [`Err`] value untouched.\n    ///\n    /// This function can be used to compose the results of two functions.\n    ///\n    /// # Examples\n    ///\n    /// Print the numbers on each line of a string multiplied by two.\n    ///\n    /// ```\n    /// let line = \"1\\n2\\n3\\n4\\n\";\n    ///\n    /// for num in line.lines() {\n    ///     match num.parse::&lt;i32&gt;().map(|i| i * 2) {\n    ///         Ok(n) =&gt; println!(\"{n}\"),\n    ///         Err(..) =&gt; {}\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>map&lt;U, F: FnOnce(T) -&gt; U&gt;(<span class=\"self\">self</span>, op: F) -&gt; <span class=\"prelude-ty\">Result</span>&lt;U, E&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; <span class=\"prelude-val\">Ok</span>(op(t)),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the provided default (if [`Err`]), or\n    /// applies a function to the contained value (if [`Ok`]).\n    ///\n    /// Arguments passed to `map_or` are eagerly evaluated; if you are passing\n    /// the result of a function call, it is recommended to use [`map_or_else`],\n    /// which is lazily evaluated.\n    ///\n    /// [`map_or_else`]: Result::map_or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;_, &amp;str&gt; = Ok(\"foo\");\n    /// assert_eq!(x.map_or(42, |v| v.len()), 3);\n    ///\n    /// let x: Result&lt;&amp;str, _&gt; = Err(\"bar\");\n    /// assert_eq!(x.map_or(42, |v| v.len()), 42);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_map_or\"</span>, since = <span class=\"string\">\"1.41.0\"</span>)]\n    #[must_use = <span class=\"string\">\"if you don't need the returned value, use `if let` instead\"</span>]\n    </span><span class=\"kw\">pub fn </span>map_or&lt;U, F: FnOnce(T) -&gt; U&gt;(<span class=\"self\">self</span>, default: U, f: F) -&gt; U {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; f(t),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; default,\n        }\n    }\n\n    <span class=\"doccomment\">/// Maps a `Result&lt;T, E&gt;` to `U` by applying fallback function `default` to\n    /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.\n    ///\n    /// This function can be used to unpack a successful result\n    /// while handling an error.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let k = 21;\n    ///\n    /// let x : Result&lt;_, &amp;str&gt; = Ok(\"foo\");\n    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 3);\n    ///\n    /// let x : Result&lt;&amp;str, _&gt; = Err(\"bar\");\n    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 42);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_map_or_else\"</span>, since = <span class=\"string\">\"1.41.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>map_or_else&lt;U, D: FnOnce(E) -&gt; U, F: FnOnce(T) -&gt; U&gt;(<span class=\"self\">self</span>, default: D, f: F) -&gt; U {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; f(t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; default(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\n    /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n    ///\n    /// This function can be used to pass through a successful result while handling\n    /// an error.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn stringify(x: u32) -&gt; String { format!(\"error code: {x}\") }\n    ///\n    /// let x: Result&lt;u32, u32&gt; = Ok(2);\n    /// assert_eq!(x.map_err(stringify), Ok(2));\n    ///\n    /// let x: Result&lt;u32, u32&gt; = Err(13);\n    /// assert_eq!(x.map_err(stringify), Err(\"error code: 13\".to_string()));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>map_err&lt;F, O: FnOnce(E) -&gt; F&gt;(<span class=\"self\">self</span>, op: O) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, F&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; <span class=\"prelude-val\">Ok</span>(t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(op(e)),\n        }\n    }\n\n    <span class=\"doccomment\">/// Calls a function with a reference to the contained value if [`Ok`].\n    ///\n    /// Returns the original result.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: u8 = \"4\"\n    ///     .parse::&lt;u8&gt;()\n    ///     .inspect(|x| println!(\"original: {x}\"))\n    ///     .map(|x| x.pow(3))\n    ///     .expect(\"failed to parse number\");\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_option_inspect\"</span>, since = <span class=\"string\">\"1.76.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>inspect&lt;F: FnOnce(<span class=\"kw-2\">&amp;</span>T)&gt;(<span class=\"self\">self</span>, f: F) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">ref </span>t) = <span class=\"self\">self </span>{\n            f(t);\n        }\n\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Calls a function with a reference to the contained value if [`Err`].\n    ///\n    /// Returns the original result.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::{fs, io};\n    ///\n    /// fn read() -&gt; io::Result&lt;String&gt; {\n    ///     fs::read_to_string(\"address.txt\")\n    ///         .inspect_err(|e| eprintln!(\"failed to read file: {e}\"))\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_option_inspect\"</span>, since = <span class=\"string\">\"1.76.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>inspect_err&lt;F: FnOnce(<span class=\"kw-2\">&amp;</span>E)&gt;(<span class=\"self\">self</span>, f: F) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>e) = <span class=\"self\">self </span>{\n            f(e);\n        }\n\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Converts from `Result&lt;T, E&gt;` (or `&amp;Result&lt;T, E&gt;`) to `Result&lt;&amp;&lt;T as Deref&gt;::Target, &amp;E&gt;`.\n    ///\n    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n    /// and returns the new [`Result`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;String, u32&gt; = Ok(\"hello\".to_string());\n    /// let y: Result&lt;&amp;str, &amp;u32&gt; = Ok(\"hello\");\n    /// assert_eq!(x.as_deref(), y);\n    ///\n    /// let x: Result&lt;String, u32&gt; = Err(42);\n    /// let y: Result&lt;&amp;str, &amp;u32&gt; = Err(&amp;42);\n    /// assert_eq!(x.as_deref(), y);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"inner_deref\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>as_deref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>T::Target, <span class=\"kw-2\">&amp;</span>E&gt;\n    <span class=\"kw\">where\n        </span>T: Deref,\n    {\n        <span class=\"self\">self</span>.as_ref().map(|t| t.deref())\n    }\n\n    <span class=\"doccomment\">/// Converts from `Result&lt;T, E&gt;` (or `&amp;mut Result&lt;T, E&gt;`) to `Result&lt;&amp;mut &lt;T as DerefMut&gt;::Target, &amp;mut E&gt;`.\n    ///\n    /// Coerces the [`Ok`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n    /// and returns the new [`Result`].\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut s = \"HELLO\".to_string();\n    /// let mut x: Result&lt;String, u32&gt; = Ok(\"hello\".to_string());\n    /// let y: Result&lt;&amp;mut str, &amp;mut u32&gt; = Ok(&amp;mut s);\n    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n    ///\n    /// let mut i = 42;\n    /// let mut x: Result&lt;String, u32&gt; = Err(42);\n    /// let y: Result&lt;&amp;mut str, &amp;mut u32&gt; = Err(&amp;mut i);\n    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"inner_deref\"</span>, since = <span class=\"string\">\"1.47.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>as_deref_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>T::Target, <span class=\"kw-2\">&amp;mut </span>E&gt;\n    <span class=\"kw\">where\n        </span>T: DerefMut,\n    {\n        <span class=\"self\">self</span>.as_mut().map(|t| t.deref_mut())\n    }\n\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Iterator constructors\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Returns an iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(7);\n    /// assert_eq!(x.iter().next(), Some(&amp;7));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"nothing!\");\n    /// assert_eq!(x.iter().next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>iter(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Iter&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n        Iter { inner: <span class=\"self\">self</span>.as_ref().ok() }\n    }\n\n    <span class=\"doccomment\">/// Returns a mutable iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut x: Result&lt;u32, &amp;str&gt; = Ok(7);\n    /// match x.iter_mut().next() {\n    ///     Some(v) =&gt; *v = 40,\n    ///     None =&gt; {},\n    /// }\n    /// assert_eq!(x, Ok(40));\n    ///\n    /// let mut x: Result&lt;u32, &amp;str&gt; = Err(\"nothing!\");\n    /// assert_eq!(x.iter_mut().next(), None);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>iter_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; IterMut&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n        IterMut { inner: <span class=\"self\">self</span>.as_mut().ok() }\n    }\n\n    <span class=\"comment\">/////////////////////////////////////////////////////////////////////////\n    // Extract a value\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Returns the contained [`Ok`] value, consuming the `self` value.\n    ///\n    /// Because this function may panic, its use is generally discouraged.\n    /// Instead, prefer to use pattern matching and handle the [`Err`]\n    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n    /// [`unwrap_or_default`].\n    ///\n    /// [`unwrap_or`]: Result::unwrap_or\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    /// [`unwrap_or_default`]: Result::unwrap_or_default\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Err`], with a panic message including the\n    /// passed message, and the content of the [`Err`].\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"emergency failure\");\n    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n    /// ```\n    ///\n    /// # Recommended Message Style\n    ///\n    /// We recommend that `expect` messages are used to describe the reason you\n    /// _expect_ the `Result` should be `Ok`.\n    ///\n    /// ```should_panic\n    /// let path = std::env::var(\"IMPORTANT_PATH\")\n    ///     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n    /// ```\n    ///\n    /// **Hint**: If you're having trouble remembering how to phrase expect\n    /// error messages remember to focus on the word \"should\" as in \"env\n    /// variable should be set by blah\" or \"the given binary should be available\n    /// and executable by the current user\".\n    ///\n    /// For more detail on expect message styles and the reasoning behind our recommendation please\n    /// refer to the section on [\"Common Message\n    /// Styles\"](../../std/error/index.html#common-message-styles) in the\n    /// [`std::error`](../../std/error/index.html) module docs.\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"result_expect\"</span>, since = <span class=\"string\">\"1.4.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>expect(<span class=\"self\">self</span>, msg: <span class=\"kw-2\">&amp;</span>str) -&gt; T\n    <span class=\"kw\">where\n        </span>E: fmt::Debug,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; t,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; unwrap_failed(msg, <span class=\"kw-2\">&amp;</span>e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value, consuming the `self` value.\n    ///\n    /// Because this function may panic, its use is generally discouraged.\n    /// Instead, prefer to use pattern matching and handle the [`Err`]\n    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n    /// [`unwrap_or_default`].\n    ///\n    /// [`unwrap_or`]: Result::unwrap_or\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    /// [`unwrap_or_default`]: Result::unwrap_or_default\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Err`], with a panic message provided by the\n    /// [`Err`]'s value.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// Basic usage:\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.unwrap(), 2);\n    /// ```\n    ///\n    /// ```should_panic\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"emergency failure\");\n    /// x.unwrap(); // panics with `emergency failure`\n    /// ```\n    </span><span class=\"attr\">#[inline(always)]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>unwrap(<span class=\"self\">self</span>) -&gt; T\n    <span class=\"kw\">where\n        </span>E: fmt::Debug,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; t,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; unwrap_failed(<span class=\"string\">\"called `Result::unwrap()` on an `Err` value\"</span>, <span class=\"kw-2\">&amp;</span>e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value or a default\n    ///\n    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n    /// value, otherwise if [`Err`], returns the default value for that\n    /// type.\n    ///\n    /// # Examples\n    ///\n    /// Converts a string to an integer, turning poorly-formed strings\n    /// into 0 (the default value for integers). [`parse`] converts\n    /// a string to any other type that implements [`FromStr`], returning an\n    /// [`Err`] on error.\n    ///\n    /// ```\n    /// let good_year_from_input = \"1909\";\n    /// let bad_year_from_input = \"190blarg\";\n    /// let good_year = good_year_from_input.parse().unwrap_or_default();\n    /// let bad_year = bad_year_from_input.parse().unwrap_or_default();\n    ///\n    /// assert_eq!(1909, good_year);\n    /// assert_eq!(0, bad_year);\n    /// ```\n    ///\n    /// [`parse`]: str::parse\n    /// [`FromStr`]: crate::str::FromStr\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_unwrap_or_default\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>unwrap_or_default(<span class=\"self\">self</span>) -&gt; T\n    <span class=\"kw\">where\n        </span>T: Default,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; x,\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; Default::default(),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Err`] value, consuming the `self` value.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Ok`], with a panic message including the\n    /// passed message, and the content of the [`Ok`].\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(10);\n    /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"result_expect_err\"</span>, since = <span class=\"string\">\"1.17.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>expect_err(<span class=\"self\">self</span>, msg: <span class=\"kw-2\">&amp;</span>str) -&gt; E\n    <span class=\"kw\">where\n        </span>T: fmt::Debug,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; unwrap_failed(msg, <span class=\"kw-2\">&amp;</span>t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; e,\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Err`] value, consuming the `self` value.\n    ///\n    /// # Panics\n    ///\n    /// Panics if the value is an [`Ok`], with a custom panic message provided\n    /// by the [`Ok`]'s value.\n    ///\n    /// # Examples\n    ///\n    /// ```should_panic\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// x.unwrap_err(); // panics with `2`\n    /// ```\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"emergency failure\");\n    /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>unwrap_err(<span class=\"self\">self</span>) -&gt; E\n    <span class=\"kw\">where\n        </span>T: fmt::Debug,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; unwrap_failed(<span class=\"string\">\"called `Result::unwrap_err()` on an `Ok` value\"</span>, <span class=\"kw-2\">&amp;</span>t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; e,\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value, but never panics.\n    ///\n    /// Unlike [`unwrap`], this method is known to never panic on the\n    /// result types it is implemented for. Therefore, it can be used\n    /// instead of `unwrap` as a maintainability safeguard that will fail\n    /// to compile if the error type of the `Result` is later changed\n    /// to an error that can actually occur.\n    ///\n    /// [`unwrap`]: Result::unwrap\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![feature(never_type)]\n    /// # #![feature(unwrap_infallible)]\n    ///\n    /// fn only_good_news() -&gt; Result&lt;String, !&gt; {\n    ///     Ok(\"this is fine\".into())\n    /// }\n    ///\n    /// let s: String = only_good_news().into_ok();\n    /// println!(\"{s}\");\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"unwrap_infallible\"</span>, reason = <span class=\"string\">\"newly added\"</span>, issue = <span class=\"string\">\"61695\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>into_ok(<span class=\"self\">self</span>) -&gt; T\n    <span class=\"kw\">where\n        </span>E: Into&lt;!&gt;,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; x,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; e.into(),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Err`] value, but never panics.\n    ///\n    /// Unlike [`unwrap_err`], this method is known to never panic on the\n    /// result types it is implemented for. Therefore, it can be used\n    /// instead of `unwrap_err` as a maintainability safeguard that will fail\n    /// to compile if the ok type of the `Result` is later changed\n    /// to a type that can actually occur.\n    ///\n    /// [`unwrap_err`]: Result::unwrap_err\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #![feature(never_type)]\n    /// # #![feature(unwrap_infallible)]\n    ///\n    /// fn only_bad_news() -&gt; Result&lt;!, String&gt; {\n    ///     Err(\"Oops, it failed\".into())\n    /// }\n    ///\n    /// let error: String = only_bad_news().into_err();\n    /// println!(\"{error}\");\n    /// ```\n    </span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"unwrap_infallible\"</span>, reason = <span class=\"string\">\"newly added\"</span>, issue = <span class=\"string\">\"61695\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>into_err(<span class=\"self\">self</span>) -&gt; E\n    <span class=\"kw\">where\n        </span>T: Into&lt;!&gt;,\n    {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; x.into(),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; e,\n        }\n    }\n\n    <span class=\"comment\">////////////////////////////////////////////////////////////////////////\n    // Boolean operations on the values, eager and lazy\n    /////////////////////////////////////////////////////////////////////////\n\n    </span><span class=\"doccomment\">/// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n    ///\n    /// Arguments passed to `and` are eagerly evaluated; if you are passing the\n    /// result of a function call, it is recommended to use [`and_then`], which is\n    /// lazily evaluated.\n    ///\n    /// [`and_then`]: Result::and_then\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// let y: Result&lt;&amp;str, &amp;str&gt; = Err(\"late error\");\n    /// assert_eq!(x.and(y), Err(\"late error\"));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"early error\");\n    /// let y: Result&lt;&amp;str, &amp;str&gt; = Ok(\"foo\");\n    /// assert_eq!(x.and(y), Err(\"early error\"));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"not a 2\");\n    /// let y: Result&lt;&amp;str, &amp;str&gt; = Err(\"late error\");\n    /// assert_eq!(x.and(y), Err(\"not a 2\"));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// let y: Result&lt;&amp;str, &amp;str&gt; = Ok(\"different result type\");\n    /// assert_eq!(x.and(y), Ok(\"different result type\"));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>and&lt;U&gt;(<span class=\"self\">self</span>, res: <span class=\"prelude-ty\">Result</span>&lt;U, E&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;U, E&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; res,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n    ///\n    ///\n    /// This function can be used for control flow based on `Result` values.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn sq_then_to_string(x: u32) -&gt; Result&lt;String, &amp;'static str&gt; {\n    ///     x.checked_mul(x).map(|sq| sq.to_string()).ok_or(\"overflowed\")\n    /// }\n    ///\n    /// assert_eq!(Ok(2).and_then(sq_then_to_string), Ok(4.to_string()));\n    /// assert_eq!(Ok(1_000_000).and_then(sq_then_to_string), Err(\"overflowed\"));\n    /// assert_eq!(Err(\"not a number\").and_then(sq_then_to_string), Err(\"not a number\"));\n    /// ```\n    ///\n    /// Often used to chain fallible operations that may return [`Err`].\n    ///\n    /// ```\n    /// use std::{io::ErrorKind, path::Path};\n    ///\n    /// // Note: on Windows \"/\" maps to \"C:\\\"\n    /// let root_modified_time = Path::new(\"/\").metadata().and_then(|md| md.modified());\n    /// assert!(root_modified_time.is_ok());\n    ///\n    /// let should_fail = Path::new(\"/bad/path\").metadata().and_then(|md| md.modified());\n    /// assert!(should_fail.is_err());\n    /// assert_eq!(should_fail.unwrap_err().kind(), ErrorKind::NotFound);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_confusables(<span class=\"string\">\"flat_map\"</span>, <span class=\"string\">\"flatmap\"</span>)]\n    </span><span class=\"kw\">pub fn </span>and_then&lt;U, F: FnOnce(T) -&gt; <span class=\"prelude-ty\">Result</span>&lt;U, E&gt;&gt;(<span class=\"self\">self</span>, op: F) -&gt; <span class=\"prelude-ty\">Result</span>&lt;U, E&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; op(t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n    ///\n    /// Arguments passed to `or` are eagerly evaluated; if you are passing the\n    /// result of a function call, it is recommended to use [`or_else`], which is\n    /// lazily evaluated.\n    ///\n    /// [`or_else`]: Result::or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// let y: Result&lt;u32, &amp;str&gt; = Err(\"late error\");\n    /// assert_eq!(x.or(y), Ok(2));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"early error\");\n    /// let y: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(x.or(y), Ok(2));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"not a 2\");\n    /// let y: Result&lt;u32, &amp;str&gt; = Err(\"late error\");\n    /// assert_eq!(x.or(y), Err(\"late error\"));\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// let y: Result&lt;u32, &amp;str&gt; = Ok(100);\n    /// assert_eq!(x.or(y), Ok(2));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>or&lt;F&gt;(<span class=\"self\">self</span>, res: <span class=\"prelude-ty\">Result</span>&lt;T, F&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, F&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(v) =&gt; <span class=\"prelude-val\">Ok</span>(v),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; res,\n        }\n    }\n\n    <span class=\"doccomment\">/// Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.\n    ///\n    /// This function can be used for control flow based on result values.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn sq(x: u32) -&gt; Result&lt;u32, u32&gt; { Ok(x * x) }\n    /// fn err(x: u32) -&gt; Result&lt;u32, u32&gt; { Err(x) }\n    ///\n    /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));\n    /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));\n    /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));\n    /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>or_else&lt;F, O: FnOnce(E) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, F&gt;&gt;(<span class=\"self\">self</span>, op: O) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, F&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; <span class=\"prelude-val\">Ok</span>(t),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; op(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value or a provided default.\n    ///\n    /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing\n    /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n    /// which is lazily evaluated.\n    ///\n    /// [`unwrap_or_else`]: Result::unwrap_or_else\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let default = 2;\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(9);\n    /// assert_eq!(x.unwrap_or(default), 9);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"error\");\n    /// assert_eq!(x.unwrap_or(default), default);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>unwrap_or(<span class=\"self\">self</span>, default: T) -&gt; T {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; t,\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; default,\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value or computes it from a closure.\n    ///\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// fn count(x: &amp;str) -&gt; usize { x.len() }\n    ///\n    /// assert_eq!(Ok(2).unwrap_or_else(count), 2);\n    /// assert_eq!(Err(\"foo\").unwrap_or_else(count), 3);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>unwrap_or_else&lt;F: FnOnce(E) -&gt; T&gt;(<span class=\"self\">self</span>, op: F) -&gt; T {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; t,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; op(e),\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Ok`] value, consuming the `self` value,\n    /// without checking that the value is not an [`Err`].\n    ///\n    /// # Safety\n    ///\n    /// Calling this method on an [`Err`] is *[undefined behavior]*.\n    ///\n    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// assert_eq!(unsafe { x.unwrap_unchecked() }, 2);\n    /// ```\n    ///\n    /// ```no_run\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"emergency failure\");\n    /// unsafe { x.unwrap_unchecked(); } // Undefined behavior!\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"option_result_unwrap_unchecked\"</span>, since = <span class=\"string\">\"1.58.0\"</span>)]\n    </span><span class=\"kw\">pub unsafe fn </span>unwrap_unchecked(<span class=\"self\">self</span>) -&gt; T {\n        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>.is_ok());\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(t) =&gt; t,\n            <span class=\"comment\">// SAFETY: the safety contract must be upheld by the caller.\n            </span><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">unsafe </span>{ hint::unreachable_unchecked() },\n        }\n    }\n\n    <span class=\"doccomment\">/// Returns the contained [`Err`] value, consuming the `self` value,\n    /// without checking that the value is not an [`Ok`].\n    ///\n    /// # Safety\n    ///\n    /// Calling this method on an [`Ok`] is *[undefined behavior]*.\n    ///\n    /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(2);\n    /// unsafe { x.unwrap_err_unchecked() }; // Undefined behavior!\n    /// ```\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"emergency failure\");\n    /// assert_eq!(unsafe { x.unwrap_err_unchecked() }, \"emergency failure\");\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    #[stable(feature = <span class=\"string\">\"option_result_unwrap_unchecked\"</span>, since = <span class=\"string\">\"1.58.0\"</span>)]\n    </span><span class=\"kw\">pub unsafe fn </span>unwrap_err_unchecked(<span class=\"self\">self</span>) -&gt; E {\n        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>.is_err());\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"comment\">// SAFETY: the safety contract must be upheld by the caller.\n            </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">unsafe </span>{ hint::unreachable_unchecked() },\n            <span class=\"prelude-val\">Err</span>(e) =&gt; e,\n        }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, E&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;</span>T, E&gt; {\n    <span class=\"doccomment\">/// Maps a `Result&lt;&amp;T, E&gt;` to a `Result&lt;T, E&gt;` by copying the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let val = 12;\n    /// let x: Result&lt;&amp;i32, i32&gt; = Ok(&amp;val);\n    /// assert_eq!(x, Ok(&amp;12));\n    /// let copied = x.copied();\n    /// assert_eq!(copied, Ok(12));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_copied\"</span>, since = <span class=\"string\">\"1.59.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>copied(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt;\n    <span class=\"kw\">where\n        </span>T: Copy,\n    {\n        <span class=\"self\">self</span>.map(|<span class=\"kw-2\">&amp;</span>t| t)\n    }\n\n    <span class=\"doccomment\">/// Maps a `Result&lt;&amp;T, E&gt;` to a `Result&lt;T, E&gt;` by cloning the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let val = 12;\n    /// let x: Result&lt;&amp;i32, i32&gt; = Ok(&amp;val);\n    /// assert_eq!(x, Ok(&amp;12));\n    /// let cloned = x.cloned();\n    /// assert_eq!(cloned, Ok(12));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_cloned\"</span>, since = <span class=\"string\">\"1.59.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>cloned(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt;\n    <span class=\"kw\">where\n        </span>T: Clone,\n    {\n        <span class=\"self\">self</span>.map(|t| t.clone())\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, E&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw-2\">&amp;mut </span>T, E&gt; {\n    <span class=\"doccomment\">/// Maps a `Result&lt;&amp;mut T, E&gt;` to a `Result&lt;T, E&gt;` by copying the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut val = 12;\n    /// let x: Result&lt;&amp;mut i32, i32&gt; = Ok(&amp;mut val);\n    /// assert_eq!(x, Ok(&amp;mut 12));\n    /// let copied = x.copied();\n    /// assert_eq!(copied, Ok(12));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_copied\"</span>, since = <span class=\"string\">\"1.59.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>copied(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt;\n    <span class=\"kw\">where\n        </span>T: Copy,\n    {\n        <span class=\"self\">self</span>.map(|<span class=\"kw-2\">&amp;mut </span>t| t)\n    }\n\n    <span class=\"doccomment\">/// Maps a `Result&lt;&amp;mut T, E&gt;` to a `Result&lt;T, E&gt;` by cloning the contents of the\n    /// `Ok` part.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let mut val = 12;\n    /// let x: Result&lt;&amp;mut i32, i32&gt; = Ok(&amp;mut val);\n    /// assert_eq!(x, Ok(&amp;mut 12));\n    /// let cloned = x.cloned();\n    /// assert_eq!(cloned, Ok(12));\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"result_cloned\"</span>, since = <span class=\"string\">\"1.59.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>cloned(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt;\n    <span class=\"kw\">where\n        </span>T: Clone,\n    {\n        <span class=\"self\">self</span>.map(|t| t.clone())\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, E&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Option</span>&lt;T&gt;, E&gt; {\n    <span class=\"doccomment\">/// Transposes a `Result` of an `Option` into an `Option` of a `Result`.\n    ///\n    /// `Ok(None)` will be mapped to `None`.\n    /// `Ok(Some(_))` and `Err(_)` will be mapped to `Some(Ok(_))` and `Some(Err(_))`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #[derive(Debug, Eq, PartialEq)]\n    /// struct SomeErr;\n    ///\n    /// let x: Result&lt;Option&lt;i32&gt;, SomeErr&gt; = Ok(Some(5));\n    /// let y: Option&lt;Result&lt;i32, SomeErr&gt;&gt; = Some(Ok(5));\n    /// assert_eq!(x.transpose(), y);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[stable(feature = <span class=\"string\">\"transpose_result\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n    #[rustc_const_unstable(feature = <span class=\"string\">\"const_result\"</span>, issue = <span class=\"string\">\"82814\"</span>)]\n    </span><span class=\"kw\">pub const fn </span>transpose(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;T, E&gt;&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(x)) =&gt; <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Ok</span>(x)),\n            <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Some</span>(<span class=\"prelude-val\">Err</span>(e)),\n        }\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T, E&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"prelude-ty\">Result</span>&lt;T, E&gt;, E&gt; {\n    <span class=\"doccomment\">/// Converts from `Result&lt;Result&lt;T, E&gt;, E&gt;` to `Result&lt;T, E&gt;`\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(result_flattening)]\n    /// let x: Result&lt;Result&lt;&amp;'static str, u32&gt;, u32&gt; = Ok(Ok(\"hello\"));\n    /// assert_eq!(Ok(\"hello\"), x.flatten());\n    ///\n    /// let x: Result&lt;Result&lt;&amp;'static str, u32&gt;, u32&gt; = Ok(Err(6));\n    /// assert_eq!(Err(6), x.flatten());\n    ///\n    /// let x: Result&lt;Result&lt;&amp;'static str, u32&gt;, u32&gt; = Err(6);\n    /// assert_eq!(Err(6), x.flatten());\n    /// ```\n    ///\n    /// Flattening only removes one level of nesting at a time:\n    ///\n    /// ```\n    /// #![feature(result_flattening)]\n    /// let x: Result&lt;Result&lt;Result&lt;&amp;'static str, u32&gt;, u32&gt;, u32&gt; = Ok(Ok(Ok(\"hello\")));\n    /// assert_eq!(Ok(Ok(\"hello\")), x.flatten());\n    /// assert_eq!(Ok(\"hello\"), x.flatten().flatten());\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    #[unstable(feature = <span class=\"string\">\"result_flattening\"</span>, issue = <span class=\"string\">\"70142\"</span>)]\n    </span><span class=\"kw\">pub fn </span>flatten(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n        <span class=\"self\">self</span>.and_then(convert::identity)\n    }\n}\n\n<span class=\"comment\">// This is a separate function to reduce the code size of the methods\n</span><span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"panic_immediate_abort\"</span>))]\n#[inline(never)]\n#[cold]\n#[track_caller]\n</span><span class=\"kw\">fn </span>unwrap_failed(msg: <span class=\"kw-2\">&amp;</span>str, error: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>fmt::Debug) -&gt; ! {\n    <span class=\"macro\">panic!</span>(<span class=\"string\">\"{msg}: {error:?}\"</span>)\n}\n\n<span class=\"comment\">// This is a separate function to avoid constructing a `dyn Debug`\n// that gets immediately thrown away, since vtables don't get cleaned up\n// by dead code elimination if a trait object is constructed even if it goes\n// unused\n</span><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"panic_immediate_abort\"</span>)]\n#[inline]\n#[cold]\n#[track_caller]\n</span><span class=\"kw\">fn </span>unwrap_failed&lt;T&gt;(_msg: <span class=\"kw-2\">&amp;</span>str, _error: <span class=\"kw-2\">&amp;</span>T) -&gt; ! {\n    <span class=\"macro\">panic!</span>()\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Trait implementations\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E&gt; Clone <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt;\n<span class=\"kw\">where\n    </span>T: Clone,\n    E: Clone,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(x) =&gt; <span class=\"prelude-val\">Ok</span>(x.clone()),\n            <span class=\"prelude-val\">Err</span>(x) =&gt; <span class=\"prelude-val\">Err</span>(x.clone()),\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>clone_from(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, source: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n        <span class=\"kw\">match </span>(<span class=\"self\">self</span>, source) {\n            (<span class=\"prelude-val\">Ok</span>(to), <span class=\"prelude-val\">Ok</span>(from)) =&gt; to.clone_from(from),\n            (<span class=\"prelude-val\">Err</span>(to), <span class=\"prelude-val\">Err</span>(from)) =&gt; to.clone_from(from),\n            (to, from) =&gt; <span class=\"kw-2\">*</span>to = from.clone(),\n        }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E&gt; IntoIterator <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"kw\">type </span>Item = T;\n    <span class=\"kw\">type </span>IntoIter = IntoIter&lt;T&gt;;\n\n    <span class=\"doccomment\">/// Returns a consuming iterator over the possibly contained value.\n    ///\n    /// The iterator yields one value if the result is [`Result::Ok`], otherwise none.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// let x: Result&lt;u32, &amp;str&gt; = Ok(5);\n    /// let v: Vec&lt;u32&gt; = x.into_iter().collect();\n    /// assert_eq!(v, [5]);\n    ///\n    /// let x: Result&lt;u32, &amp;str&gt; = Err(\"nothing!\");\n    /// let v: Vec&lt;u32&gt; = x.into_iter().collect();\n    /// assert_eq!(v, []);\n    /// ```\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; IntoIter&lt;T&gt; {\n        IntoIter { inner: <span class=\"self\">self</span>.ok() }\n    }\n}\n\n<span class=\"attr\">#[stable(since = <span class=\"string\">\"1.4.0\"</span>, feature = <span class=\"string\">\"result_iter\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, E&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n    <span class=\"kw\">type </span>IntoIter = Iter&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n\n    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; Iter&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n        <span class=\"self\">self</span>.iter()\n    }\n}\n\n<span class=\"attr\">#[stable(since = <span class=\"string\">\"1.4.0\"</span>, feature = <span class=\"string\">\"result_iter\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, E&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n    <span class=\"kw\">type </span>IntoIter = IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n\n    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n        <span class=\"self\">self</span>.iter_mut()\n    }\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// The Result Iterators\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// An iterator over a reference to the [`Ok`] variant of a [`Result`].\n///\n/// The iterator yields one value if the result is [`Ok`], otherwise none.\n///\n/// Created by [`Result::iter`].\n</span><span class=\"attr\">#[derive(Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>Iter&lt;<span class=\"lifetime\">'a</span>, T: <span class=\"lifetime\">'a</span>&gt; {\n    inner: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;,\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T&gt; Iterator <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        <span class=\"kw\">let </span>n = <span class=\"kw\">if </span><span class=\"self\">self</span>.inner.is_some() { <span class=\"number\">1 </span>} <span class=\"kw\">else </span>{ <span class=\"number\">0 </span>};\n        (n, <span class=\"prelude-val\">Some</span>(n))\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T&gt; DoubleEndedIterator <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; ExactSizeIterator <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'_</span>, T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"fused\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; FusedIterator <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'_</span>, T&gt; {}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"trusted_len\"</span>, issue = <span class=\"string\">\"37572\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;A&gt; TrustedLen <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'_</span>, A&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; Clone <span class=\"kw\">for </span>Iter&lt;<span class=\"lifetime\">'_</span>, T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        Iter { inner: <span class=\"self\">self</span>.inner }\n    }\n}\n\n<span class=\"doccomment\">/// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n///\n/// Created by [`Result::iter_mut`].\n</span><span class=\"attr\">#[derive(Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>IterMut&lt;<span class=\"lifetime\">'a</span>, T: <span class=\"lifetime\">'a</span>&gt; {\n    inner: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T&gt;,\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T&gt; Iterator <span class=\"kw\">for </span>IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        <span class=\"kw\">let </span>n = <span class=\"kw\">if </span><span class=\"self\">self</span>.inner.is_some() { <span class=\"number\">1 </span>} <span class=\"kw\">else </span>{ <span class=\"number\">0 </span>};\n        (n, <span class=\"prelude-val\">Some</span>(n))\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T&gt; DoubleEndedIterator <span class=\"kw\">for </span>IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; ExactSizeIterator <span class=\"kw\">for </span>IterMut&lt;<span class=\"lifetime\">'_</span>, T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"fused\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; FusedIterator <span class=\"kw\">for </span>IterMut&lt;<span class=\"lifetime\">'_</span>, T&gt; {}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"trusted_len\"</span>, issue = <span class=\"string\">\"37572\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;A&gt; TrustedLen <span class=\"kw\">for </span>IterMut&lt;<span class=\"lifetime\">'_</span>, A&gt; {}\n\n<span class=\"doccomment\">/// An iterator over the value in a [`Ok`] variant of a [`Result`].\n///\n/// The iterator yields one value if the result is [`Ok`], otherwise none.\n///\n/// This struct is created by the [`into_iter`] method on\n/// [`Result`] (provided by the [`IntoIterator`] trait).\n///\n/// [`into_iter`]: IntoIterator::into_iter\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>IntoIter&lt;T&gt; {\n    inner: <span class=\"prelude-ty\">Option</span>&lt;T&gt;,\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; Iterator <span class=\"kw\">for </span>IntoIter&lt;T&gt; {\n    <span class=\"kw\">type </span>Item = T;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>size_hint(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; (usize, <span class=\"prelude-ty\">Option</span>&lt;usize&gt;) {\n        <span class=\"kw\">let </span>n = <span class=\"kw\">if </span><span class=\"self\">self</span>.inner.is_some() { <span class=\"number\">1 </span>} <span class=\"kw\">else </span>{ <span class=\"number\">0 </span>};\n        (n, <span class=\"prelude-val\">Some</span>(n))\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; DoubleEndedIterator <span class=\"kw\">for </span>IntoIter&lt;T&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;T&gt; {\n        <span class=\"self\">self</span>.inner.take()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; ExactSizeIterator <span class=\"kw\">for </span>IntoIter&lt;T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"fused\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; FusedIterator <span class=\"kw\">for </span>IntoIter&lt;T&gt; {}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"trusted_len\"</span>, issue = <span class=\"string\">\"37572\"</span>)]\n</span><span class=\"kw\">unsafe impl</span>&lt;A&gt; TrustedLen <span class=\"kw\">for </span>IntoIter&lt;A&gt; {}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// FromIterator\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;A, E, V: FromIterator&lt;A&gt;&gt; FromIterator&lt;<span class=\"prelude-ty\">Result</span>&lt;A, E&gt;&gt; <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;V, E&gt; {\n    <span class=\"doccomment\">/// Takes each element in the `Iterator`: if it is an `Err`, no further\n    /// elements are taken, and the `Err` is returned. Should no `Err` occur, a\n    /// container with the values of each `Result` is returned.\n    ///\n    /// Here is an example which increments every integer in a vector,\n    /// checking for overflow:\n    ///\n    /// ```\n    /// let v = vec![1, 2];\n    /// let res: Result&lt;Vec&lt;u32&gt;, &amp;'static str&gt; = v.iter().map(|x: &amp;u32|\n    ///     x.checked_add(1).ok_or(\"Overflow!\")\n    /// ).collect();\n    /// assert_eq!(res, Ok(vec![2, 3]));\n    /// ```\n    ///\n    /// Here is another example that tries to subtract one from another list\n    /// of integers, this time checking for underflow:\n    ///\n    /// ```\n    /// let v = vec![1, 2, 0];\n    /// let res: Result&lt;Vec&lt;u32&gt;, &amp;'static str&gt; = v.iter().map(|x: &amp;u32|\n    ///     x.checked_sub(1).ok_or(\"Underflow!\")\n    /// ).collect();\n    /// assert_eq!(res, Err(\"Underflow!\"));\n    /// ```\n    ///\n    /// Here is a variation on the previous example, showing that no\n    /// further elements are taken from `iter` after the first `Err`.\n    ///\n    /// ```\n    /// let v = vec![3, 2, 1, 10];\n    /// let mut shared = 0;\n    /// let res: Result&lt;Vec&lt;u32&gt;, &amp;'static str&gt; = v.iter().map(|x: &amp;u32| {\n    ///     shared += x;\n    ///     x.checked_sub(2).ok_or(\"Underflow!\")\n    /// }).collect();\n    /// assert_eq!(res, Err(\"Underflow!\"));\n    /// assert_eq!(shared, 6);\n    /// ```\n    ///\n    /// Since the third element caused an underflow, no further elements were taken,\n    /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item = <span class=\"prelude-ty\">Result</span>&lt;A, E&gt;&gt;&gt;(iter: I) -&gt; <span class=\"prelude-ty\">Result</span>&lt;V, E&gt; {\n        iter::try_process(iter.into_iter(), |i| i.collect())\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"try_trait_v2\"</span>, issue = <span class=\"string\">\"84277\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E&gt; ops::Try <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, E&gt; {\n    <span class=\"kw\">type </span>Output = T;\n    <span class=\"kw\">type </span>Residual = <span class=\"prelude-ty\">Result</span>&lt;convert::Infallible, E&gt;;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>from_output(output: <span class=\"self\">Self</span>::Output) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"prelude-val\">Ok</span>(output)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>branch(<span class=\"self\">self</span>) -&gt; ControlFlow&lt;<span class=\"self\">Self</span>::Residual, <span class=\"self\">Self</span>::Output&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self </span>{\n            <span class=\"prelude-val\">Ok</span>(v) =&gt; ControlFlow::Continue(v),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; ControlFlow::Break(<span class=\"prelude-val\">Err</span>(e)),\n        }\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"try_trait_v2\"</span>, issue = <span class=\"string\">\"84277\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E, F: From&lt;E&gt;&gt; ops::FromResidual&lt;<span class=\"prelude-ty\">Result</span>&lt;convert::Infallible, E&gt;&gt; <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, F&gt; {\n    <span class=\"attr\">#[inline]\n    #[track_caller]\n    </span><span class=\"kw\">fn </span>from_residual(residual: <span class=\"prelude-ty\">Result</span>&lt;convert::Infallible, E&gt;) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw\">match </span>residual {\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(From::from(e)),\n        }\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"try_trait_v2_yeet\"</span>, issue = <span class=\"string\">\"96374\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E, F: From&lt;E&gt;&gt; ops::FromResidual&lt;ops::Yeet&lt;E&gt;&gt; <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;T, F&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>from_residual(ops::Yeet(e): ops::Yeet&lt;E&gt;) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"prelude-val\">Err</span>(From::from(e))\n    }\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"try_trait_v2_residual\"</span>, issue = <span class=\"string\">\"91285\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, E&gt; ops::Residual&lt;T&gt; <span class=\"kw\">for </span><span class=\"prelude-ty\">Result</span>&lt;convert::Infallible, E&gt; {\n    <span class=\"kw\">type </span>TryType = <span class=\"prelude-ty\">Result</span>&lt;T, E&gt;;\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:12:35.223Z"
}