{
	"title": "Traits: Defining Shared Behavior - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch10-02-traits.html",
	"markdown": "# Traits: Defining Shared Behavior - The Rust Programming Language\n\nA _trait_ defines the functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way. We can use _trait bounds_ to specify that a generic type can be any type that has certain behavior.\n\nNote: Traits are similar to a feature often called _interfaces_ in other languages, although with some differences.\n\n### [Defining a Trait](#defining-a-trait)\n\nA type’s behavior consists of the methods we can call on that type. Different types share the same behavior if we can call the same methods on all of those types. Trait definitions are a way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.\n\nFor example, let’s say we have multiple structs that hold various kinds and amounts of text: a `NewsArticle` struct that holds a news story filed in a particular location and a `Tweet` that can have, at most, 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.\n\nWe want to make a media aggregator library crate named `aggregator` that can display summaries of data that might be stored in a `NewsArticle` or `Tweet` instance. To do this, we need a summary from each type, and we’ll request that summary by calling a `summarize` method on an instance. Listing 10-12 shows the definition of a public `Summary` trait that expresses this behavior.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n```\n\nListing 10-12: A `Summary` trait that consists of the behavior provided by a `summarize` method\n\nHere, we declare a trait using the `trait` keyword and then the trait’s name, which is `Summary` in this case. We also declare the trait as `pub` so that crates depending on this crate can make use of this trait too, as we’ll see in a few examples. Inside the curly brackets, we declare the method signatures that describe the behaviors of the types that implement this trait, which in this case is `fn summarize(&self) -> String`.\n\nAfter the method signature, instead of providing an implementation within curly brackets, we use a semicolon. Each type implementing this trait must provide its own custom behavior for the body of the method. The compiler will enforce that any type that has the `Summary` trait will have the method `summarize` defined with this signature exactly.\n\nA trait can have multiple methods in its body: the method signatures are listed one per line, and each line ends in a semicolon.\n\n### [Implementing a Trait on a Type](#implementing-a-trait-on-a-type)\n\nNow that we’ve defined the desired signatures of the `Summary` trait’s methods, we can implement it on the types in our media aggregator. Listing 10-13 shows an implementation of the `Summary` trait on the `NewsArticle` struct that uses the headline, the author, and the location to create the return value of `summarize`. For the `Tweet` struct, we define `summarize` as the username followed by the entire text of the tweet, assuming that the tweet content is already limited to 280 characters.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\nListing 10-13: Implementing the `Summary` trait on the `NewsArticle` and `Tweet` types\n\nImplementing a trait on a type is similar to implementing regular methods. The difference is that after `impl`, we put the trait name we want to implement, then use the `for` keyword, and then specify the name of the type we want to implement the trait for. Within the `impl` block, we put the method signatures that the trait definition has defined. Instead of adding a semicolon after each signature, we use curly brackets and fill in the method body with the specific behavior that we want the methods of the trait to have for the particular type.\n\nNow that the library has implemented the `Summary` trait on `NewsArticle` and `Tweet`, users of the crate can call the trait methods on instances of `NewsArticle` and `Tweet` in the same way we call regular methods. The only difference is that the user must bring the trait into scope as well as the types. Here’s an example of how a binary crate could use our `aggregator` library crate:\n\n```rust\nuse aggregator::{Summary, Tweet};\n\nfn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n}\n```\n\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already know, people`.\n\nOther crates that depend on the `aggregator` crate can also bring the `Summary` trait into scope to implement `Summary` on their own types. One restriction to note is that we can implement a trait on a type only if either the trait or the type, or both, are local to our crate. For example, we can implement standard library traits like `Display` on a custom type like `Tweet` as part of our `aggregator` crate functionality because the type `Tweet` is local to our `aggregator` crate. We can also implement `Summary` on `Vec<T>` in our `aggregator` crate because the trait `Summary` is local to our `aggregator` crate.\n\nBut we can’t implement external traits on external types. For example, we can’t implement the `Display` trait on `Vec<T>` within our `aggregator` crate because `Display` and `Vec<T>` are both defined in the standard library and aren’t local to our `aggregator` crate. This restriction is part of a property called _coherence_, and more specifically the _orphan rule_, so named because the parent type is not present. This rule ensures that other people’s code can’t break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn’t know which implementation to use.\n\n### [Default Implementations](#default-implementations)\n\nSometimes it’s useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type. Then, as we implement the trait on a particular type, we can keep or override each method’s default behavior.\n\nIn Listing 10-14, we specify a default string for the `summarize` method of the `Summary` trait instead of only defining the method signature, as we did in Listing 10-12.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String {\n        String::from(\"(Read more...)\")\n    }\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\nListing 10-14: Defining a `Summary` trait with a default implementation of the `summarize` method\n\nTo use a default implementation to summarize instances of `NewsArticle`, we specify an empty `impl` block with `impl Summary for NewsArticle {}`.\n\nEven though we’re no longer defining the `summarize` method on `NewsArticle` directly, we’ve provided a default implementation and specified that `NewsArticle` implements the `Summary` trait. As a result, we can still call the `summarize` method on an instance of `NewsArticle`, like this:\n\n```rust\nuse aggregator::{self, NewsArticle, Summary};\n\nfn main() {\n    let article = NewsArticle {\n        headline: String::from(\"Penguins win the Stanley Cup Championship!\"),\n        location: String::from(\"Pittsburgh, PA, USA\"),\n        author: String::from(\"Iceburgh\"),\n        content: String::from(\n            \"The Pittsburgh Penguins once again are the best \\\n             hockey team in the NHL.\",\n        ),\n    };\n\n    println!(\"New article available! {}\", article.summarize());\n}\n```\n\nThis code prints `New article available! (Read more...)`.\n\nCreating a default implementation doesn’t require us to change anything about the implementation of `Summary` on `Tweet` in Listing 10-13. The reason is that the syntax for overriding a default implementation is the same as the syntax for implementing a trait method that doesn’t have a default implementation.\n\nDefault implementations can call other methods in the same trait, even if those other methods don’t have a default implementation. In this way, a trait can provide a lot of useful functionality and only require implementors to specify a small part of it. For example, we could define the `Summary` trait to have a `summarize_author` method whose implementation is required, and then define a `summarize` method that has a default implementation that calls the `summarize_author` method:\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n\n    fn summarize(&self) -> String {\n        format!(\"(Read more from {}...)\", self.summarize_author())\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!(\"@{}\", self.username)\n    }\n}\n```\n\nTo use this version of `Summary`, we only need to define `summarize_author` when we implement the trait on a type:\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n\n    fn summarize(&self) -> String {\n        format!(\"(Read more from {}...)\", self.summarize_author())\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!(\"@{}\", self.username)\n    }\n}\n```\n\nAfter we define `summarize_author`, we can call `summarize` on instances of the `Tweet` struct, and the default implementation of `summarize` will call the definition of `summarize_author` that we’ve provided. Because we’ve implemented `summarize_author`, the `Summary` trait has given us the behavior of the `summarize` method without requiring us to write any more code. Here’s what that looks like:\n\n```rust\nuse aggregator::{self, Summary, Tweet};\n\nfn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n}\n```\n\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\n\nNote that it isn’t possible to call the default implementation from an overriding implementation of that same method.\n\n### [Traits as Parameters](#traits-as-parameters)\n\nNow that you know how to define and implement traits, we can explore how to use traits to define functions that accept many different types. We’ll use the `Summary` trait we implemented on the `NewsArticle` and `Tweet` types in Listing 10-13 to define a `notify` function that calls the `summarize` method on its `item` parameter, which is of some type that implements the `Summary` trait. To do this, we use the `impl Trait` syntax, like this:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nInstead of a concrete type for the `item` parameter, we specify the `impl` keyword and the trait name. This parameter accepts any type that implements the specified trait. In the body of `notify`, we can call any methods on `item` that come from the `Summary` trait, such as `summarize`. We can call `notify` and pass in any instance of `NewsArticle` or `Tweet`. Code that calls the function with any other type, such as a `String` or an `i32`, won’t compile because those types don’t implement `Summary`.\n\n#### [Trait Bound Syntax](#trait-bound-syntax)\n\nThe `impl Trait` syntax works for straightforward cases but is actually syntax sugar for a longer form known as a _trait bound_; it looks like this:\n\n```rust\npub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis longer form is equivalent to the example in the previous section but is more verbose. We place trait bounds with the declaration of the generic type parameter after a colon and inside angle brackets.\n\nThe `impl Trait` syntax is convenient and makes for more concise code in simple cases, while the fuller trait bound syntax can express more complexity in other cases. For example, we can have two parameters that implement `Summary`. Doing so with the `impl Trait` syntax looks like this:\n\n```rust\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\n```\n\nUsing `impl Trait` is appropriate if we want this function to allow `item1` and `item2` to have different types (as long as both types implement `Summary`). If we want to force both parameters to have the same type, however, we must use a trait bound, like this:\n\n```rust\npub fn notify<T: Summary>(item1: &T, item2: &T) {\n```\n\nThe generic type `T` specified as the type of the `item1` and `item2` parameters constrains the function such that the concrete type of the value passed as an argument for `item1` and `item2` must be the same.\n\n#### [Specifying Multiple Trait Bounds with the `+` Syntax](#specifying-multiple-trait-bounds-with-the--syntax)\n\nWe can also specify more than one trait bound. Say we wanted `notify` to use display formatting as well as `summarize` on `item`: we specify in the `notify` definition that `item` must implement both `Display` and `Summary`. We can do so using the `+` syntax:\n\n```rust\npub fn notify(item: &(impl Summary + Display)) {\n```\n\nThe `+` syntax is also valid with trait bounds on generic types:\n\n```rust\npub fn notify<T: Summary + Display>(item: &T) {\n```\n\nWith the two trait bounds specified, the body of `notify` can call `summarize` and use `{}` to format `item`.\n\n#### [Clearer Trait Bounds with `where` Clauses](#clearer-trait-bounds-with-where-clauses)\n\nUsing too many trait bounds has its downsides. Each generic has its own trait bounds, so functions with multiple generic type parameters can contain lots of trait bound information between the function’s name and its parameter list, making the function signature hard to read. For this reason, Rust has alternate syntax for specifying trait bounds inside a `where` clause after the function signature. So, instead of writing this:\n\n```rust\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n```\n\nwe can use a `where` clause, like this:\n\n```rust\nfn some_function<T, U>(t: &T, u: &U) -> i32\nwhere\n    T: Display + Clone,\n    U: Clone + Debug,\n{\n    unimplemented!()\n}\n```\n\nThis function’s signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.\n\n### [Returning Types That Implement Traits](#returning-types-that-implement-traits)\n\nWe can also use the `impl Trait` syntax in the return position to return a value of some type that implements a trait, as shown here:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\nfn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    }\n}\n```\n\nBy using `impl Summary` for the return type, we specify that the `returns_summarizable` function returns some type that implements the `Summary` trait without naming the concrete type. In this case, `returns_summarizable` returns a `Tweet`, but the code calling this function doesn’t need to know that.\n\nThe ability to specify a return type only by the trait it implements is especially useful in the context of closures and iterators, which we cover in Chapter 13. Closures and iterators create types that only the compiler knows or types that are very long to specify. The `impl Trait` syntax lets you concisely specify that a function returns some type that implements the `Iterator` trait without needing to write out a very long type.\n\nHowever, you can only use `impl Trait` if you’re returning a single type. For example, this code that returns either a `NewsArticle` or a `Tweet` with the return type specified as `impl Summary` wouldn’t work:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\nfn returns_summarizable(switch: bool) -> impl Summary {\n    if switch {\n        NewsArticle {\n            headline: String::from(\n                \"Penguins win the Stanley Cup Championship!\",\n            ),\n            location: String::from(\"Pittsburgh, PA, USA\"),\n            author: String::from(\"Iceburgh\"),\n            content: String::from(\n                \"The Pittsburgh Penguins once again are the best \\\n                 hockey team in the NHL.\",\n            ),\n        }\n    } else {\n        Tweet {\n            username: String::from(\"horse_ebooks\"),\n            content: String::from(\n                \"of course, as you probably already know, people\",\n            ),\n            reply: false,\n            retweet: false,\n        }\n    }\n}\n```\n\nReturning either a `NewsArticle` or a `Tweet` isn’t allowed due to restrictions around how the `impl Trait` syntax is implemented in the compiler. We’ll cover how to write a function with this behavior in the [“Using Trait Objects That Allow for Values of Different Types”](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section of Chapter 17.\n\n### [Using Trait Bounds to Conditionally Implement Methods](#using-trait-bounds-to-conditionally-implement-methods)\n\nBy using a trait bound with an `impl` block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits. For example, the type `Pair<T>` in Listing 10-15 always implements the `new` function to return a new instance of `Pair<T>` (recall from the [“Defining Methods”](about:blank/ch05-03-method-syntax.html#defining-methods) section of Chapter 5 that `Self` is a type alias for the type of the `impl` block, which in this case is `Pair<T>`). But in the next `impl` block, `Pair<T>` only implements the `cmp_display` method if its inner type `T` implements the `PartialOrd` trait that enables comparison _and_ the `Display` trait that enables printing.\n\nFilename: src/lib.rs\n\n```rust\nuse std::fmt::Display;\n\nstruct Pair<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Pair<T> {\n    fn new(x: T, y: T) -> Self {\n        Self { x, y }\n    }\n}\n\nimpl<T: Display + PartialOrd> Pair<T> {\n    fn cmp_display(&self) {\n        if self.x >= self.y {\n            println!(\"The largest member is x = {}\", self.x);\n        } else {\n            println!(\"The largest member is y = {}\", self.y);\n        }\n    }\n}\n```\n\nListing 10-15: Conditionally implementing methods on a generic type depending on trait bounds\n\nWe can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called _blanket implementations_ and are used extensively in the Rust standard library. For example, the standard library implements the `ToString` trait on any type that implements the `Display` trait. The `impl` block in the standard library looks similar to this code:\n\n```rust\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\n\nBecause the standard library has this blanket implementation, we can call the `to_string` method defined by the `ToString` trait on any type that implements the `Display` trait. For example, we can turn integers into their corresponding `String` values like this because integers implement `Display`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = 3.to_string();\n}\n```\n\nBlanket implementations appear in the documentation for the trait in the “Implementors” section.\n\nTraits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type which didn’t define the method. But Rust moves these errors to compile time so we’re forced to fix the problems before our code is even able to run. Additionally, we don’t have to write code that checks for behavior at runtime because we’ve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Traits: Defining Shared Behavior - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"traits-defining-shared-behavior\"><a class=\"header\" href=\"#traits-defining-shared-behavior\">Traits: Defining Shared Behavior</a></h2>\n<p>A <em>trait</em> defines the functionality a particular type has and can share with\nother types. We can use traits to define shared behavior in an abstract way. We\ncan use <em>trait bounds</em> to specify that a generic type can be any type that has\ncertain behavior.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: Traits are similar to a feature often called <em>interfaces</em> in other\nlanguages, although with some differences.</p>\n</section>\n<h3 id=\"defining-a-trait\"><a class=\"header\" href=\"#defining-a-trait\">Defining a Trait</a></h3>\n<p>A type’s behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose.</p>\n<p>For example, let’s say we have multiple structs that hold various kinds and\namounts of text: a <code class=\"hljs\">NewsArticle</code> struct that holds a news story filed in a\nparticular location and a <code class=\"hljs\">Tweet</code> that can have, at most, 280 characters along\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\nto another tweet.</p>\n<p>We want to make a media aggregator library crate named <code class=\"hljs\">aggregator</code> that can\ndisplay summaries of data that might be stored in a <code class=\"hljs\">NewsArticle</code> or <code class=\"hljs\">Tweet</code>\ninstance. To do this, we need a summary from each type, and we’ll request that\nsummary by calling a <code class=\"hljs\">summarize</code> method on an instance. Listing 10-12 shows the\ndefinition of a public <code class=\"hljs\">Summary</code> trait that expresses this behavior.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n}</code></pre>\n<p><span class=\"caption\">Listing 10-12: A <code class=\"hljs\">Summary</code> trait that consists of the\nbehavior provided by a <code class=\"hljs\">summarize</code> method</span></p>\n<p>Here, we declare a trait using the <code class=\"hljs\">trait</code> keyword and then the trait’s name,\nwhich is <code class=\"hljs\">Summary</code> in this case. We also declare the trait as <code class=\"hljs\">pub</code> so that\ncrates depending on this crate can make use of this trait too, as we’ll see in\na few examples. Inside the curly brackets, we declare the method signatures\nthat describe the behaviors of the types that implement this trait, which in\nthis case is <code class=\"hljs\">fn summarize(&amp;self) -&gt; String</code>.</p>\n<p>After the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the <code class=\"hljs\">Summary</code> trait will have the method <code class=\"hljs\">summarize</code>\ndefined with this signature exactly.</p>\n<p>A trait can have multiple methods in its body: the method signatures are listed\none per line, and each line ends in a semicolon.</p>\n<h3 id=\"implementing-a-trait-on-a-type\"><a class=\"header\" href=\"#implementing-a-trait-on-a-type\">Implementing a Trait on a Type</a></h3>\n<p>Now that we’ve defined the desired signatures of the <code class=\"hljs\">Summary</code> trait’s methods,\nwe can implement it on the types in our media aggregator. Listing 10-13 shows\nan implementation of the <code class=\"hljs\">Summary</code> trait on the <code class=\"hljs\">NewsArticle</code> struct that uses\nthe headline, the author, and the location to create the return value of\n<code class=\"hljs\">summarize</code>. For the <code class=\"hljs\">Tweet</code> struct, we define <code class=\"hljs\">summarize</code> as the username\nfollowed by the entire text of the tweet, assuming that the tweet content is\nalready limited to 280 characters.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-13: Implementing the <code class=\"hljs\">Summary</code> trait on the\n<code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> types</span></p>\n<p>Implementing a trait on a type is similar to implementing regular methods. The\ndifference is that after <code class=\"hljs\">impl</code>, we put the trait name we want to implement,\nthen use the <code class=\"hljs\">for</code> keyword, and then specify the name of the type we want to\nimplement the trait for. Within the <code class=\"hljs\">impl</code> block, we put the method signatures\nthat the trait definition has defined. Instead of adding a semicolon after each\nsignature, we use curly brackets and fill in the method body with the specific\nbehavior that we want the methods of the trait to have for the particular type.</p>\n<p>Now that the library has implemented the <code class=\"hljs\">Summary</code> trait on <code class=\"hljs\">NewsArticle</code> and\n<code class=\"hljs\">Tweet</code>, users of the crate can call the trait methods on instances of\n<code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> in the same way we call regular methods. The only\ndifference is that the user must bring the trait into scope as well as the\ntypes. Here’s an example of how a binary crate could use our <code class=\"hljs\">aggregator</code>\nlibrary crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> aggregator::{Summary, Tweet};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tweet = Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"1 new tweet: {}\"</span>, tweet.summarize());\n}</code></pre>\n<p>This code prints <code class=\"hljs\">1 new tweet: horse_ebooks: of course, as you probably already know, people</code>.</p>\n<p>Other crates that depend on the <code class=\"hljs\">aggregator</code> crate can also bring the <code class=\"hljs\">Summary</code>\ntrait into scope to implement <code class=\"hljs\">Summary</code> on their own types. One restriction to\nnote is that we can implement a trait on a type only if either the trait or the\ntype, or both, are local to our crate. For example, we can implement standard\nlibrary traits like <code class=\"hljs\">Display</code> on a custom type like <code class=\"hljs\">Tweet</code> as part of our\n<code class=\"hljs\">aggregator</code> crate functionality because the type <code class=\"hljs\">Tweet</code> is local to our\n<code class=\"hljs\">aggregator</code> crate. We can also implement <code class=\"hljs\">Summary</code> on <code class=\"hljs\">Vec&lt;T&gt;</code> in our\n<code class=\"hljs\">aggregator</code> crate because the trait <code class=\"hljs\">Summary</code> is local to our <code class=\"hljs\">aggregator</code>\ncrate.</p>\n<p>But we can’t implement external traits on external types. For example, we can’t\nimplement the <code class=\"hljs\">Display</code> trait on <code class=\"hljs\">Vec&lt;T&gt;</code> within our <code class=\"hljs\">aggregator</code> crate because\n<code class=\"hljs\">Display</code> and <code class=\"hljs\">Vec&lt;T&gt;</code> are both defined in the standard library and aren’t\nlocal to our <code class=\"hljs\">aggregator</code> crate. This restriction is part of a property called\n<em>coherence</em>, and more specifically the <em>orphan rule</em>, so named because the\nparent type is not present. This rule ensures that other people’s code can’t\nbreak your code and vice versa. Without the rule, two crates could implement\nthe same trait for the same type, and Rust wouldn’t know which implementation\nto use.</p>\n<h3 id=\"default-implementations\"><a class=\"header\" href=\"#default-implementations\">Default Implementations</a></h3>\n<p>Sometimes it’s useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method’s default behavior.</p>\n<p>In Listing 10-14, we specify a default string for the <code class=\"hljs\">summarize</code> method of the\n<code class=\"hljs\">Summary</code> trait instead of only defining the method signature, as we did in\nListing 10-12.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"(Read more...)\"</span>)\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 10-14: Defining a <code class=\"hljs\">Summary</code> trait with a default\nimplementation of the <code class=\"hljs\">summarize</code> method</span></p>\n<p>To use a default implementation to summarize instances of <code class=\"hljs\">NewsArticle</code>, we\nspecify an empty <code class=\"hljs\">impl</code> block with <code class=\"hljs\">impl Summary for NewsArticle {}</code>.</p>\n<p>Even though we’re no longer defining the <code class=\"hljs\">summarize</code> method on <code class=\"hljs\">NewsArticle</code>\ndirectly, we’ve provided a default implementation and specified that\n<code class=\"hljs\">NewsArticle</code> implements the <code class=\"hljs\">Summary</code> trait. As a result, we can still call\nthe <code class=\"hljs\">summarize</code> method on an instance of <code class=\"hljs\">NewsArticle</code>, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> aggregator::{<span class=\"hljs-keyword\">self</span>, NewsArticle, Summary};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> article = NewsArticle {\n        headline: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Penguins win the Stanley Cup Championship!\"</span>),\n        location: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Pittsburgh, PA, USA\"</span>),\n        author: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Iceburgh\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"The Pittsburgh Penguins once again are the best \\\n             hockey team in the NHL.\"</span>,\n        ),\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"New article available! {}\"</span>, article.summarize());\n<span class=\"boring\">}</span></code></pre>\n<p>This code prints <code class=\"hljs\">New article available! (Read more...)</code>.</p>\n<p>Creating a default implementation doesn’t require us to change anything about\nthe implementation of <code class=\"hljs\">Summary</code> on <code class=\"hljs\">Tweet</code> in Listing 10-13. The reason is that\nthe syntax for overriding a default implementation is the same as the syntax\nfor implementing a trait method that doesn’t have a default implementation.</p>\n<p>Default implementations can call other methods in the same trait, even if those\nother methods don’t have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the <code class=\"hljs\">Summary</code> trait to have a\n<code class=\"hljs\">summarize_author</code> method whose implementation is required, and then define a\n<code class=\"hljs\">summarize</code> method that has a default implementation that calls the\n<code class=\"hljs\">summarize_author</code> method:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"(Read more from {}...)\"</span>, <span class=\"hljs-keyword\">self</span>.summarize_author())\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"@{}\"</span>, <span class=\"hljs-keyword\">self</span>.username)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>To use this version of <code class=\"hljs\">Summary</code>, we only need to define <code class=\"hljs\">summarize_author</code>\nwhen we implement the trait on a type:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"(Read more from {}...)\"</span>, <span class=\"hljs-keyword\">self</span>.summarize_author())\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"@{}\"</span>, <span class=\"hljs-keyword\">self</span>.username)\n    }\n}</code></pre>\n<p>After we define <code class=\"hljs\">summarize_author</code>, we can call <code class=\"hljs\">summarize</code> on instances of the\n<code class=\"hljs\">Tweet</code> struct, and the default implementation of <code class=\"hljs\">summarize</code> will call the\ndefinition of <code class=\"hljs\">summarize_author</code> that we’ve provided. Because we’ve implemented\n<code class=\"hljs\">summarize_author</code>, the <code class=\"hljs\">Summary</code> trait has given us the behavior of the\n<code class=\"hljs\">summarize</code> method without requiring us to write any more code. Here’s what\nthat looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> aggregator::{<span class=\"hljs-keyword\">self</span>, Summary, Tweet};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> tweet = Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"1 new tweet: {}\"</span>, tweet.summarize());\n<span class=\"boring\">}</span></code></pre>\n<p>This code prints <code class=\"hljs\">1 new tweet: (Read more from @horse_ebooks...)</code>.</p>\n<p>Note that it isn’t possible to call the default implementation from an\noverriding implementation of that same method.</p>\n<h3 id=\"traits-as-parameters\"><a class=\"header\" href=\"#traits-as-parameters\">Traits as Parameters</a></h3>\n<p>Now that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types. We’ll use the\n<code class=\"hljs\">Summary</code> trait we implemented on the <code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> types in\nListing 10-13 to define a <code class=\"hljs\">notify</code> function that calls the <code class=\"hljs\">summarize</code> method\non its <code class=\"hljs\">item</code> parameter, which is of some type that implements the <code class=\"hljs\">Summary</code>\ntrait. To do this, we use the <code class=\"hljs\">impl Trait</code> syntax, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item: &amp;<span class=\"hljs-keyword\">impl</span> Summary) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Breaking news! {}\"</span>, item.summarize());\n}</code></pre>\n<p>Instead of a concrete type for the <code class=\"hljs\">item</code> parameter, we specify the <code class=\"hljs\">impl</code>\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of <code class=\"hljs\">notify</code>, we can call any methods on <code class=\"hljs\">item</code>\nthat come from the <code class=\"hljs\">Summary</code> trait, such as <code class=\"hljs\">summarize</code>. We can call <code class=\"hljs\">notify</code>\nand pass in any instance of <code class=\"hljs\">NewsArticle</code> or <code class=\"hljs\">Tweet</code>. Code that calls the\nfunction with any other type, such as a <code class=\"hljs\">String</code> or an <code class=\"hljs\">i32</code>, won’t compile\nbecause those types don’t implement <code class=\"hljs\">Summary</code>.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"fixing-the-largest-function-with-trait-bounds\"></a></p>\n<h4 id=\"trait-bound-syntax\"><a class=\"header\" href=\"#trait-bound-syntax\">Trait Bound Syntax</a></h4>\n<p>The <code class=\"hljs\">impl Trait</code> syntax works for straightforward cases but is actually syntax\nsugar for a longer form known as a <em>trait bound</em>; it looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary&gt;(item: &amp;T) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Breaking news! {}\"</span>, item.summarize());\n}</code></pre>\n<p>This longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets.</p>\n<p>The <code class=\"hljs\">impl Trait</code> syntax is convenient and makes for more concise code in simple\ncases, while the fuller trait bound syntax can express more complexity in other\ncases. For example, we can have two parameters that implement <code class=\"hljs\">Summary</code>. Doing\nso with the <code class=\"hljs\">impl Trait</code> syntax looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item1: &amp;<span class=\"hljs-keyword\">impl</span> Summary, item2: &amp;<span class=\"hljs-keyword\">impl</span> Summary) {</code></pre>\n<p>Using <code class=\"hljs\">impl Trait</code> is appropriate if we want this function to allow <code class=\"hljs\">item1</code> and\n<code class=\"hljs\">item2</code> to have different types (as long as both types implement <code class=\"hljs\">Summary</code>). If\nwe want to force both parameters to have the same type, however, we must use a\ntrait bound, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary&gt;(item1: &amp;T, item2: &amp;T) {</code></pre>\n<p>The generic type <code class=\"hljs\">T</code> specified as the type of the <code class=\"hljs\">item1</code> and <code class=\"hljs\">item2</code>\nparameters constrains the function such that the concrete type of the value\npassed as an argument for <code class=\"hljs\">item1</code> and <code class=\"hljs\">item2</code> must be the same.</p>\n<h4 id=\"specifying-multiple-trait-bounds-with-the--syntax\"><a class=\"header\" href=\"#specifying-multiple-trait-bounds-with-the--syntax\">Specifying Multiple Trait Bounds with the <code>+</code> Syntax</a></h4>\n<p>We can also specify more than one trait bound. Say we wanted <code class=\"hljs\">notify</code> to use\ndisplay formatting as well as <code class=\"hljs\">summarize</code> on <code class=\"hljs\">item</code>: we specify in the <code class=\"hljs\">notify</code>\ndefinition that <code class=\"hljs\">item</code> must implement both <code class=\"hljs\">Display</code> and <code class=\"hljs\">Summary</code>. We can do\nso using the <code class=\"hljs\">+</code> syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item: &amp;(<span class=\"hljs-keyword\">impl</span> Summary + Display)) {</code></pre>\n<p>The <code class=\"hljs\">+</code> syntax is also valid with trait bounds on generic types:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary + Display&gt;(item: &amp;T) {</code></pre>\n<p>With the two trait bounds specified, the body of <code class=\"hljs\">notify</code> can call <code class=\"hljs\">summarize</code>\nand use <code class=\"hljs\">{}</code> to format <code class=\"hljs\">item</code>.</p>\n<h4 id=\"clearer-trait-bounds-with-where-clauses\"><a class=\"header\" href=\"#clearer-trait-bounds-with-where-clauses\">Clearer Trait Bounds with <code>where</code> Clauses</a></h4>\n<p>Using too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function’s name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a <code class=\"hljs\">where</code> clause after the function\nsignature. So, instead of writing this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_function</span></span>&lt;T: Display + <span class=\"hljs-built_in\">Clone</span>, U: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Debug</span>&gt;(t: &amp;T, u: &amp;U) -&gt; <span class=\"hljs-built_in\">i32</span> {</code></pre>\n<p>we can use a <code class=\"hljs\">where</code> clause, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_function</span></span>&lt;T, U&gt;(t: &amp;T, u: &amp;U) -&gt; <span class=\"hljs-built_in\">i32</span>\n<span class=\"hljs-keyword\">where</span>\n    T: Display + <span class=\"hljs-built_in\">Clone</span>,\n    U: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Debug</span>,\n{\n<span class=\"boring\">    <span class=\"hljs-built_in\">unimplemented!</span>()\n</span><span class=\"boring\">}</span></code></pre>\n<p>This function’s signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds.</p>\n<h3 id=\"returning-types-that-implement-traits\"><a class=\"header\" href=\"#returning-types-that-implement-traits\">Returning Types That Implement Traits</a></h3>\n<p>We can also use the <code class=\"hljs\">impl Trait</code> syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_summarizable</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Summary {\n    Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    }\n}</code></pre>\n<p>By using <code class=\"hljs\">impl Summary</code> for the return type, we specify that the\n<code class=\"hljs\">returns_summarizable</code> function returns some type that implements the <code class=\"hljs\">Summary</code>\ntrait without naming the concrete type. In this case, <code class=\"hljs\">returns_summarizable</code>\nreturns a <code class=\"hljs\">Tweet</code>, but the code calling this function doesn’t need to know that.</p>\n<p>The ability to specify a return type only by the trait it implements is\nespecially useful in the context of closures and iterators, which we cover in\nChapter 13. Closures and iterators create types that only the compiler knows or\ntypes that are very long to specify. The <code class=\"hljs\">impl Trait</code> syntax lets you concisely\nspecify that a function returns some type that implements the <code class=\"hljs\">Iterator</code> trait\nwithout needing to write out a very long type.</p>\n<p>However, you can only use <code class=\"hljs\">impl Trait</code> if you’re returning a single type. For\nexample, this code that returns either a <code class=\"hljs\">NewsArticle</code> or a <code class=\"hljs\">Tweet</code> with the\nreturn type specified as <code class=\"hljs\">impl Summary</code> wouldn’t work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_summarizable</span></span>(switch: <span class=\"hljs-built_in\">bool</span>) -&gt; <span class=\"hljs-keyword\">impl</span> Summary {\n    <span class=\"hljs-keyword\">if</span> switch {\n        NewsArticle {\n            headline: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"Penguins win the Stanley Cup Championship!\"</span>,\n            ),\n            location: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Pittsburgh, PA, USA\"</span>),\n            author: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Iceburgh\"</span>),\n            content: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"The Pittsburgh Penguins once again are the best \\\n                 hockey team in the NHL.\"</span>,\n            ),\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        Tweet {\n            username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n            content: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n            ),\n            reply: <span class=\"hljs-literal\">false</span>,\n            retweet: <span class=\"hljs-literal\">false</span>,\n        }\n    }\n}</code></pre>\n<p>Returning either a <code class=\"hljs\">NewsArticle</code> or a <code class=\"hljs\">Tweet</code> isn’t allowed due to restrictions\naround how the <code class=\"hljs\">impl Trait</code> syntax is implemented in the compiler. We’ll cover\nhow to write a function with this behavior in the <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“Using Trait Objects That\nAllow for Values of Different\nTypes”</a><!--\nignore --> section of Chapter 17.</p>\n<h3 id=\"using-trait-bounds-to-conditionally-implement-methods\"><a class=\"header\" href=\"#using-trait-bounds-to-conditionally-implement-methods\">Using Trait Bounds to Conditionally Implement Methods</a></h3>\n<p>By using a trait bound with an <code class=\"hljs\">impl</code> block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type <code class=\"hljs\">Pair&lt;T&gt;</code> in Listing 10-15 always implements the\n<code class=\"hljs\">new</code> function to return a new instance of <code class=\"hljs\">Pair&lt;T&gt;</code> (recall from the\n<a href=\"ch05-03-method-syntax.html#defining-methods\">“Defining Methods”</a><!-- ignore --> section of Chapter 5 that <code class=\"hljs\">Self</code>\nis a type alias for the type of the <code class=\"hljs\">impl</code> block, which in this case is\n<code class=\"hljs\">Pair&lt;T&gt;</code>). But in the next <code class=\"hljs\">impl</code> block, <code class=\"hljs\">Pair&lt;T&gt;</code> only implements the\n<code class=\"hljs\">cmp_display</code> method if its inner type <code class=\"hljs\">T</code> implements the <code class=\"hljs\">PartialOrd</code> trait\nthat enables comparison <em>and</em> the <code class=\"hljs\">Display</code> trait that enables printing.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Pair</span></span>&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Pair&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T, y: T) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> { x, y }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: Display + <span class=\"hljs-built_in\">PartialOrd</span>&gt; Pair&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cmp_display</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.x &gt;= <span class=\"hljs-keyword\">self</span>.y {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest member is x = {}\"</span>, <span class=\"hljs-keyword\">self</span>.x);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest member is y = {}\"</span>, <span class=\"hljs-keyword\">self</span>.y);\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-15: Conditionally implementing methods on a\ngeneric type depending on trait bounds</span></p>\n<p>We can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called <em>blanket implementations</em> and are used extensively in the\nRust standard library. For example, the standard library implements the\n<code class=\"hljs\">ToString</code> trait on any type that implements the <code class=\"hljs\">Display</code> trait. The <code class=\"hljs\">impl</code>\nblock in the standard library looks similar to this code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T: Display&gt; <span class=\"hljs-built_in\">ToString</span> <span class=\"hljs-keyword\">for</span> T {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>Because the standard library has this blanket implementation, we can call the\n<code class=\"hljs\">to_string</code> method defined by the <code class=\"hljs\">ToString</code> trait on any type that implements\nthe <code class=\"hljs\">Display</code> trait. For example, we can turn integers into their corresponding\n<code class=\"hljs\">String</code> values like this because integers implement <code class=\"hljs\">Display</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-number\">3</span>.to_string();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Blanket implementations appear in the documentation for the trait in the\n“Implementors” section.</p>\n<p>Traits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn’t define the method. But\nRust moves these errors to compile time so we’re forced to fix the problems\nbefore our code is even able to run. Additionally, we don’t have to write code\nthat checks for behavior at runtime because we’ve already checked at compile\ntime. Doing so improves performance without having to give up the flexibility\nof generics.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch10-01-syntax.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch10-03-lifetime-syntax.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch10-01-syntax.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch10-03-lifetime-syntax.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:22.981Z"
}