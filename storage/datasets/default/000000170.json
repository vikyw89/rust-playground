{
	"title": "Dependency Resolution - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/resolver.html",
	"markdown": "# Dependency Resolution - The Cargo Book\n\nOne of Cargo’s primary tasks is to determine the versions of dependencies to use based on the version requirements specified in each package. This process is called “dependency resolution” and is performed by the “resolver”. The result of the resolution is stored in the `Cargo.lock` file which “locks” the dependencies to specific versions, and keeps them fixed over time.\n\nThe resolver attempts to unify common dependencies while considering possibly conflicting requirements. It turns out, however, that in many cases there is no single “best” dependency resolution, and so the resolver must use heuristics to choose a preferred solution. The sections below provide some details on how requirements are handled, and how to work with the resolver.\n\nSee the chapter [Specifying Dependencies](specifying-dependencies.html) for more details about how dependency requirements are specified.\n\nThe [`cargo tree`](../commands/cargo-tree.html) command can be used to visualize the result of the resolver.\n\n## [SemVer compatibility](#semver-compatibility)\n\nCargo uses [SemVer](https://semver.org/) for specifying version numbers. This establishes a common convention for what is compatible between different versions of a package. See the [SemVer Compatibility](semver.html) chapter for guidance on what is considered a “compatible” change. This notion of “compatibility” is important because Cargo assumes it should be safe to update a dependency within a compatibility range without breaking the build.\n\nVersions are considered compatible if their left-most non-zero major/minor/patch component is the same. For example, `1.0.3` and `1.1.0` are considered compatible, and thus it should be safe to update from the older release to the newer one. However, an update from `1.1.0` to `2.0.0` would not be allowed to be made automatically. This convention also applies to versions with leading zeros. For example, `0.1.0` and `0.1.2` are compatible, but `0.1.0` and `0.2.0` are not. Similarly, `0.0.1` and `0.0.2` are not compatible.\n\nAs a quick refresher, the [_version requirement_ syntax](specifying-dependencies.html) Cargo uses for dependencies is:\n\n| Requirement | Example | Equivalence | Description |\n| --- | --- | --- | --- |\n| Caret | `1.2.3` or `^1.2.3` | `>=1.2.3, <2.0.0` | Any SemVer-compatible version of at least the given value. |\n| Tilde | `~1.2` | `>=1.2.0, <1.3.0` | Minimum version, with restricted compatibility range. |\n| Wildcard | `1.*` | `>=1.0.0, <2.0.0` | Any version in the `*` position. |\n| Equals | `=1.2.3` | `=1.2.3` | Exactly the specified version only. |\n| Comparison | `>1.1` | `>=1.2.0` | Naive numeric comparison of specified digits. |\n| Compound | `>=1.2, <1.5` | `>=1.2.0, <1.5.0` | Multiple requirements that must be simultaneously satisfied. |\n\nWhen multiple packages specify a dependency for a common package, the resolver attempts to ensure that they use the same version of that common package, as long as they are within a SemVer compatibility range. It also attempts to use the greatest version currently available within that compatibility range. For example, if there are two packages in the resolve graph with the following requirements:\n\n```toml\n# Package A\n[dependencies]\nbitflags = \"1.0\"\n\n# Package B\n[dependencies]\nbitflags = \"1.1\"\n\n```\n\nIf at the time the `Cargo.lock` file is generated, the greatest version of `bitflags` is `1.2.1`, then both packages will use `1.2.1` because it is the greatest within the compatibility range. If `2.0.0` is published, it will still use `1.2.1` because `2.0.0` is considered incompatible.\n\nIf multiple packages have a common dependency with semver-incompatible versions, then Cargo will allow this, but will build two separate copies of the dependency. For example:\n\n```toml\n# Package A\n[dependencies]\nrand = \"0.7\"\n\n# Package B\n[dependencies]\nrand = \"0.6\"\n\n```\n\nThe above will result in Package A using the greatest `0.7` release (`0.7.3` at the time of this writing) and Package B will use the greatest `0.6` release (`0.6.5` for example). This can lead to potential problems, see the [Version-incompatibility hazards](#version-incompatibility-hazards) section for more details.\n\nMultiple versions within the same compatibility range are not allowed and will result in a resolver error if it is constrained to two different versions within a compatibility range. For example, if there are two packages in the resolve graph with the following requirements:\n\n```toml\n# Package A\n[dependencies]\nlog = \"=0.4.11\"\n\n# Package B\n[dependencies]\nlog = \"=0.4.8\"\n\n```\n\nThe above will fail because it is not allowed to have two separate copies of the `0.4` release of the `log` package.\n\n### [Version-incompatibility hazards](#version-incompatibility-hazards)\n\nWhen multiple versions of a crate appear in the resolve graph, this can cause problems when types from those crates are exposed by the crates using them. This is because the types and items are considered different by the Rust compiler, even if they have the same name. Libraries should take care when publishing a SemVer-incompatible version (for example, publishing `2.0.0` after `1.0.0` has been in use), particularly for libraries that are widely used.\n\nThe “[semver trick](https://github.com/dtolnay/semver-trick)” is a workaround for this problem of publishing a breaking change while retaining compatibility with older versions. The linked page goes into detail about what the problem is and how to address it. In short, when a library wants to publish a SemVer-breaking release, publish the new release, and also publish a point release of the previous version that reexports the types from the newer version.\n\nThese incompatibilities usually manifest as a compile-time error, but sometimes they will only appear as a runtime misbehavior. For example, let’s say there is a common library named `foo` that ends up appearing with both version `1.0.0` and `2.0.0` in the resolve graph. If [`downcast_ref`](about:blank/std/any/trait.Any.html#method.downcast_ref) is used on a object created by a library using version `1.0.0`, and the code calling `downcast_ref` is downcasting to a type from version `2.0.0`, the downcast will fail at runtime.\n\nIt is important to make sure that if you have multiple versions of a library that you are properly using them, especially if it is ever possible for the types from different versions to be used together. The [`cargo tree -d`](../commands/cargo-tree.html) command can be used to identify duplicate versions and where they come from. Similarly, it is important to consider the impact on the ecosystem if you publish a SemVer-incompatible version of a popular library.\n\n### [Pre-releases](#pre-releases)\n\nSemVer has the concept of “pre-releases” with a dash in the version, such as `1.0.0-alpha`, or `1.0.0-beta`. Cargo will avoid automatically using pre-releases unless explicitly asked. For example, if `1.0.0-alpha` of package `foo` is published, then a requirement of `foo = \"1.0\"` will _not_ match, and will return an error. The pre-release must be specified, such as `foo = \"1.0.0-alpha\"`. Similarly [`cargo install`](../commands/cargo-install.html) will avoid pre-releases unless explicitly asked to install one.\n\nCargo allows “newer” pre-releases to be used automatically. For example, if `1.0.0-beta` is published, then a requirement `foo = \"1.0.0-alpha\"` will allow updating to the `beta` version. Note that this only works on the same release version, `foo = \"1.0.0-alpha\"` will not allow updating to `foo = \"1.0.1-alpha\"` or `foo = \"1.0.1-beta\"`.\n\nCargo will also upgrade automatically to semver-compatible released versions from prereleases. The requirement `foo = \"1.0.0-alpha\"` will allow updating to `foo = \"1.0.0\"` as well as `foo = \"1.2.0\"`.\n\nBeware that pre-release versions can be unstable, and as such care should be taken when using them. Some projects may choose to publish breaking changes between pre-release versions. It is recommended to not use pre-release dependencies in a library if your library is not also a pre-release. Care should also be taken when updating your `Cargo.lock`, and be prepared if a pre-release update causes issues.\n\nThe pre-release tag may be separated with periods to distinguish separate components. Numeric components will use numeric comparison. For example, `1.0.0-alpha.4` will use numeric comparison for the `4` component. That means that if `1.0.0-alpha.11` is published, that will be chosen as the greatest release. Non-numeric components are compared lexicographically.\n\n### [Version metadata](#version-metadata)\n\nSemVer has the concept of “version metadata” with a plus in the version, such as `1.0.0+21AF26D3`. This metadata is usually ignored, and should not be used in a version requirement. You should never publish multiple versions that differ only in the metadata tag.\n\n## [Other constraints](#other-constraints)\n\nVersion requirements aren’t the only constraint that the resolver considers when selecting and unifying dependencies. The following sections cover some of the other constraints that can affect resolution.\n\n### [Features](#features)\n\nFor the purpose of generating `Cargo.lock`, the resolver builds the dependency graph as-if all [features](features.html) of all [workspace](workspaces.html) members are enabled. This ensures that any optional dependencies are available and properly resolved with the rest of the graph when features are added or removed with the [`--features` command-line flag](about:blank/features.html#command-line-feature-options). The resolver runs a second time to determine the actual features used when _compiling_ a crate, based on the features selected on the command-line.\n\nDependencies are resolved with the union of all features enabled on them. For example, if one package depends on the [`im`](https://crates.io/crates/im) package with the [`serde` dependency](https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L46) enabled and another package depends on it with the [`rayon` dependency](https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L47) enabled, then `im` will be built with both features enabled, and the `serde` and `rayon` crates will be included in the resolve graph. If no packages depend on `im` with those features, then those optional dependencies will be ignored, and they will not affect resolution.\n\nWhen building multiple packages in a workspace (such as with `--workspace` or multiple `-p` flags), the features of the dependencies of all of those packages are unified. If you have a circumstance where you want to avoid that unification for different workspace members, you will need to build them via separate `cargo` invocations.\n\nThe resolver will skip over versions of packages that are missing required features. For example, if a package depends on version `^1` of [`regex`](https://crates.io/crates/regex) with the [`perf` feature](https://github.com/rust-lang/regex/blob/1.3.0/Cargo.toml#L56), then the oldest version it can select is `1.3.0`, because versions prior to that did not contain the `perf` feature. Similarly, if a feature is removed from a new release, then packages that require that feature will be stuck on the older releases that contain that feature. It is discouraged to remove features in a SemVer-compatible release. Beware that optional dependencies also define an implicit feature, so removing an optional dependency or making it non-optional can cause problems, see [removing an optional dependency](about:blank/semver.html#cargo-remove-opt-dep).\n\n#### [Feature resolver version 2](#feature-resolver-version-2)\n\nWhen `resolver = \"2\"` is specified in `Cargo.toml` (see [resolver versions](#resolver-versions) below), a different feature resolver is used which uses a different algorithm for unifying features. The version `\"1\"` resolver will unify features for a package no matter where it is specified. The version `\"2\"` resolver will avoid unifying features in the following situations:\n\n-   Features for target-specific dependencies are not enabled if the target is not currently being built. For example:\n    \n    ```toml\n    [dependencies.common]\n    version = \"1.0\"\n    features = [\"f1\"]\n    \n    [target.'cfg(windows)'.dependencies.common]\n    version = \"1.0\"\n    features = [\"f2\"]\n    \n    ```\n    \n    When building this example for a non-Windows platform, the `f2` feature will _not_ be enabled.\n    \n-   Features enabled on [build-dependencies](about:blank/specifying-dependencies.html#build-dependencies) or proc-macros will not be unified when those same dependencies are used as a normal dependency. For example:\n    \n    ```toml\n    [dependencies]\n    log = \"0.4\"\n    \n    [build-dependencies]\n    log = {version = \"0.4\", features=['std']}\n    \n    ```\n    \n    When building the build script, the `log` crate will be built with the `std` feature. When building the library of your package, it will not enable the feature.\n    \n-   Features enabled on [dev-dependencies](about:blank/specifying-dependencies.html#development-dependencies) will not be unified when those same dependencies are used as a normal dependency, unless those dev-dependencies are currently being built. For example:\n    \n    ```toml\n    [dependencies]\n    serde = {version = \"1.0\", default-features = false}\n    \n    [dev-dependencies]\n    serde = {version = \"1.0\", features = [\"std\"]}\n    \n    ```\n    \n    In this example, the library will normally link against `serde` without the `std` feature. However, when built as a test or example, it will include the `std` feature. For example, `cargo test` or `cargo build --all-targets` will unify these features. Note that dev-dependencies in dependencies are always ignored, this is only relevant for the top-level package or workspace members.\n    \n\n### [`links`](#links)\n\nThe [`links` field](about:blank/manifest.html#the-links-field) is used to ensure only one copy of a native library is linked into a binary. The resolver will attempt to find a graph where there is only one instance of each `links` name. If it is unable to find a graph that satisfies that constraint, it will return an error.\n\nFor example, it is an error if one package depends on [`libgit2-sys`](https://crates.io/crates/libgit2-sys) version `0.11` and another depends on `0.12`, because Cargo is unable to unify those, but they both link to the `git2` native library. Due to this requirement, it is encouraged to be very careful when making SemVer-incompatible releases with the `links` field if your library is in common use.\n\n### [Yanked versions](#yanked-versions)\n\n[Yanked releases](about:blank/publishing.html#cargo-yank) are those that are marked that they should not be used. When the resolver is building the graph, it will ignore all yanked releases unless they already exist in the `Cargo.lock` file or are explicitly requested by the [`--precise`](about:blank/commands/cargo-update.html#option-cargo-update---precise) flag of `cargo update` (nightly only).\n\n## [Dependency updates](#dependency-updates)\n\nDependency resolution is automatically performed by all Cargo commands that need to know about the dependency graph. For example, [`cargo build`](../commands/cargo-build.html) will run the resolver to discover all the dependencies to build. After the first time it runs, the result is stored in the `Cargo.lock` file. Subsequent commands will run the resolver, keeping dependencies locked to the versions in `Cargo.lock` _if it can_.\n\nIf the dependency list in `Cargo.toml` has been modified, for example changing the version of a dependency from `1.0` to `2.0`, then the resolver will select a new version for that dependency that matches the new requirements. If that new dependency introduces new requirements, those new requirements may also trigger additional updates. The `Cargo.lock` file will be updated with the new result. The `--locked` or `--frozen` flags can be used to change this behavior to prevent automatic updates when requirements change, and return an error instead.\n\n[`cargo update`](../commands/cargo-update.html) can be used to update the entries in `Cargo.lock` when new versions are published. Without any options, it will attempt to update all packages in the lock file. The `-p` flag can be used to target the update for a specific package, and other flags such as `--recursive` or `--precise` can be used to control how versions are selected.\n\n## [Overrides](#overrides)\n\nCargo has several mechanisms to override dependencies within the graph. The [Overriding Dependencies](overriding-dependencies.html) chapter goes into detail on how to use overrides. The overrides appear as an overlay to a registry, replacing the patched version with the new entry. Otherwise, resolution is performed like normal.\n\n## [Dependency kinds](#dependency-kinds)\n\nThere are three kinds of dependencies in a package: normal, [build](about:blank/specifying-dependencies.html#build-dependencies), and [dev](about:blank/specifying-dependencies.html#development-dependencies). For the most part these are all treated the same from the perspective of the resolver. One difference is that dev-dependencies for non-workspace members are always ignored, and do not influence resolution.\n\n[Platform-specific dependencies](about:blank/specifying-dependencies.html#platform-specific-dependencies) with the `[target]` table are resolved as-if all platforms are enabled. In other words, the resolver ignores the platform or `cfg` expression.\n\n### [dev-dependency cycles](#dev-dependency-cycles)\n\nUsually the resolver does not allow cycles in the graph, but it does allow them for [dev-dependencies](about:blank/specifying-dependencies.html#development-dependencies). For example, project “foo” has a dev-dependency on “bar”, which has a normal dependency on “foo” (usually as a “path” dependency). This is allowed because there isn’t really a cycle from the perspective of the build artifacts. In this example, the “foo” library is built (which does not need “bar” because “bar” is only used for tests), and then “bar” can be built depending on “foo”, then the “foo” tests can be built linking to “bar”.\n\nBeware that this can lead to confusing errors. In the case of building library unit tests, there are actually two copies of the library linked into the final test binary: the one that was linked with “bar”, and the one built that contains the unit tests. Similar to the issues highlighted in the [Version-incompatibility hazards](#version-incompatibility-hazards) section, the types between the two are not compatible. Be careful when exposing types of “foo” from “bar” in this situation, since the “foo” unit tests won’t treat them the same as the local types.\n\nIf possible, try to split your package into multiple packages and restructure it so that it remains strictly acyclic.\n\n## [Resolver versions](#resolver-versions)\n\nA different feature resolver algorithm can be used by specifying the resolver version in `Cargo.toml` like this:\n\n```toml\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n\n```\n\nThe version `\"1\"` resolver is the original resolver that shipped with Cargo up to version 1.50. The default is `\"2\"` if the root package specifies [`edition = \"2021\"`](about:blank/manifest.html#the-edition-field) or a newer edition. Otherwise the default is `\"1\"`.\n\nThe version `\"2\"` resolver introduces changes in [feature unification](#features). See the [features chapter](about:blank/features.html#feature-resolver-version-2) for more details.\n\nThe resolver is a global option that affects the entire workspace. The `resolver` version in dependencies is ignored, only the value in the top-level package will be used. If using a [virtual workspace](about:blank/workspaces.html#virtual-workspace), the version should be specified in the `[workspace]` table, for example:\n\n```toml\n[workspace]\nmembers = [\"member1\", \"member2\"]\nresolver = \"2\"\n\n```\n\n## [Recommendations](#recommendations)\n\nThe following are some recommendations for setting the version within your package, and for specifying dependency requirements. These are general guidelines that should apply to common situations, but of course some situations may require specifying unusual requirements.\n\n-   Follow the [SemVer guidelines](semver.html) when deciding how to update your version number, and whether or not you will need to make a SemVer-incompatible version change.\n    \n-   Use caret requirements for dependencies, such as `\"1.2.3\"`, for most situations. This ensures that the resolver can be maximally flexible in choosing a version while maintaining build compatibility.\n    \n    -   Specify all three components with the version you are currently using. This helps set the minimum version that will be used, and ensures that other users won’t end up with an older version of the dependency that might be missing something that your package requires.\n    -   Avoid `*` requirements, as they are not allowed on [crates.io](https://crates.io/), and they can pull in SemVer-breaking changes during a normal `cargo update`.\n    -   Avoid overly broad version requirements. For example, `>=2.0.0` can pull in any SemVer-incompatible version, like version `5.0.0`, which can result in broken builds in the future.\n    -   Avoid overly narrow version requirements if possible. For example, if you specify a tilde requirement like `bar=\"~1.3\"`, and another package specifies a requirement of `bar=\"1.4\"`, this will fail to resolve, even though minor releases should be compatible.\n-   Try to keep the dependency versions up-to-date with the actual minimum versions that your library requires. For example, if you have a requirement of `bar=\"1.0.12\"`, and then in a future release you start using new features added in the `1.1.0` release of “bar”, update your dependency requirement to `bar=\"1.1.0\"`.\n    \n    If you fail to do this, it may not be immediately obvious because Cargo can opportunistically choose the newest version when you run a blanket `cargo update`. However, if another user depends on your library, and runs `cargo update your-library`, it will _not_ automatically update “bar” if it is locked in their `Cargo.lock`. It will only update “bar” in that situation if the dependency declaration is also updated. Failure to do so can cause confusing build errors for the user using `cargo update your-library`.\n    \n-   If two packages are tightly coupled, then an `=` dependency requirement may help ensure that they stay in sync. For example, a library with a companion proc-macro library will sometimes make assumptions between the two libraries that won’t work well if the two are out of sync (and it is never expected to use the two libraries independently). The parent library can use an `=` requirement on the proc-macro, and re-export the macros for easy access.\n    \n-   `0.0.x` versions can be used for packages that are permanently unstable.\n    \n\nIn general, the stricter you make the dependency requirements, the more likely it will be for the resolver to fail. Conversely, if you use requirements that are too loose, it may be possible for new versions to be published that will break the build.\n\n## [Troubleshooting](#troubleshooting)\n\nThe following illustrates some problems you may experience, and some possible solutions.\n\n### [Why was a dependency included?](#why-was-a-dependency-included)\n\nSay you see dependency `rand` in the `cargo check` output but don’t think its needed and want to understand why its being pulled in.\n\nYou can run\n\n```console\n$ cargo tree --workspace --target all --all-features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\n### [Why was that feature on this dependency enabled?](#why-was-that-feature-on-this-dependency-enabled)\n\nYou might identify that it was an activated feature that caused `rand` to show up. **To figure out which package activated the feature, you can add the `--edges features`**\n\n```console\n$ cargo tree --workspace --target all --all-features --edges features --invert rand\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\n### [Unexpected dependency duplication](#unexpected-dependency-duplication)\n\nYou see multiple instances of `rand` when you run\n\n```console\n$ cargo tree --workspace --target all --all-features --duplicates\nrand v0.7.3\n└── ...\n\nrand v0.8.5\n└── ...\n\n```\n\nThe resolver algorithm has converged on a solution that includes two copies of a dependency when one would suffice. For example:\n\n```toml\n# Package A\n[dependencies]\nrand = \"0.7\"\n\n# Package B\n[dependencies]\nrand = \">=0.6\"  # note: open requirements such as this are discouraged\n\n```\n\nIn this example, Cargo may build two copies of the `rand` crate, even though a single copy at version `0.7.3` would meet all requirements. This is because the resolver’s algorithm favors building the latest available version of `rand` for Package B, which is `0.8.5` at the time of this writing, and that is incompatible with Package A’s specification. The resolver’s algorithm does not currently attempt to “deduplicate” in this situation.\n\nThe use of open-ended version requirements like `>=0.6` is discouraged in Cargo. But, if you run into this situation, the [`cargo update`](../commands/cargo-update.html) command with the `--precise` flag can be used to manually remove such duplications.\n\n### [Why wasn’t a newer version selected?](#why-wasnt-a-newer-version-selected)\n\nSay you noticed that the latest version of a dependency wasn’t selected when you ran:\n\n```console\n$ cargo update\n\n```\n\nYou can enable some extra logging to see why this happened:\n\n```console\n$ env CARGO_LOG=cargo::core::resolver=trace cargo update\n\n```\n\n**Note:** Cargo log targets and levels may change over time.\n\n### [SemVer-breaking patch release breaks the build](#semver-breaking-patch-release-breaks-the-build)\n\nSometimes a project may inadvertently publish a point release with a SemVer-breaking change. When users update with `cargo update`, they will pick up this new release, and then their build may break. In this situation, it is recommended that the project should [yank](about:blank/publishing.html#cargo-yank) the release, and either remove the SemVer-breaking change, or publish it as a new SemVer-major version increase.\n\nIf the change happened in a third-party project, if possible try to (politely!) work with the project to resolve the issue.\n\nWhile waiting for the release to be yanked, some workarounds depend on the circumstances:\n\n-   If your project is the end product (such as a binary executable), just avoid updating the offending package in `Cargo.lock`. This can be done with the `--precise` flag in [`cargo update`](../commands/cargo-update.html).\n-   If you publish a binary on [crates.io](https://crates.io/), then you can temporarily add an `=` requirement to force the dependency to a specific good version.\n    -   Binary projects can alternatively recommend users to use the `--locked` flag with [`cargo install`](../commands/cargo-install.html) to use the original `Cargo.lock` that contains the known good version.\n-   Libraries may also consider publishing a temporary new release with stricter requirements that avoid the troublesome dependency. You may want to consider using range requirements (instead of `=`) to avoid overly-strict requirements that may conflict with other packages using the same dependency. Once the problem has been resolved, you can publish another point release that relaxes the dependency back to a caret requirement.\n-   If it looks like the third-party project is unable or unwilling to yank the release, then one option is to update your code to be compatible with the changes, and update the dependency requirement to set the minimum version to the new release. You will also need to consider if this is a SemVer-breaking change of your own library, for example if it exposes types from the dependency.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Dependency Resolution - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/resolver.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"dependency-resolution\"><a class=\"header\" href=\"#dependency-resolution\">Dependency Resolution</a></h1>\n<p>One of Cargo’s primary tasks is to determine the versions of dependencies to\nuse based on the version requirements specified in each package. This process\nis called “dependency resolution” and is performed by the “resolver”. The\nresult of the resolution is stored in the <code class=\"hljs\">Cargo.lock</code> file which “locks” the\ndependencies to specific versions, and keeps them fixed over time.</p>\n<p>The resolver attempts to unify common dependencies while considering possibly\nconflicting requirements. It turns out, however, that in many cases there is no\nsingle “best” dependency resolution, and so the resolver must use heuristics to\nchoose a preferred solution. The sections below provide some details on how\nrequirements are handled, and how to work with the resolver.</p>\n<p>See the chapter <a href=\"specifying-dependencies.html\">Specifying Dependencies</a> for more details about how\ndependency requirements are specified.</p>\n<p>The <a href=\"../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> command can be used to visualize the result of the\nresolver.</p>\n<h2 id=\"semver-compatibility\"><a class=\"header\" href=\"#semver-compatibility\">SemVer compatibility</a></h2>\n<p>Cargo uses <a href=\"https://semver.org/\">SemVer</a> for specifying version numbers. This establishes a common\nconvention for what is compatible between different versions of a package. See\nthe <a href=\"semver.html\">SemVer Compatibility</a> chapter for guidance on what is considered a\n“compatible” change. This notion of “compatibility” is important because Cargo\nassumes it should be safe to update a dependency within a compatibility range\nwithout breaking the build.</p>\n<p>Versions are considered compatible if their left-most non-zero\nmajor/minor/patch component is the same. For example, <code class=\"hljs\">1.0.3</code> and <code class=\"hljs\">1.1.0</code> are\nconsidered compatible, and thus it should be safe to update from the older\nrelease to the newer one. However, an update from <code class=\"hljs\">1.1.0</code> to <code class=\"hljs\">2.0.0</code> would not\nbe allowed to be made automatically. This convention also applies to versions\nwith leading zeros. For example, <code class=\"hljs\">0.1.0</code> and <code class=\"hljs\">0.1.2</code> are compatible, but\n<code class=\"hljs\">0.1.0</code> and <code class=\"hljs\">0.2.0</code> are not. Similarly, <code class=\"hljs\">0.0.1</code> and <code class=\"hljs\">0.0.2</code> are not\ncompatible.</p>\n<p>As a quick refresher, the\n<a href=\"specifying-dependencies.html\"><em>version requirement</em> syntax</a> Cargo uses for\ndependencies is:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Requirement</th><th>Example</th><th>Equivalence</th><th>Description</th></tr></thead><tbody>\n<tr><td>Caret</td><td><code class=\"hljs\">1.2.3</code> or <code class=\"hljs\">^1.2.3</code></td><td><code class=\"hljs\">&gt;=1.2.3,&nbsp;&lt;2.0.0</code></td><td>Any SemVer-compatible version of at least the given value.</td></tr>\n<tr><td>Tilde</td><td><code class=\"hljs\">~1.2</code></td><td><code class=\"hljs\">&gt;=1.2.0,&nbsp;&lt;1.3.0</code></td><td>Minimum version, with restricted compatibility range.</td></tr>\n<tr><td>Wildcard</td><td><code class=\"hljs\">1.*</code></td><td><code class=\"hljs\">&gt;=1.0.0,&nbsp;&lt;2.0.0</code></td><td>Any version in the <code class=\"hljs\">*</code> position.</td></tr>\n<tr><td>Equals</td><td><code class=\"hljs\">=1.2.3</code></td><td><code class=\"hljs\">=1.2.3</code></td><td>Exactly the specified version only.</td></tr>\n<tr><td>Comparison</td><td><code class=\"hljs\">&gt;1.1</code></td><td><code class=\"hljs\">&gt;=1.2.0</code></td><td>Naive numeric comparison of specified digits.</td></tr>\n<tr><td>Compound</td><td><code class=\"hljs\">&gt;=1.2,&nbsp;&lt;1.5</code></td><td><code class=\"hljs\">&gt;=1.2.0,&nbsp;&lt;1.5.0</code></td><td>Multiple requirements that must be simultaneously satisfied.</td></tr>\n</tbody></table>\n</div>\n<p>When multiple packages specify a dependency for a common package, the resolver\nattempts to ensure that they use the same version of that common package, as\nlong as they are within a SemVer compatibility range. It also attempts to use\nthe greatest version currently available within that compatibility range. For\nexample, if there are two packages in the resolve graph with the following\nrequirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bitflags</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">bitflags</span> = <span class=\"hljs-string\">\"1.1\"</span>\n</code></pre>\n<p>If at the time the <code class=\"hljs\">Cargo.lock</code> file is generated, the greatest version of\n<code class=\"hljs\">bitflags</code> is <code class=\"hljs\">1.2.1</code>, then both packages will use <code class=\"hljs\">1.2.1</code> because it is the\ngreatest within the compatibility range. If <code class=\"hljs\">2.0.0</code> is published, it will\nstill use <code class=\"hljs\">1.2.1</code> because <code class=\"hljs\">2.0.0</code> is considered incompatible.</p>\n<p>If multiple packages have a common dependency with semver-incompatible\nversions, then Cargo will allow this, but will build two separate copies of\nthe dependency. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.7\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.6\"</span>\n</code></pre>\n<p>The above will result in Package A using the greatest <code class=\"hljs\">0.7</code> release (<code class=\"hljs\">0.7.3</code>\nat the time of this writing) and Package B will use the greatest <code class=\"hljs\">0.6</code> release\n(<code class=\"hljs\">0.6.5</code> for example). This can lead to potential problems, see the\n<a href=\"#version-incompatibility-hazards\">Version-incompatibility hazards</a> section for more details.</p>\n<p>Multiple versions within the same compatibility range are not allowed and will\nresult in a resolver error if it is constrained to two different versions\nwithin a compatibility range. For example, if there are two packages in the\nresolve graph with the following requirements:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"=0.4.11\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"=0.4.8\"</span>\n</code></pre>\n<p>The above will fail because it is not allowed to have two separate copies of\nthe <code class=\"hljs\">0.4</code> release of the <code class=\"hljs\">log</code> package.</p>\n<h3 id=\"version-incompatibility-hazards\"><a class=\"header\" href=\"#version-incompatibility-hazards\">Version-incompatibility hazards</a></h3>\n<p>When multiple versions of a crate appear in the resolve graph, this can cause\nproblems when types from those crates are exposed by the crates using them.\nThis is because the types and items are considered different by the Rust\ncompiler, even if they have the same name. Libraries should take care when\npublishing a SemVer-incompatible version (for example, publishing <code class=\"hljs\">2.0.0</code>\nafter <code class=\"hljs\">1.0.0</code> has been in use), particularly for libraries that are widely\nused.</p>\n<p>The “<a href=\"https://github.com/dtolnay/semver-trick\">semver trick</a>” is a workaround for this problem of publishing a breaking\nchange while retaining compatibility with older versions. The linked page goes\ninto detail about what the problem is and how to address it. In short, when a\nlibrary wants to publish a SemVer-breaking release, publish the new release,\nand also publish a point release of the previous version that reexports the\ntypes from the newer version.</p>\n<p>These incompatibilities usually manifest as a compile-time error, but\nsometimes they will only appear as a runtime misbehavior. For example, let’s\nsay there is a common library named <code class=\"hljs\">foo</code> that ends up appearing with both\nversion <code class=\"hljs\">1.0.0</code> and <code class=\"hljs\">2.0.0</code> in the resolve graph. If <a href=\"../../std/any/trait.Any.html#method.downcast_ref\"><code class=\"hljs\">downcast_ref</code></a> is used\non a object created by a library using version <code class=\"hljs\">1.0.0</code>, and the code calling\n<code class=\"hljs\">downcast_ref</code> is downcasting to a type from version <code class=\"hljs\">2.0.0</code>, the downcast\nwill fail at runtime.</p>\n<p>It is important to make sure that if you have multiple versions of a library\nthat you are properly using them, especially if it is ever possible for the\ntypes from different versions to be used together. The <a href=\"../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree -d</code></a> command can be used to identify duplicate versions and\nwhere they come from. Similarly, it is important to consider the impact on the\necosystem if you publish a SemVer-incompatible version of a popular library.</p>\n<h3 id=\"pre-releases\"><a class=\"header\" href=\"#pre-releases\">Pre-releases</a></h3>\n<p>SemVer has the concept of “pre-releases” with a dash in the version, such as\n<code class=\"hljs\">1.0.0-alpha</code>, or <code class=\"hljs\">1.0.0-beta</code>. Cargo will avoid automatically using\npre-releases unless explicitly asked. For example, if <code class=\"hljs\">1.0.0-alpha</code> of package\n<code class=\"hljs\">foo</code> is published, then a requirement of <code class=\"hljs\">foo = \"1.0\"</code> will <em>not</em> match, and\nwill return an error. The pre-release must be specified, such as <code class=\"hljs\">foo = \"1.0.0-alpha\"</code>. Similarly <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> will avoid pre-releases unless\nexplicitly asked to install one.</p>\n<p>Cargo allows “newer” pre-releases to be used automatically. For example, if\n<code class=\"hljs\">1.0.0-beta</code> is published, then a requirement <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will allow\nupdating to the <code class=\"hljs\">beta</code> version. Note that this only works on the same release\nversion, <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will not allow updating to <code class=\"hljs\">foo = \"1.0.1-alpha\"</code>\nor <code class=\"hljs\">foo = \"1.0.1-beta\"</code>.</p>\n<p>Cargo will also upgrade automatically to semver-compatible released versions\nfrom prereleases. The requirement <code class=\"hljs\">foo = \"1.0.0-alpha\"</code> will allow updating to\n<code class=\"hljs\">foo = \"1.0.0\"</code> as well as <code class=\"hljs\">foo = \"1.2.0\"</code>.</p>\n<p>Beware that pre-release versions can be unstable, and as such care should be\ntaken when using them. Some projects may choose to publish breaking changes\nbetween pre-release versions. It is recommended to not use pre-release\ndependencies in a library if your library is not also a pre-release. Care\nshould also be taken when updating your <code class=\"hljs\">Cargo.lock</code>, and be prepared if a\npre-release update causes issues.</p>\n<p>The pre-release tag may be separated with periods to distinguish separate\ncomponents. Numeric components will use numeric comparison. For example,\n<code class=\"hljs\">1.0.0-alpha.4</code> will use numeric comparison for the <code class=\"hljs\">4</code> component. That means\nthat if <code class=\"hljs\">1.0.0-alpha.11</code> is published, that will be chosen as the greatest\nrelease. Non-numeric components are compared lexicographically.</p>\n<h3 id=\"version-metadata\"><a class=\"header\" href=\"#version-metadata\">Version metadata</a></h3>\n<p>SemVer has the concept of “version metadata” with a plus in the version, such\nas <code class=\"hljs\">1.0.0+21AF26D3</code>. This metadata is usually ignored, and should not be used\nin a version requirement. You should never publish multiple versions that\ndiffer only in the metadata tag.</p>\n<h2 id=\"other-constraints\"><a class=\"header\" href=\"#other-constraints\">Other constraints</a></h2>\n<p>Version requirements aren’t the only constraint that the resolver considers\nwhen selecting and unifying dependencies. The following sections cover some of\nthe other constraints that can affect resolution.</p>\n<h3 id=\"features\"><a class=\"header\" href=\"#features\">Features</a></h3>\n<p>For the purpose of generating <code class=\"hljs\">Cargo.lock</code>, the resolver builds the dependency\ngraph as-if all <a href=\"features.html\">features</a> of all <a href=\"workspaces.html\">workspace</a> members are enabled. This\nensures that any optional dependencies are available and properly resolved\nwith the rest of the graph when features are added or removed with the\n<a href=\"features.html#command-line-feature-options\"><code class=\"hljs\">--features</code> command-line flag</a>.\nThe resolver runs a second time to determine the actual features used when\n<em>compiling</em> a crate, based on the features selected on the command-line.</p>\n<p>Dependencies are resolved with the union of all features enabled on them. For\nexample, if one package depends on the <a href=\"https://crates.io/crates/im\"><code class=\"hljs\">im</code></a> package with the <a href=\"https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L46\"><code class=\"hljs\">serde</code>\ndependency</a> enabled and another package depends on it with the <a href=\"https://github.com/bodil/im-rs/blob/v15.0.0/Cargo.toml#L47\"><code class=\"hljs\">rayon</code>\ndependency</a> enabled, then <code class=\"hljs\">im</code> will be built with both features enabled, and\nthe <code class=\"hljs\">serde</code> and <code class=\"hljs\">rayon</code> crates will be included in the resolve graph. If no\npackages depend on <code class=\"hljs\">im</code> with those features, then those optional dependencies\nwill be ignored, and they will not affect resolution.</p>\n<p>When building multiple packages in a workspace (such as with <code class=\"hljs\">--workspace</code> or\nmultiple <code class=\"hljs\">-p</code> flags), the features of the dependencies of all of those\npackages are unified. If you have a circumstance where you want to avoid that\nunification for different workspace members, you will need to build them via\nseparate <code class=\"hljs\">cargo</code> invocations.</p>\n<p>The resolver will skip over versions of packages that are missing required\nfeatures. For example, if a package depends on version <code class=\"hljs\">^1</code> of <a href=\"https://crates.io/crates/regex\"><code class=\"hljs\">regex</code></a> with\nthe <a href=\"https://github.com/rust-lang/regex/blob/1.3.0/Cargo.toml#L56\"><code class=\"hljs\">perf</code> feature</a>, then the oldest version it can select is <code class=\"hljs\">1.3.0</code>,\nbecause versions prior to that did not contain the <code class=\"hljs\">perf</code> feature. Similarly,\nif a feature is removed from a new release, then packages that require that\nfeature will be stuck on the older releases that contain that feature. It is\ndiscouraged to remove features in a SemVer-compatible release. Beware that\noptional dependencies also define an implicit feature, so removing an optional\ndependency or making it non-optional can cause problems, see <a href=\"semver.html#cargo-remove-opt-dep\">removing an\noptional dependency</a>.</p>\n<h4 id=\"feature-resolver-version-2\"><a class=\"header\" href=\"#feature-resolver-version-2\">Feature resolver version 2</a></h4>\n<p>When <code class=\"hljs\">resolver = \"2\"</code> is specified in <code class=\"hljs\">Cargo.toml</code> (see <a href=\"#resolver-versions\">resolver\nversions</a> below), a different feature resolver is used\nwhich uses a different algorithm for unifying features. The version <code class=\"hljs\">\"1\"</code>\nresolver will unify features for a package no matter where it is specified.\nThe version <code class=\"hljs\">\"2\"</code> resolver will avoid unifying features in the following\nsituations:</p>\n<ul>\n<li>\n<p>Features for target-specific dependencies are not enabled if the target is\nnot currently being built. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies.common]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"f1\"</span>]\n\n<span class=\"hljs-section\">[target.'cfg(windows)'.dependencies.common]</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0\"</span>\n<span class=\"hljs-attr\">features</span> = [<span class=\"hljs-string\">\"f2\"</span>]\n</code></pre>\n<p>When building this example for a non-Windows platform, the <code class=\"hljs\">f2</code> feature will\n<em>not</em> be enabled.</p>\n</li>\n<li>\n<p>Features enabled on <a href=\"specifying-dependencies.html#build-dependencies\">build-dependencies</a> or proc-macros will not be unified\nwhen those same dependencies are used as a normal dependency. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">log</span> = <span class=\"hljs-string\">\"0.4\"</span>\n\n<span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">log</span> = {version = <span class=\"hljs-string\">\"0.4\"</span>, features=[<span class=\"hljs-string\">'std'</span>]}\n</code></pre>\n<p>When building the build script, the <code class=\"hljs\">log</code> crate will be built with the <code class=\"hljs\">std</code>\nfeature. When building the library of your package, it will not enable the\nfeature.</p>\n</li>\n<li>\n<p>Features enabled on <a href=\"specifying-dependencies.html#development-dependencies\">dev-dependencies</a> will not be unified when those same\ndependencies are used as a normal dependency, unless those dev-dependencies\nare currently being built. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = {version = <span class=\"hljs-string\">\"1.0\"</span>, default-features = <span class=\"hljs-literal\">false</span>}\n\n<span class=\"hljs-section\">[dev-dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = {version = <span class=\"hljs-string\">\"1.0\"</span>, features = [<span class=\"hljs-string\">\"std\"</span>]}\n</code></pre>\n<p>In this example, the library will normally link against <code class=\"hljs\">serde</code> without the\n<code class=\"hljs\">std</code> feature. However, when built as a test or example, it will include the\n<code class=\"hljs\">std</code> feature. For example, <code class=\"hljs\">cargo test</code> or <code class=\"hljs\">cargo build --all-targets</code> will\nunify these features. Note that dev-dependencies in dependencies are always\nignored, this is only relevant for the top-level package or workspace\nmembers.</p>\n</li>\n</ul>\n<h3 id=\"links\"><a class=\"header\" href=\"#links\"><code>links</code></a></h3>\n<p>The <a href=\"manifest.html#the-links-field\"><code class=\"hljs\">links</code> field</a> is used to ensure only one copy of a native library is\nlinked into a binary. The resolver will attempt to find a graph where there is\nonly one instance of each <code class=\"hljs\">links</code> name. If it is unable to find a graph that\nsatisfies that constraint, it will return an error.</p>\n<p>For example, it is an error if one package depends on <a href=\"https://crates.io/crates/libgit2-sys\"><code class=\"hljs\">libgit2-sys</code></a> version\n<code class=\"hljs\">0.11</code> and another depends on <code class=\"hljs\">0.12</code>, because Cargo is unable to unify those,\nbut they both link to the <code class=\"hljs\">git2</code> native library. Due to this requirement, it\nis encouraged to be very careful when making SemVer-incompatible releases with\nthe <code class=\"hljs\">links</code> field if your library is in common use.</p>\n<h3 id=\"yanked-versions\"><a class=\"header\" href=\"#yanked-versions\">Yanked versions</a></h3>\n<p><a href=\"publishing.html#cargo-yank\">Yanked releases</a> are those that are marked that they should not be\nused. When the resolver is building the graph, it will ignore all yanked\nreleases unless they already exist in the <code class=\"hljs\">Cargo.lock</code> file or are explicitly\nrequested by the <a href=\"../commands/cargo-update.html#option-cargo-update---precise\"><code class=\"hljs\">--precise</code></a> flag of <code class=\"hljs\">cargo update</code> (nightly only).</p>\n<h2 id=\"dependency-updates\"><a class=\"header\" href=\"#dependency-updates\">Dependency updates</a></h2>\n<p>Dependency resolution is automatically performed by all Cargo commands that\nneed to know about the dependency graph. For example, <a href=\"../commands/cargo-build.html\"><code class=\"hljs\">cargo build</code></a> will run\nthe resolver to discover all the dependencies to build. After the first time\nit runs, the result is stored in the <code class=\"hljs\">Cargo.lock</code> file. Subsequent commands\nwill run the resolver, keeping dependencies locked to the versions in\n<code class=\"hljs\">Cargo.lock</code> <em>if it can</em>.</p>\n<p>If the dependency list in <code class=\"hljs\">Cargo.toml</code> has been modified, for example changing\nthe version of a dependency from <code class=\"hljs\">1.0</code> to <code class=\"hljs\">2.0</code>, then the resolver will select\na new version for that dependency that matches the new requirements. If that\nnew dependency introduces new requirements, those new requirements may also\ntrigger additional updates. The <code class=\"hljs\">Cargo.lock</code> file will be updated with the new\nresult. The <code class=\"hljs\">--locked</code> or <code class=\"hljs\">--frozen</code> flags can be used to change this behavior\nto prevent automatic updates when requirements change, and return an error\ninstead.</p>\n<p><a href=\"../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a> can be used to update the entries in <code class=\"hljs\">Cargo.lock</code> when new\nversions are published. Without any options, it will attempt to update all\npackages in the lock file. The <code class=\"hljs\">-p</code> flag can be used to target the update for\na specific package, and other flags such as <code class=\"hljs\">--recursive</code> or <code class=\"hljs\">--precise</code> can\nbe used to control how versions are selected.</p>\n<h2 id=\"overrides\"><a class=\"header\" href=\"#overrides\">Overrides</a></h2>\n<p>Cargo has several mechanisms to override dependencies within the graph. The\n<a href=\"overriding-dependencies.html\">Overriding Dependencies</a> chapter goes into detail on how to use overrides.\nThe overrides appear as an overlay to a registry, replacing the patched\nversion with the new entry. Otherwise, resolution is performed like normal.</p>\n<h2 id=\"dependency-kinds\"><a class=\"header\" href=\"#dependency-kinds\">Dependency kinds</a></h2>\n<p>There are three kinds of dependencies in a package: normal, <a href=\"specifying-dependencies.html#build-dependencies\">build</a>, and\n<a href=\"specifying-dependencies.html#development-dependencies\">dev</a>. For the most part these are all treated the same from\nthe perspective of the resolver. One difference is that dev-dependencies for\nnon-workspace members are always ignored, and do not influence resolution.</p>\n<p><a href=\"specifying-dependencies.html#platform-specific-dependencies\">Platform-specific dependencies</a> with the <code class=\"hljs\">[target]</code> table are resolved as-if\nall platforms are enabled. In other words, the resolver ignores the platform\nor <code class=\"hljs\">cfg</code> expression.</p>\n<h3 id=\"dev-dependency-cycles\"><a class=\"header\" href=\"#dev-dependency-cycles\">dev-dependency cycles</a></h3>\n<p>Usually the resolver does not allow cycles in the graph, but it does allow\nthem for <a href=\"specifying-dependencies.html#development-dependencies\">dev-dependencies</a>. For example, project “foo” has a dev-dependency\non “bar”, which has a normal dependency on “foo” (usually as a “path”\ndependency). This is allowed because there isn’t really a cycle from the\nperspective of the build artifacts. In this example, the “foo” library is\nbuilt (which does not need “bar” because “bar” is only used for tests), and\nthen “bar” can be built depending on “foo”, then the “foo” tests can be built\nlinking to “bar”.</p>\n<p>Beware that this can lead to confusing errors. In the case of building library\nunit tests, there are actually two copies of the library linked into the final\ntest binary: the one that was linked with “bar”, and the one built that\ncontains the unit tests. Similar to the issues highlighted in the\n<a href=\"#version-incompatibility-hazards\">Version-incompatibility hazards</a> section, the types between the two are not\ncompatible. Be careful when exposing types of “foo” from “bar” in this\nsituation, since the “foo” unit tests won’t treat them the same as the local\ntypes.</p>\n<p>If possible, try to split your package into multiple packages and restructure\nit so that it remains strictly acyclic.</p>\n<h2 id=\"resolver-versions\"><a class=\"header\" href=\"#resolver-versions\">Resolver versions</a></h2>\n<p>A different feature resolver algorithm can be used by specifying the resolver\nversion in <code class=\"hljs\">Cargo.toml</code> like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0.0\"</span>\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<p>The version <code class=\"hljs\">\"1\"</code> resolver is the original resolver that shipped with Cargo up to version 1.50.\nThe default is <code class=\"hljs\">\"2\"</code> if the root package specifies <a href=\"manifest.html#the-edition-field\"><code class=\"hljs\">edition = \"2021\"</code></a> or a newer edition.\nOtherwise the default is <code class=\"hljs\">\"1\"</code>.</p>\n<p>The version <code class=\"hljs\">\"2\"</code> resolver introduces changes in <a href=\"#features\">feature\nunification</a>. See the <a href=\"features.html#feature-resolver-version-2\">features chapter</a> for more\ndetails.</p>\n<p>The resolver is a global option that affects the entire workspace. The\n<code class=\"hljs\">resolver</code> version in dependencies is ignored, only the value in the top-level\npackage will be used. If using a <a href=\"workspaces.html#virtual-workspace\">virtual workspace</a>, the version should be\nspecified in the <code class=\"hljs\">[workspace]</code> table, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n<span class=\"hljs-attr\">members</span> = [<span class=\"hljs-string\">\"member1\"</span>, <span class=\"hljs-string\">\"member2\"</span>]\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<h2 id=\"recommendations\"><a class=\"header\" href=\"#recommendations\">Recommendations</a></h2>\n<p>The following are some recommendations for setting the version within your\npackage, and for specifying dependency requirements. These are general\nguidelines that should apply to common situations, but of course some\nsituations may require specifying unusual requirements.</p>\n<ul>\n<li>\n<p>Follow the <a href=\"semver.html\">SemVer guidelines</a> when deciding how to update your version\nnumber, and whether or not you will need to make a SemVer-incompatible\nversion change.</p>\n</li>\n<li>\n<p>Use caret requirements for dependencies, such as <code class=\"hljs\">\"1.2.3\"</code>, for most\nsituations. This ensures that the resolver can be maximally flexible in\nchoosing a version while maintaining build compatibility.</p>\n<ul>\n<li>Specify all three components with the version you are currently using.\nThis helps set the minimum version that will be used, and ensures that\nother users won’t end up with an older version of the dependency that\nmight be missing something that your package requires.</li>\n<li>Avoid <code class=\"hljs\">*</code> requirements, as they are not allowed on <a href=\"https://crates.io/\">crates.io</a>, and they\ncan pull in SemVer-breaking changes during a normal <code class=\"hljs\">cargo update</code>.</li>\n<li>Avoid overly broad version requirements. For example, <code class=\"hljs\">&gt;=2.0.0</code> can pull\nin any SemVer-incompatible version, like version <code class=\"hljs\">5.0.0</code>, which can result\nin broken builds in the future.</li>\n<li>Avoid overly narrow version requirements if possible. For example, if you\nspecify a tilde requirement like <code class=\"hljs\">bar=\"~1.3\"</code>, and another package\nspecifies a requirement of <code class=\"hljs\">bar=\"1.4\"</code>, this will fail to resolve, even\nthough minor releases should be compatible.</li>\n</ul>\n</li>\n<li>\n<p>Try to keep the dependency versions up-to-date with the actual minimum\nversions that your library requires. For example, if you have a requirement\nof <code class=\"hljs\">bar=\"1.0.12\"</code>, and then in a future release you start using new features\nadded in the <code class=\"hljs\">1.1.0</code> release of “bar”, update your dependency requirement to\n<code class=\"hljs\">bar=\"1.1.0\"</code>.</p>\n<p>If you fail to do this, it may not be immediately obvious because Cargo can\nopportunistically choose the newest version when you run a blanket <code class=\"hljs\">cargo update</code>. However, if another user depends on your library, and runs <code class=\"hljs\">cargo update your-library</code>, it will <em>not</em> automatically update “bar” if it is\nlocked in their <code class=\"hljs\">Cargo.lock</code>. It will only update “bar” in that situation if\nthe dependency declaration is also updated. Failure to do so can cause\nconfusing build errors for the user using <code class=\"hljs\">cargo update your-library</code>.</p>\n</li>\n<li>\n<p>If two packages are tightly coupled, then an <code class=\"hljs\">=</code> dependency requirement may\nhelp ensure that they stay in sync. For example, a library with a companion\nproc-macro library will sometimes make assumptions between the two libraries\nthat won’t work well if the two are out of sync (and it is never expected to\nuse the two libraries independently). The parent library can use an <code class=\"hljs\">=</code>\nrequirement on the proc-macro, and re-export the macros for easy access.</p>\n</li>\n<li>\n<p><code class=\"hljs\">0.0.x</code> versions can be used for packages that are permanently unstable.</p>\n</li>\n</ul>\n<p>In general, the stricter you make the dependency requirements, the more likely\nit will be for the resolver to fail. Conversely, if you use requirements that\nare too loose, it may be possible for new versions to be published that will\nbreak the build.</p>\n<h2 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h2>\n<p>The following illustrates some problems you may experience, and some possible\nsolutions.</p>\n<h3 id=\"why-was-a-dependency-included\"><a class=\"header\" href=\"#why-was-a-dependency-included\">Why was a dependency included?</a></h3>\n<p>Say you see dependency <code class=\"hljs\">rand</code> in the <code class=\"hljs\">cargo check</code> output but don’t think its needed and want to understand why its being pulled in.</p>\n<p>You can run</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --invert rand</span>\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<h3 id=\"why-was-that-feature-on-this-dependency-enabled\"><a class=\"header\" href=\"#why-was-that-feature-on-this-dependency-enabled\">Why was that feature on this dependency enabled?</a></h3>\n<p>You might identify that it was an activated feature that caused <code class=\"hljs\">rand</code> to show up.  <strong>To figure out which package activated the feature, you can add the <code class=\"hljs\">--edges features</code></strong></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --edges features --invert rand</span>\nrand v0.8.5\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<h3 id=\"unexpected-dependency-duplication\"><a class=\"header\" href=\"#unexpected-dependency-duplication\">Unexpected dependency duplication</a></h3>\n<p>You see multiple instances of <code class=\"hljs\">rand</code> when you run</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo tree --workspace --target all --all-features --duplicates</span>\nrand v0.7.3\n└── ...\n\nrand v0.8.5\n└── ...\n</code></pre>\n<p>The resolver algorithm has converged on a solution that includes two copies of a\ndependency when one would suffice. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Package A</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.7\"</span>\n\n<span class=\"hljs-comment\"># Package B</span>\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"&gt;=0.6\"</span>  <span class=\"hljs-comment\"># <span class=\"hljs-doctag\">note:</span> open requirements such as this are discouraged</span>\n</code></pre>\n<p>In this example, Cargo may build two copies of the <code class=\"hljs\">rand</code> crate, even though a\nsingle copy at version <code class=\"hljs\">0.7.3</code> would meet all requirements. This is because the\nresolver’s algorithm favors building the latest available version of <code class=\"hljs\">rand</code> for\nPackage B, which is <code class=\"hljs\">0.8.5</code> at the time of this writing, and that is\nincompatible with Package A’s specification. The resolver’s algorithm does not\ncurrently attempt to “deduplicate” in this situation.</p>\n<p>The use of open-ended version requirements like <code class=\"hljs\">&gt;=0.6</code> is discouraged in Cargo.\nBut, if you run into this situation, the <a href=\"../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a> command with the\n<code class=\"hljs\">--precise</code> flag can be used to manually remove such duplications.</p>\n<h3 id=\"why-wasnt-a-newer-version-selected\"><a class=\"header\" href=\"#why-wasnt-a-newer-version-selected\">Why wasn’t a newer version selected?</a></h3>\n<p>Say you noticed that the latest version of a dependency wasn’t selected when you ran:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update</span>\n</code></pre>\n<p>You can enable some extra logging to see why this happened:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> env CARGO_LOG=cargo::core::resolver=trace cargo update</span>\n</code></pre>\n<p><strong>Note:</strong> Cargo log targets and levels may change over time.</p>\n<h3 id=\"semver-breaking-patch-release-breaks-the-build\"><a class=\"header\" href=\"#semver-breaking-patch-release-breaks-the-build\">SemVer-breaking patch release breaks the build</a></h3>\n<p>Sometimes a project may inadvertently publish a point release with a\nSemVer-breaking change. When users update with <code class=\"hljs\">cargo update</code>, they will pick\nup this new release, and then their build may break. In this situation, it is\nrecommended that the project should <a href=\"publishing.html#cargo-yank\">yank</a> the release, and either remove the\nSemVer-breaking change, or publish it as a new SemVer-major version increase.</p>\n<p>If the change happened in a third-party project, if possible try to\n(politely!) work with the project to resolve the issue.</p>\n<p>While waiting for the release to be yanked, some workarounds depend on the\ncircumstances:</p>\n<ul>\n<li>If your project is the end product (such as a binary executable), just avoid\nupdating the offending package in <code class=\"hljs\">Cargo.lock</code>. This can be done with the\n<code class=\"hljs\">--precise</code> flag in <a href=\"../commands/cargo-update.html\"><code class=\"hljs\">cargo update</code></a>.</li>\n<li>If you publish a binary on <a href=\"https://crates.io/\">crates.io</a>, then you can temporarily add an <code class=\"hljs\">=</code>\nrequirement to force the dependency to a specific good version.\n<ul>\n<li>Binary projects can alternatively recommend users to use the <code class=\"hljs\">--locked</code>\nflag with <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> to use the original <code class=\"hljs\">Cargo.lock</code> that contains\nthe known good version.</li>\n</ul>\n</li>\n<li>Libraries may also consider publishing a temporary new release with stricter\nrequirements that avoid the troublesome dependency. You may want to consider\nusing range requirements (instead of <code class=\"hljs\">=</code>) to avoid overly-strict\nrequirements that may conflict with other packages using the same\ndependency. Once the problem has been resolved, you can publish another\npoint release that relaxes the dependency back to a caret requirement.</li>\n<li>If it looks like the third-party project is unable or unwilling to yank the\nrelease, then one option is to update your code to be compatible with the\nchanges, and update the dependency requirement to set the minimum version to\nthe new release. You will also need to consider if this is a SemVer-breaking\nchange of your own library, for example if it exposes types from the\ndependency.</li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/registry-web-api.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/semver.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/registry-web-api.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/semver.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:24.042Z"
}