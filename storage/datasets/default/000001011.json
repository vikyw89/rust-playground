{
	"title": "Exclusive in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.Exclusive.html",
	"markdown": "# Exclusive in std::sync - Rust\n\n```\npub struct Exclusive<T>where\n    T: ?Sized,{ /* private fields */ }\n```\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nExpand description\n\n`Exclusive` provides only _mutable_ access, also referred to as _exclusive_ access to the underlying value. It provides no _immutable_, or _shared_ access to the underlying value.\n\nWhile this may seem not very useful, it allows `Exclusive` to _unconditionally_ implement [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\"). Indeed, the safety requirements of `Sync` state that for `Exclusive` to be `Sync`, it must be sound to _share_ across threads, that is, it must be sound for `&Exclusive` to cross thread boundaries. By design, a `&Exclusive` has no API whatsoever, making it useless, thus harmless, thus memory safe.\n\nCertain constructs like [`Future`](../future/trait.Future.html \"trait std::future::Future\")s can only be used with _exclusive_ access, and are often `Send` but not `Sync`, so `Exclusive` can be used as hint to the Rust compiler that something is `Sync` in practice.\n\n### [§](#examples)Examples\n\nUsing a non-`Sync` future prevents the wrapping struct from being `Sync`\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nuse core::cell::Cell;\n\nasync fn other() {}\nfn assert_sync<T: Sync>(t: T) {}\nstruct State<F> {\n    future: F\n}\n\nassert_sync(State {\n    future: async {\n        let cell = Cell::new(1);\n        let cell_ref = &cell;\n        other().await;\n        let value = cell_ref.get();\n    }\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::cell::Cell;%0A++++%0A++++async+fn+other()+%7B%7D%0A++++fn+assert_sync%3CT:+Sync%3E(t:+T)+%7B%7D%0A++++struct+State%3CF%3E+%7B%0A++++++++future:+F%0A++++%7D%0A++++%0A++++assert_sync(State+%7B%0A++++++++future:+async+%7B%0A++++++++++++let+cell+=+Cell::new(1);%0A++++++++++++let+cell_ref+=+%26cell;%0A++++++++++++other().await;%0A++++++++++++let+value+=+cell_ref.get();%0A++++++++%7D%0A++++%7D);%0A%7D&edition=2021)\n\n`Exclusive` ensures the struct is `Sync` without stripping the future of its functionality.\n\n```\n#![feature(exclusive_wrapper)]\nuse core::cell::Cell;\nuse core::sync::Exclusive;\n\nasync fn other() {}\nfn assert_sync<T: Sync>(t: T) {}\nstruct State<F> {\n    future: Exclusive<F>\n}\n\nassert_sync(State {\n    future: Exclusive::new(async {\n        let cell = Cell::new(1);\n        let cell_ref = &cell;\n        other().await;\n        let value = cell_ref.get();\n    })\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exclusive_wrapper)%5D%0Afn+main()+%7B%0A++++use+core::cell::Cell;%0A++++use+core::sync::Exclusive;%0A++++%0A++++async+fn+other()+%7B%7D%0A++++fn+assert_sync%3CT:+Sync%3E(t:+T)+%7B%7D%0A++++struct+State%3CF%3E+%7B%0A++++++++future:+Exclusive%3CF%3E%0A++++%7D%0A++++%0A++++assert_sync(State+%7B%0A++++++++future:+Exclusive::new(async+%7B%0A++++++++++++let+cell+=+Cell::new(1);%0A++++++++++++let+cell_ref+=+%26cell;%0A++++++++++++other().await;%0A++++++++++++let+value+=+cell_ref.get();%0A++++++++%7D)%0A++++%7D);%0A%7D&version=nightly&edition=2021)\n\n### [§](#parallels-with-a-mutex)Parallels with a mutex\n\nIn some sense, `Exclusive` can be thought of as a _compile-time_ version of a mutex, as the borrow-checker guarantees that only one `&mut` can exist for any value. This is a parallel with the fact that `&` and `&mut` references together can be thought of as a _compile-time_ version of a read-write lock.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#98)[§](#impl-Exclusive%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#103)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nWrap a value in an `Exclusive`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#111)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nUnwrap the value contained in the `Exclusive`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#116)[§](#impl-Exclusive%3CT%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#121)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nGet exclusive access to the underlying value.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#134)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nGet pinned exclusive access to the underlying value.\n\n`Exclusive` is considered to _structurally pin_ the underlying value, which means _unpinned_ `Exclusive`s can produce _unpinned_ access to the underlying value, but _pinned_ `Exclusive`s only produce _pinned_ access to the underlying value.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#146)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nBuild a _mutable_ reference to an `Exclusive<T>` from a _mutable_ reference to a `T`. This allows you to skip building an `Exclusive` with [`Exclusive::new`](about:blank/struct.Exclusive.html#method.new \"associated function std::sync::Exclusive::new\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#157)\n\n🔬This is a nightly-only experimental API. (`exclusive_wrapper` [#98407](https://github.com/rust-lang/rust/issues/98407))\n\nBuild a _pinned mutable_ reference to an `Exclusive<T>` from a _pinned mutable_ reference to a `T`. This allows you to skip building an `Exclusive` with [`Exclusive::new`](about:blank/struct.Exclusive.html#method.new \"associated function std::sync::Exclusive::new\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#210-212)[§](#impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E)\n\n[§](#associatedtype.Yield)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Yield)\n\n[§](#associatedtype.Return)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Return)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#218)[§](#method.resume)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine. [Read more](about:blank/ops/trait.Coroutine.html#tymethod.resume)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#92)[§](#impl-Debug-for-Exclusive%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#81)[§](#impl-Default-for-Exclusive%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#186-189)[§](#impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#191)[§](#method.call_mut)\n\n🔬This is a nightly-only experimental API. (`fn_traits` [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#173-176)[§](#impl-FnOnce%3CArgs%3E-for-Exclusive%3CF%3E)\n\n[§](#associatedtype.Output-1)\n\nThe returned type after the call operator is used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#180)[§](#method.call_once)\n\n🔬This is a nightly-only experimental API. (`fn_traits` [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#165)[§](#impl-From%3CT%3E-for-Exclusive%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#167)[§](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#197-199)[§](#impl-Future-for-Exclusive%3CT%3E)\n\n[§](#associatedtype.Output)\n\nThe type of value produced on completion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#204)[§](#method.poll)\n\nAttempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available. [Read more](about:blank/future/trait.Future.html#tymethod.poll)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#89)[§](#impl-Sync-for-Exclusive%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138)[§](#impl-IntoFuture-for-F)\n\n[§](#associatedtype.Output-2)\n\nThe output that the future will produce on completion.\n\n[§](#associatedtype.IntoFuture)\n\nWhich kind of future are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142)[§](#method.into_future)\n\nCreates a future from a value. [Read more](about:blank/future/trait.IntoFuture.html#tymethod.into_future)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924)[§](#impl-Pattern%3C'a%3E-for-F)\n\n[§](#associatedtype.Searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.into_searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_contained_in)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.strip_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.strip_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`Exclusive` provides only mutable access, also referred to as exclusive access to the underlying value. It provides no immutable, or shared access to the underlying value.\"><title>Exclusive in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Exclusive</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Exclusive</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.from_pin_mut\">from_pin_mut</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_pin_mut\">get_pin_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E\">Coroutine&lt;R&gt;</a></li><li><a href=\"#impl-Debug-for-Exclusive%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Exclusive%3CT%3E\">Default</a></li><li><a href=\"#impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E\">FnMut&lt;Args&gt;</a></li><li><a href=\"#impl-FnOnce%3CArgs%3E-for-Exclusive%3CF%3E\">FnOnce&lt;Args&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-Exclusive%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-Future-for-Exclusive%3CT%3E\">Future</a></li><li><a href=\"#impl-Sync-for-Exclusive%3CT%3E\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Exclusive%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Exclusive%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Exclusive%3CT%3E\">Send</a></li><li><a href=\"#impl-Unpin-for-Exclusive%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Exclusive%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-IntoFuture-for-F\">IntoFuture</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-F\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">Exclusive</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#83\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Exclusive&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>Exclusive</code> provides only <em>mutable</em> access, also referred to as <em>exclusive</em>\naccess to the underlying value. It provides no <em>immutable</em>, or <em>shared</em>\naccess to the underlying value.</p>\n<p>While this may seem not very useful, it allows <code>Exclusive</code> to <em>unconditionally</em>\nimplement <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>. Indeed, the safety requirements of <code>Sync</code> state that for <code>Exclusive</code>\nto be <code>Sync</code>, it must be sound to <em>share</em> across threads, that is, it must be sound\nfor <code>&amp;Exclusive</code> to cross thread boundaries. By design, a <code>&amp;Exclusive</code> has no API\nwhatsoever, making it useless, thus harmless, thus memory safe.</p>\n<p>Certain constructs like <a href=\"../future/trait.Future.html\" title=\"trait std::future::Future\"><code>Future</code></a>s can only be used with <em>exclusive</em> access,\nand are often <code>Send</code> but not <code>Sync</code>, so <code>Exclusive</code> can be used as hint to the\nRust compiler that something is <code>Sync</code> in practice.</p>\n<h3 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h3>\n<p>Using a non-<code>Sync</code> future prevents the wrapping struct from being <code>Sync</code></p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>core::cell::Cell;\n\n<span class=\"kw\">async fn </span>other() {}\n<span class=\"kw\">fn </span>assert_sync&lt;T: Sync&gt;(t: T) {}\n<span class=\"kw\">struct </span>State&lt;F&gt; {\n    future: F\n}\n\nassert_sync(State {\n    future: <span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span>cell = Cell::new(<span class=\"number\">1</span>);\n        <span class=\"kw\">let </span>cell_ref = <span class=\"kw-2\">&amp;</span>cell;\n        other().<span class=\"kw\">await</span>;\n        <span class=\"kw\">let </span>value = cell_ref.get();\n    }\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::cell::Cell;%0A++++%0A++++async+fn+other()+%7B%7D%0A++++fn+assert_sync%3CT:+Sync%3E(t:+T)+%7B%7D%0A++++struct+State%3CF%3E+%7B%0A++++++++future:+F%0A++++%7D%0A++++%0A++++assert_sync(State+%7B%0A++++++++future:+async+%7B%0A++++++++++++let+cell+=+Cell::new(1);%0A++++++++++++let+cell_ref+=+%26cell;%0A++++++++++++other().await;%0A++++++++++++let+value+=+cell_ref.get();%0A++++++++%7D%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><code>Exclusive</code> ensures the struct is <code>Sync</code> without stripping the future of its\nfunctionality.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exclusive_wrapper)]\n</span><span class=\"kw\">use </span>core::cell::Cell;\n<span class=\"kw\">use </span>core::sync::Exclusive;\n\n<span class=\"kw\">async fn </span>other() {}\n<span class=\"kw\">fn </span>assert_sync&lt;T: Sync&gt;(t: T) {}\n<span class=\"kw\">struct </span>State&lt;F&gt; {\n    future: Exclusive&lt;F&gt;\n}\n\nassert_sync(State {\n    future: Exclusive::new(<span class=\"kw\">async </span>{\n        <span class=\"kw\">let </span>cell = Cell::new(<span class=\"number\">1</span>);\n        <span class=\"kw\">let </span>cell_ref = <span class=\"kw-2\">&amp;</span>cell;\n        other().<span class=\"kw\">await</span>;\n        <span class=\"kw\">let </span>value = cell_ref.get();\n    })\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exclusive_wrapper)%5D%0Afn+main()+%7B%0A++++use+core::cell::Cell;%0A++++use+core::sync::Exclusive;%0A++++%0A++++async+fn+other()+%7B%7D%0A++++fn+assert_sync%3CT:+Sync%3E(t:+T)+%7B%7D%0A++++struct+State%3CF%3E+%7B%0A++++++++future:+Exclusive%3CF%3E%0A++++%7D%0A++++%0A++++assert_sync(State+%7B%0A++++++++future:+Exclusive::new(async+%7B%0A++++++++++++let+cell+=+Cell::new(1);%0A++++++++++++let+cell_ref+=+%26cell;%0A++++++++++++other().await;%0A++++++++++++let+value+=+cell_ref.get();%0A++++++++%7D)%0A++++%7D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h3 id=\"parallels-with-a-mutex\"><a class=\"doc-anchor\" href=\"#parallels-with-a-mutex\">§</a>Parallels with a mutex</h3>\n<p>In some sense, <code>Exclusive</code> can be thought of as a <em>compile-time</em> version of\na mutex, as the borrow-checker guarantees that only one <code>&amp;mut</code> can exist\nfor any value. This is a parallel with the fact that\n<code>&amp;</code> and <code>&amp;mut</code> references together can be thought of as a <em>compile-time</em>\nversion of a read-write lock.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#98\">source</a><a href=\"#impl-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#103\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Exclusive<T>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Wrap a value in an <code>Exclusive</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#111\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Unwrap the value contained in the <code>Exclusive</code></p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Exclusive%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#116\">source</a><a href=\"#impl-Exclusive%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#121\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Get exclusive access to the underlying value.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_pin_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#134\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.get_pin_mut\" class=\"fn\">get_pin_mut</a>(self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;&gt;) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Get pinned exclusive access to the underlying value.</p>\n<p><code>Exclusive</code> is considered to <em>structurally pin</em> the underlying\nvalue, which means <em>unpinned</em> <code>Exclusive</code>s can produce <em>unpinned</em>\naccess to the underlying value, but <em>pinned</em> <code>Exclusive</code>s only\nproduce <em>pinned</em> access to the underlying value.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#146\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_mut\" class=\"fn\">from_mut</a>(r: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut Exclusive<T>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Build a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from\na <em>mutable</em> reference to a <code>T</code>. This allows you to skip\nbuilding an <code>Exclusive</code> with <a href=\"struct.Exclusive.html#method.new\" title=\"associated function std::sync::Exclusive::new\"><code>Exclusive::new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_pin_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#157\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_pin_mut\" class=\"fn\">from_pin_mut</a>(r: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exclusive_wrapper</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98407\">#98407</a>)</span></div></span></summary><div class=\"docblock\"><p>Build a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from\na <em>pinned mutable</em> reference to a <code>T</code>. This allows you to skip\nbuilding an <code>Exclusive</code> with <a href=\"struct.Exclusive.html#method.new\" title=\"associated function std::sync::Exclusive::new\"><code>Exclusive::new</code></a>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#210-212\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Exclusive%3CG%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, G&gt; <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine yields. <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine returns. <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#218\">source</a><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;G&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;G&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;G&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">Resumes the execution of this coroutine. <a href=\"../ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#92\">source</a><a href=\"#impl-Debug-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#93\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#81\">source</a><a href=\"#impl-Default-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#81\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Exclusive<T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#186-189\">source</a><a href=\"#impl-FnMut%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, Args&gt; <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt;,\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#191\">source</a><a href=\"#method.call_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.FnMut.html#tymethod.call_mut\" class=\"fn\">call_mut</a>(\n    &amp;mut self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;F&gt; as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<Exclusive<F> as FnOnce<Args>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span><div class=\"docblock\">Performs the call operation.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FnOnce%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#173-176\">source</a><a href=\"#impl-FnOnce%3CArgs%3E-for-Exclusive%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, Args&gt; <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;,\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.FnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after the call operator is used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_once\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#180\">source</a><a href=\"#method.call_once\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.FnOnce.html#tymethod.call_once\" class=\"fn\">call_once</a>(\n    self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;F&gt; as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<Exclusive<F> as FnOnce<Args>>::Output\">ⓘ</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span><div class=\"docblock\">Performs the call operation.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#165\">source</a><a href=\"#impl-From%3CT%3E-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#167\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Exclusive<T>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Future-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#197-199\">source</a><a href=\"#impl-Future-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.Future.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;T as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.poll\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#204\">source</a><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.Future.html#tymethod.poll\" class=\"fn\">poll</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;&lt;<a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt; as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\">Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a href=\"../future/trait.Future.html#tymethod.poll\">Read more</a></div></details></div></details><section id=\"impl-Sync-for-Exclusive%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/sync/exclusive.rs.html#89\">source</a><a href=\"#impl-Sync-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Exclusive%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Exclusive%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-Exclusive%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-Exclusive%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Exclusive%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Exclusive%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Exclusive.html\" title=\"struct std::sync::Exclusive\">Exclusive</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoFuture-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138\">source</a><a href=\"#impl-IntoFuture-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The output that the future will produce on completion.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoFuture\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a> = F</h4></section></summary><div class=\"docblock\">Which kind of future are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_future\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142\">source</a><a href=\"#method.into_future\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\" class=\"fn\">into_future</a>(self) -&gt; &lt;F as <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" title=\"type std::future::IntoFuture::IntoFuture\">IntoFuture</a></h4></section></summary><div class=\"docblock\">Creates a future from a value. <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches anywhere in the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the front of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the front of haystack, if it matches.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;: <a class=\"trait\" href=\"../str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the back of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;: <a class=\"trait\" href=\"../str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the back of haystack, if it matches.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&mut Exclusive<T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T&gt; <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> for <a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> + ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../future/trait.Future.html#associatedtype.Output\\\" class=\\\"associatedtype\\\">Output</a> = &lt;T as <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../future/trait.Future.html#associatedtype.Output\\\" title=\\\"type std::future::Future::Output\\\">Output</a>;</div>\",\"<Exclusive<F> as FnOnce<Args>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T&gt; <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> for <a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> + ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../future/trait.Future.html#associatedtype.Output\\\" class=\\\"associatedtype\\\">Output</a> = &lt;T as <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../future/trait.Future.html#associatedtype.Output\\\" title=\\\"type std::future::Future::Output\\\">Output</a>;</div>\",\"Exclusive<T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T&gt; <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> for <a class=\\\"struct\\\" href=\\\"struct.Exclusive.html\\\" title=\\\"struct std::sync::Exclusive\\\">Exclusive</a>&lt;T&gt;<div class=\\\"where\\\">where\\n    T: <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a> + ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../future/trait.Future.html#associatedtype.Output\\\" class=\\\"associatedtype\\\">Output</a> = &lt;T as <a class=\\\"trait\\\" href=\\\"../future/trait.Future.html\\\" title=\\\"trait std::future::Future\\\">Future</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../future/trait.Future.html#associatedtype.Output\\\" title=\\\"type std::future::Future::Output\\\">Output</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:47.039Z"
}