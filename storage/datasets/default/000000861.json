{
	"title": "TcpStream in std::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/net/struct.TcpStream.html",
	"markdown": "# TcpStream in std::net - Rust\n\n## Struct [std](../index.html)::[net](index.html)::[TcpStream](#)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#50) ·\n\n```\npub struct TcpStream(/* private fields */);\n```\n\nExpand description\n\nA TCP stream between a local and a remote socket.\n\nAfter creating a `TcpStream` by either [`connect`](about:blank/struct.TcpStream.html#method.connect \"associated function std::net::TcpStream::connect\")ing to a remote host or [`accept`](about:blank/struct.TcpListener.html#method.accept \"method std::net::TcpListener::accept\")ing a connection on a [`TcpListener`](struct.TcpListener.html \"struct std::net::TcpListener\"), data can be transmitted by [reading](../io/trait.Read.html \"trait std::io::Read\") and [writing](../io/trait.Write.html \"trait std::io::Write\") to it.\n\nThe connection will be closed when the value is dropped. The reading and writing portions of the connection can also be shut down individually with the [`shutdown`](about:blank/struct.TcpStream.html#method.shutdown \"method std::net::TcpStream::shutdown\") method.\n\nThe Transmission Control Protocol is specified in [IETF RFC 793](https://tools.ietf.org/html/rfc793).\n\n## [§](#examples)Examples\n\n```\nuse std::io::prelude::*;\nuse std::net::TcpStream;\n\nfn main() -> std::io::Result<()> {\n    let mut stream = TcpStream::connect(\"127.0.0.1:34254\")?;\n\n    stream.write(&[1])?;\n    stream.read(&mut [0; 128])?;\n    Ok(())\n} // the stream is closed here\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::net::TcpStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:34254%22)?;%0A%0A++++stream.write(%26%5B1%5D)?;%0A++++stream.read(%26mut+%5B0;+128%5D)?;%0A++++Ok(())%0A%7D+//+the+stream+is+closed+here&edition=2021)\n\n[source](about:blank/src/std/net/tcp.rs.html#113-608)[§](#impl-TcpStream)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#156-158)\n\nOpens a TCP connection to a remote host.\n\n`addr` is an address of the remote host. Anything which implements [`ToSocketAddrs`](trait.ToSocketAddrs.html \"trait std::net::ToSocketAddrs\") trait can be supplied for the address; see this trait documentation for concrete examples.\n\nIf `addr` yields multiple addresses, `connect` will be attempted with each of the addresses until a connection is successful. If none of the addresses result in a successful connection, the error returned from the last connection attempt (the last address) is returned.\n\n##### [§](#examples-1)Examples\n\nOpen a TCP connection to `127.0.0.1:8080`:\n\n```\nuse std::net::TcpStream;\n\nif let Ok(stream) = TcpStream::connect(\"127.0.0.1:8080\") {\n    println!(\"Connected to the server!\");\n} else {\n    println!(\"Couldn't connect to server...\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++if+let+Ok(stream)+=+TcpStream::connect(%22127.0.0.1:8080%22)+%7B%0A++++++++println!(%22Connected+to+the+server!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Couldn%27t+connect+to+server...%22);%0A++++%7D%0A%7D&edition=2021)\n\nOpen a TCP connection to `127.0.0.1:8080`. If the connection fails, open a TCP connection to `127.0.0.1:8081`:\n\n```\nuse std::net::{SocketAddr, TcpStream};\n\nlet addrs = [\n    SocketAddr::from(([127, 0, 0, 1], 8080)),\n    SocketAddr::from(([127, 0, 0, 1], 8081)),\n];\nif let Ok(stream) = TcpStream::connect(&addrs[..]) {\n    println!(\"Connected to the server!\");\n} else {\n    println!(\"Couldn't connect to server...\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+TcpStream%7D;%0A++++%0A++++let+addrs+=+%5B%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+8080)),%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+8081)),%0A++++%5D;%0A++++if+let+Ok(stream)+=+TcpStream::connect(%26addrs%5B..%5D)+%7B%0A++++++++println!(%22Connected+to+the+server!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Couldn%27t+connect+to+server...%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.21.0 · [source](about:blank/src/std/net/tcp.rs.html#172-174)\n\nOpens a TCP connection to a remote host with a timeout.\n\nUnlike `connect`, `connect_timeout` takes a single [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") since timeout must be applied to individual addresses.\n\nIt is an error to pass a zero `Duration` to this function.\n\nUnlike other methods on `TcpStream`, this does not correspond to a single system call. It instead calls `connect` in nonblocking mode and then uses an OS-specific mechanism to await the completion of the connection request.\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#189-191)\n\nReturns the socket address of the remote peer of this TCP connection.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nassert_eq!(stream.peer_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127, 0, 0, 1), 8080)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+SocketAddr,+SocketAddrV4,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++assert_eq!(stream.peer_addr().unwrap(),%0A+++++++++++++++SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127,+0,+0,+1),+8080)));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#206-208)\n\nReturns the socket address of the local half of this TCP connection.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::net::{IpAddr, Ipv4Addr, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nassert_eq!(stream.local_addr().unwrap().ip(),\n           IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++assert_eq!(stream.local_addr().unwrap().ip(),%0A+++++++++++++++IpAddr::V4(Ipv4Addr::new(127,+0,+0,+1)));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#233-235)\n\nShuts down the read, write, or both halves of this connection.\n\nThis function will cause all pending and future I/O on the specified portions to return immediately with an appropriate value (see the documentation of [`Shutdown`](enum.Shutdown.html \"enum std::net::Shutdown\")).\n\n##### [§](#platform-specific-behavior)Platform-specific behavior\n\nCalling this function multiple times may result in different behavior, depending on the operating system. On Linux, the second call will return `Ok(())`, but on macOS, it will return `ErrorKind::NotConnected`. This may change in the future.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::net::{Shutdown, TcpStream};\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.shutdown(Shutdown::Both).expect(\"shutdown call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BShutdown,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.shutdown(Shutdown::Both).expect(%22shutdown+call+failed%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#254-256)\n\nCreates a new independently owned handle to the underlying socket.\n\nThe returned `TcpStream` is a reference to the same stream that this object references. Both handles will read and write the same stream of data, and options set on one stream will be propagated to the other stream.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nlet stream_clone = stream.try_clone().expect(\"clone failed...\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++let+stream_clone+=+stream.try_clone().expect(%22clone+failed...%22);%0A%7D&edition=2021)\n\n1.4.0 · [source](about:blank/src/std/net/tcp.rs.html#298-300)\n\nSets the read timeout to the timeout specified.\n\nIf the value specified is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`read`](about:blank/io/trait.Read.html#tymethod.read \"method std::io::Read::read\") calls will block indefinitely. An [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method.\n\n##### [§](#platform-specific-behavior-1)Platform-specific behavior\n\nPlatforms may return a different error code whenever a read times out as a result of setting this option. For example Unix typically returns an error of the kind [`WouldBlock`](about:blank/io/enum.ErrorKind.html#variant.WouldBlock \"variant std::io::ErrorKind::WouldBlock\"), but Windows may return [`TimedOut`](about:blank/io/enum.ErrorKind.html#variant.TimedOut \"variant std::io::ErrorKind::TimedOut\").\n\n##### [§](#examples-6)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_read_timeout(None).expect(\"set_read_timeout call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_read_timeout(None).expect(%22set_read_timeout+call+failed%22);%0A%7D&edition=2021)\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method:\n\n```\nuse std::io;\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\nlet result = stream.set_read_timeout(Some(Duration::new(0, 0)));\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22).unwrap();%0A++++let+result+=+stream.set_read_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput)%0A%7D&edition=2021)\n\n1.4.0 · [source](about:blank/src/std/net/tcp.rs.html#342-344)\n\nSets the write timeout to the timeout specified.\n\nIf the value specified is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\") calls will block indefinitely. An [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method.\n\n##### [§](#platform-specific-behavior-2)Platform-specific behavior\n\nPlatforms may return a different error code whenever a write times out as a result of setting this option. For example Unix typically returns an error of the kind [`WouldBlock`](about:blank/io/enum.ErrorKind.html#variant.WouldBlock \"variant std::io::ErrorKind::WouldBlock\"), but Windows may return [`TimedOut`](about:blank/io/enum.ErrorKind.html#variant.TimedOut \"variant std::io::ErrorKind::TimedOut\").\n\n##### [§](#examples-7)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_write_timeout(None).expect(\"set_write_timeout call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_write_timeout(None).expect(%22set_write_timeout+call+failed%22);%0A%7D&edition=2021)\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned if the zero [`Duration`](../time/struct.Duration.html \"struct std::time::Duration\") is passed to this method:\n\n```\nuse std::io;\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\").unwrap();\nlet result = stream.set_write_timeout(Some(Duration::new(0, 0)));\nlet err = result.unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22).unwrap();%0A++++let+result+=+stream.set_write_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput)%0A%7D&edition=2021)\n\n1.4.0 · [source](about:blank/src/std/net/tcp.rs.html#367-369)\n\nReturns the read timeout of this socket.\n\nIf the timeout is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`read`](about:blank/io/trait.Read.html#tymethod.read \"method std::io::Read::read\") calls will block indefinitely.\n\n##### [§](#platform-specific-behavior-3)Platform-specific behavior\n\nSome platforms do not provide access to the current timeout.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_read_timeout(None).expect(\"set_read_timeout call failed\");\nassert_eq!(stream.read_timeout().unwrap(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_read_timeout(None).expect(%22set_read_timeout+call+failed%22);%0A++++assert_eq!(stream.read_timeout().unwrap(),+None);%0A%7D&edition=2021)\n\n1.4.0 · [source](about:blank/src/std/net/tcp.rs.html#392-394)\n\nReturns the write timeout of this socket.\n\nIf the timeout is [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"), then [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\") calls will block indefinitely.\n\n##### [§](#platform-specific-behavior-4)Platform-specific behavior\n\nSome platforms do not provide access to the current timeout.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_write_timeout(None).expect(\"set_write_timeout call failed\");\nassert_eq!(stream.write_timeout().unwrap(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_write_timeout(None).expect(%22set_write_timeout+call+failed%22);%0A++++assert_eq!(stream.write_timeout().unwrap(),+None);%0A%7D&edition=2021)\n\n1.18.0 · [source](about:blank/src/std/net/tcp.rs.html#414-416)\n\nReceives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.\n\nSuccessive calls return the same data. This is accomplished by passing `MSG_PEEK` as a flag to the underlying `recv` system call.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8000\")\n                       .expect(\"Couldn't connect to the server...\");\nlet mut buf = [0; 10];\nlet len = stream.peek(&mut buf).expect(\"peek failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8000%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++let+mut+buf+=+%5B0;+10%5D;%0A++++let+len+=+stream.peek(%26mut+buf).expect(%22peek+failed%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/net/tcp.rs.html#439-441)\n\n🔬This is a nightly-only experimental API. (`tcp_linger` [#88494](https://github.com/rust-lang/rust/issues/88494))\n\nSets the value of the `SO_LINGER` option on this socket.\n\nThis value controls how the socket is closed when data remains to be sent. If `SO_LINGER` is set, the socket will remain open for the specified duration as the system attempts to send pending data. Otherwise, the system may close the socket immediately, or wait for a default timeout.\n\n##### [§](#examples-11)Examples\n\n```\n#![feature(tcp_linger)]\n\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_linger(Some(Duration::from_secs(0))).expect(\"set_linger call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_linger)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_linger(Some(Duration::from_secs(0))).expect(%22set_linger+call+failed%22);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/net/tcp.rs.html#461-463)\n\n🔬This is a nightly-only experimental API. (`tcp_linger` [#88494](https://github.com/rust-lang/rust/issues/88494))\n\nGets the value of the `SO_LINGER` option on this socket.\n\nFor more information about this option, see [`TcpStream::set_linger`](about:blank/struct.TcpStream.html#method.set_linger \"method std::net::TcpStream::set_linger\").\n\n##### [§](#examples-12)Examples\n\n```\n#![feature(tcp_linger)]\n\nuse std::net::TcpStream;\nuse std::time::Duration;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_linger(Some(Duration::from_secs(0))).expect(\"set_linger call failed\");\nassert_eq!(stream.linger().unwrap(), Some(Duration::from_secs(0)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_linger)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_linger(Some(Duration::from_secs(0))).expect(%22set_linger+call+failed%22);%0A++++assert_eq!(stream.linger().unwrap(),+Some(Duration::from_secs(0)));%0A%7D&version=nightly&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#483-485)\n\nSets the value of the `TCP_NODELAY` option on this socket.\n\nIf set, this option disables the Nagle algorithm. This means that segments are always sent as soon as possible, even if there is only a small amount of data. When not set, data is buffered until there is a sufficient amount to send out, thereby avoiding the frequent sending of small packets.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_nodelay(true).expect(\"set_nodelay call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_nodelay(true).expect(%22set_nodelay+call+failed%22);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#502-504)\n\nGets the value of the `TCP_NODELAY` option on this socket.\n\nFor more information about this option, see [`TcpStream::set_nodelay`](about:blank/struct.TcpStream.html#method.set_nodelay \"method std::net::TcpStream::set_nodelay\").\n\n##### [§](#examples-14)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_nodelay(true).expect(\"set_nodelay call failed\");\nassert_eq!(stream.nodelay().unwrap_or(false), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_nodelay(true).expect(%22set_nodelay+call+failed%22);%0A++++assert_eq!(stream.nodelay().unwrap_or(false),+true);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#521-523)\n\nSets the value for the `IP_TTL` option on this socket.\n\nThis value sets the time-to-live field that is used in every packet sent from this socket.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_ttl(100).expect(\"set_ttl call failed\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_ttl(100).expect(%22set_ttl+call+failed%22);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#540-542)\n\nGets the value of the `IP_TTL` option for this socket.\n\nFor more information about this option, see [`TcpStream::set_ttl`](about:blank/struct.TcpStream.html#method.set_ttl \"method std::net::TcpStream::set_ttl\").\n\n##### [§](#examples-16)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.set_ttl(100).expect(\"set_ttl call failed\");\nassert_eq!(stream.ttl().unwrap_or(0), 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_ttl(100).expect(%22set_ttl+call+failed%22);%0A++++assert_eq!(stream.ttl().unwrap_or(0),+100);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#560-562)\n\nGets the value of the `SO_ERROR` option on this socket.\n\nThis will retrieve the stored error in the underlying socket, clearing the field in the process. This can be useful for checking errors between calls.\n\n##### [§](#examples-17)Examples\n\n```\nuse std::net::TcpStream;\n\nlet stream = TcpStream::connect(\"127.0.0.1:8080\")\n                       .expect(\"Couldn't connect to the server...\");\nstream.take_error().expect(\"No error was expected...\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.take_error().expect(%22No+error+was+expected...%22);%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/net/tcp.rs.html#605-607)\n\nMoves this TCP stream into or out of nonblocking mode.\n\nThis will result in `read`, `write`, `recv` and `send` operations becoming nonblocking, i.e., immediately returning from their calls. If the IO operation is successful, `Ok` is returned and no further action is required. If the IO operation could not be completed and needs to be retried, an error with kind [`io::ErrorKind::WouldBlock`](about:blank/io/enum.ErrorKind.html#variant.WouldBlock \"variant std::io::ErrorKind::WouldBlock\") is returned.\n\nOn Unix platforms, calling this method corresponds to calling `fcntl` `FIONBIO`. On Windows calling this method corresponds to calling `ioctlsocket` `FIONBIO`.\n\n##### [§](#examples-18)Examples\n\nReading bytes from a TCP stream in non-blocking mode:\n\n```\nuse std::io::{self, Read};\nuse std::net::TcpStream;\n\nlet mut stream = TcpStream::connect(\"127.0.0.1:7878\")\n    .expect(\"Couldn't connect to the server...\");\nstream.set_nonblocking(true).expect(\"set_nonblocking call failed\");\n\nlet mut buf = vec![];\nloop {\n    match stream.read_to_end(&mut buf) {\n        Ok(_) => break,\n        Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n            // wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            wait_for_fd();\n        }\n        Err(e) => panic!(\"encountered IO error: {e}\"),\n    };\n};\nprintln!(\"bytes: {buf:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Read%7D;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:7878%22)%0A++++++++.expect(%22Couldn%27t+connect+to+the+server...%22);%0A++++stream.set_nonblocking(true).expect(%22set_nonblocking+call+failed%22);%0A++++%0A++++fn+wait_for_fd()+%7B+unimplemented!()+%7D%0A++++let+mut+buf+=+vec!%5B%5D;%0A++++loop+%7B%0A++++++++match+stream.read_to_end(%26mut+buf)+%7B%0A++++++++++++Ok(_)+=%3E+break,%0A++++++++++++Err(ref+e)+if+e.kind()+==+io::ErrorKind::WouldBlock+=%3E+%7B%0A++++++++++++++++//+wait+until+network+socket+is+ready,+typically+implemented%0A++++++++++++++++//+via+platform-specific+APIs+such+as+epoll+or+IOCP%0A++++++++++++++++wait_for_fd();%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+panic!(%22encountered+IO+error:+%7Be%7D%22),%0A++++++++%7D;%0A++++%7D;%0A++++println!(%22bytes:+%7Bbuf:?%7D%22);%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#311-316)[§](#impl-AsFd-for-TcpStream)\n\n1.0.0 · [source](about:blank/src/std/os/fd/net.rs.html#17)[§](#impl-AsRawFd-for-TcpStream)\n\n1.0.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#238-243)[§](#impl-AsRawSocket-for-TcpStream)\n\nAvailable on **Windows** only.\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/socket.rs.html#313-318)[§](#impl-AsSocket-for-TcpStream)\n\nAvailable on **Windows** only.\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#715-719)[§](#impl-Debug-for-TcpStream)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#328-335)[§](#impl-From%3COwnedFd%3E-for-TcpStream)\n\n[source](about:blank/src/std/os/fd/owned.rs.html#330-334)[§](#method.from-3)\n\nConverts to this type from the input type.\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/socket.rs.html#330-335)[§](#impl-From%3COwnedSocket%3E-for-TcpStream)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/io/socket.rs.html#332-334)[§](#method.from)\n\nConverts to this type from the input type.\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#319-325)[§](#impl-From%3CTcpStream%3E-for-OwnedFd)\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/socket.rs.html#321-327)[§](#impl-From%3CTcpStream%3E-for-OwnedSocket)\n\nAvailable on **Windows** only.\n\n1.1.0 · [source](about:blank/src/std/os/fd/net.rs.html#33)[§](#impl-FromRawFd-for-TcpStream)\n\n[source](about:blank/src/std/os/fd/net.rs.html#33)[§](#method.from_raw_fd)\n\nConstructs a new instance of `Self` from the given raw file descriptor. [Read more](about:blank/os/fd/trait.FromRawFd.html#tymethod.from_raw_fd)\n\n1.1.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#260-266)[§](#impl-FromRawSocket-for-TcpStream)\n\nAvailable on **Windows** only.\n\n1.4.0 · [source](about:blank/src/std/os/fd/net.rs.html#46)[§](#impl-IntoRawFd-for-TcpStream)\n\n[source](about:blank/src/std/os/fd/net.rs.html#46)[§](#method.into_raw_fd)\n\nConsumes this object, returning the raw underlying file descriptor. [Read more](about:blank/os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd)\n\n1.4.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#285-290)[§](#impl-IntoRawSocket-for-TcpStream)\n\nAvailable on **Windows** only.\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#656-673)[§](#impl-Read-for-%26TcpStream)\n\n[source](about:blank/src/std/net/tcp.rs.html#657-659)[§](#method.read-1)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/net/tcp.rs.html#661-663)[§](#method.read_buf-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/net/tcp.rs.html#665-667)[§](#method.read_vectored-1)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/net/tcp.rs.html#670-672)[§](#method.is_read_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#865-867)[§](#method.read_to_end-1)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#908-910)[§](#method.read_to_string-1)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact-1)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref-2)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes-1)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain-1)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take-1)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#617-634)[§](#impl-Read-for-TcpStream)\n\n[source](about:blank/src/std/net/tcp.rs.html#618-620)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/net/tcp.rs.html#622-624)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/net/tcp.rs.html#626-628)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/net/tcp.rs.html#631-633)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#865-867)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#908-910)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#107-125)[§](#impl-TcpStreamExt-for-TcpStream)\n\nAvailable on **Linux or Android** only.\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#108-110)[§](#method.set_quickack)\n\n🔬This is a nightly-only experimental API. (`tcp_quickack` [#96256](https://github.com/rust-lang/rust/issues/96256))\n\nAvailable on **Linux** only.\n\nEnable or disable `TCP_QUICKACK`. [Read more](about:blank/os/linux/net/trait.TcpStreamExt.html#tymethod.set_quickack)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#112-114)[§](#method.quickack)\n\n🔬This is a nightly-only experimental API. (`tcp_quickack` [#96256](https://github.com/rust-lang/rust/issues/96256))\n\nAvailable on **Linux** only.\n\nGets the value of the `TCP_QUICKACK` option on this socket. [Read more](about:blank/os/linux/net/trait.TcpStreamExt.html#tymethod.quickack)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#117-119)[§](#method.set_deferaccept)\n\n🔬This is a nightly-only experimental API. (`tcp_deferaccept` [#119639](https://github.com/rust-lang/rust/issues/119639))\n\nAvailable on **Linux** only.\n\nA socket listener will be awakened solely when data arrives. [Read more](about:blank/os/linux/net/trait.TcpStreamExt.html#tymethod.set_deferaccept)\n\n[source](about:blank/src/std/os/net/linux_ext/tcp.rs.html#122-124)[§](#method.deferaccept)\n\n🔬This is a nightly-only experimental API. (`tcp_deferaccept` [#119639](https://github.com/rust-lang/rust/issues/119639))\n\nAvailable on **Linux** only.\n\nGets the accept delay value (in seconds) of the `TCP_DEFER_ACCEPT` option. [Read more](about:blank/os/linux/net/trait.TcpStreamExt.html#tymethod.deferaccept)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#675-693)[§](#impl-Write-for-%26TcpStream)\n\n[source](about:blank/src/std/net/tcp.rs.html#676-678)[§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/net/tcp.rs.html#680-682)[§](#method.write_vectored)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/net/tcp.rs.html#685-687)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/net/tcp.rs.html#690-692)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-1)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#636-654)[§](#impl-Write-for-TcpStream)\n\n[source](about:blank/src/std/net/tcp.rs.html#637-639)[§](#method.write-1)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/net/tcp.rs.html#641-643)[§](#method.write_vectored-1)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/net/tcp.rs.html#646-648)[§](#method.is_write_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/net/tcp.rs.html#651-653)[§](#method.flush-1)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all-1)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored-1)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt-1)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-3)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n[§](#impl-Freeze-for-TcpStream)\n\n[§](#impl-RefUnwindSafe-for-TcpStream)\n\n[§](#impl-Send-for-TcpStream)\n\n[§](#impl-Sync-for-TcpStream)\n\n[§](#impl-Unpin-for-TcpStream)\n\n[§](#impl-UnwindSafe-for-TcpStream)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-4)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A TCP stream between a local and a remote socket.\"><title>TcpStream in std::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">TcpStream</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">TcpStream</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.connect\">connect</a></li><li><a href=\"#method.connect_timeout\">connect_timeout</a></li><li><a href=\"#method.linger\">linger</a></li><li><a href=\"#method.local_addr\">local_addr</a></li><li><a href=\"#method.nodelay\">nodelay</a></li><li><a href=\"#method.peek\">peek</a></li><li><a href=\"#method.peer_addr\">peer_addr</a></li><li><a href=\"#method.read_timeout\">read_timeout</a></li><li><a href=\"#method.set_linger\">set_linger</a></li><li><a href=\"#method.set_nodelay\">set_nodelay</a></li><li><a href=\"#method.set_nonblocking\">set_nonblocking</a></li><li><a href=\"#method.set_read_timeout\">set_read_timeout</a></li><li><a href=\"#method.set_ttl\">set_ttl</a></li><li><a href=\"#method.set_write_timeout\">set_write_timeout</a></li><li><a href=\"#method.shutdown\">shutdown</a></li><li><a href=\"#method.take_error\">take_error</a></li><li><a href=\"#method.try_clone\">try_clone</a></li><li><a href=\"#method.ttl\">ttl</a></li><li><a href=\"#method.write_timeout\">write_timeout</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-TcpStream\">AsFd</a></li><li><a href=\"#impl-AsRawFd-for-TcpStream\">AsRawFd</a></li><li><a href=\"#impl-AsRawSocket-for-TcpStream\">AsRawSocket</a></li><li><a href=\"#impl-AsSocket-for-TcpStream\">AsSocket</a></li><li><a href=\"#impl-Debug-for-TcpStream\">Debug</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-TcpStream\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3COwnedSocket%3E-for-TcpStream\">From&lt;OwnedSocket&gt;</a></li><li><a href=\"#impl-From%3CTcpStream%3E-for-OwnedFd\">From&lt;TcpStream&gt;</a></li><li><a href=\"#impl-From%3CTcpStream%3E-for-OwnedSocket\">From&lt;TcpStream&gt;</a></li><li><a href=\"#impl-FromRawFd-for-TcpStream\">FromRawFd</a></li><li><a href=\"#impl-FromRawSocket-for-TcpStream\">FromRawSocket</a></li><li><a href=\"#impl-IntoRawFd-for-TcpStream\">IntoRawFd</a></li><li><a href=\"#impl-IntoRawSocket-for-TcpStream\">IntoRawSocket</a></li><li><a href=\"#impl-Read-for-%26TcpStream\">Read</a></li><li><a href=\"#impl-Read-for-TcpStream\">Read</a></li><li><a href=\"#impl-TcpStreamExt-for-TcpStream\">TcpStreamExt</a></li><li><a href=\"#impl-Write-for-%26TcpStream\">Write</a></li><li><a href=\"#impl-Write-for-TcpStream\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-TcpStream\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-TcpStream\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-TcpStream\">Send</a></li><li><a href=\"#impl-Sync-for-TcpStream\">Sync</a></li><li><a href=\"#impl-Unpin-for-TcpStream\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-TcpStream\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AddrParseError.html\">AddrParseError</a></li><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.IntoIncoming.html\">IntoIncoming</a></li><li><a href=\"struct.Ipv4Addr.html\">Ipv4Addr</a></li><li><a href=\"struct.Ipv6Addr.html\">Ipv6Addr</a></li><li><a href=\"struct.SocketAddrV4.html\">SocketAddrV4</a></li><li><a href=\"struct.SocketAddrV6.html\">SocketAddrV6</a></li><li><a href=\"struct.TcpListener.html\">TcpListener</a></li><li><a href=\"struct.TcpStream.html\">TcpStream</a></li><li><a href=\"struct.UdpSocket.html\">UdpSocket</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.IpAddr.html\">IpAddr</a></li><li><a href=\"enum.Ipv6MulticastScope.html\">Ipv6MulticastScope</a></li><li><a href=\"enum.Shutdown.html\">Shutdown</a></li><li><a href=\"enum.SocketAddr.html\">SocketAddr</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ToSocketAddrs.html\">ToSocketAddrs</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">TcpStream</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#50\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct TcpStream(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A TCP stream between a local and a remote socket.</p>\n<p>After creating a <code>TcpStream</code> by either <a href=\"struct.TcpStream.html#method.connect\" title=\"associated function std::net::TcpStream::connect\"><code>connect</code></a>ing to a remote host or\n<a href=\"struct.TcpListener.html#method.accept\" title=\"method std::net::TcpListener::accept\"><code>accept</code></a>ing a connection on a <a href=\"struct.TcpListener.html\" title=\"struct std::net::TcpListener\"><code>TcpListener</code></a>, data can be transmitted\nby <a href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">reading</a> and <a href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">writing</a> to it.</p>\n<p>The connection will be closed when the value is dropped. The reading and writing\nportions of the connection can also be shut down individually with the <a href=\"struct.TcpStream.html#method.shutdown\" title=\"method std::net::TcpStream::shutdown\"><code>shutdown</code></a>\nmethod.</p>\n<p>The Transmission Control Protocol is specified in <a href=\"https://tools.ietf.org/html/rfc793\">IETF RFC 793</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:34254\"</span>)<span class=\"question-mark\">?</span>;\n\n    stream.write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>])<span class=\"question-mark\">?</span>;\n    stream.read(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>; <span class=\"number\">128</span>])<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n} <span class=\"comment\">// the stream is closed here</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::net::TcpStream;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:34254%22)?;%0A%0A++++stream.write(%26%5B1%5D)?;%0A++++stream.read(%26mut+%5B0;+128%5D)?;%0A++++Ok(())%0A%7D+//+the+stream+is+closed+here&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#113-608\">source</a><a href=\"#impl-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.connect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#156-158\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.connect\" class=\"fn\">connect</a>&lt;A: <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a>&gt;(addr: A) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Opens a TCP connection to a remote host.</p>\n<p><code>addr</code> is an address of the remote host. Anything which implements\n<a href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\"><code>ToSocketAddrs</code></a> trait can be supplied for the address; see this trait\ndocumentation for concrete examples.</p>\n<p>If <code>addr</code> yields multiple addresses, <code>connect</code> will be attempted with\neach of the addresses until a connection is successful. If none of\nthe addresses result in a successful connection, the error returned from\nthe last connection attempt (the last address) is returned.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Open a TCP connection to <code>127.0.0.1:8080</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(stream) = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Connected to the server!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect to server...\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++if+let+Ok(stream)+=+TcpStream::connect(%22127.0.0.1:8080%22)+%7B%0A++++++++println!(%22Connected+to+the+server!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Couldn't+connect+to+server...%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Open a TCP connection to <code>127.0.0.1:8080</code>. If the connection fails, open\na TCP connection to <code>127.0.0.1:8081</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{SocketAddr, TcpStream};\n\n<span class=\"kw\">let </span>addrs = [\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8080</span>)),\n    SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">8081</span>)),\n];\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(stream) = TcpStream::connect(<span class=\"kw-2\">&amp;</span>addrs[..]) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Connected to the server!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't connect to server...\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+TcpStream%7D;%0A++++%0A++++let+addrs+=+%5B%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+8080)),%0A++++++++SocketAddr::from((%5B127,+0,+0,+1%5D,+8081)),%0A++++%5D;%0A++++if+let+Ok(stream)+=+TcpStream::connect(%26addrs%5B..%5D)+%7B%0A++++++++println!(%22Connected+to+the+server!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22Couldn't+connect+to+server...%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.connect_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#172-174\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.connect_timeout\" class=\"fn\">connect_timeout</a>(\n    addr: &amp;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>,\n    timeout: <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>,\n) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Opens a TCP connection to a remote host with a timeout.</p>\n<p>Unlike <code>connect</code>, <code>connect_timeout</code> takes a single <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> since\ntimeout must be applied to individual addresses.</p>\n<p>It is an error to pass a zero <code>Duration</code> to this function.</p>\n<p>Unlike other methods on <code>TcpStream</code>, this does not correspond to a\nsingle system call. It instead calls <code>connect</code> in nonblocking mode and\nthen uses an OS-specific mechanism to await the completion of the\nconnection request.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peer_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#189-191\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.peer_addr\" class=\"fn\">peer_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the remote peer of this TCP connection.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.peer_addr().unwrap(),\n           SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">8080</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpv4Addr,+SocketAddr,+SocketAddrV4,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++assert_eq!(stream.peer_addr().unwrap(),%0A+++++++++++++++SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(127,+0,+0,+1),+8080)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.local_addr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#206-208\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.local_addr\" class=\"fn\">local_addr</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the socket address of the local half of this TCP connection.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{IpAddr, Ipv4Addr, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.local_addr().unwrap().ip(),\n           IpAddr::V4(Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BIpAddr,+Ipv4Addr,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++assert_eq!(stream.local_addr().unwrap().ip(),%0A+++++++++++++++IpAddr::V4(Ipv4Addr::new(127,+0,+0,+1)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shutdown\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#233-235\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shutdown\" class=\"fn\">shutdown</a>(&amp;self, how: <a class=\"enum\" href=\"enum.Shutdown.html\" title=\"enum std::net::Shutdown\">Shutdown</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shuts down the read, write, or both halves of this connection.</p>\n<p>This function will cause all pending and future I/O on the specified\nportions to return immediately with an appropriate value (see the\ndocumentation of <a href=\"enum.Shutdown.html\" title=\"enum std::net::Shutdown\"><code>Shutdown</code></a>).</p>\n<h5 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h5>\n<p>Calling this function multiple times may result in different behavior,\ndepending on the operating system. On Linux, the second call will\nreturn <code>Ok(())</code>, but on macOS, it will return <code>ErrorKind::NotConnected</code>.\nThis may change in the future.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{Shutdown, TcpStream};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.shutdown(Shutdown::Both).expect(<span class=\"string\">\"shutdown call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BShutdown,+TcpStream%7D;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.shutdown(Shutdown::Both).expect(%22shutdown+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#254-256\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new independently owned handle to the underlying socket.</p>\n<p>The returned <code>TcpStream</code> is a reference to the same stream that this\nobject references. Both handles will read and write the same stream of\ndata, and options set on one stream will be propagated to the other\nstream.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"kw\">let </span>stream_clone = stream.try_clone().expect(<span class=\"string\">\"clone failed...\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++let+stream_clone+=+stream.try_clone().expect(%22clone+failed...%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#298-300\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_read_timeout\" class=\"fn\">set_read_timeout</a>(&amp;self, dur: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the read timeout to the timeout specified.</p>\n<p>If the value specified is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> calls will block\nindefinitely. An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is\npassed to this method.</p>\n<h5 id=\"platform-specific-behavior-1\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-1\">§</a>Platform-specific behavior</h5>\n<p>Platforms may return a different error code whenever a read times out as\na result of setting this option. For example Unix typically returns an\nerror of the kind <a href=\"../io/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::ErrorKind::WouldBlock\"><code>WouldBlock</code></a>, but Windows may return <a href=\"../io/enum.ErrorKind.html#variant.TimedOut\" title=\"variant std::io::ErrorKind::TimedOut\"><code>TimedOut</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_read_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_read_timeout call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_read_timeout(None).expect(%22set_read_timeout+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">let </span>result = stream.set_read_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>err = result.unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22).unwrap();%0A++++let+result+=+stream.set_read_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#342-344\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_write_timeout\" class=\"fn\">set_write_timeout</a>(&amp;self, dur: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the write timeout to the timeout specified.</p>\n<p>If the value specified is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> calls will block\nindefinitely. An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is\npassed to this method.</p>\n<h5 id=\"platform-specific-behavior-2\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-2\">§</a>Platform-specific behavior</h5>\n<p>Platforms may return a different error code whenever a write times out\nas a result of setting this option. For example Unix typically returns\nan error of the kind <a href=\"../io/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::ErrorKind::WouldBlock\"><code>WouldBlock</code></a>, but Windows may return <a href=\"../io/enum.ErrorKind.html#variant.TimedOut\" title=\"variant std::io::ErrorKind::TimedOut\"><code>TimedOut</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_write_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_write_timeout call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_write_timeout(None).expect(%22set_write_timeout+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned if the zero <a href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\"><code>Duration</code></a> is passed to this\nmethod:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>).unwrap();\n<span class=\"kw\">let </span>result = stream.set_write_timeout(<span class=\"prelude-val\">Some</span>(Duration::new(<span class=\"number\">0</span>, <span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>err = result.unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22).unwrap();%0A++++let+result+=+stream.set_write_timeout(Some(Duration::new(0,+0)));%0A++++let+err+=+result.unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#367-369\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read_timeout\" class=\"fn\">read_timeout</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the read timeout of this socket.</p>\n<p>If the timeout is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> calls will block indefinitely.</p>\n<h5 id=\"platform-specific-behavior-3\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-3\">§</a>Platform-specific behavior</h5>\n<p>Some platforms do not provide access to the current timeout.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_read_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_read_timeout call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.read_timeout().unwrap(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_read_timeout(None).expect(%22set_read_timeout+call+failed%22);%0A++++assert_eq!(stream.read_timeout().unwrap(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_timeout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#392-394\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write_timeout\" class=\"fn\">write_timeout</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the write timeout of this socket.</p>\n<p>If the timeout is <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>, then <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> calls will block indefinitely.</p>\n<h5 id=\"platform-specific-behavior-4\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-4\">§</a>Platform-specific behavior</h5>\n<p>Some platforms do not provide access to the current timeout.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_write_timeout(<span class=\"prelude-val\">None</span>).expect(<span class=\"string\">\"set_write_timeout call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.write_timeout().unwrap(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_write_timeout(None).expect(%22set_write_timeout+call+failed%22);%0A++++assert_eq!(stream.write_timeout().unwrap(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#414-416\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.peek\" class=\"fn\">peek</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Receives data on the socket from the remote address to which it is\nconnected, without removing that data from the queue. On success,\nreturns the number of bytes peeked.</p>\n<p>Successive calls return the same data. This is accomplished by passing\n<code>MSG_PEEK</code> as a flag to the underlying <code>recv</code> system call.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8000\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>len = stream.peek(<span class=\"kw-2\">&amp;mut </span>buf).expect(<span class=\"string\">\"peek failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8000%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++let+mut+buf+=+%5B0;+10%5D;%0A++++let+len+=+stream.peek(%26mut+buf).expect(%22peek+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_linger\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#439-441\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.set_linger\" class=\"fn\">set_linger</a>(&amp;self, linger: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_linger</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88494\">#88494</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the value of the <code>SO_LINGER</code> option on this socket.</p>\n<p>This value controls how the socket is closed when data remains\nto be sent. If <code>SO_LINGER</code> is set, the socket will remain open\nfor the specified duration as the system attempts to send pending data.\nOtherwise, the system may close the socket immediately, or wait for a\ndefault timeout.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_linger)]\n\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_linger(<span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>))).expect(<span class=\"string\">\"set_linger call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_linger)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_linger(Some(Duration::from_secs(0))).expect(%22set_linger+call+failed%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.linger\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#461-463\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.linger\" class=\"fn\">linger</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_linger</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88494\">#88494</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the value of the <code>SO_LINGER</code> option on this socket.</p>\n<p>For more information about this option, see <a href=\"struct.TcpStream.html#method.set_linger\" title=\"method std::net::TcpStream::set_linger\"><code>TcpStream::set_linger</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(tcp_linger)]\n\n</span><span class=\"kw\">use </span>std::net::TcpStream;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_linger(<span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>))).expect(<span class=\"string\">\"set_linger call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.linger().unwrap(), <span class=\"prelude-val\">Some</span>(Duration::from_secs(<span class=\"number\">0</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(tcp_linger)%5D%0A%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++use+std::time::Duration;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_linger(Some(Duration::from_secs(0))).expect(%22set_linger+call+failed%22);%0A++++assert_eq!(stream.linger().unwrap(),+Some(Duration::from_secs(0)));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_nodelay\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#483-485\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_nodelay\" class=\"fn\">set_nodelay</a>(&amp;self, nodelay: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the value of the <code>TCP_NODELAY</code> option on this socket.</p>\n<p>If set, this option disables the Nagle algorithm. This means that\nsegments are always sent as soon as possible, even if there is only a\nsmall amount of data. When not set, data is buffered until there is a\nsufficient amount to send out, thereby avoiding the frequent sending of\nsmall packets.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nodelay(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nodelay call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_nodelay(true).expect(%22set_nodelay+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nodelay\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#502-504\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.nodelay\" class=\"fn\">nodelay</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>TCP_NODELAY</code> option on this socket.</p>\n<p>For more information about this option, see <a href=\"struct.TcpStream.html#method.set_nodelay\" title=\"method std::net::TcpStream::set_nodelay\"><code>TcpStream::set_nodelay</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nodelay(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nodelay call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.nodelay().unwrap_or(<span class=\"bool-val\">false</span>), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_nodelay(true).expect(%22set_nodelay+call+failed%22);%0A++++assert_eq!(stream.nodelay().unwrap_or(false),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#521-523\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_ttl\" class=\"fn\">set_ttl</a>(&amp;self, ttl: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the value for the <code>IP_TTL</code> option on this socket.</p>\n<p>This value sets the time-to-live field that is used in every packet sent\nfrom this socket.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"set_ttl call failed\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_ttl(100).expect(%22set_ttl+call+failed%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ttl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#540-542\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ttl\" class=\"fn\">ttl</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>IP_TTL</code> option for this socket.</p>\n<p>For more information about this option, see <a href=\"struct.TcpStream.html#method.set_ttl\" title=\"method std::net::TcpStream::set_ttl\"><code>TcpStream::set_ttl</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_ttl(<span class=\"number\">100</span>).expect(<span class=\"string\">\"set_ttl call failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(stream.ttl().unwrap_or(<span class=\"number\">0</span>), <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_ttl(100).expect(%22set_ttl+call+failed%22);%0A++++assert_eq!(stream.ttl().unwrap_or(0),+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#560-562\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take_error\" class=\"fn\">take_error</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the value of the <code>SO_ERROR</code> option on this socket.</p>\n<p>This will retrieve the stored error in the underlying socket, clearing\nthe field in the process. This can be useful for checking errors between\ncalls.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:8080\"</span>)\n                       .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.take_error().expect(<span class=\"string\">\"No error was expected...\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::TcpStream;%0A++++%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:8080%22)%0A+++++++++++++++++++++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.take_error().expect(%22No+error+was+expected...%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_nonblocking\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#605-607\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_nonblocking\" class=\"fn\">set_nonblocking</a>(&amp;self, nonblocking: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Moves this TCP stream into or out of nonblocking mode.</p>\n<p>This will result in <code>read</code>, <code>write</code>, <code>recv</code> and <code>send</code> operations\nbecoming nonblocking, i.e., immediately returning from their calls.\nIf the IO operation is successful, <code>Ok</code> is returned and no further\naction is required. If the IO operation could not be completed and needs\nto be retried, an error with kind <a href=\"../io/enum.ErrorKind.html#variant.WouldBlock\" title=\"variant std::io::ErrorKind::WouldBlock\"><code>io::ErrorKind::WouldBlock</code></a> is\nreturned.</p>\n<p>On Unix platforms, calling this method corresponds to calling <code>fcntl</code>\n<code>FIONBIO</code>. On Windows calling this method corresponds to calling\n<code>ioctlsocket</code> <code>FIONBIO</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<p>Reading bytes from a TCP stream in non-blocking mode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">use </span>std::net::TcpStream;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:7878\"</span>)\n    .expect(<span class=\"string\">\"Couldn't connect to the server...\"</span>);\nstream.set_nonblocking(<span class=\"bool-val\">true</span>).expect(<span class=\"string\">\"set_nonblocking call failed\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">match </span>stream.read_to_end(<span class=\"kw-2\">&amp;mut </span>buf) {\n        <span class=\"prelude-val\">Ok</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n        <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>e) <span class=\"kw\">if </span>e.kind() == io::ErrorKind::WouldBlock =&gt; {\n            <span class=\"comment\">// wait until network socket is ready, typically implemented\n            // via platform-specific APIs such as epoll or IOCP\n            </span>wait_for_fd();\n        }\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"encountered IO error: {e}\"</span>),\n    };\n};\n<span class=\"macro\">println!</span>(<span class=\"string\">\"bytes: {buf:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Read%7D;%0A++++use+std::net::TcpStream;%0A++++%0A++++let+mut+stream+=+TcpStream::connect(%22127.0.0.1:7878%22)%0A++++++++.expect(%22Couldn't+connect+to+the+server...%22);%0A++++stream.set_nonblocking(true).expect(%22set_nonblocking+call+failed%22);%0A++++%0A++++fn+wait_for_fd()+%7B+unimplemented!()+%7D%0A++++let+mut+buf+=+vec!%5B%5D;%0A++++loop+%7B%0A++++++++match+stream.read_to_end(%26mut+buf)+%7B%0A++++++++++++Ok(_)+=%3E+break,%0A++++++++++++Err(ref+e)+if+e.kind()+==+io::ErrorKind::WouldBlock+=%3E+%7B%0A++++++++++++++++//+wait+until+network+socket+is+ready,+typically+implemented%0A++++++++++++++++//+via+platform-specific+APIs+such+as+epoll+or+IOCP%0A++++++++++++++++wait_for_fd();%0A++++++++++++%7D%0A++++++++++++Err(e)+=%3E+panic!(%22encountered+IO+error:+%7Be%7D%22),%0A++++++++%7D;%0A++++%7D;%0A++++println!(%22bytes:+%7Bbuf:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#311-316\">source</a></span><a href=\"#impl-AsFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#313-315\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#17\">source</a></span><a href=\"#impl-AsRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#17\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawSocket-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#238-243\">source</a></span><a href=\"#impl-AsRawSocket-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawSocket.html\" title=\"trait std::os::windows::io::AsRawSocket\">AsRawSocket</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#240-242\">source</a><a href=\"#method.as_raw_socket\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawSocket.html#tymethod.as_raw_socket\" class=\"fn\">as_raw_socket</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a></h4></section></summary><div class=\"docblock\">Extracts the raw socket. <a href=\"../os/windows/io/trait.AsRawSocket.html#tymethod.as_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsSocket-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#313-318\">source</a></span><a href=\"#impl-AsSocket-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsSocket.html\" title=\"trait std::os::windows::io::AsSocket\">AsSocket</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#315-317\">source</a><a href=\"#method.as_socket\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsSocket.html#tymethod.as_socket\" class=\"fn\">as_socket</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedSocket.html\" title=\"struct std::os::windows::io::BorrowedSocket\">BorrowedSocket</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the socket.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#715-719\">source</a></span><a href=\"#impl-Debug-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#716-718\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#328-335\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#330-334\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned_fd: <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedSocket%3E-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#330-335\">source</a></span><a href=\"#impl-From%3COwnedSocket%3E-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a>&gt; for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#332-334\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned: <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a>) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CTcpStream%3E-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#319-325\">source</a></span><a href=\"#impl-From%3CTcpStream%3E-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>&gt; for <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#322-324\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tcp_stream: <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>) -&gt; <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a>’s socket file descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CTcpStream%3E-for-OwnedSocket\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#321-327\">source</a></span><a href=\"#impl-From%3CTcpStream%3E-for-OwnedSocket\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>&gt; for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#324-326\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tcp_stream: <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a>) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a>’s socket.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#33\">source</a></span><a href=\"#impl-FromRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#33\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TcpStream\">ⓘ</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawSocket-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#260-266\">source</a></span><a href=\"#impl-FromRawSocket-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.FromRawSocket.html\" title=\"trait std::os::windows::io::FromRawSocket\">FromRawSocket</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#262-265\">source</a><a href=\"#method.from_raw_socket\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/windows/io/trait.FromRawSocket.html#tymethod.from_raw_socket\" class=\"fn\">from_raw_socket</a>(sock: <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a>) -&gt; <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TcpStream\">ⓘ</a></h4></section></summary><div class=\"docblock\">Constructs a new I/O object from the specified raw socket. <a href=\"../os/windows/io/trait.FromRawSocket.html#tymethod.from_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawFd-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/net.rs.html#46\">source</a></span><a href=\"#impl-IntoRawFd-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.IntoRawFd.html\" title=\"trait std::os::fd::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/net.rs.html#46\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying file descriptor. <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawSocket-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#285-290\">source</a></span><a href=\"#impl-IntoRawSocket-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.IntoRawSocket.html\" title=\"trait std::os::windows::io::IntoRawSocket\">IntoRawSocket</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#287-289\">source</a><a href=\"#method.into_raw_socket\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.IntoRawSocket.html#tymethod.into_raw_socket\" class=\"fn\">into_raw_socket</a>(self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying socket. <a href=\"../os/windows/io/trait.IntoRawSocket.html#tymethod.into_raw_socket\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-%26TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#656-673\">source</a></span><a href=\"#impl-Read-for-%26TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#657-659\">source</a><a href=\"#method.read-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#661-663\">source</a><a href=\"#method.read_buf-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#665-667\">source</a><a href=\"#method.read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#670-672\">source</a><a href=\"#method.is_read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#865-867\">source</a></span><a href=\"#method.read_to_end-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#908-910\">source</a></span><a href=\"#method.read_to_string-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#617-634\">source</a></span><a href=\"#impl-Read-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#618-620\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#622-624\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#626-628\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#631-633\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#865-867\">source</a></span><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#908-910\">source</a></span><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TcpStreamExt-for-TcpStream\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/net/linux_ext/tcp.rs.html#107-125\">source</a><a href=\"#impl-TcpStreamExt-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/linux/net/trait.TcpStreamExt.html\" title=\"trait std::os::linux::net::TcpStreamExt\">TcpStreamExt</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux or Android</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_quickack\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/net/linux_ext/tcp.rs.html#108-110\">source</a><a href=\"#method.set_quickack\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.set_quickack\" class=\"fn\">set_quickack</a>(&amp;self, quickack: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Enable or disable <code>TCP_QUICKACK</code>. <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.set_quickack\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.quickack\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/net/linux_ext/tcp.rs.html#112-114\">source</a><a href=\"#method.quickack\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.quickack\" class=\"fn\">quickack</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_quickack</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96256\">#96256</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Gets the value of the <code>TCP_QUICKACK</code> option on this socket. <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.quickack\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_deferaccept\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/net/linux_ext/tcp.rs.html#117-119\">source</a><a href=\"#method.set_deferaccept\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.set_deferaccept\" class=\"fn\">set_deferaccept</a>(&amp;self, accept: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119639\">#119639</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">A socket listener will be awakened solely when data arrives. <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.set_deferaccept\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deferaccept\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/net/linux_ext/tcp.rs.html#122-124\">source</a><a href=\"#method.deferaccept\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.deferaccept\" class=\"fn\">deferaccept</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>tcp_deferaccept</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119639\">#119639</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Gets the accept delay value (in seconds) of the <code>TCP_DEFER_ACCEPT</code> option. <a href=\"../os/linux/net/trait.TcpStreamExt.html#tymethod.deferaccept\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-%26TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#675-693\">source</a></span><a href=\"#impl-Write-for-%26TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#676-678\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#680-682\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#685-687\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#690-692\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#636-654\">source</a></span><a href=\"#impl-Write-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#637-639\">source</a><a href=\"#method.write-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#641-643\">source</a><a href=\"#method.write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#646-648\">source</a><a href=\"#method.is_write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/net/tcp.rs.html#651-653\">source</a><a href=\"#method.flush-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-TcpStream\" class=\"impl\"><a href=\"#impl-Freeze-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-RefUnwindSafe-for-TcpStream\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Send-for-TcpStream\" class=\"impl\"><a href=\"#impl-Send-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Sync-for-TcpStream\" class=\"impl\"><a href=\"#impl-Sync-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Unpin-for-TcpStream\" class=\"impl\"><a href=\"#impl-Unpin-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-UnwindSafe-for-TcpStream\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\",\"TcpStream\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;<a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;<a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.TcpStream.html\\\" title=\\\"struct std::net::TcpStream\\\">TcpStream</a></div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:02.038Z"
}