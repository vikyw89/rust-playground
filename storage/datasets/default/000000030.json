{
	"title": "Paths for Referring to an Item in the Module Tree - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html",
	"markdown": "# Paths for Referring to an Item in the Module Tree\n\nTo show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. To call a function, we need to know its path.\n\nA path can take two forms:\n\n-   An _absolute path_ is the full path starting from a crate root; for code from an external crate, the absolute path begins with the crate name, and for code from the current crate, it starts with the literal `crate`.\n-   A _relative path_ starts from the current module and uses `self`, `super`, or an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers separated by double colons (`::`).\n\nReturning to Listing 7-1, say we want to call the `add_to_waitlist` function. This is the same as asking: what’s the path of the `add_to_waitlist` function? Listing 7-3 contains Listing 7-1 with some of the modules and functions removed.\n\nWe’ll show two ways to call the `add_to_waitlist` function from a new function, `eat_at_restaurant`, defined in the crate root. These paths are correct, but there’s another problem remaining that will prevent this example from compiling as is. We’ll explain why in a bit.\n\nThe `eat_at_restaurant` function is part of our library crate’s public API, so we mark it with the `pub` keyword. In the [“Exposing Paths with the `pub` Keyword”](about:blank/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword) section, we’ll go into more detail about `pub`.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-3: Calling the `add_to_waitlist` function using absolute and relative paths\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`, we use an absolute path. The `add_to_waitlist` function is defined in the same crate as `eat_at_restaurant`, which means we can use the `crate` keyword to start an absolute path. We then include each of the successive modules until we make our way to `add_to_waitlist`. You can imagine a filesystem with the same structure: we’d specify the path `/front_of_house/hosting/add_to_waitlist` to run the `add_to_waitlist` program; using the `crate` name to start from the crate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a relative path. The path starts with `front_of_house`, the name of the module defined at the same level of the module tree as `eat_at_restaurant`. Here the filesystem equivalent would be using the path `front_of_house/hosting/add_to_waitlist`. Starting with a module name means that the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you’ll make based on your project, and it depends on whether you’re more likely to move item definition code separately from or together with the code that uses the item. For example, if we moved the `front_of_house` module and the `eat_at_restaurant` function into a module named `customer_experience`, we’d need to update the absolute path to `add_to_waitlist`, but the relative path would still be valid. However, if we moved the `eat_at_restaurant` function separately into a module named `dining`, the absolute path to the `add_to_waitlist` call would stay the same, but the relative path would need to be updated. Our preference in general is to specify absolute paths because it’s more likely we’ll want to move code definitions and item calls independently of each other.\n\nLet’s try to compile Listing 7-3 and find out why it won’t compile yet! The errors we get are shown in Listing 7-4.\n\n```console\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n --> src/lib.rs:9:28\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n  |                            |\n  |                            private module\n  |\nnote: the module `hosting` is defined here\n --> src/lib.rs:2:5\n  |\n2 |     mod hosting {\n  |     ^^^^^^^^^^^\n\nerror[E0603]: module `hosting` is private\n  --> src/lib.rs:12:21\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n   |                     |\n   |                     private module\n   |\nnote: the module `hosting` is defined here\n  --> src/lib.rs:2:5\n   |\n2  |     mod hosting {\n   |     ^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n\n```\n\nListing 7-4: Compiler errors from building the code in Listing 7-3\n\nThe error messages say that module `hosting` is private. In other words, we have the correct paths for the `hosting` module and the `add_to_waitlist` function, but Rust won’t let us use them because it doesn’t have access to the private sections. In Rust, all items (functions, methods, structs, enums, modules, and constants) are private to parent modules by default. If you want to make an item like a function or struct private, you put it in a module.\n\nItems in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. This is because child modules wrap and hide their implementation details, but the child modules can see the context in which they’re defined. To continue with our metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant they operate.\n\nRust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. However, Rust does give you the option to expose inner parts of child modules’ code to outer ancestor modules by using the `pub` keyword to make an item public.\n\n### [Exposing Paths with the `pub` Keyword](#exposing-paths-with-the-pub-keyword)\n\nLet’s return to the error in Listing 7-4 that told us the `hosting` module is private. We want the `eat_at_restaurant` function in the parent module to have access to the `add_to_waitlist` function in the child module, so we mark the `hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-5: Declaring the `hosting` module as `pub` to use it from `eat_at_restaurant`\n\nUnfortunately, the code in Listing 7-5 still results in compiler errors, as shown in Listing 7-6.\n\n```console\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n --> src/lib.rs:9:37\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^ private function\n  |\nnote: the function `add_to_waitlist` is defined here\n --> src/lib.rs:3:9\n  |\n3 |         fn add_to_waitlist() {}\n  |         ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n  --> src/lib.rs:12:30\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^ private function\n   |\nnote: the function `add_to_waitlist` is defined here\n  --> src/lib.rs:3:9\n   |\n3  |         fn add_to_waitlist() {}\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n\n```\n\nListing 7-6: Compiler errors from building the code in Listing 7-5\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the module public. With this change, if we can access `front_of_house`, we can access `hosting`. But the _contents_ of `hosting` are still private; making the module public doesn’t make its contents public. The `pub` keyword on a module only lets code in its ancestor modules refer to it, not access its inner code. Because modules are containers, there’s not much we can do by only making the module public; we need to go further and choose to make one or more of the items within the module public as well.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.\n\nLet’s also make the `add_to_waitlist` function public by adding the `pub` keyword before its definition, as in Listing 7-7.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-7: Adding the `pub` keyword to `mod hosting` and `fn add_to_waitlist` lets us call the function from `eat_at_restaurant`\n\nNow the code will compile! To see why adding the `pub` keyword lets us use these paths in `eat_at_restaurant` with respect to the privacy rules, let’s look at the absolute and the relative paths.\n\nIn the absolute path, we start with `crate`, the root of our crate’s module tree. The `front_of_house` module is defined in the crate root. While `front_of_house` isn’t public, because the `eat_at_restaurant` function is defined in the same module as `front_of_house` (that is, `eat_at_restaurant` and `front_of_house` are siblings), we can refer to `front_of_house` from `eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can access the parent module of `hosting`, so we can access `hosting`. Finally, the `add_to_waitlist` function is marked with `pub` and we can access its parent module, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from `front_of_house`. The `front_of_house` module is defined within the same module as `eat_at_restaurant`, so the relative path starting from the module in which `eat_at_restaurant` is defined works. Then, because `hosting` and `add_to_waitlist` are marked with `pub`, the rest of the path works, and this function call is valid!\n\nIf you plan on sharing your library crate so other projects can use your code, your public API is your contract with users of your crate that determines how they can interact with your code. There are many considerations around managing changes to your public API to make it easier for people to depend on your crate. These considerations are out of the scope of this book; if you’re interested in this topic, see [The Rust API Guidelines](https://rust-lang.github.io/api-guidelines/).\n\n#### [Best Practices for Packages with a Binary and a Library](#best-practices-for-packages-with-a-binary-and-a-library)\n\nWe mentioned that a package can contain both a _src/main.rs_ binary crate root as well as a _src/lib.rs_ library crate root, and both crates will have the package name by default. Typically, packages with this pattern of containing both a library and a binary crate will have just enough code in the binary crate to start an executable that calls code within the library crate. This lets other projects benefit from most of the functionality that the package provides because the library crate’s code can be shared.\n\nThe module tree should be defined in _src/lib.rs_. Then, any public items can be used in the binary crate by starting paths with the name of the package. The binary crate becomes a user of the library crate just like a completely external crate would use the library crate: it can only use the public API. This helps you design a good API; not only are you the author, you’re also a client!\n\nIn [Chapter 12](ch12-00-an-io-project.html), we’ll demonstrate this organizational practice with a command-line program that will contain both a binary crate and a library crate.\n\n### [Starting Relative Paths with `super`](#starting-relative-paths-with-super)\n\nWe can construct relative paths that begin in the parent module, rather than the current module or the crate root, by using `super` at the start of the path. This is like starting a filesystem path with the `..` syntax. Using `super` allows us to reference an item that we know is in the parent module, which can make rearranging the module tree easier when the module is closely related to the parent but the parent might be moved elsewhere in the module tree someday.\n\nConsider the code in Listing 7-8 that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function `fix_incorrect_order` defined in the `back_of_house` module calls the function `deliver_order` defined in the parent module by specifying the path to `deliver_order`, starting with `super`.\n\nFilename: src/lib.rs\n\n```rust\nfn deliver_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::deliver_order();\n    }\n\n    fn cook_order() {}\n}\n```\n\nListing 7-8: Calling a function using a relative path starting with `super`\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can use `super` to go to the parent module of `back_of_house`, which in this case is `crate`, the root. From there, we look for `deliver_order` and find it. Success! We think the `back_of_house` module and the `deliver_order` function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate’s module tree. Therefore, we used `super` so we’ll have fewer places to update code in the future if this code gets moved to a different module.\n\n### [Making Structs and Enums Public](#making-structs-and-enums-public)\n\nWe can also use `pub` to designate structs and enums as public, but there are a few extra details to the usage of `pub` with structs and enums. If we use `pub` before a struct definition, we make the struct public, but the struct’s fields will still be private. We can make each field public or not on a case-by-case basis. In Listing 7-9, we’ve defined a public `back_of_house::Breakfast` struct with a public `toast` field but a private `seasonal_fruit` field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what’s in season and in stock. The available fruit changes quickly, so customers can’t choose the fruit or even see which fruit they’ll get.\n\nFilename: src/lib.rs\n\n```rust\nmod back_of_house {\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        pub fn summer(toast: &str) -> Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from(\"peaches\"),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer(\"Rye\");\n    // Change our mind about what bread we'd like\n    meal.toast = String::from(\"Wheat\");\n    println!(\"I'd like {} toast please\", meal.toast);\n\n    // The next line won't compile if we uncomment it; we're not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from(\"blueberries\");\n}\n```\n\nListing 7-9: A struct with some public fields and some private fields\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public, in `eat_at_restaurant` we can write and read to the `toast` field using dot notation. Notice that we can’t use the `seasonal_fruit` field in `eat_at_restaurant`, because `seasonal_fruit` is private. Try uncommenting the line modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the struct needs to provide a public associated function that constructs an instance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t have such a function, we couldn’t create an instance of `Breakfast` in `eat_at_restaurant` because we couldn’t set the value of the private `seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We only need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\nFilename: src/lib.rs\n\n```rust\nmod back_of_house {\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n```\n\nListing 7-10: Designating an enum as public makes all its variants public\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad` variants in `eat_at_restaurant`.\n\nEnums aren’t very useful unless their variants are public; it would be annoying to have to annotate all enum variants with `pub` in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with `pub`.\n\nThere’s one more situation involving `pub` that we haven’t covered, and that is our last module system feature: the `use` keyword. We’ll cover `use` by itself first, and then we’ll show how to combine `pub` and `use`.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Paths for Referring to an Item in the Module Tree - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"paths-for-referring-to-an-item-in-the-module-tree\"><a class=\"header\" href=\"#paths-for-referring-to-an-item-in-the-module-tree\">Paths for Referring to an Item in the Module Tree</a></h2>\n<p>To show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.</p>\n<p>A path can take two forms:</p>\n<ul>\n<li>An <em>absolute path</em> is the full path starting from a crate root; for code\nfrom an external crate, the absolute path begins with the crate name, and for\ncode from the current crate, it starts with the literal <code class=\"hljs\">crate</code>.</li>\n<li>A <em>relative path</em> starts from the current module and uses <code class=\"hljs\">self</code>, <code class=\"hljs\">super</code>, or\nan identifier in the current module.</li>\n</ul>\n<p>Both absolute and relative paths are followed by one or more identifiers\nseparated by double colons (<code class=\"hljs\">::</code>).</p>\n<p>Returning to Listing 7-1, say we want to call the <code class=\"hljs\">add_to_waitlist</code> function.\nThis is the same as asking: what’s the path of the <code class=\"hljs\">add_to_waitlist</code> function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved.</p>\n<p>We’ll show two ways to call the <code class=\"hljs\">add_to_waitlist</code> function from a new function,\n<code class=\"hljs\">eat_at_restaurant</code>, defined in the crate root. These paths are correct, but\nthere’s another problem remaining that will prevent this example from compiling\nas is. We’ll explain why in a bit.</p>\n<p>The <code class=\"hljs\">eat_at_restaurant</code> function is part of our library crate’s public API, so\nwe mark it with the <code class=\"hljs\">pub</code> keyword. In the <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\">“Exposing Paths with the <code class=\"hljs\">pub</code>\nKeyword”</a><!-- ignore --> section, we’ll go into more detail about <code class=\"hljs\">pub</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-3: Calling the <code class=\"hljs\">add_to_waitlist</code> function using\nabsolute and relative paths</span></p>\n<p>The first time we call the <code class=\"hljs\">add_to_waitlist</code> function in <code class=\"hljs\">eat_at_restaurant</code>,\nwe use an absolute path. The <code class=\"hljs\">add_to_waitlist</code> function is defined in the same\ncrate as <code class=\"hljs\">eat_at_restaurant</code>, which means we can use the <code class=\"hljs\">crate</code> keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to <code class=\"hljs\">add_to_waitlist</code>. You can imagine a filesystem with the same\nstructure: we’d specify the path <code class=\"hljs\">/front_of_house/hosting/add_to_waitlist</code> to\nrun the <code class=\"hljs\">add_to_waitlist</code> program; using the <code class=\"hljs\">crate</code> name to start from the\ncrate root is like using <code class=\"hljs\">/</code> to start from the filesystem root in your shell.</p>\n<p>The second time we call <code class=\"hljs\">add_to_waitlist</code> in <code class=\"hljs\">eat_at_restaurant</code>, we use a\nrelative path. The path starts with <code class=\"hljs\">front_of_house</code>, the name of the module\ndefined at the same level of the module tree as <code class=\"hljs\">eat_at_restaurant</code>. Here the\nfilesystem equivalent would be using the path\n<code class=\"hljs\">front_of_house/hosting/add_to_waitlist</code>. Starting with a module name means\nthat the path is relative.</p>\n<p>Choosing whether to use a relative or absolute path is a decision you’ll make\nbased on your project, and it depends on whether you’re more likely to move\nitem definition code separately from or together with the code that uses the\nitem. For example, if we moved the <code class=\"hljs\">front_of_house</code> module and the\n<code class=\"hljs\">eat_at_restaurant</code> function into a module named <code class=\"hljs\">customer_experience</code>, we’d\nneed to update the absolute path to <code class=\"hljs\">add_to_waitlist</code>, but the relative path\nwould still be valid. However, if we moved the <code class=\"hljs\">eat_at_restaurant</code> function\nseparately into a module named <code class=\"hljs\">dining</code>, the absolute path to the\n<code class=\"hljs\">add_to_waitlist</code> call would stay the same, but the relative path would need to\nbe updated. Our preference in general is to specify absolute paths because it’s\nmore likely we’ll want to move code definitions and item calls independently of\neach other.</p>\n<p>Let’s try to compile Listing 7-3 and find out why it won’t compile yet! The\nerrors we get are shown in Listing 7-4.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:9:28</span>\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n  |                            |\n  |                            private module\n  |\nnote: the module `hosting` is defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:2:5</span>\n  |\n2 |     mod hosting {\n  |     ^^^^^^^^^^^\n\nerror[E0603]: module `hosting` is private\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:12:21</span>\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n   |                     |\n   |                     private module\n   |\nnote: the module `hosting` is defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:2:5</span>\n   |\n2  |     mod hosting {\n   |     ^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span></p>\n<p>The error messages say that module <code class=\"hljs\">hosting</code> is private. In other words, we\nhave the correct paths for the <code class=\"hljs\">hosting</code> module and the <code class=\"hljs\">add_to_waitlist</code>\nfunction, but Rust won’t let us use them because it doesn’t have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.</p>\n<p>Items in a parent module can’t use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they’re defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate.</p>\n<p>Rust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules’ code to outer ancestor\nmodules by using the <code class=\"hljs\">pub</code> keyword to make an item public.</p>\n<h3 id=\"exposing-paths-with-the-pub-keyword\"><a class=\"header\" href=\"#exposing-paths-with-the-pub-keyword\">Exposing Paths with the <code>pub</code> Keyword</a></h3>\n<p>Let’s return to the error in Listing 7-4 that told us the <code class=\"hljs\">hosting</code> module is\nprivate. We want the <code class=\"hljs\">eat_at_restaurant</code> function in the parent module to have\naccess to the <code class=\"hljs\">add_to_waitlist</code> function in the child module, so we mark the\n<code class=\"hljs\">hosting</code> module with the <code class=\"hljs\">pub</code> keyword, as shown in Listing 7-5.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-5: Declaring the <code class=\"hljs\">hosting</code> module as <code class=\"hljs\">pub</code> to\nuse it from <code class=\"hljs\">eat_at_restaurant</code></span></p>\n<p>Unfortunately, the code in Listing 7-5 still results in compiler errors, as\nshown in Listing 7-6.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:9:37</span>\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^ private function\n  |\nnote: the function `add_to_waitlist` is defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:3:9</span>\n  |\n3 |         fn add_to_waitlist() {}\n  |         ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:12:30</span>\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^ private function\n   |\nnote: the function `add_to_waitlist` is defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:3:9</span>\n   |\n3  |         fn add_to_waitlist() {}\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span></p>\n<p>What happened? Adding the <code class=\"hljs\">pub</code> keyword in front of <code class=\"hljs\">mod hosting</code> makes the\nmodule public. With this change, if we can access <code class=\"hljs\">front_of_house</code>, we can\naccess <code class=\"hljs\">hosting</code>. But the <em>contents</em> of <code class=\"hljs\">hosting</code> are still private; making the\nmodule public doesn’t make its contents public. The <code class=\"hljs\">pub</code> keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there’s not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.</p>\n<p>The errors in Listing 7-6 say that the <code class=\"hljs\">add_to_waitlist</code> function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.</p>\n<p>Let’s also make the <code class=\"hljs\">add_to_waitlist</code> function public by adding the <code class=\"hljs\">pub</code>\nkeyword before its definition, as in Listing 7-7.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-7: Adding the <code class=\"hljs\">pub</code> keyword to <code class=\"hljs\">mod hosting</code>\nand <code class=\"hljs\">fn add_to_waitlist</code> lets us call the function from\n<code class=\"hljs\">eat_at_restaurant</code></span></p>\n<p>Now the code will compile! To see why adding the <code class=\"hljs\">pub</code> keyword lets us use\nthese paths in <code class=\"hljs\">eat_at_restaurant</code> with respect to the privacy rules, let’s look\nat the absolute and the relative paths.</p>\n<p>In the absolute path, we start with <code class=\"hljs\">crate</code>, the root of our crate’s module\ntree. The <code class=\"hljs\">front_of_house</code> module is defined in the crate root. While\n<code class=\"hljs\">front_of_house</code> isn’t public, because the <code class=\"hljs\">eat_at_restaurant</code> function is\ndefined in the same module as <code class=\"hljs\">front_of_house</code> (that is, <code class=\"hljs\">eat_at_restaurant</code>\nand <code class=\"hljs\">front_of_house</code> are siblings), we can refer to <code class=\"hljs\">front_of_house</code> from\n<code class=\"hljs\">eat_at_restaurant</code>. Next is the <code class=\"hljs\">hosting</code> module marked with <code class=\"hljs\">pub</code>. We can\naccess the parent module of <code class=\"hljs\">hosting</code>, so we can access <code class=\"hljs\">hosting</code>. Finally, the\n<code class=\"hljs\">add_to_waitlist</code> function is marked with <code class=\"hljs\">pub</code> and we can access its parent\nmodule, so this function call works!</p>\n<p>In the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n<code class=\"hljs\">front_of_house</code>. The <code class=\"hljs\">front_of_house</code> module is defined within the same module\nas <code class=\"hljs\">eat_at_restaurant</code>, so the relative path starting from the module in which\n<code class=\"hljs\">eat_at_restaurant</code> is defined works. Then, because <code class=\"hljs\">hosting</code> and\n<code class=\"hljs\">add_to_waitlist</code> are marked with <code class=\"hljs\">pub</code>, the rest of the path works, and this\nfunction call is valid!</p>\n<p>If you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are out of the scope of this book; if you’re\ninterested in this topic, see <a href=\"https://rust-lang.github.io/api-guidelines/\">The Rust API Guidelines</a>.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"best-practices-for-packages-with-a-binary-and-a-library\"><a class=\"header\" href=\"#best-practices-for-packages-with-a-binary-and-a-library\">Best Practices for Packages with a Binary and a Library</a></h4>\n<p>We mentioned that a package can contain both a <em>src/main.rs</em> binary crate\nroot as well as a <em>src/lib.rs</em> library crate root, and both crates will have\nthe package name by default. Typically, packages with this pattern of\ncontaining both a library and a binary crate will have just enough code in the\nbinary crate to start an executable that calls code within the library crate.\nThis lets other projects benefit from most of the functionality that the\npackage provides because the library crate’s code can be shared.</p>\n<p>The module tree should be defined in <em>src/lib.rs</em>. Then, any public items can\nbe used in the binary crate by starting paths with the name of the package.\nThe binary crate becomes a user of the library crate just like a completely\nexternal crate would use the library crate: it can only use the public API.\nThis helps you design a good API; not only are you the author, you’re also a\nclient!</p>\n<p>In <a href=\"ch12-00-an-io-project.html\">Chapter 12</a><!-- ignore -->, we’ll demonstrate this organizational\npractice with a command-line program that will contain both a binary crate\nand a library crate.</p>\n</section>\n<h3 id=\"starting-relative-paths-with-super\"><a class=\"header\" href=\"#starting-relative-paths-with-super\">Starting Relative Paths with <code>super</code></a></h3>\n<p>We can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using <code class=\"hljs\">super</code> at the start of the\npath. This is like starting a filesystem path with the <code class=\"hljs\">..</code> syntax. Using\n<code class=\"hljs\">super</code> allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent but the parent might be moved elsewhere in the module\ntree someday.</p>\n<p>Consider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction <code class=\"hljs\">fix_incorrect_order</code> defined in the <code class=\"hljs\">back_of_house</code> module calls the\nfunction <code class=\"hljs\">deliver_order</code> defined in the parent module by specifying the path to\n<code class=\"hljs\">deliver_order</code>, starting with <code class=\"hljs\">super</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deliver_order</span></span>() {}\n\n<span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fix_incorrect_order</span></span>() {\n        cook_order();\n        super::deliver_order();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cook_order</span></span>() {}\n}</code></pre>\n<p><span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with <code class=\"hljs\">super</code></span></p>\n<p>The <code class=\"hljs\">fix_incorrect_order</code> function is in the <code class=\"hljs\">back_of_house</code> module, so we can\nuse <code class=\"hljs\">super</code> to go to the parent module of <code class=\"hljs\">back_of_house</code>, which in this case\nis <code class=\"hljs\">crate</code>, the root. From there, we look for <code class=\"hljs\">deliver_order</code> and find it.\nSuccess! We think the <code class=\"hljs\">back_of_house</code> module and the <code class=\"hljs\">deliver_order</code> function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate’s module tree. Therefore, we\nused <code class=\"hljs\">super</code> so we’ll have fewer places to update code in the future if this\ncode gets moved to a different module.</p>\n<h3 id=\"making-structs-and-enums-public\"><a class=\"header\" href=\"#making-structs-and-enums-public\">Making Structs and Enums Public</a></h3>\n<p>We can also use <code class=\"hljs\">pub</code> to designate structs and enums as public, but there are a\nfew extra details to the usage of <code class=\"hljs\">pub</code> with structs and enums. If we use <code class=\"hljs\">pub</code>\nbefore a struct definition, we make the struct public, but the struct’s fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we’ve defined a public <code class=\"hljs\">back_of_house::Breakfast</code> struct\nwith a public <code class=\"hljs\">toast</code> field but a private <code class=\"hljs\">seasonal_fruit</code> field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what’s in season and in stock. The available fruit changes quickly, so\ncustomers can’t choose the fruit or even see which fruit they’ll get.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Breakfast</span></span> {\n        <span class=\"hljs-keyword\">pub</span> toast: <span class=\"hljs-built_in\">String</span>,\n        seasonal_fruit: <span class=\"hljs-built_in\">String</span>,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Breakfast {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summer</span></span>(toast: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; Breakfast {\n            Breakfast {\n                toast: <span class=\"hljs-built_in\">String</span>::from(toast),\n                seasonal_fruit: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"peaches\"</span>),\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Order a breakfast in the summer with Rye toast</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> meal = back_of_house::Breakfast::summer(<span class=\"hljs-string\">\"Rye\"</span>);\n    <span class=\"hljs-comment\">// Change our mind about what bread we'd like</span>\n    meal.toast = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Wheat\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'd like {} toast please\"</span>, meal.toast);\n\n    <span class=\"hljs-comment\">// The next line won't compile if we uncomment it; we're not allowed</span>\n    <span class=\"hljs-comment\">// to see or modify the seasonal fruit that comes with the meal</span>\n    <span class=\"hljs-comment\">// meal.seasonal_fruit = String::from(\"blueberries\");</span>\n}</code></pre>\n<p><span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span></p>\n<p>Because the <code class=\"hljs\">toast</code> field in the <code class=\"hljs\">back_of_house::Breakfast</code> struct is public,\nin <code class=\"hljs\">eat_at_restaurant</code> we can write and read to the <code class=\"hljs\">toast</code> field using dot\nnotation. Notice that we can’t use the <code class=\"hljs\">seasonal_fruit</code> field in\n<code class=\"hljs\">eat_at_restaurant</code>, because <code class=\"hljs\">seasonal_fruit</code> is private. Try uncommenting the\nline modifying the <code class=\"hljs\">seasonal_fruit</code> field value to see what error you get!</p>\n<p>Also, note that because <code class=\"hljs\">back_of_house::Breakfast</code> has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of <code class=\"hljs\">Breakfast</code> (we’ve named it <code class=\"hljs\">summer</code> here). If <code class=\"hljs\">Breakfast</code> didn’t\nhave such a function, we couldn’t create an instance of <code class=\"hljs\">Breakfast</code> in\n<code class=\"hljs\">eat_at_restaurant</code> because we couldn’t set the value of the private\n<code class=\"hljs\">seasonal_fruit</code> field in <code class=\"hljs\">eat_at_restaurant</code>.</p>\n<p>In contrast, if we make an enum public, all of its variants are then public. We\nonly need the <code class=\"hljs\">pub</code> before the <code class=\"hljs\">enum</code> keyword, as shown in Listing 7-10.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Appetizer</span></span> {\n        Soup,\n        Salad,\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-keyword\">let</span> order1 = back_of_house::Appetizer::Soup;\n    <span class=\"hljs-keyword\">let</span> order2 = back_of_house::Appetizer::Salad;\n}</code></pre>\n<p><span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span></p>\n<p>Because we made the <code class=\"hljs\">Appetizer</code> enum public, we can use the <code class=\"hljs\">Soup</code> and <code class=\"hljs\">Salad</code>\nvariants in <code class=\"hljs\">eat_at_restaurant</code>.</p>\n<p>Enums aren’t very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with <code class=\"hljs\">pub</code> in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with <code class=\"hljs\">pub</code>.</p>\n<p>There’s one more situation involving <code class=\"hljs\">pub</code> that we haven’t covered, and that is\nour last module system feature: the <code class=\"hljs\">use</code> keyword. We’ll cover <code class=\"hljs\">use</code> by itself\nfirst, and then we’ll show how to combine <code class=\"hljs\">pub</code> and <code class=\"hljs\">use</code>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:18.815Z"
}