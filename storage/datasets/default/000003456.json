{
	"title": "mod.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/core/convert/mod.rs.html",
	"markdown": "# mod.rs - source\n\n```\n//! Traits for conversions between types.\n//!\n//! The traits in this module provide a way to convert from one type to another type.\n//! Each trait serves a different purpose:\n//!\n//! - Implement the [`AsRef`] trait for cheap reference-to-reference conversions\n//! - Implement the [`AsMut`] trait for cheap mutable-to-mutable conversions\n//! - Implement the [`From`] trait for consuming value-to-value conversions\n//! - Implement the [`Into`] trait for consuming value-to-value conversions to types\n//!   outside the current crate\n//! - The [`TryFrom`] and [`TryInto`] traits behave like [`From`] and [`Into`],\n//!   but should be implemented when the conversion can fail.\n//!\n//! The traits in this module are often used as trait bounds for generic functions such that to\n//! arguments of multiple types are supported. See the documentation of each trait for examples.\n//!\n//! As a library author, you should always prefer implementing [`From<T>`][`From`] or\n//! [`TryFrom<T>`][`TryFrom`] rather than [`Into<U>`][`Into`] or [`TryInto<U>`][`TryInto`],\n//! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n//! blanket implementation in the standard library. When targeting a version prior to Rust 1.41, it\n//! may be necessary to implement [`Into`] or [`TryInto`] directly when converting to a type\n//! outside the current crate.\n//!\n//! # Generic Implementations\n//!\n//! - [`AsRef`] and [`AsMut`] auto-dereference if the inner type is a reference\n//!   (but not generally for all [dereferenceable types][core::ops::Deref])\n//! - [`From`]`<U> for T` implies [`Into`]`<T> for U`\n//! - [`TryFrom`]`<U> for T` implies [`TryInto`]`<T> for U`\n//! - [`From`] and [`Into`] are reflexive, which means that all types can\n//!   `into` themselves and `from` themselves\n//!\n//! See each trait for usage examples.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::error::Error;\nuse crate::fmt;\nuse crate::hash::{Hash, Hasher};\n\nmod num;\n\n#[unstable(feature = \"convert_float_to_int\", issue = \"67057\")]\npub use num::FloatToInt;\n\n/// The identity function.\n///\n/// Two things are important to note about this function:\n///\n/// - It is not always equivalent to a closure like `|x| x`, since the\n///   closure may coerce `x` into a different type.\n///\n/// - It moves the input `x` passed to the function.\n///\n/// While it might seem strange to have a function that just returns back the\n/// input, there are some interesting uses.\n///\n/// # Examples\n///\n/// Using `identity` to do nothing in a sequence of other, interesting,\n/// functions:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// fn manipulation(x: u32) -> u32 {\n///     // Let's pretend that adding one is an interesting function.\n///     x + 1\n/// }\n///\n/// let _arr = &[identity, manipulation];\n/// ```\n///\n/// Using `identity` as a \"do nothing\" base case in a conditional:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// # let condition = true;\n/// #\n/// # fn manipulation(x: u32) -> u32 { x + 1 }\n/// #\n/// let do_stuff = if condition { manipulation } else { identity };\n///\n/// // Do more interesting stuff...\n///\n/// let _results = do_stuff(42);\n/// ```\n///\n/// Using `identity` to keep the `Some` variants of an iterator of `Option<T>`:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// let iter = [Some(1), None, Some(3)].into_iter();\n/// let filtered = iter.filter_map(identity).collect::<Vec<_>>();\n/// assert_eq!(vec![1, 3], filtered);\n/// ```\n#[stable(feature = \"convert_id\", since = \"1.33.0\")]\n#[rustc_const_stable(feature = \"const_identity\", since = \"1.33.0\")]\n#[inline(always)]\n#[rustc_diagnostic_item = \"convert_identity\"]\npub const fn identity<T>(x: T) -> T {\n    x\n}\n\n/// Used to do a cheap reference-to-reference conversion.\n///\n/// This trait is similar to [`AsMut`] which is used for converting between mutable references.\n/// If you need to do a costly conversion it is better to implement [`From`] with type\n/// `&T` or write a custom function.\n///\n/// # Relation to `Borrow`\n///\n/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in a few aspects:\n///\n/// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n///   a reference or a value. (See also note on `AsRef`'s reflexibility below.)\n/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for a borrowed value are\n///   equivalent to those of the owned value. For this reason, if you want to\n///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use a\n/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n///\n/// # Generic Implementations\n///\n/// `AsRef` auto-dereferences if the inner type is a reference or a mutable reference\n/// (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`).\n///\n/// Note that due to historic reasons, the above currently does not hold generally for all\n/// [dereferenceable types], e.g. `foo.as_ref()` will *not* work the same as\n/// `Box::new(foo).as_ref()`. Instead, many smart pointers provide an `as_ref` implementation which\n/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n/// reference-to-reference conversion for that value). However, [`AsRef::as_ref`] should not be\n/// used for the sole purpose of dereferencing; instead ['`Deref` coercion'] can be used:\n///\n/// [dereferenceable types]: core::ops::Deref\n/// [pointed-to value]: core::ops::Deref::Target\n/// ['`Deref` coercion']: core::ops::Deref#deref-coercion\n///\n/// ```\n/// let x = Box::new(5i32);\n/// // Avoid this:\n/// // let y: &i32 = x.as_ref();\n/// // Better just write:\n/// let y: &i32 = &x;\n/// ```\n///\n/// Types which implement [`Deref`] should consider implementing `AsRef<T>` as follows:\n///\n/// [`Deref`]: core::ops::Deref\n///\n/// ```\n/// # use core::ops::Deref;\n/// # struct SomeType;\n/// # impl Deref for SomeType {\n/// #     type Target = [u8];\n/// #     fn deref(&self) -> &[u8] {\n/// #         &[]\n/// #     }\n/// # }\n/// impl<T> AsRef<T> for SomeType\n/// where\n///     T: ?Sized,\n///     <SomeType as Deref>::Target: AsRef<T>,\n/// {\n///     fn as_ref(&self) -> &T {\n///         self.deref().as_ref()\n///     }\n/// }\n/// ```\n///\n/// # Reflexivity\n///\n/// Ideally, `AsRef` would be reflexive, i.e. there would be an `impl<T: ?Sized> AsRef<T> for T`\n/// with [`as_ref`] simply returning its argument unchanged.\n/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n/// Rust's type system (it would be overlapping with another existing blanket implementation for\n/// `&T where T: AsRef<U>` which allows `AsRef` to auto-dereference, see \"Generic Implementations\"\n/// above).\n///\n/// [`as_ref`]: AsRef::as_ref\n///\n/// A trivial implementation of `AsRef<T> for T` must be added explicitly for a particular type `T`\n/// where needed or desired. Note, however, that not all types from `std` contain such an\n/// implementation, and those cannot be added by external code due to orphan rules.\n///\n/// # Examples\n///\n/// By using trait bounds we can accept arguments of different types as long as they can be\n/// converted to the specified type `T`.\n///\n/// For example: By creating a generic function that takes an `AsRef<str>` we express that we\n/// want to accept all references that can be converted to [`&str`] as an argument.\n/// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n///\n/// [`&str`]: primitive@str\n/// [`Borrow`]: crate::borrow::Borrow\n/// [`Eq`]: crate::cmp::Eq\n/// [`Ord`]: crate::cmp::Ord\n/// [`String`]: ../../std/string/struct.String.html\n///\n/// ```\n/// fn is_hello<T: AsRef<str>>(s: T) {\n///    assert_eq!(\"hello\", s.as_ref());\n/// }\n///\n/// let s = \"hello\";\n/// is_hello(s);\n///\n/// let s = \"hello\".to_string();\n/// is_hello(s);\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"AsRef\")]\npub trait AsRef<T: ?Sized> {\n    /// Converts this type into a shared reference of the (usually inferred) input type.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn as_ref(&self) -> &T;\n}\n\n/// Used to do a cheap mutable-to-mutable reference conversion.\n///\n/// This trait is similar to [`AsRef`] but used for converting between mutable\n/// references. If you need to do a costly conversion it is better to\n/// implement [`From`] with type `&mut T` or write a custom function.\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use a\n/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n///\n/// # Generic Implementations\n///\n/// `AsMut` auto-dereferences if the inner type is a mutable reference\n/// (e.g.: `foo.as_mut()` will work the same if `foo` has type `&mut Foo` or `&mut &mut Foo`).\n///\n/// Note that due to historic reasons, the above currently does not hold generally for all\n/// [mutably dereferenceable types], e.g. `foo.as_mut()` will *not* work the same as\n/// `Box::new(foo).as_mut()`. Instead, many smart pointers provide an `as_mut` implementation which\n/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n/// reference-to-reference conversion for that value). However, [`AsMut::as_mut`] should not be\n/// used for the sole purpose of mutable dereferencing; instead ['`Deref` coercion'] can be used:\n///\n/// [mutably dereferenceable types]: core::ops::DerefMut\n/// [pointed-to value]: core::ops::Deref::Target\n/// ['`Deref` coercion']: core::ops::DerefMut#mutable-deref-coercion\n///\n/// ```\n/// let mut x = Box::new(5i32);\n/// // Avoid this:\n/// // let y: &mut i32 = x.as_mut();\n/// // Better just write:\n/// let y: &mut i32 = &mut x;\n/// ```\n///\n/// Types which implement [`DerefMut`] should consider to add an implementation of `AsMut<T>` as\n/// follows:\n///\n/// [`DerefMut`]: core::ops::DerefMut\n///\n/// ```\n/// # use core::ops::{Deref, DerefMut};\n/// # struct SomeType;\n/// # impl Deref for SomeType {\n/// #     type Target = [u8];\n/// #     fn deref(&self) -> &[u8] {\n/// #         &[]\n/// #     }\n/// # }\n/// # impl DerefMut for SomeType {\n/// #     fn deref_mut(&mut self) -> &mut [u8] {\n/// #         &mut []\n/// #     }\n/// # }\n/// impl<T> AsMut<T> for SomeType\n/// where\n///     <SomeType as Deref>::Target: AsMut<T>,\n/// {\n///     fn as_mut(&mut self) -> &mut T {\n///         self.deref_mut().as_mut()\n///     }\n/// }\n/// ```\n///\n/// # Reflexivity\n///\n/// Ideally, `AsMut` would be reflexive, i.e. there would be an `impl<T: ?Sized> AsMut<T> for T`\n/// with [`as_mut`] simply returning its argument unchanged.\n/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n/// Rust's type system (it would be overlapping with another existing blanket implementation for\n/// `&mut T where T: AsMut<U>` which allows `AsMut` to auto-dereference, see \"Generic\n/// Implementations\" above).\n///\n/// [`as_mut`]: AsMut::as_mut\n///\n/// A trivial implementation of `AsMut<T> for T` must be added explicitly for a particular type `T`\n/// where needed or desired. Note, however, that not all types from `std` contain such an\n/// implementation, and those cannot be added by external code due to orphan rules.\n///\n/// # Examples\n///\n/// Using `AsMut` as trait bound for a generic function, we can accept all mutable references that\n/// can be converted to type `&mut T`. Unlike [dereference], which has a single [target type],\n/// there can be multiple implementations of `AsMut` for a type. In particular, `Vec<T>` implements\n/// both `AsMut<Vec<T>>` and `AsMut<[T]>`.\n///\n/// In the following, the example functions `caesar` and `null_terminate` provide a generic\n/// interface which work with any type that can be converted by cheap mutable-to-mutable conversion\n/// into a byte slice (`[u8]`) or byte vector (`Vec<u8>`), respectively.\n///\n/// [dereference]: core::ops::DerefMut\n/// [target type]: core::ops::Deref::Target\n///\n/// ```\n/// struct Document {\n///     info: String,\n///     content: Vec<u8>,\n/// }\n///\n/// impl<T: ?Sized> AsMut<T> for Document\n/// where\n///     Vec<u8>: AsMut<T>,\n/// {\n///     fn as_mut(&mut self) -> &mut T {\n///         self.content.as_mut()\n///     }\n/// }\n///\n/// fn caesar<T: AsMut<[u8]>>(data: &mut T, key: u8) {\n///     for byte in data.as_mut() {\n///         *byte = byte.wrapping_add(key);\n///     }\n/// }\n///\n/// fn null_terminate<T: AsMut<Vec<u8>>>(data: &mut T) {\n///     // Using a non-generic inner function, which contains most of the\n///     // functionality, helps to minimize monomorphization overhead.\n///     fn doit(data: &mut Vec<u8>) {\n///         let len = data.len();\n///         if len == 0 || data[len-1] != 0 {\n///             data.push(0);\n///         }\n///     }\n///     doit(data.as_mut());\n/// }\n///\n/// fn main() {\n///     let mut v: Vec<u8> = vec![1, 2, 3];\n///     caesar(&mut v, 5);\n///     assert_eq!(v, [6, 7, 8]);\n///     null_terminate(&mut v);\n///     assert_eq!(v, [6, 7, 8, 0]);\n///     let mut doc = Document {\n///         info: String::from(\"Example\"),\n///         content: vec![17, 19, 8],\n///     };\n///     caesar(&mut doc, 1);\n///     assert_eq!(doc.content, [18, 20, 9]);\n///     null_terminate(&mut doc);\n///     assert_eq!(doc.content, [18, 20, 9, 0]);\n/// }\n/// ```\n///\n/// Note, however, that APIs don't need to be generic. In many cases taking a `&mut [u8]` or\n/// `&mut Vec<u8>`, for example, is the better choice (callers need to pass the correct type then).\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"AsMut\")]\npub trait AsMut<T: ?Sized> {\n    /// Converts this type into a mutable reference of the (usually inferred) input type.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn as_mut(&mut self) -> &mut T;\n}\n\n/// A value-to-value conversion that consumes the input value. The\n/// opposite of [`From`].\n///\n/// One should avoid implementing [`Into`] and implement [`From`] instead.\n/// Implementing [`From`] automatically provides one with an implementation of [`Into`]\n/// thanks to the blanket implementation in the standard library.\n///\n/// Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function\n/// to ensure that types that only implement [`Into`] can be used as well.\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use [`TryInto`].\n///\n/// # Generic Implementations\n///\n/// - [`From`]`<T> for U` implies `Into<U> for T`\n/// - [`Into`] is reflexive, which means that `Into<T> for T` is implemented\n///\n/// # Implementing [`Into`] for conversions to external types in old versions of Rust\n///\n/// Prior to Rust 1.41, if the destination type was not part of the current crate\n/// then you couldn't implement [`From`] directly.\n/// For example, take this code:\n///\n/// ```\n/// # #![allow(non_local_definitions)]\n/// struct Wrapper<T>(Vec<T>);\n/// impl<T> From<Wrapper<T>> for Vec<T> {\n///     fn from(w: Wrapper<T>) -> Vec<T> {\n///         w.0\n///     }\n/// }\n/// ```\n/// This will fail to compile in older versions of the language because Rust's orphaning rules\n/// used to be a little bit more strict. To bypass this, you could implement [`Into`] directly:\n///\n/// ```\n/// struct Wrapper<T>(Vec<T>);\n/// impl<T> Into<Vec<T>> for Wrapper<T> {\n///     fn into(self) -> Vec<T> {\n///         self.0\n///     }\n/// }\n/// ```\n///\n/// It is important to understand that [`Into`] does not provide a [`From`] implementation\n/// (as [`From`] does with [`Into`]). Therefore, you should always try to implement [`From`]\n/// and then fall back to [`Into`] if [`From`] can't be implemented.\n///\n/// # Examples\n///\n/// [`String`] implements [`Into`]`<`[`Vec`]`<`[`u8`]`>>`:\n///\n/// In order to express that we want a generic function to take all arguments that can be\n/// converted to a specified type `T`, we can use a trait bound of [`Into`]`<T>`.\n/// For example: The function `is_hello` takes all arguments that can be converted into a\n/// [`Vec`]`<`[`u8`]`>`.\n///\n/// ```\n/// fn is_hello<T: Into<Vec<u8>>>(s: T) {\n///    let bytes = b\"hello\".to_vec();\n///    assert_eq!(bytes, s.into());\n/// }\n///\n/// let s = \"hello\".to_string();\n/// is_hello(s);\n/// ```\n///\n/// [`String`]: ../../std/string/struct.String.html\n/// [`Vec`]: ../../std/vec/struct.Vec.html\n#[rustc_diagnostic_item = \"Into\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub trait Into<T>: Sized {\n    /// Converts this type into the (usually inferred) input type.\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn into(self) -> T;\n}\n\n/// Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n/// [`Into`].\n///\n/// One should always prefer implementing `From` over [`Into`]\n/// because implementing `From` automatically provides one with an implementation of [`Into`]\n/// thanks to the blanket implementation in the standard library.\n///\n/// Only implement [`Into`] when targeting a version prior to Rust 1.41 and converting to a type\n/// outside the current crate.\n/// `From` was not able to do these types of conversions in earlier versions because of Rust's\n/// orphaning rules.\n/// See [`Into`] for more details.\n///\n/// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function.\n/// This way, types that directly implement [`Into`] can be used as arguments as well.\n///\n/// The `From` trait is also very useful when performing error handling. When constructing a function\n/// that is capable of failing, the return type will generally be of the form `Result<T, E>`.\n/// `From` simplifies error handling by allowing a function to return a single error type\n/// that encapsulates multiple error types. See the \"Examples\" section and [the book][book] for more\n/// details.\n///\n/// **Note: This trait must not fail**. The `From` trait is intended for perfect conversions.\n/// If the conversion can fail or is not perfect, use [`TryFrom`].\n///\n/// # Generic Implementations\n///\n/// - `From<T> for U` implies [`Into`]`<U> for T`\n/// - `From` is reflexive, which means that `From<T> for T` is implemented\n///\n/// # When to implement `From`\n///\n/// While there's no technical restrictions on which conversions can be done using\n/// a `From` implementation, the general expectation is that the conversions\n/// should typically be restricted as follows:\n///\n/// * The conversion is *infallible*: if the conversion can fail, use [`TryFrom`]\n///   instead; don't provide a `From` impl that panics.\n///\n/// * The conversion is *lossless*: semantically, it should not lose or discard\n///   information. For example, `i32: From<u16>` exists, where the original\n///   value can be recovered using `u16: TryFrom<i32>`.  And `String: From<&str>`\n///   exists, where you can get something equivalent to the original value via\n///   `Deref`.  But `From` cannot be used to convert from `u32` to `u16`, since\n///   that cannot succeed in a lossless way.  (There's some wiggle room here for\n///   information not considered semantically relevant.  For example,\n///   `Box<[T]>: From<Vec<T>>` exists even though it might not preserve capacity,\n///   like how two vectors can be equal despite differing capacities.)\n///\n/// * The conversion is *value-preserving*: the conceptual kind and meaning of\n///   the resulting value is the same, even though the Rust type and technical\n///   representation might be different.  For example `-1_i8 as u8` is *lossless*,\n///   since `as` casting back can recover the original value, but that conversion\n///   is *not* available via `From` because `-1` and `255` are different conceptual\n///   values (despite being identical bit patterns technically).  But\n///   `f32: From<i16>` *is* available because `1_i16` and `1.0_f32` are conceptually\n///   the same real number (despite having very different bit patterns technically).\n///   `String: From<char>` is available because they're both *text*, but\n///   `String: From<u32>` is *not* available, since `1` (a number) and `\"1\"`\n///   (text) are too different.  (Converting values to text is instead covered\n///   by the [`Display`](crate::fmt::Display) trait.)\n///\n/// * The conversion is *obvious*: it's the only reasonable conversion between\n///   the two types.  Otherwise it's better to have it be a named method or\n///   constructor, like how [`str::as_bytes`] is a method and how integers have\n///   methods like [`u32::from_ne_bytes`], [`u32::from_le_bytes`], and\n///   [`u32::from_be_bytes`], none of which are `From` implementations.  Whereas\n///   there's only one reasonable way to wrap an [`Ipv6Addr`](crate::net::Ipv6Addr)\n///   into an [`IpAddr`](crate::net::IpAddr), thus `IpAddr: From<Ipv6Addr>` exists.\n///\n/// # Examples\n///\n/// [`String`] implements `From<&str>`:\n///\n/// An explicit conversion from a `&str` to a String is done as follows:\n///\n/// ```\n/// let string = \"hello\".to_string();\n/// let other_string = String::from(\"hello\");\n///\n/// assert_eq!(string, other_string);\n/// ```\n///\n/// While performing error handling it is often useful to implement `From` for your own error type.\n/// By converting underlying error types to our own custom error type that encapsulates the\n/// underlying error type, we can return a single error type without losing information on the\n/// underlying cause. The '?' operator automatically converts the underlying error type to our\n/// custom error type with `From::from`.\n///\n/// ```\n/// use std::fs;\n/// use std::io;\n/// use std::num;\n///\n/// enum CliError {\n///     IoError(io::Error),\n///     ParseError(num::ParseIntError),\n/// }\n///\n/// impl From<io::Error> for CliError {\n///     fn from(error: io::Error) -> Self {\n///         CliError::IoError(error)\n///     }\n/// }\n///\n/// impl From<num::ParseIntError> for CliError {\n///     fn from(error: num::ParseIntError) -> Self {\n///         CliError::ParseError(error)\n///     }\n/// }\n///\n/// fn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {\n///     let mut contents = fs::read_to_string(&file_name)?;\n///     let num: i32 = contents.trim().parse()?;\n///     Ok(num)\n/// }\n/// ```\n///\n/// [`String`]: ../../std/string/struct.String.html\n/// [`from`]: From::from\n/// [book]: ../../book/ch09-00-error-handling.html\n#[rustc_diagnostic_item = \"From\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_on_unimplemented(on(\n    all(_Self = \"&str\", T = \"alloc::string::String\"),\n    note = \"to coerce a `{T}` into a `{Self}`, use `&*` as a prefix\",\n))]\npub trait From<T>: Sized {\n    /// Converts to this type from the input type.\n    #[rustc_diagnostic_item = \"from_fn\"]\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    fn from(value: T) -> Self;\n}\n\n/// An attempted conversion that consumes `self`, which may or may not be\n/// expensive.\n///\n/// Library authors should usually not directly implement this trait,\n/// but should prefer implementing the [`TryFrom`] trait, which offers\n/// greater flexibility and provides an equivalent `TryInto`\n/// implementation for free, thanks to a blanket implementation in the\n/// standard library. For more information on this, see the\n/// documentation for [`Into`].\n///\n/// # Implementing `TryInto`\n///\n/// This suffers the same restrictions and reasoning as implementing\n/// [`Into`], see there for details.\n#[rustc_diagnostic_item = \"TryInto\"]\n#[stable(feature = \"try_from\", since = \"1.34.0\")]\npub trait TryInto<T>: Sized {\n    /// The type returned in the event of a conversion error.\n    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n    type Error;\n\n    /// Performs the conversion.\n    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n    fn try_into(self) -> Result<T, Self::Error>;\n}\n\n/// Simple and safe type conversions that may fail in a controlled\n/// way under some circumstances. It is the reciprocal of [`TryInto`].\n///\n/// This is useful when you are doing a type conversion that may\n/// trivially succeed but may also need special handling.\n/// For example, there is no way to convert an [`i64`] into an [`i32`]\n/// using the [`From`] trait, because an [`i64`] may contain a value\n/// that an [`i32`] cannot represent and so the conversion would lose data.\n/// This might be handled by truncating the [`i64`] to an [`i32`] or by\n/// simply returning [`i32::MAX`], or by some other method.  The [`From`]\n/// trait is intended for perfect conversions, so the `TryFrom` trait\n/// informs the programmer when a type conversion could go bad and lets\n/// them decide how to handle it.\n///\n/// # Generic Implementations\n///\n/// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n/// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n/// is implemented and cannot fail -- the associated `Error` type for\n/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n/// equivalent.\n///\n/// `TryFrom<T>` can be implemented as follows:\n///\n/// ```\n/// struct GreaterThanZero(i32);\n///\n/// impl TryFrom<i32> for GreaterThanZero {\n///     type Error = &'static str;\n///\n///     fn try_from(value: i32) -> Result<Self, Self::Error> {\n///         if value <= 0 {\n///             Err(\"GreaterThanZero only accepts values greater than zero!\")\n///         } else {\n///             Ok(GreaterThanZero(value))\n///         }\n///     }\n/// }\n/// ```\n///\n/// # Examples\n///\n/// As described, [`i32`] implements `TryFrom<`[`i64`]`>`:\n///\n/// ```\n/// let big_number = 1_000_000_000_000i64;\n/// // Silently truncates `big_number`, requires detecting\n/// // and handling the truncation after the fact.\n/// let smaller_number = big_number as i32;\n/// assert_eq!(smaller_number, -727379968);\n///\n/// // Returns an error because `big_number` is too big to\n/// // fit in an `i32`.\n/// let try_smaller_number = i32::try_from(big_number);\n/// assert!(try_smaller_number.is_err());\n///\n/// // Returns `Ok(3)`.\n/// let try_successful_smaller_number = i32::try_from(3);\n/// assert!(try_successful_smaller_number.is_ok());\n/// ```\n///\n/// [`try_from`]: TryFrom::try_from\n#[rustc_diagnostic_item = \"TryFrom\"]\n#[stable(feature = \"try_from\", since = \"1.34.0\")]\npub trait TryFrom<T>: Sized {\n    /// The type returned in the event of a conversion error.\n    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n    type Error;\n\n    /// Performs the conversion.\n    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n    #[rustc_diagnostic_item = \"try_from_fn\"]\n    fn try_from(value: T) -> Result<Self, Self::Error>;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// GENERIC IMPLS\n////////////////////////////////////////////////////////////////////////////////\n\n// As lifts over &\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized, U: ?Sized> AsRef<U> for &T\nwhere\n    T: AsRef<U>,\n{\n    #[inline]\n    fn as_ref(&self) -> &U {\n        <T as AsRef<U>>::as_ref(*self)\n    }\n}\n\n// As lifts over &mut\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T\nwhere\n    T: AsRef<U>,\n{\n    #[inline]\n    fn as_ref(&self) -> &U {\n        <T as AsRef<U>>::as_ref(*self)\n    }\n}\n\n// FIXME (#45742): replace the above impls for &/&mut with the following more general one:\n// // As lifts over Deref\n// impl<D: ?Sized + Deref<Target: AsRef<U>>, U: ?Sized> AsRef<U> for D {\n//     fn as_ref(&self) -> &U {\n//         self.deref().as_ref()\n//     }\n// }\n\n// AsMut lifts over &mut\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T\nwhere\n    T: AsMut<U>,\n{\n    #[inline]\n    fn as_mut(&mut self) -> &mut U {\n        (*self).as_mut()\n    }\n}\n\n// FIXME (#45742): replace the above impl for &mut with the following more general one:\n// // AsMut lifts over DerefMut\n// impl<D: ?Sized + Deref<Target: AsMut<U>>, U: ?Sized> AsMut<U> for D {\n//     fn as_mut(&mut self) -> &mut U {\n//         self.deref_mut().as_mut()\n//     }\n// }\n\n// From implies Into\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T, U> Into<U> for T\nwhere\n    U: From<T>,\n{\n    /// Calls `U::from(self)`.\n    ///\n    /// That is, this conversion is whatever the implementation of\n    /// <code>[From]&lt;T&gt; for U</code> chooses to do.\n    #[inline]\n    #[track_caller]\n    fn into(self) -> U {\n        U::from(self)\n    }\n}\n\n// From (and thus Into) is reflexive\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> From<T> for T {\n    /// Returns the argument unchanged.\n    #[inline(always)]\n    fn from(t: T) -> T {\n        t\n    }\n}\n\n/// **Stability note:** This impl does not yet exist, but we are\n/// \"reserving space\" to add it in the future. See\n/// [rust-lang/rust#64715][#64715] for details.\n///\n/// [#64715]: https://github.com/rust-lang/rust/issues/64715\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n#[allow(unused_attributes)] // FIXME(#58633): do a principled fix instead.\n#[rustc_reservation_impl = \"permitting this impl would forbid us from adding \\\n                            `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\"]\nimpl<T> From<!> for T {\n    fn from(t: !) -> T {\n        t\n    }\n}\n\n// TryFrom implies TryInto\n#[stable(feature = \"try_from\", since = \"1.34.0\")]\nimpl<T, U> TryInto<U> for T\nwhere\n    U: TryFrom<T>,\n{\n    type Error = U::Error;\n\n    #[inline]\n    fn try_into(self) -> Result<U, U::Error> {\n        U::try_from(self)\n    }\n}\n\n// Infallible conversions are semantically equivalent to fallible conversions\n// with an uninhabited error type.\n#[stable(feature = \"try_from\", since = \"1.34.0\")]\nimpl<T, U> TryFrom<U> for T\nwhere\n    U: Into<T>,\n{\n    type Error = Infallible;\n\n    #[inline]\n    fn try_from(value: U) -> Result<Self, Self::Error> {\n        Ok(U::into(value))\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// CONCRETE IMPLS\n////////////////////////////////////////////////////////////////////////////////\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> AsRef<[T]> for [T] {\n    #[inline(always)]\n    fn as_ref(&self) -> &[T] {\n        self\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<T> AsMut<[T]> for [T] {\n    #[inline(always)]\n    fn as_mut(&mut self) -> &mut [T] {\n        self\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl AsRef<str> for str {\n    #[inline(always)]\n    fn as_ref(&self) -> &str {\n        self\n    }\n}\n\n#[stable(feature = \"as_mut_str_for_str\", since = \"1.51.0\")]\nimpl AsMut<str> for str {\n    #[inline(always)]\n    fn as_mut(&mut self) -> &mut str {\n        self\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// THE NO-ERROR ERROR TYPE\n////////////////////////////////////////////////////////////////////////////////\n\n/// The error type for errors that can never happen.\n///\n/// Since this enum has no variant, a value of this type can never actually exist.\n/// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n/// to indicate that the result is always [`Ok`].\n///\n/// For example, the [`TryFrom`] trait (conversion that returns a [`Result`])\n/// has a blanket implementation for all types where a reverse [`Into`] implementation exists.\n///\n/// ```ignore (illustrates std code, duplicating the impl in a doctest would be an error)\n/// impl<T, U> TryFrom<U> for T where U: Into<T> {\n///     type Error = Infallible;\n///\n///     fn try_from(value: U) -> Result<Self, Infallible> {\n///         Ok(U::into(value))  // Never returns `Err`\n///     }\n/// }\n/// ```\n///\n/// # Future compatibility\n///\n/// This enum has the same role as [the `!` “never” type][never],\n/// which is unstable in this version of Rust.\n/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n///\n/// ```ignore (illustrates future std change)\n/// pub type Infallible = !;\n/// ```\n///\n/// … and eventually deprecate `Infallible`.\n///\n/// However there is one case where `!` syntax can be used\n/// before `!` is stabilized as a full-fledged type: in the position of a function’s return type.\n/// Specifically, it is possible to have implementations for two different function pointer types:\n///\n/// ```\n/// trait MyTrait {}\n/// impl MyTrait for fn() -> ! {}\n/// impl MyTrait for fn() -> std::convert::Infallible {}\n/// ```\n///\n/// With `Infallible` being an enum, this code is valid.\n/// However when `Infallible` becomes an alias for the never type,\n/// the two `impl`s will start to overlap\n/// and therefore will be disallowed by the language’s trait coherence rules.\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n#[derive(Copy)]\npub enum Infallible {}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl Clone for Infallible {\n    fn clone(&self) -> Infallible {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl fmt::Debug for Infallible {\n    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl fmt::Display for Infallible {\n    fn fmt(&self, _: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"str_parse_error2\", since = \"1.8.0\")]\nimpl Error for Infallible {\n    fn description(&self) -> &str {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl PartialEq for Infallible {\n    fn eq(&self, _: &Infallible) -> bool {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl Eq for Infallible {}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl PartialOrd for Infallible {\n    fn partial_cmp(&self, _other: &Self) -> Option<crate::cmp::Ordering> {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl Ord for Infallible {\n    fn cmp(&self, _other: &Self) -> crate::cmp::Ordering {\n        match *self {}\n    }\n}\n\n#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\nimpl From<!> for Infallible {\n    #[inline]\n    fn from(x: !) -> Self {\n        x\n    }\n}\n\n#[stable(feature = \"convert_infallible_hash\", since = \"1.44.0\")]\nimpl Hash for Infallible {\n    fn hash<H: Hasher>(&self, _: &mut H) {\n        match *self {}\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/convert/mod.rs`.\"><title>mod.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\" class=\"selected\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Traits for conversions between types.\n//!\n//! The traits in this module provide a way to convert from one type to another type.\n//! Each trait serves a different purpose:\n//!\n//! - Implement the [`AsRef`] trait for cheap reference-to-reference conversions\n//! - Implement the [`AsMut`] trait for cheap mutable-to-mutable conversions\n//! - Implement the [`From`] trait for consuming value-to-value conversions\n//! - Implement the [`Into`] trait for consuming value-to-value conversions to types\n//!   outside the current crate\n//! - The [`TryFrom`] and [`TryInto`] traits behave like [`From`] and [`Into`],\n//!   but should be implemented when the conversion can fail.\n//!\n//! The traits in this module are often used as trait bounds for generic functions such that to\n//! arguments of multiple types are supported. See the documentation of each trait for examples.\n//!\n//! As a library author, you should always prefer implementing [`From&lt;T&gt;`][`From`] or\n//! [`TryFrom&lt;T&gt;`][`TryFrom`] rather than [`Into&lt;U&gt;`][`Into`] or [`TryInto&lt;U&gt;`][`TryInto`],\n//! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n//! blanket implementation in the standard library. When targeting a version prior to Rust 1.41, it\n//! may be necessary to implement [`Into`] or [`TryInto`] directly when converting to a type\n//! outside the current crate.\n//!\n//! # Generic Implementations\n//!\n//! - [`AsRef`] and [`AsMut`] auto-dereference if the inner type is a reference\n//!   (but not generally for all [dereferenceable types][core::ops::Deref])\n//! - [`From`]`&lt;U&gt; for T` implies [`Into`]`&lt;T&gt; for U`\n//! - [`TryFrom`]`&lt;U&gt; for T` implies [`TryInto`]`&lt;T&gt; for U`\n//! - [`From`] and [`Into`] are reflexive, which means that all types can\n//!   `into` themselves and `from` themselves\n//!\n//! See each trait for usage examples.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::error::Error;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::hash::{Hash, Hasher};\n\n<span class=\"kw\">mod </span>num;\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"convert_float_to_int\"</span>, issue = <span class=\"string\">\"67057\"</span>)]\n</span><span class=\"kw\">pub use </span>num::FloatToInt;\n\n<span class=\"doccomment\">/// The identity function.\n///\n/// Two things are important to note about this function:\n///\n/// - It is not always equivalent to a closure like `|x| x`, since the\n///   closure may coerce `x` into a different type.\n///\n/// - It moves the input `x` passed to the function.\n///\n/// While it might seem strange to have a function that just returns back the\n/// input, there are some interesting uses.\n///\n/// # Examples\n///\n/// Using `identity` to do nothing in a sequence of other, interesting,\n/// functions:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// fn manipulation(x: u32) -&gt; u32 {\n///     // Let's pretend that adding one is an interesting function.\n///     x + 1\n/// }\n///\n/// let _arr = &amp;[identity, manipulation];\n/// ```\n///\n/// Using `identity` as a \"do nothing\" base case in a conditional:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// # let condition = true;\n/// #\n/// # fn manipulation(x: u32) -&gt; u32 { x + 1 }\n/// #\n/// let do_stuff = if condition { manipulation } else { identity };\n///\n/// // Do more interesting stuff...\n///\n/// let _results = do_stuff(42);\n/// ```\n///\n/// Using `identity` to keep the `Some` variants of an iterator of `Option&lt;T&gt;`:\n///\n/// ```rust\n/// use std::convert::identity;\n///\n/// let iter = [Some(1), None, Some(3)].into_iter();\n/// let filtered = iter.filter_map(identity).collect::&lt;Vec&lt;_&gt;&gt;();\n/// assert_eq!(vec![1, 3], filtered);\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_id\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_identity\"</span>, since = <span class=\"string\">\"1.33.0\"</span>)]\n#[inline(always)]\n#[rustc_diagnostic_item = <span class=\"string\">\"convert_identity\"</span>]\n</span><span class=\"kw\">pub const fn </span>identity&lt;T&gt;(x: T) -&gt; T {\n    x\n}\n\n<span class=\"doccomment\">/// Used to do a cheap reference-to-reference conversion.\n///\n/// This trait is similar to [`AsMut`] which is used for converting between mutable references.\n/// If you need to do a costly conversion it is better to implement [`From`] with type\n/// `&amp;T` or write a custom function.\n///\n/// # Relation to `Borrow`\n///\n/// `AsRef` has the same signature as [`Borrow`], but [`Borrow`] is different in a few aspects:\n///\n/// - Unlike `AsRef`, [`Borrow`] has a blanket impl for any `T`, and can be used to accept either\n///   a reference or a value. (See also note on `AsRef`'s reflexibility below.)\n/// - [`Borrow`] also requires that [`Hash`], [`Eq`] and [`Ord`] for a borrowed value are\n///   equivalent to those of the owned value. For this reason, if you want to\n///   borrow only a single field of a struct you can implement `AsRef`, but not [`Borrow`].\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use a\n/// dedicated method which returns an [`Option&lt;T&gt;`] or a [`Result&lt;T, E&gt;`].\n///\n/// # Generic Implementations\n///\n/// `AsRef` auto-dereferences if the inner type is a reference or a mutable reference\n/// (e.g.: `foo.as_ref()` will work the same if `foo` has type `&amp;mut Foo` or `&amp;&amp;mut Foo`).\n///\n/// Note that due to historic reasons, the above currently does not hold generally for all\n/// [dereferenceable types], e.g. `foo.as_ref()` will *not* work the same as\n/// `Box::new(foo).as_ref()`. Instead, many smart pointers provide an `as_ref` implementation which\n/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n/// reference-to-reference conversion for that value). However, [`AsRef::as_ref`] should not be\n/// used for the sole purpose of dereferencing; instead ['`Deref` coercion'] can be used:\n///\n/// [dereferenceable types]: core::ops::Deref\n/// [pointed-to value]: core::ops::Deref::Target\n/// ['`Deref` coercion']: core::ops::Deref#deref-coercion\n///\n/// ```\n/// let x = Box::new(5i32);\n/// // Avoid this:\n/// // let y: &amp;i32 = x.as_ref();\n/// // Better just write:\n/// let y: &amp;i32 = &amp;x;\n/// ```\n///\n/// Types which implement [`Deref`] should consider implementing `AsRef&lt;T&gt;` as follows:\n///\n/// [`Deref`]: core::ops::Deref\n///\n/// ```\n/// # use core::ops::Deref;\n/// # struct SomeType;\n/// # impl Deref for SomeType {\n/// #     type Target = [u8];\n/// #     fn deref(&amp;self) -&gt; &amp;[u8] {\n/// #         &amp;[]\n/// #     }\n/// # }\n/// impl&lt;T&gt; AsRef&lt;T&gt; for SomeType\n/// where\n///     T: ?Sized,\n///     &lt;SomeType as Deref&gt;::Target: AsRef&lt;T&gt;,\n/// {\n///     fn as_ref(&amp;self) -&gt; &amp;T {\n///         self.deref().as_ref()\n///     }\n/// }\n/// ```\n///\n/// # Reflexivity\n///\n/// Ideally, `AsRef` would be reflexive, i.e. there would be an `impl&lt;T: ?Sized&gt; AsRef&lt;T&gt; for T`\n/// with [`as_ref`] simply returning its argument unchanged.\n/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n/// Rust's type system (it would be overlapping with another existing blanket implementation for\n/// `&amp;T where T: AsRef&lt;U&gt;` which allows `AsRef` to auto-dereference, see \"Generic Implementations\"\n/// above).\n///\n/// [`as_ref`]: AsRef::as_ref\n///\n/// A trivial implementation of `AsRef&lt;T&gt; for T` must be added explicitly for a particular type `T`\n/// where needed or desired. Note, however, that not all types from `std` contain such an\n/// implementation, and those cannot be added by external code due to orphan rules.\n///\n/// # Examples\n///\n/// By using trait bounds we can accept arguments of different types as long as they can be\n/// converted to the specified type `T`.\n///\n/// For example: By creating a generic function that takes an `AsRef&lt;str&gt;` we express that we\n/// want to accept all references that can be converted to [`&amp;str`] as an argument.\n/// Since both [`String`] and [`&amp;str`] implement `AsRef&lt;str&gt;` we can accept both as input argument.\n///\n/// [`&amp;str`]: primitive@str\n/// [`Borrow`]: crate::borrow::Borrow\n/// [`Eq`]: crate::cmp::Eq\n/// [`Ord`]: crate::cmp::Ord\n/// [`String`]: ../../std/string/struct.String.html\n///\n/// ```\n/// fn is_hello&lt;T: AsRef&lt;str&gt;&gt;(s: T) {\n///    assert_eq!(\"hello\", s.as_ref());\n/// }\n///\n/// let s = \"hello\";\n/// is_hello(s);\n///\n/// let s = \"hello\".to_string();\n/// is_hello(s);\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"AsRef\"</span>)]\n</span><span class=\"kw\">pub trait </span>AsRef&lt;T: <span class=\"question-mark\">?</span>Sized&gt; {\n    <span class=\"doccomment\">/// Converts this type into a shared reference of the (usually inferred) input type.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>T;\n}\n\n<span class=\"doccomment\">/// Used to do a cheap mutable-to-mutable reference conversion.\n///\n/// This trait is similar to [`AsRef`] but used for converting between mutable\n/// references. If you need to do a costly conversion it is better to\n/// implement [`From`] with type `&amp;mut T` or write a custom function.\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use a\n/// dedicated method which returns an [`Option&lt;T&gt;`] or a [`Result&lt;T, E&gt;`].\n///\n/// # Generic Implementations\n///\n/// `AsMut` auto-dereferences if the inner type is a mutable reference\n/// (e.g.: `foo.as_mut()` will work the same if `foo` has type `&amp;mut Foo` or `&amp;mut &amp;mut Foo`).\n///\n/// Note that due to historic reasons, the above currently does not hold generally for all\n/// [mutably dereferenceable types], e.g. `foo.as_mut()` will *not* work the same as\n/// `Box::new(foo).as_mut()`. Instead, many smart pointers provide an `as_mut` implementation which\n/// simply returns a reference to the [pointed-to value] (but do not perform a cheap\n/// reference-to-reference conversion for that value). However, [`AsMut::as_mut`] should not be\n/// used for the sole purpose of mutable dereferencing; instead ['`Deref` coercion'] can be used:\n///\n/// [mutably dereferenceable types]: core::ops::DerefMut\n/// [pointed-to value]: core::ops::Deref::Target\n/// ['`Deref` coercion']: core::ops::DerefMut#mutable-deref-coercion\n///\n/// ```\n/// let mut x = Box::new(5i32);\n/// // Avoid this:\n/// // let y: &amp;mut i32 = x.as_mut();\n/// // Better just write:\n/// let y: &amp;mut i32 = &amp;mut x;\n/// ```\n///\n/// Types which implement [`DerefMut`] should consider to add an implementation of `AsMut&lt;T&gt;` as\n/// follows:\n///\n/// [`DerefMut`]: core::ops::DerefMut\n///\n/// ```\n/// # use core::ops::{Deref, DerefMut};\n/// # struct SomeType;\n/// # impl Deref for SomeType {\n/// #     type Target = [u8];\n/// #     fn deref(&amp;self) -&gt; &amp;[u8] {\n/// #         &amp;[]\n/// #     }\n/// # }\n/// # impl DerefMut for SomeType {\n/// #     fn deref_mut(&amp;mut self) -&gt; &amp;mut [u8] {\n/// #         &amp;mut []\n/// #     }\n/// # }\n/// impl&lt;T&gt; AsMut&lt;T&gt; for SomeType\n/// where\n///     &lt;SomeType as Deref&gt;::Target: AsMut&lt;T&gt;,\n/// {\n///     fn as_mut(&amp;mut self) -&gt; &amp;mut T {\n///         self.deref_mut().as_mut()\n///     }\n/// }\n/// ```\n///\n/// # Reflexivity\n///\n/// Ideally, `AsMut` would be reflexive, i.e. there would be an `impl&lt;T: ?Sized&gt; AsMut&lt;T&gt; for T`\n/// with [`as_mut`] simply returning its argument unchanged.\n/// Such a blanket implementation is currently *not* provided due to technical restrictions of\n/// Rust's type system (it would be overlapping with another existing blanket implementation for\n/// `&amp;mut T where T: AsMut&lt;U&gt;` which allows `AsMut` to auto-dereference, see \"Generic\n/// Implementations\" above).\n///\n/// [`as_mut`]: AsMut::as_mut\n///\n/// A trivial implementation of `AsMut&lt;T&gt; for T` must be added explicitly for a particular type `T`\n/// where needed or desired. Note, however, that not all types from `std` contain such an\n/// implementation, and those cannot be added by external code due to orphan rules.\n///\n/// # Examples\n///\n/// Using `AsMut` as trait bound for a generic function, we can accept all mutable references that\n/// can be converted to type `&amp;mut T`. Unlike [dereference], which has a single [target type],\n/// there can be multiple implementations of `AsMut` for a type. In particular, `Vec&lt;T&gt;` implements\n/// both `AsMut&lt;Vec&lt;T&gt;&gt;` and `AsMut&lt;[T]&gt;`.\n///\n/// In the following, the example functions `caesar` and `null_terminate` provide a generic\n/// interface which work with any type that can be converted by cheap mutable-to-mutable conversion\n/// into a byte slice (`[u8]`) or byte vector (`Vec&lt;u8&gt;`), respectively.\n///\n/// [dereference]: core::ops::DerefMut\n/// [target type]: core::ops::Deref::Target\n///\n/// ```\n/// struct Document {\n///     info: String,\n///     content: Vec&lt;u8&gt;,\n/// }\n///\n/// impl&lt;T: ?Sized&gt; AsMut&lt;T&gt; for Document\n/// where\n///     Vec&lt;u8&gt;: AsMut&lt;T&gt;,\n/// {\n///     fn as_mut(&amp;mut self) -&gt; &amp;mut T {\n///         self.content.as_mut()\n///     }\n/// }\n///\n/// fn caesar&lt;T: AsMut&lt;[u8]&gt;&gt;(data: &amp;mut T, key: u8) {\n///     for byte in data.as_mut() {\n///         *byte = byte.wrapping_add(key);\n///     }\n/// }\n///\n/// fn null_terminate&lt;T: AsMut&lt;Vec&lt;u8&gt;&gt;&gt;(data: &amp;mut T) {\n///     // Using a non-generic inner function, which contains most of the\n///     // functionality, helps to minimize monomorphization overhead.\n///     fn doit(data: &amp;mut Vec&lt;u8&gt;) {\n///         let len = data.len();\n///         if len == 0 || data[len-1] != 0 {\n///             data.push(0);\n///         }\n///     }\n///     doit(data.as_mut());\n/// }\n///\n/// fn main() {\n///     let mut v: Vec&lt;u8&gt; = vec![1, 2, 3];\n///     caesar(&amp;mut v, 5);\n///     assert_eq!(v, [6, 7, 8]);\n///     null_terminate(&amp;mut v);\n///     assert_eq!(v, [6, 7, 8, 0]);\n///     let mut doc = Document {\n///         info: String::from(\"Example\"),\n///         content: vec![17, 19, 8],\n///     };\n///     caesar(&amp;mut doc, 1);\n///     assert_eq!(doc.content, [18, 20, 9]);\n///     null_terminate(&amp;mut doc);\n///     assert_eq!(doc.content, [18, 20, 9, 0]);\n/// }\n/// ```\n///\n/// Note, however, that APIs don't need to be generic. In many cases taking a `&amp;mut [u8]` or\n/// `&amp;mut Vec&lt;u8&gt;`, for example, is the better choice (callers need to pass the correct type then).\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"AsMut\"</span>)]\n</span><span class=\"kw\">pub trait </span>AsMut&lt;T: <span class=\"question-mark\">?</span>Sized&gt; {\n    <span class=\"doccomment\">/// Converts this type into a mutable reference of the (usually inferred) input type.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>T;\n}\n\n<span class=\"doccomment\">/// A value-to-value conversion that consumes the input value. The\n/// opposite of [`From`].\n///\n/// One should avoid implementing [`Into`] and implement [`From`] instead.\n/// Implementing [`From`] automatically provides one with an implementation of [`Into`]\n/// thanks to the blanket implementation in the standard library.\n///\n/// Prefer using [`Into`] over [`From`] when specifying trait bounds on a generic function\n/// to ensure that types that only implement [`Into`] can be used as well.\n///\n/// **Note: This trait must not fail**. If the conversion can fail, use [`TryInto`].\n///\n/// # Generic Implementations\n///\n/// - [`From`]`&lt;T&gt; for U` implies `Into&lt;U&gt; for T`\n/// - [`Into`] is reflexive, which means that `Into&lt;T&gt; for T` is implemented\n///\n/// # Implementing [`Into`] for conversions to external types in old versions of Rust\n///\n/// Prior to Rust 1.41, if the destination type was not part of the current crate\n/// then you couldn't implement [`From`] directly.\n/// For example, take this code:\n///\n/// ```\n/// # #![allow(non_local_definitions)]\n/// struct Wrapper&lt;T&gt;(Vec&lt;T&gt;);\n/// impl&lt;T&gt; From&lt;Wrapper&lt;T&gt;&gt; for Vec&lt;T&gt; {\n///     fn from(w: Wrapper&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n///         w.0\n///     }\n/// }\n/// ```\n/// This will fail to compile in older versions of the language because Rust's orphaning rules\n/// used to be a little bit more strict. To bypass this, you could implement [`Into`] directly:\n///\n/// ```\n/// struct Wrapper&lt;T&gt;(Vec&lt;T&gt;);\n/// impl&lt;T&gt; Into&lt;Vec&lt;T&gt;&gt; for Wrapper&lt;T&gt; {\n///     fn into(self) -&gt; Vec&lt;T&gt; {\n///         self.0\n///     }\n/// }\n/// ```\n///\n/// It is important to understand that [`Into`] does not provide a [`From`] implementation\n/// (as [`From`] does with [`Into`]). Therefore, you should always try to implement [`From`]\n/// and then fall back to [`Into`] if [`From`] can't be implemented.\n///\n/// # Examples\n///\n/// [`String`] implements [`Into`]`&lt;`[`Vec`]`&lt;`[`u8`]`&gt;&gt;`:\n///\n/// In order to express that we want a generic function to take all arguments that can be\n/// converted to a specified type `T`, we can use a trait bound of [`Into`]`&lt;T&gt;`.\n/// For example: The function `is_hello` takes all arguments that can be converted into a\n/// [`Vec`]`&lt;`[`u8`]`&gt;`.\n///\n/// ```\n/// fn is_hello&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(s: T) {\n///    let bytes = b\"hello\".to_vec();\n///    assert_eq!(bytes, s.into());\n/// }\n///\n/// let s = \"hello\".to_string();\n/// is_hello(s);\n/// ```\n///\n/// [`String`]: ../../std/string/struct.String.html\n/// [`Vec`]: ../../std/vec/struct.Vec.html\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"Into\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>Into&lt;T&gt;: Sized {\n    <span class=\"doccomment\">/// Converts this type into the (usually inferred) input type.\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>into(<span class=\"self\">self</span>) -&gt; T;\n}\n\n<span class=\"doccomment\">/// Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n/// [`Into`].\n///\n/// One should always prefer implementing `From` over [`Into`]\n/// because implementing `From` automatically provides one with an implementation of [`Into`]\n/// thanks to the blanket implementation in the standard library.\n///\n/// Only implement [`Into`] when targeting a version prior to Rust 1.41 and converting to a type\n/// outside the current crate.\n/// `From` was not able to do these types of conversions in earlier versions because of Rust's\n/// orphaning rules.\n/// See [`Into`] for more details.\n///\n/// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function.\n/// This way, types that directly implement [`Into`] can be used as arguments as well.\n///\n/// The `From` trait is also very useful when performing error handling. When constructing a function\n/// that is capable of failing, the return type will generally be of the form `Result&lt;T, E&gt;`.\n/// `From` simplifies error handling by allowing a function to return a single error type\n/// that encapsulates multiple error types. See the \"Examples\" section and [the book][book] for more\n/// details.\n///\n/// **Note: This trait must not fail**. The `From` trait is intended for perfect conversions.\n/// If the conversion can fail or is not perfect, use [`TryFrom`].\n///\n/// # Generic Implementations\n///\n/// - `From&lt;T&gt; for U` implies [`Into`]`&lt;U&gt; for T`\n/// - `From` is reflexive, which means that `From&lt;T&gt; for T` is implemented\n///\n/// # When to implement `From`\n///\n/// While there's no technical restrictions on which conversions can be done using\n/// a `From` implementation, the general expectation is that the conversions\n/// should typically be restricted as follows:\n///\n/// * The conversion is *infallible*: if the conversion can fail, use [`TryFrom`]\n///   instead; don't provide a `From` impl that panics.\n///\n/// * The conversion is *lossless*: semantically, it should not lose or discard\n///   information. For example, `i32: From&lt;u16&gt;` exists, where the original\n///   value can be recovered using `u16: TryFrom&lt;i32&gt;`.  And `String: From&lt;&amp;str&gt;`\n///   exists, where you can get something equivalent to the original value via\n///   `Deref`.  But `From` cannot be used to convert from `u32` to `u16`, since\n///   that cannot succeed in a lossless way.  (There's some wiggle room here for\n///   information not considered semantically relevant.  For example,\n///   `Box&lt;[T]&gt;: From&lt;Vec&lt;T&gt;&gt;` exists even though it might not preserve capacity,\n///   like how two vectors can be equal despite differing capacities.)\n///\n/// * The conversion is *value-preserving*: the conceptual kind and meaning of\n///   the resulting value is the same, even though the Rust type and technical\n///   representation might be different.  For example `-1_i8 as u8` is *lossless*,\n///   since `as` casting back can recover the original value, but that conversion\n///   is *not* available via `From` because `-1` and `255` are different conceptual\n///   values (despite being identical bit patterns technically).  But\n///   `f32: From&lt;i16&gt;` *is* available because `1_i16` and `1.0_f32` are conceptually\n///   the same real number (despite having very different bit patterns technically).\n///   `String: From&lt;char&gt;` is available because they're both *text*, but\n///   `String: From&lt;u32&gt;` is *not* available, since `1` (a number) and `\"1\"`\n///   (text) are too different.  (Converting values to text is instead covered\n///   by the [`Display`](crate::fmt::Display) trait.)\n///\n/// * The conversion is *obvious*: it's the only reasonable conversion between\n///   the two types.  Otherwise it's better to have it be a named method or\n///   constructor, like how [`str::as_bytes`] is a method and how integers have\n///   methods like [`u32::from_ne_bytes`], [`u32::from_le_bytes`], and\n///   [`u32::from_be_bytes`], none of which are `From` implementations.  Whereas\n///   there's only one reasonable way to wrap an [`Ipv6Addr`](crate::net::Ipv6Addr)\n///   into an [`IpAddr`](crate::net::IpAddr), thus `IpAddr: From&lt;Ipv6Addr&gt;` exists.\n///\n/// # Examples\n///\n/// [`String`] implements `From&lt;&amp;str&gt;`:\n///\n/// An explicit conversion from a `&amp;str` to a String is done as follows:\n///\n/// ```\n/// let string = \"hello\".to_string();\n/// let other_string = String::from(\"hello\");\n///\n/// assert_eq!(string, other_string);\n/// ```\n///\n/// While performing error handling it is often useful to implement `From` for your own error type.\n/// By converting underlying error types to our own custom error type that encapsulates the\n/// underlying error type, we can return a single error type without losing information on the\n/// underlying cause. The '?' operator automatically converts the underlying error type to our\n/// custom error type with `From::from`.\n///\n/// ```\n/// use std::fs;\n/// use std::io;\n/// use std::num;\n///\n/// enum CliError {\n///     IoError(io::Error),\n///     ParseError(num::ParseIntError),\n/// }\n///\n/// impl From&lt;io::Error&gt; for CliError {\n///     fn from(error: io::Error) -&gt; Self {\n///         CliError::IoError(error)\n///     }\n/// }\n///\n/// impl From&lt;num::ParseIntError&gt; for CliError {\n///     fn from(error: num::ParseIntError) -&gt; Self {\n///         CliError::ParseError(error)\n///     }\n/// }\n///\n/// fn open_and_parse_file(file_name: &amp;str) -&gt; Result&lt;i32, CliError&gt; {\n///     let mut contents = fs::read_to_string(&amp;file_name)?;\n///     let num: i32 = contents.trim().parse()?;\n///     Ok(num)\n/// }\n/// ```\n///\n/// [`String`]: ../../std/string/struct.String.html\n/// [`from`]: From::from\n/// [book]: ../../book/ch09-00-error-handling.html\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"From\"</span>]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_on_unimplemented(on(\n    all(_Self = <span class=\"string\">\"&amp;str\"</span>, T = <span class=\"string\">\"alloc::string::String\"</span>),\n    note = <span class=\"string\">\"to coerce a `{T}` into a `{Self}`, use `&amp;*` as a prefix\"</span>,\n))]\n</span><span class=\"kw\">pub trait </span>From&lt;T&gt;: Sized {\n    <span class=\"doccomment\">/// Converts to this type from the input type.\n    </span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"from_fn\"</span>]\n    #[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">fn </span>from(value: T) -&gt; <span class=\"self\">Self</span>;\n}\n\n<span class=\"doccomment\">/// An attempted conversion that consumes `self`, which may or may not be\n/// expensive.\n///\n/// Library authors should usually not directly implement this trait,\n/// but should prefer implementing the [`TryFrom`] trait, which offers\n/// greater flexibility and provides an equivalent `TryInto`\n/// implementation for free, thanks to a blanket implementation in the\n/// standard library. For more information on this, see the\n/// documentation for [`Into`].\n///\n/// # Implementing `TryInto`\n///\n/// This suffers the same restrictions and reasoning as implementing\n/// [`Into`], see there for details.\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"TryInto\"</span>]\n#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>TryInto&lt;T&gt;: Sized {\n    <span class=\"doccomment\">/// The type returned in the event of a conversion error.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n    </span><span class=\"kw\">type </span>Error;\n\n    <span class=\"doccomment\">/// Performs the conversion.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n    </span><span class=\"kw\">fn </span>try_into(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;T, <span class=\"self\">Self</span>::Error&gt;;\n}\n\n<span class=\"doccomment\">/// Simple and safe type conversions that may fail in a controlled\n/// way under some circumstances. It is the reciprocal of [`TryInto`].\n///\n/// This is useful when you are doing a type conversion that may\n/// trivially succeed but may also need special handling.\n/// For example, there is no way to convert an [`i64`] into an [`i32`]\n/// using the [`From`] trait, because an [`i64`] may contain a value\n/// that an [`i32`] cannot represent and so the conversion would lose data.\n/// This might be handled by truncating the [`i64`] to an [`i32`] or by\n/// simply returning [`i32::MAX`], or by some other method.  The [`From`]\n/// trait is intended for perfect conversions, so the `TryFrom` trait\n/// informs the programmer when a type conversion could go bad and lets\n/// them decide how to handle it.\n///\n/// # Generic Implementations\n///\n/// - `TryFrom&lt;T&gt; for U` implies [`TryInto`]`&lt;U&gt; for T`\n/// - [`try_from`] is reflexive, which means that `TryFrom&lt;T&gt; for T`\n/// is implemented and cannot fail -- the associated `Error` type for\n/// calling `T::try_from()` on a value of type `T` is [`Infallible`].\n/// When the [`!`] type is stabilized [`Infallible`] and [`!`] will be\n/// equivalent.\n///\n/// `TryFrom&lt;T&gt;` can be implemented as follows:\n///\n/// ```\n/// struct GreaterThanZero(i32);\n///\n/// impl TryFrom&lt;i32&gt; for GreaterThanZero {\n///     type Error = &amp;'static str;\n///\n///     fn try_from(value: i32) -&gt; Result&lt;Self, Self::Error&gt; {\n///         if value &lt;= 0 {\n///             Err(\"GreaterThanZero only accepts values greater than zero!\")\n///         } else {\n///             Ok(GreaterThanZero(value))\n///         }\n///     }\n/// }\n/// ```\n///\n/// # Examples\n///\n/// As described, [`i32`] implements `TryFrom&lt;`[`i64`]`&gt;`:\n///\n/// ```\n/// let big_number = 1_000_000_000_000i64;\n/// // Silently truncates `big_number`, requires detecting\n/// // and handling the truncation after the fact.\n/// let smaller_number = big_number as i32;\n/// assert_eq!(smaller_number, -727379968);\n///\n/// // Returns an error because `big_number` is too big to\n/// // fit in an `i32`.\n/// let try_smaller_number = i32::try_from(big_number);\n/// assert!(try_smaller_number.is_err());\n///\n/// // Returns `Ok(3)`.\n/// let try_successful_smaller_number = i32::try_from(3);\n/// assert!(try_successful_smaller_number.is_ok());\n/// ```\n///\n/// [`try_from`]: TryFrom::try_from\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"TryFrom\"</span>]\n#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">pub trait </span>TryFrom&lt;T&gt;: Sized {\n    <span class=\"doccomment\">/// The type returned in the event of a conversion error.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n    </span><span class=\"kw\">type </span>Error;\n\n    <span class=\"doccomment\">/// Performs the conversion.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n    #[rustc_diagnostic_item = <span class=\"string\">\"try_from_fn\"</span>]\n    </span><span class=\"kw\">fn </span>try_from(value: T) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, <span class=\"self\">Self</span>::Error&gt;;\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// GENERIC IMPLS\n////////////////////////////////////////////////////////////////////////////////\n\n// As lifts over &amp;\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized, U: <span class=\"question-mark\">?</span>Sized&gt; AsRef&lt;U&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>T\n<span class=\"kw\">where\n    </span>T: AsRef&lt;U&gt;,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>U {\n        &lt;T <span class=\"kw\">as </span>AsRef&lt;U&gt;&gt;::as_ref(<span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"comment\">// As lifts over &amp;mut\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized, U: <span class=\"question-mark\">?</span>Sized&gt; AsRef&lt;U&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>T\n<span class=\"kw\">where\n    </span>T: AsRef&lt;U&gt;,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>U {\n        &lt;T <span class=\"kw\">as </span>AsRef&lt;U&gt;&gt;::as_ref(<span class=\"kw-2\">*</span><span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"comment\">// FIXME (#45742): replace the above impls for &amp;/&amp;mut with the following more general one:\n// // As lifts over Deref\n// impl&lt;D: ?Sized + Deref&lt;Target: AsRef&lt;U&gt;&gt;, U: ?Sized&gt; AsRef&lt;U&gt; for D {\n//     fn as_ref(&amp;self) -&gt; &amp;U {\n//         self.deref().as_ref()\n//     }\n// }\n\n// AsMut lifts over &amp;mut\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized, U: <span class=\"question-mark\">?</span>Sized&gt; AsMut&lt;U&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;mut </span>T\n<span class=\"kw\">where\n    </span>T: AsMut&lt;U&gt;,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>U {\n        (<span class=\"kw-2\">*</span><span class=\"self\">self</span>).as_mut()\n    }\n}\n\n<span class=\"comment\">// FIXME (#45742): replace the above impl for &amp;mut with the following more general one:\n// // AsMut lifts over DerefMut\n// impl&lt;D: ?Sized + Deref&lt;Target: AsMut&lt;U&gt;&gt;, U: ?Sized&gt; AsMut&lt;U&gt; for D {\n//     fn as_mut(&amp;mut self) -&gt; &amp;mut U {\n//         self.deref_mut().as_mut()\n//     }\n// }\n\n// From implies Into\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, U&gt; Into&lt;U&gt; <span class=\"kw\">for </span>T\n<span class=\"kw\">where\n    </span>U: From&lt;T&gt;,\n{\n    <span class=\"doccomment\">/// Calls `U::from(self)`.\n    ///\n    /// That is, this conversion is whatever the implementation of\n    /// &lt;code&gt;[From]&amp;lt;T&amp;gt; for U&lt;/code&gt; chooses to do.\n    </span><span class=\"attr\">#[inline]\n    #[track_caller]\n    </span><span class=\"kw\">fn </span>into(<span class=\"self\">self</span>) -&gt; U {\n        U::from(<span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"comment\">// From (and thus Into) is reflexive\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; From&lt;T&gt; <span class=\"kw\">for </span>T {\n    <span class=\"doccomment\">/// Returns the argument unchanged.\n    </span><span class=\"attr\">#[inline(always)]\n    </span><span class=\"kw\">fn </span>from(t: T) -&gt; T {\n        t\n    }\n}\n\n<span class=\"doccomment\">/// **Stability note:** This impl does not yet exist, but we are\n/// \"reserving space\" to add it in the future. See\n/// [rust-lang/rust#64715][#64715] for details.\n///\n/// [#64715]: https://github.com/rust-lang/rust/issues/64715\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n#[allow(unused_attributes)] </span><span class=\"comment\">// FIXME(#58633): do a principled fix instead.\n</span><span class=\"attr\">#[rustc_reservation_impl = <span class=\"string\">\"permitting this impl would forbid us from adding \\\n                            `impl&lt;T&gt; From&lt;!&gt; for T` later; see rust-lang/rust#64715 for details\"</span>]\n</span><span class=\"kw\">impl</span>&lt;T&gt; From&lt;!&gt; <span class=\"kw\">for </span>T {\n    <span class=\"kw\">fn </span>from(t: !) -&gt; T {\n        t\n    }\n}\n\n<span class=\"comment\">// TryFrom implies TryInto\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, U&gt; TryInto&lt;U&gt; <span class=\"kw\">for </span>T\n<span class=\"kw\">where\n    </span>U: TryFrom&lt;T&gt;,\n{\n    <span class=\"kw\">type </span>Error = U::Error;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>try_into(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span>&lt;U, U::Error&gt; {\n        U::try_from(<span class=\"self\">self</span>)\n    }\n}\n\n<span class=\"comment\">// Infallible conversions are semantically equivalent to fallible conversions\n// with an uninhabited error type.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"try_from\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T, U&gt; TryFrom&lt;U&gt; <span class=\"kw\">for </span>T\n<span class=\"kw\">where\n    </span>U: Into&lt;T&gt;,\n{\n    <span class=\"kw\">type </span>Error = Infallible;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>try_from(value: U) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, <span class=\"self\">Self</span>::Error&gt; {\n        <span class=\"prelude-val\">Ok</span>(U::into(value))\n    }\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// CONCRETE IMPLS\n////////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; AsRef&lt;[T]&gt; <span class=\"kw\">for </span>[T] {\n    <span class=\"attr\">#[inline(always)]\n    </span><span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>[T] {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; AsMut&lt;[T]&gt; <span class=\"kw\">for </span>[T] {\n    <span class=\"attr\">#[inline(always)]\n    </span><span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>[T] {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>AsRef&lt;str&gt; <span class=\"kw\">for </span>str {\n    <span class=\"attr\">#[inline(always)]\n    </span><span class=\"kw\">fn </span>as_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>str {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"as_mut_str_for_str\"</span>, since = <span class=\"string\">\"1.51.0\"</span>)]\n</span><span class=\"kw\">impl </span>AsMut&lt;str&gt; <span class=\"kw\">for </span>str {\n    <span class=\"attr\">#[inline(always)]\n    </span><span class=\"kw\">fn </span>as_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>str {\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"comment\">////////////////////////////////////////////////////////////////////////////////\n// THE NO-ERROR ERROR TYPE\n////////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// The error type for errors that can never happen.\n///\n/// Since this enum has no variant, a value of this type can never actually exist.\n/// This can be useful for generic APIs that use [`Result`] and parameterize the error type,\n/// to indicate that the result is always [`Ok`].\n///\n/// For example, the [`TryFrom`] trait (conversion that returns a [`Result`])\n/// has a blanket implementation for all types where a reverse [`Into`] implementation exists.\n///\n/// ```ignore (illustrates std code, duplicating the impl in a doctest would be an error)\n/// impl&lt;T, U&gt; TryFrom&lt;U&gt; for T where U: Into&lt;T&gt; {\n///     type Error = Infallible;\n///\n///     fn try_from(value: U) -&gt; Result&lt;Self, Infallible&gt; {\n///         Ok(U::into(value))  // Never returns `Err`\n///     }\n/// }\n/// ```\n///\n/// # Future compatibility\n///\n/// This enum has the same role as [the `!` “never” type][never],\n/// which is unstable in this version of Rust.\n/// When `!` is stabilized, we plan to make `Infallible` a type alias to it:\n///\n/// ```ignore (illustrates future std change)\n/// pub type Infallible = !;\n/// ```\n///\n/// … and eventually deprecate `Infallible`.\n///\n/// However there is one case where `!` syntax can be used\n/// before `!` is stabilized as a full-fledged type: in the position of a function’s return type.\n/// Specifically, it is possible to have implementations for two different function pointer types:\n///\n/// ```\n/// trait MyTrait {}\n/// impl MyTrait for fn() -&gt; ! {}\n/// impl MyTrait for fn() -&gt; std::convert::Infallible {}\n/// ```\n///\n/// With `Infallible` being an enum, this code is valid.\n/// However when `Infallible` becomes an alias for the never type,\n/// the two `impl`s will start to overlap\n/// and therefore will be disallowed by the language’s trait coherence rules.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n#[derive(Copy)]\n</span><span class=\"kw\">pub enum </span>Infallible {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>Clone <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Infallible {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"str_parse_error2\"</span>, since = <span class=\"string\">\"1.8.0\"</span>)]\n</span><span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>description(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>str {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>PartialEq <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;</span>Infallible) -&gt; bool {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>Eq <span class=\"kw\">for </span>Infallible {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>PartialOrd <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw\">crate</span>::cmp::Ordering&gt; {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>Ord <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, _other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; <span class=\"kw\">crate</span>::cmp::Ordering {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible\"</span>, since = <span class=\"string\">\"1.34.0\"</span>)]\n</span><span class=\"kw\">impl </span>From&lt;!&gt; <span class=\"kw\">for </span>Infallible {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>from(x: !) -&gt; <span class=\"self\">Self </span>{\n        x\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"convert_infallible_hash\"</span>, since = <span class=\"string\">\"1.44.0\"</span>)]\n</span><span class=\"kw\">impl </span>Hash <span class=\"kw\">for </span>Infallible {\n    <span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw\">_</span>: <span class=\"kw-2\">&amp;mut </span>H) {\n        <span class=\"kw\">match </span><span class=\"kw-2\">*</span><span class=\"self\">self </span>{}\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:29:03.484Z"
}