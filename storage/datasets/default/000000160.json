{
	"title": "Build Scripts - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/build-scripts.html",
	"markdown": "# Build Scripts - The Cargo Book\n\nSome packages need to compile third-party non-Rust code, for example C libraries. Other packages need to link to C libraries which can either be located on the system or possibly need to be built from source. Others still need facilities for functionality such as code generation before building (think parser generators).\n\nCargo does not aim to replace other tools that are well-optimized for these tasks, but it does integrate with them with custom build scripts. Placing a file named `build.rs` in the root of a package will cause Cargo to compile that script and execute it just before building the package.\n\n```rust\n// Example custom build script.\nfn main() {\n    // Tell Cargo that if the given file changes, to rerun this build script.\n    println!(\"cargo::rerun-if-changed=src/hello.c\");\n    // Use the `cc` crate to build a C file and statically link it.\n    cc::Build::new()\n        .file(\"src/hello.c\")\n        .compile(\"hello\");\n}\n```\n\nSome example use cases of build scripts are:\n\n-   Building a bundled C library.\n-   Finding a C library on the host system.\n-   Generating a Rust module from a specification.\n-   Performing any platform-specific configuration needed for the crate.\n\nThe sections below describe how build scripts work, and the [examples chapter](build-script-examples.html) shows a variety of examples on how to write scripts.\n\n> Note: The [`package.build` manifest key](about:blank/manifest.html#the-build-field) can be used to change the name of the build script, or disable it entirely.\n\n## [Life Cycle of a Build Script](#life-cycle-of-a-build-script)\n\nJust before a package is built, Cargo will compile a build script into an executable (if it has not already been built). It will then run the script, which may perform any number of tasks. The script may communicate with Cargo by printing specially formatted commands prefixed with `cargo::` to stdout.\n\nThe build script will be rebuilt if any of its source files or dependencies change.\n\nBy default, Cargo will re-run the build script if any of the files in the package changes. Typically it is best to use the `rerun-if` commands, described in the [change detection](#change-detection) section below, to narrow the focus of what triggers a build script to run again.\n\nOnce the build script successfully finishes executing, the rest of the package will be compiled. Scripts should exit with a non-zero exit code to halt the build if there is an error, in which case the build script’s output will be displayed on the terminal.\n\n## [Inputs to the Build Script](#inputs-to-the-build-script)\n\nWhen the build script is run, there are a number of inputs to the build script, all passed in the form of [environment variables](about:blank/environment-variables.html#environment-variables-cargo-sets-for-build-scripts).\n\nIn addition to environment variables, the build script’s current directory is the source directory of the build script’s package.\n\n## [Outputs of the Build Script](#outputs-of-the-build-script)\n\nBuild scripts may save any output files or intermediate artifacts in the directory specified in the [`OUT_DIR` environment variable](about:blank/environment-variables.html#environment-variables-cargo-sets-for-build-scripts). Scripts should not modify any files outside of that directory.\n\nBuild scripts communicate with Cargo by printing to stdout. Cargo will interpret each line that starts with `cargo::` as an instruction that will influence compilation of the package. All other lines are ignored.\n\n> **Note:** The old invocation prefix `cargo:` (one colon only) is deprecated and won’t get any new features. To migrate, use two-colons prefix `cargo::`, which was added in Rust 1.77. If you were using `cargo:KEY=VALUE` for arbitrary links manifest key-value pairs, it is encouraged to switch to `cargo::metadata=KEY=VALUE`. Stick to `cargo:` only if the support of Rust version older than 1.77 is required.\n\n> The order of `cargo::` instructions printed by the build script _may_ affect the order of arguments that `cargo` passes to `rustc`. In turn, the order of arguments passed to `rustc` may affect the order of arguments passed to the linker. Therefore, you will want to pay attention to the order of the build script’s instructions. For example, if object `foo` needs to link against library `bar`, you may want to make sure that library `bar`’s [`cargo::rustc-link-lib`](#rustc-link-lib) instruction appears _after_ instructions to link object `foo`.\n\nThe output of the script is hidden from the terminal during normal compilation. If you would like to see the output directly in your terminal, invoke Cargo as “very verbose” with the `-vv` flag. This only happens when the build script is run. If Cargo determines nothing has changed, it will not re-run the script, see [change detection](#change-detection) below for more.\n\nAll the lines printed to stdout by a build script are written to a file like `target/debug/build/<pkg>/output` (the precise location may depend on your configuration). The stderr output is also saved in that same directory.\n\nThe following is a summary of the instructions that Cargo recognizes, with each one detailed below.\n\n-   [`cargo::rerun-if-changed=PATH`](#rerun-if-changed) — Tells Cargo when to re-run the script.\n-   [`cargo::rerun-if-env-changed=VAR`](#rerun-if-env-changed) — Tells Cargo when to re-run the script.\n-   [`cargo::rustc-link-arg=FLAG`](#rustc-link-arg) — Passes custom flags to a linker for benchmarks, binaries, `cdylib` crates, examples, and tests.\n-   [`cargo::rustc-link-arg-bin=BIN=FLAG`](#rustc-link-arg-bin) — Passes custom flags to a linker for the binary `BIN`.\n-   [`cargo::rustc-link-arg-bins=FLAG`](#rustc-link-arg-bins) — Passes custom flags to a linker for binaries.\n-   [`cargo::rustc-link-arg-tests=FLAG`](#rustc-link-arg-tests) — Passes custom flags to a linker for tests.\n-   [`cargo::rustc-link-arg-examples=FLAG`](#rustc-link-arg-examples) — Passes custom flags to a linker for examples.\n-   [`cargo::rustc-link-arg-benches=FLAG`](#rustc-link-arg-benches) — Passes custom flags to a linker for benchmarks.\n-   [`cargo::rustc-link-lib=LIB`](#rustc-link-lib) — Adds a library to link.\n-   [`cargo::rustc-link-search=[KIND=]PATH`](#rustc-link-search) — Adds to the library search path.\n-   [`cargo::rustc-flags=FLAGS`](#rustc-flags) — Passes certain flags to the compiler.\n-   [`cargo::rustc-cfg=KEY[=\"VALUE\"]`](#rustc-cfg) — Enables compile-time `cfg` settings.\n-   [`cargo::rustc-check-cfg=CHECK_CFG`](#rustc-check-cfg) – Register custom `cfg`s as expected for compile-time checking of configs.\n-   [`cargo::rustc-env=VAR=VALUE`](#rustc-env) — Sets an environment variable.\n-   [`cargo::rustc-cdylib-link-arg=FLAG`](#rustc-cdylib-link-arg) — Passes custom flags to a linker for cdylib crates.\n-   [`cargo::warning=MESSAGE`](#cargo-warning) — Displays a warning on the terminal.\n-   [`cargo::metadata=KEY=VALUE`](#the-links-manifest-key) — Metadata, used by `links` scripts.\n\n### [`cargo::rustc-link-arg=FLAG`](#rustc-link-arg)\n\nThe `rustc-link-arg` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building supported targets (benchmarks, binaries, `cdylib` crates, examples, and tests). Its usage is highly platform specific. It is useful to set the shared library version or linker script.\n\n### [`cargo::rustc-link-arg-bin=BIN=FLAG`](#rustc-link-arg-bin)\n\nThe `rustc-link-arg-bin` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building the binary target with name `BIN`. Its usage is highly platform specific. It is useful to set a linker script or other linker options.\n\n### [`cargo::rustc-link-arg-bins=FLAG`](#rustc-link-arg-bins)\n\nThe `rustc-link-arg-bins` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a binary target. Its usage is highly platform specific. It is useful to set a linker script or other linker options.\n\n### [`cargo::rustc-link-lib=LIB`](#rustc-link-lib)\n\nThe `rustc-link-lib` instruction tells Cargo to link the given library using the compiler’s [`-l` flag](about:blank/rustc/command-line-arguments.html#option-l-link-lib). This is typically used to link a native library using [FFI](../../nomicon/ffi.html).\n\nThe `LIB` string is passed directly to rustc, so it supports any syntax that `-l` does.  \nCurrently the full supported syntax for `LIB` is `[KIND[:MODIFIERS]=]NAME[:RENAME]`.\n\nThe `-l` flag is only passed to the library target of the package, unless there is no library target, in which case it is passed to all targets. This is done because all other targets have an implicit dependency on the library target, and the given library to link should only be included once. This means that if a package has both a library and a binary target, the _library_ has access to the symbols from the given lib, and the binary should access them through the library target’s public API.\n\nThe optional `KIND` may be one of `dylib`, `static`, or `framework`. See the [rustc book](about:blank/rustc/command-line-arguments.html#option-l-link-lib) for more detail.\n\n### [`cargo::rustc-link-arg-tests=FLAG`](#rustc-link-arg-tests)\n\nThe `rustc-link-arg-tests` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a tests target.\n\n### [`cargo::rustc-link-arg-examples=FLAG`](#rustc-link-arg-examples)\n\nThe `rustc-link-arg-examples` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building an examples target.\n\n### [`cargo::rustc-link-arg-benches=FLAG`](#rustc-link-arg-benches)\n\nThe `rustc-link-arg-benches` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a benchmark target.\n\n### [`cargo::rustc-link-search=[KIND=]PATH`](#rustc-link-search)\n\nThe `rustc-link-search` instruction tells Cargo to pass the [`-L` flag](about:blank/rustc/command-line-arguments.html#option-l-search-path) to the compiler to add a directory to the library search path.\n\nThe optional `KIND` may be one of `dependency`, `crate`, `native`, `framework`, or `all`. See the [rustc book](about:blank/rustc/command-line-arguments.html#option-l-search-path) for more detail.\n\nThese paths are also added to the [dynamic library search path environment variable](about:blank/environment-variables.html#dynamic-library-paths) if they are within the `OUT_DIR`. Depending on this behavior is discouraged since this makes it difficult to use the resulting binary. In general, it is best to avoid creating dynamic libraries in a build script (using existing system libraries is fine).\n\n### [`cargo::rustc-flags=FLAGS`](#rustc-flags)\n\nThe `rustc-flags` instruction tells Cargo to pass the given space-separated flags to the compiler. This only allows the `-l` and `-L` flags, and is equivalent to using [`rustc-link-lib`](#rustc-link-lib) and [`rustc-link-search`](#rustc-link-search).\n\n### [`cargo::rustc-cfg=KEY[=\"VALUE\"]`](#rustc-cfg)\n\nThe `rustc-cfg` instruction tells Cargo to pass the given value to the [`--cfg` flag](about:blank/rustc/command-line-arguments.html#option-cfg) to the compiler. This may be used for compile-time detection of features to enable [conditional compilation](../../reference/conditional-compilation.html). Custom cfgs must either be expected using the [`cargo::rustc-check-cfg`](#rustc-check-cfg) instruction or usage will need to allow the [`unexpected_cfgs`](about:blank/rustc/lints/listing/warn-by-default.html#unexpected-cfgs) lint to avoid unexpected cfgs warnings.\n\nNote that this does _not_ affect Cargo’s dependency resolution. This cannot be used to enable an optional dependency, or enable other Cargo features.\n\nBe aware that [Cargo features](features.html) use the form `feature=\"foo\"`. `cfg` values passed with this flag are not restricted to that form, and may provide just a single identifier, or any arbitrary key/value pair. For example, emitting `cargo::rustc-cfg=abc` will then allow code to use `#[cfg(abc)]` (note the lack of `feature=`). Or an arbitrary key/value pair may be used with an `=` symbol like `cargo::rustc-cfg=my_component=\"foo\"`. The key should be a Rust identifier, the value should be a string.\n\n### [`cargo::rustc-check-cfg=CHECK_CFG`](#rustc-check-cfg)\n\nAdd to the list of expected config names and values that is used when checking the _reachable_ cfg expressions with the [`unexpected_cfgs`](about:blank/rustc/lints/listing/warn-by-default.html#unexpected-cfgs) lint.\n\nThe syntax of `CHECK_CFG` mirrors the `rustc` [`--check-cfg` flag](about:blank/rustc/command-line-arguments.html#option-check-cfg), see [Checking conditional configurations](../../rustc/check-cfg.html) for more details.\n\n> Note: `cargo:rustc-check-cfg` (single-colon) can be used if your MSRV is below Rust 1.77\n\nThe instruction can be used like this:\n\n```rust\n#![allow(unused)]\nfn main() {\n// build.rs\nprintln!(\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\");\nif foo_bar_condition {\n    println!(\"cargo::rustc-cfg=foo=\\\"bar\\\"\");\n}\n}\n```\n\nNote that all possible cfgs should be defined, regardless of which cfgs are currently enabled. This includes all possible values of a given cfg name.\n\nIt is recommended to group the `cargo::rustc-check-cfg` and [`cargo::rustc-cfg`](about:blank/rustc/command-line-arguments.html#option-cfg) instructions as closely as possible in order to avoid typos, missing check-cfg, stale cfgs…\n\nSee also the [conditional compilation](about:blank/build-script-examples.html#conditional-compilation) example.\n\n### [`cargo::rustc-env=VAR=VALUE`](#rustc-env)\n\nThe `rustc-env` instruction tells Cargo to set the given environment variable when compiling the package. The value can be then retrieved by the [`env!` macro](../../std/macro.env.html) in the compiled crate. This is useful for embedding additional metadata in crate’s code, such as the hash of git HEAD or the unique identifier of a continuous integration server.\n\nSee also the [environment variables automatically included by Cargo](about:blank/environment-variables.html#environment-variables-cargo-sets-for-crates).\n\n> **Note**: These environment variables are also set when running an executable with `cargo run` or `cargo test`. However, this usage is discouraged since it ties the executable to Cargo’s execution environment. Normally, these environment variables should only be checked at compile-time with the `env!` macro.\n\n### [`cargo::rustc-cdylib-link-arg=FLAG`](#rustc-cdylib-link-arg)\n\nThe `rustc-cdylib-link-arg` instruction tells Cargo to pass the [`-C link-arg=FLAG` option](about:blank/rustc/codegen-options/index.html#link-arg) to the compiler, but only when building a `cdylib` library target. Its usage is highly platform specific. It is useful to set the shared library version or the runtime-path.\n\n### [`cargo::warning=MESSAGE`](#cargo-warning)\n\nThe `warning` instruction tells Cargo to display a warning after the build script has finished running. Warnings are only shown for `path` dependencies (that is, those you’re working on locally), so for example warnings printed out in [crates.io](https://crates.io/) crates are not emitted by default. The `-vv` “very verbose” flag may be used to have Cargo display warnings for all crates.\n\n## [Build Dependencies](#build-dependencies)\n\nBuild scripts are also allowed to have dependencies on other Cargo-based crates. Dependencies are declared through the `build-dependencies` section of the manifest.\n\n```toml\n[build-dependencies]\ncc = \"1.0.46\"\n\n```\n\nThe build script **does not** have access to the dependencies listed in the `dependencies` or `dev-dependencies` section (they’re not built yet!). Also, build dependencies are not available to the package itself unless also explicitly added in the `[dependencies]` table.\n\nIt is recommended to carefully consider each dependency you add, weighing against the impact on compile time, licensing, maintenance, etc. Cargo will attempt to reuse a dependency if it is shared between build dependencies and normal dependencies. However, this is not always possible, for example when cross-compiling, so keep that in consideration of the impact on compile time.\n\n## [Change Detection](#change-detection)\n\nWhen rebuilding a package, Cargo does not necessarily know if the build script needs to be run again. By default, it takes a conservative approach of always re-running the build script if any file within the package is changed (or the list of files controlled by the [`exclude` and `include` fields](about:blank/manifest.html#the-exclude-and-include-fields)). For most cases, this is not a good choice, so it is recommended that every build script emit at least one of the `rerun-if` instructions (described below). If these are emitted, then Cargo will only re-run the script if the given value has changed. If Cargo is re-running the build scripts of your own crate or a dependency and you don’t know why, see [“Why is Cargo rebuilding my code?” in the FAQ](about:blank/faq.html#why-is-cargo-rebuilding-my-code).\n\n### [`cargo::rerun-if-changed=PATH`](#rerun-if-changed)\n\nThe `rerun-if-changed` instruction tells Cargo to re-run the build script if the file at the given path has changed. Currently, Cargo only uses the filesystem last-modified “mtime” timestamp to determine if the file has changed. It compares against an internal cached timestamp of when the build script last ran.\n\nIf the path points to a directory, it will scan the entire directory for any modifications.\n\nIf the build script inherently does not need to re-run under any circumstance, then emitting `cargo::rerun-if-changed=build.rs` is a simple way to prevent it from being re-run (otherwise, the default if no `rerun-if` instructions are emitted is to scan the entire package directory for changes). Cargo automatically handles whether or not the script itself needs to be recompiled, and of course the script will be re-run after it has been recompiled. Otherwise, specifying `build.rs` is redundant and unnecessary.\n\n### [`cargo::rerun-if-env-changed=NAME`](#rerun-if-env-changed)\n\nThe `rerun-if-env-changed` instruction tells Cargo to re-run the build script if the value of an environment variable of the given name has changed.\n\nNote that the environment variables here are intended for global environment variables like `CC` and such, it is not possible to use this for environment variables like `TARGET` that [Cargo sets for build scripts](about:blank/environment-variables.html#environment-variables-cargo-sets-for-build-scripts). The environment variables in use are those received by `cargo` invocations, not those received by the executable of the build script.\n\n## [The `links` Manifest Key](#the-links-manifest-key)\n\nThe `package.links` key may be set in the `Cargo.toml` manifest to declare that the package links with the given native library. The purpose of this manifest key is to give Cargo an understanding about the set of native dependencies that a package has, as well as providing a principled system of passing metadata between package build scripts.\n\n```toml\n[package]\n# ...\nlinks = \"foo\"\n\n```\n\nThis manifest states that the package links to the `libfoo` native library. When using the `links` key, the package must have a build script, and the build script should use the [`rustc-link-lib` instruction](#rustc-link-lib) to link the library.\n\nPrimarily, Cargo requires that there is at most one package per `links` value. In other words, it is forbidden to have two packages link to the same native library. This helps prevent duplicate symbols between crates. Note, however, that there are [conventions in place](#-sys-packages) to alleviate this.\n\nBuild scripts can generate an arbitrary set of metadata in the form of key-value pairs. This metadata is set with the `cargo::metadata=KEY=VALUE` instruction.\n\nThe metadata is passed to the build scripts of **dependent** packages. For example, if the package `bar` depends on `foo`, then if `foo` generates `key=value` as part of its build script metadata, then the build script of `bar` will have the environment variables `DEP_FOO_KEY=value`. See the [“Using another `sys` crate”](about:blank/build-script-examples.html#using-another-sys-crate) for an example of how this can be used.\n\nNote that metadata is only passed to immediate dependents, not transitive dependents.\n\n## [`*-sys` Packages](#-sys-packages)\n\nSome Cargo packages that link to system libraries have a naming convention of having a `-sys` suffix. Any package named `foo-sys` should provide two major pieces of functionality:\n\n-   The library crate should link to the native library `libfoo`. This will often probe the current system for `libfoo` before resorting to building from source.\n-   The library crate should provide **declarations** for types and functions in `libfoo`, but **not** higher-level abstractions.\n\nThe set of `*-sys` packages provides a common set of dependencies for linking to native libraries. There are a number of benefits earned from having this convention of native-library-related packages:\n\n-   Common dependencies on `foo-sys` alleviates the rule about one package per value of `links`.\n-   Other `-sys` packages can take advantage of the `DEP_NAME_KEY=value` environment variables to better integrate with other packages. See the [“Using another `sys` crate”](about:blank/build-script-examples.html#using-another-sys-crate) example.\n-   A common dependency allows centralizing logic on discovering `libfoo` itself (or building it from source).\n-   These dependencies are easily [overridable](#overriding-build-scripts).\n\nIt is common to have a companion package without the `-sys` suffix that provides a safe, high-level abstractions on top of the sys package. For example, the [`git2` crate](https://crates.io/crates/git2) provides a high-level interface to the [`libgit2-sys` crate](https://crates.io/crates/libgit2-sys).\n\n## [Overriding Build Scripts](#overriding-build-scripts)\n\nIf a manifest contains a `links` key, then Cargo supports overriding the build script specified with a custom library. The purpose of this functionality is to prevent running the build script in question altogether and instead supply the metadata ahead of time.\n\nTo override a build script, place the following configuration in any acceptable [`config.toml`](config.html) file.\n\n```toml\n[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n```\n\nWith this configuration, if a package declares that it links to `foo` then the build script will **not** be compiled or run, and the metadata specified will be used instead.\n\nThe `warning`, `rerun-if-changed`, and `rerun-if-env-changed` keys should not be used and will be ignored.\n\n## [Jobserver](#jobserver)\n\nCargo and `rustc` use the [jobserver protocol](http://make.mad-scientist.net/papers/jobserver-implementation/), developed for GNU make, to coordinate concurrency across processes. It is essentially a semaphore that controls the number of jobs running concurrently. The concurrency may be set with the `--jobs` flag, which defaults to the number of logical CPUs.\n\nEach build script inherits one job slot from Cargo, and should endeavor to only use one CPU while it runs. If the script wants to use more CPUs in parallel, it should use the [`jobserver` crate](https://crates.io/crates/jobserver) to coordinate with Cargo.\n\nAs an example, the [`cc` crate](https://crates.io/crates/cc) may enable the optional `parallel` feature which will use the jobserver protocol to attempt to build multiple C files at the same time.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Build Scripts - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/build-scripts.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"build-scripts\"><a class=\"header\" href=\"#build-scripts\">Build Scripts</a></h1>\n<p>Some packages need to compile third-party non-Rust code, for example C\nlibraries. Other packages need to link to C libraries which can either be\nlocated on the system or possibly need to be built from source. Others still\nneed facilities for functionality such as code generation before building (think\nparser generators).</p>\n<p>Cargo does not aim to replace other tools that are well-optimized for these\ntasks, but it does integrate with them with custom build scripts. Placing a\nfile named <code class=\"hljs\">build.rs</code> in the root of a package will cause Cargo to compile\nthat script and execute it just before building the package.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Example custom build script.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// Tell Cargo that if the given file changes, to rerun this build script.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rerun-if-changed=src/hello.c\"</span>);\n    <span class=\"hljs-comment\">// Use the `cc` crate to build a C file and statically link it.</span>\n    cc::Build::new()\n        .file(<span class=\"hljs-string\">\"src/hello.c\"</span>)\n        .compile(<span class=\"hljs-string\">\"hello\"</span>);\n}</code></pre>\n<p>Some example use cases of build scripts are:</p>\n<ul>\n<li>Building a bundled C library.</li>\n<li>Finding a C library on the host system.</li>\n<li>Generating a Rust module from a specification.</li>\n<li>Performing any platform-specific configuration needed for the crate.</li>\n</ul>\n<p>The sections below describe how build scripts work, and the <a href=\"build-script-examples.html\">examples\nchapter</a> shows a variety of examples on how to write\nscripts.</p>\n<blockquote>\n<p>Note: The <a href=\"manifest.html#the-build-field\"><code class=\"hljs\">package.build</code> manifest key</a> can be\nused to change the name of the build script, or disable it entirely.</p>\n</blockquote>\n<h2 id=\"life-cycle-of-a-build-script\"><a class=\"header\" href=\"#life-cycle-of-a-build-script\">Life Cycle of a Build Script</a></h2>\n<p>Just before a package is built, Cargo will compile a build script into an\nexecutable (if it has not already been built). It will then run the script,\nwhich may perform any number of tasks. The script may communicate with Cargo\nby printing specially formatted commands prefixed with <code class=\"hljs\">cargo::</code> to stdout.</p>\n<p>The build script will be rebuilt if any of its source files or dependencies\nchange.</p>\n<p>By default, Cargo will re-run the build script if any of the files in the\npackage changes. Typically it is best to use the <code class=\"hljs\">rerun-if</code> commands,\ndescribed in the <a href=\"#change-detection\">change detection</a> section below, to\nnarrow the focus of what triggers a build script to run again.</p>\n<p>Once the build script successfully finishes executing, the rest of the package\nwill be compiled. Scripts should exit with a non-zero exit code to halt the\nbuild if there is an error, in which case the build script’s output will be\ndisplayed on the terminal.</p>\n<h2 id=\"inputs-to-the-build-script\"><a class=\"header\" href=\"#inputs-to-the-build-script\">Inputs to the Build Script</a></h2>\n<p>When the build script is run, there are a number of inputs to the build script,\nall passed in the form of <a href=\"environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">environment variables</a>.</p>\n<p>In addition to environment variables, the build script’s current directory is\nthe source directory of the build script’s package.</p>\n<h2 id=\"outputs-of-the-build-script\"><a class=\"header\" href=\"#outputs-of-the-build-script\">Outputs of the Build Script</a></h2>\n<p>Build scripts may save any output files or intermediate artifacts in the\ndirectory specified in the <a href=\"environment-variables.html#environment-variables-cargo-sets-for-build-scripts\"><code class=\"hljs\">OUT_DIR</code> environment variable</a>. Scripts\nshould not modify any files outside of that directory.</p>\n<p>Build scripts communicate with Cargo by printing to stdout. Cargo will\ninterpret each line that starts with <code class=\"hljs\">cargo::</code> as an instruction that will\ninfluence compilation of the package. All other lines are ignored.</p>\n<blockquote>\n<p><strong>Note:</strong> The old invocation prefix <code class=\"hljs\">cargo:</code> (one colon only) is deprecated\nand won’t get any new features. To migrate, use two-colons prefix <code class=\"hljs\">cargo::</code>,\nwhich was added in Rust 1.77. If you were using <code class=\"hljs\">cargo:KEY=VALUE</code> for\narbitrary links manifest key-value pairs, it is encouraged to switch to\n<code class=\"hljs\">cargo::metadata=KEY=VALUE</code>. Stick to <code class=\"hljs\">cargo:</code> only if the support of Rust\nversion older than 1.77 is required.</p>\n</blockquote>\n<blockquote>\n<p>The order of <code class=\"hljs\">cargo::</code> instructions printed by the build script <em>may</em>\naffect the order of arguments that <code class=\"hljs\">cargo</code> passes to <code class=\"hljs\">rustc</code>. In turn, the\norder of arguments passed to <code class=\"hljs\">rustc</code> may affect the order of arguments passed\nto the linker. Therefore, you will want to pay attention to the order of the\nbuild script’s instructions. For example, if object <code class=\"hljs\">foo</code> needs to link against\nlibrary <code class=\"hljs\">bar</code>, you may want to make sure that library <code class=\"hljs\">bar</code>’s\n<a href=\"#rustc-link-lib\"><code class=\"hljs\">cargo::rustc-link-lib</code></a> instruction appears <em>after</em>\ninstructions to link object <code class=\"hljs\">foo</code>.</p>\n</blockquote>\n<p>The output of the script is hidden from the terminal during normal\ncompilation. If you would like to see the output directly in your terminal,\ninvoke Cargo as “very verbose” with the <code class=\"hljs\">-vv</code> flag. This only happens when the\nbuild script is run. If Cargo determines nothing has changed, it will not\nre-run the script, see <a href=\"#change-detection\">change detection</a> below for more.</p>\n<p>All the lines printed to stdout by a build script are written to a file like\n<code class=\"hljs\">target/debug/build/&lt;pkg&gt;/output</code> (the precise location may depend on your\nconfiguration). The stderr output is also saved in that same directory.</p>\n<p>The following is a summary of the instructions that Cargo recognizes, with each\none detailed below.</p>\n<ul>\n<li><a href=\"#rerun-if-changed\"><code class=\"hljs\">cargo::rerun-if-changed=PATH</code></a> — Tells Cargo when to\nre-run the script.</li>\n<li><a href=\"#rerun-if-env-changed\"><code class=\"hljs\">cargo::rerun-if-env-changed=VAR</code></a> — Tells Cargo when\nto re-run the script.</li>\n<li><a href=\"#rustc-link-arg\"><code class=\"hljs\">cargo::rustc-link-arg=FLAG</code></a> — Passes custom flags to a\nlinker for benchmarks, binaries, <code class=\"hljs\">cdylib</code> crates, examples, and tests.</li>\n<li><a href=\"#rustc-link-arg-bin\"><code class=\"hljs\">cargo::rustc-link-arg-bin=BIN=FLAG</code></a> — Passes custom\nflags to a linker for the binary <code class=\"hljs\">BIN</code>.</li>\n<li><a href=\"#rustc-link-arg-bins\"><code class=\"hljs\">cargo::rustc-link-arg-bins=FLAG</code></a> — Passes custom\nflags to a linker for binaries.</li>\n<li><a href=\"#rustc-link-arg-tests\"><code class=\"hljs\">cargo::rustc-link-arg-tests=FLAG</code></a> — Passes custom\nflags to a linker for tests.</li>\n<li><a href=\"#rustc-link-arg-examples\"><code class=\"hljs\">cargo::rustc-link-arg-examples=FLAG</code></a> — Passes custom\nflags to a linker for examples.</li>\n<li><a href=\"#rustc-link-arg-benches\"><code class=\"hljs\">cargo::rustc-link-arg-benches=FLAG</code></a> — Passes custom\nflags to a linker for benchmarks.</li>\n<li><a href=\"#rustc-link-lib\"><code class=\"hljs\">cargo::rustc-link-lib=LIB</code></a> — Adds a library to\nlink.</li>\n<li><a href=\"#rustc-link-search\"><code class=\"hljs\">cargo::rustc-link-search=[KIND=]PATH</code></a> — Adds to the\nlibrary search path.</li>\n<li><a href=\"#rustc-flags\"><code class=\"hljs\">cargo::rustc-flags=FLAGS</code></a> — Passes certain flags to the\ncompiler.</li>\n<li><a href=\"#rustc-cfg\"><code class=\"hljs\">cargo::rustc-cfg=KEY[=\"VALUE\"]</code></a> — Enables compile-time <code class=\"hljs\">cfg</code>\nsettings.</li>\n<li><a href=\"#rustc-check-cfg\"><code class=\"hljs\">cargo::rustc-check-cfg=CHECK_CFG</code></a> – Register custom <code class=\"hljs\">cfg</code>s as\nexpected for compile-time checking of configs.</li>\n<li><a href=\"#rustc-env\"><code class=\"hljs\">cargo::rustc-env=VAR=VALUE</code></a> — Sets an environment variable.</li>\n<li><a href=\"#rustc-cdylib-link-arg\"><code class=\"hljs\">cargo::rustc-cdylib-link-arg=FLAG</code></a> — Passes custom\nflags to a linker for cdylib crates.</li>\n<li><a href=\"#cargo-warning\"><code class=\"hljs\">cargo::warning=MESSAGE</code></a> — Displays a warning on the\nterminal.</li>\n<li><a href=\"#the-links-manifest-key\"><code class=\"hljs\">cargo::metadata=KEY=VALUE</code></a> — Metadata, used by <code class=\"hljs\">links</code>\nscripts.</li>\n</ul>\n<h3 id=\"rustc-link-arg\"><a class=\"header\" href=\"#rustc-link-arg\"><code>cargo::rustc-link-arg=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code>\noption</a> to the compiler, but only when building supported targets\n(benchmarks, binaries, <code class=\"hljs\">cdylib</code> crates, examples, and tests). Its usage is\nhighly platform specific. It is useful to set the shared library version or\nlinker script.</p>\n<h3 id=\"rustc-link-arg-bin\"><a class=\"header\" href=\"#rustc-link-arg-bin\"><code>cargo::rustc-link-arg-bin=BIN=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-bin</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building\nthe binary target with name <code class=\"hljs\">BIN</code>. Its usage is highly platform specific. It is useful\nto set a linker script or other linker options.</p>\n<h3 id=\"rustc-link-arg-bins\"><a class=\"header\" href=\"#rustc-link-arg-bins\"><code>cargo::rustc-link-arg-bins=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-bins</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\nbinary target. Its usage is highly platform specific. It is useful\nto set a linker script or other linker options.</p>\n<h3 id=\"rustc-link-lib\"><a class=\"header\" href=\"#rustc-link-lib\"><code>cargo::rustc-link-lib=LIB</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-lib</code> instruction tells Cargo to link the given library using\nthe compiler’s <a href=\"../../rustc/command-line-arguments.html#option-l-link-lib\"><code class=\"hljs\">-l</code> flag</a>. This is typically used to link a\nnative library using <a href=\"../../nomicon/ffi.html\">FFI</a>.</p>\n<p>The <code class=\"hljs\">LIB</code> string is passed directly to rustc, so it supports any syntax that\n<code class=\"hljs\">-l</code> does. <br>\nCurrently the full supported syntax for <code class=\"hljs\">LIB</code> is <code class=\"hljs\">[KIND[:MODIFIERS]=]NAME[:RENAME]</code>.</p>\n<p>The <code class=\"hljs\">-l</code> flag is only passed to the library target of the package, unless\nthere is no library target, in which case it is passed to all targets. This is\ndone because all other targets have an implicit dependency on the library\ntarget, and the given library to link should only be included once. This means\nthat if a package has both a library and a binary target, the <em>library</em> has\naccess to the symbols from the given lib, and the binary should access them\nthrough the library target’s public API.</p>\n<p>The optional <code class=\"hljs\">KIND</code> may be one of <code class=\"hljs\">dylib</code>, <code class=\"hljs\">static</code>, or <code class=\"hljs\">framework</code>. See the\n<a href=\"../../rustc/command-line-arguments.html#option-l-link-lib\">rustc book</a> for more detail.</p>\n<h3 id=\"rustc-link-arg-tests\"><a class=\"header\" href=\"#rustc-link-arg-tests\"><code>cargo::rustc-link-arg-tests=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-tests</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\ntests target.</p>\n<h3 id=\"rustc-link-arg-examples\"><a class=\"header\" href=\"#rustc-link-arg-examples\"><code>cargo::rustc-link-arg-examples=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-examples</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building an examples\ntarget.</p>\n<h3 id=\"rustc-link-arg-benches\"><a class=\"header\" href=\"#rustc-link-arg-benches\"><code>cargo::rustc-link-arg-benches=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-arg-benches</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a benchmark\ntarget.</p>\n<h3 id=\"rustc-link-search\"><a class=\"header\" href=\"#rustc-link-search\"><code>cargo::rustc-link-search=[KIND=]PATH</code></a></h3>\n<p>The <code class=\"hljs\">rustc-link-search</code> instruction tells Cargo to pass the <a href=\"../../rustc/command-line-arguments.html#option-l-search-path\"><code class=\"hljs\">-L</code>\nflag</a> to the compiler to add a directory to the library search\npath.</p>\n<p>The optional <code class=\"hljs\">KIND</code> may be one of <code class=\"hljs\">dependency</code>, <code class=\"hljs\">crate</code>, <code class=\"hljs\">native</code>,\n<code class=\"hljs\">framework</code>, or <code class=\"hljs\">all</code>. See the <a href=\"../../rustc/command-line-arguments.html#option-l-search-path\">rustc book</a> for more detail.</p>\n<p>These paths are also added to the <a href=\"environment-variables.html#dynamic-library-paths\">dynamic library search path environment\nvariable</a> if they are within\nthe <code class=\"hljs\">OUT_DIR</code>. Depending on this behavior is discouraged since this makes it\ndifficult to use the resulting binary. In general, it is best to avoid\ncreating dynamic libraries in a build script (using existing system libraries\nis fine).</p>\n<h3 id=\"rustc-flags\"><a class=\"header\" href=\"#rustc-flags\"><code>cargo::rustc-flags=FLAGS</code></a></h3>\n<p>The <code class=\"hljs\">rustc-flags</code> instruction tells Cargo to pass the given space-separated\nflags to the compiler. This only allows the <code class=\"hljs\">-l</code> and <code class=\"hljs\">-L</code> flags, and is\nequivalent to using <a href=\"#rustc-link-lib\"><code class=\"hljs\">rustc-link-lib</code></a> and\n<a href=\"#rustc-link-search\"><code class=\"hljs\">rustc-link-search</code></a>.</p>\n<h3 id=\"rustc-cfg\"><a class=\"header\" href=\"#rustc-cfg\"><code>cargo::rustc-cfg=KEY[=\"VALUE\"]</code></a></h3>\n<p>The <code class=\"hljs\">rustc-cfg</code> instruction tells Cargo to pass the given value to the\n<a href=\"../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">--cfg</code> flag</a> to the compiler. This may be used for compile-time\ndetection of features to enable <a href=\"../../reference/conditional-compilation.html\">conditional compilation</a>. Custom cfgs\nmust either be expected using the <a href=\"#rustc-check-cfg\"><code class=\"hljs\">cargo::rustc-check-cfg</code></a>\ninstruction or usage will need to allow the <a href=\"../../rustc/lints/listing/warn-by-default.html#unexpected-cfgs\"><code class=\"hljs\">unexpected_cfgs</code></a>\nlint to avoid unexpected cfgs warnings.</p>\n<p>Note that this does <em>not</em> affect Cargo’s dependency resolution. This cannot be\nused to enable an optional dependency, or enable other Cargo features.</p>\n<p>Be aware that <a href=\"features.html\">Cargo features</a> use the form <code class=\"hljs\">feature=\"foo\"</code>. <code class=\"hljs\">cfg</code> values\npassed with this flag are not restricted to that form, and may provide just a\nsingle identifier, or any arbitrary key/value pair. For example, emitting\n<code class=\"hljs\">cargo::rustc-cfg=abc</code> will then allow code to use <code class=\"hljs\">#[cfg(abc)]</code> (note the lack\nof <code class=\"hljs\">feature=</code>). Or an arbitrary key/value pair may be used with an <code class=\"hljs\">=</code> symbol\nlike <code class=\"hljs\">cargo::rustc-cfg=my_component=\"foo\"</code>. The key should be a Rust\nidentifier, the value should be a string.</p>\n<h3 id=\"rustc-check-cfg\"><a class=\"header\" href=\"#rustc-check-cfg\"><code>cargo::rustc-check-cfg=CHECK_CFG</code></a></h3>\n<p>Add to the list of expected config names and values that is used when checking\nthe <em>reachable</em> cfg expressions with the <a href=\"../../rustc/lints/listing/warn-by-default.html#unexpected-cfgs\"><code class=\"hljs\">unexpected_cfgs</code></a> lint.</p>\n<p>The syntax of <code class=\"hljs\">CHECK_CFG</code> mirrors the <code class=\"hljs\">rustc</code> <a href=\"../../rustc/command-line-arguments.html#option-check-cfg\"><code class=\"hljs\">--check-cfg</code> flag</a>, see\n<a href=\"../../rustc/check-cfg.html\">Checking conditional configurations</a> for more details.</p>\n<blockquote>\n<p>Note: <code class=\"hljs\">cargo:rustc-check-cfg</code> (single-colon) can be used if your MSRV is below Rust 1.77</p>\n</blockquote>\n<p>The instruction can be used like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// build.rs</span>\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\"</span>);\n<span class=\"hljs-keyword\">if</span> foo_bar_condition {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"cargo::rustc-cfg=foo=\\\"bar\\\"\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that all possible cfgs should be defined, regardless of which cfgs are\ncurrently enabled. This includes all possible values of a given cfg name.</p>\n<p>It is recommended to group the <code class=\"hljs\">cargo::rustc-check-cfg</code> and\n<a href=\"../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">cargo::rustc-cfg</code></a> instructions as closely as possible in order to\navoid typos, missing check-cfg, stale cfgs…</p>\n<p>See also the\n<a href=\"build-script-examples.html#conditional-compilation\">conditional compilation</a> example.</p>\n<h3 id=\"rustc-env\"><a class=\"header\" href=\"#rustc-env\"><code>cargo::rustc-env=VAR=VALUE</code></a></h3>\n<p>The <code class=\"hljs\">rustc-env</code> instruction tells Cargo to set the given environment variable\nwhen compiling the package. The value can be then retrieved by the <a href=\"../../std/macro.env.html\"><code class=\"hljs\">env!</code>\nmacro</a> in the compiled crate. This is useful for embedding\nadditional metadata in crate’s code, such as the hash of git HEAD or the\nunique identifier of a continuous integration server.</p>\n<p>See also the <a href=\"environment-variables.html#environment-variables-cargo-sets-for-crates\">environment variables automatically included by\nCargo</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: These environment variables are also set when running an\nexecutable with <code class=\"hljs\">cargo run</code> or <code class=\"hljs\">cargo test</code>. However, this usage is\ndiscouraged since it ties the executable to Cargo’s execution environment.\nNormally, these environment variables should only be checked at compile-time\nwith the <code class=\"hljs\">env!</code> macro.</p>\n</blockquote>\n<h3 id=\"rustc-cdylib-link-arg\"><a class=\"header\" href=\"#rustc-cdylib-link-arg\"><code>cargo::rustc-cdylib-link-arg=FLAG</code></a></h3>\n<p>The <code class=\"hljs\">rustc-cdylib-link-arg</code> instruction tells Cargo to pass the <a href=\"../../rustc/codegen-options/index.html#link-arg\"><code class=\"hljs\">-C link-arg=FLAG</code> option</a> to the compiler, but only when building a\n<code class=\"hljs\">cdylib</code> library target. Its usage is highly platform specific. It is useful\nto set the shared library version or the runtime-path.</p>\n<h3 id=\"cargo-warning\"><a class=\"header\" href=\"#cargo-warning\"><code>cargo::warning=MESSAGE</code></a></h3>\n<p>The <code class=\"hljs\">warning</code> instruction tells Cargo to display a warning after the build\nscript has finished running. Warnings are only shown for <code class=\"hljs\">path</code> dependencies\n(that is, those you’re working on locally), so for example warnings printed\nout in <a href=\"https://crates.io/\">crates.io</a> crates are not emitted by default. The <code class=\"hljs\">-vv</code> “very verbose”\nflag may be used to have Cargo display warnings for all crates.</p>\n<h2 id=\"build-dependencies\"><a class=\"header\" href=\"#build-dependencies\">Build Dependencies</a></h2>\n<p>Build scripts are also allowed to have dependencies on other Cargo-based crates.\nDependencies are declared through the <code class=\"hljs\">build-dependencies</code> section of the\nmanifest.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build-dependencies]</span>\n<span class=\"hljs-attr\">cc</span> = <span class=\"hljs-string\">\"1.0.46\"</span>\n</code></pre>\n<p>The build script <strong>does not</strong> have access to the dependencies listed in the\n<code class=\"hljs\">dependencies</code> or <code class=\"hljs\">dev-dependencies</code> section (they’re not built yet!). Also,\nbuild dependencies are not available to the package itself unless also\nexplicitly added in the <code class=\"hljs\">[dependencies]</code> table.</p>\n<p>It is recommended to carefully consider each dependency you add, weighing\nagainst the impact on compile time, licensing, maintenance, etc. Cargo will\nattempt to reuse a dependency if it is shared between build dependencies and\nnormal dependencies. However, this is not always possible, for example when\ncross-compiling, so keep that in consideration of the impact on compile time.</p>\n<h2 id=\"change-detection\"><a class=\"header\" href=\"#change-detection\">Change Detection</a></h2>\n<p>When rebuilding a package, Cargo does not necessarily know if the build script\nneeds to be run again. By default, it takes a conservative approach of always\nre-running the build script if any file within the package is changed (or the\nlist of files controlled by the <a href=\"manifest.html#the-exclude-and-include-fields\"><code class=\"hljs\">exclude</code> and <code class=\"hljs\">include</code> fields</a>). For most\ncases, this is not a good choice, so it is recommended that every build script\nemit at least one of the <code class=\"hljs\">rerun-if</code> instructions (described below). If these\nare emitted, then Cargo will only re-run the script if the given value has\nchanged. If Cargo is re-running the build scripts of your own crate or a\ndependency and you don’t know why, see <a href=\"../faq.html#why-is-cargo-rebuilding-my-code\">“Why is Cargo rebuilding my code?” in the\nFAQ</a>.</p>\n<h3 id=\"rerun-if-changed\"><a class=\"header\" href=\"#rerun-if-changed\"><code>cargo::rerun-if-changed=PATH</code></a></h3>\n<p>The <code class=\"hljs\">rerun-if-changed</code> instruction tells Cargo to re-run the build script if\nthe file at the given path has changed. Currently, Cargo only uses the\nfilesystem last-modified “mtime” timestamp to determine if the file has\nchanged. It compares against an internal cached timestamp of when the build\nscript last ran.</p>\n<p>If the path points to a directory, it will scan the entire directory for\nany modifications.</p>\n<p>If the build script inherently does not need to re-run under any circumstance,\nthen emitting <code class=\"hljs\">cargo::rerun-if-changed=build.rs</code> is a simple way to prevent it\nfrom being re-run (otherwise, the default if no <code class=\"hljs\">rerun-if</code> instructions are\nemitted is to scan the entire package directory for changes). Cargo\nautomatically handles whether or not the script itself needs to be recompiled,\nand of course the script will be re-run after it has been recompiled.\nOtherwise, specifying <code class=\"hljs\">build.rs</code> is redundant and unnecessary.</p>\n<h3 id=\"rerun-if-env-changed\"><a class=\"header\" href=\"#rerun-if-env-changed\"><code>cargo::rerun-if-env-changed=NAME</code></a></h3>\n<p>The <code class=\"hljs\">rerun-if-env-changed</code> instruction tells Cargo to re-run the build script\nif the value of an environment variable of the given name has changed.</p>\n<p>Note that the environment variables here are intended for global environment\nvariables like <code class=\"hljs\">CC</code> and such, it is not possible to use this for environment\nvariables like <code class=\"hljs\">TARGET</code> that <a href=\"environment-variables.html#environment-variables-cargo-sets-for-build-scripts\">Cargo sets for build scripts</a>. The\nenvironment variables in use are those received by <code class=\"hljs\">cargo</code> invocations, not\nthose received by the executable of the build script.</p>\n<h2 id=\"the-links-manifest-key\"><a class=\"header\" href=\"#the-links-manifest-key\">The <code>links</code> Manifest Key</a></h2>\n<p>The <code class=\"hljs\">package.links</code> key may be set in the <code class=\"hljs\">Cargo.toml</code> manifest to declare\nthat the package links with the given native library. The purpose of this\nmanifest key is to give Cargo an understanding about the set of native\ndependencies that a package has, as well as providing a principled system of\npassing metadata between package build scripts.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">links</span> = <span class=\"hljs-string\">\"foo\"</span>\n</code></pre>\n<p>This manifest states that the package links to the <code class=\"hljs\">libfoo</code> native library.\nWhen using the <code class=\"hljs\">links</code> key, the package must have a build script, and the\nbuild script should use the <a href=\"#rustc-link-lib\"><code class=\"hljs\">rustc-link-lib</code> instruction</a> to\nlink the library.</p>\n<p>Primarily, Cargo requires that there is at most one package per <code class=\"hljs\">links</code> value.\nIn other words, it is forbidden to have two packages link to the same native\nlibrary. This helps prevent duplicate symbols between crates. Note, however,\nthat there are <a href=\"#-sys-packages\">conventions in place</a> to alleviate this.</p>\n<p>Build scripts can generate an arbitrary set of metadata in the form of\nkey-value pairs. This metadata is set with the <code class=\"hljs\">cargo::metadata=KEY=VALUE</code>\ninstruction.</p>\n<p>The metadata is passed to the build scripts of <strong>dependent</strong> packages. For\nexample, if the package <code class=\"hljs\">bar</code> depends on <code class=\"hljs\">foo</code>, then if <code class=\"hljs\">foo</code> generates\n<code class=\"hljs\">key=value</code> as part of its build script metadata, then the build script of\n<code class=\"hljs\">bar</code> will have the environment variables <code class=\"hljs\">DEP_FOO_KEY=value</code>. See the <a href=\"build-script-examples.html#using-another-sys-crate\">“Using\nanother <code class=\"hljs\">sys</code> crate”</a> for an example of how this can be\nused.</p>\n<p>Note that metadata is only passed to immediate dependents, not transitive\ndependents.</p>\n<h2 id=\"-sys-packages\"><a class=\"header\" href=\"#-sys-packages\"><code>*-sys</code> Packages</a></h2>\n<p>Some Cargo packages that link to system libraries have a naming convention of\nhaving a <code class=\"hljs\">-sys</code> suffix. Any package named <code class=\"hljs\">foo-sys</code> should provide two major\npieces of functionality:</p>\n<ul>\n<li>The library crate should link to the native library <code class=\"hljs\">libfoo</code>. This will often\nprobe the current system for <code class=\"hljs\">libfoo</code> before resorting to building from\nsource.</li>\n<li>The library crate should provide <strong>declarations</strong> for types and functions in\n<code class=\"hljs\">libfoo</code>, but <strong>not</strong> higher-level abstractions.</li>\n</ul>\n<p>The set of <code class=\"hljs\">*-sys</code> packages provides a common set of dependencies for linking\nto native libraries. There are a number of benefits earned from having this\nconvention of native-library-related packages:</p>\n<ul>\n<li>Common dependencies on <code class=\"hljs\">foo-sys</code> alleviates the rule about one package per\nvalue of <code class=\"hljs\">links</code>.</li>\n<li>Other <code class=\"hljs\">-sys</code> packages can take advantage of the <code class=\"hljs\">DEP_NAME_KEY=value</code>\nenvironment variables to better integrate with other packages. See the\n<a href=\"build-script-examples.html#using-another-sys-crate\">“Using another <code class=\"hljs\">sys</code> crate”</a> example.</li>\n<li>A common dependency allows centralizing logic on discovering <code class=\"hljs\">libfoo</code> itself\n(or building it from source).</li>\n<li>These dependencies are easily <a href=\"#overriding-build-scripts\">overridable</a>.</li>\n</ul>\n<p>It is common to have a companion package without the <code class=\"hljs\">-sys</code> suffix that\nprovides a safe, high-level abstractions on top of the sys package. For\nexample, the <a href=\"https://crates.io/crates/git2\"><code class=\"hljs\">git2</code> crate</a> provides a high-level interface to the\n<a href=\"https://crates.io/crates/libgit2-sys\"><code class=\"hljs\">libgit2-sys</code> crate</a>.</p>\n<h2 id=\"overriding-build-scripts\"><a class=\"header\" href=\"#overriding-build-scripts\">Overriding Build Scripts</a></h2>\n<p>If a manifest contains a <code class=\"hljs\">links</code> key, then Cargo supports overriding the build\nscript specified with a custom library. The purpose of this functionality is to\nprevent running the build script in question altogether and instead supply the\nmetadata ahead of time.</p>\n<p>To override a build script, place the following configuration in any acceptable <a href=\"config.html\"><code class=\"hljs\">config.toml</code></a> file.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu.foo]</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n</code></pre>\n<p>With this configuration, if a package declares that it links to <code class=\"hljs\">foo</code> then the\nbuild script will <strong>not</strong> be compiled or run, and the metadata specified will\nbe used instead.</p>\n<p>The <code class=\"hljs\">warning</code>, <code class=\"hljs\">rerun-if-changed</code>, and <code class=\"hljs\">rerun-if-env-changed</code> keys should not\nbe used and will be ignored.</p>\n<h2 id=\"jobserver\"><a class=\"header\" href=\"#jobserver\">Jobserver</a></h2>\n<p>Cargo and <code class=\"hljs\">rustc</code> use the <a href=\"http://make.mad-scientist.net/papers/jobserver-implementation/\">jobserver protocol</a>, developed for GNU make, to\ncoordinate concurrency across processes. It is essentially a semaphore that\ncontrols the number of jobs running concurrently. The concurrency may be set\nwith the <code class=\"hljs\">--jobs</code> flag, which defaults to the number of logical CPUs.</p>\n<p>Each build script inherits one job slot from Cargo, and should endeavor to\nonly use one CPU while it runs. If the script wants to use more CPUs in\nparallel, it should use the <a href=\"https://crates.io/crates/jobserver\"><code class=\"hljs\">jobserver</code> crate</a> to coordinate with Cargo.</p>\n<p>As an example, the <a href=\"https://crates.io/crates/cc\"><code class=\"hljs\">cc</code> crate</a> may enable the optional <code class=\"hljs\">parallel</code> feature\nwhich will use the jobserver protocol to attempt to build multiple C files\nat the same time.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/environment-variables.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/build-script-examples.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/environment-variables.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/build-script-examples.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:22.358Z"
}