{
	"title": "Recoverable Errors with Result - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch09-02-recoverable-errors-with-result.html",
	"markdown": "# Recoverable Errors with Result - The Rust Programming Language\n\nMost errors aren’t serious enough to require the program to stop entirely. Sometimes when a function fails it’s for a reason that you can easily interpret and respond to. For example, if you try to open a file and that operation fails because the file doesn’t exist, you might want to create the file instead of terminating the process.\n\nRecall from [“Handling Potential Failure with `Result`”](about:blank/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result) in Chapter 2 that the `Result` enum is defined as having two variants, `Ok` and `Err`, as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n}\n```\n\nThe `T` and `E` are generic type parameters: we’ll discuss generics in more detail in Chapter 10. What you need to know right now is that `T` represents the type of the value that will be returned in a success case within the `Ok` variant, and `E` represents the type of the error that will be returned in a failure case within the `Err` variant. Because `Result` has these generic type parameters, we can use the `Result` type and the functions defined on it in many different situations where the success value and error value we want to return may differ.\n\nLet’s call a function that returns a `Result` value because the function could fail. In Listing 9-3 we try to open a file.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n}\n```\n\nListing 9-3: Opening a file\n\nThe return type of `File::open` is a `Result<T, E>`. The generic parameter `T` has been filled in by the implementation of `File::open` with the type of the success value, `std::fs::File`, which is a file handle. The type of `E` used in the error value is `std::io::Error`. This return type means the call to `File::open` might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The `File::open` function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the `Result` enum conveys.\n\nIn the case where `File::open` succeeds, the value in the variable `greeting_file_result` will be an instance of `Ok` that contains a file handle. In the case where it fails, the value in `greeting_file_result` will be an instance of `Err` that contains more information about the kind of error that occurred.\n\nWe need to add to the code in Listing 9-3 to take different actions depending on the value `File::open` returns. Listing 9-4 shows one way to handle the `Result` using a basic tool, the `match` expression that we discussed in Chapter 6.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n\n    let greeting_file = match greeting_file_result {\n        Ok(file) => file,\n        Err(error) => panic!(\"Problem opening the file: {error:?}\"),\n    };\n}\n```\n\nListing 9-4: Using a `match` expression to handle the `Result` variants that might be returned\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been brought into scope by the prelude, so we don’t need to specify `Result::` before the `Ok` and `Err` variants in the `match` arms.\n\nWhen the result is `Ok`, this code will return the inner `file` value out of the `Ok` variant, and we then assign that file handle value to the variable `greeting_file`. After the `match`, we can use the file handle for reading or writing.\n\nThe other arm of the `match` handles the case where we get an `Err` value from `File::open`. In this example, we’ve chosen to call the `panic!` macro. If there’s no file named _hello.txt_ in our current directory and we run this code, we’ll see the following output from the `panic!` macro:\n\n```console\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/error-handling`\nthread 'main' panicked at src/main.rs:8:23:\nProblem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### [Matching on Different Errors](#matching-on-different-errors)\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed. However, we want to take different actions for different failure reasons. If `File::open` failed because the file doesn’t exist, we want to create the file and return the handle to the new file. If `File::open` failed for any other reason—for example, because we didn’t have permission to open the file—we still want the code to `panic!` in the same way it did in Listing 9-4. For this, we add an inner `match` expression, shown in Listing 9-5.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n\n    let greeting_file = match greeting_file_result {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                Ok(fc) => fc,\n                Err(e) => panic!(\"Problem creating the file: {e:?}\"),\n            },\n            other_error => {\n                panic!(\"Problem opening the file: {other_error:?}\");\n            }\n        },\n    };\n}\n```\n\nListing 9-5: Handling different kinds of errors in different ways\n\nThe type of the value that `File::open` returns inside the `Err` variant is `io::Error`, which is a struct provided by the standard library. This struct has a method `kind` that we can call to get an `io::ErrorKind` value. The enum `io::ErrorKind` is provided by the standard library and has variants representing the different kinds of errors that might result from an `io` operation. The variant we want to use is `ErrorKind::NotFound`, which indicates the file we’re trying to open doesn’t exist yet. So we match on `greeting_file_result`, but we also have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned by `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is, we try to create the file with `File::create`. However, because `File::create` could also fail, we need a second arm in the inner `match` expression. When the file can’t be created, a different error message is printed. The second arm of the outer `match` stays the same, so the program panics on any error besides the missing file error.\n\n#### [Alternatives to Using `match` with `Result<T, E>`](#alternatives-to-using-match-with-resultt-e)\n\nThat’s a lot of `match`! The `match` expression is very useful but also very much a primitive. In Chapter 13, you’ll learn about closures, which are used with many of the methods defined on `Result<T, E>`. These methods can be more concise than using `match` when handling `Result<T, E>` values in your code.\n\nFor example, here’s another way to write the same logic as shown in Listing 9-5, this time using closures and the `unwrap_or_else` method:\n\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create(\"hello.txt\").unwrap_or_else(|error| {\n                panic!(\"Problem creating the file: {error:?}\");\n            })\n        } else {\n            panic!(\"Problem opening the file: {error:?}\");\n        }\n    });\n}\n```\n\nAlthough this code has the same behavior as Listing 9-5, it doesn’t contain any `match` expressions and is cleaner to read. Come back to this example after you’ve read Chapter 13, and look up the `unwrap_or_else` method in the standard library documentation. Many more of these methods can clean up huge nested `match` expressions when you’re dealing with errors.\n\n#### [Shortcuts for Panic on Error: `unwrap` and `expect`](#shortcuts-for-panic-on-error-unwrap-and-expect)\n\nUsing `match` works well enough, but it can be a bit verbose and doesn’t always communicate intent well. The `Result<T, E>` type has many helper methods defined on it to do various, more specific tasks. The `unwrap` method is a shortcut method implemented just like the `match` expression we wrote in Listing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return the value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will call the `panic!` macro for us. Here is an example of `unwrap` in action:\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\").unwrap();\n}\n```\n\nIf we run this code without a _hello.txt_ file, we’ll see an error message from the `panic!` call that the `unwrap` method makes:\n\n```text\nthread 'main' panicked at src/main.rs:4:49:\ncalled `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n\n```\n\nSimilarly, the `expect` method lets us also choose the `panic!` error message. Using `expect` instead of `unwrap` and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of `expect` looks like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\")\n        .expect(\"hello.txt should be included in this project\");\n}\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call the `panic!` macro. The error message used by `expect` in its call to `panic!` will be the parameter that we pass to `expect`, rather than the default `panic!` message that `unwrap` uses. Here’s what it looks like:\n\n```text\nthread 'main' panicked at src/main.rs:5:10:\nhello.txt should be included in this project: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n\n```\n\nIn production-quality code, most Rustaceans choose `expect` rather than `unwrap` and give more context about why the operation is expected to always succeed. That way, if your assumptions are ever proven wrong, you have more information to use in debugging.\n\n### [Propagating Errors](#propagating-errors)\n\nWhen a function’s implementation calls something that might fail, instead of handling the error within the function itself you can return the error to the calling code so that it can decide what to do. This is known as _propagating_ the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If the file doesn’t exist or can’t be read, this function will return those errors to the code that called the function.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let username_file_result = File::open(\"hello.txt\");\n\n    let mut username_file = match username_file_result {\n        Ok(file) => file,\n        Err(e) => return Err(e),\n    };\n\n    let mut username = String::new();\n\n    match username_file.read_to_string(&mut username) {\n        Ok(_) => Ok(username),\n        Err(e) => Err(e),\n    }\n}\n}\n```\n\nListing 9-6: A function that returns errors to the calling code using `match`\n\nThis function can be written in a much shorter way, but we’re going to start by doing a lot of it manually in order to explore error handling; at the end, we’ll show the shorter way. Let’s look at the return type of the function first: `Result<String, io::Error>`. This means the function is returning a value of the type `Result<T, E>`, where the generic parameter `T` has been filled in with the concrete type `String` and the generic type `E` has been filled in with the concrete type `io::Error`.\n\nIf this function succeeds without any problems, the code that calls this function will receive an `Ok` value that holds a `String`—the `username` that this function read from the file. If this function encounters any problems, the calling code will receive an `Err` value that holds an instance of `io::Error` that contains more information about what the problems were. We chose `io::Error` as the return type of this function because that happens to be the type of the error value returned from both of the operations we’re calling in this function’s body that might fail: the `File::open` function and the `read_to_string` method.\n\nThe body of the function starts by calling the `File::open` function. Then we handle the `Result` value with a `match` similar to the `match` in Listing 9-4. If `File::open` succeeds, the file handle in the pattern variable `file` becomes the value in the mutable variable `username_file` and the function continues. In the `Err` case, instead of calling `panic!`, we use the `return` keyword to return early out of the function entirely and pass the error value from `File::open`, now in the pattern variable `e`, back to the calling code as this function’s error value.\n\nSo, if we have a file handle in `username_file`, the function then creates a new `String` in variable `username` and calls the `read_to_string` method on the file handle in `username_file` to read the contents of the file into `username`. The `read_to_string` method also returns a `Result` because it might fail, even though `File::open` succeeded. So we need another `match` to handle that `Result`: if `read_to_string` succeeds, then our function has succeeded, and we return the username from the file that’s now in `username` wrapped in an `Ok`. If `read_to_string` fails, we return the error value in the same way that we returned the error value in the `match` that handled the return value of `File::open`. However, we don’t need to explicitly say `return`, because this is the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value that contains a username or an `Err` value that contains an `io::Error`. It’s up to the calling code to decide what to do with those values. If the calling code gets an `Err` value, it could call `panic!` and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don’t have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the question mark operator `?` to make this easier.\n\n#### [A Shortcut for Propagating Errors: the `?` Operator](#a-shortcut-for-propagating-errors-the--operator)\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the same functionality as in Listing 9-6, but this implementation uses the `?` operator.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut username_file = File::open(\"hello.txt\")?;\n    let mut username = String::new();\n    username_file.read_to_string(&mut username)?;\n    Ok(username)\n}\n}\n```\n\nListing 9-7: A function that returns errors to the calling code using the `?` operator\n\nThe `?` placed after a `Result` value is defined to work in almost the same way as the `match` expressions we defined to handle the `Result` values in Listing 9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will get returned from this expression, and the program will continue. If the value is an `Err`, the `Err` will be returned from the whole function as if we had used the `return` keyword so the error value gets propagated to the calling code.\n\nThere is a difference between what the `match` expression from Listing 9-6 does and what the `?` operator does: error values that have the `?` operator called on them go through the `from` function, defined in the `From` trait in the standard library, which is used to convert values from one type into another. When the `?` operator calls the `from` function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons.\n\nFor example, we could change the `read_username_from_file` function in Listing 9-7 to return a custom error type named `OurError` that we define. If we also define `impl From<io::Error> for OurError` to construct an instance of `OurError` from an `io::Error`, then the `?` operator calls in the body of `read_username_from_file` will call `from` and convert the error types without needing to add any more code to the function.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will return the value inside an `Ok` to the variable `username_file`. If an error occurs, the `?` operator will return early out of the whole function and give any `Err` value to the calling code. The same thing applies to the `?` at the end of the `read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function’s implementation simpler. We could even shorten this code further by chaining method calls immediately after the `?`, as shown in Listing 9-8.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut username = String::new();\n\n    File::open(\"hello.txt\")?.read_to_string(&mut username)?;\n\n    Ok(username)\n}\n}\n```\n\nListing 9-8: Chaining method calls after the `?` operator\n\nWe’ve moved the creation of the new `String` in `username` to the beginning of the function; that part hasn’t changed. Instead of creating a variable `username_file`, we’ve chained the call to `read_to_string` directly onto the result of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the `read_to_string` call, and we still return an `Ok` value containing `username` when both `File::open` and `read_to_string` succeed rather than returning errors. The functionality is again the same as in Listing 9-6 and Listing 9-7; this is just a different, more ergonomic way to write it.\n\nListing 9-9 shows a way to make this even shorter using `fs::read_to_string`.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs;\nuse std::io;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    fs::read_to_string(\"hello.txt\")\n}\n}\n```\n\nListing 9-9: Using `fs::read_to_string` instead of opening and then reading the file\n\nReading a file into a string is a fairly common operation, so the standard library provides the convenient `fs::read_to_string` function that opens the file, creates a new `String`, reads the contents of the file, puts the contents into that `String`, and returns it. Of course, using `fs::read_to_string` doesn’t give us the opportunity to explain all the error handling, so we did it the longer way first.\n\n#### [Where The `?` Operator Can Be Used](#where-the--operator-can-be-used)\n\nThe `?` operator can only be used in functions whose return type is compatible with the value the `?` is used on. This is because the `?` operator is defined to perform an early return of a value out of the function, in the same manner as the `match` expression we defined in Listing 9-6. In Listing 9-6, the `match` was using a `Result` value, and the early return arm returned an `Err(e)` value. The return type of the function has to be a `Result` so that it’s compatible with this `return`.\n\nIn Listing 9-10, let’s look at the error we’ll get if we use the `?` operator in a `main` function with a return type that is incompatible with the type of the value we use `?` on.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\")?;\n}\n```\n\nListing 9-10: Attempting to use the `?` in the `main` function that returns `()` won’t compile.\n\nThis code opens a file, which might fail. The `?` operator follows the `Result` value returned by `File::open`, but this `main` function has the return type of `()`, not `Result`. When we compile this code, we get the following error message:\n\n```console\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n --> src/main.rs:4:48\n  |\n3 | fn main() {\n  | --------- this function should return `Result` or `Option` to accept `?`\n4 |     let greeting_file = File::open(\"hello.txt\")?;\n  |                                                ^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `error-handling` (bin \"error-handling\") due to 1 previous error\n\n```\n\nThis error points out that we’re only allowed to use the `?` operator in a function that returns `Result`, `Option`, or another type that implements `FromResidual`.\n\nTo fix the error, you have two choices. One choice is to change the return type of your function to be compatible with the value you’re using the `?` operator on as long as you have no restrictions preventing that. The other choice is to use a `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>` in whatever way is appropriate.\n\nThe error message also mentioned that `?` can be used with `Option<T>` values as well. As with using `?` on `Result`, you can only use `?` on `Option` in a function that returns an `Option`. The behavior of the `?` operator when called on an `Option<T>` is similar to its behavior when called on a `Result<T, E>`: if the value is `None`, the `None` will be returned early from the function at that point. If the value is `Some`, the value inside the `Some` is the resultant value of the expression, and the function continues. Listing 9-11 has an example of a function that finds the last character of the first line in the given text.\n\n```rust\nfn last_char_of_first_line(text: &str) -> Option<char> {\n    text.lines().next()?.chars().last()\n}\n\nfn main() {\n    assert_eq!(\n        last_char_of_first_line(\"Hello, world\\nHow are you today?\"),\n        Some('d')\n    );\n\n    assert_eq!(last_char_of_first_line(\"\"), None);\n    assert_eq!(last_char_of_first_line(\"\\nhi\"), None);\n}\n```\n\nListing 9-11: Using the `?` operator on an `Option<T>` value\n\nThis function returns `Option<char>` because it’s possible that there is a character there, but it’s also possible that there isn’t. This code takes the `text` string slice argument and calls the `lines` method on it, which returns an iterator over the lines in the string. Because this function wants to examine the first line, it calls `next` on the iterator to get the first value from the iterator. If `text` is the empty string, this call to `next` will return `None`, in which case we use `?` to stop and return `None` from `last_char_of_first_line`. If `text` is not the empty string, `next` will return a `Some` value containing a string slice of the first line in `text`.\n\nThe `?` extracts the string slice, and we can call `chars` on that string slice to get an iterator of its characters. We’re interested in the last character in this first line, so we call `last` to return the last item in the iterator. This is an `Option` because it’s possible that the first line is the empty string; for example, if `text` starts with a blank line but has characters on other lines, as in `\"\\nhi\"`. However, if there is a last character on the first line, it will be returned in the `Some` variant. The `?` operator in the middle gives us a concise way to express this logic, allowing us to implement the function in one line. If we couldn’t use the `?` operator on `Option`, we’d have to implement this logic using more method calls or a `match` expression.\n\nNote that you can use the `?` operator on a `Result` in a function that returns `Result`, and you can use the `?` operator on an `Option` in a function that returns `Option`, but you can’t mix and match. The `?` operator won’t automatically convert a `Result` to an `Option` or vice versa; in those cases, you can use methods like the `ok` method on `Result` or the `ok_or` method on `Option` to do the conversion explicitly.\n\nSo far, all the `main` functions we’ve used return `()`. The `main` function is special because it’s the entry point and exit point of an executable program, and there are restrictions on what its return type can be for the program to behave as expected.\n\nLuckily, `main` can also return a `Result<(), E>`. Listing 9-12 has the code from Listing 9-10, but we’ve changed the return type of `main` to be `Result<(), Box<dyn Error>>` and added a return value `Ok(())` to the end. This code will now compile.\n\nFilename: src/main.rs\n\n```rust\nuse std::error::Error;\nuse std::fs::File;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let greeting_file = File::open(\"hello.txt\")?;\n\n    Ok(())\n}\n```\n\nListing 9-12: Changing `main` to return `Result<(), E>` allows the use of the `?` operator on `Result` values.\n\nThe `Box<dyn Error>` type is a _trait object_, which we’ll talk about in the [“Using Trait Objects that Allow for Values of Different Types”](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section in Chapter 17. For now, you can read `Box<dyn Error>` to mean “any kind of error.” Using `?` on a `Result` value in a `main` function with the error type `Box<dyn Error>` is allowed because it allows any `Err` value to be returned early. Even though the body of this `main` function will only ever return errors of type `std::io::Error`, by specifying `Box<dyn Error>`, this signature will continue to be correct even if more code that returns other errors is added to the body of `main`.\n\nWhen a `main` function returns a `Result<(), E>`, the executable will exit with a value of `0` if `main` returns `Ok(())` and will exit with a nonzero value if `main` returns an `Err` value. Executables written in C return integers when they exit: programs that exit successfully return the integer `0`, and programs that error return some integer other than `0`. Rust also returns integers from executables to be compatible with this convention.\n\nThe `main` function may return any types that implement [the `std::process::Termination` trait](../std/process/trait.Termination.html), which contains a function `report` that returns an `ExitCode`. Consult the standard library documentation for more information on implementing the `Termination` trait for your own types.\n\nNow that we’ve discussed the details of calling `panic!` or returning `Result`, let’s return to the topic of how to decide which is appropriate to use in which cases.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Recoverable Errors with Result - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"recoverable-errors-with-result\"><a class=\"header\" href=\"#recoverable-errors-with-result\">Recoverable Errors with <code>Result</code></a></h2>\n<p>Most errors aren’t serious enough to require the program to stop entirely.\nSometimes when a function fails it’s for a reason that you can easily interpret\nand respond to. For example, if you try to open a file and that operation fails\nbecause the file doesn’t exist, you might want to create the file instead of\nterminating the process.</p>\n<p>Recall from <a href=\"ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\">“Handling Potential Failure with <code class=\"hljs\">Result</code>”</a><!--\nignore --> in Chapter 2 that the <code class=\"hljs\">Result</code> enum is defined as having two\nvariants, <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>, as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Result</span></span>&lt;T, E&gt; {\n    <span class=\"hljs-literal\">Ok</span>(T),\n    <span class=\"hljs-literal\">Err</span>(E),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">T</code> and <code class=\"hljs\">E</code> are generic type parameters: we’ll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that <code class=\"hljs\">T</code> represents\nthe type of the value that will be returned in a success case within the <code class=\"hljs\">Ok</code>\nvariant, and <code class=\"hljs\">E</code> represents the type of the error that will be returned in a\nfailure case within the <code class=\"hljs\">Err</code> variant. Because <code class=\"hljs\">Result</code> has these generic type\nparameters, we can use the <code class=\"hljs\">Result</code> type and the functions defined on it in\nmany different situations where the success value and error value we want to\nreturn may differ.</p>\n<p>Let’s call a function that returns a <code class=\"hljs\">Result</code> value because the function could\nfail. In Listing 9-3 we try to open a file.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 9-3: Opening a file</span></p>\n<p>The return type of <code class=\"hljs\">File::open</code> is a <code class=\"hljs\">Result&lt;T, E&gt;</code>. The generic parameter <code class=\"hljs\">T</code>\nhas been filled in by the implementation of <code class=\"hljs\">File::open</code> with the type of the\nsuccess value, <code class=\"hljs\">std::fs::File</code>, which is a file handle. The type of <code class=\"hljs\">E</code> used in\nthe error value is <code class=\"hljs\">std::io::Error</code>. This return type means the call to\n<code class=\"hljs\">File::open</code> might succeed and return a file handle that we can read from or\nwrite to. The function call also might fail: for example, the file might not\nexist, or we might not have permission to access the file. The <code class=\"hljs\">File::open</code>\nfunction needs to have a way to tell us whether it succeeded or failed and at\nthe same time give us either the file handle or error information. This\ninformation is exactly what the <code class=\"hljs\">Result</code> enum conveys.</p>\n<p>In the case where <code class=\"hljs\">File::open</code> succeeds, the value in the variable\n<code class=\"hljs\">greeting_file_result</code> will be an instance of <code class=\"hljs\">Ok</code> that contains a file handle.\nIn the case where it fails, the value in <code class=\"hljs\">greeting_file_result</code> will be an\ninstance of <code class=\"hljs\">Err</code> that contains more information about the kind of error that\noccurred.</p>\n<p>We need to add to the code in Listing 9-3 to take different actions depending\non the value <code class=\"hljs\">File::open</code> returns. Listing 9-4 shows one way to handle the\n<code class=\"hljs\">Result</code> using a basic tool, the <code class=\"hljs\">match</code> expression that we discussed in\nChapter 6.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> greeting_file = <span class=\"hljs-keyword\">match</span> greeting_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(error) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {error:?}\"</span>),\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 9-4: Using a <code class=\"hljs\">match</code> expression to handle the\n<code class=\"hljs\">Result</code> variants that might be returned</span></p>\n<p>Note that, like the <code class=\"hljs\">Option</code> enum, the <code class=\"hljs\">Result</code> enum and its variants have been\nbrought into scope by the prelude, so we don’t need to specify <code class=\"hljs\">Result::</code>\nbefore the <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code> variants in the <code class=\"hljs\">match</code> arms.</p>\n<p>When the result is <code class=\"hljs\">Ok</code>, this code will return the inner <code class=\"hljs\">file</code> value out of\nthe <code class=\"hljs\">Ok</code> variant, and we then assign that file handle value to the variable\n<code class=\"hljs\">greeting_file</code>. After the <code class=\"hljs\">match</code>, we can use the file handle for reading or\nwriting.</p>\n<p>The other arm of the <code class=\"hljs\">match</code> handles the case where we get an <code class=\"hljs\">Err</code> value from\n<code class=\"hljs\">File::open</code>. In this example, we’ve chosen to call the <code class=\"hljs\">panic!</code> macro. If\nthere’s no file named <em>hello.txt</em> in our current directory and we run this\ncode, we’ll see the following output from the <code class=\"hljs\">panic!</code> macro:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/error-handling`\nthread 'main' panicked at src/main.rs:8:23:\nProblem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>As usual, this output tells us exactly what has gone wrong.</p>\n<h3 id=\"matching-on-different-errors\"><a class=\"header\" href=\"#matching-on-different-errors\">Matching on Different Errors</a></h3>\n<p>The code in Listing 9-4 will <code class=\"hljs\">panic!</code> no matter why <code class=\"hljs\">File::open</code> failed.\nHowever, we want to take different actions for different failure reasons. If\n<code class=\"hljs\">File::open</code> failed because the file doesn’t exist, we want to create the file\nand return the handle to the new file. If <code class=\"hljs\">File::open</code> failed for any other\nreason—for example, because we didn’t have permission to open the file—we still\nwant the code to <code class=\"hljs\">panic!</code> in the same way it did in Listing 9-4. For this, we\nadd an inner <code class=\"hljs\">match</code> expression, shown in Listing 9-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::ErrorKind;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> greeting_file = <span class=\"hljs-keyword\">match</span> greeting_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(error) =&gt; <span class=\"hljs-keyword\">match</span> error.kind() {\n            ErrorKind::NotFound =&gt; <span class=\"hljs-keyword\">match</span> File::create(<span class=\"hljs-string\">\"hello.txt\"</span>) {\n                <span class=\"hljs-literal\">Ok</span>(fc) =&gt; fc,\n                <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem creating the file: {e:?}\"</span>),\n            },\n            other_error =&gt; {\n                <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {other_error:?}\"</span>);\n            }\n        },\n    };\n}</code></pre>\n<p><span class=\"caption\">Listing 9-5: Handling different kinds of errors in\ndifferent ways</span></p>\n<p>The type of the value that <code class=\"hljs\">File::open</code> returns inside the <code class=\"hljs\">Err</code> variant is\n<code class=\"hljs\">io::Error</code>, which is a struct provided by the standard library. This struct\nhas a method <code class=\"hljs\">kind</code> that we can call to get an <code class=\"hljs\">io::ErrorKind</code> value. The enum\n<code class=\"hljs\">io::ErrorKind</code> is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an <code class=\"hljs\">io</code>\noperation. The variant we want to use is <code class=\"hljs\">ErrorKind::NotFound</code>, which indicates\nthe file we’re trying to open doesn’t exist yet. So we match on\n<code class=\"hljs\">greeting_file_result</code>, but we also have an inner match on <code class=\"hljs\">error.kind()</code>.</p>\n<p>The condition we want to check in the inner match is whether the value returned\nby <code class=\"hljs\">error.kind()</code> is the <code class=\"hljs\">NotFound</code> variant of the <code class=\"hljs\">ErrorKind</code> enum. If it is,\nwe try to create the file with <code class=\"hljs\">File::create</code>. However, because <code class=\"hljs\">File::create</code>\ncould also fail, we need a second arm in the inner <code class=\"hljs\">match</code> expression. When the\nfile can’t be created, a different error message is printed. The second arm of\nthe outer <code class=\"hljs\">match</code> stays the same, so the program panics on any error besides\nthe missing file error.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"alternatives-to-using-match-with-resultt-e\"><a class=\"header\" href=\"#alternatives-to-using-match-with-resultt-e\">Alternatives to Using <code>match</code> with <code>Result&lt;T, E&gt;</code></a></h4>\n<p>That’s a lot of <code class=\"hljs\">match</code>! The <code class=\"hljs\">match</code> expression is very useful but also very\nmuch a primitive. In Chapter 13, you’ll learn about closures, which are used\nwith many of the methods defined on <code class=\"hljs\">Result&lt;T, E&gt;</code>. These methods can be more\nconcise than using <code class=\"hljs\">match</code> when handling <code class=\"hljs\">Result&lt;T, E&gt;</code> values in your code.</p>\n<p>For example, here’s another way to write the same logic as shown in Listing\n9-5, this time using closures and the <code class=\"hljs\">unwrap_or_else</code> method:</p>\n<!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::ErrorKind;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap_or_else(|error| {\n        <span class=\"hljs-keyword\">if</span> error.kind() == ErrorKind::NotFound {\n            File::create(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap_or_else(|error| {\n                <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem creating the file: {error:?}\"</span>);\n            })\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {error:?}\"</span>);\n        }\n    });\n}</code></pre>\n<p>Although this code has the same behavior as Listing 9-5, it doesn’t contain\nany <code class=\"hljs\">match</code> expressions and is cleaner to read. Come back to this example\nafter you’ve read Chapter 13, and look up the <code class=\"hljs\">unwrap_or_else</code> method in the\nstandard library documentation. Many more of these methods can clean up huge\nnested <code class=\"hljs\">match</code> expressions when you’re dealing with errors.</p>\n</section>\n<h4 id=\"shortcuts-for-panic-on-error-unwrap-and-expect\"><a class=\"header\" href=\"#shortcuts-for-panic-on-error-unwrap-and-expect\">Shortcuts for Panic on Error: <code>unwrap</code> and <code>expect</code></a></h4>\n<p>Using <code class=\"hljs\">match</code> works well enough, but it can be a bit verbose and doesn’t always\ncommunicate intent well. The <code class=\"hljs\">Result&lt;T, E&gt;</code> type has many helper methods\ndefined on it to do various, more specific tasks. The <code class=\"hljs\">unwrap</code> method is a\nshortcut method implemented just like the <code class=\"hljs\">match</code> expression we wrote in\nListing 9-4. If the <code class=\"hljs\">Result</code> value is the <code class=\"hljs\">Ok</code> variant, <code class=\"hljs\">unwrap</code> will return\nthe value inside the <code class=\"hljs\">Ok</code>. If the <code class=\"hljs\">Result</code> is the <code class=\"hljs\">Err</code> variant, <code class=\"hljs\">unwrap</code> will\ncall the <code class=\"hljs\">panic!</code> macro for us. Here is an example of <code class=\"hljs\">unwrap</code> in action:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap();\n}</code></pre></pre>\n<p>If we run this code without a <em>hello.txt</em> file, we’ll see an error message from\nthe <code class=\"hljs\">panic!</code> call that the <code class=\"hljs\">unwrap</code> method makes:</p>\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-04-unwrap\ncargo run\ncopy and paste relevant text\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">thread 'main' panicked at src/main.rs:4:49:\ncalled `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n</code></pre>\n<p>Similarly, the <code class=\"hljs\">expect</code> method lets us also choose the <code class=\"hljs\">panic!</code> error message.\nUsing <code class=\"hljs\">expect</code> instead of <code class=\"hljs\">unwrap</code> and providing good error messages can convey\nyour intent and make tracking down the source of a panic easier. The syntax of\n<code class=\"hljs\">expect</code> looks like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)\n        .expect(<span class=\"hljs-string\">\"hello.txt should be included in this project\"</span>);\n}</code></pre></pre>\n<p>We use <code class=\"hljs\">expect</code> in the same way as <code class=\"hljs\">unwrap</code>: to return the file handle or call\nthe <code class=\"hljs\">panic!</code> macro. The error message used by <code class=\"hljs\">expect</code> in its call to <code class=\"hljs\">panic!</code>\nwill be the parameter that we pass to <code class=\"hljs\">expect</code>, rather than the default\n<code class=\"hljs\">panic!</code> message that <code class=\"hljs\">unwrap</code> uses. Here’s what it looks like:</p>\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-05-expect\ncargo run\ncopy and paste relevant text\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">thread 'main' panicked at src/main.rs:5:10:\nhello.txt should be included in this project: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n</code></pre>\n<p>In production-quality code, most Rustaceans choose <code class=\"hljs\">expect</code> rather than\n<code class=\"hljs\">unwrap</code> and give more context about why the operation is expected to always\nsucceed. That way, if your assumptions are ever proven wrong, you have more\ninformation to use in debugging.</p>\n<h3 id=\"propagating-errors\"><a class=\"header\" href=\"#propagating-errors\">Propagating Errors</a></h3>\n<p>When a function’s implementation calls something that might fail, instead of\nhandling the error within the function itself you can return the error to the\ncalling code so that it can decide what to do. This is known as <em>propagating</em>\nthe error and gives more control to the calling code, where there might be more\ninformation or logic that dictates how the error should be handled than what\nyou have available in the context of your code.</p>\n<p>For example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn’t exist or can’t be read, this function will return those errors\nto the code that called the function.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> username_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username_file = <span class=\"hljs-keyword\">match</span> username_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(e),\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n\n    <span class=\"hljs-keyword\">match</span> username_file.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username) {\n        <span class=\"hljs-literal\">Ok</span>(_) =&gt; <span class=\"hljs-literal\">Ok</span>(username),\n        <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-literal\">Err</span>(e),\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-6: A function that returns errors to the\ncalling code using <code class=\"hljs\">match</code></span></p>\n<p>This function can be written in a much shorter way, but we’re going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe’ll show the shorter way. Let’s look at the return type of the function\nfirst: <code class=\"hljs\">Result&lt;String, io::Error&gt;</code>. This means the function is returning a\nvalue of the type <code class=\"hljs\">Result&lt;T, E&gt;</code>, where the generic parameter <code class=\"hljs\">T</code> has been\nfilled in with the concrete type <code class=\"hljs\">String</code> and the generic type <code class=\"hljs\">E</code> has been\nfilled in with the concrete type <code class=\"hljs\">io::Error</code>.</p>\n<p>If this function succeeds without any problems, the code that calls this\nfunction will receive an <code class=\"hljs\">Ok</code> value that holds a <code class=\"hljs\">String</code>—the <code class=\"hljs\">username</code> that\nthis function read from the file. If this function encounters any problems, the\ncalling code will receive an <code class=\"hljs\">Err</code> value that holds an instance of <code class=\"hljs\">io::Error</code>\nthat contains more information about what the problems were. We chose\n<code class=\"hljs\">io::Error</code> as the return type of this function because that happens to be the\ntype of the error value returned from both of the operations we’re calling in\nthis function’s body that might fail: the <code class=\"hljs\">File::open</code> function and the\n<code class=\"hljs\">read_to_string</code> method.</p>\n<p>The body of the function starts by calling the <code class=\"hljs\">File::open</code> function. Then we\nhandle the <code class=\"hljs\">Result</code> value with a <code class=\"hljs\">match</code> similar to the <code class=\"hljs\">match</code> in Listing 9-4.\nIf <code class=\"hljs\">File::open</code> succeeds, the file handle in the pattern variable <code class=\"hljs\">file</code>\nbecomes the value in the mutable variable <code class=\"hljs\">username_file</code> and the function\ncontinues. In the <code class=\"hljs\">Err</code> case, instead of calling <code class=\"hljs\">panic!</code>, we use the <code class=\"hljs\">return</code>\nkeyword to return early out of the function entirely and pass the error value\nfrom <code class=\"hljs\">File::open</code>, now in the pattern variable <code class=\"hljs\">e</code>, back to the calling code as\nthis function’s error value.</p>\n<p>So, if we have a file handle in <code class=\"hljs\">username_file</code>, the function then creates a\nnew <code class=\"hljs\">String</code> in variable <code class=\"hljs\">username</code> and calls the <code class=\"hljs\">read_to_string</code> method on\nthe file handle in <code class=\"hljs\">username_file</code> to read the contents of the file into\n<code class=\"hljs\">username</code>. The <code class=\"hljs\">read_to_string</code> method also returns a <code class=\"hljs\">Result</code> because it\nmight fail, even though <code class=\"hljs\">File::open</code> succeeded. So we need another <code class=\"hljs\">match</code> to\nhandle that <code class=\"hljs\">Result</code>: if <code class=\"hljs\">read_to_string</code> succeeds, then our function has\nsucceeded, and we return the username from the file that’s now in <code class=\"hljs\">username</code>\nwrapped in an <code class=\"hljs\">Ok</code>. If <code class=\"hljs\">read_to_string</code> fails, we return the error value in the\nsame way that we returned the error value in the <code class=\"hljs\">match</code> that handled the\nreturn value of <code class=\"hljs\">File::open</code>. However, we don’t need to explicitly say\n<code class=\"hljs\">return</code>, because this is the last expression in the function.</p>\n<p>The code that calls this code will then handle getting either an <code class=\"hljs\">Ok</code> value\nthat contains a username or an <code class=\"hljs\">Err</code> value that contains an <code class=\"hljs\">io::Error</code>. It’s\nup to the calling code to decide what to do with those values. If the calling\ncode gets an <code class=\"hljs\">Err</code> value, it could call <code class=\"hljs\">panic!</code> and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don’t have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately.</p>\n<p>This pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator <code class=\"hljs\">?</code> to make this easier.</p>\n<h4 id=\"a-shortcut-for-propagating-errors-the--operator\"><a class=\"header\" href=\"#a-shortcut-for-propagating-errors-the--operator\">A Shortcut for Propagating Errors: the <code>?</code> Operator</a></h4>\n<p>Listing 9-7 shows an implementation of <code class=\"hljs\">read_username_from_file</code> that has the\nsame functionality as in Listing 9-6, but this implementation uses the <code class=\"hljs\">?</code>\noperator.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n    username_file.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username)?;\n    <span class=\"hljs-literal\">Ok</span>(username)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-7: A function that returns errors to the\ncalling code using the <code class=\"hljs\">?</code> operator</span></p>\n<p>The <code class=\"hljs\">?</code> placed after a <code class=\"hljs\">Result</code> value is defined to work in almost the same way\nas the <code class=\"hljs\">match</code> expressions we defined to handle the <code class=\"hljs\">Result</code> values in Listing\n9-6. If the value of the <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Ok</code>, the value inside the <code class=\"hljs\">Ok</code> will\nget returned from this expression, and the program will continue. If the value\nis an <code class=\"hljs\">Err</code>, the <code class=\"hljs\">Err</code> will be returned from the whole function as if we had\nused the <code class=\"hljs\">return</code> keyword so the error value gets propagated to the calling\ncode.</p>\n<p>There is a difference between what the <code class=\"hljs\">match</code> expression from Listing 9-6 does\nand what the <code class=\"hljs\">?</code> operator does: error values that have the <code class=\"hljs\">?</code> operator called\non them go through the <code class=\"hljs\">from</code> function, defined in the <code class=\"hljs\">From</code> trait in the\nstandard library, which is used to convert values from one type into another.\nWhen the <code class=\"hljs\">?</code> operator calls the <code class=\"hljs\">from</code> function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent\nall the ways a function might fail, even if parts might fail for many different\nreasons.</p>\n<p>For example, we could change the <code class=\"hljs\">read_username_from_file</code> function in Listing\n9-7 to return a custom error type named <code class=\"hljs\">OurError</code> that we define. If we also\ndefine <code class=\"hljs\">impl From&lt;io::Error&gt; for OurError</code> to construct an instance of\n<code class=\"hljs\">OurError</code> from an <code class=\"hljs\">io::Error</code>, then the <code class=\"hljs\">?</code> operator calls in the body of\n<code class=\"hljs\">read_username_from_file</code> will call <code class=\"hljs\">from</code> and convert the error types without\nneeding to add any more code to the function.</p>\n<p>In the context of Listing 9-7, the <code class=\"hljs\">?</code> at the end of the <code class=\"hljs\">File::open</code> call will\nreturn the value inside an <code class=\"hljs\">Ok</code> to the variable <code class=\"hljs\">username_file</code>. If an error\noccurs, the <code class=\"hljs\">?</code> operator will return early out of the whole function and give\nany <code class=\"hljs\">Err</code> value to the calling code. The same thing applies to the <code class=\"hljs\">?</code> at the\nend of the <code class=\"hljs\">read_to_string</code> call.</p>\n<p>The <code class=\"hljs\">?</code> operator eliminates a lot of boilerplate and makes this function’s\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the <code class=\"hljs\">?</code>, as shown in Listing 9-8.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n\n    File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username)?;\n\n    <span class=\"hljs-literal\">Ok</span>(username)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-8: Chaining method calls after the <code class=\"hljs\">?</code>\noperator</span></p>\n<p>We’ve moved the creation of the new <code class=\"hljs\">String</code> in <code class=\"hljs\">username</code> to the beginning of\nthe function; that part hasn’t changed. Instead of creating a variable\n<code class=\"hljs\">username_file</code>, we’ve chained the call to <code class=\"hljs\">read_to_string</code> directly onto the\nresult of <code class=\"hljs\">File::open(\"hello.txt\")?</code>. We still have a <code class=\"hljs\">?</code> at the end of the\n<code class=\"hljs\">read_to_string</code> call, and we still return an <code class=\"hljs\">Ok</code> value containing <code class=\"hljs\">username</code>\nwhen both <code class=\"hljs\">File::open</code> and <code class=\"hljs\">read_to_string</code> succeed rather than returning\nerrors. The functionality is again the same as in Listing 9-6 and Listing 9-7;\nthis is just a different, more ergonomic way to write it.</p>\n<p>Listing 9-9 shows a way to make this even shorter using <code class=\"hljs\">fs::read_to_string</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    fs::read_to_string(<span class=\"hljs-string\">\"hello.txt\"</span>)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-9: Using <code class=\"hljs\">fs::read_to_string</code> instead of\nopening and then reading the file</span></p>\n<p>Reading a file into a string is a fairly common operation, so the standard\nlibrary provides the convenient <code class=\"hljs\">fs::read_to_string</code> function that opens the\nfile, creates a new <code class=\"hljs\">String</code>, reads the contents of the file, puts the contents\ninto that <code class=\"hljs\">String</code>, and returns it. Of course, using <code class=\"hljs\">fs::read_to_string</code>\ndoesn’t give us the opportunity to explain all the error handling, so we did it\nthe longer way first.</p>\n<h4 id=\"where-the--operator-can-be-used\"><a class=\"header\" href=\"#where-the--operator-can-be-used\">Where The <code>?</code> Operator Can Be Used</a></h4>\n<p>The <code class=\"hljs\">?</code> operator can only be used in functions whose return type is compatible\nwith the value the <code class=\"hljs\">?</code> is used on. This is because the <code class=\"hljs\">?</code> operator is defined\nto perform an early return of a value out of the function, in the same manner\nas the <code class=\"hljs\">match</code> expression we defined in Listing 9-6. In Listing 9-6, the\n<code class=\"hljs\">match</code> was using a <code class=\"hljs\">Result</code> value, and the early return arm returned an\n<code class=\"hljs\">Err(e)</code> value. The return type of the function has to be a <code class=\"hljs\">Result</code> so that\nit’s compatible with this <code class=\"hljs\">return</code>.</p>\n<p>In Listing 9-10, let’s look at the error we’ll get if we use the <code class=\"hljs\">?</code> operator\nin a <code class=\"hljs\">main</code> function with a return type that is incompatible with the type of\nthe value we use <code class=\"hljs\">?</code> on.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n}</code></pre>\n<p><span class=\"caption\">Listing 9-10: Attempting to use the <code class=\"hljs\">?</code> in the <code class=\"hljs\">main</code>\nfunction that returns <code class=\"hljs\">()</code> won’t compile.</span></p>\n<p>This code opens a file, which might fail. The <code class=\"hljs\">?</code> operator follows the <code class=\"hljs\">Result</code>\nvalue returned by <code class=\"hljs\">File::open</code>, but this <code class=\"hljs\">main</code> function has the return type of\n<code class=\"hljs\">()</code>, not <code class=\"hljs\">Result</code>. When we compile this code, we get the following error\nmessage:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:48</span>\n  |\n3 | fn main() {\n  | --------- this function should return `Result` or `Option` to accept `?`\n4 |     let greeting_file = File::open(\"hello.txt\")?;\n  |                                                ^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `FromResidual&lt;Result&lt;Infallible, std::io::Error&gt;&gt;` is not implemented for `()`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `error-handling` (bin \"error-handling\") due to 1 previous error\n</code></pre>\n<p>This error points out that we’re only allowed to use the <code class=\"hljs\">?</code> operator in a\nfunction that returns <code class=\"hljs\">Result</code>, <code class=\"hljs\">Option</code>, or another type that implements\n<code class=\"hljs\">FromResidual</code>.</p>\n<p>To fix the error, you have two choices. One choice is to change the return type\nof your function to be compatible with the value you’re using the <code class=\"hljs\">?</code> operator\non as long as you have no restrictions preventing that. The other choice is to\nuse a <code class=\"hljs\">match</code> or one of the <code class=\"hljs\">Result&lt;T, E&gt;</code> methods to handle the <code class=\"hljs\">Result&lt;T, E&gt;</code>\nin whatever way is appropriate.</p>\n<p>The error message also mentioned that <code class=\"hljs\">?</code> can be used with <code class=\"hljs\">Option&lt;T&gt;</code> values\nas well. As with using <code class=\"hljs\">?</code> on <code class=\"hljs\">Result</code>, you can only use <code class=\"hljs\">?</code> on <code class=\"hljs\">Option</code> in a\nfunction that returns an <code class=\"hljs\">Option</code>. The behavior of the <code class=\"hljs\">?</code> operator when called\non an <code class=\"hljs\">Option&lt;T&gt;</code> is similar to its behavior when called on a <code class=\"hljs\">Result&lt;T, E&gt;</code>:\nif the value is <code class=\"hljs\">None</code>, the <code class=\"hljs\">None</code> will be returned early from the function at\nthat point. If the value is <code class=\"hljs\">Some</code>, the value inside the <code class=\"hljs\">Some</code> is the\nresultant value of the expression, and the function continues. Listing 9-11 has\nan example of a function that finds the last character of the first line in the\ngiven text.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">last_char_of_first_line</span></span>(text: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">char</span>&gt; {\n    text.lines().next()?.chars().last()\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">        last_char_of_first_line(<span class=\"hljs-string\">\"Hello, world\\nHow are you today?\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-string\">'d'</span>)\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(last_char_of_first_line(<span class=\"hljs-string\">\"\"</span>), <span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(last_char_of_first_line(<span class=\"hljs-string\">\"\\nhi\"</span>), <span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-11: Using the <code class=\"hljs\">?</code> operator on an <code class=\"hljs\">Option&lt;T&gt;</code>\nvalue</span></p>\n<p>This function returns <code class=\"hljs\">Option&lt;char&gt;</code> because it’s possible that there is a\ncharacter there, but it’s also possible that there isn’t. This code takes the\n<code class=\"hljs\">text</code> string slice argument and calls the <code class=\"hljs\">lines</code> method on it, which returns\nan iterator over the lines in the string. Because this function wants to\nexamine the first line, it calls <code class=\"hljs\">next</code> on the iterator to get the first value\nfrom the iterator. If <code class=\"hljs\">text</code> is the empty string, this call to <code class=\"hljs\">next</code> will\nreturn <code class=\"hljs\">None</code>, in which case we use <code class=\"hljs\">?</code> to stop and return <code class=\"hljs\">None</code> from\n<code class=\"hljs\">last_char_of_first_line</code>. If <code class=\"hljs\">text</code> is not the empty string, <code class=\"hljs\">next</code> will\nreturn a <code class=\"hljs\">Some</code> value containing a string slice of the first line in <code class=\"hljs\">text</code>.</p>\n<p>The <code class=\"hljs\">?</code> extracts the string slice, and we can call <code class=\"hljs\">chars</code> on that string slice\nto get an iterator of its characters. We’re interested in the last character in\nthis first line, so we call <code class=\"hljs\">last</code> to return the last item in the iterator.\nThis is an <code class=\"hljs\">Option</code> because it’s possible that the first line is the empty\nstring; for example, if <code class=\"hljs\">text</code> starts with a blank line but has characters on\nother lines, as in <code class=\"hljs\">\"\\nhi\"</code>. However, if there is a last character on the first\nline, it will be returned in the <code class=\"hljs\">Some</code> variant. The <code class=\"hljs\">?</code> operator in the middle\ngives us a concise way to express this logic, allowing us to implement the\nfunction in one line. If we couldn’t use the <code class=\"hljs\">?</code> operator on <code class=\"hljs\">Option</code>, we’d\nhave to implement this logic using more method calls or a <code class=\"hljs\">match</code> expression.</p>\n<p>Note that you can use the <code class=\"hljs\">?</code> operator on a <code class=\"hljs\">Result</code> in a function that returns\n<code class=\"hljs\">Result</code>, and you can use the <code class=\"hljs\">?</code> operator on an <code class=\"hljs\">Option</code> in a function that\nreturns <code class=\"hljs\">Option</code>, but you can’t mix and match. The <code class=\"hljs\">?</code> operator won’t\nautomatically convert a <code class=\"hljs\">Result</code> to an <code class=\"hljs\">Option</code> or vice versa; in those cases,\nyou can use methods like the <code class=\"hljs\">ok</code> method on <code class=\"hljs\">Result</code> or the <code class=\"hljs\">ok_or</code> method on\n<code class=\"hljs\">Option</code> to do the conversion explicitly.</p>\n<p>So far, all the <code class=\"hljs\">main</code> functions we’ve used return <code class=\"hljs\">()</code>. The <code class=\"hljs\">main</code> function is\nspecial because it’s the entry point and exit point of an executable program,\nand there are restrictions on what its return type can be for the program to\nbehave as expected.</p>\n<p>Luckily, <code class=\"hljs\">main</code> can also return a <code class=\"hljs\">Result&lt;(), E&gt;</code>. Listing 9-12 has the code\nfrom Listing 9-10, but we’ve changed the return type of <code class=\"hljs\">main</code> to be\n<code class=\"hljs\">Result&lt;(), Box&lt;dyn Error&gt;&gt;</code> and added a return value <code class=\"hljs\">Ok(())</code> to the end. This\ncode will now compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n<span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}</code></pre>\n<p><span class=\"caption\">Listing 9-12: Changing <code class=\"hljs\">main</code> to return <code class=\"hljs\">Result&lt;(), E&gt;</code>\nallows the use of the <code class=\"hljs\">?</code> operator on <code class=\"hljs\">Result</code> values.</span></p>\n<p>The <code class=\"hljs\">Box&lt;dyn Error&gt;</code> type is a <em>trait object</em>, which we’ll talk about in the\n<a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“Using Trait Objects that Allow for Values of Different\nTypes”</a><!-- ignore --> section in Chapter 17. For now, you can\nread <code class=\"hljs\">Box&lt;dyn Error&gt;</code> to mean “any kind of error.” Using <code class=\"hljs\">?</code> on a <code class=\"hljs\">Result</code>\nvalue in a <code class=\"hljs\">main</code> function with the error type <code class=\"hljs\">Box&lt;dyn Error&gt;</code> is allowed\nbecause it allows any <code class=\"hljs\">Err</code> value to be returned early. Even though the body of\nthis <code class=\"hljs\">main</code> function will only ever return errors of type <code class=\"hljs\">std::io::Error</code>, by\nspecifying <code class=\"hljs\">Box&lt;dyn Error&gt;</code>, this signature will continue to be correct even if\nmore code that returns other errors is added to the body of <code class=\"hljs\">main</code>.</p>\n<p>When a <code class=\"hljs\">main</code> function returns a <code class=\"hljs\">Result&lt;(), E&gt;</code>, the executable will exit with\na value of <code class=\"hljs\">0</code> if <code class=\"hljs\">main</code> returns <code class=\"hljs\">Ok(())</code> and will exit with a nonzero value if\n<code class=\"hljs\">main</code> returns an <code class=\"hljs\">Err</code> value. Executables written in C return integers when\nthey exit: programs that exit successfully return the integer <code class=\"hljs\">0</code>, and programs\nthat error return some integer other than <code class=\"hljs\">0</code>. Rust also returns integers from\nexecutables to be compatible with this convention.</p>\n<p>The <code class=\"hljs\">main</code> function may return any types that implement <a href=\"../std/process/trait.Termination.html\">the\n<code class=\"hljs\">std::process::Termination</code> trait</a><!-- ignore -->, which contains\na function <code class=\"hljs\">report</code> that returns an <code class=\"hljs\">ExitCode</code>. Consult the standard library\ndocumentation for more information on implementing the <code class=\"hljs\">Termination</code> trait for\nyour own types.</p>\n<p>Now that we’ve discussed the details of calling <code class=\"hljs\">panic!</code> or returning <code class=\"hljs\">Result</code>,\nlet’s return to the topic of how to decide which is appropriate to use in which\ncases.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch09-01-unrecoverable-errors-with-panic.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch09-03-to-panic-or-not-to-panic.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch09-01-unrecoverable-errors-with-panic.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch09-03-to-panic-or-not-to-panic.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:21.713Z"
}