{
	"title": "Child in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/struct.Child.html",
	"markdown": "# Child in std::process - Rust\n\n## Struct [std](../index.html)::[process](index.html)::[Child](#)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#215-253) ·\n\n```\npub struct Child {\n    pub stdin: Option<ChildStdin>,\n    pub stdout: Option<ChildStdout>,\n    pub stderr: Option<ChildStderr>,\n    /* private fields */\n}\n```\n\nExpand description\n\nRepresentation of a running or exited child process.\n\nThis structure is used to represent and manage child processes. A child process is created via the [`Command`](struct.Command.html \"struct std::process::Command\") struct, which configures the spawning process and can itself be constructed using a builder-style interface.\n\nThere is no implementation of [`Drop`](../ops/trait.Drop.html \"trait std::ops::Drop\") for child processes, so if you do not ensure the `Child` has exited then it will continue to run, even after the `Child` handle to the child process has gone out of scope.\n\nCalling [`wait`](about:blank/struct.Child.html#method.wait \"method std::process::Child::wait\") (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.\n\n## [§](#warning)Warning\n\nOn some systems, calling [`wait`](about:blank/struct.Child.html#method.wait \"method std::process::Child::wait\") or similar is necessary for the OS to release resources. A process that terminated but has not been waited on is still around as a “zombie”. Leaving too many zombies around may exhaust global resources (for example process IDs).\n\nThe standard library does _not_ automatically wait on child processes (not even if the `Child` is dropped), it is up to the application developer to do so. As a consequence, dropping `Child` handles without waiting on them first is not recommended in long-running applications.\n\n## [§](#examples)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::process::Command;\n\nlet mut child = Command::new(\"/bin/cat\")\n    .arg(\"file.txt\")\n    .spawn()\n    .expect(\"failed to execute child\");\n\nlet ecode = child.wait().expect(\"failed to wait on child\");\n\nassert!(ecode.success());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+child+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.spawn()%0A++++++++.expect(%22failed+to+execute+child%22);%0A++++%0A++++let+ecode+=+child.wait().expect(%22failed+to+wait+on+child%22);%0A++++%0A++++assert!(ecode.success());%0A%7D&edition=2021)\n\nThe handle for writing to the child’s standard input (stdin), if it has been captured. You might find it helpful to do\n\n[ⓘ](# \"This example is not tested\")\n\n```\nlet stdin = child.stdin.take().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stdin+=+child.stdin.take().unwrap();%0A%7D&edition=2021)\n\nto avoid partially moving the `child` and thus blocking yourself from calling functions on `child` while using `stdin`.\n\nThe handle for reading from the child’s standard output (stdout), if it has been captured. You might find it helpful to do\n\n[ⓘ](# \"This example is not tested\")\n\n```\nlet stdout = child.stdout.take().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stdout+=+child.stdout.take().unwrap();%0A%7D&edition=2021)\n\nto avoid partially moving the `child` and thus blocking yourself from calling functions on `child` while using `stdout`.\n\nThe handle for reading from the child’s standard error (stderr), if it has been captured. You might find it helpful to do\n\n[ⓘ](# \"This example is not tested\")\n\n```\nlet stderr = child.stderr.take().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stderr+=+child.stderr.take().unwrap();%0A%7D&edition=2021)\n\nto avoid partially moving the `child` and thus blocking yourself from calling functions on `child` while using `stderr`.\n\n[source](about:blank/src/std/process.rs.html#2082-2259)[§](#impl-Child)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#2108-2110)\n\nForces the child process to exit. If the child has already exited, `Ok(())` is returned.\n\nThe mapping to [`ErrorKind`](../io/enum.ErrorKind.html \"enum std::io::ErrorKind\")s is not part of the compatibility contract of the function.\n\nThis is equivalent to sending a SIGKILL on Unix platforms.\n\n##### [§](#examples-1)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nlet mut command = Command::new(\"yes\");\nif let Ok(mut child) = command.spawn() {\n    child.kill().expect(\"command couldn't be killed\");\n} else {\n    println!(\"yes command didn't start\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22yes%22);%0A++++if+let+Ok(mut+child)+=+command.spawn()+%7B%0A++++++++child.kill().expect(%22command+couldn%27t+be+killed%22);%0A++++%7D+else+%7B%0A++++++++println!(%22yes+command+didn%27t+start%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.3.0 · [source](about:blank/src/std/process.rs.html#2130-2132)\n\nReturns the OS-assigned process identifier associated with this child.\n\n##### [§](#examples-2)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nlet mut command = Command::new(\"ls\");\nif let Ok(child) = command.spawn() {\n    println!(\"Child's ID is {}\", child.id());\n} else {\n    println!(\"ls command didn't start\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22ls%22);%0A++++if+let+Ok(child)+=+command.spawn()+%7B%0A++++++++println!(%22Child%27s+ID+is+%7B%7D%22,+child.id());%0A++++%7D+else+%7B%0A++++++++println!(%22ls+command+didn%27t+start%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#2159-2162)\n\nWaits for the child to exit completely, returning the status that it exited with. This function will continue to have the same return value after it has been called at least once.\n\nThe stdin handle to the child process, if any, will be closed before waiting. This helps avoid deadlock: it ensures that the child does not block waiting for input from the parent, while the parent waits for the child to exit.\n\n##### [§](#examples-3)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nlet mut command = Command::new(\"ls\");\nif let Ok(mut child) = command.spawn() {\n    child.wait().expect(\"command wasn't running\");\n    println!(\"Child has finished its execution!\");\n} else {\n    println!(\"ls command didn't start\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22ls%22);%0A++++if+let+Ok(mut+child)+=+command.spawn()+%7B%0A++++++++child.wait().expect(%22command+wasn%27t+running%22);%0A++++++++println!(%22Child+has+finished+its+execution!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22ls+command+didn%27t+start%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.18.0 · [source](about:blank/src/std/process.rs.html#2199-2201)\n\nAttempts to collect the exit status of the child if it has already exited.\n\nThis function will not block the calling thread and will only check to see if the child process has exited or not. If the child has exited then on Unix the process ID is reaped. This function is guaranteed to repeatedly return a successful exit status so long as the child has already exited.\n\nIf the child has exited, then `Ok(Some(status))` is returned. If the exit status is not available at this time then `Ok(None)` is returned. If an error occurs, then that error is returned.\n\nNote that unlike `wait`, this function will not attempt to drop stdin.\n\n##### [§](#examples-4)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nlet mut child = Command::new(\"ls\").spawn().unwrap();\n\nmatch child.try_wait() {\n    Ok(Some(status)) => println!(\"exited with: {status}\"),\n    Ok(None) => {\n        println!(\"status not ready yet, let's really wait\");\n        let res = child.wait();\n        println!(\"result: {res:?}\");\n    }\n    Err(e) => println!(\"error attempting to wait: {e}\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+child+=+Command::new(%22ls%22).spawn().unwrap();%0A++++%0A++++match+child.try_wait()+%7B%0A++++++++Ok(Some(status))+=%3E+println!(%22exited+with:+%7Bstatus%7D%22),%0A++++++++Ok(None)+=%3E+%7B%0A++++++++++++println!(%22status+not+ready+yet,+let%27s+really+wait%22);%0A++++++++++++let+res+=+child.wait();%0A++++++++++++println!(%22result:+%7Bres:?%7D%22);%0A++++++++%7D%0A++++++++Err(e)+=%3E+println!(%22error+attempting+to+wait:+%7Be%7D%22),%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#2236-2258)\n\nSimultaneously waits for the child to exit and collect all remaining output on the stdout/stderr handles, returning an `Output` instance.\n\nThe stdin handle to the child process, if any, will be closed before waiting. This helps avoid deadlock: it ensures that the child does not block waiting for input from the parent, while the parent waits for the child to exit.\n\nBy default, stdin, stdout and stderr are inherited from the parent. In order to capture the output into this `Result<Output>` it is necessary to create new pipes between parent and child. Use `stdout(Stdio::piped())` or `stderr(Stdio::piped())`, respectively.\n\n##### [§](#examples-5)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::process::{Command, Stdio};\n\nlet child = Command::new(\"/bin/cat\")\n    .arg(\"file.txt\")\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(\"failed to execute child\");\n\nlet output = child\n    .wait_with_output()\n    .expect(\"failed to wait on child\");\n\nassert!(output.status.success());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+child+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+to+execute+child%22);%0A++++%0A++++let+output+=+child%0A++++++++.wait_with_output()%0A++++++++.expect(%22failed+to+wait+on+child%22);%0A++++%0A++++assert!(output.status.success());%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/windows/process.rs.html#45-50)[§](#impl-AsHandle-for-Child)\n\nAvailable on **Windows** only.\n\n1.2.0 · [source](about:blank/src/std/os/windows/process.rs.html#37-42)[§](#impl-AsRawHandle-for-Child)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/sys/pal/unix/process/process_unix.rs.html#1105-1119)[§](#impl-ChildExt-for-Child)\n\n[source](about:blank/src/std/sys/pal/unix/process/process_unix.rs.html#1106-1111)[§](#method.pidfd)\n\n🔬This is a nightly-only experimental API. (`linux_pidfd` [#82971](https://github.com/rust-lang/rust/issues/82971))\n\nAvailable on **Linux** only.\n\nObtains a reference to the [`PidFd`](../os/linux/process/struct.PidFd.html \"struct std::os::linux::process::PidFd\") created for this [`Child`](struct.Child.html \"struct std::process::Child\"), if available. [Read more](about:blank/os/linux/process/trait.ChildExt.html#tymethod.pidfd)\n\n[source](about:blank/src/std/sys/pal/unix/process/process_unix.rs.html#1113-1118)[§](#method.take_pidfd)\n\n🔬This is a nightly-only experimental API. (`linux_pidfd` [#82971](https://github.com/rust-lang/rust/issues/82971))\n\nAvailable on **Linux** only.\n\n[source](about:blank/src/std/os/windows/process.rs.html#410-414)[§](#impl-ChildExt-for-Child-1)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/process.rs.html#411-413)[§](#method.main_thread_handle)\n\n🔬This is a nightly-only experimental API. (`windows_process_extensions_main_thread_handle` [#96723](https://github.com/rust-lang/rust/issues/96723))\n\nExtracts the main thread raw handle, without taking ownership\n\n1.16.0 · [source](about:blank/src/std/process.rs.html#284-292)[§](#impl-Debug-for-Child)\n\n1.63.0 · [source](about:blank/src/std/os/windows/process.rs.html#60-65)[§](#impl-From%3CChild%3E-for-OwnedHandle)\n\nAvailable on **Windows** only.\n\n1.4.0 · [source](about:blank/src/std/os/windows/process.rs.html#53-57)[§](#impl-IntoRawHandle-for-Child)\n\nAvailable on **Windows** only.\n\n[§](#impl-Freeze-for-Child)\n\n[§](#impl-RefUnwindSafe-for-Child)\n\n[§](#impl-Send-for-Child)\n\n[§](#impl-Sync-for-Child)\n\n[§](#impl-Unpin-for-Child)\n\n[§](#impl-UnwindSafe-for-Child)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Representation of a running or exited child process.\"><title>Child in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Child</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Child</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#fields\">Fields</a></h3><ul class=\"block structfield\"><li><a href=\"#structfield.stderr\">stderr</a></li><li><a href=\"#structfield.stdin\">stdin</a></li><li><a href=\"#structfield.stdout\">stdout</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.id\">id</a></li><li><a href=\"#method.kill\">kill</a></li><li><a href=\"#method.try_wait\">try_wait</a></li><li><a href=\"#method.wait\">wait</a></li><li><a href=\"#method.wait_with_output\">wait_with_output</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsHandle-for-Child\">AsHandle</a></li><li><a href=\"#impl-AsRawHandle-for-Child\">AsRawHandle</a></li><li><a href=\"#impl-ChildExt-for-Child\">ChildExt</a></li><li><a href=\"#impl-ChildExt-for-Child-1\">ChildExt</a></li><li><a href=\"#impl-Debug-for-Child\">Debug</a></li><li><a href=\"#impl-From%3CChild%3E-for-OwnedHandle\">From&lt;Child&gt;</a></li><li><a href=\"#impl-IntoRawHandle-for-Child\">IntoRawHandle</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Child\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Child\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Child\">Send</a></li><li><a href=\"#impl-Sync-for-Child\">Sync</a></li><li><a href=\"#impl-Unpin-for-Child\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Child\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"struct\" href=\"#\">Child</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#215-253\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Child {\n    pub stdin: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a>&gt;,\n    pub stdout: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\">ChildStdout</a>&gt;,\n    pub stderr: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\">ChildStderr</a>&gt;,\n    <span class=\"comment\">/* private fields */</span>\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Representation of a running or exited child process.</p>\n<p>This structure is used to represent and manage child processes. A child\nprocess is created via the <a href=\"struct.Command.html\" title=\"struct std::process::Command\"><code>Command</code></a> struct, which configures the\nspawning process and can itself be constructed using a builder-style\ninterface.</p>\n<p>There is no implementation of <a href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\"><code>Drop</code></a> for child processes,\nso if you do not ensure the <code>Child</code> has exited then it will continue to\nrun, even after the <code>Child</code> handle to the child process has gone out of\nscope.</p>\n<p>Calling <a href=\"struct.Child.html#method.wait\" title=\"method std::process::Child::wait\"><code>wait</code></a> (or other functions that wrap around it) will make\nthe parent process wait until the child has actually exited before\ncontinuing.</p>\n<h2 id=\"warning\"><a class=\"doc-anchor\" href=\"#warning\">§</a>Warning</h2>\n<p>On some systems, calling <a href=\"struct.Child.html#method.wait\" title=\"method std::process::Child::wait\"><code>wait</code></a> or similar is necessary for the OS to\nrelease resources. A process that terminated but has not been waited on is\nstill around as a “zombie”. Leaving too many zombies around may exhaust\nglobal resources (for example process IDs).</p>\n<p>The standard library does <em>not</em> automatically wait on child processes (not\neven if the <code>Child</code> is dropped), it is up to the application developer to do\nso. As a consequence, dropping <code>Child</code> handles without waiting on them first\nis not recommended in long-running applications.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"failed to execute child\"</span>);\n\n<span class=\"kw\">let </span>ecode = child.wait().expect(<span class=\"string\">\"failed to wait on child\"</span>);\n\n<span class=\"macro\">assert!</span>(ecode.success());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+child+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.spawn()%0A++++++++.expect(%22failed+to+execute+child%22);%0A++++%0A++++let+ecode+=+child.wait().expect(%22failed+to+wait+on+child%22);%0A++++%0A++++assert!(ecode.success());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"fields\" class=\"fields section-header\">Fields<a href=\"#fields\" class=\"anchor\">§</a></h2><span id=\"structfield.stdin\" class=\"structfield section-header\"><a href=\"#structfield.stdin\" class=\"anchor field\">§</a><code>stdin: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a>&gt;</code></span><div class=\"docblock\"><p>The handle for writing to the child’s standard input (stdin), if it\nhas been captured. You might find it helpful to do</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>stdin = child.stdin.take().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stdin+=+child.stdin.take().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>to avoid partially moving the <code>child</code> and thus blocking yourself from calling\nfunctions on <code>child</code> while using <code>stdin</code>.</p>\n</div><span id=\"structfield.stdout\" class=\"structfield section-header\"><a href=\"#structfield.stdout\" class=\"anchor field\">§</a><code>stdout: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\">ChildStdout</a>&gt;</code></span><div class=\"docblock\"><p>The handle for reading from the child’s standard output (stdout), if it\nhas been captured. You might find it helpful to do</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>stdout = child.stdout.take().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stdout+=+child.stdout.take().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>to avoid partially moving the <code>child</code> and thus blocking yourself from calling\nfunctions on <code>child</code> while using <code>stdout</code>.</p>\n</div><span id=\"structfield.stderr\" class=\"structfield section-header\"><a href=\"#structfield.stderr\" class=\"anchor field\">§</a><code>stderr: <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\">ChildStderr</a>&gt;</code></span><div class=\"docblock\"><p>The handle for reading from the child’s standard error (stderr), if it\nhas been captured. You might find it helpful to do</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>stderr = child.stderr.take().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+stderr+=+child.stderr.take().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>to avoid partially moving the <code>child</code> and thus blocking yourself from calling\nfunctions on <code>child</code> while using <code>stderr</code>.</p>\n</div><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Child\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#2082-2259\">source</a><a href=\"#impl-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.kill\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2108-2110\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.kill\" class=\"fn\">kill</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Forces the child process to exit. If the child has already exited, <code>Ok(())</code>\nis returned.</p>\n<p>The mapping to <a href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\"><code>ErrorKind</code></a>s is not part of the compatibility contract of the function.</p>\n<p>This is equivalent to sending a SIGKILL on Unix platforms.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>command = Command::new(<span class=\"string\">\"yes\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>child) = command.spawn() {\n    child.kill().expect(<span class=\"string\">\"command couldn't be killed\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"yes command didn't start\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22yes%22);%0A++++if+let+Ok(mut+child)+=+command.spawn()+%7B%0A++++++++child.kill().expect(%22command+couldn't+be+killed%22);%0A++++%7D+else+%7B%0A++++++++println!(%22yes+command+didn't+start%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.id\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2130-2132\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.id\" class=\"fn\">id</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the OS-assigned process identifier associated with this child.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>command = Command::new(<span class=\"string\">\"ls\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(child) = command.spawn() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Child's ID is {}\"</span>, child.id());\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"ls command didn't start\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22ls%22);%0A++++if+let+Ok(child)+=+command.spawn()+%7B%0A++++++++println!(%22Child's+ID+is+%7B%7D%22,+child.id());%0A++++%7D+else+%7B%0A++++++++println!(%22ls+command+didn't+start%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2159-2162\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait\" class=\"fn\">wait</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.</p>\n<p>The stdin handle to the child process, if any, will be closed\nbefore waiting. This helps avoid deadlock: it ensures that the\nchild does not block waiting for input from the parent, while\nthe parent waits for the child to exit.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>command = Command::new(<span class=\"string\">\"ls\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">mut </span>child) = command.spawn() {\n    child.wait().expect(<span class=\"string\">\"command wasn't running\"</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Child has finished its execution!\"</span>);\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"ls command didn't start\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+command+=+Command::new(%22ls%22);%0A++++if+let+Ok(mut+child)+=+command.spawn()+%7B%0A++++++++child.wait().expect(%22command+wasn't+running%22);%0A++++++++println!(%22Child+has+finished+its+execution!%22);%0A++++%7D+else+%7B%0A++++++++println!(%22ls+command+didn't+start%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_wait\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2199-2201\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_wait\" class=\"fn\">try_wait</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to collect the exit status of the child if it has already\nexited.</p>\n<p>This function will not block the calling thread and will only\ncheck to see if the child process has exited or not. If the child has\nexited then on Unix the process ID is reaped. This function is\nguaranteed to repeatedly return a successful exit status so long as the\nchild has already exited.</p>\n<p>If the child has exited, then <code>Ok(Some(status))</code> is returned. If the\nexit status is not available at this time then <code>Ok(None)</code> is returned.\nIf an error occurs, then that error is returned.</p>\n<p>Note that unlike <code>wait</code>, this function will not attempt to drop stdin.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child = Command::new(<span class=\"string\">\"ls\"</span>).spawn().unwrap();\n\n<span class=\"kw\">match </span>child.try_wait() {\n    <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>(status)) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"exited with: {status}\"</span>),\n    <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"status not ready yet, let's really wait\"</span>);\n        <span class=\"kw\">let </span>res = child.wait();\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"result: {res:?}\"</span>);\n    }\n    <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"error attempting to wait: {e}\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+child+=+Command::new(%22ls%22).spawn().unwrap();%0A++++%0A++++match+child.try_wait()+%7B%0A++++++++Ok(Some(status))+=%3E+println!(%22exited+with:+%7Bstatus%7D%22),%0A++++++++Ok(None)+=%3E+%7B%0A++++++++++++println!(%22status+not+ready+yet,+let's+really+wait%22);%0A++++++++++++let+res+=+child.wait();%0A++++++++++++println!(%22result:+%7Bres:?%7D%22);%0A++++++++%7D%0A++++++++Err(e)+=%3E+println!(%22error+attempting+to+wait:+%7Be%7D%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wait_with_output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2236-2258\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.wait_with_output\" class=\"fn\">wait_with_output</a>(self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Output.html\" title=\"struct std::process::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an <code>Output</code>\ninstance.</p>\n<p>The stdin handle to the child process, if any, will be closed\nbefore waiting. This helps avoid deadlock: it ensures that the\nchild does not block waiting for input from the parent, while\nthe parent waits for the child to exit.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent.\nIn order to capture the output into this <code>Result&lt;Output&gt;</code> it is\nnecessary to create new pipes between parent and child. Use\n<code>stdout(Stdio::piped())</code> or <code>stderr(Stdio::piped())</code>, respectively.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\n<span class=\"kw\">let </span>child = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .stdout(Stdio::piped())\n    .spawn()\n    .expect(<span class=\"string\">\"failed to execute child\"</span>);\n\n<span class=\"kw\">let </span>output = child\n    .wait_with_output()\n    .expect(<span class=\"string\">\"failed to wait on child\"</span>);\n\n<span class=\"macro\">assert!</span>(output.status.success());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++let+child+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.stdout(Stdio::piped())%0A++++++++.spawn()%0A++++++++.expect(%22failed+to+execute+child%22);%0A++++%0A++++let+output+=+child%0A++++++++.wait_with_output()%0A++++++++.expect(%22failed+to+wait+on+child%22);%0A++++%0A++++assert!(output.status.success());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-Child\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#45-50\">source</a></span><a href=\"#impl-AsHandle-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#47-49\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawHandle-for-Child\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#37-42\">source</a></span><a href=\"#impl-AsRawHandle-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#39-41\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Extracts the raw handle. <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ChildExt-for-Child\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html#1105-1119\">source</a><a href=\"#impl-ChildExt-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/linux/process/trait.ChildExt.html\" title=\"trait std::os::linux::process::ChildExt\">ChildExt</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pidfd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html#1106-1111\">source</a><a href=\"#method.pidfd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/process/trait.ChildExt.html#tymethod.pidfd\" class=\"fn\">pidfd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;<a class=\"struct\" href=\"../os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\">PidFd</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linux_pidfd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82971\">#82971</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Obtains a reference to the <a href=\"../os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\"><code>PidFd</code></a> created for this <a href=\"struct.Child.html\" title=\"struct std::process::Child\"><code>Child</code></a>, if available. <a href=\"../os/linux/process/trait.ChildExt.html#tymethod.pidfd\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_pidfd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html#1113-1118\">source</a><a href=\"#method.take_pidfd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/process/trait.ChildExt.html#tymethod.take_pidfd\" class=\"fn\">take_pidfd</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\">PidFd</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linux_pidfd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82971\">#82971</a>)</span></div><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span><div class=\"docblock\">Takes ownership of the <a href=\"../os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\"><code>PidFd</code></a> created for this <a href=\"struct.Child.html\" title=\"struct std::process::Child\"><code>Child</code></a>, if available. <a href=\"../os/linux/process/trait.ChildExt.html#tymethod.take_pidfd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ChildExt-for-Child-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#410-414\">source</a><a href=\"#impl-ChildExt-for-Child-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/process/trait.ChildExt.html\" title=\"trait std::os::windows::process::ChildExt\">ChildExt</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.main_thread_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#411-413\">source</a><a href=\"#method.main_thread_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.ChildExt.html#tymethod.main_thread_handle\" class=\"fn\">main_thread_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_main_thread_handle</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96723\">#96723</a>)</span></div></span><div class=\"docblock\">Extracts the main thread raw handle, without taking ownership</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Child\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#284-292\">source</a></span><a href=\"#impl-Debug-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#285-291\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CChild%3E-for-OwnedHandle\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#60-65\">source</a></span><a href=\"#impl-From%3CChild%3E-for-OwnedHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a>&gt; for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#62-64\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(child: <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a>) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.Child.html\" title=\"struct std::process::Child\"><code>Child</code></a>’s process handle.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawHandle-for-Child\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#53-57\">source</a></span><a href=\"#impl-IntoRawHandle-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.IntoRawHandle.html\" title=\"trait std::os::windows::io::IntoRawHandle\">IntoRawHandle</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#54-56\">source</a><a href=\"#method.into_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\" class=\"fn\">into_raw_handle</a>(self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying handle. <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Child\" class=\"impl\"><a href=\"#impl-Freeze-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section><section id=\"impl-RefUnwindSafe-for-Child\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section><section id=\"impl-Send-for-Child\" class=\"impl\"><a href=\"#impl-Send-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section><section id=\"impl-Sync-for-Child\" class=\"impl\"><a href=\"#impl-Sync-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section><section id=\"impl-Unpin-for-Child\" class=\"impl\"><a href=\"#impl-Unpin-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section><section id=\"impl-UnwindSafe-for-Child\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Child\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:32.045Z"
}