{
	"title": "Splitting Borrows - The Rustonomicon",
	"url": "https://doc.rust-lang.org/stable/nomicon/borrow-splitting.html",
	"markdown": "# Splitting Borrows - The Rustonomicon\n\nThe mutual exclusion property of mutable references can be very limiting when working with a composite structure. The borrow checker (a.k.a. borrowck) understands some basic stuff, but will fall over pretty easily. It does understand structs sufficiently to know that it's possible to borrow disjoint fields of a struct simultaneously. So this works today:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo {\n    a: i32,\n    b: i32,\n    c: i32,\n}\n\nlet mut x = Foo {a: 0, b: 0, c: 0};\nlet a = &mut x.a;\nlet b = &mut x.b;\nlet c = &x.c;\n*b += 1;\nlet c2 = &x.c;\n*a += 10;\nprintln!(\"{} {} {} {}\", a, b, c, c2);\n}\n```\n\nHowever borrowck doesn't understand arrays or slices in any way, so this doesn't work:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = [1, 2, 3];\nlet a = &mut x[0];\nlet b = &mut x[1];\nprintln!(\"{} {}\", a, b);\n}\n```\n\n```text\nerror[E0499]: cannot borrow `x[..]` as mutable more than once at a time\n --> src/lib.rs:4:18\n  |\n3 |     let a = &mut x[0];\n  |                  ---- first mutable borrow occurs here\n4 |     let b = &mut x[1];\n  |                  ^^^^ second mutable borrow occurs here\n5 |     println!(\"{} {}\", a, b);\n6 | }\n  | - first borrow ends here\n\nerror: aborting due to previous error\n\n```\n\nWhile it was plausible that borrowck could understand this simple case, it's pretty clearly hopeless for borrowck to understand disjointness in general container types like a tree, especially if distinct keys actually _do_ map to the same value.\n\nIn order to \"teach\" borrowck that what we're doing is ok, we need to drop down to unsafe code. For instance, mutable slices expose a `split_at_mut` function that consumes the slice and returns two mutable slices. One for everything to the left of the index, and one for everything to the right. Intuitively we know this is safe because the slices don't overlap, and therefore alias. However the implementation requires some unsafety:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::slice::from_raw_parts_mut;\nstruct FakeSlice<T>(T);\nimpl<T> FakeSlice<T> {\nfn len(&self) -> usize { unimplemented!() }\nfn as_mut_ptr(&mut self) -> *mut T { unimplemented!() }\npub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n\n    unsafe {\n        assert!(mid <= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.add(mid), len - mid))\n    }\n}\n}\n}\n```\n\nThis is actually a bit subtle. So as to avoid ever making two `&mut`'s to the same value, we explicitly construct brand-new slices through raw pointers.\n\nHowever more subtle is how iterators that yield mutable references work. The iterator trait is defined as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n}\n}\n```\n\nGiven this definition, Self::Item has _no_ connection to `self`. This means that we can call `next` several times in a row, and hold onto all the results _concurrently_. This is perfectly fine for by-value iterators, which have exactly these semantics. It's also actually fine for shared references, as they admit arbitrarily many references to the same thing (although the iterator needs to be a separate object from the thing being shared).\n\nBut mutable references make this a mess. At first glance, they might seem completely incompatible with this API, as it would produce multiple mutable references to the same object!\n\nHowever it actually _does_ work, exactly because iterators are one-shot objects. Everything an IterMut yields will be yielded at most once, so we don't actually ever yield multiple mutable references to the same piece of data.\n\nPerhaps surprisingly, mutable iterators don't require unsafe code to be implemented for many types!\n\nFor instance here's a singly linked list:\n\n```rust\nfn main() {}\ntype Link<T> = Option<Box<Node<T>>>;\n\nstruct Node<T> {\n    elem: T,\n    next: Link<T>,\n}\n\npub struct LinkedList<T> {\n    head: Link<T>,\n}\n\npub struct IterMut<'a, T: 'a>(Option<&'a mut Node<T>>);\n\nimpl<T> LinkedList<T> {\n    fn iter_mut(&mut self) -> IterMut<T> {\n        IterMut(self.head.as_mut().map(|node| &mut **node))\n    }\n}\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        self.0.take().map(|node| {\n            self.0 = node.next.as_mut().map(|node| &mut **node);\n            &mut node.elem\n        })\n    }\n}\n```\n\nHere's a mutable slice:\n\n```rust\nfn main() {}\nuse std::mem;\n\npub struct IterMut<'a, T: 'a>(&'a mut[T]);\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        let slice = mem::take(&mut self.0);\n        if slice.is_empty() { return None; }\n\n        let (l, r) = slice.split_at_mut(1);\n        self.0 = r;\n        l.get_mut(0)\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        let slice = mem::take(&mut self.0);\n        if slice.is_empty() { return None; }\n\n        let new_len = slice.len() - 1;\n        let (l, r) = slice.split_at_mut(new_len);\n        self.0 = l;\n        r.get_mut(0)\n    }\n}\n```\n\nAnd here's a binary tree:\n\n```rust\nfn main() {}\nuse std::collections::VecDeque;\n\ntype Link<T> = Option<Box<Node<T>>>;\n\nstruct Node<T> {\n    elem: T,\n    left: Link<T>,\n    right: Link<T>,\n}\n\npub struct Tree<T> {\n    root: Link<T>,\n}\n\nstruct NodeIterMut<'a, T: 'a> {\n    elem: Option<&'a mut T>,\n    left: Option<&'a mut Node<T>>,\n    right: Option<&'a mut Node<T>>,\n}\n\nenum State<'a, T: 'a> {\n    Elem(&'a mut T),\n    Node(&'a mut Node<T>),\n}\n\npub struct IterMut<'a, T: 'a>(VecDeque<NodeIterMut<'a, T>>);\n\nimpl<T> Tree<T> {\n    pub fn iter_mut(&mut self) -> IterMut<T> {\n        let mut deque = VecDeque::new();\n        self.root.as_mut().map(|root| deque.push_front(root.iter_mut()));\n        IterMut(deque)\n    }\n}\n\nimpl<T> Node<T> {\n    pub fn iter_mut(&mut self) -> NodeIterMut<T> {\n        NodeIterMut {\n            elem: Some(&mut self.elem),\n            left: self.left.as_mut().map(|node| &mut **node),\n            right: self.right.as_mut().map(|node| &mut **node),\n        }\n    }\n}\n\n\nimpl<'a, T> Iterator for NodeIterMut<'a, T> {\n    type Item = State<'a, T>;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        match self.left.take() {\n            Some(node) => Some(State::Node(node)),\n            None => match self.elem.take() {\n                Some(elem) => Some(State::Elem(elem)),\n                None => match self.right.take() {\n                    Some(node) => Some(State::Node(node)),\n                    None => None,\n                }\n            }\n        }\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for NodeIterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        match self.right.take() {\n            Some(node) => Some(State::Node(node)),\n            None => match self.elem.take() {\n                Some(elem) => Some(State::Elem(elem)),\n                None => match self.left.take() {\n                    Some(node) => Some(State::Node(node)),\n                    None => None,\n                }\n            }\n        }\n    }\n}\n\nimpl<'a, T> Iterator for IterMut<'a, T> {\n    type Item = &'a mut T;\n    fn next(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.0.front_mut().and_then(|node_it| node_it.next()) {\n                Some(State::Elem(elem)) => return Some(elem),\n                Some(State::Node(node)) => self.0.push_front(node.iter_mut()),\n                None => if let None = self.0.pop_front() { return None },\n            }\n        }\n    }\n}\n\nimpl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n    fn next_back(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.0.back_mut().and_then(|node_it| node_it.next_back()) {\n                Some(State::Elem(elem)) => return Some(elem),\n                Some(State::Node(node)) => self.0.push_back(node.iter_mut()),\n                None => if let None = self.0.pop_back() { return None },\n            }\n        }\n    }\n}\n```\n\nAll of these are completely safe and work on stable Rust! This ultimately falls out of the simple struct case we saw before: Rust understands that you can safely split a mutable reference into subfields. We can then encode permanently consuming a reference via Options (or in the case of slices, replacing with an empty slice).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Splitting Borrows - The Rustonomicon</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"The Dark Arts of Advanced and Unsafe Rust Programming\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/nomicon.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"intro.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"meet-safe-and-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Meet Safe and Unsafe</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"safe-unsafe-meaning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> How Safe and Unsafe Interact</a></li><li class=\"chapter-item expanded \"><a href=\"what-unsafe-does.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> What Unsafe Can Do</a></li><li class=\"chapter-item expanded \"><a href=\"working-with-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Working with Unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Data Layout</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"repr-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> repr(Rust)</a></li><li class=\"chapter-item expanded \"><a href=\"exotic-sizes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Exotically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"other-reprs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Other reprs</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"references.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> References</a></li><li class=\"chapter-item expanded \"><a href=\"aliasing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Aliasing</a></li><li class=\"chapter-item expanded \"><a href=\"lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-mismatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Limits of Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Lifetime Elision</a></li><li class=\"chapter-item expanded \"><a href=\"unbounded-lifetimes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Unbounded Lifetimes</a></li><li class=\"chapter-item expanded \"><a href=\"hrtb.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Higher-Rank Trait Bounds</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"dropck.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Drop Check</a></li><li class=\"chapter-item expanded \"><a href=\"phantom-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> PhantomData</a></li><li class=\"chapter-item expanded \"><a href=\"borrow-splitting.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Splitting Borrows</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"conversions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Type Conversions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Coercions</a></li><li class=\"chapter-item expanded \"><a href=\"dot-operator.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> The Dot Operator</a></li><li class=\"chapter-item expanded \"><a href=\"casts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Casts</a></li><li class=\"chapter-item expanded \"><a href=\"transmutes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Transmutes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"uninitialized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Uninitialized Memory</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"checked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Checked</a></li><li class=\"chapter-item expanded \"><a href=\"drop-flags.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> Drop Flags</a></li><li class=\"chapter-item expanded \"><a href=\"unchecked-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Unchecked</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"obrm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Ownership Based Resource Management</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Constructors</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"leaking.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Leaking</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"unwinding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Unwinding</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"exception-safety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Exception Safety</a></li><li class=\"chapter-item expanded \"><a href=\"poisoning.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Poisoning</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"races.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Races</a></li><li class=\"chapter-item expanded \"><a href=\"send-and-sync.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Send and Sync</a></li><li class=\"chapter-item expanded \"><a href=\"atomics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Atomics</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"vec/vec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Implementing Vec</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"vec/vec-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-alloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Allocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-push-pop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> Push and Pop</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-dealloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.4.</strong> Deallocating</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.5.</strong> Deref</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-insert-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.6.</strong> Insert and Remove</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-into-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.7.</strong> IntoIter</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.8.</strong> RawVec</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-drain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.9.</strong> Drain</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-zsts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.10.</strong> Handling Zero-Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"vec/vec-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.11.</strong> Final Code</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-and-mutex.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Implementing Arc and Mutex</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Arc</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Layout</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-base.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Base Code</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-clone.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Cloning</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Dropping</a></li><li class=\"chapter-item expanded \"><a href=\"arc-mutex/arc-final.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Final Code</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ffi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> FFI</a></li><li class=\"chapter-item expanded \"><a href=\"beneath-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Beneath std</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"panic-handler.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> #[panic_handler]</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rustonomicon</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/nomicon\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"splitting-borrows\"><a class=\"header\" href=\"#splitting-borrows\">Splitting Borrows</a></h1>\n<p>The mutual exclusion property of mutable references can be very limiting when\nworking with a composite structure. The borrow checker (a.k.a. borrowck)\nunderstands some basic stuff, but will fall over pretty easily. It does\nunderstand structs sufficiently to know that it's possible to borrow disjoint\nfields of a struct simultaneously. So this works today:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span> {\n    a: <span class=\"hljs-built_in\">i32</span>,\n    b: <span class=\"hljs-built_in\">i32</span>,\n    c: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = Foo {a: <span class=\"hljs-number\">0</span>, b: <span class=\"hljs-number\">0</span>, c: <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">let</span> a = &amp;<span class=\"hljs-keyword\">mut</span> x.a;\n<span class=\"hljs-keyword\">let</span> b = &amp;<span class=\"hljs-keyword\">mut</span> x.b;\n<span class=\"hljs-keyword\">let</span> c = &amp;x.c;\n*b += <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">let</span> c2 = &amp;x.c;\n*a += <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} {} {} {}\"</span>, a, b, c, c2);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However borrowck doesn't understand arrays or slices in any way, so this doesn't\nwork:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">let</span> a = &amp;<span class=\"hljs-keyword\">mut</span> x[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">let</span> b = &amp;<span class=\"hljs-keyword\">mut</span> x[<span class=\"hljs-number\">1</span>];\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{} {}\"</span>, a, b);\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0499]: cannot borrow `x[..]` as mutable more than once at a time\n --&gt; src/lib.rs:4:18\n  |\n3 |     let a = &amp;mut x[0];\n  |                  ---- first mutable borrow occurs here\n4 |     let b = &amp;mut x[1];\n  |                  ^^^^ second mutable borrow occurs here\n5 |     println!(\"{} {}\", a, b);\n6 | }\n  | - first borrow ends here\n\nerror: aborting due to previous error\n</code></pre>\n<p>While it was plausible that borrowck could understand this simple case, it's\npretty clearly hopeless for borrowck to understand disjointness in general\ncontainer types like a tree, especially if distinct keys actually <em>do</em> map\nto the same value.</p>\n<p>In order to \"teach\" borrowck that what we're doing is ok, we need to drop down\nto unsafe code. For instance, mutable slices expose a <code class=\"hljs\">split_at_mut</code> function\nthat consumes the slice and returns two mutable slices. One for everything to\nthe left of the index, and one for everything to the right. Intuitively we know\nthis is safe because the slices don't overlap, and therefore alias. However\nthe implementation requires some unsafety:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::slice::from_raw_parts_mut;\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">FakeSlice</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; FakeSlice&lt;T&gt; {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">len</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">usize</span> { <span class=\"hljs-built_in\">unimplemented!</span>() }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">as_mut_ptr</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; *<span class=\"hljs-keyword\">mut</span> T { <span class=\"hljs-built_in\">unimplemented!</span>() }\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">split_at_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, mid: <span class=\"hljs-built_in\">usize</span>) -&gt; (&amp;<span class=\"hljs-keyword\">mut</span> [T], &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> len = <span class=\"hljs-keyword\">self</span>.len();\n    <span class=\"hljs-keyword\">let</span> ptr = <span class=\"hljs-keyword\">self</span>.as_mut_ptr();\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">assert!</span>(mid &lt;= len);\n\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.add(mid), len - mid))\n    }\n}\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>This is actually a bit subtle. So as to avoid ever making two <code class=\"hljs\">&amp;mut</code>'s to the\nsame value, we explicitly construct brand-new slices through raw pointers.</p>\n<p>However more subtle is how iterators that yield mutable references work.\nThe iterator trait is defined as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt;;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Given this definition, Self::Item has <em>no</em> connection to <code class=\"hljs\">self</code>. This means that\nwe can call <code class=\"hljs\">next</code> several times in a row, and hold onto all the results\n<em>concurrently</em>. This is perfectly fine for by-value iterators, which have\nexactly these semantics. It's also actually fine for shared references, as they\nadmit arbitrarily many references to the same thing (although the iterator needs\nto be a separate object from the thing being shared).</p>\n<p>But mutable references make this a mess. At first glance, they might seem\ncompletely incompatible with this API, as it would produce multiple mutable\nreferences to the same object!</p>\n<p>However it actually <em>does</em> work, exactly because iterators are one-shot objects.\nEverything an IterMut yields will be yielded at most once, so we don't\nactually ever yield multiple mutable references to the same piece of data.</p>\n<p>Perhaps surprisingly, mutable iterators don't require unsafe code to be\nimplemented for many types!</p>\n<p>For instance here's a singly linked list:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Link</span></span>&lt;T&gt; = <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span>&lt;T&gt; {\n    elem: T,\n    next: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkedList</span></span>&lt;T&gt; {\n    head: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(<span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; LinkedList&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; IterMut&lt;T&gt; {\n        IterMut(<span class=\"hljs-keyword\">self</span>.head.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node))\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.take().map(|node| {\n            <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = node.next.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node);\n            &amp;<span class=\"hljs-keyword\">mut</span> node.elem\n        })\n    }\n}</code></pre></pre>\n<p>Here's a mutable slice:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span>[T]);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">let</span> slice = mem::take(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">if</span> slice.is_empty() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>; }\n\n        <span class=\"hljs-keyword\">let</span> (l, r) = slice.split_at_mut(<span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = r;\n        l.get_mut(<span class=\"hljs-number\">0</span>)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">let</span> slice = mem::take(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">if</span> slice.is_empty() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>; }\n\n        <span class=\"hljs-keyword\">let</span> new_len = slice.len() - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">let</span> (l, r) = slice.split_at_mut(new_len);\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> = l;\n        r.get_mut(<span class=\"hljs-number\">0</span>)\n    }\n}</code></pre></pre>\n<p>And here's a binary tree:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}\n</span><span class=\"hljs-keyword\">use</span> std::collections::VecDeque;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Link</span></span>&lt;T&gt; = <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;Node&lt;T&gt;&gt;&gt;;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span>&lt;T&gt; {\n    elem: T,\n    left: Link&lt;T&gt;,\n    right: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tree</span></span>&lt;T&gt; {\n    root: Link&lt;T&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NodeIterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    elem: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T&gt;,\n    left: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;,\n    right: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">State</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt; {\n    Elem(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T),\n    Node(&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> Node&lt;T&gt;),\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IterMut</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: <span class=\"hljs-symbol\">'a</span>&gt;(VecDeque&lt;NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;&gt;);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Tree&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; IterMut&lt;T&gt; {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> deque = VecDeque::new();\n        <span class=\"hljs-keyword\">self</span>.root.as_mut().map(|root| deque.push_front(root.iter_mut()));\n        IterMut(deque)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Node&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iter_mut</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; NodeIterMut&lt;T&gt; {\n        NodeIterMut {\n            elem: <span class=\"hljs-literal\">Some</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.elem),\n            left: <span class=\"hljs-keyword\">self</span>.left.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node),\n            right: <span class=\"hljs-keyword\">self</span>.right.as_mut().map(|node| &amp;<span class=\"hljs-keyword\">mut</span> **node),\n        }\n    }\n}\n\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = State&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.left.take() {\n            <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.elem.take() {\n                <span class=\"hljs-literal\">Some</span>(elem) =&gt; <span class=\"hljs-literal\">Some</span>(State::Elem(elem)),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.right.take() {\n                    <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> NodeIterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.right.take() {\n            <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.elem.take() {\n                <span class=\"hljs-literal\">Some</span>(elem) =&gt; <span class=\"hljs-literal\">Some</span>(State::Elem(elem)),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.left.take() {\n                    <span class=\"hljs-literal\">Some</span>(node) =&gt; <span class=\"hljs-literal\">Some</span>(State::Node(node)),\n                    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> T;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.front_mut().and_then(|node_it| node_it.next()) {\n                <span class=\"hljs-literal\">Some</span>(State::Elem(elem)) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Some</span>(elem),\n                <span class=\"hljs-literal\">Some</span>(State::Node(node)) =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.push_front(node.iter_mut()),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">None</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.pop_front() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span> },\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-built_in\">DoubleEndedIterator</span> <span class=\"hljs-keyword\">for</span> IterMut&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next_back</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.back_mut().and_then(|node_it| node_it.next_back()) {\n                <span class=\"hljs-literal\">Some</span>(State::Elem(elem)) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Some</span>(elem),\n                <span class=\"hljs-literal\">Some</span>(State::Node(node)) =&gt; <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.push_back(node.iter_mut()),\n                <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">None</span> = <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.pop_back() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span> },\n            }\n        }\n    }\n}</code></pre></pre>\n<p>All of these are completely safe and work on stable Rust! This ultimately\nfalls out of the simple struct case we saw before: Rust understands that you\ncan safely split a mutable reference into subfields. We can then encode\npermanently consuming a reference via Options (or in the case of slices,\nreplacing with an empty slice).</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"phantom-data.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"conversions.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"phantom-data.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"conversions.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:14:06.433Z"
}