{
	"title": "drop in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.drop.html",
	"markdown": "# drop in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[drop](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#938) ·\n\n```\npub fn drop<T>(_x: T)\n```\n\nExpand description\n\nDisposes of a value.\n\nThis does so by calling the argument’s implementation of [`Drop`](../ops/trait.Drop.html \"trait std::ops::Drop\").\n\nThis effectively does nothing for types which implement `Copy`, e.g. integers. Such values are copied and _then_ moved into the function, so the value persists after this function call.\n\nThis function is not magic; it is literally defined as\n\n```\npub fn drop<T>(_x: T) {}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++pub+fn+drop%3CT%3E(_x:+T)+%7B%7D%0A%7D&edition=2021)\n\nBecause `_x` is moved into the function, it is automatically dropped before the function returns.\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nlet v = vec![1, 2, 3];\n\ndrop(v); // explicitly drop the vector\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++drop(v);+//+explicitly+drop+the+vector%0A%7D&edition=2021)\n\nSince [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\") enforces the borrow rules at runtime, `drop` can release a [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\") borrow:\n\n```\nuse std::cell::RefCell;\n\nlet x = RefCell::new(1);\n\nlet mut mutable_borrow = x.borrow_mut();\n*mutable_borrow = 1;\n\ndrop(mutable_borrow); // relinquish the mutable borrow on this slot\n\nlet borrow = x.borrow();\nprintln!(\"{}\", *borrow);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+x+=+RefCell::new(1);%0A++++%0A++++let+mut+mutable_borrow+=+x.borrow_mut();%0A++++*mutable_borrow+=+1;%0A++++%0A++++drop(mutable_borrow);+//+relinquish+the+mutable+borrow+on+this+slot%0A++++%0A++++let+borrow+=+x.borrow();%0A++++println!(%22%7B%7D%22,+*borrow);%0A%7D&edition=2021)\n\nIntegers and other types implementing [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\") are unaffected by `drop`.\n\n```\n#[derive(Copy, Clone)]\nstruct Foo(u8);\n\nlet x = 1;\nlet y = Foo(2);\ndrop(x); // a copy of `x` is moved and dropped\ndrop(y); // a copy of `y` is moved and dropped\n\nprintln!(\"x: {}, y: {}\", x, y.0); // still available\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dropping_copy_types)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Copy,+Clone)%5D%0A++++struct+Foo(u8);%0A++++%0A++++let+x+=+1;%0A++++let+y+=+Foo(2);%0A++++drop(x);+//+a+copy+of+%60x%60+is+moved+and+dropped%0A++++drop(y);+//+a+copy+of+%60y%60+is+moved+and+dropped%0A++++%0A++++println!(%22x:+%7B%7D,+y:+%7B%7D%22,+x,+y.0);+//+still+available%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Disposes of a value.\"><title>drop in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">drop</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#938\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn drop&lt;T&gt;(_x: T)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Disposes of a value.</p>\n<p>This does so by calling the argument’s implementation of <a href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\"><code>Drop</code></a>.</p>\n<p>This effectively does nothing for types which implement <code>Copy</code>, e.g.\nintegers. Such values are copied and <em>then</em> moved into the function, so the\nvalue persists after this function call.</p>\n<p>This function is not magic; it is literally defined as</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>drop&lt;T&gt;(_x: T) {}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++pub+fn+drop%3CT%3E(_x:+T)+%7B%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Because <code>_x</code> is moved into the function, it is automatically dropped before\nthe function returns.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\ndrop(v); <span class=\"comment\">// explicitly drop the vector</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++drop(v);+//+explicitly+drop+the+vector%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Since <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a> enforces the borrow rules at runtime, <code>drop</code> can\nrelease a <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a> borrow:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>x = RefCell::new(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mutable_borrow = x.borrow_mut();\n<span class=\"kw-2\">*</span>mutable_borrow = <span class=\"number\">1</span>;\n\ndrop(mutable_borrow); <span class=\"comment\">// relinquish the mutable borrow on this slot\n\n</span><span class=\"kw\">let </span>borrow = x.borrow();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>borrow);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+x+=+RefCell::new(1);%0A++++%0A++++let+mut+mutable_borrow+=+x.borrow_mut();%0A++++*mutable_borrow+=+1;%0A++++%0A++++drop(mutable_borrow);+//+relinquish+the+mutable+borrow+on+this+slot%0A++++%0A++++let+borrow+=+x.borrow();%0A++++println!(%22%7B%7D%22,+*borrow);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Integers and other types implementing <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a> are unaffected by <code>drop</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Copy, Clone)]\n</span><span class=\"kw\">struct </span>Foo(u8);\n\n<span class=\"kw\">let </span>x = <span class=\"number\">1</span>;\n<span class=\"kw\">let </span>y = Foo(<span class=\"number\">2</span>);\ndrop(x); <span class=\"comment\">// a copy of `x` is moved and dropped\n</span>drop(y); <span class=\"comment\">// a copy of `y` is moved and dropped\n\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"x: {}, y: {}\"</span>, x, y.<span class=\"number\">0</span>); <span class=\"comment\">// still available</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dropping_copy_types)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(Copy,+Clone)%5D%0A++++struct+Foo(u8);%0A++++%0A++++let+x+=+1;%0A++++let+y+=+Foo(2);%0A++++drop(x);+//+a+copy+of+%60x%60+is+moved+and+dropped%0A++++drop(y);+//+a+copy+of+%60y%60+is+moved+and+dropped%0A++++%0A++++println!(%22x:+%7B%7D,+y:+%7B%7D%22,+x,+y.0);+//+still+available%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:40.704Z"
}