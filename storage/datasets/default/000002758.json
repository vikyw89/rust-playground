{
	"title": "ready in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/macro.ready.html",
	"markdown": "# ready in std::task - Rust\n\n## Macro [std](../index.html)::[task](index.html)::[ready](#)\n\n1.64.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/task/ready.rs.html#50) ·\n\n```\npub macro ready($e:expr) {\n    ...\n}\n```\n\nExpand description\n\nExtracts the successful type of a [`Poll<T>`](enum.Poll.html \"enum std::task::Poll\").\n\nThis macro bakes in propagation of [`Pending`](about:blank/enum.Poll.html#variant.Pending \"variant std::task::Poll::Pending\") signals by returning early.\n\n## [§](#examples)Examples\n\n```\nuse std::task::{ready, Context, Poll};\nuse std::future::{self, Future};\nuse std::pin::Pin;\n\npub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n    let mut fut = future::ready(42);\n    let fut = Pin::new(&mut fut);\n\n    let num = ready!(fut.poll(cx));\n    // ... use num\n\n    Poll::Ready(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::task::%7Bready,+Context,+Poll%7D;%0A++++use+std::future::%7Bself,+Future%7D;%0A++++use+std::pin::Pin;%0A++++%0A++++pub+fn+do_poll(cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++++++let+mut+fut+=+future::ready(42);%0A++++++++let+fut+=+Pin::new(%26mut+fut);%0A++++%0A++++++++let+num+=+ready!(fut.poll(cx));%0A++++let+_+=+num;%0A++++++++//+...+use+num%0A++++%0A++++++++Poll::Ready(())%0A++++%7D%0A%7D&edition=2021)\n\nThe `ready!` call expands to:\n\n```\nlet num = match fut.poll(cx) {\n    Poll::Ready(t) => t,\n    Poll::Pending => return Poll::Pending,\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::task::%7BContext,+Poll%7D;%0A++++use+std::future::%7Bself,+Future%7D;%0A++++use+std::pin::Pin;%0A++++%0A++++pub+fn+do_poll(cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++let+mut+fut+=+future::ready(42);%0A++++let+fut+=+Pin::new(%26mut+fut);%0A++++%0A++++let+num+=+match+fut.poll(cx)+%7B%0A++++++++Poll::Ready(t)+=%3E+t,%0A++++++++Poll::Pending+=%3E+return+Poll::Pending,%0A++++%7D;%0A++++let+_+=+num;+//+to+silence+unused+warning%0A++++//+...+use+num%0A++++%0A++++Poll::Ready(())%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Extracts the successful type of a `Poll<T>`.\"><title>ready in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"macro\" href=\"#\">ready</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/ready.rs.html#50\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"kw\">pub macro </span>ready(<span class=\"macro-nonterminal\">$e</span>:expr) {\n    ...\n}</pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Extracts the successful type of a <a href=\"enum.Poll.html\" title=\"enum std::task::Poll\"><code>Poll&lt;T&gt;</code></a>.</p>\n<p>This macro bakes in propagation of <a href=\"enum.Poll.html#variant.Pending\" title=\"variant std::task::Poll::Pending\"><code>Pending</code></a> signals by returning early.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::task::{ready, Context, Poll};\n<span class=\"kw\">use </span>std::future::{<span class=\"self\">self</span>, Future};\n<span class=\"kw\">use </span>std::pin::Pin;\n\n<span class=\"kw\">pub fn </span>do_poll(cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; Poll&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fut = future::ready(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>fut = Pin::new(<span class=\"kw-2\">&amp;mut </span>fut);\n\n    <span class=\"kw\">let </span>num = <span class=\"macro\">ready!</span>(fut.poll(cx));\n    <span class=\"comment\">// ... use num\n\n    </span>Poll::Ready(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::task::%7Bready,+Context,+Poll%7D;%0A++++use+std::future::%7Bself,+Future%7D;%0A++++use+std::pin::Pin;%0A++++%0A++++pub+fn+do_poll(cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++++++let+mut+fut+=+future::ready(42);%0A++++++++let+fut+=+Pin::new(%26mut+fut);%0A++++%0A++++++++let+num+=+ready!(fut.poll(cx));%0A++++let+_+=+num;%0A++++++++//+...+use+num%0A++++%0A++++++++Poll::Ready(())%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <code>ready!</code> call expands to:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num = <span class=\"kw\">match </span>fut.poll(cx) {\n    Poll::Ready(t) =&gt; t,\n    Poll::Pending =&gt; <span class=\"kw\">return </span>Poll::Pending,\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::task::%7BContext,+Poll%7D;%0A++++use+std::future::%7Bself,+Future%7D;%0A++++use+std::pin::Pin;%0A++++%0A++++pub+fn+do_poll(cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3C()%3E+%7B%0A++++let+mut+fut+=+future::ready(42);%0A++++let+fut+=+Pin::new(%26mut+fut);%0A++++%0A++++let+num+=+match+fut.poll(cx)+%7B%0A++++++++Poll::Ready(t)+=%3E+t,%0A++++++++Poll::Pending+=%3E+return+Poll::Pending,%0A++++%7D;%0A++++let+_+=+num;+//+to+silence+unused+warning%0A++++//+...+use+num%0A++++%0A++++Poll::Ready(())%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:47.306Z"
}