{
	"title": "Paths - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/paths.html",
	"markdown": "# Paths - The Rust Reference\n\nA _path_ is a sequence of one or more path segments _logically_ separated by a namespace qualifier (`::`). If a path consists of only one segment, it refers to either an [item](items.html) or a [variable](variables.html) in a local control scope. If a path has multiple segments, it always refers to an item.\n\nTwo examples of simple paths consisting of only identifier segments:\n\n```rust\nx;\nx::y::z;\n```\n\n## [Types of paths](#types-of-paths)\n\n### [Simple Paths](#simple-paths)\n\n> **Syntax**  \n> _SimplePath_ :  \n>    `::`? _SimplePathSegment_ (`::` _SimplePathSegment_)\\*\n> \n> _SimplePathSegment_ :  \n>    [IDENTIFIER](identifiers.html) | `super` | `self` | `crate` | `$crate`\n\nSimple paths are used in [visibility](visibility-and-privacy.html) markers, [attributes](attributes.html), [macros](macros-by-example.html), and [`use`](items/use-declarations.html) items. Examples:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::io::{self, Write};\nmod m {\n    #[clippy::cyclomatic_complexity = \"0\"]\n    pub (in super) fn f1() {}\n}\n}\n```\n\n### [Paths in expressions](#paths-in-expressions)\n\n> **Syntax**  \n> _PathInExpression_ :  \n>    `::`? _PathExprSegment_ (`::` _PathExprSegment_)\\*\n> \n> _PathExprSegment_ :  \n>    _PathIdentSegment_ (`::` _GenericArgs_)?\n> \n> _PathIdentSegment_ :  \n>    [IDENTIFIER](identifiers.html) | `super` | `self` | `Self` | `crate` | `$crate`\n> \n> _GenericArgs_ :  \n>       `<` `>`  \n>    | `<` ( _GenericArg_ `,` )\\* _GenericArg_ `,`? `>`\n> \n> _GenericArg_ :  \n>    [_Lifetime_](trait-bounds.html) | [_Type_](about:blank/types.html#type-expressions) | _GenericArgsConst_ | _GenericArgsBinding_ | _GenericArgsBounds_\n> \n> _GenericArgsConst_ :  \n>       [_BlockExpression_](expressions/block-expr.html)  \n>    | [_LiteralExpression_](expressions/literal-expr.html)  \n>    | `-` [_LiteralExpression_](expressions/literal-expr.html)  \n>    | [_SimplePathSegment_](#simple-paths)\n> \n> _GenericArgsBinding_ :  \n>    [IDENTIFIER](identifiers.html) _GenericArgs_? `=` [_Type_](about:blank/types.html#type-expressions)\n> \n> _GenericArgsBounds_ :  \n>    [IDENTIFIER](identifiers.html) _GenericArgs_? `:` [_TypeParamBounds_](trait-bounds.html)\n\nPaths in expressions allow for paths with generic arguments to be specified. They are used in various places in [expressions](expressions.html) and [patterns](patterns.html).\n\nThe `::` token is required before the opening `<` for generic arguments to avoid ambiguity with the less-than operator. This is colloquially known as \"turbofish\" syntax.\n\n```rust\n#![allow(unused)]\nfn main() {\n(0..10).collect::<Vec<_>>();\nVec::<u8>::with_capacity(1024);\n}\n```\n\nThe order of generic arguments is restricted to lifetime arguments, then type arguments, then const arguments, then equality constraints.\n\nConst arguments must be surrounded by braces unless they are a [literal](expressions/literal-expr.html) or a single segment path.\n\nThe synthetic type parameters corresponding to `impl Trait` types are implicit, and these cannot be explicitly specified.\n\n## [Qualified paths](#qualified-paths)\n\n> **Syntax**  \n> _QualifiedPathInExpression_ :  \n>    _QualifiedPathType_ (`::` _PathExprSegment_)+\n> \n> _QualifiedPathType_ :  \n>    `<` [_Type_](about:blank/types.html#type-expressions) (`as` _TypePath_)? `>`\n> \n> _QualifiedPathInType_ :  \n>    _QualifiedPathType_ (`::` _TypePathSegment_)+\n\nFully qualified paths allow for disambiguating the path for [trait implementations](about:blank/items/implementations.html#trait-implementations) and for specifying [canonical paths](#canonical-paths). When used in a type specification, it supports using the type syntax specified below.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct S;\nimpl S {\n    fn f() { println!(\"S\"); }\n}\ntrait T1 {\n    fn f() { println!(\"T1 f\"); }\n}\nimpl T1 for S {}\ntrait T2 {\n    fn f() { println!(\"T2 f\"); }\n}\nimpl T2 for S {}\nS::f();  // Calls the inherent impl.\n<S as T1>::f();  // Calls the T1 trait function.\n<S as T2>::f();  // Calls the T2 trait function.\n}\n```\n\n### [Paths in types](#paths-in-types)\n\n> **Syntax**  \n> _TypePath_ :  \n>    `::`? _TypePathSegment_ (`::` _TypePathSegment_)\\*\n> \n> _TypePathSegment_ :  \n>    _PathIdentSegment_ (`::`? ([_GenericArgs_](#paths-in-expressions) | _TypePathFn_))?\n> \n> _TypePathFn_ :  \n> `(` _TypePathFnInputs_? `)` (`->` [_TypeNoBounds_](about:blank/types.html#type-expressions))?\n> \n> _TypePathFnInputs_ :  \n> [_Type_](about:blank/types.html#type-expressions) (`,` [_Type_](about:blank/types.html#type-expressions))\\* `,`?\n\nType paths are used within type definitions, trait bounds, type parameter bounds, and qualified paths.\n\nAlthough the `::` token is allowed before the generics arguments, it is not required because there is no ambiguity like there is in _PathInExpression_.\n\n```rust\n#![allow(unused)]\nfn main() {\nmod ops {\n    pub struct Range<T> {f1: T}\n    pub trait Index<T> {}\n    pub struct Example<'a> {f1: &'a i32}\n}\nstruct S;\nimpl ops::Index<ops::Range<usize>> for S { /*...*/ }\nfn i<'a>() -> impl Iterator<Item = ops::Example<'a>> {\n    // ...\n   const EXAMPLE: Vec<ops::Example<'static>> = Vec::new();\n   EXAMPLE.into_iter()\n}\ntype G = std::boxed::Box<dyn std::ops::FnOnce(isize) -> isize>;\n}\n```\n\n## [Path qualifiers](#path-qualifiers)\n\nPaths can be denoted with various leading qualifiers to change the meaning of how it is resolved.\n\n### [`::`](#)\n\nPaths starting with `::` are considered to be _global paths_ where the segments of the path start being resolved from a place which differs based on edition. Each identifier in the path must resolve to an item.\n\n> **Edition Differences**: In the 2015 Edition, identifiers resolve from the \"crate root\" (`crate::` in the 2018 edition), which contains a variety of different items, including external crates, default crates such as `std` or `core`, and items in the top level of the crate (including `use` imports).\n> \n> Beginning with the 2018 Edition, paths starting with `::` resolve from crates in the [extern prelude](about:blank/names/preludes.html#extern-prelude). That is, they must be followed by the name of a crate.\n\n```rust\n#![allow(unused)]\nfn main() {\npub fn foo() {\n    // In the 2018 edition, this accesses `std` via the extern prelude.\n    // In the 2015 edition, this accesses `std` via the crate root.\n    let now = ::std::time::Instant::now();\n    println!(\"{:?}\", now);\n}\n}\n```\n\n```rust\n// 2015 Edition\nmod a {\n    pub fn foo() {}\n}\nmod b {\n    pub fn foo() {\n        ::a::foo(); // call `a`'s foo function\n        // In Rust 2018, `::a` would be interpreted as the crate `a`.\n    }\n}\nfn main() {}\n```\n\n### [`self`](#self)\n\n`self` resolves the path relative to the current module. `self` can only be used as the first segment, without a preceding `::`.\n\nIn a method body, a path which consists of a single `self` segment resolves to the method's self parameter.\n\n```rust\nfn foo() {}\nfn bar() {\n    self::foo();\n}\nstruct S(bool);\nimpl S {\n  fn baz(self) {\n        self.0;\n    }\n}\nfn main() {}\n```\n\n### [`Self`](#self-1)\n\n`Self`, with a capital \"S\", is used to refer to the implementing type within [traits](items/traits.html) and [implementations](items/implementations.html).\n\n`Self` can only be used as the first segment, without a preceding `::`.\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait T {\n    type Item;\n    const C: i32;\n    // `Self` will be whatever type that implements `T`.\n    fn new() -> Self;\n    // `Self::Item` will be the type alias in the implementation.\n    fn f(&self) -> Self::Item;\n}\nstruct S;\nimpl T for S {\n    type Item = i32;\n    const C: i32 = 9;\n    fn new() -> Self {           // `Self` is the type `S`.\n        S\n    }\n    fn f(&self) -> Self::Item {  // `Self::Item` is the type `i32`.\n        Self::C                  // `Self::C` is the constant value `9`.\n    }\n}\n}\n```\n\n### [`super`](#super)\n\n`super` in a path resolves to the parent module. It may only be used in leading segments of the path, possibly after an initial `self` segment.\n\n```rust\nmod a {\n    pub fn foo() {}\n}\nmod b {\n    pub fn foo() {\n        super::a::foo(); // call a's foo function\n    }\n}\nfn main() {}\n```\n\n`super` may be repeated several times after the first `super` or `self` to refer to ancestor modules.\n\n```rust\nmod a {\n    fn foo() {}\n\n    mod b {\n        mod c {\n            fn foo() {\n                super::super::foo(); // call a's foo function\n                self::super::super::foo(); // call a's foo function\n            }\n        }\n    }\n}\nfn main() {}\n```\n\n### [`crate`](#crate)\n\n`crate` resolves the path relative to the current crate. `crate` can only be used as the first segment, without a preceding `::`.\n\n```rust\nfn foo() {}\nmod a {\n    fn bar() {\n        crate::foo();\n    }\n}\nfn main() {}\n```\n\n### [`$crate`](#crate-1)\n\n`$crate` is only used within [macro transcribers](macros-by-example.html), and can only be used as the first segment, without a preceding `::`. `$crate` will expand to a path to access items from the top level of the crate where the macro is defined, regardless of which crate the macro is invoked.\n\n```rust\npub fn increment(x: u32) -> u32 {\n    x + 1\n}\n\n#[macro_export]\nmacro_rules! inc {\n    ($x:expr) => ( $crate::increment($x) )\n}\nfn main() { }\n```\n\n## [Canonical paths](#canonical-paths)\n\nItems defined in a module or implementation have a _canonical path_ that corresponds to where within its crate it is defined. All other paths to these items are aliases. The canonical path is defined as a _path prefix_ appended by the path segment the item itself defines.\n\n[Implementations](items/implementations.html) and [use declarations](items/use-declarations.html) do not have canonical paths, although the items that implementations define do have them. Items defined in block expressions do not have canonical paths. Items defined in a module that does not have a canonical path do not have a canonical path. Associated items defined in an implementation that refers to an item without a canonical path, e.g. as the implementing type, the trait being implemented, a type parameter or bound on a type parameter, do not have canonical paths.\n\nThe path prefix for modules is the canonical path to that module. For bare implementations, it is the canonical path of the item being implemented surrounded by angle (`<>`) brackets. For [trait implementations](about:blank/items/implementations.html#trait-implementations), it is the canonical path of the item being implemented followed by `as` followed by the canonical path to the trait all surrounded in angle (`<>`) brackets.\n\nThe canonical path is only meaningful within a given crate. There is no global namespace across crates; an item's canonical path merely identifies it within the crate.\n\n```rust\n// Comments show the canonical path of the item.\n\nmod a { // crate::a\n    pub struct Struct; // crate::a::Struct\n\n    pub trait Trait { // crate::a::Trait\n        fn f(&self); // crate::a::Trait::f\n    }\n\n    impl Trait for Struct {\n        fn f(&self) {} // <crate::a::Struct as crate::a::Trait>::f\n    }\n\n    impl Struct {\n        fn g(&self) {} // <crate::a::Struct>::g\n    }\n}\n\nmod without { // crate::without\n    fn canonicals() { // crate::without::canonicals\n        struct OtherStruct; // None\n\n        trait OtherTrait { // None\n            fn g(&self); // None\n        }\n\n        impl OtherTrait for OtherStruct {\n            fn g(&self) {} // None\n        }\n\n        impl OtherTrait for crate::a::Struct {\n            fn g(&self) {} // None\n        }\n\n        impl crate::a::Trait for OtherStruct {\n            fn f(&self) {} // None\n        }\n    }\n}\n\nfn main() {}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Paths - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/paths.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"paths\"><a class=\"header\" href=\"#paths\">Paths</a></h1>\n<p>A <em>path</em> is a sequence of one or more path segments <em>logically</em> separated by\na namespace <span class=\"parenthetical\">qualifier (<code class=\"hljs\">::</code>)</span>. If a path\nconsists of only one segment, it refers to either an <a href=\"items.html\">item</a> or a <a href=\"variables.html\">variable</a> in\na local control scope. If a path has multiple segments, it always refers to an\nitem.</p>\n<p>Two examples of simple paths consisting of only identifier segments:</p>\n<!-- ignore: syntax fragment -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">x;\nx::y::z;</code></pre>\n<h2 id=\"types-of-paths\"><a class=\"header\" href=\"#types-of-paths\">Types of paths</a></h2>\n<h3 id=\"simple-paths\"><a class=\"header\" href=\"#simple-paths\">Simple Paths</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>SimplePath</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>SimplePathSegment</em> (<code class=\"hljs\">::</code> <em>SimplePathSegment</em>)<sup>*</sup></p>\n<p><em>SimplePathSegment</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">super</code> | <code class=\"hljs\">self</code> | <code class=\"hljs\">crate</code> | <code class=\"hljs\">$crate</code></p>\n</blockquote>\n<p>Simple paths are used in <a href=\"visibility-and-privacy.html\">visibility</a> markers, <a href=\"attributes.html\">attributes</a>, <a href=\"macros-by-example.html\">macros</a>, and <a href=\"items/use-declarations.html\"><code class=\"hljs\">use</code></a> items.\nExamples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Write};\n<span class=\"hljs-keyword\">mod</span> m {\n    <span class=\"hljs-meta\">#[clippy::cyclomatic_complexity = <span class=\"hljs-meta-string\">\"0\"</span>]</span>\n    <span class=\"hljs-keyword\">pub</span> (<span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">super</span>) <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f1</span></span>() {}\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"paths-in-expressions\"><a class=\"header\" href=\"#paths-in-expressions\">Paths in expressions</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PathInExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>PathExprSegment</em> (<code class=\"hljs\">::</code> <em>PathExprSegment</em>)<sup>*</sup></p>\n<p><em>PathExprSegment</em> :<br>\n&nbsp;&nbsp; <em>PathIdentSegment</em> (<code class=\"hljs\">::</code> <em>GenericArgs</em>)<sup>?</sup></p>\n<p><em>PathIdentSegment</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> | <code class=\"hljs\">super</code> | <code class=\"hljs\">self</code> | <code class=\"hljs\">Self</code> | <code class=\"hljs\">crate</code> | <code class=\"hljs\">$crate</code></p>\n<p><em>GenericArgs</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <code class=\"hljs\">&gt;</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">&lt;</code> ( <em>GenericArg</em> <code class=\"hljs\">,</code> )<sup>*</sup> <em>GenericArg</em> <code class=\"hljs\">,</code><sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>GenericArg</em> :<br>\n&nbsp;&nbsp; <a href=\"trait-bounds.html\"><em>Lifetime</em></a> | <a href=\"types.html#type-expressions\"><em>Type</em></a> | <em>GenericArgsConst</em> | <em>GenericArgsBinding</em> | <em>GenericArgsBounds</em></p>\n<p><em>GenericArgsConst</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"expressions/block-expr.html\"><em>BlockExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a><br>\n&nbsp;&nbsp; | <code class=\"hljs\">-</code> <a href=\"expressions/literal-expr.html\"><em>LiteralExpression</em></a><br>\n&nbsp;&nbsp; | <a href=\"#simple-paths\"><em>SimplePathSegment</em></a></p>\n<p><em>GenericArgsBinding</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <em>GenericArgs</em><sup>?</sup> <code class=\"hljs\">=</code> <a href=\"types.html#type-expressions\"><em>Type</em></a></p>\n<p><em>GenericArgsBounds</em> :<br>\n&nbsp;&nbsp; <a href=\"identifiers.html\">IDENTIFIER</a> <em>GenericArgs</em><sup>?</sup> <code class=\"hljs\">:</code> <a href=\"trait-bounds.html\"><em>TypeParamBounds</em></a></p>\n</blockquote>\n<p>Paths in expressions allow for paths with generic arguments to be specified. They are\nused in various places in <a href=\"expressions.html\">expressions</a> and <a href=\"patterns.html\">patterns</a>.</p>\n<p>The <code class=\"hljs\">::</code> token is required before the opening <code class=\"hljs\">&lt;</code> for generic arguments to avoid\nambiguity with the less-than operator. This is colloquially known as \"turbofish\" syntax.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>(<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span>).collect::&lt;<span class=\"hljs-built_in\">Vec</span>&lt;_&gt;&gt;();\n<span class=\"hljs-built_in\">Vec</span>::&lt;<span class=\"hljs-built_in\">u8</span>&gt;::with_capacity(<span class=\"hljs-number\">1024</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The order of generic arguments is restricted to lifetime arguments, then type\narguments, then const arguments, then equality constraints.</p>\n<p>Const arguments must be surrounded by braces unless they are a\n<a href=\"expressions/literal-expr.html\">literal</a> or a single segment path.</p>\n<p>The synthetic type parameters corresponding to <code class=\"hljs\">impl Trait</code> types are implicit,\nand these cannot be explicitly specified.</p>\n<h2 id=\"qualified-paths\"><a class=\"header\" href=\"#qualified-paths\">Qualified paths</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>QualifiedPathInExpression</em> :<br>\n&nbsp;&nbsp; <em>QualifiedPathType</em> (<code class=\"hljs\">::</code> <em>PathExprSegment</em>)<sup>+</sup></p>\n<p><em>QualifiedPathType</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <a href=\"types.html#type-expressions\"><em>Type</em></a> (<code class=\"hljs\">as</code> <em>TypePath</em>)<sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>QualifiedPathInType</em> :<br>\n&nbsp;&nbsp; <em>QualifiedPathType</em> (<code class=\"hljs\">::</code> <em>TypePathSegment</em>)<sup>+</sup></p>\n</blockquote>\n<p>Fully qualified paths allow for disambiguating the path for <a href=\"items/implementations.html#trait-implementations\">trait implementations</a> and\nfor specifying <a href=\"#canonical-paths\">canonical paths</a>. When used in a type specification, it\nsupports using the type syntax specified below.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> S {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"S\"</span>); }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T1</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"T1 f\"</span>); }\n}\n<span class=\"hljs-keyword\">impl</span> T1 <span class=\"hljs-keyword\">for</span> S {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T2</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>() { <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"T2 f\"</span>); }\n}\n<span class=\"hljs-keyword\">impl</span> T2 <span class=\"hljs-keyword\">for</span> S {}\nS::f();  <span class=\"hljs-comment\">// Calls the inherent impl.</span>\n&lt;S <span class=\"hljs-keyword\">as</span> T1&gt;::f();  <span class=\"hljs-comment\">// Calls the T1 trait function.</span>\n&lt;S <span class=\"hljs-keyword\">as</span> T2&gt;::f();  <span class=\"hljs-comment\">// Calls the T2 trait function.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"paths-in-types\"><a class=\"header\" href=\"#paths-in-types\">Paths in types</a></h3>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>TypePath</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">::</code><sup>?</sup> <em>TypePathSegment</em> (<code class=\"hljs\">::</code> <em>TypePathSegment</em>)<sup>*</sup></p>\n<p><em>TypePathSegment</em> :<br>\n&nbsp;&nbsp; <em>PathIdentSegment</em> (<code class=\"hljs\">::</code><sup>?</sup> (<a href=\"#paths-in-expressions\"><em>GenericArgs</em></a> | <em>TypePathFn</em>))<sup>?</sup></p>\n<p><em>TypePathFn</em> :<br>\n<code class=\"hljs\">(</code> <em>TypePathFnInputs</em><sup>?</sup> <code class=\"hljs\">)</code> (<code class=\"hljs\">-&gt;</code> <a href=\"types.html#type-expressions\"><em>TypeNoBounds</em></a>)<sup>?</sup></p>\n<p><em>TypePathFnInputs</em> :<br>\n<a href=\"types.html#type-expressions\"><em>Type</em></a> (<code class=\"hljs\">,</code> <a href=\"types.html#type-expressions\"><em>Type</em></a>)<sup>*</sup> <code class=\"hljs\">,</code><sup>?</sup></p>\n</blockquote>\n<p>Type paths are used within type definitions, trait bounds, type parameter bounds,\nand qualified paths.</p>\n<p>Although the <code class=\"hljs\">::</code> token is allowed before the generics arguments, it is not required\nbecause there is no ambiguity like there is in <em>PathInExpression</em>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> ops {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Range</span></span>&lt;T&gt; {f1: T}\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Index</span></span>&lt;T&gt; {}\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Example</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {f1: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>}\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n</span><span class=\"hljs-keyword\">impl</span> ops::Index&lt;ops::Range&lt;<span class=\"hljs-built_in\">usize</span>&gt;&gt; <span class=\"hljs-keyword\">for</span> S { <span class=\"hljs-comment\">/*...*/</span> }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">i</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;() -&gt; <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = ops::Example&lt;<span class=\"hljs-symbol\">'a</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// ...</span>\n<span class=\"boring\">   <span class=\"hljs-keyword\">const</span> EXAMPLE: <span class=\"hljs-built_in\">Vec</span>&lt;ops::Example&lt;<span class=\"hljs-symbol\">'static</span>&gt;&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">   EXAMPLE.into_iter()\n</span>}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">G</span></span> = std::boxed::<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> std::ops::<span class=\"hljs-built_in\">FnOnce</span>(<span class=\"hljs-built_in\">isize</span>) -&gt; <span class=\"hljs-built_in\">isize</span>&gt;;\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"path-qualifiers\"><a class=\"header\" href=\"#path-qualifiers\">Path qualifiers</a></h2>\n<p>Paths can be denoted with various leading qualifiers to change the meaning of\nhow it is resolved.</p>\n<h3 id=\"\"><a class=\"header\" href=\"#\"><code>::</code></a></h3>\n<p>Paths starting with <code class=\"hljs\">::</code> are considered to be <em>global paths</em> where the segments of the path\nstart being resolved from a place which differs based on edition. Each identifier in\nthe path must resolve to an item.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: In the 2015 Edition, identifiers resolve from the \"crate root\"\n(<code class=\"hljs\">crate::</code> in the 2018 edition), which contains a variety of different items, including\nexternal crates, default crates such as <code class=\"hljs\">std</code> or <code class=\"hljs\">core</code>, and items in the top level of\nthe crate (including <code class=\"hljs\">use</code> imports).</p>\n<p>Beginning with the 2018 Edition, paths starting with <code class=\"hljs\">::</code> resolve from\ncrates in the <a href=\"names/preludes.html#extern-prelude\">extern prelude</a>. That is, they must be followed by the name of a crate.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n    <span class=\"hljs-comment\">// In the 2018 edition, this accesses `std` via the extern prelude.</span>\n    <span class=\"hljs-comment\">// In the 2015 edition, this accesses `std` via the crate root.</span>\n    <span class=\"hljs-keyword\">let</span> now = ::std::time::Instant::now();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{:?}\"</span>, now);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2015 hljs hide-boring\"><span class=\"hljs-comment\">// 2015 Edition</span>\n<span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n}\n<span class=\"hljs-keyword\">mod</span> b {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n        ::a::foo(); <span class=\"hljs-comment\">// call `a`'s foo function</span>\n        <span class=\"hljs-comment\">// In Rust 2018, `::a` would be interpreted as the crate `a`.</span>\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"self\"><a class=\"header\" href=\"#self\"><code>self</code></a></h3>\n<p><code class=\"hljs\">self</code> resolves the path relative to the current module. <code class=\"hljs\">self</code> can only be used as the\nfirst segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<p>In a method body, a path which consists of a single <code class=\"hljs\">self</code> segment resolves to the method's self parameter.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n    self::foo();\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>(<span class=\"hljs-built_in\">bool</span>);\n<span class=\"hljs-keyword\">impl</span> S {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baz</span></span>(<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>;\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"self-1\"><a class=\"header\" href=\"#self-1\"><code>Self</code></a></h3>\n<p><code class=\"hljs\">Self</code>, with a capital \"S\", is used to refer to the implementing type within\n<a href=\"items/traits.html\">traits</a> and <a href=\"items/implementations.html\">implementations</a>.</p>\n<p><code class=\"hljs\">Self</code> can only be used as the first segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">T</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n    <span class=\"hljs-keyword\">const</span> C: <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-comment\">// `Self` will be whatever type that implements `T`.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span>;\n    <span class=\"hljs-comment\">// `Self::Item` will be the type alias in the implementation.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Item;\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">S</span></span>;\n<span class=\"hljs-keyword\">impl</span> T <span class=\"hljs-keyword\">for</span> S {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">const</span> C: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; <span class=\"hljs-keyword\">Self</span> {           <span class=\"hljs-comment\">// `Self` is the type `S`.</span>\n        S\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; Self::Item {  <span class=\"hljs-comment\">// `Self::Item` is the type `i32`.</span>\n        Self::C                  <span class=\"hljs-comment\">// `Self::C` is the constant value `9`.</span>\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"super\"><a class=\"header\" href=\"#super\"><code>super</code></a></h3>\n<p><code class=\"hljs\">super</code> in a path resolves to the parent module. It may only be used in leading\nsegments of the path, possibly after an initial <code class=\"hljs\">self</code> segment.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n}\n<span class=\"hljs-keyword\">mod</span> b {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n        super::a::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><code class=\"hljs\">super</code> may be repeated several times after the first <code class=\"hljs\">super</code> or <code class=\"hljs\">self</code> to refer to\nancestor modules.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n\n    <span class=\"hljs-keyword\">mod</span> b {\n        <span class=\"hljs-keyword\">mod</span> c {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {\n                super::super::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n                self::super::super::foo(); <span class=\"hljs-comment\">// call a's foo function</span>\n            }\n        }\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"crate\"><a class=\"header\" href=\"#crate\"><code>crate</code></a></h3>\n<p><code class=\"hljs\">crate</code> resolves the path relative to the current crate. <code class=\"hljs\">crate</code> can only be used as the\nfirst segment, without a preceding <code class=\"hljs\">::</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>() {}\n<span class=\"hljs-keyword\">mod</span> a {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() {\n        crate::foo();\n    }\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"crate-1\"><a class=\"header\" href=\"#crate-1\"><code>$crate</code></a></h3>\n<p><code class=\"hljs\">$crate</code> is only used within <a href=\"macros-by-example.html\">macro transcribers</a>, and can only be used as the first\nsegment, without a preceding <code class=\"hljs\">::</code>. <code class=\"hljs\">$crate</code> will expand to a path to access items from the\ntop level of the crate where the macro is defined, regardless of which crate the macro is\ninvoked.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">increment</span></span>(x: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> inc {\n    ($x:expr) =&gt; ( $crate::increment($x) )\n}\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() { }</span></code></pre></pre>\n<h2 id=\"canonical-paths\"><a class=\"header\" href=\"#canonical-paths\">Canonical paths</a></h2>\n<p>Items defined in a module or implementation have a <em>canonical path</em> that\ncorresponds to where within its crate it is defined. All other paths to these\nitems are aliases. The canonical path is defined as a <em>path prefix</em> appended by\nthe path segment the item itself defines.</p>\n<p><a href=\"items/implementations.html\">Implementations</a> and <a href=\"items/use-declarations.html\">use declarations</a> do not have canonical paths, although\nthe items that implementations define do have them. Items defined in\nblock expressions do not have canonical paths. Items defined in a module that\ndoes not have a canonical path do not have a canonical path. Associated items\ndefined in an implementation that refers to an item without a canonical path,\ne.g. as the implementing type, the trait being implemented, a type parameter or\nbound on a type parameter, do not have canonical paths.</p>\n<p>The path prefix for modules is the canonical path to that module. For bare\nimplementations, it is the canonical path of the item being implemented\nsurrounded by <span class=\"parenthetical\">angle (<code class=\"hljs\">&lt;&gt;</code>)</span> brackets. For\n<a href=\"items/implementations.html#trait-implementations\">trait implementations</a>, it is the canonical path of the item being implemented\nfollowed by <code class=\"hljs\">as</code> followed by the canonical path to the trait all surrounded in\n<span class=\"parenthetical\">angle (<code class=\"hljs\">&lt;&gt;</code>)</span> brackets.</p>\n<p>The canonical path is only meaningful within a given crate. There is no global\nnamespace across crates; an item's canonical path merely identifies it within\nthe crate.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"hljs-comment\">// Comments show the canonical path of the item.</span>\n\n<span class=\"hljs-keyword\">mod</span> a { <span class=\"hljs-comment\">// crate::a</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Struct</span></span>; <span class=\"hljs-comment\">// crate::a::Struct</span>\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> { <span class=\"hljs-comment\">// crate::a::Trait</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>); <span class=\"hljs-comment\">// crate::a::Trait::f</span>\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Trait <span class=\"hljs-keyword\">for</span> Struct {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// &lt;crate::a::Struct as crate::a::Trait&gt;::f</span>\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Struct {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// &lt;crate::a::Struct&gt;::g</span>\n    }\n}\n\n<span class=\"hljs-keyword\">mod</span> without { <span class=\"hljs-comment\">// crate::without</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">canonicals</span></span>() { <span class=\"hljs-comment\">// crate::without::canonicals</span>\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">OtherStruct</span></span>; <span class=\"hljs-comment\">// None</span>\n\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">OtherTrait</span></span> { <span class=\"hljs-comment\">// None</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>); <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> OtherTrait <span class=\"hljs-keyword\">for</span> OtherStruct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> OtherTrait <span class=\"hljs-keyword\">for</span> crate::a::Struct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">g</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n\n        <span class=\"hljs-keyword\">impl</span> crate::a::Trait <span class=\"hljs-keyword\">for</span> OtherStruct {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">f</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {} <span class=\"hljs-comment\">// None</span>\n        }\n    }\n}\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"names/preludes.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"names/name-resolution.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"names/preludes.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"names/name-resolution.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:33.279Z"
}