{
	"title": "Deref in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.Deref.html",
	"markdown": "# Deref in std::ops - Rust\n\n## Trait [std](../index.html)::[ops](index.html)::[Deref](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#136) ·\n\n```\npub trait Deref {\n    type Target: ?Sized;\n\n    // Required method\n    fn deref(&self) -> &Self::Target;\n}\n```\n\nExpand description\n\nUsed for immutable dereferencing operations, like `*v`.\n\nIn addition to being used for explicit dereferencing operations with the (unary) `*` operator in immutable contexts, `Deref` is also used implicitly by the compiler in many circumstances. This mechanism is called [“`Deref` coercion”](#deref-coercion). In mutable contexts, [`DerefMut`](trait.DerefMut.html \"trait std::ops::DerefMut\") is used and mutable deref coercion similarly occurs.\n\n**Warning:** Deref coercion is a powerful language feature which has far-reaching implications for every type that implements `Deref`. The compiler will silently insert calls to `Deref::deref`. For this reason, one should be careful about implementing `Deref` and only do so when deref coercion is desirable. See [below](#when-to-implement-deref-or-derefmut) for advice on when this is typically desirable or undesirable.\n\nTypes that implement `Deref` or `DerefMut` are often called “smart pointers” and the mechanism of deref coercion has been specifically designed to facilitate the pointer-like behaviour that name suggests. Often, the purpose of a “smart pointer” type is to change the ownership semantics of a contained value (for example, [`Rc`](../../alloc/rc/struct.Rc.html) or [`Cow`](../../alloc/borrow/enum.Cow.html)) or the storage semantics of a contained value (for example, [`Box`](../../alloc/boxed/struct.Box.html)).\n\n## [§](#deref-coercion)Deref coercion\n\nIf `T` implements `Deref<Target = U>`, and `v` is a value of type `T`, then:\n\n-   In immutable contexts, `*v` (where `T` is neither a reference nor a raw pointer) is equivalent to `*Deref::deref(&v)`.\n-   Values of type `&T` are coerced to values of type `&U`\n-   `T` implicitly implements all the methods of the type `U` which take the `&self` receiver.\n\nFor more details, visit [the chapter in _The Rust Programming Language_](../../book/ch15-02-deref.html) as well as the reference sections on [the dereference operator](about:blank/reference/expressions/operator-expr.html#the-dereference-operator), [method resolution](../../reference/expressions/method-call-expr.html), and [type coercions](../../reference/type-coercions.html).\n\n## [§](#when-to-implement-deref-or-derefmut)When to implement `Deref` or `DerefMut`\n\nThe same advice applies to both deref traits. In general, deref traits **should** be implemented if:\n\n1.  a value of the type transparently behaves like a value of the target type;\n2.  the implementation of the deref function is cheap; and\n3.  users of the type will not be surprised by any deref coercion behaviour.\n\nIn general, deref traits **should not** be implemented if:\n\n1.  the deref implementations could fail unexpectedly; or\n2.  the type has methods that are likely to collide with methods on the target type; or\n3.  committing to deref coercion as part of the public API is not desirable.\n\nNote that there’s a large difference between implementing deref traits generically over many target types, and doing so only for specific target types.\n\nGeneric implementations, such as for [`Box<T>`](../../alloc/boxed/struct.Box.html) (which is generic over every type and dereferences to `T`) should be careful to provide few or no methods, since the target type is unknown and therefore every method could collide with one on the target type, causing confusion for users. `impl<T> Box<T>` has no methods (though several associated functions), partly for this reason.\n\nSpecific implementations, such as for [`String`](../../alloc/string/struct.String.html) (whose `Deref` implementation has `Target = str`) can have many methods, since avoiding collision is much easier. `String` and `str` both have many methods, and `String` additionally behaves as if it has every method of `str` because of deref coercion. The implementing type may also be generic while the implementation is still specific in this sense; for example, [`Vec<T>`](../../alloc/vec/struct.Vec.html) dereferences to `[T]`, so methods of `T` are not applicable.\n\nConsider also that deref coercion means that deref traits are a much larger part of a type’s public API than any other trait as it is implicitly called by the compiler. Therefore, it is advisable to consider whether this is something you are comfortable supporting as a public API.\n\nThe [`AsRef`](../convert/trait.AsRef.html \"trait std::convert::AsRef\") and [`Borrow`](../borrow/trait.Borrow.html \"trait std::borrow::Borrow\") traits have very similar signatures to `Deref`. It may be desirable to implement either or both of these, whether in addition to or rather than deref traits. See their documentation for details.\n\n## [§](#fallibility)Fallibility\n\n**This trait’s method should never unexpectedly fail**. Deref coercion means the compiler will often insert calls to `Deref::deref` implicitly. Failure during dereferencing can be extremely confusing when `Deref` is invoked implicitly. In the majority of uses it should be infallible, though it may be acceptable to panic if the type is misused through programmer error, for example.\n\nHowever, infallibility is not enforced and therefore not guaranteed. As such, `unsafe` code should not rely on infallibility in general for soundness.\n\n## [§](#examples)Examples\n\nA struct with a single field which is accessible by dereferencing the struct.\n\n```\nuse std::ops::Deref;\n\nstruct DerefExample<T> {\n    value: T\n}\n\nimpl<T> Deref for DerefExample<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target {\n        &self.value\n    }\n}\n\nlet x = DerefExample { value: 'a' };\nassert_eq!('a', *x);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Deref;%0A++++%0A++++struct+DerefExample%3CT%3E+%7B%0A++++++++value:+T%0A++++%7D%0A++++%0A++++impl%3CT%3E+Deref+for+DerefExample%3CT%3E+%7B%0A++++++++type+Target+=+T;%0A++++%0A++++++++fn+deref(%26self)+-%3E+%26Self::Target+%7B%0A++++++++++++%26self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+x+=+DerefExample+%7B+value:+%27a%27+%7D;%0A++++assert_eq!(%27a%27,+*x);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#141)\n\nThe resulting type after dereferencing.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#147)\n\nDereferences the value.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Used for immutable dereferencing operations, like `*v`.\"><title>Deref in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Deref</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Deref</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Target\">Target</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.deref\">deref</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">Deref</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#136\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Deref {\n    type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>;\n\n    // Required method\n    fn <a href=\"#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Used for immutable dereferencing operations, like <code>*v</code>.</p>\n<p>In addition to being used for explicit dereferencing operations with the\n(unary) <code>*</code> operator in immutable contexts, <code>Deref</code> is also used implicitly\nby the compiler in many circumstances. This mechanism is called\n<a href=\"#deref-coercion\">“<code>Deref</code> coercion”</a>. In mutable contexts, <a href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\"><code>DerefMut</code></a> is used and\nmutable deref coercion similarly occurs.</p>\n<p><strong>Warning:</strong> Deref coercion is a powerful language feature which has\nfar-reaching implications for every type that implements <code>Deref</code>. The\ncompiler will silently insert calls to <code>Deref::deref</code>. For this reason, one\nshould be careful about implementing <code>Deref</code> and only do so when deref\ncoercion is desirable. See <a href=\"#when-to-implement-deref-or-derefmut\">below</a> for advice on when this is\ntypically desirable or undesirable.</p>\n<p>Types that implement <code>Deref</code> or <code>DerefMut</code> are often called “smart\npointers” and the mechanism of deref coercion has been specifically designed\nto facilitate the pointer-like behaviour that name suggests. Often, the\npurpose of a “smart pointer” type is to change the ownership semantics\nof a contained value (for example, <a href=\"../../alloc/rc/struct.Rc.html\"><code>Rc</code></a> or <a href=\"../../alloc/borrow/enum.Cow.html\"><code>Cow</code></a>) or the\nstorage semantics of a contained value (for example, <a href=\"../../alloc/boxed/struct.Box.html\"><code>Box</code></a>).</p>\n<h2 id=\"deref-coercion\"><a class=\"doc-anchor\" href=\"#deref-coercion\">§</a>Deref coercion</h2>\n<p>If <code>T</code> implements <code>Deref&lt;Target = U&gt;</code>, and <code>v</code> is a value of type <code>T</code>, then:</p>\n<ul>\n<li>In immutable contexts, <code>*v</code> (where <code>T</code> is neither a reference nor a raw\npointer) is equivalent to <code>*Deref::deref(&amp;v)</code>.</li>\n<li>Values of type <code>&amp;T</code> are coerced to values of type <code>&amp;U</code></li>\n<li><code>T</code> implicitly implements all the methods of the type <code>U</code> which take the\n<code>&amp;self</code> receiver.</li>\n</ul>\n<p>For more details, visit <a href=\"../../book/ch15-02-deref.html\">the chapter in <em>The Rust Programming Language</em></a>\nas well as the reference sections on <a href=\"../../reference/expressions/operator-expr.html#the-dereference-operator\">the dereference operator</a>,\n<a href=\"../../reference/expressions/method-call-expr.html\">method resolution</a>, and <a href=\"../../reference/type-coercions.html\">type coercions</a>.</p>\n<h2 id=\"when-to-implement-deref-or-derefmut\"><a class=\"doc-anchor\" href=\"#when-to-implement-deref-or-derefmut\">§</a>When to implement <code>Deref</code> or <code>DerefMut</code></h2>\n<p>The same advice applies to both deref traits. In general, deref traits\n<strong>should</strong> be implemented if:</p>\n<ol>\n<li>a value of the type transparently behaves like a value of the target\ntype;</li>\n<li>the implementation of the deref function is cheap; and</li>\n<li>users of the type will not be surprised by any deref coercion behaviour.</li>\n</ol>\n<p>In general, deref traits <strong>should not</strong> be implemented if:</p>\n<ol>\n<li>the deref implementations could fail unexpectedly; or</li>\n<li>the type has methods that are likely to collide with methods on the\ntarget type; or</li>\n<li>committing to deref coercion as part of the public API is not desirable.</li>\n</ol>\n<p>Note that there’s a large difference between implementing deref traits\ngenerically over many target types, and doing so only for specific target\ntypes.</p>\n<p>Generic implementations, such as for <a href=\"../../alloc/boxed/struct.Box.html\"><code>Box&lt;T&gt;</code></a> (which is generic over\nevery type and dereferences to <code>T</code>) should be careful to provide few or no\nmethods, since the target type is unknown and therefore every method could\ncollide with one on the target type, causing confusion for users.\n<code>impl&lt;T&gt; Box&lt;T&gt;</code> has no methods (though several associated functions),\npartly for this reason.</p>\n<p>Specific implementations, such as for <a href=\"../../alloc/string/struct.String.html\"><code>String</code></a> (whose <code>Deref</code>\nimplementation has <code>Target = str</code>) can have many methods, since avoiding\ncollision is much easier. <code>String</code> and <code>str</code> both have many methods, and\n<code>String</code> additionally behaves as if it has every method of <code>str</code> because of\nderef coercion. The implementing type may also be generic while the\nimplementation is still specific in this sense; for example, <a href=\"../../alloc/vec/struct.Vec.html\"><code>Vec&lt;T&gt;</code></a>\ndereferences to <code>[T]</code>, so methods of <code>T</code> are not applicable.</p>\n<p>Consider also that deref coercion means that deref traits are a much larger\npart of a type’s public API than any other trait as it is implicitly called\nby the compiler. Therefore, it is advisable to consider whether this is\nsomething you are comfortable supporting as a public API.</p>\n<p>The <a href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\"><code>AsRef</code></a> and <a href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\"><code>Borrow</code></a> traits have very similar\nsignatures to <code>Deref</code>. It may be desirable to implement either or both of\nthese, whether in addition to or rather than deref traits. See their\ndocumentation for details.</p>\n<h2 id=\"fallibility\"><a class=\"doc-anchor\" href=\"#fallibility\">§</a>Fallibility</h2>\n<p><strong>This trait’s method should never unexpectedly fail</strong>. Deref coercion means\nthe compiler will often insert calls to <code>Deref::deref</code> implicitly. Failure\nduring dereferencing can be extremely confusing when <code>Deref</code> is invoked\nimplicitly. In the majority of uses it should be infallible, though it may\nbe acceptable to panic if the type is misused through programmer error, for\nexample.</p>\n<p>However, infallibility is not enforced and therefore not guaranteed.\nAs such, <code>unsafe</code> code should not rely on infallibility in general for\nsoundness.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>A struct with a single field which is accessible by dereferencing the\nstruct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Deref;\n\n<span class=\"kw\">struct </span>DerefExample&lt;T&gt; {\n    value: T\n}\n\n<span class=\"kw\">impl</span>&lt;T&gt; Deref <span class=\"kw\">for </span>DerefExample&lt;T&gt; {\n    <span class=\"kw\">type </span>Target = T;\n\n    <span class=\"kw\">fn </span>deref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Target {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.value\n    }\n}\n\n<span class=\"kw\">let </span>x = DerefExample { value: <span class=\"string\">'a' </span>};\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'a'</span>, <span class=\"kw-2\">*</span>x);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Deref;%0A++++%0A++++struct+DerefExample%3CT%3E+%7B%0A++++++++value:+T%0A++++%7D%0A++++%0A++++impl%3CT%3E+Deref+for+DerefExample%3CT%3E+%7B%0A++++++++type+Target+=+T;%0A++++%0A++++++++fn+deref(%26self)+-%3E+%26Self::Target+%7B%0A++++++++++++%26self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+x+=+DerefExample+%7B+value:+'a'+%7D;%0A++++assert_eq!('a',+*x);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#141\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a>: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></h4></section></summary><div class=\"docblock\"><p>The resulting type after dereferencing.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.deref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#147\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\"><p>Dereferences the value.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#712\">source</a></span><a href=\"#impl-Deref-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#582-589\">source</a></span><a href=\"#impl-Deref-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1788-1794\">source</a></span><a href=\"#impl-Deref-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2479\">source</a></span><a href=\"#impl-Deref-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-IoSlice%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1484-1491\">source</a></span><a href=\"#impl-Deref-for-IoSlice%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-IoSliceMut%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1338-1345\">source</a></span><a href=\"#impl-Deref-for-IoSliceMut%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-VaList%3C'a,+'f%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/mod.rs.html#448\">source</a><a href=\"#impl-Deref-for-VaList%3C'a,+'f%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'f&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../ffi/struct.VaList.html\" title=\"struct std::ffi::VaList\">VaList</a>&lt;'a, 'f&gt;<div class=\"where\">where\n    'f: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"../ffi/struct.VaListImpl.html\" title=\"struct std::ffi::VaListImpl\">VaListImpl</a>&lt;'f&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Cow%3C'_,+B%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#332-334\">source</a></span><a href=\"#impl-Deref-for-Cow%3C'_,+B%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    &lt;B as <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a>&gt;::<a class=\"associatedtype\" href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" title=\"type std::borrow::ToOwned::Owned\">Owned</a>: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = B</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1673\">source</a></span><a href=\"#impl-Deref-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = &lt;Ptr as <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#151\">source</a></span><a href=\"#impl-Deref-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-%26mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#164\">source</a></span><a href=\"#impl-Deref-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-ThinBox%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed/thin.rs.html#142\">source</a><a href=\"#impl-Deref-for-ThinBox%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../boxed/struct.ThinBox.html\" title=\"struct std::boxed::ThinBox\">ThinBox</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Ref%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1460\">source</a></span><a href=\"#impl-Deref-for-Ref%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../cell/struct.Ref.html\" title=\"struct std::cell::Ref\">Ref</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-13\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-13\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1846\">source</a></span><a href=\"#impl-Deref-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../cell/struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-14\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-14\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-ManuallyDrop%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/manually_drop.rs.html#149\">source</a></span><a href=\"#impl-Deref-for-ManuallyDrop%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../mem/struct.ManuallyDrop.html\" title=\"struct std::mem::ManuallyDrop\">ManuallyDrop</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-15\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-15\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-AssertUnwindSafe%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#251\">source</a></span><a href=\"#impl-Deref-for-AssertUnwindSafe%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../panic/struct.AssertUnwindSafe.html\" title=\"struct std::panic::AssertUnwindSafe\">AssertUnwindSafe</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-16\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-16\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3619\">source</a><a href=\"#impl-Deref-for-UniqueRc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../rc/struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-17\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-17\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1972\">source</a></span><a href=\"#impl-Deref-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-18\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-18\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-PeekMut%3C'_,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#327\">source</a></span><a href=\"#impl-Deref-for-PeekMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../collections/binary_heap/struct.PeekMut.html\" title=\"struct std::collections::binary_heap::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-19\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-19\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2146\">source</a></span><a href=\"#impl-Deref-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-20\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-20\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2135\">source</a></span><a href=\"#impl-Deref-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-21\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-21\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2810\">source</a></span><a href=\"#impl-Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-22\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-22\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-LazyCell%3CT,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#171\">source</a></span><a href=\"#impl-Deref-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../cell/struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-23\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-23\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-LazyLock%3CT,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/sync/lazy_lock.rs.html#205-217\">source</a></span><a href=\"#impl-Deref-for-LazyLock%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F: <a class=\"trait\" href=\"trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.LazyLock.html\" title=\"struct std::sync::LazyLock\">LazyLock</a>&lt;T, F&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-24\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-24\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-MappedMutexGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/mutex.rs.html#646-652\">source</a><a href=\"#impl-Deref-for-MappedMutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.MappedMutexGuard.html\" title=\"struct std::sync::MappedMutexGuard\">MappedMutexGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-25\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-25\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-MappedRwLockReadGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#681-689\">source</a><a href=\"#impl-Deref-for-MappedRwLockReadGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.MappedRwLockReadGuard.html\" title=\"struct std::sync::MappedRwLockReadGuard\">MappedRwLockReadGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-26\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-26\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#692-700\">source</a><a href=\"#impl-Deref-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.MappedRwLockWriteGuard.html\" title=\"struct std::sync::MappedRwLockWriteGuard\">MappedRwLockWriteGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-27\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-27\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-MutexGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/mutex.rs.html#530-536\">source</a></span><a href=\"#impl-Deref-for-MutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-28\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-28\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-ReentrantLockGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#279-285\">source</a><a href=\"#impl-Deref-for-ReentrantLockGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.ReentrantLockGuard.html\" title=\"struct std::sync::ReentrantLockGuard\">ReentrantLockGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-29\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-29\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-RwLockReadGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#653-660\">source</a></span><a href=\"#impl-Deref-for-RwLockReadGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.RwLockReadGuard.html\" title=\"struct std::sync::RwLockReadGuard\">RwLockReadGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-30\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-30\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Deref-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#663-670\">source</a></span><a href=\"#impl-Deref-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"../sync/struct.RwLockWriteGuard.html\" title=\"struct std::sync::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'_, T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Target-31\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target-31\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></div></details></div><script src=\"../../trait.impl/core/ops/deref/trait.Deref.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:02.332Z"
}