{
	"title": "join in std::future - Rust",
	"url": "https://doc.rust-lang.org/stable/std/future/macro.join.html",
	"markdown": "# join in std::future - Rust\n\n```\npub macro join($($fut:expr),+ $(,)?) {\n    ...\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`future_join`Â [#91642](https://github.com/rust-lang/rust/issues/91642))\n\nExpand description\n\nPolls multiple futures simultaneously, returning a tuple of all results once complete.\n\nWhile `join!(a, b).await` is similar to `(a.await, b.await)`, `join!` polls both futures concurrently and is therefore more efficient.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(future_join)]\n\nuse std::future::join;\n\nasync fn one() -> usize { 1 }\nasync fn two() -> usize { 2 }\n\nlet x = join!(one(), two()).await;\nassert_eq!(x, (1, 2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(future_join)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::join;%0A++++%0A++++async+fn+one()+-%3E+usize+%7B+1+%7D%0A++++async+fn+two()+-%3E+usize+%7B+2+%7D%0A++++%0A++++let+_+=++async+%7B%0A++++let+x+=+join!(one(),+two()).await;%0A++++assert_eq!(x,+(1,+2));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n`join!` is variadic, so you can pass any number of futures:\n\n```\n#![feature(future_join)]\n\nuse std::future::join;\n\nasync fn one() -> usize { 1 }\nasync fn two() -> usize { 2 }\nasync fn three() -> usize { 3 }\n\nlet x = join!(one(), two(), three()).await;\nassert_eq!(x, (1, 2, 3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(future_join)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::join;%0A++++%0A++++async+fn+one()+-%3E+usize+%7B+1+%7D%0A++++async+fn+two()+-%3E+usize+%7B+2+%7D%0A++++async+fn+three()+-%3E+usize+%7B+3+%7D%0A++++%0A++++let+_+=+async+%7B%0A++++let+x+=+join!(one(),+two(),+three()).await;%0A++++assert_eq!(x,+(1,+2,+3));%0A++++%7D;%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Polls multiple futures simultaneously, returning a tuple of all results once complete.\"><title>join in std::future - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc macro\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::future</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.join.html\">join</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AsyncDropInPlace.html\">AsyncDropInPlace</a></li><li><a href=\"struct.Pending.html\">Pending</a></li><li><a href=\"struct.PollFn.html\">PollFn</a></li><li><a href=\"struct.Ready.html\">Ready</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsyncDrop.html\">AsyncDrop</a></li><li><a href=\"trait.Future.html\">Future</a></li><li><a href=\"trait.IntoFuture.html\">IntoFuture</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.async_drop.html\">async_drop</a></li><li><a href=\"fn.async_drop_in_place.html\">async_drop_in_place</a></li><li><a href=\"fn.pending.html\">pending</a></li><li><a href=\"fn.poll_fn.html\">poll_fn</a></li><li><a href=\"fn.ready.html\">ready</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Macro <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">future</a>::<wbr><a class=\"macro\" href=\"#\">join</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/join.rs.html#48\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><span class=\"kw\">pub macro </span>join($(<span class=\"macro-nonterminal\">$fut</span>:expr),+ $(,)<span class=\"question-mark\">?</span>) {\n    ...\n}</pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>future_join</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91642\">#91642</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Polls multiple futures simultaneously, returning a tuple\nof all results once complete.</p>\n<p>While <code>join!(a, b).await</code> is similar to <code>(a.await, b.await)</code>,\n<code>join!</code> polls both futures concurrently and is therefore more efficient.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(future_join)]\n\n</span><span class=\"kw\">use </span>std::future::join;\n\n<span class=\"kw\">async fn </span>one() -&gt; usize { <span class=\"number\">1 </span>}\n<span class=\"kw\">async fn </span>two() -&gt; usize { <span class=\"number\">2 </span>}\n\n<span class=\"kw\">let </span>x = <span class=\"macro\">join!</span>(one(), two()).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(x, (<span class=\"number\">1</span>, <span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(future_join)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::join;%0A++++%0A++++async+fn+one()+-%3E+usize+%7B+1+%7D%0A++++async+fn+two()+-%3E+usize+%7B+2+%7D%0A++++%0A++++let+_+=++async+%7B%0A++++let+x+=+join!(one(),+two()).await;%0A++++assert_eq!(x,+(1,+2));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p><code>join!</code> is variadic, so you can pass any number of futures:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(future_join)]\n\n</span><span class=\"kw\">use </span>std::future::join;\n\n<span class=\"kw\">async fn </span>one() -&gt; usize { <span class=\"number\">1 </span>}\n<span class=\"kw\">async fn </span>two() -&gt; usize { <span class=\"number\">2 </span>}\n<span class=\"kw\">async fn </span>three() -&gt; usize { <span class=\"number\">3 </span>}\n\n<span class=\"kw\">let </span>x = <span class=\"macro\">join!</span>(one(), two(), three()).<span class=\"kw\">await</span>;\n<span class=\"macro\">assert_eq!</span>(x, (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(future_join)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::join;%0A++++%0A++++async+fn+one()+-%3E+usize+%7B+1+%7D%0A++++async+fn+two()+-%3E+usize+%7B+2+%7D%0A++++async+fn+three()+-%3E+usize+%7B+3+%7D%0A++++%0A++++let+_+=+async+%7B%0A++++let+x+=+join!(one(),+two(),+three()).await;%0A++++assert_eq!(x,+(1,+2,+3));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:15.079Z"
}