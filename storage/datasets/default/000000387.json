{
	"title": "LineWriter in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/struct.LineWriter.html",
	"markdown": "# LineWriter in std::io - Rust\n\n## Struct [std](../index.html)::[io](index.html)::[LineWriter](#)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#67-69) Â·\n\n```\npub struct LineWriter<W: ?Sized + Write> { /* private fields */ }\n```\n\nExpand description\n\nWraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.\n\nThe [`BufWriter`](struct.BufWriter.html \"struct std::io::BufWriter\") struct wraps a writer and buffers its output. But it only does this batched write when it goes out of scope, or when the internal buffer is full. Sometimes, youâ€™d prefer to write each line as itâ€™s completed, rather than the entire buffer at once. Enter `LineWriter`. It does exactly that.\n\nLike [`BufWriter`](struct.BufWriter.html \"struct std::io::BufWriter\"), a `LineWriter`â€™s buffer will also be flushed when the `LineWriter` goes out of scope or when its internal buffer is full.\n\nIf thereâ€™s still a partial line in the buffer when the `LineWriter` is dropped, it will flush those contents.\n\n## [Â§](#examples)Examples\n\nWe can use `LineWriter` to write one line at a time, significantly reducing the number of actual writes to the file.\n\n```\nuse std::fs::{self, File};\nuse std::io::prelude::*;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let road_not_taken = b\"I shall be telling this with a sigh\nSomewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\";\n\n    let file = File::create(\"poem.txt\")?;\n    let mut file = LineWriter::new(file);\n\n    file.write_all(b\"I shall be telling this with a sigh\")?;\n\n    // No bytes are written until a newline is encountered (or\n    // the internal buffer is filled).\n    assert_eq!(fs::read_to_string(\"poem.txt\")?, \"\");\n    file.write_all(b\"\\n\")?;\n    assert_eq!(\n        fs::read_to_string(\"poem.txt\")?,\n        \"I shall be telling this with a sigh\\n\",\n    );\n\n    // Write the rest of the poem.\n    file.write_all(b\"Somewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\")?;\n\n    // The last line of the poem doesn't end in a newline, so\n    // we have to flush or drop the `LineWriter` to finish\n    // writing.\n    file.flush()?;\n\n    // Confirm the whole poem was written.\n    assert_eq!(fs::read(\"poem.txt\")?, &road_not_taken[..]);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::%7Bself,+File%7D;%0Ause+std::io::prelude::*;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+road_not_taken+=+b%22I+shall+be+telling+this+with+a+sigh%0ASomewhere+ages+and+ages+hence:%0ATwo+roads+diverged+in+a+wood,+and+I+-%0AI+took+the+one+less+traveled+by,%0AAnd+that+has+made+all+the+difference.%22;%0A%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+mut+file+=+LineWriter::new(file);%0A%0A++++file.write_all(b%22I+shall+be+telling+this+with+a+sigh%22)?;%0A%0A++++//+No+bytes+are+written+until+a+newline+is+encountered+(or%0A++++//+the+internal+buffer+is+filled).%0A++++assert_eq!(fs::read_to_string(%22poem.txt%22)?,+%22%22);%0A++++file.write_all(b%22%5Cn%22)?;%0A++++assert_eq!(%0A++++++++fs::read_to_string(%22poem.txt%22)?,%0A++++++++%22I+shall+be+telling+this+with+a+sigh%5Cn%22,%0A++++);%0A%0A++++//+Write+the+rest+of+the+poem.%0A++++file.write_all(b%22Somewhere+ages+and+ages+hence:%0ATwo+roads+diverged+in+a+wood,+and+I+-%0AI+took+the+one+less+traveled+by,%0AAnd+that+has+made+all+the+difference.%22)?;%0A%0A++++//+The+last+line+of+the+poem+doesn%27t+end+in+a+newline,+so%0A++++//+we+have+to+flush+or+drop+the+%60LineWriter%60+to+finish%0A++++//+writing.%0A++++file.flush()?;%0A%0A++++//+Confirm+the+whole+poem+was+written.%0A++++assert_eq!(fs::read(%22poem.txt%22)?,+%26road_not_taken%5B..%5D);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#71-164)[Â§](#impl-LineWriter%3CW%3E)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#87-90)\n\nCreates a new `LineWriter`.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::new(file);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::new(file);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#108-110)\n\nCreates a new `LineWriter` with at least the specified capacity for the internal buffer.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::with_capacity(100, file);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::with_capacity(100,+file);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#133-135)\n\nGets a mutable reference to the underlying writer.\n\nCaution must be taken when calling methods on the mutable reference returned as extra writes could corrupt the output stream.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let mut file = LineWriter::new(file);\n\n    // we can use reference just like file\n    let reference = file.get_mut();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+mut+file+=+LineWriter::new(file);%0A%0A++++//+we+can+use+reference+just+like+file%0A++++let+reference+=+file.get_mut();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#161-163)\n\nUnwraps this `LineWriter`, returning the underlying writer.\n\nThe internal buffer is written out before returning the writer.\n\n##### [Â§](#errors)Errors\n\nAn [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") will be returned if an error occurs while flushing the buffer.\n\n##### [Â§](#examples-4)Examples\n\n```\nuse std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n\n    let writer: LineWriter<File> = LineWriter::new(file);\n\n    let file: File = writer.into_inner()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A%0A++++let+writer:+LineWriter%3CFile%3E+=+LineWriter::new(file);%0A%0A++++let+file:+File+=+writer.into_inner()?;%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#166-187)[Â§](#impl-LineWriter%3CW%3E-1)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#184-186)\n\nGets a reference to the underlying writer.\n\n##### [Â§](#examples-5)Examples\n\n```\nuse std::fs::File;\nuse std::io::LineWriter;\n\nfn main() -> std::io::Result<()> {\n    let file = File::create(\"poem.txt\")?;\n    let file = LineWriter::new(file);\n\n    let reference = file.get_ref();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::new(file);%0A%0A++++let+reference+=+file.get_ref();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#221-234)[Â§](#impl-Debug-for-LineWriter%3CW%3E)\n\n1.0.0 Â· [source](about:blank/src/std/io/buffered/linewriter.rs.html#190-218)[Â§](#impl-Write-for-LineWriter%3CW%3E)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#191-193)[Â§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#195-197)[Â§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#199-201)[Â§](#method.write_vectored)\n\nLike [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#203-205)[Â§](#method.is_write_vectored)\n\nðŸ”¬This is a nightly-only experimental API. (`can_vector`Â [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#207-209)[Â§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#211-213)[Â§](#method.write_all_vectored)\n\nðŸ”¬This is a nightly-only experimental API. (`write_all_vectored`Â [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/trait.Write.html#method.write_all_vectored)\n\n[source](about:blank/src/std/io/buffered/linewriter.rs.html#215-217)[Â§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/trait.Write.html#method.write_fmt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Wraps a writer and buffers output to it, flushing whenever a newline (`0x0a`, `'\\n'`) is detected.\"><title>LineWriter in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">LineWriter</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">LineWriter</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_ref\">get_ref</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-LineWriter%3CW%3E\">Debug</a></li><li><a href=\"#impl-Write-for-LineWriter%3CW%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-LineWriter%3CW%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-LineWriter%3CW%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-LineWriter%3CW%3E\">Send</a></li><li><a href=\"#impl-Sync-for-LineWriter%3CW%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-LineWriter%3CW%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-LineWriter%3CW%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"struct\" href=\"#\">LineWriter</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#67-69\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct LineWriter&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Wraps a writer and buffers output to it, flushing whenever a newline\n(<code>0x0a</code>, <code>'\\n'</code>) is detected.</p>\n<p>The <a href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\"><code>BufWriter</code></a> struct wraps a writer and buffers its output.\nBut it only does this batched write when it goes out of scope, or when the\ninternal buffer is full. Sometimes, youâ€™d prefer to write each line as itâ€™s\ncompleted, rather than the entire buffer at once. Enter <code>LineWriter</code>. It\ndoes exactly that.</p>\n<p>Like <a href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\"><code>BufWriter</code></a>, a <code>LineWriter</code>â€™s buffer will also be flushed when the\n<code>LineWriter</code> goes out of scope or when its internal buffer is full.</p>\n<p>If thereâ€™s still a partial line in the buffer when the <code>LineWriter</code> is\ndropped, it will flush those contents.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>We can use <code>LineWriter</code> to write one line at a time, significantly\nreducing the number of actual writes to the file.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::{<span class=\"self\">self</span>, File};\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>road_not_taken = <span class=\"string\">b\"I shall be telling this with a sigh\nSomewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\"</span>;\n\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = LineWriter::new(file);\n\n    file.write_all(<span class=\"string\">b\"I shall be telling this with a sigh\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// No bytes are written until a newline is encountered (or\n    // the internal buffer is filled).\n    </span><span class=\"macro\">assert_eq!</span>(fs::read_to_string(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>, <span class=\"string\">\"\"</span>);\n    file.write_all(<span class=\"string\">b\"\\n\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(\n        fs::read_to_string(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>,\n        <span class=\"string\">\"I shall be telling this with a sigh\\n\"</span>,\n    );\n\n    <span class=\"comment\">// Write the rest of the poem.\n    </span>file.write_all(<span class=\"string\">b\"Somewhere ages and ages hence:\nTwo roads diverged in a wood, and I -\nI took the one less traveled by,\nAnd that has made all the difference.\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// The last line of the poem doesn't end in a newline, so\n    // we have to flush or drop the `LineWriter` to finish\n    // writing.\n    </span>file.flush()<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Confirm the whole poem was written.\n    </span><span class=\"macro\">assert_eq!</span>(fs::read(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>, <span class=\"kw-2\">&amp;</span>road_not_taken[..]);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::%7Bself,+File%7D;%0Ause+std::io::prelude::*;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+road_not_taken+=+b%22I+shall+be+telling+this+with+a+sigh%0ASomewhere+ages+and+ages+hence:%0ATwo+roads+diverged+in+a+wood,+and+I+-%0AI+took+the+one+less+traveled+by,%0AAnd+that+has+made+all+the+difference.%22;%0A%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+mut+file+=+LineWriter::new(file);%0A%0A++++file.write_all(b%22I+shall+be+telling+this+with+a+sigh%22)?;%0A%0A++++//+No+bytes+are+written+until+a+newline+is+encountered+(or%0A++++//+the+internal+buffer+is+filled).%0A++++assert_eq!(fs::read_to_string(%22poem.txt%22)?,+%22%22);%0A++++file.write_all(b%22%5Cn%22)?;%0A++++assert_eq!(%0A++++++++fs::read_to_string(%22poem.txt%22)?,%0A++++++++%22I+shall+be+telling+this+with+a+sigh%5Cn%22,%0A++++);%0A%0A++++//+Write+the+rest+of+the+poem.%0A++++file.write_all(b%22Somewhere+ages+and+ages+hence:%0ATwo+roads+diverged+in+a+wood,+and+I+-%0AI+took+the+one+less+traveled+by,%0AAnd+that+has+made+all+the+difference.%22)?;%0A%0A++++//+The+last+line+of+the+poem+doesn't+end+in+a+newline,+so%0A++++//+we+have+to+flush+or+drop+the+%60LineWriter%60+to+finish%0A++++//+writing.%0A++++file.flush()?;%0A%0A++++//+Confirm+the+whole+poem+was+written.%0A++++assert_eq!(fs::read(%22poem.txt%22)?,+%26road_not_taken%5B..%5D);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LineWriter%3CW%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#71-164\">source</a><a href=\"#impl-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#87-90\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(inner: W) -&gt; <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"LineWriter<W>\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>LineWriter</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file = LineWriter::new(file);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::new(file);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#108-110\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, inner: W) -&gt; <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"LineWriter<W>\">â“˜</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>LineWriter</code> with at least the specified capacity for the\ninternal buffer.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file = LineWriter::with_capacity(<span class=\"number\">100</span>, file);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::with_capacity(100,+file);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#133-135\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut W</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the underlying writer.</p>\n<p>Caution must be taken when calling methods on the mutable reference\nreturned as extra writes could corrupt the output stream.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = LineWriter::new(file);\n\n    <span class=\"comment\">// we can use reference just like file\n    </span><span class=\"kw\">let </span>reference = file.get_mut();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+mut+file+=+LineWriter::new(file);%0A%0A++++//+we+can+use+reference+just+like+file%0A++++let+reference+=+file.get_mut();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#161-163\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;W, <a class=\"struct\" href=\"struct.IntoInnerError.html\" title=\"struct std::io::IntoInnerError\">IntoInnerError</a>&lt;<a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>LineWriter</code>, returning the underlying writer.</p>\n<p>The internal buffer is written out before returning the writer.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">Â§</a>Errors</h5>\n<p>An <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> will be returned if an error occurs while flushing the buffer.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>writer: LineWriter&lt;File&gt; = LineWriter::new(file);\n\n    <span class=\"kw\">let </span>file: File = writer.into_inner()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A%0A++++let+writer:+LineWriter%3CFile%3E+=+LineWriter::new(file);%0A%0A++++let+file:+File+=+writer.into_inner()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LineWriter%3CW%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#166-187\">source</a><a href=\"#impl-LineWriter%3CW%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#184-186\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;W</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the underlying writer.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::LineWriter;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"poem.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file = LineWriter::new(file);\n\n    <span class=\"kw\">let </span>reference = file.get_ref();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::LineWriter;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::create(%22poem.txt%22)?;%0A++++let+file+=+LineWriter::new(file);%0A%0A++++let+reference+=+file.get_ref();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-LineWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#221-234\">source</a></span><a href=\"#impl-Debug-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#225-233\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-LineWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#190-218\">source</a></span><a href=\"#impl-Write-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#191-193\">source</a><a href=\"#method.write\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#195-197\">source</a><a href=\"#method.flush\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#199-201\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#203-205\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#207-209\">source</a><a href=\"#method.write_all\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#211-213\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/linewriter.rs.html#215-217\">source</a><a href=\"#method.write_fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Send-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Sync-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-LineWriter%3CW%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-LineWriter%3CW%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"LineWriter<W>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.LineWriter.html\\\" title=\\\"struct std::io::LineWriter\\\">LineWriter</a>&lt;W&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;W: ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a> + <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.LineWriter.html\\\" title=\\\"struct std::io::LineWriter\\\">LineWriter</a>&lt;W&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:25.648Z"
}