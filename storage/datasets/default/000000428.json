{
	"title": "read_to_string in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/fn.read_to_string.html",
	"markdown": "# read\\_to\\_string in std::io - Rust\n\n```\npub fn read_to_string<R: Read>(reader: R) -> Result<String>\n```\n\nExpand description\n\nRead all bytes from a [reader](trait.Read.html \"trait std::io::Read\") into a new [`String`](../string/struct.String.html \"struct std::string::String\").\n\nThis is a convenience function for [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\"). Using this function avoids having to create a variable first and provides more type safety since you can only get the buffer out if there were no errors. (If you use [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\") you have to remember to check whether the read succeeded because otherwise your buffer will be empty or only partially full.)\n\n## [§](#performance)Performance\n\nThe downside of this function’s increased ease of use and type safety is that it gives you less control over performance. For example, you can’t pre-allocate memory like you can using [`String::with_capacity`](about:blank/string/struct.String.html#method.with_capacity \"associated function std::string::String::with_capacity\") and [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\"). Also, you can’t re-use the buffer if an error occurs while reading.\n\nIn many cases, this function’s performance will be adequate and the ease of use and type safety tradeoffs will be worth it. However, there are cases where you need more control over performance, and in those cases you should definitely use [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\") directly.\n\nNote that in some special cases, such as when reading files, this function will pre-allocate memory based on the size of the input it is reading. In those cases, the performance should be as good as if you had used [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\") with a manually pre-allocated buffer.\n\n## [§](#errors)Errors\n\nThis function forces you to handle errors because the output (the `String`) is wrapped in a [`Result`](type.Result.html \"type std::io::Result\"). See [`Read::read_to_string`](about:blank/trait.Read.html#method.read_to_string \"method std::io::Read::read_to_string\") for the errors that can occur. If any error occurs, you will get an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\"), so you don’t have to worry about your buffer being empty or partially full.\n\n## [§](#examples)Examples\n\n```\nfn main() -> io::Result<()> {\n    let stdin = io::read_to_string(io::stdin())?;\n    println!(\"Stdin was:\");\n    println!(\"{stdin}\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+stdin+=+io::read_to_string(io::stdin())?;%0A++++println!(%22Stdin+was:%22);%0A++++println!(%22%7Bstdin%7D%22);%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Read all bytes from a reader into a new `String`.\"><title>read_to_string in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"fn\" href=\"#\">read_to_string</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.65.0\">1.65.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1207-1211\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn read_to_string&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(reader: R) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Read all bytes from a <a href=\"trait.Read.html\" title=\"trait std::io::Read\">reader</a> into a new <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.</p>\n<p>This is a convenience function for <a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a>. Using this\nfunction avoids having to create a variable first and provides more type\nsafety since you can only get the buffer out if there were no errors. (If you\nuse <a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a> you have to remember to check whether the read\nsucceeded because otherwise your buffer will be empty or only partially full.)</p>\n<h2 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">§</a>Performance</h2>\n<p>The downside of this function’s increased ease of use and type safety is\nthat it gives you less control over performance. For example, you can’t\npre-allocate memory like you can using <a href=\"../string/struct.String.html#method.with_capacity\" title=\"associated function std::string::String::with_capacity\"><code>String::with_capacity</code></a> and\n<a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a>. Also, you can’t re-use the buffer if an error\noccurs while reading.</p>\n<p>In many cases, this function’s performance will be adequate and the ease of use\nand type safety tradeoffs will be worth it. However, there are cases where you\nneed more control over performance, and in those cases you should definitely use\n<a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a> directly.</p>\n<p>Note that in some special cases, such as when reading files, this function will\npre-allocate memory based on the size of the input it is reading. In those\ncases, the performance should be as good as if you had used\n<a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a> with a manually pre-allocated buffer.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>This function forces you to handle errors because the output (the <code>String</code>)\nis wrapped in a <a href=\"type.Result.html\" title=\"type std::io::Result\"><code>Result</code></a>. See <a href=\"trait.Read.html#method.read_to_string\" title=\"method std::io::Read::read_to_string\"><code>Read::read_to_string</code></a> for the errors\nthat can occur. If any error occurs, you will get an <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>, so you\ndon’t have to worry about your buffer being empty or partially full.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>stdin = io::read_to_string(io::stdin())<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Stdin was:\"</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{stdin}\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+stdin+=+io::read_to_string(io::stdin())?;%0A++++println!(%22Stdin+was:%22);%0A++++println!(%22%7Bstdin%7D%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:33.061Z"
}