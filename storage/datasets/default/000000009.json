{
	"title": "Programming a Guessing Game - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html",
	"markdown": "# Programming a Guessing Game - The Rust Programming Language\n\nLet’s jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You’ll learn about `let`, `match`, methods, associated functions, external crates, and more! In the following chapters, we’ll explore these ideas in more detail. In this chapter, you’ll just practice the fundamentals.\n\nWe’ll implement a classic beginner programming problem: a guessing game. Here’s how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.\n\n## [Setting Up a New Project](#setting-up-a-new-project)\n\nTo set up a new project, go to the _projects_ directory that you created in Chapter 1 and make a new project using Cargo, like so:\n\n```console\n$ cargo new guessing_game\n$ cd guessing_game\n\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`) as the first argument. The second command changes to the new project’s directory.\n\nLook at the generated _Cargo.toml_ file:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n```\n\nAs you saw in Chapter 1, `cargo new` generates a “Hello, world!” program for you. Check out the _src/main.rs_ file:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nNow let’s compile this “Hello, world!” program and run it in the same step using the `cargo run` command:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project, as we’ll do in this game, quickly testing each iteration before moving on to the next one.\n\nReopen the _src/main.rs_ file. You’ll be writing all the code in this file.\n\n## [Processing a Guess](#processing-a-guess)\n\nThe first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we’ll allow the player to input a guess. Enter the code in Listing 2-1 into _src/main.rs_.\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nListing 2-1: Code that gets a guess from the user and prints it\n\nThis code contains a lot of information, so let’s go over it line by line. To obtain user input and then print the result as output, we need to bring the `io` input/output library into scope. The `io` library comes from the standard library, known as `std`:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nBy default, Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the _prelude_, and you can see everything in it [in the standard library documentation](../std/prelude/index.html).\n\nIf a type you want to use isn’t in the prelude, you have to bring that type into scope explicitly with a `use` statement. Using the `std::io` library provides you with a number of useful features, including the ability to accept user input.\n\nAs you saw in Chapter 1, the `main` function is the entry point into the program:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThe `fn` syntax declares a new function; the parentheses, `()`, indicate there are no parameters; and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to the screen:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThis code is printing a prompt stating what the game is and requesting input from the user.\n\n### [Storing Values with Variables](#storing-values-with-variables)\n\nNext, we’ll create a _variable_ to store the user input, like this:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nNow the program is getting interesting! There’s a lot going on in this little line. We use the `let` statement to create the variable. Here’s another example:\n\n```rust\nlet apples = 5;\n```\n\nThis line creates a new variable named `apples` and binds it to the value 5. In Rust, variables are immutable by default, meaning once we give the variable a value, the value won’t change. We’ll be discussing this concept in detail in the [“Variables and Mutability”](about:blank/ch03-01-variables-and-mutability.html#variables-and-mutability) section in Chapter 3. To make a variable mutable, we add `mut` before the variable name:\n\n```rust\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n```\n\nNote: The `//` syntax starts a comment that continues until the end of the line. Rust ignores everything in comments. We’ll discuss comments in more detail in [Chapter 3](ch03-04-comments.html).\n\nReturning to the guessing game program, you now know that `let mut guess` will introduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we want to bind something to the variable now. On the right of the equal sign is the value that `guess` is bound to, which is the result of calling `String::new`, a function that returns a new instance of a `String`. [`String`](../std/string/struct.String.html) is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an associated function of the `String` type. An _associated function_ is a function that’s implemented on a type, in this case `String`. This `new` function creates a new, empty string. You’ll find a `new` function on many types because it’s a common name for a function that makes a new value of some kind.\n\nIn full, the `let mut guess = String::new();` line has created a mutable variable that is currently bound to a new, empty instance of a `String`. Whew!\n\n### [Receiving User Input](#receiving-user-input)\n\nRecall that we included the input/output functionality from the standard library with `use std::io;` on the first line of the program. Now we’ll call the `stdin` function from the `io` module, which will allow us to handle user input:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nIf we hadn’t imported the `io` library with `use std::io;` at the beginning of the program, we could still use the function by writing this function call as `std::io::stdin`. The `stdin` function returns an instance of [`std::io::Stdin`](../std/io/struct.Stdin.html), which is a type that represents a handle to the standard input for your terminal.\n\nNext, the line `.read_line(&mut guess)` calls the [`read_line`](about:blank/std/io/struct.Stdin.html#method.read_line) method on the standard input handle to get input from the user. We’re also passing `&mut guess` as the argument to `read_line` to tell it what string to store the user input in. The full job of `read_line` is to take whatever the user types into standard input and append that into a string (without overwriting its contents), so we therefore pass that string as an argument. The string argument needs to be mutable so the method can change the string’s content.\n\nThe `&` indicates that this argument is a _reference_, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust’s major advantages is how safe and easy it is to use references. You don’t need to know a lot of those details to finish this program. For now, all you need to know is that, like variables, references are immutable by default. Hence, you need to write `&mut guess` rather than `&guess` to make it mutable. (Chapter 4 will explain references more thoroughly.)\n\n### [Handling Potential Failure with `Result`](#handling-potential-failure-with-result)\n\nWe’re still working on this line of code. We’re now discussing a third line of text, but note that it’s still part of a single logical line of code. The next part is this method:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nWe could have written this code as:\n\n```rust\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it’s best to divide it. It’s often wise to introduce a newline and other whitespace to help break up long lines when you call a method with the `.method_name()` syntax. Now let’s discuss what this line does.\n\nAs mentioned earlier, `read_line` puts whatever the user enters into the string we pass to it, but it also returns a `Result` value. [`Result`](../std/result/enum.Result.html) is an [_enumeration_](ch06-00-enums.html), often called an _enum_, which is a type that can be in one of multiple possible states. We call each possible state a _variant_.\n\n[Chapter 6](ch06-00-enums.html) will cover enums in more detail. The purpose of these `Result` types is to encode error-handling information.\n\n`Result`’s variants are `Ok` and `Err`. The `Ok` variant indicates the operation was successful, and inside `Ok` is the successfully generated value. The `Err` variant means the operation failed, and `Err` contains information about how or why the operation failed.\n\nValues of the `Result` type, like values of any type, have methods defined on them. An instance of `Result` has an [`expect` method](about:blank/std/result/enum.Result.html#method.expect) that you can call. If this instance of `Result` is an `Err` value, `expect` will cause the program to crash and display the message that you passed as an argument to `expect`. If the `read_line` method returns an `Err`, it would likely be the result of an error coming from the underlying operating system. If this instance of `Result` is an `Ok` value, `expect` will take the return value that `Ok` is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in the user’s input.\n\nIf you don’t call `expect`, the program will compile, but you’ll get a warning:\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n  --> src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n10 |     let _ = io::stdin().read_line(&mut guess);\n   |     +++++++\n\nwarning: `guessing_game` (bin \"guessing_game\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.59s\n\n```\n\nRust warns that you haven’t used the `Result` value returned from `read_line`, indicating that the program hasn’t handled a possible error.\n\nThe right way to suppress the warning is to actually write error-handling code, but in our case we just want to crash this program when a problem occurs, so we can use `expect`. You’ll learn about recovering from errors in [Chapter 9](ch09-02-recoverable-errors-with-result.html).\n\n### [Printing Values with `println!` Placeholders](#printing-values-with-println-placeholders)\n\nAside from the closing curly bracket, there’s only one more line to discuss in the code so far:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThis line prints the string that now contains the user’s input. The `{}` set of curly brackets is a placeholder: think of `{}` as little crab pincers that hold a value in place. When printing the value of a variable, the variable name can go inside the curly brackets. When printing the result of evaluating an expression, place empty curly brackets in the format string, then follow the format string with a comma-separated list of expressions to print in each empty curly bracket placeholder in the same order. Printing a variable and the result of an expression in one call to `println!` would look like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n}\n```\n\nThis code would print `x = 5 and y + 2 = 12`.\n\n### [Testing the First Part](#testing-the-first-part)\n\nLet’s test the first part of the guessing game. Run it using `cargo run`:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n\n```\n\nAt this point, the first part of the game is done: we’re getting input from the keyboard and then printing it.\n\n## [Generating a Secret Number](#generating-a-secret-number)\n\nNext, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. We’ll use a random number between 1 and 100 so the game isn’t too difficult. Rust doesn’t yet include random number functionality in its standard library. However, the Rust team does provide a [`rand` crate](https://crates.io/crates/rand) with said functionality.\n\n### [Using a Crate to Get More Functionality](#using-a-crate-to-get-more-functionality)\n\nRemember that a crate is a collection of Rust source code files. The project we’ve been building is a _binary crate_, which is an executable. The `rand` crate is a _library crate_, which contains code that is intended to be used in other programs and can’t be executed on its own.\n\nCargo’s coordination of external crates is where Cargo really shines. Before we can write code that uses `rand`, we need to modify the _Cargo.toml_ file to include the `rand` crate as a dependency. Open that file now and add the following line to the bottom, beneath the `[dependencies]` section header that Cargo created for you. Be sure to specify `rand` exactly as we have here, with this version number, or the code examples in this tutorial may not work:\n\nFilename: Cargo.toml\n\n```toml\n[dependencies]\nrand = \"0.8.5\"\n\n```\n\nIn the _Cargo.toml_ file, everything that follows a header is part of that section that continues until another section starts. In `[dependencies]` you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we specify the `rand` crate with the semantic version specifier `0.8.5`. Cargo understands [Semantic Versioning](http://semver.org/) (sometimes called _SemVer_), which is a standard for writing version numbers. The specifier `0.8.5` is actually shorthand for `^0.8.5`, which means any version that is at least 0.8.5 but below 0.9.0.\n\nCargo considers these versions to have public APIs compatible with version 0.8.5, and this specification ensures you’ll get the latest patch release that will still compile with the code in this chapter. Any version 0.9.0 or greater is not guaranteed to have the same API as what the following examples use.\n\nNow, without changing any of the code, let’s build the project, as shown in Listing 2-2.\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n\n```\n\nListing 2-2: The output from running `cargo build` after adding the rand crate as a dependency\n\nYou may see different version numbers (but they will all be compatible with the code, thanks to SemVer!) and different lines (depending on the operating system), and the lines may be in a different order.\n\nWhen we include an external dependency, Cargo fetches the latest versions of everything that dependency needs from the _registry_, which is a copy of data from [Crates.io](https://crates.io/). Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and downloads any crates listed that aren’t already downloaded. In this case, although we only listed `rand` as a dependency, Cargo also grabbed other crates that `rand` depends on to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you won’t get any output aside from the `Finished` line. Cargo knows it has already downloaded and compiled the dependencies, and you haven’t changed anything about them in your _Cargo.toml_ file. Cargo also knows that you haven’t changed anything about your code, so it doesn’t recompile that either. With nothing to do, it simply exits.\n\nIf you open the _src/main.rs_ file, make a trivial change, and then save it and build again, you’ll only see two lines of output:\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n\n```\n\nThese lines show that Cargo only updates the build with your tiny change to the _src/main.rs_ file. Your dependencies haven’t changed, so Cargo knows it can reuse what it has already downloaded and compiled for those.\n\n#### [Ensuring Reproducible Builds with the _Cargo.lock_ File](#ensuring-reproducible-builds-with-the-cargolock-file)\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, say that next week version 0.8.6 of the `rand` crate comes out, and that version contains an important bug fix, but it also contains a regression that will break your code. To handle this, Rust creates the _Cargo.lock_ file the first time you run `cargo build`, so we now have this in the _guessing\\_game_ directory.\n\nWhen you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the _Cargo.lock_ file. When you build your project in the future, Cargo will see that the _Cargo.lock_ file exists and will use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at 0.8.5 until you explicitly upgrade, thanks to the _Cargo.lock_ file. Because the _Cargo.lock_ file is important for reproducible builds, it’s often checked into source control with the rest of the code in your project.\n\n#### [Updating a Crate to Get a New Version](#updating-a-crate-to-get-a-new-version)\n\nWhen you _do_ want to update a crate, Cargo provides the command `update`, which will ignore the _Cargo.lock_ file and figure out all the latest versions that fit your specifications in _Cargo.toml_. Cargo will then write those versions to the _Cargo.lock_ file. In this case, Cargo will only look for versions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has released the two new versions 0.8.6 and 0.9.0, you would see the following if you ran `cargo update`:\n\n```console\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n\n```\n\nCargo ignores the 0.9.0 release. At this point, you would also notice a change in your _Cargo.lock_ file noting that the version of the `rand` crate you are now using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9._x_ series, you’d have to update the _Cargo.toml_ file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.9.0\"\n\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates available and reevaluate your `rand` requirements according to the new version you have specified.\n\nThere’s a lot more to say about [Cargo](https://doc.rust-lang.org/cargo/) and [its ecosystem](https://doc.rust-lang.org/cargo/reference/publishing.html), which we’ll discuss in Chapter 14, but for now, that’s all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.\n\n### [Generating a Random Number](#generating-a-random-number)\n\nLet’s start using `rand` to generate a number to guess. The next step is to update _src/main.rs_, as shown in Listing 2-3.\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n}\n```\n\nListing 2-3: Adding code to generate a random number\n\nFirst we add the line `use rand::Rng;`. The `Rng` trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods. Chapter 10 will cover traits in detail.\n\nNext, we’re adding two lines in the middle. In the first line, we call the `rand::thread_rng` function that gives us the particular random number generator we’re going to use: one that is local to the current thread of execution and is seeded by the operating system. Then we call the `gen_range` method on the random number generator. This method is defined by the `Rng` trait that we brought into scope with the `use rand::Rng;` statement. The `gen_range` method takes a range expression as an argument and generates a random number in the range. The kind of range expression we’re using here takes the form `start..=end` and is inclusive on the lower and upper bounds, so we need to specify `1..=100` to request a number between 1 and 100.\n\nNote: You won’t just know which traits to use and which methods and functions to call from a crate, so each crate has documentation with instructions for using it. Another neat feature of Cargo is that running the `cargo doc --open` command will build documentation provided by all your dependencies locally and open it in your browser. If you’re interested in other functionality in the `rand` crate, for example, run `cargo doc --open` and click `rand` in the sidebar on the left.\n\nThe second new line prints the secret number. This is useful while we’re developing the program to be able to test it, but we’ll delete it from the final version. It’s not much of a game if the program prints the answer as soon as it starts!\n\nTry running the program a few times:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n\n```\n\nYou should get different random numbers, and they should all be numbers between 1 and 100. Great job!\n\n## [Comparing the Guess to the Secret Number](#comparing-the-guess-to-the-secret-number)\n\nNow that we have user input and a random number, we can compare them. That step is shown in Listing 2-4. Note that this code won’t compile just yet, as we will explain.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    // --snip--\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nListing 2-4: Handling the possible return values of comparing two numbers\n\nFirst we add another `use` statement, bringing a type called `std::cmp::Ordering` into scope from the standard library. The `Ordering` type is another enum and has the variants `Less`, `Greater`, and `Equal`. These are the three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The `cmp` method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it’s comparing `guess` to `secret_number`. Then it returns a variant of the `Ordering` enum we brought into scope with the `use` statement. We use a [`match`](ch06-02-match.html) expression to decide what to do next based on which variant of `Ordering` was returned from the call to `cmp` with the values in `guess` and `secret_number`.\n\nA `match` expression is made up of _arms_. An arm consists of a _pattern_ to match against, and the code that should be run if the value given to `match` fits that arm’s pattern. Rust takes the value given to `match` and looks through each arm’s pattern in turn. Patterns and the `match` construct are powerful Rust features: they let you express a variety of situations your code might encounter and they make sure you handle them all. These features will be covered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet’s walk through an example with the `match` expression we use here. Say that the user has guessed 50 and the randomly generated secret number this time is 38.\n\nWhen the code compares 50 to 38, the `cmp` method will return `Ordering::Greater` because 50 is greater than 38. The `match` expression gets the `Ordering::Greater` value and starts checking each arm’s pattern. It looks at the first arm’s pattern, `Ordering::Less`, and sees that the value `Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in that arm and moves to the next arm. The next arm’s pattern is `Ordering::Greater`, which _does_ match `Ordering::Greater`! The associated code in that arm will execute and print `Too big!` to the screen. The `match` expression ends after the first successful match, so it won’t look at the last arm in this scenario.\n\nHowever, the code in Listing 2-4 won’t compile yet. Let’s try it:\n\n```console\n$ cargo build\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n  --> src/main.rs:22:21\n   |\n22 |     match guess.cmp(&secret_number) {\n   |                 --- ^^^^^^^^^^^^^^ expected `&String`, found `&{integer}`\n   |                 |\n   |                 arguments to this method are incorrect\n   |\n   = note: expected reference `&String`\n              found reference `&{integer}`\nnote: method defined here\n  --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/cmp.rs:836:8\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` (bin \"guessing_game\") due to 1 previous error\n\n```\n\nThe core of the error states that there are _mismatched types_. Rust has a strong, static type system. However, it also has type inference. When we wrote `let mut guess = String::new()`, Rust was able to infer that `guess` should be a `String` and didn’t make us write the type. The `secret_number`, on the other hand, is a number type. A few of Rust’s number types can have a value between 1 and 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a 64-bit number; as well as others. Unless otherwise specified, Rust defaults to an `i32`, which is the type of `secret_number` unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a number type so we can compare it numerically to the secret number. We do so by adding this line to the `main` function body:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    // --snip--\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nThe line is:\n\n```rust\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn’t the program already have a variable named `guess`? It does, but helpfully Rust allows us to shadow the previous value of `guess` with a new one. _Shadowing_ lets us reuse the `guess` variable name rather than forcing us to create two unique variables, such as `guess_str` and `guess`, for example. We’ll cover this in more detail in [Chapter 3](about:blank/ch03-01-variables-and-mutability.html#shadowing), but for now, know that this feature is often used when you want to convert a value from one type to another type.\n\nWe bind this new variable to the expression `guess.trim().parse()`. The `guess` in the expression refers to the original `guess` variable that contained the input as a string. The `trim` method on a `String` instance will eliminate any whitespace at the beginning and end, which we must do to be able to compare the string to the `u32`, which can only contain numerical data. The user must press enter to satisfy `read_line` and input their guess, which adds a newline character to the string. For example, if the user types 5 and presses enter, `guess` looks like this: `5\\n`. The `\\n` represents “newline.” (On Windows, pressing enter results in a carriage return and a newline, `\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting in just `5`.\n\nThe [`parse` method on strings](about:blank/std/primitive.str.html#method.parse) converts a string to another type. Here, we use it to convert from a string to a number. We need to tell Rust the exact number type we want by using `let guess: u32`. The colon (`:`) after `guess` tells Rust we’ll annotate the variable’s type. Rust has a few built-in number types; the `u32` seen here is an unsigned, 32-bit integer. It’s a good default choice for a small positive number. You’ll learn about other number types in [Chapter 3](about:blank/ch03-02-data-types.html#integer-types).\n\nAdditionally, the `u32` annotation in this example program and the comparison with `secret_number` means Rust will infer that `secret_number` should be a `u32` as well. So now the comparison will be between two values of the same type!\n\nThe `parse` method will only work on characters that can logically be converted into numbers and so can easily cause errors. If, for example, the string contained `A👍%`, there would be no way to convert that to a number. Because it might fail, the `parse` method returns a `Result` type, much as the `read_line` method does (discussed earlier in [“Handling Potential Failure with `Result`”](#handling-potential-failure-with-result)). We’ll treat this `Result` the same way by using the `expect` method again. If `parse` returns an `Err` `Result` variant because it couldn’t create a number from the string, the `expect` call will crash the game and print the message we give it. If `parse` can successfully convert the string to a number, it will return the `Ok` variant of `Result`, and `expect` will return the number that we want from the `Ok` value.\n\nLet’s run the program now:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n\n```\n\nNice! Even though spaces were added before the guess, the program still figured out that the user guessed 76. Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess. Let’s change that by adding a loop!\n\n## [Allowing Multiple Guesses with Looping](#allowing-multiple-guesses-with-looping)\n\nThe `loop` keyword creates an infinite loop. We’ll add a loop to give users more chances at guessing the number:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    // --snip--\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n        println!(\"You guessed: {guess}\");\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => println!(\"You win!\"),\n        }\n    }\n}\n```\n\nAs you can see, we’ve moved everything from the guess input prompt onward into a loop. Be sure to indent the lines inside the loop another four spaces each and run the program again. The program will now ask for another guess forever, which actually introduces a new problem. It doesn’t seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut ctrl\\-c. But there’s another way to escape this insatiable monster, as mentioned in the `parse` discussion in [“Comparing the Guess to the Secret Number”](#comparing-the-guess-to-the-secret-number): if the user enters a non-number answer, the program will crash. We can take advantage of that to allow the user to quit, as shown here:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nTyping `quit` will quit the game, but as you’ll notice, so will entering any other non-number input. This is suboptimal, to say the least; we want the game to also stop when the correct number is guessed.\n\n### [Quitting After a Correct Guess](#quitting-after-a-correct-guess)\n\nLet’s program the game to quit when the user wins by adding a `break` statement:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of `main`.\n\n### [Handling Invalid Input](#handling-invalid-input)\n\nTo further refine the game’s behavior, rather than crashing the program when the user inputs a non-number, let’s make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where `guess` is converted from a `String` to a `u32`, as shown in Listing 2-5.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program\n\nWe switch from an `expect` call to a `match` expression to move from crashing on an error to handling the error. Remember that `parse` returns a `Result` type and `Result` is an enum that has the variants `Ok` and `Err`. We’re using a `match` expression here, as we did with the `Ordering` result of the `cmp` method.\n\nIf `parse` is able to successfully turn the string into a number, it will return an `Ok` value that contains the resultant number. That `Ok` value will match the first arm’s pattern, and the `match` expression will just return the `num` value that `parse` produced and put inside the `Ok` value. That number will end up right where we want it in the new `guess` variable we’re creating.\n\nIf `parse` is _not_ able to turn the string into a number, it will return an `Err` value that contains more information about the error. The `Err` value does not match the `Ok(num)` pattern in the first `match` arm, but it does match the `Err(_)` pattern in the second arm. The underscore, `_`, is a catchall value; in this example, we’re saying we want to match all `Err` values, no matter what information they have inside them. So the program will execute the second arm’s code, `continue`, which tells the program to go to the next iteration of the `loop` and ask for another guess. So, effectively, the program ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let’s try it:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let’s delete the `println!` that outputs the secret number. Listing 2-6 shows the final code.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 2-6: Complete guessing game code\n\nAt this point, you’ve successfully built the guessing game. Congratulations!\n\n## [Summary](#summary)\n\nThis project was a hands-on way to introduce you to many new Rust concepts: `let`, `match`, functions, the use of external crates, and more. In the next few chapters, you’ll learn about these concepts in more detail. Chapter 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Chapter 4 explores ownership, a feature that makes Rust different from other languages. Chapter 5 discusses structs and method syntax, and Chapter 6 explains how enums work.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Programming a Guessing Game - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"programming-a-guessing-game\"><a class=\"header\" href=\"#programming-a-guessing-game\">Programming a Guessing Game</a></h1>\n<p>Let’s jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You’ll learn about <code class=\"hljs\">let</code>, <code class=\"hljs\">match</code>, methods, associated\nfunctions, external crates, and more! In the following chapters, we’ll explore\nthese ideas in more detail. In this chapter, you’ll just practice the\nfundamentals.</p>\n<p>We’ll implement a classic beginner programming problem: a guessing game. Here’s\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.</p>\n<h2 id=\"setting-up-a-new-project\"><a class=\"header\" href=\"#setting-up-a-new-project\">Setting Up a New Project</a></h2>\n<p>To set up a new project, go to the <em>projects</em> directory that you created in\nChapter 1 and make a new project using Cargo, like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new guessing_game</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> guessing_game</span>\n</code></pre>\n<p>The first command, <code class=\"hljs\">cargo new</code>, takes the name of the project (<code class=\"hljs\">guessing_game</code>)\nas the first argument. The second command changes to the new project’s\ndirectory.</p>\n<p>Look at the generated <em>Cargo.toml</em> file:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<p>As you saw in Chapter 1, <code class=\"hljs\">cargo new</code> generates a “Hello, world!” program for\nyou. Check out the <em>src/main.rs</em> file:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>Now let’s compile this “Hello, world!” program and run it in the same step\nusing the <code class=\"hljs\">cargo run</code> command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n</code></pre>\n<p>The <code class=\"hljs\">run</code> command comes in handy when you need to rapidly iterate on a project,\nas we’ll do in this game, quickly testing each iteration before moving on to\nthe next one.</p>\n<p>Reopen the <em>src/main.rs</em> file. You’ll be writing all the code in this file.</p>\n<h2 id=\"processing-a-guess\"><a class=\"header\" href=\"#processing-a-guess\">Processing a Guess</a></h2>\n<p>The first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we’ll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n<em>src/main.rs</em>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n}</code></pre>\n<p><span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span></p>\n<p>This code contains a lot of information, so let’s go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n<code class=\"hljs\">io</code> input/output library into scope. The <code class=\"hljs\">io</code> library comes from the standard\nlibrary, known as <code class=\"hljs\">std</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>By default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the <em>prelude</em>, and\nyou can see everything in it <a href=\"../std/prelude/index.html\">in the standard library documentation</a>.</p>\n<p>If a type you want to use isn’t in the prelude, you have to bring that type\ninto scope explicitly with a <code class=\"hljs\">use</code> statement. Using the <code class=\"hljs\">std::io</code> library\nprovides you with a number of useful features, including the ability to accept\nuser input.</p>\n<p>As you saw in Chapter 1, the <code class=\"hljs\">main</code> function is the entry point into the\nprogram:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n<span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>The <code class=\"hljs\">fn</code> syntax declares a new function; the parentheses, <code class=\"hljs\">()</code>, indicate there\nare no parameters; and the curly bracket, <code class=\"hljs\">{</code>, starts the body of the function.</p>\n<p>As you also learned in Chapter 1, <code class=\"hljs\">println!</code> is a macro that prints a string to\nthe screen:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>This code is printing a prompt stating what the game is and requesting input\nfrom the user.</p>\n<h3 id=\"storing-values-with-variables\"><a class=\"header\" href=\"#storing-values-with-variables\">Storing Values with Variables</a></h3>\n<p>Next, we’ll create a <em>variable</em> to store the user input, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n<span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>Now the program is getting interesting! There’s a lot going on in this little\nline. We use the <code class=\"hljs\">let</code> statement to create the variable. Here’s another example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> apples = <span class=\"hljs-number\">5</span>;</code></pre>\n<p>This line creates a new variable named <code class=\"hljs\">apples</code> and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won’t change. We’ll be discussing this concept in detail in\nthe <a href=\"ch03-01-variables-and-mutability.html#variables-and-mutability\">“Variables and Mutability”</a><!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add <code class=\"hljs\">mut</code> before the\nvariable name:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> apples = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// immutable</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> bananas = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// mutable</span></code></pre>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The <code class=\"hljs\">//</code> syntax starts a comment that continues until the end of the\nline. Rust ignores everything in comments. We’ll discuss comments in more\ndetail in <a href=\"ch03-04-comments.html\">Chapter 3</a><!-- ignore -->.</p>\n</section>\n<p>Returning to the guessing game program, you now know that <code class=\"hljs\">let mut guess</code> will\nintroduce a mutable variable named <code class=\"hljs\">guess</code>. The equal sign (<code class=\"hljs\">=</code>) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that <code class=\"hljs\">guess</code> is bound to, which is the result of calling\n<code class=\"hljs\">String::new</code>, a function that returns a new instance of a <code class=\"hljs\">String</code>.\n<a href=\"../std/string/struct.String.html\"><code class=\"hljs\">String</code></a><!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.</p>\n<p>The <code class=\"hljs\">::</code> syntax in the <code class=\"hljs\">::new</code> line indicates that <code class=\"hljs\">new</code> is an associated\nfunction of the <code class=\"hljs\">String</code> type. An <em>associated function</em> is a function that’s\nimplemented on a type, in this case <code class=\"hljs\">String</code>. This <code class=\"hljs\">new</code> function creates a\nnew, empty string. You’ll find a <code class=\"hljs\">new</code> function on many types because it’s a\ncommon name for a function that makes a new value of some kind.</p>\n<p>In full, the <code class=\"hljs\">let mut guess = String::new();</code> line has created a mutable\nvariable that is currently bound to a new, empty instance of a <code class=\"hljs\">String</code>. Whew!</p>\n<h3 id=\"receiving-user-input\"><a class=\"header\" href=\"#receiving-user-input\">Receiving User Input</a></h3>\n<p>Recall that we included the input/output functionality from the standard\nlibrary with <code class=\"hljs\">use std::io;</code> on the first line of the program. Now we’ll call\nthe <code class=\"hljs\">stdin</code> function from the <code class=\"hljs\">io</code> module, which will allow us to handle user\ninput:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span>    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n<span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>If we hadn’t imported the <code class=\"hljs\">io</code> library with <code class=\"hljs\">use std::io;</code> at the beginning of\nthe program, we could still use the function by writing this function call as\n<code class=\"hljs\">std::io::stdin</code>. The <code class=\"hljs\">stdin</code> function returns an instance of\n<a href=\"../std/io/struct.Stdin.html\"><code class=\"hljs\">std::io::Stdin</code></a><!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal.</p>\n<p>Next, the line <code class=\"hljs\">.read_line(&amp;mut guess)</code> calls the <a href=\"../std/io/struct.Stdin.html#method.read_line\"><code class=\"hljs\">read_line</code></a><!--\nignore --> method on the standard input handle to get input from the user.\nWe’re also passing <code class=\"hljs\">&amp;mut guess</code> as the argument to <code class=\"hljs\">read_line</code> to tell it what\nstring to store the user input in. The full job of <code class=\"hljs\">read_line</code> is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring’s content.</p>\n<p>The <code class=\"hljs\">&amp;</code> indicates that this argument is a <em>reference</em>, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust’s major advantages is how safe and easy it is to use\nreferences. You don’t need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write <code class=\"hljs\">&amp;mut guess</code> rather than\n<code class=\"hljs\">&amp;guess</code> to make it mutable. (Chapter 4 will explain references more\nthoroughly.)</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"handling-potential-failure-with-the-result-type\"></a></p>\n<h3 id=\"handling-potential-failure-with-result\"><a class=\"header\" href=\"#handling-potential-failure-with-result\">Handling Potential Failure with <code>Result</code></a></h3>\n<p>We’re still working on this line of code. We’re now discussing a third line of\ntext, but note that it’s still part of a single logical line of code. The next\npart is this method:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span>        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>We could have written this code as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">io::stdin().read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess).expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);</code></pre>\n<p>However, one long line is difficult to read, so it’s best to divide it. It’s\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the <code class=\"hljs\">.method_name()</code> syntax. Now let’s\ndiscuss what this line does.</p>\n<p>As mentioned earlier, <code class=\"hljs\">read_line</code> puts whatever the user enters into the string\nwe pass to it, but it also returns a <code class=\"hljs\">Result</code> value. <a href=\"../std/result/enum.Result.html\"><code class=\"hljs\">Result</code></a><!--\nignore --> is an <a href=\"ch06-00-enums.html\"><em>enumeration</em></a><!-- ignore -->, often called an <em>enum</em>,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a <em>variant</em>.</p>\n<p><a href=\"ch06-00-enums.html\">Chapter 6</a><!-- ignore --> will cover enums in more detail. The purpose\nof these <code class=\"hljs\">Result</code> types is to encode error-handling information.</p>\n<p><code class=\"hljs\">Result</code>’s variants are <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>. The <code class=\"hljs\">Ok</code> variant indicates the\noperation was successful, and inside <code class=\"hljs\">Ok</code> is the successfully generated value.\nThe <code class=\"hljs\">Err</code> variant means the operation failed, and <code class=\"hljs\">Err</code> contains information\nabout how or why the operation failed.</p>\n<p>Values of the <code class=\"hljs\">Result</code> type, like values of any type, have methods defined on\nthem. An instance of <code class=\"hljs\">Result</code> has an <a href=\"../std/result/enum.Result.html#method.expect\"><code class=\"hljs\">expect</code> method</a><!-- ignore -->\nthat you can call. If this instance of <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Err</code> value, <code class=\"hljs\">expect</code>\nwill cause the program to crash and display the message that you passed as an\nargument to <code class=\"hljs\">expect</code>. If the <code class=\"hljs\">read_line</code> method returns an <code class=\"hljs\">Err</code>, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Ok</code> value, <code class=\"hljs\">expect</code> will take the return\nvalue that <code class=\"hljs\">Ok</code> is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user’s input.</p>\n<p>If you don’t call <code class=\"hljs\">expect</code>, the program will compile, but you’ll get a warning:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:10:5</span>\n   |\n10 |     io::stdin().read_line(&amp;mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n10 |     let _ = io::stdin().read_line(&amp;mut guess);\n   |     +++++++\n\nwarning: `guessing_game` (bin \"guessing_game\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.59s\n</code></pre>\n<p>Rust warns that you haven’t used the <code class=\"hljs\">Result</code> value returned from <code class=\"hljs\">read_line</code>,\nindicating that the program hasn’t handled a possible error.</p>\n<p>The right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use <code class=\"hljs\">expect</code>. You’ll learn about recovering from errors in <a href=\"ch09-02-recoverable-errors-with-result.html\">Chapter\n9</a><!-- ignore -->.</p>\n<h3 id=\"printing-values-with-println-placeholders\"><a class=\"header\" href=\"#printing-values-with-println-placeholders\">Printing Values with <code>println!</code> Placeholders</a></h3>\n<p>Aside from the closing curly bracket, there’s only one more line to discuss in\nthe code so far:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n<span class=\"boring\">}</span></code></pre>\n<p>This line prints the string that now contains the user’s input. The <code class=\"hljs\">{}</code> set of\ncurly brackets is a placeholder: think of <code class=\"hljs\">{}</code> as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to <code class=\"hljs\">println!</code> would look like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x = {x} and y + 2 = {}\"</span>, y + <span class=\"hljs-number\">2</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code would print <code class=\"hljs\">x = 5 and y + 2 = 12</code>.</p>\n<h3 id=\"testing-the-first-part\"><a class=\"header\" href=\"#testing-the-first-part\">Testing the First Part</a></h3>\n<p>Let’s test the first part of the guessing game. Run it using <code class=\"hljs\">cargo run</code>:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n</code></pre>\n<p>At this point, the first part of the game is done: we’re getting input from the\nkeyboard and then printing it.</p>\n<h2 id=\"generating-a-secret-number\"><a class=\"header\" href=\"#generating-a-secret-number\">Generating a Secret Number</a></h2>\n<p>Next, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We’ll use a random number between 1 and 100 so the game isn’t too\ndifficult. Rust doesn’t yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a <a href=\"https://crates.io/crates/rand\"><code class=\"hljs\">rand</code> crate</a> with\nsaid functionality.</p>\n<h3 id=\"using-a-crate-to-get-more-functionality\"><a class=\"header\" href=\"#using-a-crate-to-get-more-functionality\">Using a Crate to Get More Functionality</a></h3>\n<p>Remember that a crate is a collection of Rust source code files. The project\nwe’ve been building is a <em>binary crate</em>, which is an executable. The <code class=\"hljs\">rand</code>\ncrate is a <em>library crate</em>, which contains code that is intended to be used in\nother programs and can’t be executed on its own.</p>\n<p>Cargo’s coordination of external crates is where Cargo really shines. Before we\ncan write code that uses <code class=\"hljs\">rand</code>, we need to modify the <em>Cargo.toml</em> file to\ninclude the <code class=\"hljs\">rand</code> crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the <code class=\"hljs\">[dependencies]</code> section header that\nCargo created for you. Be sure to specify <code class=\"hljs\">rand</code> exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:</p>\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n</code></pre>\n<p>In the <em>Cargo.toml</em> file, everything that follows a header is part of that\nsection that continues until another section starts. In <code class=\"hljs\">[dependencies]</code> you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the <code class=\"hljs\">rand</code> crate with the\nsemantic version specifier <code class=\"hljs\">0.8.5</code>. Cargo understands <a href=\"http://semver.org\">Semantic\nVersioning</a><!-- ignore --> (sometimes called <em>SemVer</em>), which is a\nstandard for writing version numbers. The specifier <code class=\"hljs\">0.8.5</code> is actually\nshorthand for <code class=\"hljs\">^0.8.5</code>, which means any version that is at least 0.8.5 but\nbelow 0.9.0.</p>\n<p>Cargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you’ll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use.</p>\n<p>Now, without changing any of the code, let’s build the project, as shown in\nListing 2-2.</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n</code></pre>\n<p><span class=\"caption\">Listing 2-2: The output from running <code class=\"hljs\">cargo build</code> after\nadding the rand crate as a dependency</span></p>\n<p>You may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order.</p>\n<p>When we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the <em>registry</em>, which is a copy of data\nfrom <a href=\"https://crates.io/\">Crates.io</a>. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use.</p>\n<p>After updating the registry, Cargo checks the <code class=\"hljs\">[dependencies]</code> section and\ndownloads any crates listed that aren’t already downloaded. In this case,\nalthough we only listed <code class=\"hljs\">rand</code> as a dependency, Cargo also grabbed other crates\nthat <code class=\"hljs\">rand</code> depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.</p>\n<p>If you immediately run <code class=\"hljs\">cargo build</code> again without making any changes, you\nwon’t get any output aside from the <code class=\"hljs\">Finished</code> line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven’t changed anything\nabout them in your <em>Cargo.toml</em> file. Cargo also knows that you haven’t changed\nanything about your code, so it doesn’t recompile that either. With nothing to\ndo, it simply exits.</p>\n<p>If you open the <em>src/main.rs</em> file, make a trivial change, and then save it and\nbuild again, you’ll only see two lines of output:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n</code></pre>\n<p>These lines show that Cargo only updates the build with your tiny change to the\n<em>src/main.rs</em> file. Your dependencies haven’t changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those.</p>\n<h4 id=\"ensuring-reproducible-builds-with-the-cargolock-file\"><a class=\"header\" href=\"#ensuring-reproducible-builds-with-the-cargolock-file\">Ensuring Reproducible Builds with the <em>Cargo.lock</em> File</a></h4>\n<p>Cargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the <code class=\"hljs\">rand</code> crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the <em>Cargo.lock</em> file the first\ntime you run <code class=\"hljs\">cargo build</code>, so we now have this in the <em>guessing_game</em>\ndirectory.</p>\n<p>When you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n<em>Cargo.lock</em> file. When you build your project in the future, Cargo will see\nthat the <em>Cargo.lock</em> file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the <em>Cargo.lock</em> file.\nBecause the <em>Cargo.lock</em> file is important for reproducible builds, it’s often\nchecked into source control with the rest of the code in your project.</p>\n<h4 id=\"updating-a-crate-to-get-a-new-version\"><a class=\"header\" href=\"#updating-a-crate-to-get-a-new-version\">Updating a Crate to Get a New Version</a></h4>\n<p>When you <em>do</em> want to update a crate, Cargo provides the command <code class=\"hljs\">update</code>,\nwhich will ignore the <em>Cargo.lock</em> file and figure out all the latest versions\nthat fit your specifications in <em>Cargo.toml</em>. Cargo will then write those\nversions to the <em>Cargo.lock</em> file. In this case, Cargo will only look for\nversions greater than 0.8.5 and less than 0.9.0. If the <code class=\"hljs\">rand</code> crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran <code class=\"hljs\">cargo update</code>:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update</span>\n    Updating crates.io index\n    Updating rand v0.8.5 -&gt; v0.8.6\n</code></pre>\n<p>Cargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your <em>Cargo.lock</em> file noting that the version of the <code class=\"hljs\">rand</code> crate you are\nnow using is 0.8.6. To use <code class=\"hljs\">rand</code> version 0.9.0 or any version in the 0.9.<em>x</em>\nseries, you’d have to update the <em>Cargo.toml</em> file to look like this instead:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.9.0\"</span>\n</code></pre>\n<p>The next time you run <code class=\"hljs\">cargo build</code>, Cargo will update the registry of crates\navailable and reevaluate your <code class=\"hljs\">rand</code> requirements according to the new version\nyou have specified.</p>\n<p>There’s a lot more to say about <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a><!-- ignore --> and <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html\">its\necosystem</a><!-- ignore -->, which we’ll discuss in Chapter 14, but\nfor now, that’s all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.</p>\n<h3 id=\"generating-a-random-number\"><a class=\"header\" href=\"#generating-a-random-number\">Generating a Random Number</a></h3>\n<p>Let’s start using <code class=\"hljs\">rand</code> to generate a number to guess. The next step is to\nupdate <em>src/main.rs</em>, as shown in Listing 2-3.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"hljs-keyword\">use</span> rand::Rng;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span></p>\n<p>First we add the line <code class=\"hljs\">use rand::Rng;</code>. The <code class=\"hljs\">Rng</code> trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail.</p>\n<p>Next, we’re adding two lines in the middle. In the first line, we call the\n<code class=\"hljs\">rand::thread_rng</code> function that gives us the particular random number\ngenerator we’re going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the <code class=\"hljs\">gen_range</code>\nmethod on the random number generator. This method is defined by the <code class=\"hljs\">Rng</code>\ntrait that we brought into scope with the <code class=\"hljs\">use rand::Rng;</code> statement. The\n<code class=\"hljs\">gen_range</code> method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we’re using here takes\nthe form <code class=\"hljs\">start..=end</code> and is inclusive on the lower and upper bounds, so we\nneed to specify <code class=\"hljs\">1..=100</code> to request a number between 1 and 100.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: You won’t just know which traits to use and which methods and functions\nto call from a crate, so each crate has documentation with instructions for\nusing it. Another neat feature of Cargo is that running the <code class=\"hljs\">cargo doc --open</code> command will build documentation provided by all your dependencies\nlocally and open it in your browser. If you’re interested in other\nfunctionality in the <code class=\"hljs\">rand</code> crate, for example, run <code class=\"hljs\">cargo doc --open</code> and\nclick <code class=\"hljs\">rand</code> in the sidebar on the left.</p>\n</section>\n<p>The second new line prints the secret number. This is useful while we’re\ndeveloping the program to be able to test it, but we’ll delete it from the\nfinal version. It’s not much of a game if the program prints the answer as soon\nas it starts!</p>\n<p>Try running the program a few times:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> cargo run</span>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n</code></pre>\n<p>You should get different random numbers, and they should all be numbers between\n1 and 100. Great job!</p>\n<h2 id=\"comparing-the-guess-to-the-secret-number\"><a class=\"header\" href=\"#comparing-the-guess-to-the-secret-number\">Comparing the Guess to the Secret Number</a></h2>\n<p>Now that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won’t compile just yet, as we will\nexplain.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span></p>\n<p>First we add another <code class=\"hljs\">use</code> statement, bringing a type called\n<code class=\"hljs\">std::cmp::Ordering</code> into scope from the standard library. The <code class=\"hljs\">Ordering</code> type\nis another enum and has the variants <code class=\"hljs\">Less</code>, <code class=\"hljs\">Greater</code>, and <code class=\"hljs\">Equal</code>. These are\nthe three outcomes that are possible when you compare two values.</p>\n<p>Then we add five new lines at the bottom that use the <code class=\"hljs\">Ordering</code> type. The\n<code class=\"hljs\">cmp</code> method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it’s\ncomparing <code class=\"hljs\">guess</code> to <code class=\"hljs\">secret_number</code>. Then it returns a variant of the\n<code class=\"hljs\">Ordering</code> enum we brought into scope with the <code class=\"hljs\">use</code> statement. We use a\n<a href=\"ch06-02-match.html\"><code class=\"hljs\">match</code></a><!-- ignore --> expression to decide what to do next based on\nwhich variant of <code class=\"hljs\">Ordering</code> was returned from the call to <code class=\"hljs\">cmp</code> with the values\nin <code class=\"hljs\">guess</code> and <code class=\"hljs\">secret_number</code>.</p>\n<p>A <code class=\"hljs\">match</code> expression is made up of <em>arms</em>. An arm consists of a <em>pattern</em> to\nmatch against, and the code that should be run if the value given to <code class=\"hljs\">match</code>\nfits that arm’s pattern. Rust takes the value given to <code class=\"hljs\">match</code> and looks\nthrough each arm’s pattern in turn. Patterns and the <code class=\"hljs\">match</code> construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 18, respectively.</p>\n<p>Let’s walk through an example with the <code class=\"hljs\">match</code> expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38.</p>\n<p>When the code compares 50 to 38, the <code class=\"hljs\">cmp</code> method will return\n<code class=\"hljs\">Ordering::Greater</code> because 50 is greater than 38. The <code class=\"hljs\">match</code> expression gets\nthe <code class=\"hljs\">Ordering::Greater</code> value and starts checking each arm’s pattern. It looks\nat the first arm’s pattern, <code class=\"hljs\">Ordering::Less</code>, and sees that the value\n<code class=\"hljs\">Ordering::Greater</code> does not match <code class=\"hljs\">Ordering::Less</code>, so it ignores the code in\nthat arm and moves to the next arm. The next arm’s pattern is\n<code class=\"hljs\">Ordering::Greater</code>, which <em>does</em> match <code class=\"hljs\">Ordering::Greater</code>! The associated\ncode in that arm will execute and print <code class=\"hljs\">Too big!</code> to the screen. The <code class=\"hljs\">match</code>\nexpression ends after the first successful match, so it won’t look at the last\narm in this scenario.</p>\n<p>However, the code in Listing 2-4 won’t compile yet. Let’s try it:</p>\n<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:22:21</span>\n   |\n22 |     match guess.cmp(&amp;secret_number) {\n   |                 --- ^^^^^^^^^^^^^^ expected `&amp;String`, found `&amp;{integer}`\n   |                 |\n   |                 arguments to this method are incorrect\n   |\n   = note: expected reference `&amp;String`\n              found reference `&amp;{integer}`\nnote: method defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/cmp.rs:836:8</span>\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` (bin \"guessing_game\") due to 1 previous error\n</code></pre>\n<p>The core of the error states that there are <em>mismatched types</em>. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n<code class=\"hljs\">let mut guess = String::new()</code>, Rust was able to infer that <code class=\"hljs\">guess</code> should be\na <code class=\"hljs\">String</code> and didn’t make us write the type. The <code class=\"hljs\">secret_number</code>, on the other\nhand, is a number type. A few of Rust’s number types can have a value between 1\nand 100: <code class=\"hljs\">i32</code>, a 32-bit number; <code class=\"hljs\">u32</code>, an unsigned 32-bit number; <code class=\"hljs\">i64</code>, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan <code class=\"hljs\">i32</code>, which is the type of <code class=\"hljs\">secret_number</code> unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type.</p>\n<p>Ultimately, we want to convert the <code class=\"hljs\">String</code> the program reads as input into a\nnumber type so we can compare it numerically to the secret number. We do so by\nadding this line to the <code class=\"hljs\">main</code> function body:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre>\n<p>The line is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);</code></pre>\n<p>We create a variable named <code class=\"hljs\">guess</code>. But wait, doesn’t the program already have\na variable named <code class=\"hljs\">guess</code>? It does, but helpfully Rust allows us to shadow the\nprevious value of <code class=\"hljs\">guess</code> with a new one. <em>Shadowing</em> lets us reuse the <code class=\"hljs\">guess</code>\nvariable name rather than forcing us to create two unique variables, such as\n<code class=\"hljs\">guess_str</code> and <code class=\"hljs\">guess</code>, for example. We’ll cover this in more detail in\n<a href=\"ch03-01-variables-and-mutability.html#shadowing\">Chapter 3</a><!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type.</p>\n<p>We bind this new variable to the expression <code class=\"hljs\">guess.trim().parse()</code>. The <code class=\"hljs\">guess</code>\nin the expression refers to the original <code class=\"hljs\">guess</code> variable that contained the\ninput as a string. The <code class=\"hljs\">trim</code> method on a <code class=\"hljs\">String</code> instance will eliminate any\nwhitespace at the beginning and end, which we must do to be able to compare the\nstring to the <code class=\"hljs\">u32</code>, which can only contain numerical data. The user must press\n<kbd>enter</kbd> to satisfy <code class=\"hljs\">read_line</code> and input their guess, which adds a\nnewline character to the string. For example, if the user types <kbd>5</kbd> and\npresses <kbd>enter</kbd>, <code class=\"hljs\">guess</code> looks like this: <code class=\"hljs\">5\\n</code>. The <code class=\"hljs\">\\n</code> represents\n“newline.” (On Windows, pressing <kbd>enter</kbd> results in a carriage return\nand a newline, <code class=\"hljs\">\\r\\n</code>.) The <code class=\"hljs\">trim</code> method eliminates <code class=\"hljs\">\\n</code> or <code class=\"hljs\">\\r\\n</code>, resulting\nin just <code class=\"hljs\">5</code>.</p>\n<p>The <a href=\"../std/primitive.str.html#method.parse\"><code class=\"hljs\">parse</code> method on strings</a><!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using <code class=\"hljs\">let guess: u32</code>. The colon\n(<code class=\"hljs\">:</code>) after <code class=\"hljs\">guess</code> tells Rust we’ll annotate the variable’s type. Rust has a\nfew built-in number types; the <code class=\"hljs\">u32</code> seen here is an unsigned, 32-bit integer.\nIt’s a good default choice for a small positive number. You’ll learn about\nother number types in <a href=\"ch03-02-data-types.html#integer-types\">Chapter 3</a><!-- ignore -->.</p>\n<p>Additionally, the <code class=\"hljs\">u32</code> annotation in this example program and the comparison\nwith <code class=\"hljs\">secret_number</code> means Rust will infer that <code class=\"hljs\">secret_number</code> should be a\n<code class=\"hljs\">u32</code> as well. So now the comparison will be between two values of the same\ntype!</p>\n<p>The <code class=\"hljs\">parse</code> method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained <code class=\"hljs\">A👍%</code>, there would be no way to convert that to a number. Because it\nmight fail, the <code class=\"hljs\">parse</code> method returns a <code class=\"hljs\">Result</code> type, much as the <code class=\"hljs\">read_line</code>\nmethod does (discussed earlier in <a href=\"#handling-potential-failure-with-result\">“Handling Potential Failure with\n<code class=\"hljs\">Result</code>”</a><!-- ignore-->). We’ll treat\nthis <code class=\"hljs\">Result</code> the same way by using the <code class=\"hljs\">expect</code> method again. If <code class=\"hljs\">parse</code>\nreturns an <code class=\"hljs\">Err</code> <code class=\"hljs\">Result</code> variant because it couldn’t create a number from the\nstring, the <code class=\"hljs\">expect</code> call will crash the game and print the message we give it.\nIf <code class=\"hljs\">parse</code> can successfully convert the string to a number, it will return the\n<code class=\"hljs\">Ok</code> variant of <code class=\"hljs\">Result</code>, and <code class=\"hljs\">expect</code> will return the number that we want from\nthe <code class=\"hljs\">Ok</code> value.</p>\n<p>Let’s run the program now:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n</code></pre>\n<p>Nice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.</p>\n<p>We have most of the game working now, but the user can make only one guess.\nLet’s change that by adding a loop!</p>\n<h2 id=\"allowing-multiple-guesses-with-looping\"><a class=\"header\" href=\"#allowing-multiple-guesses-with-looping\">Allowing Multiple Guesses with Looping</a></h2>\n<p>The <code class=\"hljs\">loop</code> keyword creates an infinite loop. We’ll add a loop to give users\nmore chances at guessing the number:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n        <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n        }\n    }\n}</code></pre>\n<p>As you can see, we’ve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn’t seem like the user can quit!</p>\n<p>The user could always interrupt the program by using the keyboard shortcut\n<kbd>ctrl</kbd>-<kbd>c</kbd>. But there’s another way to escape this insatiable\nmonster, as mentioned in the <code class=\"hljs\">parse</code> discussion in <a href=\"#comparing-the-guess-to-the-secret-number\">“Comparing the Guess to the\nSecret Number”</a><!-- ignore -->: if\nthe user enters a non-number answer, the program will crash. We can take\nadvantage of that to allow the user to quit, as shown here:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>Typing <code class=\"hljs\">quit</code> will quit the game, but as you’ll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed.</p>\n<h3 id=\"quitting-after-a-correct-guess\"><a class=\"header\" href=\"#quitting-after-a-correct-guess\">Quitting After a Correct Guess</a></h3>\n<p>Let’s program the game to quit when the user wins by adding a <code class=\"hljs\">break</code> statement:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-comment\">// --snip--</span>\n\n        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n}</code></pre>\n<p>Adding the <code class=\"hljs\">break</code> line after <code class=\"hljs\">You win!</code> makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of <code class=\"hljs\">main</code>.</p>\n<h3 id=\"handling-invalid-input\"><a class=\"header\" href=\"#handling-invalid-input\">Handling Invalid Input</a></h3>\n<p>To further refine the game’s behavior, rather than crashing the program when\nthe user inputs a non-number, let’s make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where <code class=\"hljs\">guess</code>\nis converted from a <code class=\"hljs\">String</code> to a <code class=\"hljs\">u32</code>, as shown in Listing 2-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-comment\">// --snip--</span>\n\n        io::stdin()\n            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">            Ordering::Equal =&gt; {\n</span><span class=\"boring\">                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n</span><span class=\"boring\">                <span class=\"hljs-keyword\">break</span>;\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span></p>\n<p>We switch from an <code class=\"hljs\">expect</code> call to a <code class=\"hljs\">match</code> expression to move from crashing\non an error to handling the error. Remember that <code class=\"hljs\">parse</code> returns a <code class=\"hljs\">Result</code>\ntype and <code class=\"hljs\">Result</code> is an enum that has the variants <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>. We’re using\na <code class=\"hljs\">match</code> expression here, as we did with the <code class=\"hljs\">Ordering</code> result of the <code class=\"hljs\">cmp</code>\nmethod.</p>\n<p>If <code class=\"hljs\">parse</code> is able to successfully turn the string into a number, it will\nreturn an <code class=\"hljs\">Ok</code> value that contains the resultant number. That <code class=\"hljs\">Ok</code> value will\nmatch the first arm’s pattern, and the <code class=\"hljs\">match</code> expression will just return the\n<code class=\"hljs\">num</code> value that <code class=\"hljs\">parse</code> produced and put inside the <code class=\"hljs\">Ok</code> value. That number\nwill end up right where we want it in the new <code class=\"hljs\">guess</code> variable we’re creating.</p>\n<p>If <code class=\"hljs\">parse</code> is <em>not</em> able to turn the string into a number, it will return an\n<code class=\"hljs\">Err</code> value that contains more information about the error. The <code class=\"hljs\">Err</code> value\ndoes not match the <code class=\"hljs\">Ok(num)</code> pattern in the first <code class=\"hljs\">match</code> arm, but it does\nmatch the <code class=\"hljs\">Err(_)</code> pattern in the second arm. The underscore, <code class=\"hljs\">_</code>, is a\ncatchall value; in this example, we’re saying we want to match all <code class=\"hljs\">Err</code>\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm’s code, <code class=\"hljs\">continue</code>, which tells the program to go to the\nnext iteration of the <code class=\"hljs\">loop</code> and ask for another guess. So, effectively, the\nprogram ignores all errors that <code class=\"hljs\">parse</code> might encounter!</p>\n<p>Now everything in the program should work as expected. Let’s try it:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n</code></pre>\n<p>Awesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let’s delete the <code class=\"hljs\">println!</code> that outputs the\nsecret number. Listing 2-6 shows the final code.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n        io::stdin()\n            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 2-6: Complete guessing game code</span></p>\n<p>At this point, you’ve successfully built the guessing game. Congratulations!</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>This project was a hands-on way to introduce you to many new Rust concepts:\n<code class=\"hljs\">let</code>, <code class=\"hljs\">match</code>, functions, the use of external crates, and more. In the next\nfew chapters, you’ll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch01-03-hello-cargo.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch03-00-common-programming-concepts.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch01-03-hello-cargo.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch03-00-common-programming-concepts.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:12.094Z"
}