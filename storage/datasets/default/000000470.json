{
	"title": "Formatter in std::fmt - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fmt/struct.Formatter.html",
	"markdown": "# Formatter in std::fmt - Rust\n\n## Struct [std](../index.html)::[fmt](index.html)::[Formatter](#)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#266) Â·\n\n```\npub struct Formatter<'a> { /* private fields */ }\n```\n\nExpand description\n\nConfiguration for formatting.\n\nA `Formatter` represents various options related to formatting. Users do not construct `Formatter`s directly; a mutable reference to one is passed to the `fmt` method of all formatting traits, like [`Debug`](trait.Debug.html \"trait std::fmt::Debug\") and [`Display`](trait.Display.html \"trait std::fmt::Display\").\n\nTo interact with a `Formatter`, youâ€™ll call various methods to change the various options related to formatting. For examples, please see the documentation of the methods defined on `Formatter` below.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1255)[Â§](#impl-Formatter%3C'a%3E)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1322)\n\nPerforms the correct padding for an integer which has already been emitted into a str. The str should _not_ contain the sign for the integer, that will be added by this method.\n\n##### [Â§](#arguments)Arguments\n\n-   is\\_nonnegative - whether the original integer was either positive or zero.\n-   prefix - if the â€˜#â€™ character (Alternate) is provided, this is the prefix to put in front of the number.\n-   buf - the byte array that the number has been formatted into\n\nThis function will correctly account for the flags provided as well as the minimum width. It will not take precision into account.\n\n##### [Â§](#examples)Examples\n\n```\nuse std::fmt;\n\nstruct Foo { nb: i32 }\n\nimpl Foo {\n    fn new(nb: i32) -> Foo {\n        Foo {\n            nb,\n        }\n    }\n}\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        // We need to remove \"-\" from the number output.\n        let tmp = self.nb.abs().to_string();\n\n        formatter.pad_integral(self.nb >= 0, \"Foo \", &tmp)\n    }\n}\n\nassert_eq!(format!(\"{}\", Foo::new(2)), \"2\");\nassert_eq!(format!(\"{}\", Foo::new(-1)), \"-1\");\nassert_eq!(format!(\"{}\", Foo::new(0)), \"0\");\nassert_eq!(format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\nassert_eq!(format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo+%7B+nb:+i32+%7D%0A++++%0A++++impl+Foo+%7B%0A++++++++fn+new(nb:+i32)+-%3E+Foo+%7B%0A++++++++++++Foo+%7B%0A++++++++++++++++nb,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++//+We+need+to+remove+%22-%22+from+the+number+output.%0A++++++++++++let+tmp+=+self.nb.abs().to_string();%0A++++%0A++++++++++++formatter.pad_integral(self.nb+%3E=+0,+%22Foo+%22,+%26tmp)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(2)),+%222%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(-1)),+%22-1%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(0)),+%220%22);%0A++++assert_eq!(format!(%22%7B:%23%7D%22,+Foo::new(-1)),+%22-Foo+1%22);%0A++++assert_eq!(format!(%22%7B:0%3E%238%7D%22,+Foo::new(-1)),+%2200-Foo+1%22);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1416)\n\nThis function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:\n\n-   width - the minimum width of what to emit\n-   fill/align - what to emit and where to emit it if the string provided needs to be padded\n-   precision - the maximum length to emit, the string is truncated if it is longer than this length\n\nNotably this function ignores the `flag` parameters.\n\n##### [Â§](#examples-1)Examples\n\n```\nuse std::fmt;\n\nstruct Foo;\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        formatter.pad(\"Foo\")\n    }\n}\n\nassert_eq!(format!(\"{Foo:<4}\"), \"Foo \");\nassert_eq!(format!(\"{Foo:0>4}\"), \"0Foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.pad(%22Foo%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo:%3C4%7D%22),+%22Foo+%22);%0A++++assert_eq!(format!(%22%7BFoo:0%3E4%7D%22),+%220Foo%22);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1612)\n\nWrites some data to the underlying buffer contained within this formatter.\n\n##### [Â§](#examples-2)Examples\n\n```\nuse std::fmt;\n\nstruct Foo;\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        formatter.write_str(\"Foo\")\n        // This is equivalent to:\n        // write!(formatter, \"Foo\")\n    }\n}\n\nassert_eq!(format!(\"{Foo}\"), \"Foo\");\nassert_eq!(format!(\"{Foo:0>8}\"), \"Foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.write_str(%22Foo%22)%0A++++++++++++//+This+is+equivalent+to:%0A++++++++++++//+write!(formatter,+%22Foo%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo%7D%22),+%22Foo%22);%0A++++assert_eq!(format!(%22%7BFoo:0%3E8%7D%22),+%22Foo%22);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1636)\n\nWrites some formatted information into this instance.\n\n##### [Â§](#examples-3)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        formatter.write_fmt(format_args!(\"Foo {}\", self.0))\n    }\n}\n\nassert_eq!(format!(\"{}\", Foo(-1)), \"Foo -1\");\nassert_eq!(format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.write_fmt(format_args!(%22Foo+%7B%7D%22,+self.0))%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(-1)),+%22Foo+-1%22);%0A++++assert_eq!(format!(%22%7B:0%3E8%7D%22,+Foo(2)),+%22Foo+2%22);%0A%7D&edition=2021)\n\n1.0.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1652)\n\nðŸ‘ŽDeprecated since 1.24.0: use the `sign_plus`, `sign_minus`, `alternate`, or `sign_aware_zero_pad` methods instead\n\nFlags for formatting\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1685)\n\nCharacter used as â€˜fillâ€™ whenever there is alignment.\n\n##### [Â§](#examples-4)Examples\n\n```\nuse std::fmt;\n\nstruct Foo;\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let c = formatter.fill();\n        if let Some(width) = formatter.width() {\n            for _ in 0..width {\n                write!(formatter, \"{c}\")?;\n            }\n            Ok(())\n        } else {\n            write!(formatter, \"{c}\")\n        }\n    }\n}\n\n// We set alignment to the right with \">\".\nassert_eq!(format!(\"{Foo:G>3}\"), \"GGG\");\nassert_eq!(format!(\"{Foo:t>6}\"), \"tttttt\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+c+=+formatter.fill();%0A++++++++++++if+let+Some(width)+=+formatter.width()+%7B%0A++++++++++++++++for+_+in+0..width+%7B%0A++++++++++++++++++++write!(formatter,+%22%7Bc%7D%22)?;%0A++++++++++++++++%7D%0A++++++++++++++++Ok(())%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22%7Bc%7D%22)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+We+set+alignment+to+the+right+with+%22%3E%22.%0A++++assert_eq!(format!(%22%7BFoo:G%3E3%7D%22),+%22GGG%22);%0A++++assert_eq!(format!(%22%7BFoo:t%3E6%7D%22),+%22tttttt%22);%0A%7D&edition=2021)\n\n1.28.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1720)\n\nFlag indicating what form of alignment was requested.\n\n##### [Â§](#examples-5)Examples\n\n```\nuse std::fmt::{self, Alignment};\n\nstruct Foo;\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let s = if let Some(s) = formatter.align() {\n            match s {\n                Alignment::Left    => \"left\",\n                Alignment::Right   => \"right\",\n                Alignment::Center  => \"center\",\n            }\n        } else {\n            \"into the void\"\n        };\n        write!(formatter, \"{s}\")\n    }\n}\n\nassert_eq!(format!(\"{Foo:<}\"), \"left\");\nassert_eq!(format!(\"{Foo:>}\"), \"right\");\nassert_eq!(format!(\"{Foo:^}\"), \"center\");\nassert_eq!(format!(\"{Foo}\"), \"into the void\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7Bself,+Alignment%7D;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+s+=+if+let+Some(s)+=+formatter.align()+%7B%0A++++++++++++++++match+s+%7B%0A++++++++++++++++++++Alignment::Left++++=%3E+%22left%22,%0A++++++++++++++++++++Alignment::Right+++=%3E+%22right%22,%0A++++++++++++++++++++Alignment::Center++=%3E+%22center%22,%0A++++++++++++++++%7D%0A++++++++++++%7D+else+%7B%0A++++++++++++++++%22into+the+void%22%0A++++++++++++%7D;%0A++++++++++++write!(formatter,+%22%7Bs%7D%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo:%3C%7D%22),+%22left%22);%0A++++assert_eq!(format!(%22%7BFoo:%3E%7D%22),+%22right%22);%0A++++assert_eq!(format!(%22%7BFoo:%5E%7D%22),+%22center%22);%0A++++assert_eq!(format!(%22%7BFoo%7D%22),+%22into+the+void%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1755)\n\nOptionally specified integer width that the output should be.\n\n##### [Â§](#examples-6)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if let Some(width) = formatter.width() {\n            // If we received a width, we use it\n            write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n        } else {\n            // Otherwise we do nothing special\n            write!(formatter, \"Foo({})\", self.0)\n        }\n    }\n}\n\nassert_eq!(format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\nassert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+let+Some(width)+=+formatter.width()+%7B%0A++++++++++++++++//+If+we+received+a+width,+we+use+it%0A++++++++++++++++write!(formatter,+%22%7B:width%24%7D%22,+format!(%22Foo(%7B%7D)%22,+self.0),+width+=+width)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++//+Otherwise+we+do+nothing+special%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:10%7D%22,+Foo(23)),+%22Foo(23)+++%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1786)\n\nOptionally specified precision for numeric types. Alternatively, the maximum width for string types.\n\n##### [Â§](#examples-7)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(f32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if let Some(precision) = formatter.precision() {\n            // If we received a precision, we use it.\n            write!(formatter, \"Foo({1:.*})\", precision, self.0)\n        } else {\n            // Otherwise we default to 2.\n            write!(formatter, \"Foo({:.2})\", self.0)\n        }\n    }\n}\n\nassert_eq!(format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\nassert_eq!(format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(f32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+let+Some(precision)+=+formatter.precision()+%7B%0A++++++++++++++++//+If+we+received+a+precision,+we+use+it.%0A++++++++++++++++write!(formatter,+%22Foo(%7B1:.*%7D)%22,+precision,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++//+Otherwise+we+default+to+2.%0A++++++++++++++++write!(formatter,+%22Foo(%7B:.2%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:.4%7D%22,+Foo(23.2)),+%22Foo(23.2000)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23.2)),+%22Foo(23.20)%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1818)\n\nDetermines if the `+` flag was specified.\n\n##### [Â§](#examples-8)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if formatter.sign_plus() {\n            write!(formatter,\n                   \"Foo({}{})\",\n                   if self.0 < 0 { '-' } else { '+' },\n                   self.0.abs())\n        } else {\n            write!(formatter, \"Foo({})\", self.0)\n        }\n    }\n}\n\nassert_eq!(format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\nassert_eq!(format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\nassert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.sign_plus()+%7B%0A++++++++++++++++write!(formatter,%0A+++++++++++++++++++++++%22Foo(%7B%7D%7B%7D)%22,%0A+++++++++++++++++++++++if+self.0+%3C+0+%7B+%27-%27+%7D+else+%7B+%27%2B%27+%7D,%0A+++++++++++++++++++++++self.0.abs())%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:%2B%7D%22,+Foo(23)),+%22Foo(%2B23)%22);%0A++++assert_eq!(format!(%22%7B:%2B%7D%22,+Foo(-23)),+%22Foo(-23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1847)\n\nDetermines if the `-` flag was specified.\n\n##### [Â§](#examples-9)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if formatter.sign_minus() {\n            // You want a minus sign? Have one!\n            write!(formatter, \"-Foo({})\", self.0)\n        } else {\n            write!(formatter, \"Foo({})\", self.0)\n        }\n    }\n}\n\nassert_eq!(format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\nassert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.sign_minus()+%7B%0A++++++++++++++++//+You+want+a+minus+sign?+Have+one!%0A++++++++++++++++write!(formatter,+%22-Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:-%7D%22,+Foo(23)),+%22-Foo(23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1875)\n\nDetermines if the `#` flag was specified.\n\n##### [Â§](#examples-10)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if formatter.alternate() {\n            write!(formatter, \"Foo({})\", self.0)\n        } else {\n            write!(formatter, \"{}\", self.0)\n        }\n    }\n}\n\nassert_eq!(format!(\"{:#}\", Foo(23)), \"Foo(23)\");\nassert_eq!(format!(\"{}\", Foo(23)), \"23\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.alternate()+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22%7B%7D%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:%23%7D%22,+Foo(23)),+%22Foo(23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%2223%22);%0A%7D&edition=2021)\n\n1.5.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1901)\n\nDetermines if the `0` flag was specified.\n\n##### [Â§](#examples-11)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(i32);\n\nimpl fmt::Display for Foo {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        assert!(formatter.sign_aware_zero_pad());\n        assert_eq!(formatter.width(), Some(4));\n        // We ignore the formatter's options.\n        write!(formatter, \"{}\", self.0)\n    }\n}\n\nassert_eq!(format!(\"{:04}\", Foo(23)), \"23\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++assert!(formatter.sign_aware_zero_pad());%0A++++++++++++assert_eq!(formatter.width(),+Some(4));%0A++++++++++++//+We+ignore+the+formatter%27s+options.%0A++++++++++++write!(formatter,+%22%7B%7D%22,+self.0)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:04%7D%22,+Foo(23)),+%2223%22);%0A%7D&edition=2021)\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1952)\n\nCreates a [`DebugStruct`](struct.DebugStruct.html \"struct std::fmt::DebugStruct\") builder designed to assist with creation of [`fmt::Debug`](trait.Debug.html \"trait std::fmt::Debug\") implementations for structs.\n\n##### [Â§](#examples-12)Examples\n\n```\nuse std::fmt;\nuse std::net::Ipv4Addr;\n\nstruct Foo {\n    bar: i32,\n    baz: String,\n    addr: Ipv4Addr,\n}\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_struct(\"Foo\")\n            .field(\"bar\", &self.bar)\n            .field(\"baz\", &self.baz)\n            .field(\"addr\", &format_args!(\"{}\", self.addr))\n            .finish()\n    }\n}\n\nassert_eq!(\n    \"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\",\n    format!(\"{:?}\", Foo {\n        bar: 10,\n        baz: \"Hello World\".to_string(),\n        addr: Ipv4Addr::new(127, 0, 0, 1),\n    })\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++struct+Foo+%7B%0A++++++++bar:+i32,%0A++++++++baz:+String,%0A++++++++addr:+Ipv4Addr,%0A++++%7D%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_struct(%22Foo%22)%0A++++++++++++++++.field(%22bar%22,+%26self.bar)%0A++++++++++++++++.field(%22baz%22,+%26self.baz)%0A++++++++++++++++.field(%22addr%22,+%26format_args!(%22%7B%7D%22,+self.addr))%0A++++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++%22Foo+%7B+bar:+10,+baz:+%5C%22Hello+World%5C%22,+addr:+127.0.0.1+%7D%22,%0A++++++++format!(%22%7B:?%7D%22,+Foo+%7B%0A++++++++++++bar:+10,%0A++++++++++++baz:+%22Hello+World%22.to_string(),%0A++++++++++++addr:+Ipv4Addr::new(127,+0,+0,+1),%0A++++++++%7D)%0A++++);%0A%7D&edition=2021)\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2106)\n\nCreates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.\n\n##### [Â§](#examples-13)Examples\n\n```\nuse std::fmt;\nuse std::marker::PhantomData;\n\nstruct Foo<T>(i32, String, PhantomData<T>);\n\nimpl<T> fmt::Debug for Foo<T> {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_tuple(\"Foo\")\n            .field(&self.0)\n            .field(&self.1)\n            .field(&format_args!(\"_\"))\n            .finish()\n    }\n}\n\nassert_eq!(\n    \"Foo(10, \\\"Hello\\\", _)\",\n    format!(\"{:?}\", Foo(10, \"Hello\".to_string(), PhantomData::<u8>))\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++use+std::marker::PhantomData;%0A++++%0A++++struct+Foo%3CT%3E(i32,+String,+PhantomData%3CT%3E);%0A++++%0A++++impl%3CT%3E+fmt::Debug+for+Foo%3CT%3E+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_tuple(%22Foo%22)%0A++++++++++++++++.field(%26self.0)%0A++++++++++++++++.field(%26self.1)%0A++++++++++++++++.field(%26format_args!(%22_%22))%0A++++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++%22Foo(10,+%5C%22Hello%5C%22,+_)%22,%0A++++++++format!(%22%7B:?%7D%22,+Foo(10,+%22Hello%22.to_string(),+PhantomData::%3Cu8%3E))%0A++++);%0A%7D&edition=2021)\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2231)\n\nCreates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.\n\n##### [Â§](#examples-14)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<i32>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_list().entries(self.0.iter()).finish()\n    }\n}\n\nassert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3Ci32%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_list().entries(self.0.iter()).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:?%7D%22,+Foo(vec!%5B10,+11%5D)),+%22%5B10,+11%5D%22);%0A%7D&edition=2021)\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2289)\n\nCreates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.\n\n##### [Â§](#examples-15)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<i32>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_set().entries(self.0.iter()).finish()\n    }\n}\n\nassert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3Ci32%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_set().entries(self.0.iter()).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:?%7D%22,+Foo(vec!%5B10,+11%5D)),+%22%7B10,+11%7D%22);%0A%7D&edition=2021)\n\nIn this more complex example, we use [`format_args!`](../macro.format_args.html \"macro std::format_args\") and `.debug_set()` to build a list of match arms:\n\n```\nuse std::fmt;\n\nstruct Arm<'a, L, R>(&'a (L, R));\nstruct Table<'a, K, V>(&'a [(K, V)], V);\n\nimpl<'a, L, R> fmt::Debug for Arm<'a, L, R>\nwhere\n    L: 'a + fmt::Debug, R: 'a + fmt::Debug\n{\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        L::fmt(&(self.0).0, fmt)?;\n        fmt.write_str(\" => \")?;\n        R::fmt(&(self.0).1, fmt)\n    }\n}\n\nimpl<'a, K, V> fmt::Debug for Table<'a, K, V>\nwhere\n    K: 'a + fmt::Debug, V: 'a + fmt::Debug\n{\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_set()\n        .entries(self.0.iter().map(Arm))\n        .entry(&Arm(&(format_args!(\"_\"), &self.1)))\n        .finish()\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Arm%3C%27a,+L,+R%3E(%26%27a+(L,+R));%0A++++struct+Table%3C%27a,+K,+V%3E(%26%27a+%5B(K,+V)%5D,+V);%0A++++%0A++++impl%3C%27a,+L,+R%3E+fmt::Debug+for+Arm%3C%27a,+L,+R%3E%0A++++where%0A++++++++L:+%27a+%2B+fmt::Debug,+R:+%27a+%2B+fmt::Debug%0A++++%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++L::fmt(%26(self.0).0,+fmt)?;%0A++++++++++++fmt.write_str(%22+=%3E+%22)?;%0A++++++++++++R::fmt(%26(self.0).1,+fmt)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl%3C%27a,+K,+V%3E+fmt::Debug+for+Table%3C%27a,+K,+V%3E%0A++++where%0A++++++++K:+%27a+%2B+fmt::Debug,+V:+%27a+%2B+fmt::Debug%0A++++%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_set()%0A++++++++++++.entries(self.0.iter().map(Arm))%0A++++++++++++.entry(%26Arm(%26(format_args!(%22_%22),+%26self.1)))%0A++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.2.0 Â· [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2315)\n\nCreates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.\n\n##### [Â§](#examples-16)Examples\n\n```\nuse std::fmt;\n\nstruct Foo(Vec<(String, i32)>);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n    }\n}\n\nassert_eq!(\n    format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n    r#\"{\"A\": 10, \"B\": 11}\"#\n );\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map().entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v))).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,++Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++r%23%22%7B%22A%22:+10,+%22B%22:+11%7D%22%23%0A+++++);%0A%7D&edition=2021)\n\n[Â§](#impl-Freeze-for-Formatter%3C'a%3E)\n\n[Â§](#impl-RefUnwindSafe-for-Formatter%3C'a%3E)\n\n[Â§](#impl-Send-for-Formatter%3C'a%3E)\n\n[Â§](#impl-Sync-for-Formatter%3C'a%3E)\n\n[Â§](#impl-Unpin-for-Formatter%3C'a%3E)\n\n[Â§](#impl-UnwindSafe-for-Formatter%3C'a%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Configuration for formatting.\"><title>Formatter in std::fmt - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Formatter</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Formatter</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.align\">align</a></li><li><a href=\"#method.alternate\">alternate</a></li><li><a href=\"#method.debug_list\">debug_list</a></li><li><a href=\"#method.debug_map\">debug_map</a></li><li><a href=\"#method.debug_set\">debug_set</a></li><li><a href=\"#method.debug_struct\">debug_struct</a></li><li><a href=\"#method.debug_tuple\">debug_tuple</a></li><li><a href=\"#method.fill\">fill</a></li><li><a href=\"#method.flags\">flags</a></li><li><a href=\"#method.pad\">pad</a></li><li><a href=\"#method.pad_integral\">pad_integral</a></li><li><a href=\"#method.precision\">precision</a></li><li><a href=\"#method.sign_aware_zero_pad\">sign_aware_zero_pad</a></li><li><a href=\"#method.sign_minus\">sign_minus</a></li><li><a href=\"#method.sign_plus\">sign_plus</a></li><li><a href=\"#method.width\">width</a></li><li><a href=\"#method.write_fmt\">write_fmt</a></li><li><a href=\"#method.write_str\">write_str</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Write-for-Formatter%3C'_%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-Formatter%3C'a%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Formatter%3C'a%3E\">!Send</a></li><li><a href=\"#impl-Sync-for-Formatter%3C'a%3E\">!Sync</a></li><li><a href=\"#impl-UnwindSafe-for-Formatter%3C'a%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-Formatter%3C'a%3E\">Freeze</a></li><li><a href=\"#impl-Unpin-for-Formatter%3C'a%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fmt</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arguments.html\">Arguments</a></li><li><a href=\"struct.DebugList.html\">DebugList</a></li><li><a href=\"struct.DebugMap.html\">DebugMap</a></li><li><a href=\"struct.DebugSet.html\">DebugSet</a></li><li><a href=\"struct.DebugStruct.html\">DebugStruct</a></li><li><a href=\"struct.DebugTuple.html\">DebugTuple</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.Formatter.html\">Formatter</a></li><li><a href=\"struct.FormatterFn.html\">FormatterFn</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Alignment.html\">Alignment</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Binary.html\">Binary</a></li><li><a href=\"trait.Debug.html\">Debug</a></li><li><a href=\"trait.Display.html\">Display</a></li><li><a href=\"trait.LowerExp.html\">LowerExp</a></li><li><a href=\"trait.LowerHex.html\">LowerHex</a></li><li><a href=\"trait.Octal.html\">Octal</a></li><li><a href=\"trait.Pointer.html\">Pointer</a></li><li><a href=\"trait.UpperExp.html\">UpperExp</a></li><li><a href=\"trait.UpperHex.html\">UpperHex</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.format.html\">format</a></li><li><a href=\"fn.write.html\">write</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Debug.html\">Debug</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fmt</a>::<wbr><a class=\"struct\" href=\"#\">Formatter</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#266\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Formatter&lt;'a&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Configuration for formatting.</p>\n<p>A <code>Formatter</code> represents various options related to formatting. Users do not\nconstruct <code>Formatter</code>s directly; a mutable reference to one is passed to\nthe <code>fmt</code> method of all formatting traits, like <a href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a> and <a href=\"trait.Display.html\" title=\"trait std::fmt::Display\"><code>Display</code></a>.</p>\n<p>To interact with a <code>Formatter</code>, youâ€™ll call various methods to change the\nvarious options related to formatting. For examples, please see the\ndocumentation of the methods defined on <code>Formatter</code> below.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Formatter%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1255\">source</a><a href=\"#impl-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pad_integral\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1322\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pad_integral\" class=\"fn\">pad_integral</a>(\n    &amp;mut self,\n    is_nonnegative: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,\n    prefix: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n    buf: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Performs the correct padding for an integer which has already been\nemitted into a str. The str should <em>not</em> contain the sign for the\ninteger, that will be added by this method.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">Â§</a>Arguments</h5>\n<ul>\n<li>is_nonnegative - whether the original integer was either positive or zero.</li>\n<li>prefix - if the â€˜#â€™ character (Alternate) is provided, this\nis the prefix to put in front of the number.</li>\n<li>buf - the byte array that the number has been formatted into</li>\n</ul>\n<p>This function will correctly account for the flags provided as well as\nthe minimum width. It will not take precision into account.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo { nb: i32 }\n\n<span class=\"kw\">impl </span>Foo {\n    <span class=\"kw\">fn </span>new(nb: i32) -&gt; Foo {\n        Foo {\n            nb,\n        }\n    }\n}\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"comment\">// We need to remove \"-\" from the number output.\n        </span><span class=\"kw\">let </span>tmp = <span class=\"self\">self</span>.nb.abs().to_string();\n\n        formatter.pad_integral(<span class=\"self\">self</span>.nb &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"Foo \"</span>, <span class=\"kw-2\">&amp;</span>tmp)\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo::new(<span class=\"number\">2</span>)), <span class=\"string\">\"2\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo::new(-<span class=\"number\">1</span>)), <span class=\"string\">\"-1\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo::new(<span class=\"number\">0</span>)), <span class=\"string\">\"0\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:#}\"</span>, Foo::new(-<span class=\"number\">1</span>)), <span class=\"string\">\"-Foo 1\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:0&gt;#8}\"</span>, Foo::new(-<span class=\"number\">1</span>)), <span class=\"string\">\"00-Foo 1\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo+%7B+nb:+i32+%7D%0A++++%0A++++impl+Foo+%7B%0A++++++++fn+new(nb:+i32)+-%3E+Foo+%7B%0A++++++++++++Foo+%7B%0A++++++++++++++++nb,%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++//+We+need+to+remove+%22-%22+from+the+number+output.%0A++++++++++++let+tmp+=+self.nb.abs().to_string();%0A++++%0A++++++++++++formatter.pad_integral(self.nb+%3E=+0,+%22Foo+%22,+%26tmp)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(2)),+%222%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(-1)),+%22-1%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo::new(0)),+%220%22);%0A++++assert_eq!(format!(%22%7B:%23%7D%22,+Foo::new(-1)),+%22-Foo+1%22);%0A++++assert_eq!(format!(%22%7B:0%3E%238%7D%22,+Foo::new(-1)),+%2200-Foo+1%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pad\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1416\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pad\" class=\"fn\">pad</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:</p>\n<ul>\n<li>width - the minimum width of what to emit</li>\n<li>fill/align - what to emit and where to emit it if the string\nprovided needs to be padded</li>\n<li>precision - the maximum length to emit, the string is truncated if it\nis longer than this length</li>\n</ul>\n<p>Notably this function ignores the <code>flag</code> parameters.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        formatter.pad(<span class=\"string\">\"Foo\"</span>)\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:&lt;4}\"</span>), <span class=\"string\">\"Foo \"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:0&gt;4}\"</span>), <span class=\"string\">\"0Foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.pad(%22Foo%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo:%3C4%7D%22),+%22Foo+%22);%0A++++assert_eq!(format!(%22%7BFoo:0%3E4%7D%22),+%220Foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1612\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, data: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes some data to the underlying buffer contained within this\nformatter.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        formatter.write_str(<span class=\"string\">\"Foo\"</span>)\n        <span class=\"comment\">// This is equivalent to:\n        // write!(formatter, \"Foo\")\n    </span>}\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo}\"</span>), <span class=\"string\">\"Foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:0&gt;8}\"</span>), <span class=\"string\">\"Foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.write_str(%22Foo%22)%0A++++++++++++//+This+is+equivalent+to:%0A++++++++++++//+write!(formatter,+%22Foo%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo%7D%22),+%22Foo%22);%0A++++assert_eq!(format!(%22%7BFoo:0%3E8%7D%22),+%22Foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1636\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes some formatted information into this instance.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        formatter.write_fmt(<span class=\"macro\">format_args!</span>(<span class=\"string\">\"Foo {}\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>))\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(-<span class=\"number\">1</span>)), <span class=\"string\">\"Foo -1\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:0&gt;8}\"</span>, Foo(<span class=\"number\">2</span>)), <span class=\"string\">\"Foo 2\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++formatter.write_fmt(format_args!(%22Foo+%7B%7D%22,+self.0))%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(-1)),+%22Foo+-1%22);%0A++++assert_eq!(format!(%22%7B:0%3E8%7D%22,+Foo(2)),+%22Foo+2%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flags\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1652\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.flags\" class=\"fn\">flags</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.24.0: use the <code>sign_plus</code>, <code>sign_minus</code>, <code>alternate</code>, or <code>sign_aware_zero_pad</code> methods instead</span></div></span></summary><div class=\"docblock\"><p>Flags for formatting</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1685\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fill\" class=\"fn\">fill</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>Character used as â€˜fillâ€™ whenever there is alignment.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span>c = formatter.fill();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(width) = formatter.width() {\n            <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..width {\n                <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{c}\"</span>)<span class=\"question-mark\">?</span>;\n            }\n            <span class=\"prelude-val\">Ok</span>(())\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{c}\"</span>)\n        }\n    }\n}\n\n<span class=\"comment\">// We set alignment to the right with \"&gt;\".\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:G&gt;3}\"</span>), <span class=\"string\">\"GGG\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:t&gt;6}\"</span>), <span class=\"string\">\"tttttt\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+c+=+formatter.fill();%0A++++++++++++if+let+Some(width)+=+formatter.width()+%7B%0A++++++++++++++++for+_+in+0..width+%7B%0A++++++++++++++++++++write!(formatter,+%22%7Bc%7D%22)?;%0A++++++++++++++++%7D%0A++++++++++++++++Ok(())%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22%7Bc%7D%22)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+We+set+alignment+to+the+right+with+%22%3E%22.%0A++++assert_eq!(format!(%22%7BFoo:G%3E3%7D%22),+%22GGG%22);%0A++++assert_eq!(format!(%22%7BFoo:t%3E6%7D%22),+%22tttttt%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1720\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.align\" class=\"fn\">align</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"enum.Alignment.html\" title=\"enum std::fmt::Alignment\">Alignment</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Flag indicating what form of alignment was requested.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::{<span class=\"self\">self</span>, Alignment};\n\n<span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span>s = <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = formatter.align() {\n            <span class=\"kw\">match </span>s {\n                Alignment::Left    =&gt; <span class=\"string\">\"left\"</span>,\n                Alignment::Right   =&gt; <span class=\"string\">\"right\"</span>,\n                Alignment::Center  =&gt; <span class=\"string\">\"center\"</span>,\n            }\n        } <span class=\"kw\">else </span>{\n            <span class=\"string\">\"into the void\"\n        </span>};\n        <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{s}\"</span>)\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:&lt;}\"</span>), <span class=\"string\">\"left\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:&gt;}\"</span>), <span class=\"string\">\"right\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo:^}\"</span>), <span class=\"string\">\"center\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{Foo}\"</span>), <span class=\"string\">\"into the void\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::%7Bself,+Alignment%7D;%0A++++%0A++++struct+Foo;%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++let+s+=+if+let+Some(s)+=+formatter.align()+%7B%0A++++++++++++++++match+s+%7B%0A++++++++++++++++++++Alignment::Left++++=%3E+%22left%22,%0A++++++++++++++++++++Alignment::Right+++=%3E+%22right%22,%0A++++++++++++++++++++Alignment::Center++=%3E+%22center%22,%0A++++++++++++++++%7D%0A++++++++++++%7D+else+%7B%0A++++++++++++++++%22into+the+void%22%0A++++++++++++%7D;%0A++++++++++++write!(formatter,+%22%7Bs%7D%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7BFoo:%3C%7D%22),+%22left%22);%0A++++assert_eq!(format!(%22%7BFoo:%3E%7D%22),+%22right%22);%0A++++assert_eq!(format!(%22%7BFoo:%5E%7D%22),+%22center%22);%0A++++assert_eq!(format!(%22%7BFoo%7D%22),+%22into+the+void%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.width\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1755\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.width\" class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Optionally specified integer width that the output should be.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(width) = formatter.width() {\n            <span class=\"comment\">// If we received a width, we use it\n            </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{:width$}\"</span>, <span class=\"macro\">format!</span>(<span class=\"string\">\"Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>), width = width)\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// Otherwise we do nothing special\n            </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:10}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(23)   \"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(23)\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+let+Some(width)+=+formatter.width()+%7B%0A++++++++++++++++//+If+we+received+a+width,+we+use+it%0A++++++++++++++++write!(formatter,+%22%7B:width%24%7D%22,+format!(%22Foo(%7B%7D)%22,+self.0),+width+=+width)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++//+Otherwise+we+do+nothing+special%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:10%7D%22,+Foo(23)),+%22Foo(23)+++%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.precision\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1786\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.precision\" class=\"fn\">precision</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Optionally specified precision for numeric types. Alternatively, the\nmaximum width for string types.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(f32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(precision) = formatter.precision() {\n            <span class=\"comment\">// If we received a precision, we use it.\n            </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({1:.*})\"</span>, precision, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// Otherwise we default to 2.\n            </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({:.2})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:.4}\"</span>, Foo(<span class=\"number\">23.2</span>)), <span class=\"string\">\"Foo(23.2000)\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(<span class=\"number\">23.2</span>)), <span class=\"string\">\"Foo(23.20)\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(f32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+let+Some(precision)+=+formatter.precision()+%7B%0A++++++++++++++++//+If+we+received+a+precision,+we+use+it.%0A++++++++++++++++write!(formatter,+%22Foo(%7B1:.*%7D)%22,+precision,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++//+Otherwise+we+default+to+2.%0A++++++++++++++++write!(formatter,+%22Foo(%7B:.2%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:.4%7D%22,+Foo(23.2)),+%22Foo(23.2000)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23.2)),+%22Foo(23.20)%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sign_plus\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1818\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sign_plus\" class=\"fn\">sign_plus</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines if the <code>+</code> flag was specified.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">if </span>formatter.sign_plus() {\n            <span class=\"macro\">write!</span>(formatter,\n                   <span class=\"string\">\"Foo({}{})\"</span>,\n                   <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"number\">0 </span>&lt; <span class=\"number\">0 </span>{ <span class=\"string\">'-' </span>} <span class=\"kw\">else </span>{ <span class=\"string\">'+' </span>},\n                   <span class=\"self\">self</span>.<span class=\"number\">0</span>.abs())\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:+}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(+23)\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:+}\"</span>, Foo(-<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(-23)\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(23)\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.sign_plus()+%7B%0A++++++++++++++++write!(formatter,%0A+++++++++++++++++++++++%22Foo(%7B%7D%7B%7D)%22,%0A+++++++++++++++++++++++if+self.0+%3C+0+%7B+'-'+%7D+else+%7B+'%2B'+%7D,%0A+++++++++++++++++++++++self.0.abs())%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:%2B%7D%22,+Foo(23)),+%22Foo(%2B23)%22);%0A++++assert_eq!(format!(%22%7B:%2B%7D%22,+Foo(-23)),+%22Foo(-23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sign_minus\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1847\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sign_minus\" class=\"fn\">sign_minus</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines if the <code>-</code> flag was specified.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">if </span>formatter.sign_minus() {\n            <span class=\"comment\">// You want a minus sign? Have one!\n            </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"-Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:-}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"-Foo(23)\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(23)\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.sign_minus()+%7B%0A++++++++++++++++//+You+want+a+minus+sign?+Have+one!%0A++++++++++++++++write!(formatter,+%22-Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:-%7D%22,+Foo(23)),+%22-Foo(23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%22Foo(23)%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.alternate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1875\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.alternate\" class=\"fn\">alternate</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines if the <code>#</code> flag was specified.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">if </span>formatter.alternate() {\n            <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"Foo({})\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{}\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n        }\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:#}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"Foo(23)\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"23\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++if+formatter.alternate()+%7B%0A++++++++++++++++write!(formatter,+%22Foo(%7B%7D)%22,+self.0)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++write!(formatter,+%22%7B%7D%22,+self.0)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:%23%7D%22,+Foo(23)),+%22Foo(23)%22);%0A++++assert_eq!(format!(%22%7B%7D%22,+Foo(23)),+%2223%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sign_aware_zero_pad\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1901\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sign_aware_zero_pad\" class=\"fn\">sign_aware_zero_pad</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines if the <code>0</code> flag was specified.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(i32);\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">assert!</span>(formatter.sign_aware_zero_pad());\n        <span class=\"macro\">assert_eq!</span>(formatter.width(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n        <span class=\"comment\">// We ignore the formatter's options.\n        </span><span class=\"macro\">write!</span>(formatter, <span class=\"string\">\"{}\"</span>, <span class=\"self\">self</span>.<span class=\"number\">0</span>)\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:04}\"</span>, Foo(<span class=\"number\">23</span>)), <span class=\"string\">\"23\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(i32);%0A++++%0A++++impl+fmt::Display+for+Foo+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++assert!(formatter.sign_aware_zero_pad());%0A++++++++++++assert_eq!(formatter.width(),+Some(4));%0A++++++++++++//+We+ignore+the+formatter's+options.%0A++++++++++++write!(formatter,+%22%7B%7D%22,+self.0)%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:04%7D%22,+Foo(23)),+%2223%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.debug_struct\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1952\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.debug_struct\" class=\"fn\">debug_struct</a>&lt;'b&gt;(&amp;'b mut self, name: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.DebugStruct.html\" title=\"struct std::fmt::DebugStruct\">DebugStruct</a>&lt;'b, 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"struct.DebugStruct.html\" title=\"struct std::fmt::DebugStruct\"><code>DebugStruct</code></a> builder designed to assist with creation of\n<a href=\"trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>fmt::Debug</code></a> implementations for structs.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n<span class=\"kw\">use </span>std::net::Ipv4Addr;\n\n<span class=\"kw\">struct </span>Foo {\n    bar: i32,\n    baz: String,\n    addr: Ipv4Addr,\n}\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_struct(<span class=\"string\">\"Foo\"</span>)\n            .field(<span class=\"string\">\"bar\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.bar)\n            .field(<span class=\"string\">\"baz\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.baz)\n            .field(<span class=\"string\">\"addr\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">format_args!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"self\">self</span>.addr))\n            .finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"Foo { bar: 10, baz: \\\"Hello World\\\", addr: 127.0.0.1 }\"</span>,\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo {\n        bar: <span class=\"number\">10</span>,\n        baz: <span class=\"string\">\"Hello World\"</span>.to_string(),\n        addr: Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>),\n    })\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++use+std::net::Ipv4Addr;%0A++++%0A++++struct+Foo+%7B%0A++++++++bar:+i32,%0A++++++++baz:+String,%0A++++++++addr:+Ipv4Addr,%0A++++%7D%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_struct(%22Foo%22)%0A++++++++++++++++.field(%22bar%22,+%26self.bar)%0A++++++++++++++++.field(%22baz%22,+%26self.baz)%0A++++++++++++++++.field(%22addr%22,+%26format_args!(%22%7B%7D%22,+self.addr))%0A++++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++%22Foo+%7B+bar:+10,+baz:+%5C%22Hello+World%5C%22,+addr:+127.0.0.1+%7D%22,%0A++++++++format!(%22%7B:?%7D%22,+Foo+%7B%0A++++++++++++bar:+10,%0A++++++++++++baz:+%22Hello+World%22.to_string(),%0A++++++++++++addr:+Ipv4Addr::new(127,+0,+0,+1),%0A++++++++%7D)%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.debug_tuple\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2106\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.debug_tuple\" class=\"fn\">debug_tuple</a>&lt;'b&gt;(&amp;'b mut self, name: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.DebugTuple.html\" title=\"struct std::fmt::DebugTuple\">DebugTuple</a>&lt;'b, 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>DebugTuple</code> builder designed to assist with creation of\n<code>fmt::Debug</code> implementations for tuple structs.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n<span class=\"kw\">use </span>std::marker::PhantomData;\n\n<span class=\"kw\">struct </span>Foo&lt;T&gt;(i32, String, PhantomData&lt;T&gt;);\n\n<span class=\"kw\">impl</span>&lt;T&gt; fmt::Debug <span class=\"kw\">for </span>Foo&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_tuple(<span class=\"string\">\"Foo\"</span>)\n            .field(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>)\n            .field(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">1</span>)\n            .field(<span class=\"kw-2\">&amp;</span><span class=\"macro\">format_args!</span>(<span class=\"string\">\"_\"</span>))\n            .finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"Foo(10, \\\"Hello\\\", _)\"</span>,\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"number\">10</span>, <span class=\"string\">\"Hello\"</span>.to_string(), PhantomData::&lt;u8&gt;))\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++use+std::marker::PhantomData;%0A++++%0A++++struct+Foo%3CT%3E(i32,+String,+PhantomData%3CT%3E);%0A++++%0A++++impl%3CT%3E+fmt::Debug+for+Foo%3CT%3E+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_tuple(%22Foo%22)%0A++++++++++++++++.field(%26self.0)%0A++++++++++++++++.field(%26self.1)%0A++++++++++++++++.field(%26format_args!(%22_%22))%0A++++++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++%22Foo(10,+%5C%22Hello%5C%22,+_)%22,%0A++++++++format!(%22%7B:?%7D%22,+Foo(10,+%22Hello%22.to_string(),+PhantomData::%3Cu8%3E))%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.debug_list\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2231\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.debug_list\" class=\"fn\">debug_list</a>&lt;'b&gt;(&amp;'b mut self) -&gt; <a class=\"struct\" href=\"struct.DebugList.html\" title=\"struct std::fmt::DebugList\">DebugList</a>&lt;'b, 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>DebugList</code> builder designed to assist with creation of\n<code>fmt::Debug</code> implementations for list-like structures.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;i32&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_list().entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter()).finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>])), <span class=\"string\">\"[10, 11]\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3Ci32%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_list().entries(self.0.iter()).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:?%7D%22,+Foo(vec!%5B10,+11%5D)),+%22%5B10,+11%5D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.debug_set\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2289\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.debug_set\" class=\"fn\">debug_set</a>&lt;'b&gt;(&amp;'b mut self) -&gt; <a class=\"struct\" href=\"struct.DebugSet.html\" title=\"struct std::fmt::DebugSet\">DebugSet</a>&lt;'b, 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>DebugSet</code> builder designed to assist with creation of\n<code>fmt::Debug</code> implementations for set-like structures.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;i32&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_set().entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter()).finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, Foo(<span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">11</span>])), <span class=\"string\">\"{10, 11}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3Ci32%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_set().entries(self.0.iter()).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(format!(%22%7B:?%7D%22,+Foo(vec!%5B10,+11%5D)),+%22%7B10,+11%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In this more complex example, we use <a href=\"../macro.format_args.html\" title=\"macro std::format_args\"><code>format_args!</code></a> and <code>.debug_set()</code>\nto build a list of match arms:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Arm&lt;<span class=\"lifetime\">'a</span>, L, R&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>(L, R));\n<span class=\"kw\">struct </span>Table&lt;<span class=\"lifetime\">'a</span>, K, V&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[(K, V)], V);\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, L, R&gt; fmt::Debug <span class=\"kw\">for </span>Arm&lt;<span class=\"lifetime\">'a</span>, L, R&gt;\n<span class=\"kw\">where\n    </span>L: <span class=\"lifetime\">'a </span>+ fmt::Debug, R: <span class=\"lifetime\">'a </span>+ fmt::Debug\n{\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        L::fmt(<span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.<span class=\"number\">0</span>).<span class=\"number\">0</span>, fmt)<span class=\"question-mark\">?</span>;\n        fmt.write_str(<span class=\"string\">\" =&gt; \"</span>)<span class=\"question-mark\">?</span>;\n        R::fmt(<span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.<span class=\"number\">0</span>).<span class=\"number\">1</span>, fmt)\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, K, V&gt; fmt::Debug <span class=\"kw\">for </span>Table&lt;<span class=\"lifetime\">'a</span>, K, V&gt;\n<span class=\"kw\">where\n    </span>K: <span class=\"lifetime\">'a </span>+ fmt::Debug, V: <span class=\"lifetime\">'a </span>+ fmt::Debug\n{\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_set()\n        .entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter().map(Arm))\n        .entry(<span class=\"kw-2\">&amp;</span>Arm(<span class=\"kw-2\">&amp;</span>(<span class=\"macro\">format_args!</span>(<span class=\"string\">\"_\"</span>), <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">1</span>)))\n        .finish()\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Arm%3C'a,+L,+R%3E(%26'a+(L,+R));%0A++++struct+Table%3C'a,+K,+V%3E(%26'a+%5B(K,+V)%5D,+V);%0A++++%0A++++impl%3C'a,+L,+R%3E+fmt::Debug+for+Arm%3C'a,+L,+R%3E%0A++++where%0A++++++++L:+'a+%2B+fmt::Debug,+R:+'a+%2B+fmt::Debug%0A++++%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++L::fmt(%26(self.0).0,+fmt)?;%0A++++++++++++fmt.write_str(%22+=%3E+%22)?;%0A++++++++++++R::fmt(%26(self.0).1,+fmt)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl%3C'a,+K,+V%3E+fmt::Debug+for+Table%3C'a,+K,+V%3E%0A++++where%0A++++++++K:+'a+%2B+fmt::Debug,+V:+'a+%2B+fmt::Debug%0A++++%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_set()%0A++++++++++++.entries(self.0.iter().map(Arm))%0A++++++++++++.entry(%26Arm(%26(format_args!(%22_%22),+%26self.1)))%0A++++++++++++.finish()%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.debug_map\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2315\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.debug_map\" class=\"fn\">debug_map</a>&lt;'b&gt;(&amp;'b mut self) -&gt; <a class=\"struct\" href=\"struct.DebugMap.html\" title=\"struct std::fmt::DebugMap\">DebugMap</a>&lt;'b, 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>DebugMap</code> builder designed to assist with creation of\n<code>fmt::Debug</code> implementations for map-like structures.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">struct </span>Foo(Vec&lt;(String, i32)&gt;);\n\n<span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_map().entries(<span class=\"self\">self</span>.<span class=\"number\">0</span>.iter().map(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw-2\">ref </span>v)| (k, v))).finish()\n    }\n}\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>,  Foo(<span class=\"macro\">vec!</span>[(<span class=\"string\">\"A\"</span>.to_string(), <span class=\"number\">10</span>), (<span class=\"string\">\"B\"</span>.to_string(), <span class=\"number\">11</span>)])),\n    <span class=\"string\">r#\"{\"A\": 10, \"B\": 11}\"#\n </span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++struct+Foo(Vec%3C(String,+i32)%3E);%0A++++%0A++++impl+fmt::Debug+for+Foo+%7B%0A++++++++fn+fmt(%26self,+fmt:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++fmt.debug_map().entries(self.0.iter().map(%7C%26(ref+k,+ref+v)%7C+(k,+v))).finish()%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(%0A++++++++format!(%22%7B:?%7D%22,++Foo(vec!%5B(%22A%22.to_string(),+10),+(%22B%22.to_string(),+11)%5D)),%0A++++++++r%23%22%7B%22A%22:+10,+%22B%22:+11%7D%22%23%0A+++++);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-Formatter%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2321\">source</a></span><a href=\"#impl-Write-for-Formatter%3C'_%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_str-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2322\">source</a><a href=\"#method.write_str-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_char\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2326\">source</a><a href=\"#method.write_char\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"../primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a <a href=\"../primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2331\">source</a><a href=\"#method.write_fmt-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Glue for usage of the <a href=\"../macro.write.html\" title=\"macro std::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section><section id=\"impl-Send-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-Send-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section><section id=\"impl-Sync-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section><section id=\"impl-Unpin-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section><section id=\"impl-UnwindSafe-for-Formatter%3C'a%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Formatter%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'a&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:42.127Z"
}