{
	"title": "Overriding Dependencies - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html",
	"markdown": "# Overriding Dependencies - The Cargo Book\n\nThe desire to override a dependency can arise through a number of scenarios. Most of them, however, boil down to the ability to work with a crate before it’s been published to [crates.io](https://crates.io/). For example:\n\n-   A crate you’re working on is also used in a much larger application you’re working on, and you’d like to test a bug fix to the library inside of the larger application.\n-   An upstream crate you don’t work on has a new feature or a bug fix on the master branch of its git repository which you’d like to test out.\n-   You’re about to publish a new major version of your crate, but you’d like to do integration testing across an entire package to ensure the new major version works.\n-   You’ve submitted a fix to an upstream crate for a bug you found, but you’d like to immediately have your application start depending on the fixed version of the crate to avoid blocking on the bug fix getting merged.\n\nThese scenarios can be solved with the [`[patch]` manifest section](#the-patch-section).\n\nThis chapter walks through a few different use cases, and includes details on the different ways to override a dependency.\n\n-   Example use cases\n    -   [Testing a bugfix](#testing-a-bugfix)\n    -   [Working with an unpublished minor version](#working-with-an-unpublished-minor-version)\n        -   [Overriding repository URL](#overriding-repository-url)\n    -   [Prepublishing a breaking change](#prepublishing-a-breaking-change)\n    -   [Using `[patch]` with multiple versions](#using-patch-with-multiple-versions)\n-   Reference\n    -   [The `[patch]` section](#the-patch-section)\n    -   [The `[replace]` section](#the-replace-section)\n    -   [`paths` overrides](#paths-overrides)\n\n> **Note**: See also specifying a dependency with [multiple locations](about:blank/specifying-dependencies.html#multiple-locations), which can be used to override the source for a single dependency declaration in a local package.\n\n## [Testing a bugfix](#testing-a-bugfix)\n\nLet’s say you’re working with the [`uuid` crate](https://crates.io/crates/uuid) but while you’re working on it you discover a bug. You are, however, quite enterprising so you decide to also try to fix the bug! Originally your manifest will look like:\n\n```toml\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0\"\n\n```\n\nFirst thing we’ll do is to clone the [`uuid` repository](https://github.com/uuid-rs/uuid) locally via:\n\n```console\n$ git clone https://github.com/uuid-rs/uuid.git\n\n```\n\nNext we’ll edit the manifest of `my-library` to contain:\n\n```toml\n[patch.crates-io]\nuuid = { path = \"../path/to/uuid\" }\n\n```\n\nHere we declare that we’re _patching_ the source `crates-io` with a new dependency. This will effectively add the local checked out version of `uuid` to the crates.io registry for our local package.\n\nNext up we need to ensure that our lock file is updated to use this new version of `uuid` so our package uses the locally checked out copy instead of one from crates.io. The way `[patch]` works is that it’ll load the dependency at `../path/to/uuid` and then whenever crates.io is queried for versions of `uuid` it’ll _also_ return the local version.\n\nThis means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared `uuid = \"1.0\"` which means we’ll only resolve to `>= 1.0.0, < 2.0.0`, and Cargo’s greedy resolution algorithm also means that we’ll resolve to the maximum version within that range. Typically this doesn’t matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it’s important to keep this in mind!\n\nIn any case, typically all you need to do now is:\n\n```console\n$ cargo build\n   Compiling uuid v1.0.0 (.../uuid)\n   Compiling my-library v0.1.0 (.../my-library)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n\n```\n\nAnd that’s it! You’re now building with the local version of `uuid` (note the path in parentheses in the build output). If you don’t see the local path version getting built then you may need to run `cargo update uuid --precise $version` where `$version` is the version of the locally checked out copy of `uuid`.\n\nOnce you’ve fixed the bug you originally found the next thing you’ll want to do is to likely submit that as a pull request to the `uuid` crate itself. Once you’ve done this then you can also update the `[patch]` section. The listing inside of `[patch]` is just like the `[dependencies]` section, so once your pull request is merged you could change your `path` dependency to:\n\n```toml\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\n## [Working with an unpublished minor version](#working-with-an-unpublished-minor-version)\n\nLet’s now shift gears a bit from bug fixes to adding features. While working on `my-library` you discover that a whole new feature is needed in the `uuid` crate. You’ve implemented this feature, tested it locally above with `[patch]`, and submitted a pull request. Let’s go over how you continue to use and test it before it’s actually published.\n\nLet’s also say that the current version of `uuid` on crates.io is `1.0.0`, but since then the master branch of the git repository has updated to `1.0.1`. This branch includes your new feature you submitted previously. To use this repository we’ll edit our `Cargo.toml` to look like\n\n```toml\n[package]\nname = \"my-library\"\nversion = \"0.1.0\"\n\n[dependencies]\nuuid = \"1.0.1\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\nNote that our local dependency on `uuid` has been updated to `1.0.1` as it’s what we’ll actually require once the crate is published. This version doesn’t exist on crates.io, though, so we provide it with the `[patch]` section of the manifest.\n\nNow when our library is built it’ll fetch `uuid` from the git repository and resolve to 1.0.1 inside the repository instead of trying to download a version from crates.io. Once 1.0.1 is published on crates.io the `[patch]` section can be deleted.\n\nIt’s also worth noting that `[patch]` applies _transitively_. Let’s say you use `my-library` in a larger package, such as:\n\n```toml\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n\n```\n\nRemember that `[patch]` is applicable _transitively_ but can only be defined at the _top level_ so we consumers of `my-library` have to repeat the `[patch]` section if necessary. Here, though, the new `uuid` crate applies to _both_ our dependency on `uuid` and the `my-library -> uuid` dependency. The `uuid` crate will be resolved to one version for this entire crate graph, 1.0.1, and it’ll be pulled from the git repository.\n\n### [Overriding repository URL](#overriding-repository-url)\n\nIn case the dependency you want to override isn’t loaded from `crates.io`, you’ll have to change a bit how you use `[patch]`. For example, if the dependency is a git dependency, you can override it to a local path with:\n\n```toml\n[patch.\"https://github.com/your/repository\"]\nmy-library = { path = \"../my-library/path\" }\n\n```\n\nAnd that’s it!\n\n## [Prepublishing a breaking change](#prepublishing-a-breaking-change)\n\nLet’s take a look at working with a new major version of a crate, typically accompanied with breaking changes. Sticking with our previous crates, this means that we’re going to be creating version 2.0.0 of the `uuid` crate. After we’ve submitted all changes upstream we can update our manifest for `my-library` to look like:\n\n```toml\n[dependencies]\nuuid = \"2.0\"\n\n[patch.crates-io]\nuuid = { git = \"https://github.com/uuid-rs/uuid.git\", branch = \"2.0.0\" }\n\n```\n\nAnd that’s it! Like with the previous example the 2.0.0 version doesn’t actually exist on crates.io but we can still put it in through a git dependency through the usage of the `[patch]` section. As a thought exercise let’s take another look at the `my-binary` manifest from above again as well:\n\n```toml\n[package]\nname = \"my-binary\"\nversion = \"0.1.0\"\n\n[dependencies]\nmy-library = { git = 'https://example.com/git/my-library' }\nuuid = \"1.0\"\n\n[patch.crates-io]\nuuid = { git = 'https://github.com/uuid-rs/uuid.git', branch = '2.0.0' }\n\n```\n\nNote that this will actually resolve to two versions of the `uuid` crate. The `my-binary` crate will continue to use the 1.x.y series of the `uuid` crate but the `my-library` crate will use the `2.0.0` version of `uuid`. This will allow you to gradually roll out breaking changes to a crate through a dependency graph without being forced to update everything all at once.\n\n## [Using `[patch]` with multiple versions](#using-patch-with-multiple-versions)\n\nYou can patch in multiple versions of the same crate with the `package` key used to rename dependencies. For example let’s say that the `serde` crate has a bugfix that we’d like to use to its `1.*` series but we’d also like to prototype using a `2.0.0` version of serde we have in our git repository. To configure this we’d do:\n\n```toml\n[patch.crates-io]\nserde = { git = 'https://github.com/serde-rs/serde.git' }\nserde2 = { git = 'https://github.com/example/serde.git', package = 'serde', branch = 'v2' }\n\n```\n\nThe first `serde = ...` directive indicates that serde `1.*` should be used from the git repository (pulling in the bugfix we need) and the second `serde2 = ...` directive indicates that the `serde` package should also be pulled from the `v2` branch of `https://github.com/example/serde`. We’re assuming here that `Cargo.toml` on that branch mentions version `2.0.0`.\n\nNote that when using the `package` key the `serde2` identifier here is actually ignored. We simply need a unique name which doesn’t conflict with other patched crates.\n\n## [The `[patch]` section](#the-patch-section)\n\nThe `[patch]` section of `Cargo.toml` can be used to override dependencies with other copies. The syntax is similar to the [`[dependencies]`](specifying-dependencies.html) section:\n\n```toml\n[patch.crates-io]\nfoo = { git = 'https://github.com/example/foo.git' }\nbar = { path = 'my/local/bar' }\n\n[dependencies.baz]\ngit = 'https://github.com/example/baz.git'\n\n[patch.'https://github.com/example/baz']\nbaz = { git = 'https://github.com/example/patched-baz.git', branch = 'my-branch' }\n\n```\n\n> **Note**: The `[patch]` table can also be specified as a [configuration option](config.html), such as in a `.cargo/config.toml` file or a CLI option like `--config 'patch.crates-io.rand.path=\"rand\"'`. This can be useful for local-only changes that you don’t want to commit, or temporarily testing a patch.\n\nThe `[patch]` table is made of dependency-like sub-tables. Each key after `[patch]` is a URL of the source that is being patched, or the name of a registry. The name `crates-io` may be used to override the default registry [crates.io](https://crates.io/). The first `[patch]` in the example above demonstrates overriding [crates.io](https://crates.io/), and the second `[patch]` demonstrates overriding a git source.\n\nEach entry in these tables is a normal dependency specification, the same as found in the `[dependencies]` section of the manifest. The dependencies listed in the `[patch]` section are resolved and used to patch the source at the URL specified. The above manifest snippet patches the `crates-io` source (e.g. crates.io itself) with the `foo` crate and `bar` crate. It also patches the `https://github.com/example/baz` source with a `my-branch` that comes from elsewhere.\n\nSources can be patched with versions of crates that do not exist, and they can also be patched with versions of crates that already exist. If a source is patched with a crate version that already exists in the source, then the source’s original crate is replaced.\n\nCargo only looks at the patch settings in the `Cargo.toml` manifest at the root of the workspace. Patch settings defined in dependencies will be ignored.\n\n## [The `[replace]` section](#the-replace-section)\n\n> **Note**: `[replace]` is deprecated. You should use the [`[patch]`](#the-patch-section) table instead.\n\nThis section of Cargo.toml can be used to override dependencies with other copies. The syntax is similar to the `[dependencies]` section:\n\n```toml\n[replace]\n\"foo:0.1.0\" = { git = 'https://github.com/example/foo.git' }\n\"bar:1.0.2\" = { path = 'my/local/bar' }\n\n```\n\nEach key in the `[replace]` table is a [package ID specification](pkgid-spec.html), which allows arbitrarily choosing a node in the dependency graph to override (the 3-part version number is required). The value of each key is the same as the `[dependencies]` syntax for specifying dependencies, except that you can’t specify features. Note that when a crate is overridden the copy it’s overridden with must have both the same name and version, but it can come from a different source (e.g., git or a local path).\n\nCargo only looks at the replace settings in the `Cargo.toml` manifest at the root of the workspace. Replace settings defined in dependencies will be ignored.\n\n## [`paths` overrides](#paths-overrides)\n\nSometimes you’re only temporarily working on a crate and you don’t want to have to modify `Cargo.toml` like with the `[patch]` section above. For this use case Cargo offers a much more limited version of overrides called **path overrides**.\n\nPath overrides are specified through [`.cargo/config.toml`](config.html) instead of `Cargo.toml`. Inside of `.cargo/config.toml` you’ll specify a key called `paths`:\n\n```toml\npaths = [\"/path/to/uuid\"]\n\n```\n\nThis array should be filled with directories that contain a `Cargo.toml`. In this instance, we’re just adding `uuid`, so it will be the only one that’s overridden. This path can be either absolute or relative to the directory that contains the `.cargo` folder.\n\nPath overrides are more restricted than the `[patch]` section, however, in that they cannot change the structure of the dependency graph. When a path replacement is used then the previous set of dependencies must all match exactly to the new `Cargo.toml` specification. For example this means that path overrides cannot be used to test out adding a dependency to a crate, instead `[patch]` must be used in that situation. As a result usage of a path override is typically isolated to quick bug fixes rather than larger changes.\n\n> **Note**: using a local configuration to override paths will only work for crates that have been published to [crates.io](https://crates.io/). You cannot use this feature to tell Cargo how to find local unpublished crates.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Overriding Dependencies - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/overriding-dependencies.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"overriding-dependencies\"><a class=\"header\" href=\"#overriding-dependencies\">Overriding Dependencies</a></h1>\n<p>The desire to override a dependency can arise through a number of scenarios.\nMost of them, however, boil down to the ability to work with a crate before\nit’s been published to <a href=\"https://crates.io/\">crates.io</a>. For example:</p>\n<ul>\n<li>A crate you’re working on is also used in a much larger application you’re\nworking on, and you’d like to test a bug fix to the library inside of the\nlarger application.</li>\n<li>An upstream crate you don’t work on has a new feature or a bug fix on the\nmaster branch of its git repository which you’d like to test out.</li>\n<li>You’re about to publish a new major version of your crate, but you’d like to\ndo integration testing across an entire package to ensure the new major\nversion works.</li>\n<li>You’ve submitted a fix to an upstream crate for a bug you found, but you’d\nlike to immediately have your application start depending on the fixed\nversion of the crate to avoid blocking on the bug fix getting merged.</li>\n</ul>\n<p>These scenarios can be solved with the <a href=\"#the-patch-section\"><code class=\"hljs\">[patch]</code> manifest\nsection</a>.</p>\n<p>This chapter walks through a few different use cases, and includes details\non the different ways to override a dependency.</p>\n<ul>\n<li>Example use cases\n<ul>\n<li><a href=\"#testing-a-bugfix\">Testing a bugfix</a></li>\n<li><a href=\"#working-with-an-unpublished-minor-version\">Working with an unpublished minor version</a>\n<ul>\n<li><a href=\"#overriding-repository-url\">Overriding repository URL</a></li>\n</ul>\n</li>\n<li><a href=\"#prepublishing-a-breaking-change\">Prepublishing a breaking change</a></li>\n<li><a href=\"#using-patch-with-multiple-versions\">Using <code class=\"hljs\">[patch]</code> with multiple versions</a></li>\n</ul>\n</li>\n<li>Reference\n<ul>\n<li><a href=\"#the-patch-section\">The <code class=\"hljs\">[patch]</code> section</a></li>\n<li><a href=\"#the-replace-section\">The <code class=\"hljs\">[replace]</code> section</a></li>\n<li><a href=\"#paths-overrides\"><code class=\"hljs\">paths</code> overrides</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: See also specifying a dependency with <a href=\"specifying-dependencies.html#multiple-locations\">multiple locations</a>, which\ncan be used to override the source for a single dependency declaration in a\nlocal package.</p>\n</blockquote>\n<h2 id=\"testing-a-bugfix\"><a class=\"header\" href=\"#testing-a-bugfix\">Testing a bugfix</a></h2>\n<p>Let’s say you’re working with the <a href=\"https://crates.io/crates/uuid\"><code class=\"hljs\">uuid</code> crate</a> but while you’re working on it\nyou discover a bug. You are, however, quite enterprising so you decide to also\ntry to fix the bug! Originally your manifest will look like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-library\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n</code></pre>\n<p>First thing we’ll do is to clone the <a href=\"https://github.com/uuid-rs/uuid\"><code class=\"hljs\">uuid</code> repository</a>\nlocally via:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> https://github.com/uuid-rs/uuid.git</span>\n</code></pre>\n<p>Next we’ll edit the manifest of <code class=\"hljs\">my-library</code> to contain:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { path = <span class=\"hljs-string\">\"../path/to/uuid\"</span> }\n</code></pre>\n<p>Here we declare that we’re <em>patching</em> the source <code class=\"hljs\">crates-io</code> with a new\ndependency. This will effectively add the local checked out version of <code class=\"hljs\">uuid</code> to\nthe crates.io registry for our local package.</p>\n<p>Next up we need to ensure that our lock file is updated to use this new version\nof <code class=\"hljs\">uuid</code> so our package uses the locally checked out copy instead of one from\ncrates.io. The way <code class=\"hljs\">[patch]</code> works is that it’ll load the dependency at\n<code class=\"hljs\">../path/to/uuid</code> and then whenever crates.io is queried for versions of <code class=\"hljs\">uuid</code>\nit’ll <em>also</em> return the local version.</p>\n<p>This means that the version number of the local checkout is significant and will\naffect whether the patch is used. Our manifest declared <code class=\"hljs\">uuid = \"1.0\"</code> which\nmeans we’ll only resolve to <code class=\"hljs\">&gt;= 1.0.0, &lt; 2.0.0</code>, and Cargo’s greedy resolution\nalgorithm also means that we’ll resolve to the maximum version within that\nrange. Typically this doesn’t matter as the version of the git repository will\nalready be greater or match the maximum version published on crates.io, but it’s\nimportant to keep this in mind!</p>\n<p>In any case, typically all you need to do now is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling uuid v1.0.0 (.../uuid)\n   Compiling my-library v0.1.0 (.../my-library)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n</code></pre>\n<p>And that’s it! You’re now building with the local version of <code class=\"hljs\">uuid</code> (note the\npath in parentheses in the build output). If you don’t see the local path version getting\nbuilt then you may need to run <code class=\"hljs\">cargo update uuid --precise $version</code> where\n<code class=\"hljs\">$version</code> is the version of the locally checked out copy of <code class=\"hljs\">uuid</code>.</p>\n<p>Once you’ve fixed the bug you originally found the next thing you’ll want to do\nis to likely submit that as a pull request to the <code class=\"hljs\">uuid</code> crate itself. Once\nyou’ve done this then you can also update the <code class=\"hljs\">[patch]</code> section. The listing\ninside of <code class=\"hljs\">[patch]</code> is just like the <code class=\"hljs\">[dependencies]</code> section, so once your pull\nrequest is merged you could change your <code class=\"hljs\">path</code> dependency to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<h2 id=\"working-with-an-unpublished-minor-version\"><a class=\"header\" href=\"#working-with-an-unpublished-minor-version\">Working with an unpublished minor version</a></h2>\n<p>Let’s now shift gears a bit from bug fixes to adding features. While working on\n<code class=\"hljs\">my-library</code> you discover that a whole new feature is needed in the <code class=\"hljs\">uuid</code>\ncrate. You’ve implemented this feature, tested it locally above with <code class=\"hljs\">[patch]</code>,\nand submitted a pull request. Let’s go over how you continue to use and test it\nbefore it’s actually published.</p>\n<p>Let’s also say that the current version of <code class=\"hljs\">uuid</code> on crates.io is <code class=\"hljs\">1.0.0</code>, but\nsince then the master branch of the git repository has updated to <code class=\"hljs\">1.0.1</code>. This\nbranch includes your new feature you submitted previously. To use this\nrepository we’ll edit our <code class=\"hljs\">Cargo.toml</code> to look like</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-library\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0.1\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<p>Note that our local dependency on <code class=\"hljs\">uuid</code> has been updated to <code class=\"hljs\">1.0.1</code> as it’s\nwhat we’ll actually require once the crate is published. This version doesn’t\nexist on crates.io, though, so we provide it with the <code class=\"hljs\">[patch]</code> section of the\nmanifest.</p>\n<p>Now when our library is built it’ll fetch <code class=\"hljs\">uuid</code> from the git repository and\nresolve to 1.0.1 inside the repository instead of trying to download a version\nfrom crates.io. Once 1.0.1 is published on crates.io the <code class=\"hljs\">[patch]</code> section can\nbe deleted.</p>\n<p>It’s also worth noting that <code class=\"hljs\">[patch]</code> applies <em>transitively</em>. Let’s say you use\n<code class=\"hljs\">my-library</code> in a larger package, such as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-binary\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-library</span> = { git = <span class=\"hljs-string\">'https://example.com/git/my-library'</span> }\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span> }\n</code></pre>\n<p>Remember that <code class=\"hljs\">[patch]</code> is applicable <em>transitively</em> but can only be defined at\nthe <em>top level</em> so we consumers of <code class=\"hljs\">my-library</code> have to repeat the <code class=\"hljs\">[patch]</code> section\nif necessary. Here, though, the new <code class=\"hljs\">uuid</code> crate applies to <em>both</em> our dependency on\n<code class=\"hljs\">uuid</code> and the <code class=\"hljs\">my-library -&gt; uuid</code> dependency. The <code class=\"hljs\">uuid</code> crate will be resolved to\none version for this entire crate graph, 1.0.1, and it’ll be pulled from the git\nrepository.</p>\n<h3 id=\"overriding-repository-url\"><a class=\"header\" href=\"#overriding-repository-url\">Overriding repository URL</a></h3>\n<p>In case the dependency you want to override isn’t loaded from <code class=\"hljs\">crates.io</code>,\nyou’ll have to change a bit how you use <code class=\"hljs\">[patch]</code>. For example, if the\ndependency is a git dependency, you can override it to a local path with:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.\"https://github.com/your/repository\"]</span>\n<span class=\"hljs-attr\">my-library</span> = { path = <span class=\"hljs-string\">\"../my-library/path\"</span> }\n</code></pre>\n<p>And that’s it!</p>\n<h2 id=\"prepublishing-a-breaking-change\"><a class=\"header\" href=\"#prepublishing-a-breaking-change\">Prepublishing a breaking change</a></h2>\n<p>Let’s take a look at working with a new major version of a crate, typically\naccompanied with breaking changes. Sticking with our previous crates, this\nmeans that we’re going to be creating version 2.0.0 of the <code class=\"hljs\">uuid</code> crate. After\nwe’ve submitted all changes upstream we can update our manifest for\n<code class=\"hljs\">my-library</code> to look like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"2.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">\"https://github.com/uuid-rs/uuid.git\"</span>, branch = <span class=\"hljs-string\">\"2.0.0\"</span> }\n</code></pre>\n<p>And that’s it! Like with the previous example the 2.0.0 version doesn’t actually\nexist on crates.io but we can still put it in through a git dependency through\nthe usage of the <code class=\"hljs\">[patch]</code> section. As a thought exercise let’s take another\nlook at the <code class=\"hljs\">my-binary</code> manifest from above again as well:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-binary\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">my-library</span> = { git = <span class=\"hljs-string\">'https://example.com/git/my-library'</span> }\n<span class=\"hljs-attr\">uuid</span> = <span class=\"hljs-string\">\"1.0\"</span>\n\n<span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">uuid</span> = { git = <span class=\"hljs-string\">'https://github.com/uuid-rs/uuid.git'</span>, branch = <span class=\"hljs-string\">'2.0.0'</span> }\n</code></pre>\n<p>Note that this will actually resolve to two versions of the <code class=\"hljs\">uuid</code> crate. The\n<code class=\"hljs\">my-binary</code> crate will continue to use the 1.x.y series of the <code class=\"hljs\">uuid</code> crate but\nthe <code class=\"hljs\">my-library</code> crate will use the <code class=\"hljs\">2.0.0</code> version of <code class=\"hljs\">uuid</code>. This will allow you\nto gradually roll out breaking changes to a crate through a dependency graph\nwithout being forced to update everything all at once.</p>\n<h2 id=\"using-patch-with-multiple-versions\"><a class=\"header\" href=\"#using-patch-with-multiple-versions\">Using <code>[patch]</code> with multiple versions</a></h2>\n<p>You can patch in multiple versions of the same crate with the <code class=\"hljs\">package</code> key\nused to rename dependencies. For example let’s say that the <code class=\"hljs\">serde</code> crate has\na bugfix that we’d like to use to its <code class=\"hljs\">1.*</code> series but we’d also like to\nprototype using a <code class=\"hljs\">2.0.0</code> version of serde we have in our git repository. To\nconfigure this we’d do:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">serde</span> = { git = <span class=\"hljs-string\">'https://github.com/serde-rs/serde.git'</span> }\n<span class=\"hljs-attr\">serde2</span> = { git = <span class=\"hljs-string\">'https://github.com/example/serde.git'</span>, package = <span class=\"hljs-string\">'serde'</span>, branch = <span class=\"hljs-string\">'v2'</span> }\n</code></pre>\n<p>The first <code class=\"hljs\">serde = ...</code> directive indicates that serde <code class=\"hljs\">1.*</code> should be used\nfrom the git repository (pulling in the bugfix we need) and the second <code class=\"hljs\">serde2 = ...</code> directive indicates that the <code class=\"hljs\">serde</code> package should also be pulled from\nthe <code class=\"hljs\">v2</code> branch of <code class=\"hljs\">https://github.com/example/serde</code>. We’re assuming here\nthat <code class=\"hljs\">Cargo.toml</code> on that branch mentions version <code class=\"hljs\">2.0.0</code>.</p>\n<p>Note that when using the <code class=\"hljs\">package</code> key the <code class=\"hljs\">serde2</code> identifier here is actually\nignored. We simply need a unique name which doesn’t conflict with other patched\ncrates.</p>\n<h2 id=\"the-patch-section\"><a class=\"header\" href=\"#the-patch-section\">The <code>[patch]</code> section</a></h2>\n<p>The <code class=\"hljs\">[patch]</code> section of <code class=\"hljs\">Cargo.toml</code> can be used to override dependencies\nwith other copies. The syntax is similar to the\n<a href=\"specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> section:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[patch.crates-io]</span>\n<span class=\"hljs-attr\">foo</span> = { git = <span class=\"hljs-string\">'https://github.com/example/foo.git'</span> }\n<span class=\"hljs-attr\">bar</span> = { path = <span class=\"hljs-string\">'my/local/bar'</span> }\n\n<span class=\"hljs-section\">[dependencies.baz]</span>\n<span class=\"hljs-attr\">git</span> = <span class=\"hljs-string\">'https://github.com/example/baz.git'</span>\n\n<span class=\"hljs-section\">[patch.'https://github.com/example/baz']</span>\n<span class=\"hljs-attr\">baz</span> = { git = <span class=\"hljs-string\">'https://github.com/example/patched-baz.git'</span>, branch = <span class=\"hljs-string\">'my-branch'</span> }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">[patch]</code> table can also be specified as a <a href=\"config.html\">configuration\noption</a>, such as in a <code class=\"hljs\">.cargo/config.toml</code> file or a CLI option\nlike <code class=\"hljs\">--config 'patch.crates-io.rand.path=\"rand\"'</code>. This can be useful for\nlocal-only changes that you don’t want to commit, or temporarily testing a\npatch.</p>\n</blockquote>\n<p>The <code class=\"hljs\">[patch]</code> table is made of dependency-like sub-tables. Each key after\n<code class=\"hljs\">[patch]</code> is a URL of the source that is being patched, or the name of a\nregistry. The name <code class=\"hljs\">crates-io</code> may be used to override the default registry\n<a href=\"https://crates.io/\">crates.io</a>. The first <code class=\"hljs\">[patch]</code> in the example above demonstrates overriding\n<a href=\"https://crates.io/\">crates.io</a>, and the second <code class=\"hljs\">[patch]</code> demonstrates overriding a git source.</p>\n<p>Each entry in these tables is a normal dependency specification, the same as\nfound in the <code class=\"hljs\">[dependencies]</code> section of the manifest. The dependencies listed\nin the <code class=\"hljs\">[patch]</code> section are resolved and used to patch the source at the\nURL specified. The above manifest snippet patches the <code class=\"hljs\">crates-io</code> source (e.g.\ncrates.io itself) with the <code class=\"hljs\">foo</code> crate and <code class=\"hljs\">bar</code> crate. It also\npatches the <code class=\"hljs\">https://github.com/example/baz</code> source with a <code class=\"hljs\">my-branch</code> that\ncomes from elsewhere.</p>\n<p>Sources can be patched with versions of crates that do not exist, and they can\nalso be patched with versions of crates that already exist. If a source is\npatched with a crate version that already exists in the source, then the\nsource’s original crate is replaced.</p>\n<p>Cargo only looks at the patch settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Patch settings defined in dependencies will be\nignored.</p>\n<h2 id=\"the-replace-section\"><a class=\"header\" href=\"#the-replace-section\">The <code>[replace]</code> section</a></h2>\n<blockquote>\n<p><strong>Note</strong>: <code class=\"hljs\">[replace]</code> is deprecated. You should use the\n<a href=\"#the-patch-section\"><code class=\"hljs\">[patch]</code></a> table instead.</p>\n</blockquote>\n<p>This section of Cargo.toml can be used to override dependencies with other\ncopies. The syntax is similar to the <code class=\"hljs\">[dependencies]</code> section:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[replace]</span>\n<span class=\"hljs-attr\">\"foo:0.1.0\"</span> = { git = <span class=\"hljs-string\">'https://github.com/example/foo.git'</span> }\n<span class=\"hljs-attr\">\"bar:1.0.2\"</span> = { path = <span class=\"hljs-string\">'my/local/bar'</span> }\n</code></pre>\n<p>Each key in the <code class=\"hljs\">[replace]</code> table is a <a href=\"pkgid-spec.html\">package ID\nspecification</a>, which allows arbitrarily choosing a node in the\ndependency graph to override (the 3-part version number is required). The\nvalue of each key is the same as the <code class=\"hljs\">[dependencies]</code> syntax for specifying\ndependencies, except that you can’t specify features. Note that when a crate\nis overridden the copy it’s overridden with must have both the same name and\nversion, but it can come from a different source (e.g., git or a local path).</p>\n<p>Cargo only looks at the replace settings in the <code class=\"hljs\">Cargo.toml</code> manifest at the\nroot of the workspace. Replace settings defined in dependencies will be\nignored.</p>\n<h2 id=\"paths-overrides\"><a class=\"header\" href=\"#paths-overrides\"><code>paths</code> overrides</a></h2>\n<p>Sometimes you’re only temporarily working on a crate and you don’t want to have\nto modify <code class=\"hljs\">Cargo.toml</code> like with the <code class=\"hljs\">[patch]</code> section above. For this use\ncase Cargo offers a much more limited version of overrides called <strong>path\noverrides</strong>.</p>\n<p>Path overrides are specified through <a href=\"config.html\"><code class=\"hljs\">.cargo/config.toml</code></a> instead of\n<code class=\"hljs\">Cargo.toml</code>. Inside of <code class=\"hljs\">.cargo/config.toml</code> you’ll specify a key called <code class=\"hljs\">paths</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">paths</span> = [<span class=\"hljs-string\">\"/path/to/uuid\"</span>]\n</code></pre>\n<p>This array should be filled with directories that contain a <code class=\"hljs\">Cargo.toml</code>. In\nthis instance, we’re just adding <code class=\"hljs\">uuid</code>, so it will be the only one that’s\noverridden. This path can be either absolute or relative to the directory that\ncontains the <code class=\"hljs\">.cargo</code> folder.</p>\n<p>Path overrides are more restricted than the <code class=\"hljs\">[patch]</code> section, however, in\nthat they cannot change the structure of the dependency graph. When a\npath replacement is used then the previous set of dependencies\nmust all match exactly to the new <code class=\"hljs\">Cargo.toml</code> specification. For example this\nmeans that path overrides cannot be used to test out adding a dependency to a\ncrate, instead <code class=\"hljs\">[patch]</code> must be used in that situation. As a result usage of a\npath override is typically isolated to quick bug fixes rather than larger\nchanges.</p>\n<blockquote>\n<p><strong>Note</strong>: using a local configuration to override paths will only work for\ncrates that have been published to <a href=\"https://crates.io/\">crates.io</a>. You cannot use this feature\nto tell Cargo how to find local unpublished crates.</p>\n</blockquote>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/specifying-dependencies.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/manifest.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/specifying-dependencies.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/manifest.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:20.928Z"
}