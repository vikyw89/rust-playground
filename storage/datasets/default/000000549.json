{
	"title": "DoubleEndedSearcher in std::str::pattern - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/pattern/trait.DoubleEndedSearcher.html",
	"markdown": "# DoubleEndedSearcher in std::str::pattern - Rust\n\n```\npub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> { }\n```\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nExpand description\n\nA marker trait to express that a [`ReverseSearcher`](trait.ReverseSearcher.html \"trait std::str::pattern::ReverseSearcher\") can be used for a [`DoubleEndedIterator`](../../iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\") implementation.\n\nFor this, the impl of [`Searcher`](trait.Searcher.html \"trait std::str::pattern::Searcher\") and [`ReverseSearcher`](trait.ReverseSearcher.html \"trait std::str::pattern::ReverseSearcher\") need to follow these conditions:\n\n-   All results of `next()` need to be identical to the results of `next_back()` in reverse order.\n-   `next()` and `next_back()` need to behave as the two ends of a range of values, that is they can not “walk past each other”.\n\n## [§](#examples)Examples\n\n`char::Searcher` is a `DoubleEndedSearcher` because searching for a [`char`](../../primitive.char.html \"primitive char\") only requires looking at one at a time, which behaves the same from both ends.\n\n`(&str)::Searcher` is not a `DoubleEndedSearcher` because the pattern `\"aa\"` in the haystack `\"aaa\"` matches as either `\"[aa]a\"` or `\"a[aa]\"`, depending on which side it is searched.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.\"><title>DoubleEndedSearcher in std::str::pattern - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">DoubleEndedSearcher</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">DoubleEndedSearcher</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::str::pattern</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CharArrayRefSearcher.html\">CharArrayRefSearcher</a></li><li><a href=\"struct.CharArraySearcher.html\">CharArraySearcher</a></li><li><a href=\"struct.CharPredicateSearcher.html\">CharPredicateSearcher</a></li><li><a href=\"struct.CharSearcher.html\">CharSearcher</a></li><li><a href=\"struct.CharSliceSearcher.html\">CharSliceSearcher</a></li><li><a href=\"struct.StrSearcher.html\">StrSearcher</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.SearchStep.html\">SearchStep</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedSearcher.html\">DoubleEndedSearcher</a></li><li><a href=\"trait.Pattern.html\">Pattern</a></li><li><a href=\"trait.ReverseSearcher.html\">ReverseSearcher</a></li><li><a href=\"trait.Searcher.html\">Searcher</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">str</a>::<wbr><a href=\"index.html\">pattern</a>::<wbr><a class=\"trait\" href=\"#\">DoubleEndedSearcher</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#346\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait DoubleEndedSearcher&lt;'a&gt;: <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; { }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A marker trait to express that a <a href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\"><code>ReverseSearcher</code></a>\ncan be used for a <a href=\"../../iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\"><code>DoubleEndedIterator</code></a> implementation.</p>\n<p>For this, the impl of <a href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\"><code>Searcher</code></a> and <a href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\"><code>ReverseSearcher</code></a> need\nto follow these conditions:</p>\n<ul>\n<li>All results of <code>next()</code> need to be identical\nto the results of <code>next_back()</code> in reverse order.</li>\n<li><code>next()</code> and <code>next_back()</code> need to behave as\nthe two ends of a range of values, that is they\ncan not “walk past each other”.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><code>char::Searcher</code> is a <code>DoubleEndedSearcher</code> because searching for a\n<a href=\"../../primitive.char.html\" title=\"primitive char\"><code>char</code></a> only requires looking at one at a time, which behaves the same\nfrom both ends.</p>\n<p><code>(&amp;str)::Searcher</code> is not a <code>DoubleEndedSearcher</code> because\nthe pattern <code>\"aa\"</code> in the haystack <code>\"aaa\"</code> matches as either\n<code>\"[aa]a\"</code> or <code>\"a[aa]\"</code>, depending on which side it is searched.</p>\n</div></details><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-DoubleEndedSearcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#537\">source</a><a href=\"#impl-DoubleEndedSearcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a>&lt;'a&gt;</h3></section><section id=\"impl-DoubleEndedSearcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#863\">source</a><a href=\"#impl-DoubleEndedSearcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSliceSearcher.html\" title=\"struct std::str::pattern::CharSliceSearcher\">CharSliceSearcher</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-DoubleEndedSearcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#843\">source</a><a href=\"#impl-DoubleEndedSearcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h3></section><section id=\"impl-DoubleEndedSearcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#912\">source</a><a href=\"#impl-DoubleEndedSearcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-DoubleEndedSearcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#821\">source</a><a href=\"#impl-DoubleEndedSearcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.DoubleEndedSearcher.html\" title=\"trait std::str::pattern::DoubleEndedSearcher\">DoubleEndedSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h3></section></div><script src=\"../../../trait.impl/core/str/pattern/trait.DoubleEndedSearcher.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:11.598Z"
}