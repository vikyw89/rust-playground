{
	"title": "LazyCell in std::cell - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cell/struct.LazyCell.html",
	"markdown": "# LazyCell in std::cell - Rust\n\n## Struct [std](../index.html)::[cell](index.html)::[LazyCell](#)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#38) ·\n\n```\npub struct LazyCell<T, F = fn() -> T> { /* private fields */ }\n```\n\nExpand description\n\nA value which is initialized on the first access.\n\nFor a thread-safe version of this struct, see [`std::sync::LazyLock`](../../std/sync/struct.LazyLock.html).\n\n## [§](#examples)Examples\n\n```\nuse std::cell::LazyCell;\n\nlet lazy: LazyCell<i32> = LazyCell::new(|| {\n    println!(\"initializing\");\n    92\n});\nprintln!(\"ready\");\nprintln!(\"{}\", *lazy);\nprintln!(\"{}\", *lazy);\n\n// Prints:\n//   ready\n//   initializing\n//   92\n//   92\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+lazy:+LazyCell%3Ci32%3E+=+LazyCell::new(%7C%7C+%7B%0A++++++++println!(%22initializing%22);%0A++++++++92%0A++++%7D);%0A++++println!(%22ready%22);%0A++++println!(%22%7B%7D%22,+*lazy);%0A++++println!(%22%7B%7D%22,+*lazy);%0A++++%0A++++//+Prints:%0A++++//+++ready%0A++++//+++initializing%0A++++//+++92%0A++++//+++92%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#42)[§](#impl-LazyCell%3CT,+F%3E)\n\n1.80.0 (const: 1.80.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#59)\n\nCreates a new lazy value with the given initializing function.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cell::LazyCell;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = LazyCell::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+hello+=+%22Hello,+World!%22.to_string();%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+hello.to_uppercase());%0A++++%0A++++assert_eq!(%26*lazy,+%22HELLO,+WORLD!%22);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#82)\n\n🔬This is a nightly-only experimental API. (`lazy_cell_consume` [#125623](https://github.com/rust-lang/rust/issues/125623))\n\nConsumes this `LazyCell` returning the stored value.\n\nReturns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n\n##### [§](#examples-2)Examples\n\n```\n#![feature(lazy_cell_consume)]\n\nuse std::cell::LazyCell;\n\nlet hello = \"Hello, World!\".to_string();\n\nlet lazy = LazyCell::new(|| hello.to_uppercase());\n\nassert_eq!(&*lazy, \"HELLO, WORLD!\");\nassert_eq!(LazyCell::into_inner(lazy).ok(), Some(\"HELLO, WORLD!\".to_string()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(lazy_cell_consume)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+hello+=+%22Hello,+World!%22.to_string();%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+hello.to_uppercase());%0A++++%0A++++assert_eq!(%26*lazy,+%22HELLO,+WORLD!%22);%0A++++assert_eq!(LazyCell::into_inner(lazy).ok(),+Some(%22HELLO,+WORLD!%22.to_string()));%0A%7D&version=nightly&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#107)\n\nForces the evaluation of this lazy value and returns a reference to the result.\n\nThis is equivalent to the `Deref` impl, but is explicit.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::cell::LazyCell;\n\nlet lazy = LazyCell::new(|| 92);\n\nassert_eq!(LazyCell::force(&lazy), &92);\nassert_eq!(&*lazy, &92);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+92);%0A++++%0A++++assert_eq!(LazyCell::force(%26lazy),+%2692);%0A++++assert_eq!(%26*lazy,+%2692);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#189)[§](#impl-Debug-for-LazyCell%3CT,+F%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#180)[§](#impl-Default-for-LazyCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#183)[§](#method.default)\n\nCreates a new lazy value using `Default` as the initializing function.\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#171)[§](#impl-Deref-for-LazyCell%3CT,+F%3E)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#174)[§](#method.deref)\n\nDereferences the value.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A value which is initialized on the first access.\"><title>LazyCell in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">LazyCell</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">LazyCell</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.force\">force</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-LazyCell%3CT,+F%3E\">Debug</a></li><li><a href=\"#impl-Default-for-LazyCell%3CT%3E\">Default</a></li><li><a href=\"#impl-Deref-for-LazyCell%3CT,+F%3E\">Deref</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-LazyCell%3CT,+F%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-LazyCell%3CT,+F%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Sync-for-LazyCell%3CT,+F%3E\">!Sync</a></li><li><a href=\"#impl-Send-for-LazyCell%3CT,+F%3E\">Send</a></li><li><a href=\"#impl-Unpin-for-LazyCell%3CT,+F%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-LazyCell%3CT,+F%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">LazyCell</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#38\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct LazyCell&lt;T, F = <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>() -&gt; T&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A value which is initialized on the first access.</p>\n<p>For a thread-safe version of this struct, see <a href=\"../../std/sync/struct.LazyLock.html\"><code>std::sync::LazyLock</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::LazyCell;\n\n<span class=\"kw\">let </span>lazy: LazyCell&lt;i32&gt; = LazyCell::new(|| {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"initializing\"</span>);\n    <span class=\"number\">92\n</span>});\n<span class=\"macro\">println!</span>(<span class=\"string\">\"ready\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>lazy);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, <span class=\"kw-2\">*</span>lazy);\n\n<span class=\"comment\">// Prints:\n//   ready\n//   initializing\n//   92\n//   92</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+lazy:+LazyCell%3Ci32%3E+=+LazyCell::new(%7C%7C+%7B%0A++++++++println!(%22initializing%22);%0A++++++++92%0A++++%7D);%0A++++println!(%22ready%22);%0A++++println!(%22%7B%7D%22,+*lazy);%0A++++println!(%22%7B%7D%22,+*lazy);%0A++++%0A++++//+Prints:%0A++++//+++ready%0A++++//+++initializing%0A++++//+++92%0A++++//+++92%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LazyCell%3CT,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#42\">source</a><a href=\"#impl-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#59\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(f: F) -&gt; <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new lazy value with the given initializing function.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::LazyCell;\n\n<span class=\"kw\">let </span>hello = <span class=\"string\">\"Hello, World!\"</span>.to_string();\n\n<span class=\"kw\">let </span>lazy = LazyCell::new(|| hello.to_uppercase());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"string\">\"HELLO, WORLD!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+hello+=+%22Hello,+World!%22.to_string();%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+hello.to_uppercase());%0A++++%0A++++assert_eq!(%26*lazy,+%22HELLO,+WORLD!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#82\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(this: <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, F&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>lazy_cell_consume</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/125623\">#125623</a>)</span></div></span></summary><div class=\"docblock\"><p>Consumes this <code>LazyCell</code> returning the stored value.</p>\n<p>Returns <code>Ok(value)</code> if <code>Lazy</code> is initialized and <code>Err(f)</code> otherwise.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(lazy_cell_consume)]\n\n</span><span class=\"kw\">use </span>std::cell::LazyCell;\n\n<span class=\"kw\">let </span>hello = <span class=\"string\">\"Hello, World!\"</span>.to_string();\n\n<span class=\"kw\">let </span>lazy = LazyCell::new(|| hello.to_uppercase());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"string\">\"HELLO, WORLD!\"</span>);\n<span class=\"macro\">assert_eq!</span>(LazyCell::into_inner(lazy).ok(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"HELLO, WORLD!\"</span>.to_string()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(lazy_cell_consume)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+hello+=+%22Hello,+World!%22.to_string();%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+hello.to_uppercase());%0A++++%0A++++assert_eq!(%26*lazy,+%22HELLO,+WORLD!%22);%0A++++assert_eq!(LazyCell::into_inner(lazy).ok(),+Some(%22HELLO,+WORLD!%22.to_string()));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.force\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#107\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.force\" class=\"fn\">force</a>(this: &amp;<a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Forces the evaluation of this lazy value and returns a reference to\nthe result.</p>\n<p>This is equivalent to the <code>Deref</code> impl, but is explicit.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::LazyCell;\n\n<span class=\"kw\">let </span>lazy = LazyCell::new(|| <span class=\"number\">92</span>);\n\n<span class=\"macro\">assert_eq!</span>(LazyCell::force(<span class=\"kw-2\">&amp;</span>lazy), <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>lazy, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::LazyCell;%0A++++%0A++++let+lazy+=+LazyCell::new(%7C%7C+92);%0A++++%0A++++assert_eq!(LazyCell::force(%26lazy),+%2692);%0A++++assert_eq!(%26*lazy,+%2692);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-LazyCell%3CT,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#189\">source</a></span><a href=\"#impl-Debug-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#190\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-LazyCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#180\">source</a></span><a href=\"#impl-Default-for-LazyCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#183\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new lazy value using <code>Default</code> as the initializing function.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-LazyCell%3CT,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#171\">source</a></span><a href=\"#impl-Deref-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell/lazy.rs.html#174\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F = <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>() -&gt; T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F = <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>() -&gt; T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;</h3></section><section id=\"impl-Send-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-Send-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-Sync-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F = <a class=\"primitive\" href=\"../primitive.fn.html\">fn</a>() -&gt; T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;</h3></section><section id=\"impl-Unpin-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-LazyCell%3CT,+F%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-LazyCell%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.LazyCell.html\" title=\"struct std::cell::LazyCell\">LazyCell</a>&lt;T, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:49.620Z"
}