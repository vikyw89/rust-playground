{
	"title": "CommandExt in std::os::unix::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/process/trait.CommandExt.html",
	"markdown": "# CommandExt in std::os::unix::process - Rust\n\n```\npub trait CommandExt: Sealed {\n    // Required methods\n    fn uid(&mut self, id: u32) -> &mut Command;\n    fn gid(&mut self, id: u32) -> &mut Command;\n    fn groups(&mut self, groups: &[u32]) -> &mut Command;\n    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut Command\n       where F: FnMut() -> Result<()> + Send + Sync + 'static;\n    fn exec(&mut self) -> Error;\n    fn arg0<S>(&mut self, arg: S) -> &mut Command\n       where S: AsRef<OsStr>;\n    fn process_group(&mut self, pgroup: i32) -> &mut Command;\n\n    // Provided method\n    fn before_exec<F>(&mut self, f: F) -> &mut Command\n       where F: FnMut() -> Result<()> + Send + Sync + 'static { ... }\n}\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nUnix-specific extensions to the [`process::Command`](../../../process/struct.Command.html \"struct std::process::Command\") builder.\n\nThis trait is sealed: it cannot be implemented outside the standard library. This is so that future additional methods are not breaking changes.\n\n1.0.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#50)\n\nSets the child process‚Äôs user ID. This translates to a `setuid` call in the child process. Failure in the `setuid` call will cause the spawn to fail.\n\n##### [¬ß](#notes)Notes\n\nThis will also trigger a call to `setgroups(0, NULL)` in the child process if no groups have been specified. This removes supplementary groups that might have given the child unwanted permissions.\n\n1.0.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#55)\n\nSimilar to `uid`, but sets the group ID of the child process. This has the same semantics as the `uid` field.\n\n[source](about:blank/src/std/os/unix/process.rs.html#60)\n\nüî¨This is a nightly-only experimental API. (`setgroups`¬†[#90747](https://github.com/rust-lang/rust/issues/90747))\n\nSets the supplementary group IDs for the calling process. Translates to a `setgroups` call in the child process.\n\n1.34.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#107-109)\n\nSchedules a closure to be run just before the `exec` function is invoked.\n\nThe closure is allowed to return an I/O error whose OS error code will be communicated back to the parent and returned as an error from when the spawn was requested.\n\nMultiple closures can be registered and they will be called in order of their registration. If a closure returns `Err` then no further closures will be called and the spawn operation will immediately return with a failure.\n\n##### [¬ß](#notes-and-safety)Notes and Safety\n\nThis closure will be run in the context of the child process after a `fork`. This primarily means that any modifications made to memory on behalf of this closure will **not** be visible to the parent process. This is often a very constrained environment where normal operations like `malloc`, accessing environment variables through [`std::env`](../../../env/index.html \"mod std::env\") or acquiring a mutex are not guaranteed to work (due to other threads perhaps still running when the `fork` was run).\n\nFor further details refer to the [POSIX fork() specification](https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html) and the equivalent documentation for any targeted platform, especially the requirements around _async-signal-safety_.\n\nThis also means that all resources such as file descriptors and memory-mapped regions got duplicated. It is your responsibility to make sure that the closure does not violate library invariants by making invalid use of these duplicates.\n\nPanicking in the closure is safe only if all the format arguments for the panic message can be safely formatted; this is because although `Command` calls [`std::panic::always_abort`](../../../panic/fn.always_abort.html \"fn std::panic::always_abort\") before calling the pre\\_exec hook, panic will still try to format the panic message.\n\nWhen this closure is run, aspects such as the stdio file descriptors and working directory have successfully been changed, so output to these locations might not appear where intended.\n\n1.9.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#155)\n\nPerforms all the required setup by this `Command`, followed by calling the `execvp` syscall.\n\nOn success this function will not return, and otherwise it will return an error indicating why the exec (or another part of the setup of the `Command`) failed.\n\n`exec` not returning has the same implications as calling [`process::exit`](../../../process/fn.exit.html \"fn std::process::exit\") ‚Äì no destructors on the current stack or any other thread‚Äôs stack will be run. Therefore, it is recommended to only call `exec` at a point where it is fine to not run any destructors. Note, that the `execvp` syscall independently guarantees that all memory is freed and all file descriptors with the `CLOEXEC` option (set by default on all file descriptors opened by the standard library) are closed.\n\nThis function, unlike `spawn`, will **not** `fork` the process to create a new child. Like spawn, however, the default behavior for the stdio descriptors will be to inherited from the current process.\n\n##### [¬ß](#notes-1)Notes\n\nThe process may be in a ‚Äúbroken state‚Äù if this function returns in error. For example the working directory, environment variables, signal handling settings, various user/group information, or aspects of stdio file descriptors may have changed. If a ‚Äútransactional spawn‚Äù is required to gracefully handle errors it is recommended to use the cross-platform `spawn` instead.\n\n1.45.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#162-164)\n\nSet executable argument\n\nSet the first process argument, `argv[0]`, to something other than the default executable path.\n\n1.64.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#196)\n\nSets the process group ID (PGID) of the child process. Equivalent to a `setpgid` call in the child process, but may be more efficient.\n\nProcess groups determine which processes receive signals.\n\n##### [¬ß](#examples)Examples\n\nPressing Ctrl-C in a terminal will send SIGINT to all processes in the current foreground process group. By spawning the `sleep` subprocess in a new process group, it will not receive SIGINT from the terminal.\n\nThe parent process could install a signal handler and manage the subprocess on its own terms.\n\nA process group ID of 0 will use the process ID as the PGID.\n\n```\nuse std::process::Command;\nuse std::os::unix::process::CommandExt;\n\nCommand::new(\"sleep\")\n    .arg(\"10\")\n    .process_group(0)\n    .spawn()?\n    .wait()?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::process::Command;%0A++++use+std::os::unix::process::CommandExt;%0A++++%0A++++Command::new(%22sleep%22)%0A++++++++.arg(%2210%22)%0A++++++++.process_group(0)%0A++++++++.spawn()?%0A++++++++.wait()?;%0A++++%0A++++Ok::%3C_,+Box%3Cdyn+std::error::Error%3E%3E(())%0A%7D+_inner().unwrap()+%7D&edition=2021)\n\n1.15.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#120-125)\n\nüëéDeprecated since 1.37.0: should be unsafe, use `pre_exec` instead\n\nSchedules a closure to be run just before the `exec` function is invoked.\n\nThis method is stable and usable, but it should be unsafe. To fix that, it got deprecated in favor of the unsafe [`pre_exec`](about:blank/trait.CommandExt.html#tymethod.pre_exec \"method std::os::unix::process::CommandExt::pre_exec\").\n\n1.0.0 ¬∑ [source](about:blank/src/std/os/unix/process.rs.html#200-242)[¬ß](#impl-CommandExt-for-Command)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Unix-specific extensions to the `process::Command` builder.\"><title>CommandExt in std::os::unix::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CommandExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CommandExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.arg0\">arg0</a></li><li><a href=\"#tymethod.exec\">exec</a></li><li><a href=\"#tymethod.gid\">gid</a></li><li><a href=\"#tymethod.groups\">groups</a></li><li><a href=\"#tymethod.pre_exec\">pre_exec</a></li><li><a href=\"#tymethod.process_group\">process_group</a></li><li><a href=\"#tymethod.uid\">uid</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.before_exec\">before_exec</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::unix::process</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.CommandExt.html\">CommandExt</a></li><li><a href=\"trait.ExitStatusExt.html\">ExitStatusExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.parent_id.html\">parent_id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"trait\" href=\"#\">CommandExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#38-197\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait CommandExt: Sealed {\n    // Required methods\n    fn <a href=\"#tymethod.uid\" class=\"fn\">uid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.gid\" class=\"fn\">gid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.groups\" class=\"fn\">groups</a>(&amp;mut self, groups: &amp;[<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>]) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n<span class=\"item-spacer\"></span>    unsafe fn <a href=\"#tymethod.pre_exec\" class=\"fn\">pre_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>\n       <span class=\"where\">where F: <a class=\"trait\" href=\"../../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static</span>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.exec\" class=\"fn\">exec</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../../../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.arg0\" class=\"fn\">arg0</a>&lt;S&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>\n       <span class=\"where\">where S: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</span>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.process_group\" class=\"fn\">process_group</a>(&amp;mut self, pgroup: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>;\n\n    // Provided method\n    fn <a href=\"#method.before_exec\" class=\"fn\">before_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a>\n       <span class=\"where\">where F: <a class=\"trait\" href=\"../../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static</span> { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Unix-specific extensions to the <a href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\"><code>process::Command</code></a> builder.</p>\n<p>This trait is sealed: it cannot be implemented outside the standard library.\nThis is so that future additional methods are not breaking changes.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.uid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#50\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.uid\" class=\"fn\">uid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Sets the child process‚Äôs user ID. This translates to a\n<code>setuid</code> call in the child process. Failure in the <code>setuid</code>\ncall will cause the spawn to fail.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">¬ß</a>Notes</h5>\n<p>This will also trigger a call to <code>setgroups(0, NULL)</code> in the child\nprocess if no groups have been specified.\nThis removes supplementary groups that might have given the child\nunwanted permissions.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.gid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#55\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.gid\" class=\"fn\">gid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Similar to <code>uid</code>, but sets the group ID of the child process. This has\nthe same semantics as the <code>uid</code> field.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.groups\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/process.rs.html#60\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.groups\" class=\"fn\">groups</a>(&amp;mut self, groups: &amp;[<a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>]) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>setgroups</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90747\">#90747</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the supplementary group IDs for the calling process. Translates to\na <code>setgroups</code> call in the child process.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.pre_exec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#107-109\">source</a></span><h4 class=\"code-header\">unsafe fn <a href=\"#tymethod.pre_exec\" class=\"fn\">pre_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Schedules a closure to be run just before the <code>exec</code> function is\ninvoked.</p>\n<p>The closure is allowed to return an I/O error whose OS error code will\nbe communicated back to the parent and returned as an error from when\nthe spawn was requested.</p>\n<p>Multiple closures can be registered and they will be called in order of\ntheir registration. If a closure returns <code>Err</code> then no further closures\nwill be called and the spawn operation will immediately return with a\nfailure.</p>\n<h5 id=\"notes-and-safety\"><a class=\"doc-anchor\" href=\"#notes-and-safety\">¬ß</a>Notes and Safety</h5>\n<p>This closure will be run in the context of the child process after a\n<code>fork</code>. This primarily means that any modifications made to memory on\nbehalf of this closure will <strong>not</strong> be visible to the parent process.\nThis is often a very constrained environment where normal operations\nlike <code>malloc</code>, accessing environment variables through <a href=\"../../../env/index.html\" title=\"mod std::env\"><code>std::env</code></a>\nor acquiring a mutex are not guaranteed to work (due to\nother threads perhaps still running when the <code>fork</code> was run).</p>\n<p>For further details refer to the <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html\">POSIX fork() specification</a>\nand the equivalent documentation for any targeted\nplatform, especially the requirements around <em>async-signal-safety</em>.</p>\n<p>This also means that all resources such as file descriptors and\nmemory-mapped regions got duplicated. It is your responsibility to make\nsure that the closure does not violate library invariants by making\ninvalid use of these duplicates.</p>\n<p>Panicking in the closure is safe only if all the format arguments for the\npanic message can be safely formatted; this is because although\n<code>Command</code> calls <a href=\"../../../panic/fn.always_abort.html\" title=\"fn std::panic::always_abort\"><code>std::panic::always_abort</code></a>\nbefore calling the pre_exec hook, panic will still try to format the\npanic message.</p>\n<p>When this closure is run, aspects such as the stdio file descriptors and\nworking directory have successfully been changed, so output to these\nlocations might not appear where intended.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.exec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#155\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.exec\" class=\"fn\">exec</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../../../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Performs all the required setup by this <code>Command</code>, followed by calling\nthe <code>execvp</code> syscall.</p>\n<p>On success this function will not return, and otherwise it will return\nan error indicating why the exec (or another part of the setup of the\n<code>Command</code>) failed.</p>\n<p><code>exec</code> not returning has the same implications as calling\n<a href=\"../../../process/fn.exit.html\" title=\"fn std::process::exit\"><code>process::exit</code></a> ‚Äì no destructors on the current stack or any other\nthread‚Äôs stack will be run. Therefore, it is recommended to only call\n<code>exec</code> at a point where it is fine to not run any destructors. Note,\nthat the <code>execvp</code> syscall independently guarantees that all memory is\nfreed and all file descriptors with the <code>CLOEXEC</code> option (set by default\non all file descriptors opened by the standard library) are closed.</p>\n<p>This function, unlike <code>spawn</code>, will <strong>not</strong> <code>fork</code> the process to create\na new child. Like spawn, however, the default behavior for the stdio\ndescriptors will be to inherited from the current process.</p>\n<h5 id=\"notes-1\"><a class=\"doc-anchor\" href=\"#notes-1\">¬ß</a>Notes</h5>\n<p>The process may be in a ‚Äúbroken state‚Äù if this function returns in\nerror. For example the working directory, environment variables, signal\nhandling settings, various user/group information, or aspects of stdio\nfile descriptors may have changed. If a ‚Äútransactional spawn‚Äù is\nrequired to gracefully handle errors it is recommended to use the\ncross-platform <code>spawn</code> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.arg0\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#162-164\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.arg0\" class=\"fn\">arg0</a>&lt;S&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Set executable argument</p>\n<p>Set the first process argument, <code>argv[0]</code>, to something other than the\ndefault executable path.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.process_group\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#196\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.process_group\" class=\"fn\">process_group</a>(&amp;mut self, pgroup: <a class=\"primitive\" href=\"../../../primitive.i32.html\">i32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Sets the process group ID (PGID) of the child process. Equivalent to a\n<code>setpgid</code> call in the child process, but may be more efficient.</p>\n<p>Process groups determine which processes receive signals.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<p>Pressing Ctrl-C in a terminal will send SIGINT to all processes in\nthe current foreground process group. By spawning the <code>sleep</code>\nsubprocess in a new process group, it will not receive SIGINT from the\nterminal.</p>\n<p>The parent process could install a signal handler and manage the\nsubprocess on its own terms.</p>\n<p>A process group ID of 0 will use the process ID as the PGID.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n<span class=\"kw\">use </span>std::os::unix::process::CommandExt;\n\nCommand::new(<span class=\"string\">\"sleep\"</span>)\n    .arg(<span class=\"string\">\"10\"</span>)\n    .process_group(<span class=\"number\">0</span>)\n    .spawn()<span class=\"question-mark\">?\n    </span>.wait()<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::process::Command;%0A++++use+std::os::unix::process::CommandExt;%0A++++%0A++++Command::new(%22sleep%22)%0A++++++++.arg(%2210%22)%0A++++++++.process_group(0)%0A++++++++.spawn()?%0A++++++++.wait()?;%0A++++%0A++++Ok::%3C_,+Box%3Cdyn+std::error::Error%3E%3E(())%0A%7D+_inner().unwrap()+%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.before_exec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#120-125\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.before_exec\" class=\"fn\">before_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.37.0: should be unsafe, use <code>pre_exec</code> instead</span></div></span></summary><div class=\"docblock\"><p>Schedules a closure to be run just before the <code>exec</code> function is\ninvoked.</p>\n<p>This method is stable and usable, but it should be unsafe. To fix\nthat, it got deprecated in favor of the unsafe <a href=\"trait.CommandExt.html#tymethod.pre_exec\" title=\"method std::os::unix::process::CommandExt::pre_exec\"><code>pre_exec</code></a>.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">¬ß</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">¬ß</a></h2><div id=\"implementors-list\"><section id=\"impl-CommandExt-for-Command\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../../src/std/os/unix/process.rs.html#200-242\">source</a></span><a href=\"#impl-CommandExt-for-Command\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.CommandExt.html\" title=\"trait std::os::unix::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"../../../process/struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></div><script src=\"../../../../trait.impl/std/os/unix/process/trait.CommandExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:26.051Z"
}