{
	"title": "VecDeque in std::collections::vec_deque - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/vec_deque/struct.VecDeque.html",
	"markdown": "# VecDeque in std::collections::vec\\_deque - Rust\n\n```\npub struct VecDeque<T, A = Global>where\n    A: Allocator,{ /* private fields */ }\n```\n\nExpand description\n\nA double-ended queue implemented with a growable ring buffer.\n\nThe ‚Äúdefault‚Äù usage of this type as a queue is to use [`push_back`](about:blank/struct.VecDeque.html#method.push_back \"method std::collections::VecDeque::push_back\") to add to the queue, and [`pop_front`](about:blank/struct.VecDeque.html#method.pop_front \"method std::collections::VecDeque::pop_front\") to remove from the queue. [`extend`](about:blank/struct.VecDeque.html#method.extend \"method std::collections::VecDeque::extend\") and [`append`](about:blank/struct.VecDeque.html#method.append \"method std::collections::VecDeque::append\") push onto the back in this manner, and iterating over `VecDeque` goes front to back.\n\nA `VecDeque` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::VecDeque;\n\nlet deq = VecDeque::from([-1, 0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq+=+VecDeque::from(%5B-1,+0,+1%5D);%0A%7D&edition=2021)\n\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous in memory. If you want to access the elements as a single slice, such as for efficient sorting, you can use [`make_contiguous`](about:blank/struct.VecDeque.html#method.make_contiguous \"method std::collections::VecDeque::make_contiguous\"). It rotates the `VecDeque` so that its elements do not wrap, and returns a mutable slice to the now-contiguous element sequence.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#532)[¬ß](#impl-VecDeque%3CT%3E)\n\n1.0.0 (const: 1.68.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#546)\n\nCreates an empty deque.\n\n##### [¬ß](#examples)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#563)\n\nCreates an empty deque with space for at least `capacity` elements.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::with_capacity(10);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#587)\n\nüî¨This is a nightly-only experimental API. (`try_with_capacity`¬†[#91913](https://github.com/rust-lang/rust/issues/91913))\n\nCreates an empty deque with space for at least `capacity` elements.\n\n##### [¬ß](#errors)Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_, or if the allocator reports allocation failure.\n\n##### [¬ß](#examples-2)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::try_with_capacity(10)?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_with_capacity)%5D%0Afn+main()+%7B%0A++++%23%5Ballow(unused)%5D%0A++++fn+example()+-%3E+Result%3C(),+std::collections::TryReserveError%3E+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::try_with_capacity(10)?;%0A++++Ok(())+%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#592)[¬ß](#impl-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#604)\n\nüî¨This is a nightly-only experimental API. (`allocator_api`¬†[#32838](https://github.com/rust-lang/rust/issues/32838))\n\nCreates an empty deque.\n\n##### [¬ß](#examples-3)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#618)\n\nüî¨This is a nightly-only experimental API. (`allocator_api`¬†[#32838](https://github.com/rust-lang/rust/issues/32838))\n\nCreates an empty deque with space for at least `capacity` elements.\n\n##### [¬ß](#examples-4)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::with_capacity(10);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#671)\n\nProvides a reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#examples-5)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nbuf.push_back(6);\nassert_eq!(buf.get(1), Some(&4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++buf.push_back(6);%0A++++assert_eq!(buf.get(1),+Some(%264));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#701)\n\nProvides a mutable reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#examples-6)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nbuf.push_back(6);\nassert_eq!(buf[1], 4);\nif let Some(elem) = buf.get_mut(1) {\n    *elem = 7;\n}\nassert_eq!(buf[1], 7);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++buf.push_back(6);%0A++++assert_eq!(buf%5B1%5D,+4);%0A++++if+let+Some(elem)+=+buf.get_mut(1)+%7B%0A++++++++*elem+=+7;%0A++++%7D%0A++++assert_eq!(buf%5B1%5D,+7);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#734)\n\nSwaps elements at indices `i` and `j`.\n\n`i` and `j` may be equal.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#panics)Panics\n\nPanics if either index is out of bounds.\n\n##### [¬ß](#examples-7)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf, [3, 4, 5]);\nbuf.swap(0, 2);\nassert_eq!(buf, [5, 4, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++assert_eq!(buf,+%5B3,+4,+5%5D);%0A++++buf.swap(0,+2);%0A++++assert_eq!(buf,+%5B5,+4,+3%5D);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#755)\n\nReturns the number of elements the deque can hold without reallocating.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet buf: VecDeque<i32> = VecDeque::with_capacity(10);\nassert!(buf.capacity() >= 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+buf:+VecDeque%3Ci32%3E+=+VecDeque::with_capacity(10);%0A++++assert!(buf.capacity()+%3E=+10);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#782)\n\nReserves the minimum capacity for at least `additional` more elements to be inserted in the given deque. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore capacity can not be relied upon to be precisely minimal. Prefer [`reserve`](about:blank/struct.VecDeque.html#method.reserve \"method std::collections::VecDeque::reserve\") if future insertions are expected.\n\n##### [¬ß](#panics-1)Panics\n\nPanics if the new capacity overflows `usize`.\n\n##### [¬ß](#examples-9)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve_exact(10);\nassert!(buf.capacity() >= 11);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3Ci32%3E+=+%5B1%5D.into();%0A++++buf.reserve_exact(10);%0A++++assert!(buf.capacity()+%3E=+11);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#811)\n\nReserves capacity for at least `additional` more elements to be inserted in the given deque. The collection may reserve more space to speculatively avoid frequent reallocations.\n\n##### [¬ß](#panics-2)Panics\n\nPanics if the new capacity overflows `usize`.\n\n##### [¬ß](#examples-10)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve(10);\nassert!(buf.capacity() >= 11);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3Ci32%3E+=+%5B1%5D.into();%0A++++buf.reserve(10);%0A++++assert!(buf.capacity()+%3E=+11);%0A%7D&edition=2021)\n\n1.57.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#863)\n\nTries to reserve the minimum capacity for at least `additional` more elements to be inserted in the given deque. After calling `try_reserve_exact`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore, capacity can not be relied upon to be precisely minimal. Prefer [`try_reserve`](about:blank/struct.VecDeque.html#method.try_reserve \"method std::collections::VecDeque::try_reserve\") if future insertions are expected.\n\n##### [¬ß](#errors-1)Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error is returned.\n\n##### [¬ß](#examples-11)Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++use+std::collections::VecDeque;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVecDeque%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+VecDeque::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can%27t%0A++++++++output.try_reserve_exact(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can%27t+OOM(Out-Of-Memory)+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&edition=2021)\n\n1.57.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#911)\n\nTries to reserve capacity for at least `additional` more elements to be inserted in the given deque. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `try_reserve`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if capacity is already sufficient. This method preserves the contents even if an error occurs.\n\n##### [¬ß](#errors-2)Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error is returned.\n\n##### [¬ß](#examples-12)Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++use+std::collections::VecDeque;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVecDeque%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+VecDeque::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can%27t%0A++++++++output.try_reserve(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can%27t+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#942)\n\nShrinks the capacity of the deque as much as possible.\n\nIt will drop down as close as possible to the length but the allocator may still inform the deque that there is space for a few more elements.\n\n##### [¬ß](#examples-13)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to_fit();\nassert!(buf.capacity() >= 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++buf.extend(0..4);%0A++++assert_eq!(buf.capacity(),+15);%0A++++buf.shrink_to_fit();%0A++++assert!(buf.capacity()+%3E=+4);%0A%7D&edition=2021)\n\n1.56.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#967)\n\nShrinks the capacity of the deque with a lower bound.\n\nThe capacity will remain at least as large as both the length and the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n##### [¬ß](#examples-14)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to(6);\nassert!(buf.capacity() >= 6);\nbuf.shrink_to(0);\nassert!(buf.capacity() >= 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++buf.extend(0..4);%0A++++assert_eq!(buf.capacity(),+15);%0A++++buf.shrink_to(6);%0A++++assert!(buf.capacity()+%3E=+6);%0A++++buf.shrink_to(0);%0A++++assert!(buf.capacity()+%3E=+4);%0A%7D&edition=2021)\n\n1.16.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1127)\n\nShortens the deque, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater or equal to the deque‚Äôs current length, this has no effect.\n\n##### [¬ß](#examples-15)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\nbuf.truncate(1);\nassert_eq!(buf, [5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++buf.truncate(1);%0A++++assert_eq!(buf,+%5B5%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1174)\n\nüî¨This is a nightly-only experimental API. (`allocator_api`¬†[#32838](https://github.com/rust-lang/rust/issues/32838))\n\nReturns a reference to the underlying allocator.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1194)\n\nReturns a front-to-back iterator.\n\n##### [¬ß](#examples-16)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nlet b: &[_] = &[&5, &3, &4];\nlet c: Vec<&i32> = buf.iter().collect();\nassert_eq!(&c[..], b);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++let+b:+%26%5B_%5D+=+%26%5B%265,+%263,+%264%5D;%0A++++let+c:+Vec%3C%26i32%3E+=+buf.iter().collect();%0A++++assert_eq!(%26c%5B..%5D,+b);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1217)\n\nReturns a front-to-back iterator that returns mutable references.\n\n##### [¬ß](#examples-17)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nfor num in buf.iter_mut() {\n    *num = *num - 2;\n}\nlet b: &[_] = &[&mut 3, &mut 1, &mut 2];\nassert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++for+num+in+buf.iter_mut()+%7B%0A++++++++*num+=+*num+-+2;%0A++++%7D%0A++++let+b:+%26%5B_%5D+=+%26%5B%26mut+3,+%26mut+1,+%26mut+2%5D;%0A++++assert_eq!(%26buf.iter_mut().collect::%3CVec%3C%26mut+i32%3E%3E()%5B..%5D,+b);%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1250)\n\nReturns a pair of slices which contain, in order, the contents of the deque.\n\nIf [`make_contiguous`](about:blank/struct.VecDeque.html#method.make_contiguous \"method std::collections::VecDeque::make_contiguous\") was previously called, all elements of the deque will be in the first slice and the second slice will be empty.\n\n##### [¬ß](#examples-18)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\ndeque.push_back(2);\n\nassert_eq!(deque.as_slices(), (&[0, 1, 2][..], &[][..]));\n\ndeque.push_front(10);\ndeque.push_front(9);\n\nassert_eq!(deque.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++deque.push_back(2);%0A++++%0A++++assert_eq!(deque.as_slices(),+(%26%5B0,+1,+2%5D%5B..%5D,+%26%5B%5D%5B..%5D));%0A++++%0A++++deque.push_front(10);%0A++++deque.push_front(9);%0A++++%0A++++assert_eq!(deque.as_slices(),+(%26%5B9,+10%5D%5B..%5D,+%26%5B0,+1,+2%5D%5B..%5D));%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1284)\n\nReturns a pair of slices which contain, in order, the contents of the deque.\n\nIf [`make_contiguous`](about:blank/struct.VecDeque.html#method.make_contiguous \"method std::collections::VecDeque::make_contiguous\") was previously called, all elements of the deque will be in the first slice and the second slice will be empty.\n\n##### [¬ß](#examples-19)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\ndeque.push_front(10);\ndeque.push_front(9);\n\ndeque.as_mut_slices().0[0] = 42;\ndeque.as_mut_slices().1[0] = 24;\nassert_eq!(deque.as_slices(), (&[42, 10][..], &[24, 1][..]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++%0A++++deque.push_front(10);%0A++++deque.push_front(9);%0A++++%0A++++deque.as_mut_slices().0%5B0%5D+=+42;%0A++++deque.as_mut_slices().1%5B0%5D+=+24;%0A++++assert_eq!(deque.as_slices(),+(%26%5B42,+10%5D%5B..%5D,+%26%5B24,+1%5D%5B..%5D));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1305)\n\nReturns the number of elements in the deque.\n\n##### [¬ß](#examples-20)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert_eq!(deque.len(), 0);\ndeque.push_back(1);\nassert_eq!(deque.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++assert_eq!(deque.len(),+0);%0A++++deque.push_back(1);%0A++++assert_eq!(deque.len(),+1);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1322)\n\nReturns `true` if the deque is empty.\n\n##### [¬ß](#examples-21)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert!(deque.is_empty());\ndeque.push_front(1);\nassert!(!deque.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++assert!(deque.is_empty());%0A++++deque.push_front(1);%0A++++assert!(!deque.is_empty());%0A%7D&edition=2021)\n\n1.51.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1391-1393)\n\nCreates an iterator that covers the specified range in the deque.\n\n##### [¬ß](#panics-3)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the deque.\n\n##### [¬ß](#examples-22)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3].into();\nlet range = deque.range(2..).copied().collect::<VecDeque<_>>();\nassert_eq!(range, [3]);\n\n// A full range covers all contents\nlet all = deque.range(..);\nassert_eq!(all.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+range+=+deque.range(2..).copied().collect::%3CVecDeque%3C_%3E%3E();%0A++++assert_eq!(range,+%5B3%5D);%0A++++%0A++++//+A+full+range+covers+all+contents%0A++++let+all+=+deque.range(..);%0A++++assert_eq!(all.len(),+3);%0A%7D&edition=2021)\n\n1.51.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1431-1433)\n\nCreates an iterator that covers the specified mutable range in the deque.\n\n##### [¬ß](#panics-4)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the deque.\n\n##### [¬ß](#examples-23)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nfor v in deque.range_mut(2..) {\n  *v *= 2;\n}\nassert_eq!(deque, [1, 2, 6]);\n\n// A full range covers all contents\nfor v in deque.range_mut(..) {\n  *v *= 2;\n}\nassert_eq!(deque, [2, 4, 12]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++for+v+in+deque.range_mut(2..)+%7B%0A++++++*v+*=+2;%0A++++%7D%0A++++assert_eq!(deque,+%5B1,+2,+6%5D);%0A++++%0A++++//+A+full+range+covers+all+contents%0A++++for+v+in+deque.range_mut(..)+%7B%0A++++++*v+*=+2;%0A++++%7D%0A++++assert_eq!(deque,+%5B2,+4,+12%5D);%0A%7D&edition=2021)\n\n1.6.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1480-1482)\n\nRemoves the specified range from the deque in bulk, returning all removed elements as an iterator. If the iterator is dropped before being fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the queue to optimize its implementation.\n\n##### [¬ß](#panics-5)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the deque.\n\n##### [¬ß](#leaking)Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to [`mem::forget`](../../mem/fn.forget.html \"fn std::mem::forget\"), for example), the deque may have lost and leaked elements arbitrarily, including elements outside the range.\n\n##### [¬ß](#examples-24)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nlet drained = deque.drain(2..).collect::<VecDeque<_>>();\nassert_eq!(drained, [3]);\nassert_eq!(deque, [1, 2]);\n\n// A full range clears all contents, like `clear()` does\ndeque.drain(..);\nassert!(deque.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+drained+=+deque.drain(2..).collect::%3CVecDeque%3C_%3E%3E();%0A++++assert_eq!(drained,+%5B3%5D);%0A++++assert_eq!(deque,+%5B1,+2%5D);%0A++++%0A++++//+A+full+range+clears+all+contents,+like+%60clear()%60+does%0A++++deque.drain(..);%0A++++assert!(deque.is_empty());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1534)\n\nClears the deque, removing all values.\n\n##### [¬ß](#examples-25)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\ndeque.push_back(1);\ndeque.clear();\nassert!(deque.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++deque.push_back(1);%0A++++deque.clear();%0A++++assert!(deque.is_empty());%0A%7D&edition=2021)\n\n1.12.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1563-1565)\n\nReturns `true` if the deque contains an element equal to the given value.\n\nThis operation is _O_(_n_).\n\nNote that if you have a sorted `VecDeque`, [`binary_search`](about:blank/struct.VecDeque.html#method.binary_search \"method std::collections::VecDeque::binary_search\") may be faster.\n\n##### [¬ß](#examples-26)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<u32> = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\nassert_eq!(deque.contains(&1), true);\nassert_eq!(deque.contains(&10), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++%0A++++assert_eq!(deque.contains(%261),+true);%0A++++assert_eq!(deque.contains(%2610),+false);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1588)\n\nProvides a reference to the front element, or `None` if the deque is empty.\n\n##### [¬ß](#examples-27)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.front(), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.front(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++assert_eq!(d.front(),+Some(%261));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1612)\n\nProvides a mutable reference to the front element, or `None` if the deque is empty.\n\n##### [¬ß](#examples-28)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front_mut(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.front_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.front(), Some(&9));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.front_mut(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++match+d.front_mut()+%7B%0A++++++++Some(x)+=%3E+*x+=+9,%0A++++++++None+=%3E+(),%0A++++%7D%0A++++assert_eq!(d.front(),+Some(%269));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1633)\n\nProvides a reference to the back element, or `None` if the deque is empty.\n\n##### [¬ß](#examples-29)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.back(), Some(&2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.back(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++assert_eq!(d.back(),+Some(%262));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1657)\n\nProvides a mutable reference to the back element, or `None` if the deque is empty.\n\n##### [¬ß](#examples-30)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.back_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.back(), Some(&9));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.back(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++match+d.back_mut()+%7B%0A++++++++Some(x)+=%3E+*x+=+9,%0A++++++++None+=%3E+(),%0A++++%7D%0A++++assert_eq!(d.back(),+Some(%269));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1678)\n\nRemoves the first element and returns it, or `None` if the deque is empty.\n\n##### [¬ß](#examples-31)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_back(1);\nd.push_back(2);\n\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++%0A++++assert_eq!(d.pop_front(),+Some(1));%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1707)\n\nRemoves the last element from the deque and returns it, or `None` if it is empty.\n\n##### [¬ß](#examples-32)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.pop_back(), None);\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(buf.pop_back(), Some(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.pop_back(),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(3);%0A++++assert_eq!(buf.pop_back(),+Some(3));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1732)\n\nPrepends an element to the deque.\n\n##### [¬ß](#examples-33)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_front(1);\nd.push_front(2);\nassert_eq!(d.front(), Some(&2));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++assert_eq!(d.front(),+Some(%262));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1759)\n\nAppends an element to the back of the deque.\n\n##### [¬ß](#examples-34)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(3, *buf.back().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(1);%0A++++buf.push_back(3);%0A++++assert_eq!(3,+*buf.back().unwrap());%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1799)\n\nRemoves an element from anywhere in the deque and returns it, replacing it with the first element.\n\nThis does not preserve ordering, but is _O_(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#examples-35)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_front(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_front(2), Some(3));\nassert_eq!(buf, [2, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.swap_remove_front(0),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.swap_remove_front(2),+Some(3));%0A++++assert_eq!(buf,+%5B2,+1%5D);%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1834)\n\nRemoves an element from anywhere in the deque and returns it, replacing it with the last element.\n\nThis does not preserve ordering, but is _O_(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#examples-36)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_back(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_back(0), Some(1));\nassert_eq!(buf, [3, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.swap_remove_back(0),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.swap_remove_back(0),+Some(1));%0A++++assert_eq!(buf,+%5B3,+2%5D);%0A%7D&edition=2021)\n\n1.5.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1868)\n\nInserts an element at `index` within the deque, shifting all elements with indices greater than or equal to `index` towards the back.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#panics-6)Panics\n\nPanics if `index` is greater than deque‚Äôs length\n\n##### [¬ß](#examples-37)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut vec_deque = VecDeque::new();\nvec_deque.push_back('a');\nvec_deque.push_back('b');\nvec_deque.push_back('c');\nassert_eq!(vec_deque, &['a', 'b', 'c']);\n\nvec_deque.insert(1, 'd');\nassert_eq!(vec_deque, &['a', 'd', 'b', 'c']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+vec_deque+=+VecDeque::new();%0A++++vec_deque.push_back(%27a%27);%0A++++vec_deque.push_back(%27b%27);%0A++++vec_deque.push_back(%27c%27);%0A++++assert_eq!(vec_deque,+%26%5B%27a%27,+%27b%27,+%27c%27%5D);%0A++++%0A++++vec_deque.insert(1,+%27d%27);%0A++++assert_eq!(vec_deque,+%26%5B%27a%27,+%27d%27,+%27b%27,+%27c%27%5D);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1919)\n\nRemoves and returns the element at `index` from the deque. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#examples-38)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.remove(1), Some(2));\nassert_eq!(buf, [1, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.remove(1),+Some(2));%0A++++assert_eq!(buf,+%5B1,+3%5D);%0A%7D&edition=2021)\n\n1.4.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1971-1973)\n\nSplits the deque into two at the given index.\n\nReturns a newly allocated `VecDeque`. `self` contains elements `[0, at)`, and the returned deque contains elements `[at, len)`.\n\nNote that the capacity of `self` does not change.\n\nElement at index 0 is the front of the queue.\n\n##### [¬ß](#panics-7)Panics\n\nPanics if `at > len`.\n\n##### [¬ß](#examples-39)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2, 3].into();\nlet buf2 = buf.split_off(1);\nassert_eq!(buf, [1]);\nassert_eq!(buf2, [2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+buf2+=+buf.split_off(1);%0A++++assert_eq!(buf,+%5B1%5D);%0A++++assert_eq!(buf2,+%5B2,+3%5D);%0A%7D&edition=2021)\n\n1.4.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2037)\n\nMoves all the elements of `other` into `self`, leaving `other` empty.\n\n##### [¬ß](#panics-8)Panics\n\nPanics if the new number of elements in self overflows a `usize`.\n\n##### [¬ß](#examples-40)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2].into();\nlet mut buf2: VecDeque<_> = [3, 4].into();\nbuf.append(&mut buf2);\nassert_eq!(buf, [1, 2, 3, 4]);\nassert_eq!(buf2, []);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+%5B1,+2%5D.into();%0A++++let+mut+buf2:+VecDeque%3C_%3E+=+%5B3,+4%5D.into();%0A++++buf.append(%26mut+buf2);%0A++++assert_eq!(buf,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(buf2,+%5B%5D);%0A%7D&edition=2021)\n\n1.4.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2092-2094)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [¬ß](#examples-41)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain(|&x| x % 2 == 0);\nassert_eq!(buf, [2, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..5);%0A++++buf.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++assert_eq!(buf,+%5B2,+4%5D);%0A%7D&edition=2021)\n\nBecause the elements are visited exactly once in the original order, external state may be used to decide which elements to keep.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..6);\n\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nbuf.retain(|_| *iter.next().unwrap());\nassert_eq!(buf, [2, 3, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..6);%0A++++%0A++++let+keep+=+%5Bfalse,+true,+true,+false,+true%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++buf.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(buf,+%5B2,+3,+5%5D);%0A%7D&edition=2021)\n\n1.61.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2121-2123)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [¬ß](#examples-42)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain_mut(|x| if *x % 2 == 0 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(buf, [3, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..5);%0A++++buf.retain_mut(%7Cx%7C+if+*x+%25+2+==+0+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(buf,+%5B3,+5%5D);%0A%7D&edition=2021)\n\n1.33.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2197)\n\nModifies the deque in-place so that `len()` is equal to `new_len`, either by removing excess elements from the back or by appending elements generated by calling `generator` to the back.\n\n##### [¬ß](#examples-43)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize_with(5, Default::default);\nassert_eq!(buf, [5, 10, 15, 0, 0]);\n\nbuf.resize_with(2, || unreachable!());\nassert_eq!(buf, [5, 10]);\n\nlet mut state = 100;\nbuf.resize_with(5, || { state += 1; state });\nassert_eq!(buf, [5, 10, 101, 102, 103]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++%0A++++buf.resize_with(5,+Default::default);%0A++++assert_eq!(buf,+%5B5,+10,+15,+0,+0%5D);%0A++++%0A++++buf.resize_with(2,+%7C%7C+unreachable!());%0A++++assert_eq!(buf,+%5B5,+10%5D);%0A++++%0A++++let+mut+state+=+100;%0A++++buf.resize_with(5,+%7C%7C+%7B+state+%2B=+1;+state+%7D);%0A++++assert_eq!(buf,+%5B5,+10,+101,+102,+103%5D);%0A%7D&edition=2021)\n\n1.48.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2263)\n\nRearranges the internal storage of this deque so it is one contiguous slice, which is then returned.\n\nThis method does not allocate and does not change the order of the inserted elements. As it returns a mutable slice, this can be used to sort a deque.\n\nOnce the internal storage is contiguous, the [`as_slices`](about:blank/struct.VecDeque.html#method.as_slices \"method std::collections::VecDeque::as_slices\") and [`as_mut_slices`](about:blank/struct.VecDeque.html#method.as_mut_slices \"method std::collections::VecDeque::as_mut_slices\") methods will return the entire contents of the deque in a single slice.\n\n##### [¬ß](#examples-44)Examples\n\nSorting the content of a deque.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\n// sorting the deque\nbuf.make_contiguous().sort();\nassert_eq!(buf.as_slices(), (&[1, 2, 3] as &[_], &[] as &[_]));\n\n// sorting it in reverse order\nbuf.make_contiguous().sort_by(|a, b| b.cmp(a));\nassert_eq!(buf.as_slices(), (&[3, 2, 1] as &[_], &[] as &[_]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++%0A++++buf.push_back(2);%0A++++buf.push_back(1);%0A++++buf.push_front(3);%0A++++%0A++++//+sorting+the+deque%0A++++buf.make_contiguous().sort();%0A++++assert_eq!(buf.as_slices(),+(%26%5B1,+2,+3%5D+as+%26%5B_%5D,+%26%5B%5D+as+%26%5B_%5D));%0A++++%0A++++//+sorting+it+in+reverse+order%0A++++buf.make_contiguous().sort_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert_eq!(buf.as_slices(),+(%26%5B3,+2,+1%5D+as+%26%5B_%5D,+%26%5B%5D+as+%26%5B_%5D));%0A%7D&edition=2021)\n\nGetting immutable access to the contiguous slice.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\nbuf.make_contiguous();\nif let (slice, &[]) = buf.as_slices() {\n    // we can now be sure that `slice` contains all elements of the deque,\n    // while still having immutable access to `buf`.\n    assert_eq!(buf.len(), slice.len());\n    assert_eq!(slice, &[3, 2, 1] as &[_]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++%0A++++buf.push_back(2);%0A++++buf.push_back(1);%0A++++buf.push_front(3);%0A++++%0A++++buf.make_contiguous();%0A++++if+let+(slice,+%26%5B%5D)+=+buf.as_slices()+%7B%0A++++++++//+we+can+now+be+sure+that+%60slice%60+contains+all+elements+of+the+deque,%0A++++++++//+while+still+having+immutable+access+to+%60buf%60.%0A++++++++assert_eq!(buf.len(),+slice.len());%0A++++++++assert_eq!(slice,+%26%5B3,+2,+1%5D+as+%26%5B_%5D);%0A++++%7D%0A%7D&edition=2021)\n\n1.36.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2422)\n\nRotates the double-ended queue `n` places to the left.\n\nEquivalently,\n\n-   Rotates item `n` into the first position.\n-   Pops the first `n` items and pushes them to the end.\n-   Rotates `len() - n` places to the right.\n\n##### [¬ß](#panics-9)Panics\n\nIf `n` is greater than `len()`. Note that `n == len()` does _not_ panic and is a no-op rotation.\n\n##### [¬ß](#complexity)Complexity\n\nTakes `*O*(min(n, len() - n))` time and no extra space.\n\n##### [¬ß](#examples-45)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_left(3);\nassert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n\nfor i in 1..10 {\n    assert_eq!(i * 3 % 10, buf[0]);\n    buf.rotate_left(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+(0..10).collect();%0A++++%0A++++buf.rotate_left(3);%0A++++assert_eq!(buf,+%5B3,+4,+5,+6,+7,+8,+9,+0,+1,+2%5D);%0A++++%0A++++for+i+in+1..10+%7B%0A++++++++assert_eq!(i+*+3+%25+10,+buf%5B0%5D);%0A++++++++buf.rotate_left(3);%0A++++%7D%0A++++assert_eq!(buf,+%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D);%0A%7D&edition=2021)\n\n1.36.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2465)\n\nRotates the double-ended queue `n` places to the right.\n\nEquivalently,\n\n-   Rotates the first item into position `n`.\n-   Pops the last `n` items and pushes them to the front.\n-   Rotates `len() - n` places to the left.\n\n##### [¬ß](#panics-10)Panics\n\nIf `n` is greater than `len()`. Note that `n == len()` does _not_ panic and is a no-op rotation.\n\n##### [¬ß](#complexity-1)Complexity\n\nTakes `*O*(min(n, len() - n))` time and no extra space.\n\n##### [¬ß](#examples-46)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_right(3);\nassert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n\nfor i in 1..10 {\n    assert_eq!(0, buf[i * 3 % 10]);\n    buf.rotate_right(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+(0..10).collect();%0A++++%0A++++buf.rotate_right(3);%0A++++assert_eq!(buf,+%5B7,+8,+9,+0,+1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++for+i+in+1..10+%7B%0A++++++++assert_eq!(0,+buf%5Bi+*+3+%25+10%5D);%0A++++++++buf.rotate_right(3);%0A++++%7D%0A++++assert_eq!(buf,+%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D);%0A%7D&edition=2021)\n\n1.54.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2550-2552)\n\nBinary searches this `VecDeque` for a given element. If the `VecDeque` is not sorted, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search_by`](about:blank/struct.VecDeque.html#method.binary_search_by \"method std::collections::VecDeque::binary_search_by\"), [`binary_search_by_key`](about:blank/struct.VecDeque.html#method.binary_search_by_key \"method std::collections::VecDeque::binary_search_by_key\"), and [`partition_point`](about:blank/struct.VecDeque.html#method.partition_point \"method std::collections::VecDeque::partition_point\").\n\n##### [¬ß](#examples-47)Examples\n\nLooks up a series of four elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search(&13),  Ok(9));\nassert_eq!(deque.binary_search(&4),   Err(7));\nassert_eq!(deque.binary_search(&100), Err(13));\nlet r = deque.binary_search(&1);\nassert!(matches!(r, Ok(1..=4)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search(%2613),++Ok(9));%0A++++assert_eq!(deque.binary_search(%264),+++Err(7));%0A++++assert_eq!(deque.binary_search(%26100),+Err(13));%0A++++let+r+=+deque.binary_search(%261);%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&edition=2021)\n\nIf you want to insert an item to a sorted deque, while maintaining sort order, consider using [`partition_point`](about:blank/struct.VecDeque.html#method.partition_point \"method std::collections::VecDeque::partition_point\"):\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x <= num);\n// If `num` is unique, `s.partition_point(|&x| x < num)` (with `<`) is equivalent to\n// `s.binary_search(&num).unwrap_or_else(|x| x)`, but using `<=` may allow `insert`\n// to shift less elements.\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++let+num+=+42;%0A++++let+idx+=+deque.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++//+If+%60num%60+is+unique,+%60s.partition_point(%7C%26x%7C+x+%3C+num)%60+(with+%60%3C%60)+is+equivalent+to%0A++++//+%60s.binary_search(%26num).unwrap_or_else(%7Cx%7C+x)%60,+but+using+%60%3C=%60+may+allow+%60insert%60%0A++++//+to+shift+less+elements.%0A++++deque.insert(idx,+num);%0A++++assert_eq!(deque,+%26%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&edition=2021)\n\n1.54.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2596-2598)\n\nBinary searches this `VecDeque` with a comparator function.\n\nThe comparator function should return an order code that indicates whether its argument is `Less`, `Equal` or `Greater` the desired target. If the `VecDeque` is not sorted or if the comparator function does not implement an order consistent with the sort order of the underlying `VecDeque`, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search`](about:blank/struct.VecDeque.html#method.binary_search \"method std::collections::VecDeque::binary_search\"), [`binary_search_by_key`](about:blank/struct.VecDeque.html#method.binary_search_by_key \"method std::collections::VecDeque::binary_search_by_key\"), and [`partition_point`](about:blank/struct.VecDeque.html#method.partition_point \"method std::collections::VecDeque::partition_point\").\n\n##### [¬ß](#examples-48)Examples\n\nLooks up a series of four elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search_by(|x| x.cmp(&13)),  Ok(9));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&4)),   Err(7));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&100)), Err(13));\nlet r = deque.binary_search_by(|x| x.cmp(&1));\nassert!(matches!(r, Ok(1..=4)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%2613)),++Ok(9));%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%264)),+++Err(7));%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%26100)),+Err(13));%0A++++let+r+=+deque.binary_search_by(%7Cx%7C+x.cmp(%261));%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&edition=2021)\n\n1.54.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2654-2657)\n\nBinary searches this `VecDeque` with a key extraction function.\n\nAssumes that the deque is sorted by the key, for instance with [`make_contiguous().sort_by_key()`](about:blank/struct.VecDeque.html#method.make_contiguous \"method std::collections::VecDeque::make_contiguous\") using the same key extraction function. If the deque is not sorted by the key, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search`](about:blank/struct.VecDeque.html#method.binary_search \"method std::collections::VecDeque::binary_search\"), [`binary_search_by`](about:blank/struct.VecDeque.html#method.binary_search_by \"method std::collections::VecDeque::binary_search_by\"), and [`partition_point`](about:blank/struct.VecDeque.html#method.partition_point \"method std::collections::VecDeque::partition_point\").\n\n##### [¬ß](#examples-49)Examples\n\nLooks up a series of four elements in a slice of pairs sorted by their second elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [(0, 0), (2, 1), (4, 1), (5, 1),\n         (3, 1), (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n         (1, 21), (2, 34), (4, 55)].into();\n\nassert_eq!(deque.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\nassert_eq!(deque.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\nassert_eq!(deque.binary_search_by_key(&100, |&(a, b)| b), Err(13));\nlet r = deque.binary_search_by_key(&1, |&(a, b)| b);\nassert!(matches!(r, Ok(1..=4)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B(0,+0),+(2,+1),+(4,+1),+(5,+1),%0A+++++++++++++(3,+1),+(1,+2),+(2,+3),+(4,+5),+(5,+8),+(3,+13),%0A+++++++++++++(1,+21),+(2,+34),+(4,+55)%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search_by_key(%2613,+%7C%26(a,+b)%7C+b),++Ok(9));%0A++++assert_eq!(deque.binary_search_by_key(%264,+%7C%26(a,+b)%7C+b),+++Err(7));%0A++++assert_eq!(deque.binary_search_by_key(%26100,+%7C%26(a,+b)%7C+b),+Err(13));%0A++++let+r+=+deque.binary_search_by_key(%261,+%7C%26(a,+b)%7C+b);%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&edition=2021)\n\n1.54.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2706-2708)\n\nReturns the index of the partition point according to the given predicate (the index of the first element of the second partition).\n\nThe deque is assumed to be partitioned according to the given predicate. This means that all elements for which the predicate returns true are at the start of the deque and all elements for which the predicate returns false are at the end. For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0` (all odd numbers are at the start, all even at the end).\n\nIf the deque is not partitioned, the returned result is unspecified and meaningless, as this method performs a kind of binary search.\n\nSee also [`binary_search`](about:blank/struct.VecDeque.html#method.binary_search \"method std::collections::VecDeque::binary_search\"), [`binary_search_by`](about:blank/struct.VecDeque.html#method.binary_search_by \"method std::collections::VecDeque::binary_search_by\"), and [`binary_search_by_key`](about:blank/struct.VecDeque.html#method.binary_search_by_key \"method std::collections::VecDeque::binary_search_by_key\").\n\n##### [¬ß](#examples-50)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3, 3, 5, 6, 7].into();\nlet i = deque.partition_point(|&x| x < 5);\n\nassert_eq!(i, 4);\nassert!(deque.iter().take(i).all(|&x| x < 5));\nassert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3,+3,+5,+6,+7%5D.into();%0A++++let+i+=+deque.partition_point(%7C%26x%7C+x+%3C+5);%0A++++%0A++++assert_eq!(i,+4);%0A++++assert!(deque.iter().take(i).all(%7C%26x%7C+x+%3C+5));%0A++++assert!(deque.iter().skip(i).all(%7C%26x%7C+!(x+%3C+5)));%0A%7D&edition=2021)\n\nIf you want to insert an item to a sorted deque, while maintaining sort order:\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x < num);\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++let+num+=+42;%0A++++let+idx+=+deque.partition_point(%7C%26x%7C+x+%3C+num);%0A++++deque.insert(idx,+num);%0A++++assert_eq!(deque,+%26%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2720)[¬ß](#impl-VecDeque%3CT,+A%3E-1)\n\n1.16.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2743)\n\nModifies the deque in-place so that `len()` is equal to new\\_len, either by removing excess elements from the back or by appending clones of `value` to the back.\n\n##### [¬ß](#examples-51)Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize(2, 0);\nassert_eq!(buf, [5, 10]);\n\nbuf.resize(5, 20);\nassert_eq!(buf, [5, 10, 20, 20, 20]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++%0A++++buf.resize(2,+0);%0A++++assert_eq!(buf,+%5B5,+10%5D);%0A++++%0A++++buf.resize(5,+20);%0A++++assert_eq!(buf,+%5B5,+10,+20,+20,+20%5D);%0A%7D&edition=2021)\n\n1.75.0 ¬∑ [source](about:blank/src/std/io/impls.rs.html#490-504)[¬ß](#impl-BufRead-for-VecDeque%3Cu8,+A%3E)\n\nBufRead is implemented for `VecDeque<u8>` by reading bytes from the front of the `VecDeque`.\n\n[source](about:blank/src/std/io/impls.rs.html#495-498)[¬ß](#method.fill_buf)\n\nReturns the contents of the ‚Äúfront‚Äù slice as returned by [`as_slices`](about:blank/struct.VecDeque.html#method.as_slices \"method std::collections::VecDeque::as_slices\"). If the contained byte slices of the `VecDeque` are discontiguous, multiple calls to `fill_buf` will be needed to read the entire content.\n\n[source](about:blank/src/std/io/impls.rs.html#501-503)[¬ß](#method.consume)\n\nTells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`. [Read more](about:blank/io/trait.BufRead.html#tymethod.consume)\n\n[source](about:blank/src/std/io/mod.rs.html#2285-2287)[¬ß](#method.has_data_left)\n\nüî¨This is a nightly-only experimental API. (`buf_read_has_data_left`¬†[#86423](https://github.com/rust-lang/rust/issues/86423))\n\nCheck if the underlying `Read` has any data left to be read. [Read more](about:blank/io/trait.BufRead.html#method.has_data_left)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2344-2346)[¬ß](#method.read_until)\n\nRead all bytes into `buf` until the delimiter `byte` or EOF is reached. [Read more](about:blank/io/trait.BufRead.html#method.read_until)\n\n[source](about:blank/src/std/io/mod.rs.html#2406-2408)[¬ß](#method.skip_until)\n\nüî¨This is a nightly-only experimental API. (`bufread_skip_until`¬†[#111735](https://github.com/rust-lang/rust/issues/111735))\n\nSkip all bytes until the delimiter `byte` or EOF is reached. [Read more](about:blank/io/trait.BufRead.html#method.skip_until)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2474-2479)[¬ß](#method.read_line)\n\nRead all bytes until a newline (the `0xA` byte) is reached, and append them to the provided `String` buffer. [Read more](about:blank/io/trait.BufRead.html#method.read_line)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2512-2517)[¬ß](#method.split)\n\nReturns an iterator over the contents of this reader split on the byte `byte`. [Read more](about:blank/io/trait.BufRead.html#method.split)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2549-2554)[¬ß](#method.lines)\n\nReturns an iterator over the lines of this reader. [Read more](about:blank/io/trait.BufRead.html#method.lines)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#109)[¬ß](#impl-Clone-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#120)[¬ß](#method.clone_from)\n\nOverwrites the contents of `self` with a clone of the contents of `source`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids reallocation if possible.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#110)[¬ß](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2934)[¬ß](#impl-Debug-for-VecDeque%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#152)[¬ß](#impl-Default-for-VecDeque%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#127)[¬ß](#impl-Drop-for-VecDeque%3CT,+A%3E)\n\n1.2.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2917)[¬ß](#impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2918)[¬ß](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2923)[¬ß](#method.extend_one-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2928)[¬ß](#method.extend_reserve-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2900)[¬ß](#impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2901)[¬ß](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2906)[¬ß](#method.extend_one)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2911)[¬ß](#method.extend_reserve)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3007)[¬ß](#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3017)[¬ß](#method.from-1)\n\nConverts a `[T; N]` into a `VecDeque<T>`.\n\n```\nuse std::collections::VecDeque;\n\nlet deq1 = VecDeque::from([1, 2, 3, 4]);\nlet deq2: VecDeque<_> = [1, 2, 3, 4].into();\nassert_eq!(deq1, deq2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq1+=+VecDeque::from(%5B1,+2,+3,+4%5D);%0A++++let+deq2:+VecDeque%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(deq1,+deq2);%0A%7D&edition=2021)\n\n1.10.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2941)[¬ß](#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2951)[¬ß](#method.from)\n\nTurn a [`Vec<T>`](../../vec/struct.Vec.html \"struct std::vec::Vec\") into a [`VecDeque<T>`](../struct.VecDeque.html \"struct std::collections::VecDeque\").\n\nThis conversion is guaranteed to run in _O_(1) time and to not re-allocate the `Vec`‚Äôs buffer or allocate any additional memory.\n\n1.10.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2958)[¬ß](#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2988)[¬ß](#method.from-2)\n\nTurn a [`VecDeque<T>`](../struct.VecDeque.html \"struct std::collections::VecDeque\") into a [`Vec<T>`](../../vec/struct.Vec.html \"struct std::vec::Vec\").\n\nThis never needs to re-allocate, but does need to do _O_(_n_) data movement if the circular buffer doesn‚Äôt happen to be at the beginning of the allocation.\n\n##### [¬ß](#examples-52)Examples\n\n```\nuse std::collections::VecDeque;\n\n// This one is *O*(1).\nlet deque: VecDeque<_> = (1..5).collect();\nlet ptr = deque.as_slices().0.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n\n// This one needs data rearranging.\nlet mut deque: VecDeque<_> = (1..5).collect();\ndeque.push_front(9);\ndeque.push_front(8);\nlet ptr = deque.as_slices().1.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [8, 9, 1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++//+This+one+is+*O*(1).%0A++++let+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++let+ptr+=+deque.as_slices().0.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A++++%0A++++//+This+one+needs+data+rearranging.%0A++++let+mut+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++deque.push_front(9);%0A++++deque.push_front(8);%0A++++let+ptr+=+deque.as_slices().1.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B8,+9,+1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2861)[¬ß](#impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2829)[¬ß](#impl-Hash-for-VecDeque%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2843)[¬ß](#impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E)\n\n[¬ß](#associatedtype.Output)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2847)[¬ß](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2853)[¬ß](#impl-IndexMut%3Cusize%3E-for-VecDeque%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2880)[¬ß](#impl-IntoIterator-for-%26VecDeque%3CT,+A%3E)\n\n[¬ß](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2884)[¬ß](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2890)[¬ß](#impl-IntoIterator-for-%26mut+VecDeque%3CT,+A%3E)\n\n[¬ß](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2894)[¬ß](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2868)[¬ß](#impl-IntoIterator-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2874)[¬ß](#method.into_iter-1)\n\nConsumes the deque into a front-to-back iterator yielding elements by value.\n\n[¬ß](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2821)[¬ß](#impl-Ord-for-VecDeque%3CT,+A%3E)\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2807)[¬ß](#impl-PartialEq%3C%26%5BU%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2807)[¬ß](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810)[¬ß](#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810)[¬ß](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2808)[¬ß](#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2808)[¬ß](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811)[¬ß](#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811)[¬ß](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809)[¬ß](#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806)[¬ß](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806)[¬ß](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2765)[¬ß](#impl-PartialEq-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2766)[¬ß](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2814)[¬ß](#impl-PartialOrd-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2815)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.63.0 ¬∑ [source](about:blank/src/std/io/impls.rs.html#447-486)[¬ß](#impl-Read-for-VecDeque%3Cu8,+A%3E)\n\nRead is implemented for `VecDeque<u8>` by consuming bytes from the front of the `VecDeque`.\n\n[source](about:blank/src/std/io/impls.rs.html#452-457)[¬ß](#method.read)\n\nFill `buf` with the contents of the ‚Äúfront‚Äù slice as returned by [`as_slices`](about:blank/struct.VecDeque.html#method.as_slices \"method std::collections::VecDeque::as_slices\"). If the contained byte slices of the `VecDeque` are discontiguous, multiple calls to `read` will be needed to read the entire content.\n\n[source](about:blank/src/std/io/impls.rs.html#460-466)[¬ß](#method.read_buf)\n\nüî¨This is a nightly-only experimental API. (`read_buf`¬†[#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/io/impls.rs.html#469-479)[¬ß](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/io/impls.rs.html#482-485)[¬ß](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.36.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#768-770)[¬ß](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/io/mod.rs.html#781-783)[¬ß](#method.is_read_vectored)\n\nüî¨This is a nightly-only experimental API. (`can_vector`¬†[#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n1.6.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#961-963)[¬ß](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[¬ß](#method.read_buf_exact)\n\nüî¨This is a nightly-only experimental API. (`read_buf`¬†[#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1034-1039)[¬ß](#method.by_ref)\n\nCreates a ‚Äúby reference‚Äù adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1077-1082)[¬ß](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1115-1120)[¬ß](#method.chain)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1154-1159)[¬ß](#method.take)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.63.0 ¬∑ [source](about:blank/src/std/io/impls.rs.html#508-540)[¬ß](#impl-Write-for-VecDeque%3Cu8,+A%3E)\n\nWrite is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n\n[source](about:blank/src/std/io/impls.rs.html#510-513)[¬ß](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/impls.rs.html#516-523)[¬ß](#method.write_vectored)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/impls.rs.html#526-528)[¬ß](#method.is_write_vectored)\n\nüî¨This is a nightly-only experimental API. (`can_vector`¬†[#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/impls.rs.html#531-534)[¬ß](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/impls.rs.html#537-539)[¬ß](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[¬ß](#method.write_all_vectored)\n\nüî¨This is a nightly-only experimental API. (`write_all_vectored`¬†[#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1814-1850)[¬ß](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#1874-1879)[¬ß](#method.by_ref-1)\n\nCreates a ‚Äúby reference‚Äù adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2804)[¬ß](#impl-Eq-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-3)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A double-ended queue implemented with a growable ring buffer.\"><title>VecDeque in std::collections::vec_deque - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">VecDeque</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">VecDeque</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.allocator\">allocator</a></li><li><a href=\"#method.append\">append</a></li><li><a href=\"#method.as_mut_slices\">as_mut_slices</a></li><li><a href=\"#method.as_slices\">as_slices</a></li><li><a href=\"#method.back\">back</a></li><li><a href=\"#method.back_mut\">back_mut</a></li><li><a href=\"#method.binary_search\">binary_search</a></li><li><a href=\"#method.binary_search_by\">binary_search_by</a></li><li><a href=\"#method.binary_search_by_key\">binary_search_by_key</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.drain\">drain</a></li><li><a href=\"#method.front\">front</a></li><li><a href=\"#method.front_mut\">front_mut</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.iter_mut\">iter_mut</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.make_contiguous\">make_contiguous</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.partition_point\">partition_point</a></li><li><a href=\"#method.pop_back\">pop_back</a></li><li><a href=\"#method.pop_front\">pop_front</a></li><li><a href=\"#method.push_back\">push_back</a></li><li><a href=\"#method.push_front\">push_front</a></li><li><a href=\"#method.range\">range</a></li><li><a href=\"#method.range_mut\">range_mut</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.reserve\">reserve</a></li><li><a href=\"#method.reserve_exact\">reserve_exact</a></li><li><a href=\"#method.resize\">resize</a></li><li><a href=\"#method.resize_with\">resize_with</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.retain_mut\">retain_mut</a></li><li><a href=\"#method.rotate_left\">rotate_left</a></li><li><a href=\"#method.rotate_right\">rotate_right</a></li><li><a href=\"#method.shrink_to\">shrink_to</a></li><li><a href=\"#method.shrink_to_fit\">shrink_to_fit</a></li><li><a href=\"#method.split_off\">split_off</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.swap_remove_back\">swap_remove_back</a></li><li><a href=\"#method.swap_remove_front\">swap_remove_front</a></li><li><a href=\"#method.truncate\">truncate</a></li><li><a href=\"#method.try_reserve\">try_reserve</a></li><li><a href=\"#method.try_reserve_exact\">try_reserve_exact</a></li><li><a href=\"#method.try_with_capacity\">try_with_capacity</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li><li><a href=\"#method.with_capacity_in\">with_capacity_in</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BufRead-for-VecDeque%3Cu8,+A%3E\">BufRead</a></li><li><a href=\"#impl-Clone-for-VecDeque%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-VecDeque%3CT,+A%3E\">Debug</a></li><li><a href=\"#impl-Default-for-VecDeque%3CT%3E\">Default</a></li><li><a href=\"#impl-Drop-for-VecDeque%3CT,+A%3E\">Drop</a></li><li><a href=\"#impl-Eq-for-VecDeque%3CT,+A%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E\">Extend&lt;&amp;'a T&gt;</a></li><li><a href=\"#impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E\">Extend&lt;T&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\">From&lt;VecDeque&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E\">FromIterator&lt;T&gt;</a></li><li><a href=\"#impl-Hash-for-VecDeque%3CT,+A%3E\">Hash</a></li><li><a href=\"#impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E\">Index&lt;usize&gt;</a></li><li><a href=\"#impl-IndexMut%3Cusize%3E-for-VecDeque%3CT,+A%3E\">IndexMut&lt;usize&gt;</a></li><li><a href=\"#impl-IntoIterator-for-%26VecDeque%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+VecDeque%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-VecDeque%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-VecDeque%3CT,+A%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-VecDeque%3CT,+A%3E\">PartialEq</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;[U]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;mut [U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;&amp;mut [U]&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialOrd-for-VecDeque%3CT,+A%3E\">PartialOrd</a></li><li><a href=\"#impl-Read-for-VecDeque%3Cu8,+A%3E\">Read</a></li><li><a href=\"#impl-Write-for-VecDeque%3Cu8,+A%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-VecDeque%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-VecDeque%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-VecDeque%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-VecDeque%3CT,+A%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-VecDeque%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-VecDeque%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::vec_deque</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Drain.html\">Drain</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.VecDeque.html\">VecDeque</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">vec_deque</a>::<wbr><a class=\"struct\" href=\"#\">VecDeque</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#94-97\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct VecDeque&lt;T, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A double-ended queue implemented with a growable ring buffer.</p>\n<p>The ‚Äúdefault‚Äù usage of this type as a queue is to use <a href=\"../struct.VecDeque.html#method.push_back\" title=\"method std::collections::VecDeque::push_back\"><code>push_back</code></a> to add to\nthe queue, and <a href=\"../struct.VecDeque.html#method.pop_front\" title=\"method std::collections::VecDeque::pop_front\"><code>pop_front</code></a> to remove from the queue. <a href=\"../struct.VecDeque.html#method.extend\" title=\"method std::collections::VecDeque::extend\"><code>extend</code></a> and <a href=\"../struct.VecDeque.html#method.append\" title=\"method std::collections::VecDeque::append\"><code>append</code></a>\npush onto the back in this manner, and iterating over <code>VecDeque</code> goes front\nto back.</p>\n<p>A <code>VecDeque</code> with a known list of items can be initialized from an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deq = VecDeque::from([-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq+=+VecDeque::from(%5B-1,+0,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Since <code>VecDeque</code> is a ring buffer, its elements are not necessarily contiguous\nin memory. If you want to access the elements as a single slice, such as for\nefficient sorting, you can use <a href=\"../struct.VecDeque.html#method.make_contiguous\" title=\"method std::collections::VecDeque::make_contiguous\"><code>make_contiguous</code></a>. It rotates the <code>VecDeque</code>\nso that its elements do not wrap, and returns a mutable slice to the\nnow-contiguous element sequence.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-VecDeque%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#532\">source</a><a href=\"#impl-VecDeque%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.68.0\">1.0.0 (const: 1.68.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#546\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty deque.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;u32&gt; = VecDeque::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#563\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty deque with space for at least <code>capacity</code> elements.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;u32&gt; = VecDeque::with_capacity(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::with_capacity(10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#587\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_with_capacity\" class=\"fn\">try_with_capacity</a>(\n    capacity: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;, <a class=\"struct\" href=\"../struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91913\">#91913</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an empty deque with space for at least <code>capacity</code> elements.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">¬ß</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;u32&gt; = VecDeque::try_with_capacity(<span class=\"number\">10</span>)<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(try_with_capacity)%5D%0Afn+main()+%7B%0A++++%23%5Ballow(unused)%5D%0A++++fn+example()+-%3E+Result%3C(),+std::collections::TryReserveError%3E+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::try_with_capacity(10)?;%0A++++Ok(())+%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-VecDeque%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#592\">source</a><a href=\"#impl-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#604\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an empty deque.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;u32&gt; = VecDeque::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#618\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an empty deque with space for at least <code>capacity</code> elements.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;u32&gt; = VecDeque::with_capacity(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3Cu32%3E+=+VecDeque::with_capacity(10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#671\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>(&amp;self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a reference to the element at the given index.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">3</span>);\nbuf.push_back(<span class=\"number\">4</span>);\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(buf.get(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++buf.push_back(6);%0A++++assert_eq!(buf.get(1),+Some(%264));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#701\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a mutable reference to the element at the given index.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">3</span>);\nbuf.push_back(<span class=\"number\">4</span>);\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(buf[<span class=\"number\">1</span>], <span class=\"number\">4</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(elem) = buf.get_mut(<span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>elem = <span class=\"number\">7</span>;\n}\n<span class=\"macro\">assert_eq!</span>(buf[<span class=\"number\">1</span>], <span class=\"number\">7</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++buf.push_back(6);%0A++++assert_eq!(buf%5B1%5D,+4);%0A++++if+let+Some(elem)+=+buf.get_mut(1)+%7B%0A++++++++*elem+=+7;%0A++++%7D%0A++++assert_eq!(buf%5B1%5D,+7);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#734\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, j: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps elements at indices <code>i</code> and <code>j</code>.</p>\n<p><code>i</code> and <code>j</code> may be equal.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>Panics if either index is out of bounds.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">3</span>);\nbuf.push_back(<span class=\"number\">4</span>);\nbuf.push_back(<span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\nbuf.swap(<span class=\"number\">0</span>, <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++buf.push_back(5);%0A++++assert_eq!(buf,+%5B3,+4,+5%5D);%0A++++buf.swap(0,+2);%0A++++assert_eq!(buf,+%5B5,+4,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#755\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the deque can hold without\nreallocating.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>buf: VecDeque&lt;i32&gt; = VecDeque::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+buf:+VecDeque%3Ci32%3E+=+VecDeque::with_capacity(10);%0A++++assert!(buf.capacity()+%3E=+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#782\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to be inserted in the\ngiven deque. Does nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it requests. Therefore\ncapacity can not be relied upon to be precisely minimal. Prefer <a href=\"../struct.VecDeque.html#method.reserve\" title=\"method std::collections::VecDeque::reserve\"><code>reserve</code></a> if future\ninsertions are expected.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>Panics if the new capacity overflows <code>usize</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;i32&gt; = [<span class=\"number\">1</span>].into();\nbuf.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">11</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3Ci32%3E+=+%5B1%5D.into();%0A++++buf.reserve_exact(10);%0A++++assert!(buf.capacity()+%3E=+11);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#811\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted in the given\ndeque. The collection may reserve more space to speculatively avoid frequent reallocations.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">¬ß</a>Panics</h5>\n<p>Panics if the new capacity overflows <code>usize</code>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;i32&gt; = [<span class=\"number\">1</span>].into();\nbuf.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">11</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3Ci32%3E+=+%5B1%5D.into();%0A++++buf.reserve(10);%0A++++assert!(buf.capacity()+%3E=+11);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#863\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given deque. After calling <code>try_reserve_exact</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code> if\nit returns <code>Ok(())</code>. Does nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"../struct.VecDeque.html#method.try_reserve\" title=\"method std::collections::VecDeque::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">¬ß</a>Errors</h5>\n<p>If the capacity overflows <code>usize</code>, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;VecDeque&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = VecDeque::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++use+std::collections::VecDeque;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVecDeque%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+VecDeque::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can't%0A++++++++output.try_reserve_exact(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can't+OOM(Out-Of-Memory)+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#911\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given deque. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">¬ß</a>Errors</h5>\n<p>If the capacity overflows <code>usize</code>, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;VecDeque&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = VecDeque::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++use+std::collections::VecDeque;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVecDeque%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+VecDeque::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can't%0A++++++++output.try_reserve(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can't+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#942\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the deque as much as possible.</p>\n<p>It will drop down as close as possible to the length but the allocator may still inform the\ndeque that there is space for a few more elements.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::with_capacity(<span class=\"number\">15</span>);\nbuf.extend(<span class=\"number\">0</span>..<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(buf.capacity(), <span class=\"number\">15</span>);\nbuf.shrink_to_fit();\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++buf.extend(0..4);%0A++++assert_eq!(buf.capacity(),+15);%0A++++buf.shrink_to_fit();%0A++++assert!(buf.capacity()+%3E=+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#967\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the deque with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::with_capacity(<span class=\"number\">15</span>);\nbuf.extend(<span class=\"number\">0</span>..<span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(buf.capacity(), <span class=\"number\">15</span>);\nbuf.shrink_to(<span class=\"number\">6</span>);\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">6</span>);\nbuf.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(buf.capacity() &gt;= <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++buf.extend(0..4);%0A++++assert_eq!(buf.capacity(),+15);%0A++++buf.shrink_to(6);%0A++++assert!(buf.capacity()+%3E=+6);%0A++++buf.shrink_to(0);%0A++++assert!(buf.capacity()+%3E=+4);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1127\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the deque, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the deque‚Äôs current length, this has\nno effect.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">10</span>);\nbuf.push_back(<span class=\"number\">15</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]);\nbuf.truncate(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++buf.truncate(1);%0A++++assert_eq!(buf,+%5B5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1174\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1194\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::vec_deque::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns a front-to-back iterator.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">3</span>);\nbuf.push_back(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>b: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>];\n<span class=\"kw\">let </span>c: Vec&lt;<span class=\"kw-2\">&amp;</span>i32&gt; = buf.iter().collect();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>c[..], b);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++let+b:+%26%5B_%5D+=+%26%5B%265,+%263,+%264%5D;%0A++++let+c:+Vec%3C%26i32%3E+=+buf.iter().collect();%0A++++assert_eq!(%26c%5B..%5D,+b);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1217\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::vec_deque::IterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Returns a front-to-back iterator that returns mutable references.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">3</span>);\nbuf.push_back(<span class=\"number\">4</span>);\n<span class=\"kw\">for </span>num <span class=\"kw\">in </span>buf.iter_mut() {\n    <span class=\"kw-2\">*</span>num = <span class=\"kw-2\">*</span>num - <span class=\"number\">2</span>;\n}\n<span class=\"kw\">let </span>b: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"kw-2\">&amp;mut </span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">2</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buf.iter_mut().collect::&lt;Vec&lt;<span class=\"kw-2\">&amp;mut </span>i32&gt;&gt;()[..], b);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(3);%0A++++buf.push_back(4);%0A++++for+num+in+buf.iter_mut()+%7B%0A++++++++*num+=+*num+-+2;%0A++++%7D%0A++++let+b:+%26%5B_%5D+=+%26%5B%26mut+3,+%26mut+1,+%26mut+2%5D;%0A++++assert_eq!(%26buf.iter_mut().collect::%3CVec%3C%26mut+i32%3E%3E()%5B..%5D,+b);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1250\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_slices\" class=\"fn\">as_slices</a>(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a pair of slices which contain, in order, the contents of the\ndeque.</p>\n<p>If <a href=\"../struct.VecDeque.html#method.make_contiguous\" title=\"method std::collections::VecDeque::make_contiguous\"><code>make_contiguous</code></a> was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque = VecDeque::new();\n\ndeque.push_back(<span class=\"number\">0</span>);\ndeque.push_back(<span class=\"number\">1</span>);\ndeque.push_back(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(deque.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>][..], <span class=\"kw-2\">&amp;</span>[][..]));\n\ndeque.push_front(<span class=\"number\">10</span>);\ndeque.push_front(<span class=\"number\">9</span>);\n\n<span class=\"macro\">assert_eq!</span>(deque.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">9</span>, <span class=\"number\">10</span>][..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>][..]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++deque.push_back(2);%0A++++%0A++++assert_eq!(deque.as_slices(),+(%26%5B0,+1,+2%5D%5B..%5D,+%26%5B%5D%5B..%5D));%0A++++%0A++++deque.push_front(10);%0A++++deque.push_front(9);%0A++++%0A++++assert_eq!(deque.as_slices(),+(%26%5B9,+10%5D%5B..%5D,+%26%5B0,+1,+2%5D%5B..%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_slices\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1284\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_slices\" class=\"fn\">as_mut_slices</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"../../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Returns a pair of slices which contain, in order, the contents of the\ndeque.</p>\n<p>If <a href=\"../struct.VecDeque.html#method.make_contiguous\" title=\"method std::collections::VecDeque::make_contiguous\"><code>make_contiguous</code></a> was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque = VecDeque::new();\n\ndeque.push_back(<span class=\"number\">0</span>);\ndeque.push_back(<span class=\"number\">1</span>);\n\ndeque.push_front(<span class=\"number\">10</span>);\ndeque.push_front(<span class=\"number\">9</span>);\n\ndeque.as_mut_slices().<span class=\"number\">0</span>[<span class=\"number\">0</span>] = <span class=\"number\">42</span>;\ndeque.as_mut_slices().<span class=\"number\">1</span>[<span class=\"number\">0</span>] = <span class=\"number\">24</span>;\n<span class=\"macro\">assert_eq!</span>(deque.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">42</span>, <span class=\"number\">10</span>][..], <span class=\"kw-2\">&amp;</span>[<span class=\"number\">24</span>, <span class=\"number\">1</span>][..]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++%0A++++deque.push_front(10);%0A++++deque.push_front(9);%0A++++%0A++++deque.as_mut_slices().0%5B0%5D+=+42;%0A++++deque.as_mut_slices().1%5B0%5D+=+24;%0A++++assert_eq!(deque.as_slices(),+(%26%5B42,+10%5D%5B..%5D,+%26%5B24,+1%5D%5B..%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the deque.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(deque.len(), <span class=\"number\">0</span>);\ndeque.push_back(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(deque.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++assert_eq!(deque.len(),+0);%0A++++deque.push_back(1);%0A++++assert_eq!(deque.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1322\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the deque is empty.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque = VecDeque::new();\n<span class=\"macro\">assert!</span>(deque.is_empty());\ndeque.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!deque.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++assert!(deque.is_empty());%0A++++deque.push_front(1);%0A++++assert!(!deque.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1391-1393\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.range\" class=\"fn\">range</a>&lt;R&gt;(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::vec_deque::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">‚ìò</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"../../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator that covers the specified range in the deque.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">¬ß</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();\n<span class=\"kw\">let </span>range = deque.range(<span class=\"number\">2</span>..).copied().collect::&lt;VecDeque&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(range, [<span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range covers all contents\n</span><span class=\"kw\">let </span>all = deque.range(..);\n<span class=\"macro\">assert_eq!</span>(all.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+range+=+deque.range(2..).copied().collect::%3CVecDeque%3C_%3E%3E();%0A++++assert_eq!(range,+%5B3%5D);%0A++++%0A++++//+A+full+range+covers+all+contents%0A++++let+all+=+deque.range(..);%0A++++assert_eq!(all.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.range_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1431-1433\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.range_mut\" class=\"fn\">range_mut</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::vec_deque::IterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, T>\">‚ìò</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"../../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an iterator that covers the specified mutable range in the deque.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">¬ß</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();\n<span class=\"kw\">for </span>v <span class=\"kw\">in </span>deque.range_mut(<span class=\"number\">2</span>..) {\n  <span class=\"kw-2\">*</span>v <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n}\n<span class=\"macro\">assert_eq!</span>(deque, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>]);\n\n<span class=\"comment\">// A full range covers all contents\n</span><span class=\"kw\">for </span>v <span class=\"kw\">in </span>deque.range_mut(..) {\n  <span class=\"kw-2\">*</span>v <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n}\n<span class=\"macro\">assert_eq!</span>(deque, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++for+v+in+deque.range_mut(2..)+%7B%0A++++++*v+*=+2;%0A++++%7D%0A++++assert_eq!(deque,+%5B1,+2,+6%5D);%0A++++%0A++++//+A+full+range+covers+all+contents%0A++++for+v+in+deque.range_mut(..)+%7B%0A++++++*v+*=+2;%0A++++%7D%0A++++assert_eq!(deque,+%5B2,+4,+12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1480-1482\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"struct.Drain.html\" title=\"struct std::collections::vec_deque::Drain\">Drain</a>&lt;'_, T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain<'_, T, A>\">‚ìò</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"../../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the deque in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the queue to optimize\nits implementation.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">¬ß</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">¬ß</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"../../mem/fn.forget.html\" title=\"fn std::mem::forget\"><code>mem::forget</code></a>, for example), the deque may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();\n<span class=\"kw\">let </span>drained = deque.drain(<span class=\"number\">2</span>..).collect::&lt;VecDeque&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(drained, [<span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(deque, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n\n<span class=\"comment\">// A full range clears all contents, like `clear()` does\n</span>deque.drain(..);\n<span class=\"macro\">assert!</span>(deque.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+drained+=+deque.drain(2..).collect::%3CVecDeque%3C_%3E%3E();%0A++++assert_eq!(drained,+%5B3%5D);%0A++++assert_eq!(deque,+%5B1,+2%5D);%0A++++%0A++++//+A+full+range+clears+all+contents,+like+%60clear()%60+does%0A++++deque.drain(..);%0A++++assert!(deque.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1534\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the deque, removing all values.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque = VecDeque::new();\ndeque.push_back(<span class=\"number\">1</span>);\ndeque.clear();\n<span class=\"macro\">assert!</span>(deque.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque+=+VecDeque::new();%0A++++deque.push_back(1);%0A++++deque.clear();%0A++++assert!(deque.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1563-1565\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>(&amp;self, x: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the deque contains an element equal to the\ngiven value.</p>\n<p>This operation is <em>O</em>(<em>n</em>).</p>\n<p>Note that if you have a sorted <code>VecDeque</code>, <a href=\"../struct.VecDeque.html#method.binary_search\" title=\"method std::collections::VecDeque::binary_search\"><code>binary_search</code></a> may be faster.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;u32&gt; = VecDeque::new();\n\ndeque.push_back(<span class=\"number\">0</span>);\ndeque.push_back(<span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(deque.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(deque.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3Cu32%3E+=+VecDeque::new();%0A++++%0A++++deque.push_back(0);%0A++++deque.push_back(1);%0A++++%0A++++assert_eq!(deque.contains(%261),+true);%0A++++assert_eq!(deque.contains(%2610),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1588\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.front\" class=\"fn\">front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a reference to the front element, or <code>None</code> if the deque is\nempty.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(d.front(), <span class=\"prelude-val\">None</span>);\n\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(d.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.front(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++assert_eq!(d.front(),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1612\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.front_mut\" class=\"fn\">front_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a mutable reference to the front element, or <code>None</code> if the\ndeque is empty.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(d.front_mut(), <span class=\"prelude-val\">None</span>);\n\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>d.front_mut() {\n    <span class=\"prelude-val\">Some</span>(x) =&gt; <span class=\"kw-2\">*</span>x = <span class=\"number\">9</span>,\n    <span class=\"prelude-val\">None </span>=&gt; (),\n}\n<span class=\"macro\">assert_eq!</span>(d.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">9</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.front_mut(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++match+d.front_mut()+%7B%0A++++++++Some(x)+=%3E+*x+=+9,%0A++++++++None+=%3E+(),%0A++++%7D%0A++++assert_eq!(d.front(),+Some(%269));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1633\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.back\" class=\"fn\">back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a reference to the back element, or <code>None</code> if the deque is\nempty.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(d.back(), <span class=\"prelude-val\">None</span>);\n\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(d.back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.back(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++assert_eq!(d.back(),+Some(%262));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1657\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.back_mut\" class=\"fn\">back_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a mutable reference to the back element, or <code>None</code> if the\ndeque is empty.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(d.back(), <span class=\"prelude-val\">None</span>);\n\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">2</span>);\n<span class=\"kw\">match </span>d.back_mut() {\n    <span class=\"prelude-val\">Some</span>(x) =&gt; <span class=\"kw-2\">*</span>x = <span class=\"number\">9</span>,\n    <span class=\"prelude-val\">None </span>=&gt; (),\n}\n<span class=\"macro\">assert_eq!</span>(d.back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">9</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++assert_eq!(d.back(),+None);%0A++++%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++match+d.back_mut()+%7B%0A++++++++Some(x)+=%3E+*x+=+9,%0A++++++++None+=%3E+(),%0A++++%7D%0A++++assert_eq!(d.back(),+Some(%269));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1678\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_front\" class=\"fn\">pop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the first element and returns it, or <code>None</code> if the deque is\nempty.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++d.push_back(1);%0A++++d.push_back(2);%0A++++%0A++++assert_eq!(d.pop_front(),+Some(1));%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1707\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_back\" class=\"fn\">pop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from the deque and returns it, or <code>None</code> if\nit is empty.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(buf.pop_back(), <span class=\"prelude-val\">None</span>);\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf.pop_back(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.pop_back(),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(3);%0A++++assert_eq!(buf.pop_back(),+Some(3));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1732\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push_front\" class=\"fn\">push_front</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Prepends an element to the deque.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = VecDeque::new();\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(d.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+d+=+VecDeque::new();%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++assert_eq!(d.front(),+Some(%262));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1759\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push_back\" class=\"fn\">push_back</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of the deque.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, <span class=\"kw-2\">*</span>buf.back().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(1);%0A++++buf.push_back(3);%0A++++assert_eq!(3,+*buf.back().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_remove_front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1799\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap_remove_front\" class=\"fn\">swap_remove_front</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes an element from anywhere in the deque and returns it,\nreplacing it with the first element.</p>\n<p>This does not preserve ordering, but is <em>O</em>(1).</p>\n<p>Returns <code>None</code> if <code>index</code> is out of bounds.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(buf.swap_remove_front(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_back(<span class=\"number\">2</span>);\nbuf.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(buf.swap_remove_front(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">2</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.swap_remove_front(0),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.swap_remove_front(2),+Some(3));%0A++++assert_eq!(buf,+%5B2,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_remove_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1834\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap_remove_back\" class=\"fn\">swap_remove_back</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes an element from anywhere in the deque and returns it,\nreplacing it with the last element.</p>\n<p>This does not preserve ordering, but is <em>O</em>(1).</p>\n<p>Returns <code>None</code> if <code>index</code> is out of bounds.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\n<span class=\"macro\">assert_eq!</span>(buf.swap_remove_back(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_back(<span class=\"number\">2</span>);\nbuf.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(buf.swap_remove_back(<span class=\"number\">0</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++assert_eq!(buf.swap_remove_back(0),+None);%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.swap_remove_back(0),+Some(1));%0A++++assert_eq!(buf,+%5B3,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1868\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at <code>index</code> within the deque, shifting all elements\nwith indices greater than or equal to <code>index</code> towards the back.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">¬ß</a>Panics</h5>\n<p>Panics if <code>index</code> is greater than deque‚Äôs length</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec_deque = VecDeque::new();\nvec_deque.push_back(<span class=\"string\">'a'</span>);\nvec_deque.push_back(<span class=\"string\">'b'</span>);\nvec_deque.push_back(<span class=\"string\">'c'</span>);\n<span class=\"macro\">assert_eq!</span>(vec_deque, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\n\nvec_deque.insert(<span class=\"number\">1</span>, <span class=\"string\">'d'</span>);\n<span class=\"macro\">assert_eq!</span>(vec_deque, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+vec_deque+=+VecDeque::new();%0A++++vec_deque.push_back('a');%0A++++vec_deque.push_back('b');%0A++++vec_deque.push_back('c');%0A++++assert_eq!(vec_deque,+%26%5B'a',+'b',+'c'%5D);%0A++++%0A++++vec_deque.insert(1,+'d');%0A++++assert_eq!(vec_deque,+%26%5B'a',+'d',+'b',+'c'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1919\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at <code>index</code> from the deque.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns <code>None</code> if <code>index</code> is out of bounds.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_back(<span class=\"number\">2</span>);\nbuf.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(buf.remove(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(1);%0A++++buf.push_back(2);%0A++++buf.push_back(3);%0A++++assert_eq!(buf,+%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(buf.remove(1),+Some(2));%0A++++assert_eq!(buf,+%5B1,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#1971-1973\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the deque into two at the given index.</p>\n<p>Returns a newly allocated <code>VecDeque</code>. <code>self</code> contains elements <code>[0, at)</code>,\nand the returned deque contains elements <code>[at, len)</code>.</p>\n<p>Note that the capacity of <code>self</code> does not change.</p>\n<p>Element at index 0 is the front of the queue.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">¬ß</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into();\n<span class=\"kw\">let </span>buf2 = buf.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(buf2, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+%5B1,+2,+3%5D.into();%0A++++let+buf2+=+buf.split_off(1);%0A++++assert_eq!(buf,+%5B1%5D);%0A++++assert_eq!(buf2,+%5B2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2037\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">¬ß</a>Panics</h5>\n<p>Panics if the new number of elements in self overflows a <code>usize</code>.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>].into();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf2: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\nbuf.append(<span class=\"kw-2\">&amp;mut </span>buf2);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(buf2, []);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+%5B1,+2%5D.into();%0A++++let+mut+buf2:+VecDeque%3C_%3E+=+%5B3,+4%5D.into();%0A++++buf.append(%26mut+buf2);%0A++++assert_eq!(buf,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(buf2,+%5B%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2092-2094\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.extend(<span class=\"number\">1</span>..<span class=\"number\">5</span>);\nbuf.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..5);%0A++++buf.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++assert_eq!(buf,+%5B2,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.extend(<span class=\"number\">1</span>..<span class=\"number\">6</span>);\n\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nbuf.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..6);%0A++++%0A++++let+keep+=+%5Bfalse,+true,+true,+false,+true%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++buf.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(buf,+%5B2,+3,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2121-2123\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.extend(<span class=\"number\">1</span>..<span class=\"number\">5</span>);\nbuf.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.extend(1..5);%0A++++buf.retain_mut(%7Cx%7C+if+*x+%25+2+==+0+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(buf,+%5B3,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2197\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.resize_with\" class=\"fn\">resize_with</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, generator: impl <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; T)</h4></section></summary><div class=\"docblock\"><p>Modifies the deque in-place so that <code>len()</code> is equal to <code>new_len</code>,\neither by removing excess elements from the back or by appending\nelements generated by calling <code>generator</code> to the back.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">10</span>);\nbuf.push_back(<span class=\"number\">15</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]);\n\nbuf.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\nbuf.resize_with(<span class=\"number\">2</span>, || <span class=\"macro\">unreachable!</span>());\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = <span class=\"number\">100</span>;\nbuf.resize_with(<span class=\"number\">5</span>, || { state += <span class=\"number\">1</span>; state });\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">101</span>, <span class=\"number\">102</span>, <span class=\"number\">103</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++%0A++++buf.resize_with(5,+Default::default);%0A++++assert_eq!(buf,+%5B5,+10,+15,+0,+0%5D);%0A++++%0A++++buf.resize_with(2,+%7C%7C+unreachable!());%0A++++assert_eq!(buf,+%5B5,+10%5D);%0A++++%0A++++let+mut+state+=+100;%0A++++buf.resize_with(5,+%7C%7C+%7B+state+%2B=+1;+state+%7D);%0A++++assert_eq!(buf,+%5B5,+10,+101,+102,+103%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_contiguous\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2263\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_contiguous\" class=\"fn\">make_contiguous</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Rearranges the internal storage of this deque so it is one contiguous\nslice, which is then returned.</p>\n<p>This method does not allocate and does not change the order of the\ninserted elements. As it returns a mutable slice, this can be used to\nsort a deque.</p>\n<p>Once the internal storage is contiguous, the <a href=\"../struct.VecDeque.html#method.as_slices\" title=\"method std::collections::VecDeque::as_slices\"><code>as_slices</code></a> and\n<a href=\"../struct.VecDeque.html#method.as_mut_slices\" title=\"method std::collections::VecDeque::as_mut_slices\"><code>as_mut_slices</code></a> methods will return the entire contents of the\ndeque in a single slice.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">¬ß</a>Examples</h5>\n<p>Sorting the content of a deque.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::with_capacity(<span class=\"number\">15</span>);\n\nbuf.push_back(<span class=\"number\">2</span>);\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_front(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// sorting the deque\n</span>buf.make_contiguous().sort();\n<span class=\"macro\">assert_eq!</span>(buf.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>], <span class=\"kw-2\">&amp;</span>[] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]));\n\n<span class=\"comment\">// sorting it in reverse order\n</span>buf.make_contiguous().sort_by(|a, b| b.cmp(a));\n<span class=\"macro\">assert_eq!</span>(buf.as_slices(), (<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>], <span class=\"kw-2\">&amp;</span>[] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::with_capacity(15);%0A++++%0A++++buf.push_back(2);%0A++++buf.push_back(1);%0A++++buf.push_front(3);%0A++++%0A++++//+sorting+the+deque%0A++++buf.make_contiguous().sort();%0A++++assert_eq!(buf.as_slices(),+(%26%5B1,+2,+3%5D+as+%26%5B_%5D,+%26%5B%5D+as+%26%5B_%5D));%0A++++%0A++++//+sorting+it+in+reverse+order%0A++++buf.make_contiguous().sort_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert_eq!(buf.as_slices(),+(%26%5B3,+2,+1%5D+as+%26%5B_%5D,+%26%5B%5D+as+%26%5B_%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Getting immutable access to the contiguous slice.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\n\nbuf.push_back(<span class=\"number\">2</span>);\nbuf.push_back(<span class=\"number\">1</span>);\nbuf.push_front(<span class=\"number\">3</span>);\n\nbuf.make_contiguous();\n<span class=\"kw\">if let </span>(slice, <span class=\"kw-2\">&amp;</span>[]) = buf.as_slices() {\n    <span class=\"comment\">// we can now be sure that `slice` contains all elements of the deque,\n    // while still having immutable access to `buf`.\n    </span><span class=\"macro\">assert_eq!</span>(buf.len(), slice.len());\n    <span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>] <span class=\"kw\">as </span><span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++%0A++++buf.push_back(2);%0A++++buf.push_back(1);%0A++++buf.push_front(3);%0A++++%0A++++buf.make_contiguous();%0A++++if+let+(slice,+%26%5B%5D)+=+buf.as_slices()+%7B%0A++++++++//+we+can+now+be+sure+that+%60slice%60+contains+all+elements+of+the+deque,%0A++++++++//+while+still+having+immutable+access+to+%60buf%60.%0A++++++++assert_eq!(buf.len(),+slice.len());%0A++++++++assert_eq!(slice,+%26%5B3,+2,+1%5D+as+%26%5B_%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2422\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_left\" class=\"fn\">rotate_left</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates the double-ended queue <code>n</code> places to the left.</p>\n<p>Equivalently,</p>\n<ul>\n<li>Rotates item <code>n</code> into the first position.</li>\n<li>Pops the first <code>n</code> items and pushes them to the end.</li>\n<li>Rotates <code>len() - n</code> places to the right.</li>\n</ul>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">¬ß</a>Panics</h5>\n<p>If <code>n</code> is greater than <code>len()</code>. Note that <code>n == len()</code>\ndoes <em>not</em> panic and is a no-op rotation.</p>\n<h5 id=\"complexity\"><a class=\"doc-anchor\" href=\"#complexity\">¬ß</a>Complexity</h5>\n<p>Takes <code>*O*(min(n, len() - n))</code> time and no extra space.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).collect();\n\nbuf.rotate_left(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..<span class=\"number\">10 </span>{\n    <span class=\"macro\">assert_eq!</span>(i * <span class=\"number\">3 </span>% <span class=\"number\">10</span>, buf[<span class=\"number\">0</span>]);\n    buf.rotate_left(<span class=\"number\">3</span>);\n}\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+(0..10).collect();%0A++++%0A++++buf.rotate_left(3);%0A++++assert_eq!(buf,+%5B3,+4,+5,+6,+7,+8,+9,+0,+1,+2%5D);%0A++++%0A++++for+i+in+1..10+%7B%0A++++++++assert_eq!(i+*+3+%25+10,+buf%5B0%5D);%0A++++++++buf.rotate_left(3);%0A++++%7D%0A++++assert_eq!(buf,+%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2465\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_right\" class=\"fn\">rotate_right</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates the double-ended queue <code>n</code> places to the right.</p>\n<p>Equivalently,</p>\n<ul>\n<li>Rotates the first item into position <code>n</code>.</li>\n<li>Pops the last <code>n</code> items and pushes them to the front.</li>\n<li>Rotates <code>len() - n</code> places to the left.</li>\n</ul>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">¬ß</a>Panics</h5>\n<p>If <code>n</code> is greater than <code>len()</code>. Note that <code>n == len()</code>\ndoes <em>not</em> panic and is a no-op rotation.</p>\n<h5 id=\"complexity-1\"><a class=\"doc-anchor\" href=\"#complexity-1\">¬ß</a>Complexity</h5>\n<p>Takes <code>*O*(min(n, len() - n))</code> time and no extra space.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).collect();\n\nbuf.rotate_right(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..<span class=\"number\">10 </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, buf[i * <span class=\"number\">3 </span>% <span class=\"number\">10</span>]);\n    buf.rotate_right(<span class=\"number\">3</span>);\n}\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf:+VecDeque%3C_%3E+=+(0..10).collect();%0A++++%0A++++buf.rotate_right(3);%0A++++assert_eq!(buf,+%5B7,+8,+9,+0,+1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++for+i+in+1..10+%7B%0A++++++++assert_eq!(0,+buf%5Bi+*+3+%25+10%5D);%0A++++++++buf.rotate_right(3);%0A++++%7D%0A++++assert_eq!(buf,+%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2550-2552\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search\" class=\"fn\">binary_search</a>(&amp;self, x: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this <code>VecDeque</code> for a given element.\nIf the <code>VecDeque</code> is not sorted, the returned result is unspecified and\nmeaningless.</p>\n<p>If the value is found then <a href=\"../../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n<a href=\"../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.</p>\n<p>See also <a href=\"../struct.VecDeque.html#method.binary_search_by\" title=\"method std::collections::VecDeque::binary_search_by\"><code>binary_search_by</code></a>, <a href=\"../struct.VecDeque.html#method.binary_search_by_key\" title=\"method std::collections::VecDeque::binary_search_by_key\"><code>binary_search_by_key</code></a>, and <a href=\"../struct.VecDeque.html#method.partition_point\" title=\"method std::collections::VecDeque::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">¬ß</a>Examples</h5>\n<p>Looks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>].into();\n\n<span class=\"macro\">assert_eq!</span>(deque.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>),  <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>),   <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = deque.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(r, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search(%2613),++Ok(9));%0A++++assert_eq!(deque.binary_search(%264),+++Err(7));%0A++++assert_eq!(deque.binary_search(%26100),+Err(13));%0A++++let+r+=+deque.binary_search(%261);%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to insert an item to a sorted deque, while maintaining\nsort order, consider using <a href=\"../struct.VecDeque.html#method.partition_point\" title=\"method std::collections::VecDeque::partition_point\"><code>partition_point</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>].into();\n<span class=\"kw\">let </span>num = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>idx = deque.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt;= num);\n<span class=\"comment\">// If `num` is unique, `s.partition_point(|&amp;x| x &lt; num)` (with `&lt;`) is equivalent to\n// `s.binary_search(&amp;num).unwrap_or_else(|x| x)`, but using `&lt;=` may allow `insert`\n// to shift less elements.\n</span>deque.insert(idx, num);\n<span class=\"macro\">assert_eq!</span>(deque, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">55</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++let+num+=+42;%0A++++let+idx+=+deque.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++//+If+%60num%60+is+unique,+%60s.partition_point(%7C%26x%7C+x+%3C+num)%60+(with+%60%3C%60)+is+equivalent+to%0A++++//+%60s.binary_search(%26num).unwrap_or_else(%7Cx%7C+x)%60,+but+using+%60%3C=%60+may+allow+%60insert%60%0A++++//+to+shift+less+elements.%0A++++deque.insert(idx,+num);%0A++++assert_eq!(deque,+%26%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2596-2598\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search_by\" class=\"fn\">binary_search_by</a>&lt;'a, F&gt;(&amp;'a self, f: F) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this <code>VecDeque</code> with a comparator function.</p>\n<p>The comparator function should return an order code that indicates\nwhether its argument is <code>Less</code>, <code>Equal</code> or <code>Greater</code> the desired\ntarget.\nIf the <code>VecDeque</code> is not sorted or if the comparator function does not\nimplement an order consistent with the sort order of the underlying\n<code>VecDeque</code>, the returned result is unspecified and meaningless.</p>\n<p>If the value is found then <a href=\"../../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n<a href=\"../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.</p>\n<p>See also <a href=\"../struct.VecDeque.html#method.binary_search\" title=\"method std::collections::VecDeque::binary_search\"><code>binary_search</code></a>, <a href=\"../struct.VecDeque.html#method.binary_search_by_key\" title=\"method std::collections::VecDeque::binary_search_by_key\"><code>binary_search_by_key</code></a>, and <a href=\"../struct.VecDeque.html#method.partition_point\" title=\"method std::collections::VecDeque::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">¬ß</a>Examples</h5>\n<p>Looks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>].into();\n\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by(|x| x.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>)),  <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by(|x| x.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>)),   <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by(|x| x.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>)), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = deque.binary_search_by(|x| x.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(r, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%2613)),++Ok(9));%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%264)),+++Err(7));%0A++++assert_eq!(deque.binary_search_by(%7Cx%7C+x.cmp(%26100)),+Err(13));%0A++++let+r+=+deque.binary_search_by(%7Cx%7C+x.cmp(%261));%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2654-2657\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search_by_key\" class=\"fn\">binary_search_by_key</a>&lt;'a, B, F&gt;(\n    &amp;'a self,\n    b: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;B</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>) -&gt; B,\n    B: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this <code>VecDeque</code> with a key extraction function.</p>\n<p>Assumes that the deque is sorted by the key, for instance with\n<a href=\"../struct.VecDeque.html#method.make_contiguous\" title=\"method std::collections::VecDeque::make_contiguous\"><code>make_contiguous().sort_by_key()</code></a> using the same key extraction function.\nIf the deque is not sorted by the key, the returned result is\nunspecified and meaningless.</p>\n<p>If the value is found then <a href=\"../../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n<a href=\"../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.</p>\n<p>See also <a href=\"../struct.VecDeque.html#method.binary_search\" title=\"method std::collections::VecDeque::binary_search\"><code>binary_search</code></a>, <a href=\"../struct.VecDeque.html#method.binary_search_by\" title=\"method std::collections::VecDeque::binary_search_by\"><code>binary_search_by</code></a>, and <a href=\"../struct.VecDeque.html#method.partition_point\" title=\"method std::collections::VecDeque::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">¬ß</a>Examples</h5>\n<p>Looks up a series of four elements in a slice of pairs sorted by\ntheir second elements. The first is found, with a uniquely\ndetermined position; the second and third are not found; the\nfourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">5</span>, <span class=\"number\">1</span>),\n         (<span class=\"number\">3</span>, <span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">5</span>), (<span class=\"number\">5</span>, <span class=\"number\">8</span>), (<span class=\"number\">3</span>, <span class=\"number\">13</span>),\n         (<span class=\"number\">1</span>, <span class=\"number\">21</span>), (<span class=\"number\">2</span>, <span class=\"number\">34</span>), (<span class=\"number\">4</span>, <span class=\"number\">55</span>)].into();\n\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b),  <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b),   <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(deque.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = deque.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(r, <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B(0,+0),+(2,+1),+(4,+1),+(5,+1),%0A+++++++++++++(3,+1),+(1,+2),+(2,+3),+(4,+5),+(5,+8),+(3,+13),%0A+++++++++++++(1,+21),+(2,+34),+(4,+55)%5D.into();%0A++++%0A++++assert_eq!(deque.binary_search_by_key(%2613,+%7C%26(a,+b)%7C+b),++Ok(9));%0A++++assert_eq!(deque.binary_search_by_key(%264,+%7C%26(a,+b)%7C+b),+++Err(7));%0A++++assert_eq!(deque.binary_search_by_key(%26100,+%7C%26(a,+b)%7C+b),+Err(13));%0A++++let+r+=+deque.binary_search_by_key(%261,+%7C%26(a,+b)%7C+b);%0A++++assert!(matches!(r,+Ok(1..=4)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition_point\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2706-2708\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.partition_point\" class=\"fn\">partition_point</a>&lt;P&gt;(&amp;self, pred: P) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the index of the partition point according to the given predicate\n(the index of the first element of the second partition).</p>\n<p>The deque is assumed to be partitioned according to the given predicate.\nThis means that all elements for which the predicate returns true are at the start of the deque\nand all elements for which the predicate returns false are at the end.\nFor example, <code>[7, 15, 3, 5, 4, 12, 6]</code> is partitioned under the predicate <code>x % 2 != 0</code>\n(all odd numbers are at the start, all even at the end).</p>\n<p>If the deque is not partitioned, the returned result is unspecified and meaningless,\nas this method performs a kind of binary search.</p>\n<p>See also <a href=\"../struct.VecDeque.html#method.binary_search\" title=\"method std::collections::VecDeque::binary_search\"><code>binary_search</code></a>, <a href=\"../struct.VecDeque.html#method.binary_search_by\" title=\"method std::collections::VecDeque::binary_search_by\"><code>binary_search_by</code></a>, and <a href=\"../struct.VecDeque.html#method.binary_search_by_key\" title=\"method std::collections::VecDeque::binary_search_by_key\"><code>binary_search_by_key</code></a>.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>].into();\n<span class=\"kw\">let </span>i = deque.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt; <span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(i, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(deque.iter().take(i).all(|<span class=\"kw-2\">&amp;</span>x| x &lt; <span class=\"number\">5</span>));\n<span class=\"macro\">assert!</span>(deque.iter().skip(i).all(|<span class=\"kw-2\">&amp;</span>x| !(x &lt; <span class=\"number\">5</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deque:+VecDeque%3C_%3E+=+%5B1,+2,+3,+3,+5,+6,+7%5D.into();%0A++++let+i+=+deque.partition_point(%7C%26x%7C+x+%3C+5);%0A++++%0A++++assert_eq!(i,+4);%0A++++assert!(deque.iter().take(i).all(%7C%26x%7C+x+%3C+5));%0A++++assert!(deque.iter().skip(i).all(%7C%26x%7C+!(x+%3C+5)));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to insert an item to a sorted deque, while maintaining\nsort order:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>].into();\n<span class=\"kw\">let </span>num = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>idx = deque.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt; num);\ndeque.insert(idx, num);\n<span class=\"macro\">assert_eq!</span>(deque, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">55</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+deque:+VecDeque%3C_%3E+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D.into();%0A++++let+num+=+42;%0A++++let+idx+=+deque.partition_point(%7C%26x%7C+x+%3C+num);%0A++++deque.insert(idx,+num);%0A++++assert_eq!(deque,+%26%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-VecDeque%3CT,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2720\">source</a><a href=\"#impl-VecDeque%3CT,+A%3E-1\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2743\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Modifies the deque in-place so that <code>len()</code> is equal to new_len,\neither by removing excess elements from the back or by appending clones of <code>value</code>\nto the back.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = VecDeque::new();\nbuf.push_back(<span class=\"number\">5</span>);\nbuf.push_back(<span class=\"number\">10</span>);\nbuf.push_back(<span class=\"number\">15</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>]);\n\nbuf.resize(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>]);\n\nbuf.resize(<span class=\"number\">5</span>, <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(buf, [<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+mut+buf+=+VecDeque::new();%0A++++buf.push_back(5);%0A++++buf.push_back(10);%0A++++buf.push_back(15);%0A++++assert_eq!(buf,+%5B5,+10,+15%5D);%0A++++%0A++++buf.resize(2,+0);%0A++++assert_eq!(buf,+%5B5,+10%5D);%0A++++%0A++++buf.resize(5,+20);%0A++++assert_eq!(buf,+%5B5,+10,+20,+20,+20%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufRead-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/impls.rs.html#490-504\">source</a></span><a href=\"#impl-BufRead-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"../../io/trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, A&gt;</h3></section></summary><div class=\"docblock\"><p>BufRead is implemented for <code>VecDeque&lt;u8&gt;</code> by reading bytes from the front of the <code>VecDeque</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#495-498\">source</a><a href=\"#method.fill_buf\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the contents of the ‚Äúfront‚Äù slice as returned by\n<a href=\"../struct.VecDeque.html#method.as_slices\" title=\"method std::collections::VecDeque::as_slices\"><code>as_slices</code></a>. If the contained byte slices of the <code>VecDeque</code> are\ndiscontiguous, multiple calls to <code>fill_buf</code> will be needed to read the entire content.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.consume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#501-503\">source</a><a href=\"#method.consume\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\">Tells this buffer that <code>amt</code> bytes have been consumed from the buffer,\nso they should no longer be returned in calls to <code>read</code>. <a href=\"../../io/trait.BufRead.html#tymethod.consume\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.has_data_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/mod.rs.html#2285-2287\">source</a><a href=\"#method.has_data_left\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>buf_read_has_data_left</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86423\">#86423</a>)</span></div></span><div class=\"docblock\">Check if the underlying <code>Read</code> has any data left to be read. <a href=\"../../io/trait.BufRead.html#method.has_data_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_until\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#2344-2346\">source</a></span><a href=\"#method.read_until\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is reached. <a href=\"../../io/trait.BufRead.html#method.read_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/mod.rs.html#2406-2408\">source</a><a href=\"#method.skip_until\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>bufread_skip_until</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111735\">#111735</a>)</span></div></span><div class=\"docblock\">Skip all bytes until the delimiter <code>byte</code> or EOF is reached. <a href=\"../../io/trait.BufRead.html#method.skip_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_line\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#2474-2479\">source</a></span><a href=\"#method.read_line\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until a newline (the <code>0xA</code> byte) is reached, and append\nthem to the provided <code>String</code> buffer. <a href=\"../../io/trait.BufRead.html#method.read_line\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#2512-2517\">source</a></span><a href=\"#method.split\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.split\" class=\"fn\">split</a>(self, byte: <a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"../../io/struct.Split.html\" title=\"struct std::io::Split\">Split</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns an iterator over the contents of this reader split on the byte\n<code>byte</code>. <a href=\"../../io/trait.BufRead.html#method.split\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#2549-2554\">source</a></span><a href=\"#method.lines\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.BufRead.html#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"../../io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns an iterator over the lines of this reader. <a href=\"../../io/trait.BufRead.html#method.lines\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#109\">source</a></span><a href=\"#impl-Clone-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#120\">source</a><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#110\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2934\">source</a></span><a href=\"#impl-Debug-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2935\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-VecDeque%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#152\">source</a></span><a href=\"#impl-Default-for-VecDeque%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#155\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty deque.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#127\">source</a></span><a href=\"#impl-Drop-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#128\">source</a><a href=\"#method.drop\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2917\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2918\">source</a><a href=\"#method.extend-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2923\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2928\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2900\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2901\">source</a><a href=\"#method.extend\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2906\">source</a><a href=\"#method.extend_one\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, elem: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2911\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3007\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#3017\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"../../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"kw\">let </span>deq1 = VecDeque::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>deq2: VecDeque&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(deq1, deq2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++let+deq1+=+VecDeque::from(%5B1,+2,+3,+4%5D);%0A++++let+deq2:+VecDeque%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(deq1,+deq2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2941\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2951\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec&lt;T&gt;</code></a> into a <a href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\"><code>VecDeque&lt;T&gt;</code></a>.</p>\n<p>This conversion is guaranteed to run in <em>O</em>(1) time\nand to not re-allocate the <code>Vec</code>‚Äôs buffer or allocate\nany additional memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2958\">source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2988\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn‚Äôt happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++//+This+one+is+*O*(1).%0A++++let+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++let+ptr+=+deque.as_slices().0.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A++++%0A++++//+This+one+needs+data+rearranging.%0A++++let+mut+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++deque.push_front(9);%0A++++deque.push_front(8);%0A++++let+ptr+=+deque.as_slices().1.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B8,+9,+1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2861\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-VecDeque%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2862\">source</a><a href=\"#method.from_iter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2829\">source</a></span><a href=\"#impl-Hash-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2830\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2843\">source</a></span><a href=\"#impl-Index%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2847\">source</a><a href=\"#method.index\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../../ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2853\">source</a></span><a href=\"#impl-IndexMut%3Cusize%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2855\">source</a><a href=\"#method.index_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"../../ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2880\">source</a></span><a href=\"#impl-IntoIterator-for-%26VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::vec_deque::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2884\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::vec_deque::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2890\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::vec_deque::IterMut\">IterMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2894\">source</a><a href=\"#method.into_iter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::vec_deque::IterMut\">IterMut</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2868\">source</a></span><a href=\"#impl-IntoIterator-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2874\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::vec_deque::IntoIter\">IntoIter</a>&lt;T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<T, A>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Consumes the deque into a front-to-back iterator yielding elements by\nvalue.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::vec_deque::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2821\">source</a></span><a href=\"#impl-Ord-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2823\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2807\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2807\">source</a><a href=\"#method.eq-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-5\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2810\">source</a><a href=\"#method.eq-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2808\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"../../primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2808\">source</a><a href=\"#method.eq-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"../../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2811\">source</a><a href=\"#method.eq-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-4\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2809\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806\">source</a><a href=\"#method.eq-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-6\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2765\">source</a></span><a href=\"#impl-PartialEq-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2766\">source</a><a href=\"#method.eq-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2814\">source</a></span><a href=\"#impl-PartialOrd-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2815\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/impls.rs.html#447-486\">source</a></span><a href=\"#impl-Read-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, A&gt;</h3></section></summary><div class=\"docblock\"><p>Read is implemented for <code>VecDeque&lt;u8&gt;</code> by consuming bytes from the front of the <code>VecDeque</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#452-457\">source</a><a href=\"#method.read\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Fill <code>buf</code> with the contents of the ‚Äúfront‚Äù slice as returned by\n<a href=\"../struct.VecDeque.html#method.as_slices\" title=\"method std::collections::VecDeque::as_slices\"><code>as_slices</code></a>. If the contained byte slices of the <code>VecDeque</code> are\ndiscontiguous, multiple calls to <code>read</code> will be needed to read the entire content.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#460-466\">source</a><a href=\"#method.read_buf\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#469-479\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#482-485\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#768-770\">source</a></span><a href=\"#method.read_vectored\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/mod.rs.html#781-783\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a ‚Äúby reference‚Äù adaptor for this instance of <code>Read</code>. <a href=\"../../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/impls.rs.html#508-540\">source</a></span><a href=\"#impl-Write-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"../../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, A&gt;</h3></section></summary><div class=\"docblock\"><p>Write is implemented for <code>VecDeque&lt;u8&gt;</code> by appending to the <code>VecDeque</code>, growing it as needed.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#510-513\">source</a><a href=\"#method.write\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#516-523\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#526-528\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#531-534\">source</a><a href=\"#method.write_all\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/impls.rs.html#537-539\">source</a><a href=\"#method.flush\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a ‚Äúby reference‚Äù adapter for this instance of <code>Write</code>. <a href=\"../../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><section id=\"impl-Eq-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2804\">source</a></span><a href=\"#impl-Eq-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    T: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    T: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-VecDeque%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-VecDeque%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-3\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Drain<'_, T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Drain.html\\\" title=\\\"struct std::collections::vec_deque::Drain\\\">Drain</a>&lt;'_, T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Drain.html\\\" title=\\\"struct std::collections::vec_deque::Drain\\\">Drain</a>&lt;'_, T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"IntoIter<T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::collections::vec_deque::IntoIter\\\">IntoIter</a>&lt;T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::collections::vec_deque::IntoIter\\\">IntoIter</a>&lt;T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::vec_deque::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::vec_deque::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::vec_deque::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::vec_deque::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IterMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::vec_deque::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::vec_deque::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\",\"IterMut<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::vec_deque::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::vec_deque::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\",\"Lines<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../io/struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"../../io/trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../../io/struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../../string/struct.String.html\\\" title=\\\"struct std::string::String\\\">String</a>&gt;;</div>\",\"Split<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../io/struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"../../io/trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../../io/struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../../vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>&gt;&gt;;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:15.206Z"
}