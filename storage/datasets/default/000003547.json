{
	"title": "grisu.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/core/num/flt2dec/strategy/grisu.rs.html",
	"markdown": "# grisu.rs - source\n\n```\n//! Rust adaptation of the Grisu3 algorithm described in \"Printing Floating-Point Numbers Quickly\n//! and Accurately with Integers\"[^1]. It uses about 1KB of precomputed table, and in turn, it's\n//! very quick for most inputs.\n//!\n//! [^1]: Florian Loitsch. 2010. Printing floating-point numbers quickly and\n//!   accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n\nuse crate::mem::MaybeUninit;\nuse crate::num::diy_float::Fp;\nuse crate::num::flt2dec::{round_up, Decoded, MAX_SIG_DIGITS};\n\n// see the comments in `format_shortest_opt` for the rationale.\n#[doc(hidden)]\npub const ALPHA: i16 = -60;\n#[doc(hidden)]\npub const GAMMA: i16 = -32;\n\n/*\n# the following Python code generates this table:\nfor i in xrange(-308, 333, 8):\n    if i >= 0: f = 10**i; e = 0\n    else: f = 2**(80-4*i) // 10**-i; e = 4 * i - 80\n    l = f.bit_length()\n    f = ((f << 64 >> (l-1)) + 1) >> 1; e += l - 64\n    print '    (%#018x, %5d, %4d),' % (f, e, i)\n*/\n\n#[doc(hidden)]\npub static CACHED_POW10: [(u64, i16, i16); 81] = [\n    // (f, e, k)\n    (0xe61acf033d1a45df, -1087, -308),\n    (0xab70fe17c79ac6ca, -1060, -300),\n    (0xff77b1fcbebcdc4f, -1034, -292),\n    (0xbe5691ef416bd60c, -1007, -284),\n    (0x8dd01fad907ffc3c, -980, -276),\n    (0xd3515c2831559a83, -954, -268),\n    (0x9d71ac8fada6c9b5, -927, -260),\n    (0xea9c227723ee8bcb, -901, -252),\n    (0xaecc49914078536d, -874, -244),\n    (0x823c12795db6ce57, -847, -236),\n    (0xc21094364dfb5637, -821, -228),\n    (0x9096ea6f3848984f, -794, -220),\n    (0xd77485cb25823ac7, -768, -212),\n    (0xa086cfcd97bf97f4, -741, -204),\n    (0xef340a98172aace5, -715, -196),\n    (0xb23867fb2a35b28e, -688, -188),\n    (0x84c8d4dfd2c63f3b, -661, -180),\n    (0xc5dd44271ad3cdba, -635, -172),\n    (0x936b9fcebb25c996, -608, -164),\n    (0xdbac6c247d62a584, -582, -156),\n    (0xa3ab66580d5fdaf6, -555, -148),\n    (0xf3e2f893dec3f126, -529, -140),\n    (0xb5b5ada8aaff80b8, -502, -132),\n    (0x87625f056c7c4a8b, -475, -124),\n    (0xc9bcff6034c13053, -449, -116),\n    (0x964e858c91ba2655, -422, -108),\n    (0xdff9772470297ebd, -396, -100),\n    (0xa6dfbd9fb8e5b88f, -369, -92),\n    (0xf8a95fcf88747d94, -343, -84),\n    (0xb94470938fa89bcf, -316, -76),\n    (0x8a08f0f8bf0f156b, -289, -68),\n    (0xcdb02555653131b6, -263, -60),\n    (0x993fe2c6d07b7fac, -236, -52),\n    (0xe45c10c42a2b3b06, -210, -44),\n    (0xaa242499697392d3, -183, -36),\n    (0xfd87b5f28300ca0e, -157, -28),\n    (0xbce5086492111aeb, -130, -20),\n    (0x8cbccc096f5088cc, -103, -12),\n    (0xd1b71758e219652c, -77, -4),\n    (0x9c40000000000000, -50, 4),\n    (0xe8d4a51000000000, -24, 12),\n    (0xad78ebc5ac620000, 3, 20),\n    (0x813f3978f8940984, 30, 28),\n    (0xc097ce7bc90715b3, 56, 36),\n    (0x8f7e32ce7bea5c70, 83, 44),\n    (0xd5d238a4abe98068, 109, 52),\n    (0x9f4f2726179a2245, 136, 60),\n    (0xed63a231d4c4fb27, 162, 68),\n    (0xb0de65388cc8ada8, 189, 76),\n    (0x83c7088e1aab65db, 216, 84),\n    (0xc45d1df942711d9a, 242, 92),\n    (0x924d692ca61be758, 269, 100),\n    (0xda01ee641a708dea, 295, 108),\n    (0xa26da3999aef774a, 322, 116),\n    (0xf209787bb47d6b85, 348, 124),\n    (0xb454e4a179dd1877, 375, 132),\n    (0x865b86925b9bc5c2, 402, 140),\n    (0xc83553c5c8965d3d, 428, 148),\n    (0x952ab45cfa97a0b3, 455, 156),\n    (0xde469fbd99a05fe3, 481, 164),\n    (0xa59bc234db398c25, 508, 172),\n    (0xf6c69a72a3989f5c, 534, 180),\n    (0xb7dcbf5354e9bece, 561, 188),\n    (0x88fcf317f22241e2, 588, 196),\n    (0xcc20ce9bd35c78a5, 614, 204),\n    (0x98165af37b2153df, 641, 212),\n    (0xe2a0b5dc971f303a, 667, 220),\n    (0xa8d9d1535ce3b396, 694, 228),\n    (0xfb9b7cd9a4a7443c, 720, 236),\n    (0xbb764c4ca7a44410, 747, 244),\n    (0x8bab8eefb6409c1a, 774, 252),\n    (0xd01fef10a657842c, 800, 260),\n    (0x9b10a4e5e9913129, 827, 268),\n    (0xe7109bfba19c0c9d, 853, 276),\n    (0xac2820d9623bf429, 880, 284),\n    (0x80444b5e7aa7cf85, 907, 292),\n    (0xbf21e44003acdd2d, 933, 300),\n    (0x8e679c2f5e44ff8f, 960, 308),\n    (0xd433179d9c8cb841, 986, 316),\n    (0x9e19db92b4e31ba9, 1013, 324),\n    (0xeb96bf6ebadf77d9, 1039, 332),\n];\n\n#[doc(hidden)]\npub const CACHED_POW10_FIRST_E: i16 = -1087;\n#[doc(hidden)]\npub const CACHED_POW10_LAST_E: i16 = 1039;\n\n#[doc(hidden)]\npub fn cached_power(alpha: i16, gamma: i16) -> (i16, Fp) {\n    let offset = CACHED_POW10_FIRST_E as i32;\n    let range = (CACHED_POW10.len() as i32) - 1;\n    let domain = (CACHED_POW10_LAST_E - CACHED_POW10_FIRST_E) as i32;\n    let idx = ((gamma as i32) - offset) * range / domain;\n    let (f, e, k) = CACHED_POW10[idx as usize];\n    debug_assert!(alpha <= e && e <= gamma);\n    (k, Fp { f, e })\n}\n\n/// Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.\n#[doc(hidden)]\npub fn max_pow10_no_more_than(x: u32) -> (u8, u32) {\n    debug_assert!(x > 0);\n\n    const X9: u32 = 10_0000_0000;\n    const X8: u32 = 1_0000_0000;\n    const X7: u32 = 1000_0000;\n    const X6: u32 = 100_0000;\n    const X5: u32 = 10_0000;\n    const X4: u32 = 1_0000;\n    const X3: u32 = 1000;\n    const X2: u32 = 100;\n    const X1: u32 = 10;\n\n    if x < X4 {\n        if x < X2 {\n            if x < X1 { (0, 1) } else { (1, X1) }\n        } else {\n            if x < X3 { (2, X2) } else { (3, X3) }\n        }\n    } else {\n        if x < X6 {\n            if x < X5 { (4, X4) } else { (5, X5) }\n        } else if x < X8 {\n            if x < X7 { (6, X6) } else { (7, X7) }\n        } else {\n            if x < X9 { (8, X8) } else { (9, X9) }\n        }\n    }\n}\n\n/// The shortest mode implementation for Grisu.\n///\n/// It returns `None` when it would return an inexact representation otherwise.\npub fn format_shortest_opt<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n) -> Option<(/*digits*/ &'a [u8], /*exp*/ i16)> {\n    assert!(d.mant > 0);\n    assert!(d.minus > 0);\n    assert!(d.plus > 0);\n    assert!(d.mant.checked_add(d.plus).is_some());\n    assert!(d.mant.checked_sub(d.minus).is_some());\n    assert!(buf.len() >= MAX_SIG_DIGITS);\n    assert!(d.mant + d.plus < (1 << 61)); // we need at least three bits of additional precision\n\n    // start with the normalized values with the shared exponent\n    let plus = Fp { f: d.mant + d.plus, e: d.exp }.normalize();\n    let minus = Fp { f: d.mant - d.minus, e: d.exp }.normalize_to(plus.e);\n    let v = Fp { f: d.mant, e: d.exp }.normalize_to(plus.e);\n\n    // find any `cached = 10^minusk` such that `ALPHA <= minusk + plus.e + 64 <= GAMMA`.\n    // since `plus` is normalized, this means `2^(62 + ALPHA) <= plus * cached < 2^(64 + GAMMA)`;\n    // given our choices of `ALPHA` and `GAMMA`, this puts `plus * cached` into `[4, 2^32)`.\n    //\n    // it is obviously desirable to maximize `GAMMA - ALPHA`,\n    // so that we don't need many cached powers of 10, but there are some considerations:\n    //\n    // 1. we want to keep `floor(plus * cached)` within `u32` since it needs a costly division.\n    //    (this is not really avoidable, remainder is required for accuracy estimation.)\n    // 2. the remainder of `floor(plus * cached)` repeatedly gets multiplied by 10,\n    //    and it should not overflow.\n    //\n    // the first gives `64 + GAMMA <= 32`, while the second gives `10 * 2^-ALPHA <= 2^64`;\n    // -60 and -32 is the maximal range with this constraint, and V8 also uses them.\n    let (minusk, cached) = cached_power(ALPHA - plus.e - 64, GAMMA - plus.e - 64);\n\n    // scale fps. this gives the maximal error of 1 ulp (proved from Theorem 5.1).\n    let plus = plus.mul(&cached);\n    let minus = minus.mul(&cached);\n    let v = v.mul(&cached);\n    debug_assert_eq!(plus.e, minus.e);\n    debug_assert_eq!(plus.e, v.e);\n\n    //         +- actual range of minus\n    //   | <---|---------------------- unsafe region --------------------------> |\n    //   |     |                                                                 |\n    //   |  |<--->|  | <--------------- safe region ---------------> |           |\n    //   |  |     |  |                                               |           |\n    //   |1 ulp|1 ulp|                 |1 ulp|1 ulp|                 |1 ulp|1 ulp|\n    //   |<--->|<--->|                 |<--->|<--->|                 |<--->|<--->|\n    //   |-----|-----|-------...-------|-----|-----|-------...-------|-----|-----|\n    //   |   minus   |                 |     v     |                 |   plus    |\n    // minus1     minus0           v - 1 ulp   v + 1 ulp           plus0       plus1\n    //\n    // above `minus`, `v` and `plus` are *quantized* approximations (error < 1 ulp).\n    // as we don't know the error is positive or negative, we use two approximations spaced equally\n    // and have the maximal error of 2 ulps.\n    //\n    // the \"unsafe region\" is a liberal interval which we initially generate.\n    // the \"safe region\" is a conservative interval which we only accept.\n    // we start with the correct repr within the unsafe region, and try to find the closest repr\n    // to `v` which is also within the safe region. if we can't, we give up.\n    let plus1 = plus.f + 1;\n    //  let plus0 = plus.f - 1; // only for explanation\n    //  let minus0 = minus.f + 1; // only for explanation\n    let minus1 = minus.f - 1;\n    let e = -plus.e as usize; // shared exponent\n\n    // divide `plus1` into integral and fractional parts.\n    // integral parts are guaranteed to fit in u32, since cached power guarantees `plus < 2^32`\n    // and normalized `plus.f` is always less than `2^64 - 2^4` due to the precision requirement.\n    let plus1int = (plus1 >> e) as u32;\n    let plus1frac = plus1 & ((1 << e) - 1);\n\n    // calculate the largest `10^max_kappa` no more than `plus1` (thus `plus1 < 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    let (max_kappa, max_ten_kappa) = max_pow10_no_more_than(plus1int);\n\n    let mut i = 0;\n    let exp = max_kappa as i16 - minusk + 1;\n\n    // Theorem 6.2: if `k` is the greatest integer s.t. `0 <= y mod 10^k <= y - x`,\n    //              then `V = floor(y / 10^k) * 10^k` is in `[x, y]` and one of the shortest\n    //              representations (with the minimal number of significant digits) in that range.\n    //\n    // find the digit length `kappa` between `(minus1, plus1)` as per Theorem 6.2.\n    // Theorem 6.2 can be adopted to exclude `x` by requiring `y mod 10^k < y - x` instead.\n    // (e.g., `x` = 32000, `y` = 32777; `kappa` = 2 since `y mod 10^3 = 777 < y - x = 777`.)\n    // the algorithm relies on the later verification phase to exclude `y`.\n    let delta1 = plus1 - minus1;\n    //  let delta1int = (delta1 >> e) as usize; // only for explanation\n    let delta1frac = delta1 & ((1 << e) - 1);\n\n    // render integral parts, while checking for the accuracy at each step.\n    let mut ten_kappa = max_ten_kappa; // 10^kappa\n    let mut remainder = plus1int; // digits yet to be rendered\n    loop {\n        // we always have at least one digit to render, as `plus1 >= 10^kappa`\n        // invariants:\n        // - `delta1int <= remainder < 10^(kappa+1)`\n        // - `plus1int = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = plus1int % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        let q = remainder / ten_kappa;\n        let r = remainder % ten_kappa;\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        let plus1rem = ((r as u64) << e) + plus1frac; // == (plus1 % 10^kappa) * 2^e\n        if plus1rem < delta1 {\n            // `plus1 % 10^kappa < delta1 = plus1 - minus1`; we've found the correct `kappa`.\n            let ten_kappa = (ten_kappa as u64) << e; // scale 10^kappa back to the shared exponent\n            return round_and_weed(\n                // SAFETY: we initialized that memory above.\n                unsafe { MaybeUninit::slice_assume_init_mut(&mut buf[..i]) },\n                exp,\n                plus1rem,\n                delta1,\n                plus1 - v.f,\n                ten_kappa,\n                1,\n            );\n        }\n\n        // break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 < 10^(max_kappa+1)`.\n        if i > max_kappa as usize {\n            debug_assert_eq!(ten_kappa, 1);\n            break;\n        }\n\n        // restore invariants\n        ten_kappa /= 10;\n        remainder = r;\n    }\n\n    // render fractional parts, while checking for the accuracy at each step.\n    // this time we rely on repeated multiplications, as division will lose the precision.\n    let mut remainder = plus1frac;\n    let mut threshold = delta1frac;\n    let mut ulp = 1;\n    loop {\n        // the next digit should be significant as we've tested that before breaking out\n        // invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder < 2^e`\n        // - `plus1frac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n\n        remainder *= 10; // won't overflow, `2^e * 10 < 2^64`\n        threshold *= 10;\n        ulp *= 10;\n\n        // divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        let q = remainder >> e;\n        let r = remainder & ((1 << e) - 1);\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        if r < threshold {\n            let ten_kappa = 1 << e; // implicit divisor\n            return round_and_weed(\n                // SAFETY: we initialized that memory above.\n                unsafe { MaybeUninit::slice_assume_init_mut(&mut buf[..i]) },\n                exp,\n                r,\n                threshold,\n                (plus1 - v.f) * ulp,\n                ten_kappa,\n                ulp,\n            );\n        }\n\n        // restore invariants\n        remainder = r;\n    }\n\n    // we've generated all significant digits of `plus1`, but not sure if it's the optimal one.\n    // for example, if `minus1` is 3.14153... and `plus1` is 3.14158..., there are 5 different\n    // shortest representation from 3.14154 to 3.14158 but we only have the greatest one.\n    // we have to successively decrease the last digit and check if this is the optimal repr.\n    // there are at most 9 candidates (..1 to ..9), so this is fairly quick. (\"rounding\" phase)\n    //\n    // the function checks if this \"optimal\" repr is actually within the ulp ranges,\n    // and also, it is possible that the \"second-to-optimal\" repr can actually be optimal\n    // due to the rounding error. in either cases this returns `None`. (\"weeding\" phase)\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (plus1 % 10^kappa) * k`\n    // - `threshold = (plus1 - minus1) * k` (and also, `remainder < threshold`)\n    // - `plus1v = (plus1 - v) * k` (and also, `threshold > plus1v` from prior invariants)\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    fn round_and_weed(\n        buf: &mut [u8],\n        exp: i16,\n        remainder: u64,\n        threshold: u64,\n        plus1v: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -> Option<(&[u8], i16)> {\n        assert!(!buf.is_empty());\n\n        // produce two approximations to `v` (actually `plus1 - v`) within 1.5 ulps.\n        // the resulting representation should be the closest representation to both.\n        //\n        // here `plus1 - v` is used since calculations are done with respect to `plus1`\n        // in order to avoid overflow/underflow (hence the seemingly swapped names).\n        let plus1v_down = plus1v + ulp; // plus1 - (v - 1 ulp)\n        let plus1v_up = plus1v - ulp; // plus1 - (v + 1 ulp)\n\n        // decrease the last digit and stop at the closest representation to `v + 1 ulp`.\n        let mut plus1w = remainder; // plus1w(n) = plus1 - w(n)\n        {\n            let last = buf.last_mut().unwrap();\n\n            // we work with the approximated digits `w(n)`, which is initially equal to `plus1 -\n            // plus1 % 10^kappa`. after running the loop body `n` times, `w(n) = plus1 -\n            // plus1 % 10^kappa - n * 10^kappa`. we set `plus1w(n) = plus1 - w(n) =\n            // plus1 % 10^kappa + n * 10^kappa` (thus `remainder = plus1w(0)`) to simplify checks.\n            // note that `plus1w(n)` is always increasing.\n            //\n            // we have three conditions to terminate. any of them will make the loop unable to\n            // proceed, but we then have at least one valid representation known to be closest to\n            // `v + 1 ulp` anyway. we will denote them as TC1 through TC3 for brevity.\n            //\n            // TC1: `w(n) <= v + 1 ulp`, i.e., this is the last repr that can be the closest one.\n            // this is equivalent to `plus1 - w(n) = plus1w(n) >= plus1 - (v + 1 ulp) = plus1v_up`.\n            // combined with TC2 (which checks if `w(n+1)` is valid), this prevents the possible\n            // overflow on the calculation of `plus1w(n)`.\n            //\n            // TC2: `w(n+1) < minus1`, i.e., the next repr definitely does not round to `v`.\n            // this is equivalent to `plus1 - w(n) + 10^kappa = plus1w(n) + 10^kappa >\n            // plus1 - minus1 = threshold`. the left hand side can overflow, but we know\n            // `threshold > plus1v`, so if TC1 is false, `threshold - plus1w(n) >\n            // threshold - (plus1v - 1 ulp) > 1 ulp` and we can safely test if\n            // `threshold - plus1w(n) < 10^kappa` instead.\n            //\n            // TC3: `abs(w(n) - (v + 1 ulp)) <= abs(w(n+1) - (v + 1 ulp))`, i.e., the next repr is\n            // no closer to `v + 1 ulp` than the current repr. given `z(n) = plus1v_up - plus1w(n)`,\n            // this becomes `abs(z(n)) <= abs(z(n+1))`. again assuming that TC1 is false, we have\n            // `z(n) > 0`. we have two cases to consider:\n            //\n            // - when `z(n+1) >= 0`: TC3 becomes `z(n) <= z(n+1)`. as `plus1w(n)` is increasing,\n            //   `z(n)` should be decreasing and this is clearly false.\n            // - when `z(n+1) < 0`:\n            //   - TC3a: the precondition is `plus1v_up < plus1w(n) + 10^kappa`. assuming TC2 is\n            //     false, `threshold >= plus1w(n) + 10^kappa` so it cannot overflow.\n            //   - TC3b: TC3 becomes `z(n) <= -z(n+1)`, i.e., `plus1v_up - plus1w(n) >=\n            //     plus1w(n+1) - plus1v_up = plus1w(n) + 10^kappa - plus1v_up`. the negated TC1\n            //     gives `plus1v_up > plus1w(n)`, so it cannot overflow or underflow when\n            //     combined with TC3a.\n            //\n            // consequently, we should stop when `TC1 || TC2 || (TC3a && TC3b)`. the following is\n            // equal to its inverse, `!TC1 && !TC2 && (!TC3a || !TC3b)`.\n            while plus1w < plus1v_up\n                && threshold - plus1w >= ten_kappa\n                && (plus1w + ten_kappa < plus1v_up\n                    || plus1v_up - plus1w >= plus1w + ten_kappa - plus1v_up)\n            {\n                *last -= 1;\n                debug_assert!(*last > b'0'); // the shortest repr cannot end with `0`\n                plus1w += ten_kappa;\n            }\n        }\n\n        // check if this representation is also the closest representation to `v - 1 ulp`.\n        //\n        // this is simply same to the terminating conditions for `v + 1 ulp`, with all `plus1v_up`\n        // replaced by `plus1v_down` instead. overflow analysis equally holds.\n        if plus1w < plus1v_down\n            && threshold - plus1w >= ten_kappa\n            && (plus1w + ten_kappa < plus1v_down\n                || plus1v_down - plus1w >= plus1w + ten_kappa - plus1v_down)\n        {\n            return None;\n        }\n\n        // now we have the closest representation to `v` between `plus1` and `minus1`.\n        // this is too liberal, though, so we reject any `w(n)` not between `plus0` and `minus0`,\n        // i.e., `plus1 - plus1w(n) <= minus0` or `plus1 - plus1w(n) >= plus0`. we utilize the facts\n        // that `threshold = plus1 - minus1` and `plus1 - plus0 = minus0 - minus1 = 2 ulp`.\n        if 2 * ulp <= plus1w && plus1w <= threshold - 4 * ulp { Some((buf, exp)) } else { None }\n    }\n}\n\n/// The shortest mode implementation for Grisu with Dragon fallback.\n///\n/// This should be used for most cases.\npub fn format_shortest<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n) -> (/*digits*/ &'a [u8], /*exp*/ i16) {\n    use crate::num::flt2dec::strategy::dragon::format_shortest as fallback;\n    // SAFETY: The borrow checker is not smart enough to let us use `buf`\n    // in the second branch, so we launder the lifetime here. But we only re-use\n    // `buf` if `format_shortest_opt` returned `None` so this is okay.\n    match format_shortest_opt(d, unsafe { &mut *(buf as *mut _) }) {\n        Some(ret) => ret,\n        None => fallback(d, buf),\n    }\n}\n\n/// The exact and fixed mode implementation for Grisu.\n///\n/// It returns `None` when it would return an inexact representation otherwise.\npub fn format_exact_opt<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n    limit: i16,\n) -> Option<(/*digits*/ &'a [u8], /*exp*/ i16)> {\n    assert!(d.mant > 0);\n    assert!(d.mant < (1 << 61)); // we need at least three bits of additional precision\n    assert!(!buf.is_empty());\n\n    // normalize and scale `v`.\n    let v = Fp { f: d.mant, e: d.exp }.normalize();\n    let (minusk, cached) = cached_power(ALPHA - v.e - 64, GAMMA - v.e - 64);\n    let v = v.mul(&cached);\n\n    // divide `v` into integral and fractional parts.\n    let e = -v.e as usize;\n    let vint = (v.f >> e) as u32;\n    let vfrac = v.f & ((1 << e) - 1);\n\n    let requested_digits = buf.len();\n\n    const POW10_UP_TO_9: [u32; 10] =\n        [1, 10, 100, 1000, 10_000, 100_000, 1_000_000, 10_000_000, 100_000_000, 1_000_000_000];\n\n    // We deviate from the original algorithm here and do some early checks to determine if we can satisfy requested_digits.\n    // If we determine that we can't, we exit early and avoid most of the heavy lifting that the algorithm otherwise does.\n    //\n    // When vfrac is zero, we can easily determine if vint can satisfy requested digits:\n    //      If requested_digits >= 11, vint is not able to exhaust the count by itself since 10^(11 -1) > u32 max value >= vint.\n    //      If vint < 10^(requested_digits - 1), vint cannot exhaust the count.\n    //      Otherwise, vint might be able to exhaust the count and we need to execute the rest of the code.\n    if (vfrac == 0) && ((requested_digits >= 11) || (vint < POW10_UP_TO_9[requested_digits - 1])) {\n        return None;\n    }\n\n    // both old `v` and new `v` (scaled by `10^-k`) has an error of < 1 ulp (Theorem 5.1).\n    // as we don't know the error is positive or negative, we use two approximations\n    // spaced equally and have the maximal error of 2 ulps (same to the shortest case).\n    //\n    // the goal is to find the exactly rounded series of digits that are common to\n    // both `v - 1 ulp` and `v + 1 ulp`, so that we are maximally confident.\n    // if this is not possible, we don't know which one is the correct output for `v`,\n    // so we give up and fall back.\n    //\n    // `err` is defined as `1 ulp * 2^e` here (same to the ulp in `vfrac`),\n    // and we will scale it whenever `v` gets scaled.\n    let mut err = 1;\n\n    // calculate the largest `10^max_kappa` no more than `v` (thus `v < 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    let (max_kappa, max_ten_kappa) = max_pow10_no_more_than(vint);\n\n    let mut i = 0;\n    let exp = max_kappa as i16 - minusk + 1;\n\n    // if we are working with the last-digit limitation, we need to shorten the buffer\n    // before the actual rendering in order to avoid double rounding.\n    // note that we have to enlarge the buffer again when rounding up happens!\n    let len = if exp <= limit {\n        // oops, we cannot even produce *one* digit.\n        // this is possible when, say, we've got something like 9.5 and it's being rounded to 10.\n        //\n        // in principle we can immediately call `possibly_round` with an empty buffer,\n        // but scaling `max_ten_kappa << e` by 10 can result in overflow.\n        // thus we are being sloppy here and widen the error range by a factor of 10.\n        // this will increase the false negative rate, but only very, *very* slightly;\n        // it can only matter noticeably when the mantissa is bigger than 60 bits.\n        //\n        // SAFETY: `len=0`, so the obligation of having initialized this memory is trivial.\n        return unsafe {\n            possibly_round(buf, 0, exp, limit, v.f / 10, (max_ten_kappa as u64) << e, err << e)\n        };\n    } else if ((exp as i32 - limit as i32) as usize) < buf.len() {\n        (exp - limit) as usize\n    } else {\n        buf.len()\n    };\n    debug_assert!(len > 0);\n\n    // render integral parts.\n    // the error is entirely fractional, so we don't need to check it in this part.\n    let mut kappa = max_kappa as i16;\n    let mut ten_kappa = max_ten_kappa; // 10^kappa\n    let mut remainder = vint; // digits yet to be rendered\n    loop {\n        // we always have at least one digit to render\n        // invariants:\n        // - `remainder < 10^(kappa+1)`\n        // - `vint = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = vint % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        let q = remainder / ten_kappa;\n        let r = remainder % ten_kappa;\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        // is the buffer full? run the rounding pass with the remainder.\n        if i == len {\n            let vrem = ((r as u64) << e) + vfrac; // == (v % 10^kappa) * 2^e\n            // SAFETY: we have initialized `len` many bytes.\n            return unsafe {\n                possibly_round(buf, len, exp, limit, vrem, (ten_kappa as u64) << e, err << e)\n            };\n        }\n\n        // break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 < 10^(max_kappa+1)`.\n        if i > max_kappa as usize {\n            debug_assert_eq!(ten_kappa, 1);\n            debug_assert_eq!(kappa, 0);\n            break;\n        }\n\n        // restore invariants\n        kappa -= 1;\n        ten_kappa /= 10;\n        remainder = r;\n    }\n\n    // render fractional parts.\n    //\n    // in principle we can continue to the last available digit and check for the accuracy.\n    // unfortunately we are working with the finite-sized integers, so we need some criterion\n    // to detect the overflow. V8 uses `remainder > err`, which becomes false when\n    // the first `i` significant digits of `v - 1 ulp` and `v` differ. however this rejects\n    // too many otherwise valid input.\n    //\n    // since the later phase has a correct overflow detection, we instead use tighter criterion:\n    // we continue til `err` exceeds `10^kappa / 2`, so that the range between `v - 1 ulp` and\n    // `v + 1 ulp` definitely contains two or more rounded representations. this is same to\n    // the first two comparisons from `possibly_round`, for the reference.\n    let mut remainder = vfrac;\n    let maxerr = 1 << (e - 1);\n    while err < maxerr {\n        // invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder < 2^e`\n        // - `vfrac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n        // - `err = 10^(n-m)`\n\n        remainder *= 10; // won't overflow, `2^e * 10 < 2^64`\n        err *= 10; // won't overflow, `err * 10 < 2^e * 5 < 2^64`\n\n        // divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        let q = remainder >> e;\n        let r = remainder & ((1 << e) - 1);\n        debug_assert!(q < 10);\n        buf[i] = MaybeUninit::new(b'0' + q as u8);\n        i += 1;\n\n        // is the buffer full? run the rounding pass with the remainder.\n        if i == len {\n            // SAFETY: we have initialized `len` many bytes.\n            return unsafe { possibly_round(buf, len, exp, limit, r, 1 << e, err) };\n        }\n\n        // restore invariants\n        remainder = r;\n    }\n\n    // further calculation is useless (`possibly_round` definitely fails), so we give up.\n    return None;\n\n    // we've generated all requested digits of `v`, which should be also same to corresponding\n    // digits of `v - 1 ulp`. now we check if there is a unique representation shared by\n    // both `v - 1 ulp` and `v + 1 ulp`; this can be either same to generated digits, or\n    // to the rounded-up version of those digits. if the range contains multiple representations\n    // of the same length, we cannot be sure and should return `None` instead.\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (v % 10^kappa) * k`\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    //\n    // SAFETY: the first `len` bytes of `buf` must be initialized.\n    unsafe fn possibly_round(\n        buf: &mut [MaybeUninit<u8>],\n        mut len: usize,\n        mut exp: i16,\n        limit: i16,\n        remainder: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -> Option<(&[u8], i16)> {\n        debug_assert!(remainder < ten_kappa);\n\n        //           10^kappa\n        //    :   :   :<->:   :\n        //    :   :   :   :   :\n        //    :|1 ulp|1 ulp|  :\n        //    :|<--->|<--->|  :\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // (for the reference, the dotted line indicates the exact value for\n        // possible representations in given number of digits.)\n        //\n        // error is too large that there are at least three possible representations\n        // between `v - 1 ulp` and `v + 1 ulp`. we cannot determine which one is correct.\n        if ulp >= ten_kappa {\n            return None;\n        }\n\n        //    10^kappa\n        //   :<------->:\n        //   :         :\n        //   : |1 ulp|1 ulp|\n        //   : |<--->|<--->|\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // in fact, 1/2 ulp is enough to introduce two possible representations.\n        // (remember that we need a unique representation for both `v - 1 ulp` and `v + 1 ulp`.)\n        // this won't overflow, as `ulp < ten_kappa` from the first check.\n        if ten_kappa - ulp <= ulp {\n            return None;\n        }\n\n        //     remainder\n        //       :<->|                           :\n        //       :   |                           :\n        //       :<--------- 10^kappa ---------->:\n        //     | :   |                           :\n        //     |1 ulp|1 ulp|                     :\n        //     |<--->|<--->|                     :\n        // ----|-----|-----|------------------------\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // if `v + 1 ulp` is closer to the rounded-down representation (which is already in `buf`),\n        // then we can safely return. note that `v - 1 ulp` *can* be less than the current\n        // representation, but as `1 ulp < 10^kappa / 2`, this condition is enough:\n        // the distance between `v - 1 ulp` and the current representation\n        // cannot exceed `10^kappa / 2`.\n        //\n        // the condition equals to `remainder + ulp < 10^kappa / 2`.\n        // since this can easily overflow, first check if `remainder < 10^kappa / 2`.\n        // we've already verified that `ulp < 10^kappa / 2`, so as long as\n        // `10^kappa` did not overflow after all, the second check is fine.\n        if ten_kappa - remainder > remainder && ten_kappa - 2 * remainder >= 2 * ulp {\n            // SAFETY: our caller initialized that memory.\n            return Some((unsafe { MaybeUninit::slice_assume_init_ref(&buf[..len]) }, exp));\n        }\n\n        //   :<------- remainder ------>|   :\n        //   :                          |   :\n        //   :<--------- 10^kappa --------->:\n        //   :                    |     |   : |\n        //   :                    |1 ulp|1 ulp|\n        //   :                    |<--->|<--->|\n        // -----------------------|-----|-----|-----\n        //                        |     v     |\n        //                    v - 1 ulp   v + 1 ulp\n        //\n        // on the other hands, if `v - 1 ulp` is closer to the rounded-up representation,\n        // we should round up and return. for the same reason we don't need to check `v + 1 ulp`.\n        //\n        // the condition equals to `remainder - ulp >= 10^kappa / 2`.\n        // again we first check if `remainder > ulp` (note that this is not `remainder >= ulp`,\n        // as `10^kappa` is never zero). also note that `remainder - ulp <= 10^kappa`,\n        // so the second check does not overflow.\n        if remainder > ulp && ten_kappa - (remainder - ulp) <= remainder - ulp {\n            if let Some(c) =\n                // SAFETY: our caller must have initialized that memory.\n                round_up(unsafe { MaybeUninit::slice_assume_init_mut(&mut buf[..len]) })\n            {\n                // only add an additional digit when we've been requested the fixed precision.\n                // we also need to check that, if the original buffer was empty,\n                // the additional digit can only be added when `exp == limit` (edge case).\n                exp += 1;\n                if exp > limit && len < buf.len() {\n                    buf[len] = MaybeUninit::new(c);\n                    len += 1;\n                }\n            }\n            // SAFETY: we and our caller initialized that memory.\n            return Some((unsafe { MaybeUninit::slice_assume_init_ref(&buf[..len]) }, exp));\n        }\n\n        // otherwise we are doomed (i.e., some values between `v - 1 ulp` and `v + 1 ulp` are\n        // rounding down and others are rounding up) and give up.\n        None\n    }\n}\n\n/// The exact and fixed mode implementation for Grisu with Dragon fallback.\n///\n/// This should be used for most cases.\npub fn format_exact<'a>(\n    d: &Decoded,\n    buf: &'a mut [MaybeUninit<u8>],\n    limit: i16,\n) -> (/*digits*/ &'a [u8], /*exp*/ i16) {\n    use crate::num::flt2dec::strategy::dragon::format_exact as fallback;\n    // SAFETY: The borrow checker is not smart enough to let us use `buf`\n    // in the second branch, so we launder the lifetime here. But we only re-use\n    // `buf` if `format_exact_opt` returned `None` so this is okay.\n    match format_exact_opt(d, unsafe { &mut *(buf as *mut _) }, limit) {\n        Some(ret) => ret,\n        None => fallback(d, buf, limit),\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/num/flt2dec/strategy/grisu.rs`.\"><title>grisu.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../../\" data-static-root-path=\"../../../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\" open=\"\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../../../src/core/num/flt2dec/strategy/grisu.rs.html\" class=\"selected\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Rust adaptation of the Grisu3 algorithm described in \"Printing Floating-Point Numbers Quickly\n//! and Accurately with Integers\"[^1]. It uses about 1KB of precomputed table, and in turn, it's\n//! very quick for most inputs.\n//!\n//! [^1]: Florian Loitsch. 2010. Printing floating-point numbers quickly and\n//!   accurately with integers. SIGPLAN Not. 45, 6 (June 2010), 233-243.\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::mem::MaybeUninit;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::diy_float::Fp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::flt2dec::{round_up, Decoded, MAX_SIG_DIGITS};\n\n<span class=\"comment\">// see the comments in `format_shortest_opt` for the rationale.\n</span><span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub const </span>ALPHA: i16 = -<span class=\"number\">60</span>;\n<span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub const </span>GAMMA: i16 = -<span class=\"number\">32</span>;\n\n<span class=\"comment\">/*\n# the following Python code generates this table:\nfor i in xrange(-308, 333, 8):\n    if i &gt;= 0: f = 10**i; e = 0\n    else: f = 2**(80-4*i) // 10**-i; e = 4 * i - 80\n    l = f.bit_length()\n    f = ((f &lt;&lt; 64 &gt;&gt; (l-1)) + 1) &gt;&gt; 1; e += l - 64\n    print '    (%#018x, %5d, %4d),' % (f, e, i)\n*/\n\n</span><span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub static </span>CACHED_POW10: [(u64, i16, i16); <span class=\"number\">81</span>] = [\n    <span class=\"comment\">// (f, e, k)\n    </span>(<span class=\"number\">0xe61acf033d1a45df</span>, -<span class=\"number\">1087</span>, -<span class=\"number\">308</span>),\n    (<span class=\"number\">0xab70fe17c79ac6ca</span>, -<span class=\"number\">1060</span>, -<span class=\"number\">300</span>),\n    (<span class=\"number\">0xff77b1fcbebcdc4f</span>, -<span class=\"number\">1034</span>, -<span class=\"number\">292</span>),\n    (<span class=\"number\">0xbe5691ef416bd60c</span>, -<span class=\"number\">1007</span>, -<span class=\"number\">284</span>),\n    (<span class=\"number\">0x8dd01fad907ffc3c</span>, -<span class=\"number\">980</span>, -<span class=\"number\">276</span>),\n    (<span class=\"number\">0xd3515c2831559a83</span>, -<span class=\"number\">954</span>, -<span class=\"number\">268</span>),\n    (<span class=\"number\">0x9d71ac8fada6c9b5</span>, -<span class=\"number\">927</span>, -<span class=\"number\">260</span>),\n    (<span class=\"number\">0xea9c227723ee8bcb</span>, -<span class=\"number\">901</span>, -<span class=\"number\">252</span>),\n    (<span class=\"number\">0xaecc49914078536d</span>, -<span class=\"number\">874</span>, -<span class=\"number\">244</span>),\n    (<span class=\"number\">0x823c12795db6ce57</span>, -<span class=\"number\">847</span>, -<span class=\"number\">236</span>),\n    (<span class=\"number\">0xc21094364dfb5637</span>, -<span class=\"number\">821</span>, -<span class=\"number\">228</span>),\n    (<span class=\"number\">0x9096ea6f3848984f</span>, -<span class=\"number\">794</span>, -<span class=\"number\">220</span>),\n    (<span class=\"number\">0xd77485cb25823ac7</span>, -<span class=\"number\">768</span>, -<span class=\"number\">212</span>),\n    (<span class=\"number\">0xa086cfcd97bf97f4</span>, -<span class=\"number\">741</span>, -<span class=\"number\">204</span>),\n    (<span class=\"number\">0xef340a98172aace5</span>, -<span class=\"number\">715</span>, -<span class=\"number\">196</span>),\n    (<span class=\"number\">0xb23867fb2a35b28e</span>, -<span class=\"number\">688</span>, -<span class=\"number\">188</span>),\n    (<span class=\"number\">0x84c8d4dfd2c63f3b</span>, -<span class=\"number\">661</span>, -<span class=\"number\">180</span>),\n    (<span class=\"number\">0xc5dd44271ad3cdba</span>, -<span class=\"number\">635</span>, -<span class=\"number\">172</span>),\n    (<span class=\"number\">0x936b9fcebb25c996</span>, -<span class=\"number\">608</span>, -<span class=\"number\">164</span>),\n    (<span class=\"number\">0xdbac6c247d62a584</span>, -<span class=\"number\">582</span>, -<span class=\"number\">156</span>),\n    (<span class=\"number\">0xa3ab66580d5fdaf6</span>, -<span class=\"number\">555</span>, -<span class=\"number\">148</span>),\n    (<span class=\"number\">0xf3e2f893dec3f126</span>, -<span class=\"number\">529</span>, -<span class=\"number\">140</span>),\n    (<span class=\"number\">0xb5b5ada8aaff80b8</span>, -<span class=\"number\">502</span>, -<span class=\"number\">132</span>),\n    (<span class=\"number\">0x87625f056c7c4a8b</span>, -<span class=\"number\">475</span>, -<span class=\"number\">124</span>),\n    (<span class=\"number\">0xc9bcff6034c13053</span>, -<span class=\"number\">449</span>, -<span class=\"number\">116</span>),\n    (<span class=\"number\">0x964e858c91ba2655</span>, -<span class=\"number\">422</span>, -<span class=\"number\">108</span>),\n    (<span class=\"number\">0xdff9772470297ebd</span>, -<span class=\"number\">396</span>, -<span class=\"number\">100</span>),\n    (<span class=\"number\">0xa6dfbd9fb8e5b88f</span>, -<span class=\"number\">369</span>, -<span class=\"number\">92</span>),\n    (<span class=\"number\">0xf8a95fcf88747d94</span>, -<span class=\"number\">343</span>, -<span class=\"number\">84</span>),\n    (<span class=\"number\">0xb94470938fa89bcf</span>, -<span class=\"number\">316</span>, -<span class=\"number\">76</span>),\n    (<span class=\"number\">0x8a08f0f8bf0f156b</span>, -<span class=\"number\">289</span>, -<span class=\"number\">68</span>),\n    (<span class=\"number\">0xcdb02555653131b6</span>, -<span class=\"number\">263</span>, -<span class=\"number\">60</span>),\n    (<span class=\"number\">0x993fe2c6d07b7fac</span>, -<span class=\"number\">236</span>, -<span class=\"number\">52</span>),\n    (<span class=\"number\">0xe45c10c42a2b3b06</span>, -<span class=\"number\">210</span>, -<span class=\"number\">44</span>),\n    (<span class=\"number\">0xaa242499697392d3</span>, -<span class=\"number\">183</span>, -<span class=\"number\">36</span>),\n    (<span class=\"number\">0xfd87b5f28300ca0e</span>, -<span class=\"number\">157</span>, -<span class=\"number\">28</span>),\n    (<span class=\"number\">0xbce5086492111aeb</span>, -<span class=\"number\">130</span>, -<span class=\"number\">20</span>),\n    (<span class=\"number\">0x8cbccc096f5088cc</span>, -<span class=\"number\">103</span>, -<span class=\"number\">12</span>),\n    (<span class=\"number\">0xd1b71758e219652c</span>, -<span class=\"number\">77</span>, -<span class=\"number\">4</span>),\n    (<span class=\"number\">0x9c40000000000000</span>, -<span class=\"number\">50</span>, <span class=\"number\">4</span>),\n    (<span class=\"number\">0xe8d4a51000000000</span>, -<span class=\"number\">24</span>, <span class=\"number\">12</span>),\n    (<span class=\"number\">0xad78ebc5ac620000</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>),\n    (<span class=\"number\">0x813f3978f8940984</span>, <span class=\"number\">30</span>, <span class=\"number\">28</span>),\n    (<span class=\"number\">0xc097ce7bc90715b3</span>, <span class=\"number\">56</span>, <span class=\"number\">36</span>),\n    (<span class=\"number\">0x8f7e32ce7bea5c70</span>, <span class=\"number\">83</span>, <span class=\"number\">44</span>),\n    (<span class=\"number\">0xd5d238a4abe98068</span>, <span class=\"number\">109</span>, <span class=\"number\">52</span>),\n    (<span class=\"number\">0x9f4f2726179a2245</span>, <span class=\"number\">136</span>, <span class=\"number\">60</span>),\n    (<span class=\"number\">0xed63a231d4c4fb27</span>, <span class=\"number\">162</span>, <span class=\"number\">68</span>),\n    (<span class=\"number\">0xb0de65388cc8ada8</span>, <span class=\"number\">189</span>, <span class=\"number\">76</span>),\n    (<span class=\"number\">0x83c7088e1aab65db</span>, <span class=\"number\">216</span>, <span class=\"number\">84</span>),\n    (<span class=\"number\">0xc45d1df942711d9a</span>, <span class=\"number\">242</span>, <span class=\"number\">92</span>),\n    (<span class=\"number\">0x924d692ca61be758</span>, <span class=\"number\">269</span>, <span class=\"number\">100</span>),\n    (<span class=\"number\">0xda01ee641a708dea</span>, <span class=\"number\">295</span>, <span class=\"number\">108</span>),\n    (<span class=\"number\">0xa26da3999aef774a</span>, <span class=\"number\">322</span>, <span class=\"number\">116</span>),\n    (<span class=\"number\">0xf209787bb47d6b85</span>, <span class=\"number\">348</span>, <span class=\"number\">124</span>),\n    (<span class=\"number\">0xb454e4a179dd1877</span>, <span class=\"number\">375</span>, <span class=\"number\">132</span>),\n    (<span class=\"number\">0x865b86925b9bc5c2</span>, <span class=\"number\">402</span>, <span class=\"number\">140</span>),\n    (<span class=\"number\">0xc83553c5c8965d3d</span>, <span class=\"number\">428</span>, <span class=\"number\">148</span>),\n    (<span class=\"number\">0x952ab45cfa97a0b3</span>, <span class=\"number\">455</span>, <span class=\"number\">156</span>),\n    (<span class=\"number\">0xde469fbd99a05fe3</span>, <span class=\"number\">481</span>, <span class=\"number\">164</span>),\n    (<span class=\"number\">0xa59bc234db398c25</span>, <span class=\"number\">508</span>, <span class=\"number\">172</span>),\n    (<span class=\"number\">0xf6c69a72a3989f5c</span>, <span class=\"number\">534</span>, <span class=\"number\">180</span>),\n    (<span class=\"number\">0xb7dcbf5354e9bece</span>, <span class=\"number\">561</span>, <span class=\"number\">188</span>),\n    (<span class=\"number\">0x88fcf317f22241e2</span>, <span class=\"number\">588</span>, <span class=\"number\">196</span>),\n    (<span class=\"number\">0xcc20ce9bd35c78a5</span>, <span class=\"number\">614</span>, <span class=\"number\">204</span>),\n    (<span class=\"number\">0x98165af37b2153df</span>, <span class=\"number\">641</span>, <span class=\"number\">212</span>),\n    (<span class=\"number\">0xe2a0b5dc971f303a</span>, <span class=\"number\">667</span>, <span class=\"number\">220</span>),\n    (<span class=\"number\">0xa8d9d1535ce3b396</span>, <span class=\"number\">694</span>, <span class=\"number\">228</span>),\n    (<span class=\"number\">0xfb9b7cd9a4a7443c</span>, <span class=\"number\">720</span>, <span class=\"number\">236</span>),\n    (<span class=\"number\">0xbb764c4ca7a44410</span>, <span class=\"number\">747</span>, <span class=\"number\">244</span>),\n    (<span class=\"number\">0x8bab8eefb6409c1a</span>, <span class=\"number\">774</span>, <span class=\"number\">252</span>),\n    (<span class=\"number\">0xd01fef10a657842c</span>, <span class=\"number\">800</span>, <span class=\"number\">260</span>),\n    (<span class=\"number\">0x9b10a4e5e9913129</span>, <span class=\"number\">827</span>, <span class=\"number\">268</span>),\n    (<span class=\"number\">0xe7109bfba19c0c9d</span>, <span class=\"number\">853</span>, <span class=\"number\">276</span>),\n    (<span class=\"number\">0xac2820d9623bf429</span>, <span class=\"number\">880</span>, <span class=\"number\">284</span>),\n    (<span class=\"number\">0x80444b5e7aa7cf85</span>, <span class=\"number\">907</span>, <span class=\"number\">292</span>),\n    (<span class=\"number\">0xbf21e44003acdd2d</span>, <span class=\"number\">933</span>, <span class=\"number\">300</span>),\n    (<span class=\"number\">0x8e679c2f5e44ff8f</span>, <span class=\"number\">960</span>, <span class=\"number\">308</span>),\n    (<span class=\"number\">0xd433179d9c8cb841</span>, <span class=\"number\">986</span>, <span class=\"number\">316</span>),\n    (<span class=\"number\">0x9e19db92b4e31ba9</span>, <span class=\"number\">1013</span>, <span class=\"number\">324</span>),\n    (<span class=\"number\">0xeb96bf6ebadf77d9</span>, <span class=\"number\">1039</span>, <span class=\"number\">332</span>),\n];\n\n<span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub const </span>CACHED_POW10_FIRST_E: i16 = -<span class=\"number\">1087</span>;\n<span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub const </span>CACHED_POW10_LAST_E: i16 = <span class=\"number\">1039</span>;\n\n<span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub fn </span>cached_power(alpha: i16, gamma: i16) -&gt; (i16, Fp) {\n    <span class=\"kw\">let </span>offset = CACHED_POW10_FIRST_E <span class=\"kw\">as </span>i32;\n    <span class=\"kw\">let </span>range = (CACHED_POW10.len() <span class=\"kw\">as </span>i32) - <span class=\"number\">1</span>;\n    <span class=\"kw\">let </span>domain = (CACHED_POW10_LAST_E - CACHED_POW10_FIRST_E) <span class=\"kw\">as </span>i32;\n    <span class=\"kw\">let </span>idx = ((gamma <span class=\"kw\">as </span>i32) - offset) * range / domain;\n    <span class=\"kw\">let </span>(f, e, k) = CACHED_POW10[idx <span class=\"kw\">as </span>usize];\n    <span class=\"macro\">debug_assert!</span>(alpha &lt;= e &amp;&amp; e &lt;= gamma);\n    (k, Fp { f, e })\n}\n\n<span class=\"doccomment\">/// Given `x &gt; 0`, returns `(k, 10^k)` such that `10^k &lt;= x &lt; 10^(k+1)`.\n</span><span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">pub fn </span>max_pow10_no_more_than(x: u32) -&gt; (u8, u32) {\n    <span class=\"macro\">debug_assert!</span>(x &gt; <span class=\"number\">0</span>);\n\n    <span class=\"kw\">const </span>X9: u32 = <span class=\"number\">10_0000_0000</span>;\n    <span class=\"kw\">const </span>X8: u32 = <span class=\"number\">1_0000_0000</span>;\n    <span class=\"kw\">const </span>X7: u32 = <span class=\"number\">1000_0000</span>;\n    <span class=\"kw\">const </span>X6: u32 = <span class=\"number\">100_0000</span>;\n    <span class=\"kw\">const </span>X5: u32 = <span class=\"number\">10_0000</span>;\n    <span class=\"kw\">const </span>X4: u32 = <span class=\"number\">1_0000</span>;\n    <span class=\"kw\">const </span>X3: u32 = <span class=\"number\">1000</span>;\n    <span class=\"kw\">const </span>X2: u32 = <span class=\"number\">100</span>;\n    <span class=\"kw\">const </span>X1: u32 = <span class=\"number\">10</span>;\n\n    <span class=\"kw\">if </span>x &lt; X4 {\n        <span class=\"kw\">if </span>x &lt; X2 {\n            <span class=\"kw\">if </span>x &lt; X1 { (<span class=\"number\">0</span>, <span class=\"number\">1</span>) } <span class=\"kw\">else </span>{ (<span class=\"number\">1</span>, X1) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw\">if </span>x &lt; X3 { (<span class=\"number\">2</span>, X2) } <span class=\"kw\">else </span>{ (<span class=\"number\">3</span>, X3) }\n        }\n    } <span class=\"kw\">else </span>{\n        <span class=\"kw\">if </span>x &lt; X6 {\n            <span class=\"kw\">if </span>x &lt; X5 { (<span class=\"number\">4</span>, X4) } <span class=\"kw\">else </span>{ (<span class=\"number\">5</span>, X5) }\n        } <span class=\"kw\">else if </span>x &lt; X8 {\n            <span class=\"kw\">if </span>x &lt; X7 { (<span class=\"number\">6</span>, X6) } <span class=\"kw\">else </span>{ (<span class=\"number\">7</span>, X7) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw\">if </span>x &lt; X9 { (<span class=\"number\">8</span>, X8) } <span class=\"kw\">else </span>{ (<span class=\"number\">9</span>, X9) }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// The shortest mode implementation for Grisu.\n///\n/// It returns `None` when it would return an inexact representation otherwise.\n</span><span class=\"kw\">pub fn </span>format_shortest_opt&lt;<span class=\"lifetime\">'a</span>&gt;(\n    d: <span class=\"kw-2\">&amp;</span>Decoded,\n    buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[MaybeUninit&lt;u8&gt;],\n) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(<span class=\"comment\">/*digits*/ </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[u8], <span class=\"comment\">/*exp*/ </span>i16)&gt; {\n    <span class=\"macro\">assert!</span>(d.mant &gt; <span class=\"number\">0</span>);\n    <span class=\"macro\">assert!</span>(d.minus &gt; <span class=\"number\">0</span>);\n    <span class=\"macro\">assert!</span>(d.plus &gt; <span class=\"number\">0</span>);\n    <span class=\"macro\">assert!</span>(d.mant.checked_add(d.plus).is_some());\n    <span class=\"macro\">assert!</span>(d.mant.checked_sub(d.minus).is_some());\n    <span class=\"macro\">assert!</span>(buf.len() &gt;= MAX_SIG_DIGITS);\n    <span class=\"macro\">assert!</span>(d.mant + d.plus &lt; (<span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">61</span>)); <span class=\"comment\">// we need at least three bits of additional precision\n\n    // start with the normalized values with the shared exponent\n    </span><span class=\"kw\">let </span>plus = Fp { f: d.mant + d.plus, e: d.exp }.normalize();\n    <span class=\"kw\">let </span>minus = Fp { f: d.mant - d.minus, e: d.exp }.normalize_to(plus.e);\n    <span class=\"kw\">let </span>v = Fp { f: d.mant, e: d.exp }.normalize_to(plus.e);\n\n    <span class=\"comment\">// find any `cached = 10^minusk` such that `ALPHA &lt;= minusk + plus.e + 64 &lt;= GAMMA`.\n    // since `plus` is normalized, this means `2^(62 + ALPHA) &lt;= plus * cached &lt; 2^(64 + GAMMA)`;\n    // given our choices of `ALPHA` and `GAMMA`, this puts `plus * cached` into `[4, 2^32)`.\n    //\n    // it is obviously desirable to maximize `GAMMA - ALPHA`,\n    // so that we don't need many cached powers of 10, but there are some considerations:\n    //\n    // 1. we want to keep `floor(plus * cached)` within `u32` since it needs a costly division.\n    //    (this is not really avoidable, remainder is required for accuracy estimation.)\n    // 2. the remainder of `floor(plus * cached)` repeatedly gets multiplied by 10,\n    //    and it should not overflow.\n    //\n    // the first gives `64 + GAMMA &lt;= 32`, while the second gives `10 * 2^-ALPHA &lt;= 2^64`;\n    // -60 and -32 is the maximal range with this constraint, and V8 also uses them.\n    </span><span class=\"kw\">let </span>(minusk, cached) = cached_power(ALPHA - plus.e - <span class=\"number\">64</span>, GAMMA - plus.e - <span class=\"number\">64</span>);\n\n    <span class=\"comment\">// scale fps. this gives the maximal error of 1 ulp (proved from Theorem 5.1).\n    </span><span class=\"kw\">let </span>plus = plus.mul(<span class=\"kw-2\">&amp;</span>cached);\n    <span class=\"kw\">let </span>minus = minus.mul(<span class=\"kw-2\">&amp;</span>cached);\n    <span class=\"kw\">let </span>v = v.mul(<span class=\"kw-2\">&amp;</span>cached);\n    <span class=\"macro\">debug_assert_eq!</span>(plus.e, minus.e);\n    <span class=\"macro\">debug_assert_eq!</span>(plus.e, v.e);\n\n    <span class=\"comment\">//         +- actual range of minus\n    //   | &lt;---|---------------------- unsafe region --------------------------&gt; |\n    //   |     |                                                                 |\n    //   |  |&lt;---&gt;|  | &lt;--------------- safe region ---------------&gt; |           |\n    //   |  |     |  |                                               |           |\n    //   |1 ulp|1 ulp|                 |1 ulp|1 ulp|                 |1 ulp|1 ulp|\n    //   |&lt;---&gt;|&lt;---&gt;|                 |&lt;---&gt;|&lt;---&gt;|                 |&lt;---&gt;|&lt;---&gt;|\n    //   |-----|-----|-------...-------|-----|-----|-------...-------|-----|-----|\n    //   |   minus   |                 |     v     |                 |   plus    |\n    // minus1     minus0           v - 1 ulp   v + 1 ulp           plus0       plus1\n    //\n    // above `minus`, `v` and `plus` are *quantized* approximations (error &lt; 1 ulp).\n    // as we don't know the error is positive or negative, we use two approximations spaced equally\n    // and have the maximal error of 2 ulps.\n    //\n    // the \"unsafe region\" is a liberal interval which we initially generate.\n    // the \"safe region\" is a conservative interval which we only accept.\n    // we start with the correct repr within the unsafe region, and try to find the closest repr\n    // to `v` which is also within the safe region. if we can't, we give up.\n    </span><span class=\"kw\">let </span>plus1 = plus.f + <span class=\"number\">1</span>;\n    <span class=\"comment\">//  let plus0 = plus.f - 1; // only for explanation\n    //  let minus0 = minus.f + 1; // only for explanation\n    </span><span class=\"kw\">let </span>minus1 = minus.f - <span class=\"number\">1</span>;\n    <span class=\"kw\">let </span>e = -plus.e <span class=\"kw\">as </span>usize; <span class=\"comment\">// shared exponent\n\n    // divide `plus1` into integral and fractional parts.\n    // integral parts are guaranteed to fit in u32, since cached power guarantees `plus &lt; 2^32`\n    // and normalized `plus.f` is always less than `2^64 - 2^4` due to the precision requirement.\n    </span><span class=\"kw\">let </span>plus1int = (plus1 &gt;&gt; e) <span class=\"kw\">as </span>u32;\n    <span class=\"kw\">let </span>plus1frac = plus1 &amp; ((<span class=\"number\">1 </span>&lt;&lt; e) - <span class=\"number\">1</span>);\n\n    <span class=\"comment\">// calculate the largest `10^max_kappa` no more than `plus1` (thus `plus1 &lt; 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    </span><span class=\"kw\">let </span>(max_kappa, max_ten_kappa) = max_pow10_no_more_than(plus1int);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>exp = max_kappa <span class=\"kw\">as </span>i16 - minusk + <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// Theorem 6.2: if `k` is the greatest integer s.t. `0 &lt;= y mod 10^k &lt;= y - x`,\n    //              then `V = floor(y / 10^k) * 10^k` is in `[x, y]` and one of the shortest\n    //              representations (with the minimal number of significant digits) in that range.\n    //\n    // find the digit length `kappa` between `(minus1, plus1)` as per Theorem 6.2.\n    // Theorem 6.2 can be adopted to exclude `x` by requiring `y mod 10^k &lt; y - x` instead.\n    // (e.g., `x` = 32000, `y` = 32777; `kappa` = 2 since `y mod 10^3 = 777 &lt; y - x = 777`.)\n    // the algorithm relies on the later verification phase to exclude `y`.\n    </span><span class=\"kw\">let </span>delta1 = plus1 - minus1;\n    <span class=\"comment\">//  let delta1int = (delta1 &gt;&gt; e) as usize; // only for explanation\n    </span><span class=\"kw\">let </span>delta1frac = delta1 &amp; ((<span class=\"number\">1 </span>&lt;&lt; e) - <span class=\"number\">1</span>);\n\n    <span class=\"comment\">// render integral parts, while checking for the accuracy at each step.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ten_kappa = max_ten_kappa; <span class=\"comment\">// 10^kappa\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>remainder = plus1int; <span class=\"comment\">// digits yet to be rendered\n    </span><span class=\"kw\">loop </span>{\n        <span class=\"comment\">// we always have at least one digit to render, as `plus1 &gt;= 10^kappa`\n        // invariants:\n        // - `delta1int &lt;= remainder &lt; 10^(kappa+1)`\n        // - `plus1int = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = plus1int % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        </span><span class=\"kw\">let </span>q = remainder / ten_kappa;\n        <span class=\"kw\">let </span>r = remainder % ten_kappa;\n        <span class=\"macro\">debug_assert!</span>(q &lt; <span class=\"number\">10</span>);\n        buf[i] = MaybeUninit::new(<span class=\"string\">b'0' </span>+ q <span class=\"kw\">as </span>u8);\n        i += <span class=\"number\">1</span>;\n\n        <span class=\"kw\">let </span>plus1rem = ((r <span class=\"kw\">as </span>u64) &lt;&lt; e) + plus1frac; <span class=\"comment\">// == (plus1 % 10^kappa) * 2^e\n        </span><span class=\"kw\">if </span>plus1rem &lt; delta1 {\n            <span class=\"comment\">// `plus1 % 10^kappa &lt; delta1 = plus1 - minus1`; we've found the correct `kappa`.\n            </span><span class=\"kw\">let </span>ten_kappa = (ten_kappa <span class=\"kw\">as </span>u64) &lt;&lt; e; <span class=\"comment\">// scale 10^kappa back to the shared exponent\n            </span><span class=\"kw\">return </span>round_and_weed(\n                <span class=\"comment\">// SAFETY: we initialized that memory above.\n                </span><span class=\"kw\">unsafe </span>{ MaybeUninit::slice_assume_init_mut(<span class=\"kw-2\">&amp;mut </span>buf[..i]) },\n                exp,\n                plus1rem,\n                delta1,\n                plus1 - v.f,\n                ten_kappa,\n                <span class=\"number\">1</span>,\n            );\n        }\n\n        <span class=\"comment\">// break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 &lt; 10^(max_kappa+1)`.\n        </span><span class=\"kw\">if </span>i &gt; max_kappa <span class=\"kw\">as </span>usize {\n            <span class=\"macro\">debug_assert_eq!</span>(ten_kappa, <span class=\"number\">1</span>);\n            <span class=\"kw\">break</span>;\n        }\n\n        <span class=\"comment\">// restore invariants\n        </span>ten_kappa /= <span class=\"number\">10</span>;\n        remainder = r;\n    }\n\n    <span class=\"comment\">// render fractional parts, while checking for the accuracy at each step.\n    // this time we rely on repeated multiplications, as division will lose the precision.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>remainder = plus1frac;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>threshold = delta1frac;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ulp = <span class=\"number\">1</span>;\n    <span class=\"kw\">loop </span>{\n        <span class=\"comment\">// the next digit should be significant as we've tested that before breaking out\n        // invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder &lt; 2^e`\n        // - `plus1frac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n\n        </span>remainder <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>; <span class=\"comment\">// won't overflow, `2^e * 10 &lt; 2^64`\n        </span>threshold <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>;\n        ulp <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>;\n\n        <span class=\"comment\">// divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        </span><span class=\"kw\">let </span>q = remainder &gt;&gt; e;\n        <span class=\"kw\">let </span>r = remainder &amp; ((<span class=\"number\">1 </span>&lt;&lt; e) - <span class=\"number\">1</span>);\n        <span class=\"macro\">debug_assert!</span>(q &lt; <span class=\"number\">10</span>);\n        buf[i] = MaybeUninit::new(<span class=\"string\">b'0' </span>+ q <span class=\"kw\">as </span>u8);\n        i += <span class=\"number\">1</span>;\n\n        <span class=\"kw\">if </span>r &lt; threshold {\n            <span class=\"kw\">let </span>ten_kappa = <span class=\"number\">1 </span>&lt;&lt; e; <span class=\"comment\">// implicit divisor\n            </span><span class=\"kw\">return </span>round_and_weed(\n                <span class=\"comment\">// SAFETY: we initialized that memory above.\n                </span><span class=\"kw\">unsafe </span>{ MaybeUninit::slice_assume_init_mut(<span class=\"kw-2\">&amp;mut </span>buf[..i]) },\n                exp,\n                r,\n                threshold,\n                (plus1 - v.f) * ulp,\n                ten_kappa,\n                ulp,\n            );\n        }\n\n        <span class=\"comment\">// restore invariants\n        </span>remainder = r;\n    }\n\n    <span class=\"comment\">// we've generated all significant digits of `plus1`, but not sure if it's the optimal one.\n    // for example, if `minus1` is 3.14153... and `plus1` is 3.14158..., there are 5 different\n    // shortest representation from 3.14154 to 3.14158 but we only have the greatest one.\n    // we have to successively decrease the last digit and check if this is the optimal repr.\n    // there are at most 9 candidates (..1 to ..9), so this is fairly quick. (\"rounding\" phase)\n    //\n    // the function checks if this \"optimal\" repr is actually within the ulp ranges,\n    // and also, it is possible that the \"second-to-optimal\" repr can actually be optimal\n    // due to the rounding error. in either cases this returns `None`. (\"weeding\" phase)\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (plus1 % 10^kappa) * k`\n    // - `threshold = (plus1 - minus1) * k` (and also, `remainder &lt; threshold`)\n    // - `plus1v = (plus1 - v) * k` (and also, `threshold &gt; plus1v` from prior invariants)\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    </span><span class=\"kw\">fn </span>round_and_weed(\n        buf: <span class=\"kw-2\">&amp;mut </span>[u8],\n        exp: i16,\n        remainder: u64,\n        threshold: u64,\n        plus1v: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(<span class=\"kw-2\">&amp;</span>[u8], i16)&gt; {\n        <span class=\"macro\">assert!</span>(!buf.is_empty());\n\n        <span class=\"comment\">// produce two approximations to `v` (actually `plus1 - v`) within 1.5 ulps.\n        // the resulting representation should be the closest representation to both.\n        //\n        // here `plus1 - v` is used since calculations are done with respect to `plus1`\n        // in order to avoid overflow/underflow (hence the seemingly swapped names).\n        </span><span class=\"kw\">let </span>plus1v_down = plus1v + ulp; <span class=\"comment\">// plus1 - (v - 1 ulp)\n        </span><span class=\"kw\">let </span>plus1v_up = plus1v - ulp; <span class=\"comment\">// plus1 - (v + 1 ulp)\n\n        // decrease the last digit and stop at the closest representation to `v + 1 ulp`.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>plus1w = remainder; <span class=\"comment\">// plus1w(n) = plus1 - w(n)\n        </span>{\n            <span class=\"kw\">let </span>last = buf.last_mut().unwrap();\n\n            <span class=\"comment\">// we work with the approximated digits `w(n)`, which is initially equal to `plus1 -\n            // plus1 % 10^kappa`. after running the loop body `n` times, `w(n) = plus1 -\n            // plus1 % 10^kappa - n * 10^kappa`. we set `plus1w(n) = plus1 - w(n) =\n            // plus1 % 10^kappa + n * 10^kappa` (thus `remainder = plus1w(0)`) to simplify checks.\n            // note that `plus1w(n)` is always increasing.\n            //\n            // we have three conditions to terminate. any of them will make the loop unable to\n            // proceed, but we then have at least one valid representation known to be closest to\n            // `v + 1 ulp` anyway. we will denote them as TC1 through TC3 for brevity.\n            //\n            // TC1: `w(n) &lt;= v + 1 ulp`, i.e., this is the last repr that can be the closest one.\n            // this is equivalent to `plus1 - w(n) = plus1w(n) &gt;= plus1 - (v + 1 ulp) = plus1v_up`.\n            // combined with TC2 (which checks if `w(n+1)` is valid), this prevents the possible\n            // overflow on the calculation of `plus1w(n)`.\n            //\n            // TC2: `w(n+1) &lt; minus1`, i.e., the next repr definitely does not round to `v`.\n            // this is equivalent to `plus1 - w(n) + 10^kappa = plus1w(n) + 10^kappa &gt;\n            // plus1 - minus1 = threshold`. the left hand side can overflow, but we know\n            // `threshold &gt; plus1v`, so if TC1 is false, `threshold - plus1w(n) &gt;\n            // threshold - (plus1v - 1 ulp) &gt; 1 ulp` and we can safely test if\n            // `threshold - plus1w(n) &lt; 10^kappa` instead.\n            //\n            // TC3: `abs(w(n) - (v + 1 ulp)) &lt;= abs(w(n+1) - (v + 1 ulp))`, i.e., the next repr is\n            // no closer to `v + 1 ulp` than the current repr. given `z(n) = plus1v_up - plus1w(n)`,\n            // this becomes `abs(z(n)) &lt;= abs(z(n+1))`. again assuming that TC1 is false, we have\n            // `z(n) &gt; 0`. we have two cases to consider:\n            //\n            // - when `z(n+1) &gt;= 0`: TC3 becomes `z(n) &lt;= z(n+1)`. as `plus1w(n)` is increasing,\n            //   `z(n)` should be decreasing and this is clearly false.\n            // - when `z(n+1) &lt; 0`:\n            //   - TC3a: the precondition is `plus1v_up &lt; plus1w(n) + 10^kappa`. assuming TC2 is\n            //     false, `threshold &gt;= plus1w(n) + 10^kappa` so it cannot overflow.\n            //   - TC3b: TC3 becomes `z(n) &lt;= -z(n+1)`, i.e., `plus1v_up - plus1w(n) &gt;=\n            //     plus1w(n+1) - plus1v_up = plus1w(n) + 10^kappa - plus1v_up`. the negated TC1\n            //     gives `plus1v_up &gt; plus1w(n)`, so it cannot overflow or underflow when\n            //     combined with TC3a.\n            //\n            // consequently, we should stop when `TC1 || TC2 || (TC3a &amp;&amp; TC3b)`. the following is\n            // equal to its inverse, `!TC1 &amp;&amp; !TC2 &amp;&amp; (!TC3a || !TC3b)`.\n            </span><span class=\"kw\">while </span>plus1w &lt; plus1v_up\n                &amp;&amp; threshold - plus1w &gt;= ten_kappa\n                &amp;&amp; (plus1w + ten_kappa &lt; plus1v_up\n                    || plus1v_up - plus1w &gt;= plus1w + ten_kappa - plus1v_up)\n            {\n                <span class=\"kw-2\">*</span>last -= <span class=\"number\">1</span>;\n                <span class=\"macro\">debug_assert!</span>(<span class=\"kw-2\">*</span>last &gt; <span class=\"string\">b'0'</span>); <span class=\"comment\">// the shortest repr cannot end with `0`\n                </span>plus1w += ten_kappa;\n            }\n        }\n\n        <span class=\"comment\">// check if this representation is also the closest representation to `v - 1 ulp`.\n        //\n        // this is simply same to the terminating conditions for `v + 1 ulp`, with all `plus1v_up`\n        // replaced by `plus1v_down` instead. overflow analysis equally holds.\n        </span><span class=\"kw\">if </span>plus1w &lt; plus1v_down\n            &amp;&amp; threshold - plus1w &gt;= ten_kappa\n            &amp;&amp; (plus1w + ten_kappa &lt; plus1v_down\n                || plus1v_down - plus1w &gt;= plus1w + ten_kappa - plus1v_down)\n        {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        }\n\n        <span class=\"comment\">// now we have the closest representation to `v` between `plus1` and `minus1`.\n        // this is too liberal, though, so we reject any `w(n)` not between `plus0` and `minus0`,\n        // i.e., `plus1 - plus1w(n) &lt;= minus0` or `plus1 - plus1w(n) &gt;= plus0`. we utilize the facts\n        // that `threshold = plus1 - minus1` and `plus1 - plus0 = minus0 - minus1 = 2 ulp`.\n        </span><span class=\"kw\">if </span><span class=\"number\">2 </span>* ulp &lt;= plus1w &amp;&amp; plus1w &lt;= threshold - <span class=\"number\">4 </span>* ulp { <span class=\"prelude-val\">Some</span>((buf, exp)) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">None </span>}\n    }\n}\n\n<span class=\"doccomment\">/// The shortest mode implementation for Grisu with Dragon fallback.\n///\n/// This should be used for most cases.\n</span><span class=\"kw\">pub fn </span>format_shortest&lt;<span class=\"lifetime\">'a</span>&gt;(\n    d: <span class=\"kw-2\">&amp;</span>Decoded,\n    buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[MaybeUninit&lt;u8&gt;],\n) -&gt; (<span class=\"comment\">/*digits*/ </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[u8], <span class=\"comment\">/*exp*/ </span>i16) {\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::flt2dec::strategy::dragon::format_shortest <span class=\"kw\">as </span>fallback;\n    <span class=\"comment\">// SAFETY: The borrow checker is not smart enough to let us use `buf`\n    // in the second branch, so we launder the lifetime here. But we only re-use\n    // `buf` if `format_shortest_opt` returned `None` so this is okay.\n    </span><span class=\"kw\">match </span>format_shortest_opt(d, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>(buf <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) }) {\n        <span class=\"prelude-val\">Some</span>(ret) =&gt; ret,\n        <span class=\"prelude-val\">None </span>=&gt; fallback(d, buf),\n    }\n}\n\n<span class=\"doccomment\">/// The exact and fixed mode implementation for Grisu.\n///\n/// It returns `None` when it would return an inexact representation otherwise.\n</span><span class=\"kw\">pub fn </span>format_exact_opt&lt;<span class=\"lifetime\">'a</span>&gt;(\n    d: <span class=\"kw-2\">&amp;</span>Decoded,\n    buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[MaybeUninit&lt;u8&gt;],\n    limit: i16,\n) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(<span class=\"comment\">/*digits*/ </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[u8], <span class=\"comment\">/*exp*/ </span>i16)&gt; {\n    <span class=\"macro\">assert!</span>(d.mant &gt; <span class=\"number\">0</span>);\n    <span class=\"macro\">assert!</span>(d.mant &lt; (<span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">61</span>)); <span class=\"comment\">// we need at least three bits of additional precision\n    </span><span class=\"macro\">assert!</span>(!buf.is_empty());\n\n    <span class=\"comment\">// normalize and scale `v`.\n    </span><span class=\"kw\">let </span>v = Fp { f: d.mant, e: d.exp }.normalize();\n    <span class=\"kw\">let </span>(minusk, cached) = cached_power(ALPHA - v.e - <span class=\"number\">64</span>, GAMMA - v.e - <span class=\"number\">64</span>);\n    <span class=\"kw\">let </span>v = v.mul(<span class=\"kw-2\">&amp;</span>cached);\n\n    <span class=\"comment\">// divide `v` into integral and fractional parts.\n    </span><span class=\"kw\">let </span>e = -v.e <span class=\"kw\">as </span>usize;\n    <span class=\"kw\">let </span>vint = (v.f &gt;&gt; e) <span class=\"kw\">as </span>u32;\n    <span class=\"kw\">let </span>vfrac = v.f &amp; ((<span class=\"number\">1 </span>&lt;&lt; e) - <span class=\"number\">1</span>);\n\n    <span class=\"kw\">let </span>requested_digits = buf.len();\n\n    <span class=\"kw\">const </span>POW10_UP_TO_9: [u32; <span class=\"number\">10</span>] =\n        [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">100</span>, <span class=\"number\">1000</span>, <span class=\"number\">10_000</span>, <span class=\"number\">100_000</span>, <span class=\"number\">1_000_000</span>, <span class=\"number\">10_000_000</span>, <span class=\"number\">100_000_000</span>, <span class=\"number\">1_000_000_000</span>];\n\n    <span class=\"comment\">// We deviate from the original algorithm here and do some early checks to determine if we can satisfy requested_digits.\n    // If we determine that we can't, we exit early and avoid most of the heavy lifting that the algorithm otherwise does.\n    //\n    // When vfrac is zero, we can easily determine if vint can satisfy requested digits:\n    //      If requested_digits &gt;= 11, vint is not able to exhaust the count by itself since 10^(11 -1) &gt; u32 max value &gt;= vint.\n    //      If vint &lt; 10^(requested_digits - 1), vint cannot exhaust the count.\n    //      Otherwise, vint might be able to exhaust the count and we need to execute the rest of the code.\n    </span><span class=\"kw\">if </span>(vfrac == <span class=\"number\">0</span>) &amp;&amp; ((requested_digits &gt;= <span class=\"number\">11</span>) || (vint &lt; POW10_UP_TO_9[requested_digits - <span class=\"number\">1</span>])) {\n        <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n    }\n\n    <span class=\"comment\">// both old `v` and new `v` (scaled by `10^-k`) has an error of &lt; 1 ulp (Theorem 5.1).\n    // as we don't know the error is positive or negative, we use two approximations\n    // spaced equally and have the maximal error of 2 ulps (same to the shortest case).\n    //\n    // the goal is to find the exactly rounded series of digits that are common to\n    // both `v - 1 ulp` and `v + 1 ulp`, so that we are maximally confident.\n    // if this is not possible, we don't know which one is the correct output for `v`,\n    // so we give up and fall back.\n    //\n    // `err` is defined as `1 ulp * 2^e` here (same to the ulp in `vfrac`),\n    // and we will scale it whenever `v` gets scaled.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>err = <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// calculate the largest `10^max_kappa` no more than `v` (thus `v &lt; 10^(max_kappa+1)`).\n    // this is an upper bound of `kappa` below.\n    </span><span class=\"kw\">let </span>(max_kappa, max_ten_kappa) = max_pow10_no_more_than(vint);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span>exp = max_kappa <span class=\"kw\">as </span>i16 - minusk + <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// if we are working with the last-digit limitation, we need to shorten the buffer\n    // before the actual rendering in order to avoid double rounding.\n    // note that we have to enlarge the buffer again when rounding up happens!\n    </span><span class=\"kw\">let </span>len = <span class=\"kw\">if </span>exp &lt;= limit {\n        <span class=\"comment\">// oops, we cannot even produce *one* digit.\n        // this is possible when, say, we've got something like 9.5 and it's being rounded to 10.\n        //\n        // in principle we can immediately call `possibly_round` with an empty buffer,\n        // but scaling `max_ten_kappa &lt;&lt; e` by 10 can result in overflow.\n        // thus we are being sloppy here and widen the error range by a factor of 10.\n        // this will increase the false negative rate, but only very, *very* slightly;\n        // it can only matter noticeably when the mantissa is bigger than 60 bits.\n        //\n        // SAFETY: `len=0`, so the obligation of having initialized this memory is trivial.\n        </span><span class=\"kw\">return unsafe </span>{\n            possibly_round(buf, <span class=\"number\">0</span>, exp, limit, v.f / <span class=\"number\">10</span>, (max_ten_kappa <span class=\"kw\">as </span>u64) &lt;&lt; e, err &lt;&lt; e)\n        };\n    } <span class=\"kw\">else if </span>((exp <span class=\"kw\">as </span>i32 - limit <span class=\"kw\">as </span>i32) <span class=\"kw\">as </span>usize) &lt; buf.len() {\n        (exp - limit) <span class=\"kw\">as </span>usize\n    } <span class=\"kw\">else </span>{\n        buf.len()\n    };\n    <span class=\"macro\">debug_assert!</span>(len &gt; <span class=\"number\">0</span>);\n\n    <span class=\"comment\">// render integral parts.\n    // the error is entirely fractional, so we don't need to check it in this part.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>kappa = max_kappa <span class=\"kw\">as </span>i16;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ten_kappa = max_ten_kappa; <span class=\"comment\">// 10^kappa\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>remainder = vint; <span class=\"comment\">// digits yet to be rendered\n    </span><span class=\"kw\">loop </span>{\n        <span class=\"comment\">// we always have at least one digit to render\n        // invariants:\n        // - `remainder &lt; 10^(kappa+1)`\n        // - `vint = d[0..n-1] * 10^(kappa+1) + remainder`\n        //   (it follows that `remainder = vint % 10^(kappa+1)`)\n\n        // divide `remainder` by `10^kappa`. both are scaled by `2^-e`.\n        </span><span class=\"kw\">let </span>q = remainder / ten_kappa;\n        <span class=\"kw\">let </span>r = remainder % ten_kappa;\n        <span class=\"macro\">debug_assert!</span>(q &lt; <span class=\"number\">10</span>);\n        buf[i] = MaybeUninit::new(<span class=\"string\">b'0' </span>+ q <span class=\"kw\">as </span>u8);\n        i += <span class=\"number\">1</span>;\n\n        <span class=\"comment\">// is the buffer full? run the rounding pass with the remainder.\n        </span><span class=\"kw\">if </span>i == len {\n            <span class=\"kw\">let </span>vrem = ((r <span class=\"kw\">as </span>u64) &lt;&lt; e) + vfrac; <span class=\"comment\">// == (v % 10^kappa) * 2^e\n            // SAFETY: we have initialized `len` many bytes.\n            </span><span class=\"kw\">return unsafe </span>{\n                possibly_round(buf, len, exp, limit, vrem, (ten_kappa <span class=\"kw\">as </span>u64) &lt;&lt; e, err &lt;&lt; e)\n            };\n        }\n\n        <span class=\"comment\">// break the loop when we have rendered all integral digits.\n        // the exact number of digits is `max_kappa + 1` as `plus1 &lt; 10^(max_kappa+1)`.\n        </span><span class=\"kw\">if </span>i &gt; max_kappa <span class=\"kw\">as </span>usize {\n            <span class=\"macro\">debug_assert_eq!</span>(ten_kappa, <span class=\"number\">1</span>);\n            <span class=\"macro\">debug_assert_eq!</span>(kappa, <span class=\"number\">0</span>);\n            <span class=\"kw\">break</span>;\n        }\n\n        <span class=\"comment\">// restore invariants\n        </span>kappa -= <span class=\"number\">1</span>;\n        ten_kappa /= <span class=\"number\">10</span>;\n        remainder = r;\n    }\n\n    <span class=\"comment\">// render fractional parts.\n    //\n    // in principle we can continue to the last available digit and check for the accuracy.\n    // unfortunately we are working with the finite-sized integers, so we need some criterion\n    // to detect the overflow. V8 uses `remainder &gt; err`, which becomes false when\n    // the first `i` significant digits of `v - 1 ulp` and `v` differ. however this rejects\n    // too many otherwise valid input.\n    //\n    // since the later phase has a correct overflow detection, we instead use tighter criterion:\n    // we continue til `err` exceeds `10^kappa / 2`, so that the range between `v - 1 ulp` and\n    // `v + 1 ulp` definitely contains two or more rounded representations. this is same to\n    // the first two comparisons from `possibly_round`, for the reference.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>remainder = vfrac;\n    <span class=\"kw\">let </span>maxerr = <span class=\"number\">1 </span>&lt;&lt; (e - <span class=\"number\">1</span>);\n    <span class=\"kw\">while </span>err &lt; maxerr {\n        <span class=\"comment\">// invariants, where `m = max_kappa + 1` (# of digits in the integral part):\n        // - `remainder &lt; 2^e`\n        // - `vfrac * 10^(n-m) = d[m..n-1] * 2^e + remainder`\n        // - `err = 10^(n-m)`\n\n        </span>remainder <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>; <span class=\"comment\">// won't overflow, `2^e * 10 &lt; 2^64`\n        </span>err <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>; <span class=\"comment\">// won't overflow, `err * 10 &lt; 2^e * 5 &lt; 2^64`\n\n        // divide `remainder` by `10^kappa`.\n        // both are scaled by `2^e / 10^kappa`, so the latter is implicit here.\n        </span><span class=\"kw\">let </span>q = remainder &gt;&gt; e;\n        <span class=\"kw\">let </span>r = remainder &amp; ((<span class=\"number\">1 </span>&lt;&lt; e) - <span class=\"number\">1</span>);\n        <span class=\"macro\">debug_assert!</span>(q &lt; <span class=\"number\">10</span>);\n        buf[i] = MaybeUninit::new(<span class=\"string\">b'0' </span>+ q <span class=\"kw\">as </span>u8);\n        i += <span class=\"number\">1</span>;\n\n        <span class=\"comment\">// is the buffer full? run the rounding pass with the remainder.\n        </span><span class=\"kw\">if </span>i == len {\n            <span class=\"comment\">// SAFETY: we have initialized `len` many bytes.\n            </span><span class=\"kw\">return unsafe </span>{ possibly_round(buf, len, exp, limit, r, <span class=\"number\">1 </span>&lt;&lt; e, err) };\n        }\n\n        <span class=\"comment\">// restore invariants\n        </span>remainder = r;\n    }\n\n    <span class=\"comment\">// further calculation is useless (`possibly_round` definitely fails), so we give up.\n    </span><span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n\n    <span class=\"comment\">// we've generated all requested digits of `v`, which should be also same to corresponding\n    // digits of `v - 1 ulp`. now we check if there is a unique representation shared by\n    // both `v - 1 ulp` and `v + 1 ulp`; this can be either same to generated digits, or\n    // to the rounded-up version of those digits. if the range contains multiple representations\n    // of the same length, we cannot be sure and should return `None` instead.\n    //\n    // all arguments here are scaled by the common (but implicit) value `k`, so that:\n    // - `remainder = (v % 10^kappa) * k`\n    // - `ten_kappa = 10^kappa * k`\n    // - `ulp = 2^-e * k`\n    //\n    // SAFETY: the first `len` bytes of `buf` must be initialized.\n    </span><span class=\"kw\">unsafe fn </span>possibly_round(\n        buf: <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;u8&gt;],\n        <span class=\"kw-2\">mut </span>len: usize,\n        <span class=\"kw-2\">mut </span>exp: i16,\n        limit: i16,\n        remainder: u64,\n        ten_kappa: u64,\n        ulp: u64,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(<span class=\"kw-2\">&amp;</span>[u8], i16)&gt; {\n        <span class=\"macro\">debug_assert!</span>(remainder &lt; ten_kappa);\n\n        <span class=\"comment\">//           10^kappa\n        //    :   :   :&lt;-&gt;:   :\n        //    :   :   :   :   :\n        //    :|1 ulp|1 ulp|  :\n        //    :|&lt;---&gt;|&lt;---&gt;|  :\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // (for the reference, the dotted line indicates the exact value for\n        // possible representations in given number of digits.)\n        //\n        // error is too large that there are at least three possible representations\n        // between `v - 1 ulp` and `v + 1 ulp`. we cannot determine which one is correct.\n        </span><span class=\"kw\">if </span>ulp &gt;= ten_kappa {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        }\n\n        <span class=\"comment\">//    10^kappa\n        //   :&lt;-------&gt;:\n        //   :         :\n        //   : |1 ulp|1 ulp|\n        //   : |&lt;---&gt;|&lt;---&gt;|\n        // ----|-----|-----|----\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // in fact, 1/2 ulp is enough to introduce two possible representations.\n        // (remember that we need a unique representation for both `v - 1 ulp` and `v + 1 ulp`.)\n        // this won't overflow, as `ulp &lt; ten_kappa` from the first check.\n        </span><span class=\"kw\">if </span>ten_kappa - ulp &lt;= ulp {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        }\n\n        <span class=\"comment\">//     remainder\n        //       :&lt;-&gt;|                           :\n        //       :   |                           :\n        //       :&lt;--------- 10^kappa ----------&gt;:\n        //     | :   |                           :\n        //     |1 ulp|1 ulp|                     :\n        //     |&lt;---&gt;|&lt;---&gt;|                     :\n        // ----|-----|-----|------------------------\n        //     |     v     |\n        // v - 1 ulp   v + 1 ulp\n        //\n        // if `v + 1 ulp` is closer to the rounded-down representation (which is already in `buf`),\n        // then we can safely return. note that `v - 1 ulp` *can* be less than the current\n        // representation, but as `1 ulp &lt; 10^kappa / 2`, this condition is enough:\n        // the distance between `v - 1 ulp` and the current representation\n        // cannot exceed `10^kappa / 2`.\n        //\n        // the condition equals to `remainder + ulp &lt; 10^kappa / 2`.\n        // since this can easily overflow, first check if `remainder &lt; 10^kappa / 2`.\n        // we've already verified that `ulp &lt; 10^kappa / 2`, so as long as\n        // `10^kappa` did not overflow after all, the second check is fine.\n        </span><span class=\"kw\">if </span>ten_kappa - remainder &gt; remainder &amp;&amp; ten_kappa - <span class=\"number\">2 </span>* remainder &gt;= <span class=\"number\">2 </span>* ulp {\n            <span class=\"comment\">// SAFETY: our caller initialized that memory.\n            </span><span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"kw\">unsafe </span>{ MaybeUninit::slice_assume_init_ref(<span class=\"kw-2\">&amp;</span>buf[..len]) }, exp));\n        }\n\n        <span class=\"comment\">//   :&lt;------- remainder ------&gt;|   :\n        //   :                          |   :\n        //   :&lt;--------- 10^kappa ---------&gt;:\n        //   :                    |     |   : |\n        //   :                    |1 ulp|1 ulp|\n        //   :                    |&lt;---&gt;|&lt;---&gt;|\n        // -----------------------|-----|-----|-----\n        //                        |     v     |\n        //                    v - 1 ulp   v + 1 ulp\n        //\n        // on the other hands, if `v - 1 ulp` is closer to the rounded-up representation,\n        // we should round up and return. for the same reason we don't need to check `v + 1 ulp`.\n        //\n        // the condition equals to `remainder - ulp &gt;= 10^kappa / 2`.\n        // again we first check if `remainder &gt; ulp` (note that this is not `remainder &gt;= ulp`,\n        // as `10^kappa` is never zero). also note that `remainder - ulp &lt;= 10^kappa`,\n        // so the second check does not overflow.\n        </span><span class=\"kw\">if </span>remainder &gt; ulp &amp;&amp; ten_kappa - (remainder - ulp) &lt;= remainder - ulp {\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(c) =\n                <span class=\"comment\">// SAFETY: our caller must have initialized that memory.\n                </span>round_up(<span class=\"kw\">unsafe </span>{ MaybeUninit::slice_assume_init_mut(<span class=\"kw-2\">&amp;mut </span>buf[..len]) })\n            {\n                <span class=\"comment\">// only add an additional digit when we've been requested the fixed precision.\n                // we also need to check that, if the original buffer was empty,\n                // the additional digit can only be added when `exp == limit` (edge case).\n                </span>exp += <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>exp &gt; limit &amp;&amp; len &lt; buf.len() {\n                    buf[len] = MaybeUninit::new(c);\n                    len += <span class=\"number\">1</span>;\n                }\n            }\n            <span class=\"comment\">// SAFETY: we and our caller initialized that memory.\n            </span><span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"kw\">unsafe </span>{ MaybeUninit::slice_assume_init_ref(<span class=\"kw-2\">&amp;</span>buf[..len]) }, exp));\n        }\n\n        <span class=\"comment\">// otherwise we are doomed (i.e., some values between `v - 1 ulp` and `v + 1 ulp` are\n        // rounding down and others are rounding up) and give up.\n        </span><span class=\"prelude-val\">None\n    </span>}\n}\n\n<span class=\"doccomment\">/// The exact and fixed mode implementation for Grisu with Dragon fallback.\n///\n/// This should be used for most cases.\n</span><span class=\"kw\">pub fn </span>format_exact&lt;<span class=\"lifetime\">'a</span>&gt;(\n    d: <span class=\"kw-2\">&amp;</span>Decoded,\n    buf: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[MaybeUninit&lt;u8&gt;],\n    limit: i16,\n) -&gt; (<span class=\"comment\">/*digits*/ </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[u8], <span class=\"comment\">/*exp*/ </span>i16) {\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::flt2dec::strategy::dragon::format_exact <span class=\"kw\">as </span>fallback;\n    <span class=\"comment\">// SAFETY: The borrow checker is not smart enough to let us use `buf`\n    // in the second branch, so we launder the lifetime here. But we only re-use\n    // `buf` if `format_exact_opt` returned `None` so this is okay.\n    </span><span class=\"kw\">match </span>format_exact_opt(d, <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>(buf <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) }, limit) {\n        <span class=\"prelude-val\">Some</span>(ret) =&gt; ret,\n        <span class=\"prelude-val\">None </span>=&gt; fallback(d, buf, limit),\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:29:33.215Z"
}