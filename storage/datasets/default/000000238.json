{
	"title": "never - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.never.html",
	"markdown": "# never - Rust\n\n## Primitive Type [never](#)\n\nüî¨This is a nightly-only experimental API. (`never_type`¬†[#35121](https://github.com/rust-lang/rust/issues/35121))\n\nExpand description\n\nThe `!` type, also called ‚Äúnever‚Äù.\n\n`!` represents the type of computations which never resolve to any value at all. For example, the [`exit`](../std/process/fn.exit.html) function `fn exit(code: i32) -> !` exits the process without ever returning, and so returns `!`.\n\n`break`, `continue` and `return` expressions also have type `!`. For example we are allowed to write:\n\n```\n#![feature(never_type)]\nlet x: ! = {\n    return 123\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(never_type)%5D%0Afn+main()+%7B%0A++++fn+foo()+-%3E+u32+%7B%0A++++let+x:+!+=+%7B%0A++++++++return+123%0A++++%7D;%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nAlthough the `let` is pointless here, it illustrates the meaning of `!`. Since `x` is never assigned a value (because `return` returns from the entire function), `x` can be given type `!`. We could also replace `return 123` with a `panic!` or a never-ending `loop` and this code would still be valid.\n\nA more realistic usage of `!` is in this code:\n\n```\nlet num: u32 = match get_a_number() {\n    Some(num) => num,\n    None => break,\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+get_a_number()+-%3E+Option%3Cu32%3E+%7B+None+%7D%0A++++loop+%7B%0A++++let+num:+u32+=+match+get_a_number()+%7B%0A++++++++Some(num)+=%3E+num,%0A++++++++None+=%3E+break,%0A++++%7D;%0A++++%7D%0A%7D&edition=2021)\n\nBoth match arms must produce values of type [`u32`](primitive.u32.html \"primitive u32\"), but since `break` never produces a value at all we know it can never produce a value which isn‚Äôt a [`u32`](primitive.u32.html \"primitive u32\"). This illustrates another behaviour of the `!` type - expressions with type `!` will coerce into any other type.\n\n## [¬ß](#-and-generics)`!` and generics\n\n### [¬ß](#infallible-errors)Infallible errors\n\nThe main place you‚Äôll see `!` used explicitly is in generic code. Consider the [`FromStr`](str/trait.FromStr.html \"trait std::str::FromStr\") trait:\n\n```\ntrait FromStr: Sized {\n    type Err;\n    fn from_str(s: &str) -> Result<Self, Self::Err>;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+FromStr:+Sized+%7B%0A++++++++type+Err;%0A++++++++fn+from_str(s:+%26str)+-%3E+Result%3CSelf,+Self::Err%3E;%0A++++%7D%0A%7D&edition=2021)\n\nWhen implementing this trait for [`String`](../std/string/struct.String.html) we need to pick a type for [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\"). And since converting a string into a string will never result in an error, the appropriate type is `!`. (Currently the type actually used is an enum with no variants, though this is only because `!` was added to Rust at a later date and it may change in the future.) With an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") type of `!`, if we have to call [`String::from_str`](about:blank/str/trait.FromStr.html#tymethod.from_str \"associated function std::str::FromStr::from_str\") for some reason the result will be a [`Result<String, !>`](result/enum.Result.html \"enum std::result::Result\") which we can unpack like this:\n\n```\n#![feature(exhaustive_patterns)]\nuse std::str::FromStr;\nlet Ok(s) = String::from_str(\"hello\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exhaustive_patterns)%5D%0Afn+main()+%7B%0A++++use+std::str::FromStr;%0A++++let+Ok(s)+=+String::from_str(%22hello%22);%0A%7D&version=nightly&edition=2021)\n\nSince the [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") variant contains a `!`, it can never occur. If the `exhaustive_patterns` feature is present this means we can exhaustively match on [`Result<T, !>`](result/enum.Result.html \"enum std::result::Result\") by just taking the [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") variant. This illustrates another behaviour of `!` - it can be used to ‚Äúdelete‚Äù certain enum variants from generic types like `Result`.\n\n### [¬ß](#infinite-loops)Infinite loops\n\nWhile [`Result<T, !>`](result/enum.Result.html \"enum std::result::Result\") is very useful for removing errors, `!` can also be used to remove successes as well. If we think of [`Result<T, !>`](result/enum.Result.html \"enum std::result::Result\") as ‚Äúif this function returns, it has not errored,‚Äù we get a very intuitive idea of [`Result<!, E>`](result/enum.Result.html \"enum std::result::Result\") as well: if the function returns, it _has_ errored.\n\nFor example, consider the case of a simple web server, which can be simplified to:\n\n[‚ìò](# \"This example is not tested\")\n\n```\nloop {\n    let (client, request) = get_request().expect(\"disconnected\");\n    let response = request.process();\n    response.send(client);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++loop+%7B%0A++++++++let+(client,+request)+=+get_request().expect(%22disconnected%22);%0A++++++++let+response+=+request.process();%0A++++++++response.send(client);%0A++++%7D%0A%7D&edition=2021)\n\nCurrently, this isn‚Äôt ideal, because we simply panic whenever we fail to get a new connection. Instead, we‚Äôd like to keep track of this error, like this:\n\n[‚ìò](# \"This example is not tested\")\n\n```\nloop {\n    match get_request() {\n        Err(err) => break err,\n        Ok((client, request)) => {\n            let response = request.process();\n            response.send(client);\n        },\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++loop+%7B%0A++++++++match+get_request()+%7B%0A++++++++++++Err(err)+=%3E+break+err,%0A++++++++++++Ok((client,+request))+=%3E+%7B%0A++++++++++++++++let+response+=+request.process();%0A++++++++++++++++response.send(client);%0A++++++++++++%7D,%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nNow, when the server disconnects, we exit the loop with an error instead of panicking. While it might be intuitive to simply return the error, we might want to wrap it in a [`Result<!, E>`](result/enum.Result.html \"enum std::result::Result\") instead:\n\n[‚ìò](# \"This example is not tested\")\n\n```\nfn server_loop() -> Result<!, ConnectionError> {\n    loop {\n        let (client, request) = get_request()?;\n        let response = request.process();\n        response.send(client);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+server_loop()+-%3E+Result%3C!,+ConnectionError%3E+%7B%0A++++++++loop+%7B%0A++++++++++++let+(client,+request)+=+get_request()?;%0A++++++++++++let+response+=+request.process();%0A++++++++++++response.send(client);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nNow, we can use `?` instead of `match`, and the return type makes a lot more sense: if the loop ever stops, it means that an error occurred. We don‚Äôt even have to wrap the loop in an `Ok` because `!` coerces to `Result<!, ConnectionError>` automatically.\n\n## [¬ß](#-and-traits)`!` and traits\n\nWhen writing your own traits, `!` should have an `impl` whenever there is an obvious `impl` which doesn‚Äôt `panic!`. The reason is that functions returning an `impl Trait` where `!` does not have an `impl` of `Trait` cannot diverge as their only possible code path. In other words, they can‚Äôt return `!` from every code path. As an example, this code doesn‚Äôt compile:\n\n[‚ìò](# \"This example deliberately fails to compile\")\n\n```\nuse std::ops::Add;\n\nfn foo() -> impl Add<u32> {\n    unimplemented!()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Add;%0A++++%0A++++fn+foo()+-%3E+impl+Add%3Cu32%3E+%7B%0A++++++++unimplemented!()%0A++++%7D%0A%7D&edition=2021)\n\nBut this code does:\n\n```\nuse std::ops::Add;\n\nfn foo() -> impl Add<u32> {\n    if true {\n        unimplemented!()\n    } else {\n        0\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Add;%0A++++%0A++++fn+foo()+-%3E+impl+Add%3Cu32%3E+%7B%0A++++++++if+true+%7B%0A++++++++++++unimplemented!()%0A++++++++%7D+else+%7B%0A++++++++++++0%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nThe reason is that, in the first example, there are many possible types that `!` could coerce to, because many types implement `Add<u32>`. However, in the second example, the `else` branch returns a `0`, which the compiler infers from the return type to be of type `u32`. Since `u32` is a concrete type, `!` can and will be coerced to it. See issue [#36375](https://github.com/rust-lang/rust/issues/36375) for more information on this quirk of `!`.\n\nAs it turns out, though, most traits can have an `impl` for `!`. Take [`Debug`](fmt/trait.Debug.html \"trait std::fmt::Debug\") for example:\n\n```\n#![feature(never_type)]\nimpl Debug for ! {\n    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n        *self\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(never_type)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++trait+Debug+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result;%0A++++%7D%0A++++impl+Debug+for+!+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++*self%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nOnce again we‚Äôre using `!`‚Äôs ability to coerce into any other type, in this case [`fmt::Result`](fmt/type.Result.html \"type std::fmt::Result\"). Since this method takes a `&!` as an argument we know that it can never be called (because there is no value of type `!` for it to be called with). Writing `*self` essentially tells the compiler ‚ÄúWe know that this code can never be run, so just treat the entire function body as having type [`fmt::Result`](fmt/type.Result.html \"type std::fmt::Result\")‚Äù. This pattern can be used a lot when implementing traits for `!`. Generally, any trait which only has methods which take a `self` parameter should have such an impl.\n\nOn the other hand, one trait which would not be appropriate to implement is [`Default`](default/trait.Default.html \"trait std::default::Default\"):\n\n```\ntrait Default {\n    fn default() -> Self;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Default+%7B%0A++++++++fn+default()+-%3E+Self;%0A++++%7D%0A%7D&edition=2021)\n\nSince `!` has no values, it has no default value either. It‚Äôs true that we could write an `impl` for this which simply panics, but the same is true for any type (we could `impl Default` for (eg.) [`File`](../std/fs/struct.File.html) by just making [`default()`](about:blank/default/trait.Default.html#tymethod.default \"associated function std::default::Default::default\") panic.)\n\n## [¬ß](#never-type-fallback)Never type fallback\n\nWhen the compiler sees a value of type `!` in a [coercion site](https://doc.rust-lang.org/reference/type-coercions.html#coercion-sites), it implicitly inserts a coercion to allow the type checker to infer any type:\n\n[‚ìò](# \"This example is not tested\")\n\n```\n// this\nlet x: u8 = panic!();\n\n// is (essentially) turned by the compiler into\nlet x: u8 = absurd(panic!());\n\n// where absurd is a function with the following signature\n// (it's sound, because `!` always marks unreachable code):\nfn absurd<T>(_: !) -> T { ... }\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this%0Afn+main()+%7B%0A++++let+x:+u8+=+panic!();%0A++++%0A++++//+is+(essentially)+turned+by+the+compiler+into%0A++++let+x:+u8+=+absurd(panic!());%0A++++%0A++++//+where+absurd+is+a+function+with+the+following+signature%0A++++//+(it%27s+sound,+because+%60!%60+always+marks+unreachable+code):%0A++++fn+absurd%3CT%3E(_:+!)+-%3E+T+%7B+...+%7D%0A%7D&edition=2021)\n\nThis can lead to compilation errors if the type cannot be inferred:\n\n[‚ìò](# \"This example deliberately fails to compile\")\n\n```\n// this\n{ panic!() };\n\n// gets turned into this\n{ absurd(panic!()) }; // error: can't infer the type of `absurd`\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this%0Afn+main()+%7B%0A++++%7B+panic!()+%7D;%0A++++%0A++++//+gets+turned+into+this%0A++++%7B+absurd(panic!())+%7D;+//+error:+can%27t+infer+the+type+of+%60absurd%60%0A%7D&edition=2021)\n\nTo prevent such errors, the compiler remembers where it inserted `absurd` calls, and if it can‚Äôt infer the type, it uses the fallback type instead:\n\n[‚ìò](# \"This example is not tested\")\n\n```\ntype Fallback = /* An arbitrarily selected type! */;\n{ absurd::<Fallback>(panic!()) }\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++type+Fallback+=+/*+An+arbitrarily+selected+type!+*/;%0A++++%7B+absurd::%3CFallback%3E(panic!())+%7D%0A%7D&edition=2021)\n\nThis is what is known as ‚Äúnever type fallback‚Äù.\n\nHistorically, the fallback type was [`()`](primitive.unit.html \"primitive unit\"), causing confusing behavior where `!` spontaneously coerced to `()`, even when it would not infer `()` without the fallback. There are plans to change it in the [2024 edition](https://doc.rust-lang.org/nightly/edition-guide/rust-2024/index.html) (and possibly in all editions on a later date); see [Tracking Issue for making `!` fall back to `!`](https://github.com/rust-lang/rust/issues/123748).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#235)[¬ß](#impl-Clone-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2367)[¬ß](#impl-Debug-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2375)[¬ß](#impl-Display-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#196)[¬ß](#impl-Error-for-!)\n\n1.30.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84)[¬ß](#method.source)\n\nThe lower-level source of this error, if any. [Read more](about:blank/error/trait.Error.html#method.source)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110)[¬ß](#method.description)\n\nüëéDeprecated since 1.42.0: use the Display impl or to\\_string()\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120)[¬ß](#method.cause)\n\nüëéDeprecated since 1.33.0: replaced by Error::source, which can support downcasting\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184)[¬ß](#method.provide)\n\nüî¨This is a nightly-only experimental API. (`error_generic_member_access`¬†[#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvides type based access to context intended for error reports. [Read more](about:blank/error/trait.Error.html#method.provide)\n\n1.34.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#959)[¬ß](#impl-From%3C!%3E-for-Infallible)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#961)[¬ß](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/error.rs.html#36)[¬ß](#impl-From%3C!%3E-for-TryFromIntError)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/num/error.rs.html#38)[¬ß](#method.from-1)\n\nConverts to this type from the input type.\n\n1.29.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#876)[¬ß](#impl-Hash-for-!)\n\n1.60.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#71)[¬ß](#impl-Not-for-!)\n\n[¬ß](#associatedtype.Output)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#75)[¬ß](#method.not)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1647)[¬ß](#impl-Ord-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1628)[¬ß](#impl-PartialEq-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1630)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1639)[¬ß](#impl-PartialOrd-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1641)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.61.0 ¬∑ [source](about:blank/src/std/process.rs.html#2427-2431)[¬ß](#impl-Termination-for-!)\n\n[source](about:blank/src/std/process.rs.html#2428-2430)[¬ß](#method.report)\n\nIs called to get the representation of the value as status code. This status code is returned to the operating system.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#433)[¬ß](#impl-Copy-for-!)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1636)[¬ß](#impl-Eq-for-!)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `!` type, also called ‚Äúnever‚Äù.\"><title>never - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">never</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">never</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-!\">Clone</a></li><li><a href=\"#impl-Copy-for-!\">Copy</a></li><li><a href=\"#impl-Debug-for-!\">Debug</a></li><li><a href=\"#impl-Display-for-!\">Display</a></li><li><a href=\"#impl-Eq-for-!\">Eq</a></li><li><a href=\"#impl-Error-for-!\">Error</a></li><li><a href=\"#impl-From%3C!%3E-for-Infallible\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-TryFromIntError\">From&lt;!&gt;</a></li><li><a href=\"#impl-Hash-for-!\">Hash</a></li><li><a href=\"#impl-Not-for-!\">Not</a></li><li><a href=\"#impl-Ord-for-!\">Ord</a></li><li><a href=\"#impl-PartialEq-for-!\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-!\">PartialOrd</a></li><li><a href=\"#impl-Termination-for-!\">Termination</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">never</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>never_type</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/35121\">#35121</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>!</code> type, also called ‚Äúnever‚Äù.</p>\n<p><code>!</code> represents the type of computations which never resolve to any value at all. For example,\nthe <a href=\"../std/process/fn.exit.html\"><code>exit</code></a> function <code>fn exit(code: i32) -&gt; !</code> exits the process without ever returning, and\nso returns <code>!</code>.</p>\n<p><code>break</code>, <code>continue</code> and <code>return</code> expressions also have type <code>!</code>. For example we are allowed to\nwrite:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(never_type)]\n</span><span class=\"kw\">let </span>x: ! = {\n    <span class=\"kw\">return </span><span class=\"number\">123\n</span>};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(never_type)%5D%0Afn+main()+%7B%0A++++fn+foo()+-%3E+u32+%7B%0A++++let+x:+!+=+%7B%0A++++++++return+123%0A++++%7D;%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Although the <code>let</code> is pointless here, it illustrates the meaning of <code>!</code>. Since <code>x</code> is never\nassigned a value (because <code>return</code> returns from the entire function), <code>x</code> can be given type\n<code>!</code>. We could also replace <code>return 123</code> with a <code>panic!</code> or a never-ending <code>loop</code> and this code\nwould still be valid.</p>\n<p>A more realistic usage of <code>!</code> is in this code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>num: u32 = <span class=\"kw\">match </span>get_a_number() {\n    <span class=\"prelude-val\">Some</span>(num) =&gt; num,\n    <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">break</span>,\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+get_a_number()+-%3E+Option%3Cu32%3E+%7B+None+%7D%0A++++loop+%7B%0A++++let+num:+u32+=+match+get_a_number()+%7B%0A++++++++Some(num)+=%3E+num,%0A++++++++None+=%3E+break,%0A++++%7D;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Both match arms must produce values of type <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>, but since <code>break</code> never produces a value\nat all we know it can never produce a value which isn‚Äôt a <a href=\"primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>. This illustrates another\nbehaviour of the <code>!</code> type - expressions with type <code>!</code> will coerce into any other type.</p>\n<h2 id=\"-and-generics\"><a class=\"doc-anchor\" href=\"#-and-generics\">¬ß</a><code>!</code> and generics</h2><h3 id=\"infallible-errors\"><a class=\"doc-anchor\" href=\"#infallible-errors\">¬ß</a>Infallible errors</h3>\n<p>The main place you‚Äôll see <code>!</code> used explicitly is in generic code. Consider the <a href=\"str/trait.FromStr.html\" title=\"trait std::str::FromStr\"><code>FromStr</code></a>\ntrait:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>FromStr: Sized {\n    <span class=\"kw\">type </span><span class=\"prelude-val\">Err</span>;\n    <span class=\"kw\">fn </span>from_str(s: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Result</span>&lt;<span class=\"self\">Self</span>, <span class=\"self\">Self</span>::Err&gt;;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+FromStr:+Sized+%7B%0A++++++++type+Err;%0A++++++++fn+from_str(s:+%26str)+-%3E+Result%3CSelf,+Self::Err%3E;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When implementing this trait for <a href=\"../std/string/struct.String.html\"><code>String</code></a> we need to pick a type for <a href=\"result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>. And since\nconverting a string into a string will never result in an error, the appropriate type is <code>!</code>.\n(Currently the type actually used is an enum with no variants, though this is only because <code>!</code>\nwas added to Rust at a later date and it may change in the future.) With an <a href=\"result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> type of\n<code>!</code>, if we have to call <a href=\"str/trait.FromStr.html#tymethod.from_str\" title=\"associated function std::str::FromStr::from_str\"><code>String::from_str</code></a> for some reason the result will be a\n<a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;String, !&gt;</code></a> which we can unpack like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exhaustive_patterns)]\n</span><span class=\"kw\">use </span>std::str::FromStr;\n<span class=\"kw\">let </span><span class=\"prelude-val\">Ok</span>(s) = String::from_str(<span class=\"string\">\"hello\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exhaustive_patterns)%5D%0Afn+main()+%7B%0A++++use+std::str::FromStr;%0A++++let+Ok(s)+=+String::from_str(%22hello%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Since the <a href=\"result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> variant contains a <code>!</code>, it can never occur. If the <code>exhaustive_patterns</code>\nfeature is present this means we can exhaustively match on <a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, !&gt;</code></a> by just taking the\n<a href=\"result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a> variant. This illustrates another behaviour of <code>!</code> - it can be used to ‚Äúdelete‚Äù certain\nenum variants from generic types like <code>Result</code>.</p>\n<h3 id=\"infinite-loops\"><a class=\"doc-anchor\" href=\"#infinite-loops\">¬ß</a>Infinite loops</h3>\n<p>While <a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, !&gt;</code></a> is very useful for removing errors, <code>!</code> can also be used to remove\nsuccesses as well. If we think of <a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;T, !&gt;</code></a> as ‚Äúif this function returns, it has not\nerrored,‚Äù we get a very intuitive idea of <a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;!, E&gt;</code></a> as well: if the function returns, it\n<em>has</em> errored.</p>\n<p>For example, consider the case of a simple web server, which can be simplified to:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>(client, request) = get_request().expect(<span class=\"string\">\"disconnected\"</span>);\n    <span class=\"kw\">let </span>response = request.process();\n    response.send(client);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++loop+%7B%0A++++++++let+(client,+request)+=+get_request().expect(%22disconnected%22);%0A++++++++let+response+=+request.process();%0A++++++++response.send(client);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Currently, this isn‚Äôt ideal, because we simply panic whenever we fail to get a new connection.\nInstead, we‚Äôd like to keep track of this error, like this:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">loop </span>{\n    <span class=\"kw\">match </span>get_request() {\n        <span class=\"prelude-val\">Err</span>(err) =&gt; <span class=\"kw\">break </span>err,\n        <span class=\"prelude-val\">Ok</span>((client, request)) =&gt; {\n            <span class=\"kw\">let </span>response = request.process();\n            response.send(client);\n        },\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++loop+%7B%0A++++++++match+get_request()+%7B%0A++++++++++++Err(err)+=%3E+break+err,%0A++++++++++++Ok((client,+request))+=%3E+%7B%0A++++++++++++++++let+response+=+request.process();%0A++++++++++++++++response.send(client);%0A++++++++++++%7D,%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Now, when the server disconnects, we exit the loop with an error instead of panicking. While it\nmight be intuitive to simply return the error, we might want to wrap it in a <a href=\"result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result&lt;!, E&gt;</code></a>\ninstead:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>server_loop() -&gt; <span class=\"prelude-ty\">Result</span>&lt;!, ConnectionError&gt; {\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">let </span>(client, request) = get_request()<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">let </span>response = request.process();\n        response.send(client);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+server_loop()+-%3E+Result%3C!,+ConnectionError%3E+%7B%0A++++++++loop+%7B%0A++++++++++++let+(client,+request)+=+get_request()?;%0A++++++++++++let+response+=+request.process();%0A++++++++++++response.send(client);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Now, we can use <code>?</code> instead of <code>match</code>, and the return type makes a lot more sense: if the loop\never stops, it means that an error occurred. We don‚Äôt even have to wrap the loop in an <code>Ok</code>\nbecause <code>!</code> coerces to <code>Result&lt;!, ConnectionError&gt;</code> automatically.</p>\n<h2 id=\"-and-traits\"><a class=\"doc-anchor\" href=\"#-and-traits\">¬ß</a><code>!</code> and traits</h2>\n<p>When writing your own traits, <code>!</code> should have an <code>impl</code> whenever there is an obvious <code>impl</code>\nwhich doesn‚Äôt <code>panic!</code>. The reason is that functions returning an <code>impl Trait</code> where <code>!</code>\ndoes not have an <code>impl</code> of <code>Trait</code> cannot diverge as their only possible code path. In other\nwords, they can‚Äôt return <code>!</code> from every code path. As an example, this code doesn‚Äôt compile:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Add;\n\n<span class=\"kw\">fn </span>foo() -&gt; <span class=\"kw\">impl </span>Add&lt;u32&gt; {\n    <span class=\"macro\">unimplemented!</span>()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Add;%0A++++%0A++++fn+foo()+-%3E+impl+Add%3Cu32%3E+%7B%0A++++++++unimplemented!()%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>But this code does:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::Add;\n\n<span class=\"kw\">fn </span>foo() -&gt; <span class=\"kw\">impl </span>Add&lt;u32&gt; {\n    <span class=\"kw\">if </span><span class=\"bool-val\">true </span>{\n        <span class=\"macro\">unimplemented!</span>()\n    } <span class=\"kw\">else </span>{\n        <span class=\"number\">0\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::Add;%0A++++%0A++++fn+foo()+-%3E+impl+Add%3Cu32%3E+%7B%0A++++++++if+true+%7B%0A++++++++++++unimplemented!()%0A++++++++%7D+else+%7B%0A++++++++++++0%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The reason is that, in the first example, there are many possible types that <code>!</code> could coerce\nto, because many types implement <code>Add&lt;u32&gt;</code>. However, in the second example,\nthe <code>else</code> branch returns a <code>0</code>, which the compiler infers from the return type to be of type\n<code>u32</code>. Since <code>u32</code> is a concrete type, <code>!</code> can and will be coerced to it. See issue <a href=\"https://github.com/rust-lang/rust/issues/36375\">#36375</a>\nfor more information on this quirk of <code>!</code>.</p>\n<p>As it turns out, though, most traits can have an <code>impl</code> for <code>!</code>. Take <a href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a>\nfor example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(never_type)]\n</span><span class=\"kw\">impl </span>Debug <span class=\"kw\">for </span>! {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, formatter: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw-2\">*</span><span class=\"self\">self\n    </span>}\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(never_type)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++trait+Debug+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result;%0A++++%7D%0A++++impl+Debug+for+!+%7B%0A++++++++fn+fmt(%26self,+formatter:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++*self%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Once again we‚Äôre using <code>!</code>‚Äôs ability to coerce into any other type, in this case\n<a href=\"fmt/type.Result.html\" title=\"type std::fmt::Result\"><code>fmt::Result</code></a>. Since this method takes a <code>&amp;!</code> as an argument we know that it can never be\ncalled (because there is no value of type <code>!</code> for it to be called with). Writing <code>*self</code>\nessentially tells the compiler ‚ÄúWe know that this code can never be run, so just treat the\nentire function body as having type <a href=\"fmt/type.Result.html\" title=\"type std::fmt::Result\"><code>fmt::Result</code></a>‚Äù. This pattern can be used a lot when\nimplementing traits for <code>!</code>. Generally, any trait which only has methods which take a <code>self</code>\nparameter should have such an impl.</p>\n<p>On the other hand, one trait which would not be appropriate to implement is <a href=\"default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>Default {\n    <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self</span>;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++trait+Default+%7B%0A++++++++fn+default()+-%3E+Self;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Since <code>!</code> has no values, it has no default value either. It‚Äôs true that we could write an\n<code>impl</code> for this which simply panics, but the same is true for any type (we could <code>impl Default</code> for (eg.) <a href=\"../std/fs/struct.File.html\"><code>File</code></a> by just making <a href=\"default/trait.Default.html#tymethod.default\" title=\"associated function std::default::Default::default\"><code>default()</code></a> panic.)</p>\n<h2 id=\"never-type-fallback\"><a class=\"doc-anchor\" href=\"#never-type-fallback\">¬ß</a>Never type fallback</h2>\n<p>When the compiler sees a value of type <code>!</code> in a <a href=\"https://doc.rust-lang.org/reference/type-coercions.html#coercion-sites\">coercion site</a>, it implicitly inserts a\ncoercion to allow the type checker to infer any type:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this\n</span><span class=\"kw\">let </span>x: u8 = <span class=\"macro\">panic!</span>();\n\n<span class=\"comment\">// is (essentially) turned by the compiler into\n</span><span class=\"kw\">let </span>x: u8 = absurd(<span class=\"macro\">panic!</span>());\n\n<span class=\"comment\">// where absurd is a function with the following signature\n// (it's sound, because `!` always marks unreachable code):\n</span><span class=\"kw\">fn </span>absurd&lt;T&gt;(<span class=\"kw\">_</span>: !) -&gt; T { ... }</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this%0Afn+main()+%7B%0A++++let+x:+u8+=+panic!();%0A++++%0A++++//+is+(essentially)+turned+by+the+compiler+into%0A++++let+x:+u8+=+absurd(panic!());%0A++++%0A++++//+where+absurd+is+a+function+with+the+following+signature%0A++++//+(it's+sound,+because+%60!%60+always+marks+unreachable+code):%0A++++fn+absurd%3CT%3E(_:+!)+-%3E+T+%7B+...+%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This can lead to compilation errors if the type cannot be inferred:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this\n</span>{ <span class=\"macro\">panic!</span>() };\n\n<span class=\"comment\">// gets turned into this\n</span>{ absurd(<span class=\"macro\">panic!</span>()) }; <span class=\"comment\">// error: can't infer the type of `absurd`</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this%0Afn+main()+%7B%0A++++%7B+panic!()+%7D;%0A++++%0A++++//+gets+turned+into+this%0A++++%7B+absurd(panic!())+%7D;+//+error:+can't+infer+the+type+of+%60absurd%60%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To prevent such errors, the compiler remembers where it inserted <code>absurd</code> calls, and\nif it can‚Äôt infer the type, it uses the fallback type instead:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">‚ìò</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">type </span>Fallback = <span class=\"comment\">/* An arbitrarily selected type! */</span>;\n{ absurd::&lt;Fallback&gt;(<span class=\"macro\">panic!</span>()) }</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++type+Fallback+=+/*+An+arbitrarily+selected+type!+*/;%0A++++%7B+absurd::%3CFallback%3E(panic!())+%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This is what is known as ‚Äúnever type fallback‚Äù.</p>\n<p>Historically, the fallback type was <a href=\"primitive.unit.html\" title=\"primitive unit\"><code>()</code></a>, causing confusing behavior where <code>!</code> spontaneously\ncoerced to <code>()</code>, even when it would not infer <code>()</code> without the fallback. There are plans to\nchange it in the <a href=\"https://doc.rust-lang.org/nightly/edition-guide/rust-2024/index.html\">2024 edition</a> (and possibly in all editions on a later date); see\n<a href=\"https://github.com/rust-lang/rust/issues/123748\">Tracking Issue for making <code>!</code> fall back to <code>!</code></a>.</p>\n</div></details><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#235\">source</a><a href=\"#impl-Clone-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#237\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.never.html\">!</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2367\">source</a><a href=\"#impl-Debug-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2369\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, _: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2375\">source</a><a href=\"#impl-Display-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2377\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, _: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Error-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#196\">source</a><a href=\"#impl-Error-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.source\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#84\">source</a></span><a href=\"#method.source\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\">The lower-level source of this error, if any. <a href=\"error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.description\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#110\">source</a></span><a href=\"#method.description\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class=\"docblock\"> <a href=\"error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cause\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#120\">source</a></span><a href=\"#method.cause\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">üëé</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/error.rs.html#184\">source</a><a href=\"#method.provide\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"error/struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span><div class=\"docblock\">Provides type based access to context intended for error reports. <a href=\"error/trait.Error.html#method.provide\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C!%3E-for-Infallible\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#959\">source</a></span><a href=\"#impl-From%3C!%3E-for-Infallible\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.never.html\">!</a>&gt; for <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#961\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C!%3E-for-TryFromIntError\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/error.rs.html#36\">source</a><a href=\"#impl-From%3C!%3E-for-TryFromIntError\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.never.html\">!</a>&gt; for <a class=\"struct\" href=\"num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/error.rs.html#38\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(never: <a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; <a class=\"struct\" href=\"num/struct.TryFromIntError.html\" title=\"struct std::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-!\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#876\">source</a></span><a href=\"#impl-Hash-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#878\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, _: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-!\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#71\">source</a></span><a href=\"#impl-Not-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.never.html\">!</a></h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/bit.rs.html#75\">source</a><a href=\"#method.not\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.never.html\">!</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1647\">source</a><a href=\"#impl-Ord-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1649\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1628\">source</a><a href=\"#impl-PartialEq-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1630\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1639\">source</a><a href=\"#impl-PartialOrd-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1641\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, _: &amp;<a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Termination-for-!\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> ¬∑ <a class=\"src\" href=\"../src/std/process.rs.html#2427-2431\">source</a></span><a href=\"#impl-Termination-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"process/trait.Termination.html\" title=\"trait std::process::Termination\">Termination</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.report\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/process.rs.html#2428-2430\">source</a><a href=\"#method.report\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"process/trait.Termination.html#tymethod.report\" class=\"fn\">report</a>(self) -&gt; <a class=\"struct\" href=\"process/struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h4></section></summary><div class=\"docblock\">Is called to get the representation of the value as status code.\nThis status code is returned to the operating system.</div></details></div></details><section id=\"impl-Copy-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#433\">source</a><a href=\"#impl-Copy-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section><section id=\"impl-Eq-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1636\">source</a><a href=\"#impl-Eq-for-!\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.never.html\">!</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:16.867Z"
}