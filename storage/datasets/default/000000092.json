{
	"title": "Advanced Types - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch19-04-advanced-types.html",
	"markdown": "# Advanced Types - The Rust Programming Language\n\nThe Rust type system has some features that we’ve so far mentioned but haven’t yet discussed. We’ll start by discussing newtypes in general as we examine why newtypes are useful as types. Then we’ll move on to type aliases, a feature similar to newtypes but with slightly different semantics. We’ll also discuss the `!` type and dynamically sized types.\n\n### [Using the Newtype Pattern for Type Safety and Abstraction](#using-the-newtype-pattern-for-type-safety-and-abstraction)\n\nNote: This section assumes you’ve read the earlier section [“Using the Newtype Pattern to Implement External Traits on External Types.”](about:blank/ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types)\n\nThe newtype pattern is also useful for tasks beyond those we’ve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 19-15: recall that the `Millimeters` and `Meters` structs wrapped `u32` values in a newtype. If we wrote a function with a parameter of type `Millimeters`, we couldn’t compile a program that accidentally tried to call that function with a value of type `Meters` or a plain `u32`.\n\nWe can also use the newtype pattern to abstract away some implementation details of a type: the new type can expose a public API that is different from the API of the private inner type.\n\nNewtypes can also hide internal implementation. For example, we could provide a `People` type to wrap a `HashMap<i32, String>` that stores a person’s ID associated with their name. Code using `People` would only interact with the public API we provide, such as a method to add a name string to the `People` collection; that code wouldn’t need to know that we assign an `i32` ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in the [“Encapsulation that Hides Implementation Details”](about:blank/ch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details) section of Chapter 17.\n\n### [Creating Type Synonyms with Type Aliases](#creating-type-synonyms-with-type-aliases)\n\nRust provides the ability to declare a _type alias_ to give an existing type another name. For this we use the `type` keyword. For example, we can create the alias `Kilometers` to `i32` like so:\n\n```rust\nfn main() {\n    type Kilometers = i32;\n\n    let x: i32 = 5;\n    let y: Kilometers = 5;\n\n    println!(\"x + y = {}\", x + y);\n}\n```\n\nNow, the alias `Kilometers` is a _synonym_ for `i32`; unlike the `Millimeters` and `Meters` types we created in Listing 19-15, `Kilometers` is not a separate, new type. Values that have the type `Kilometers` will be treated the same as values of type `i32`:\n\n```rust\nfn main() {\n    type Kilometers = i32;\n\n    let x: i32 = 5;\n    let y: Kilometers = 5;\n\n    println!(\"x + y = {}\", x + y);\n}\n```\n\nBecause `Kilometers` and `i32` are the same type, we can add values of both types and we can pass `Kilometers` values to functions that take `i32` parameters. However, using this method, we don’t get the type checking benefits that we get from the newtype pattern discussed earlier. In other words, if we mix up `Kilometers` and `i32` values somewhere, the compiler will not give us an error.\n\nThe main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:\n\n```rust\nBox<dyn Fn() + Send + 'static>\n```\n\nWriting this lengthy type in function signatures and as type annotations all over the code can be tiresome and error prone. Imagine having a project full of code like that in Listing 19-24.\n\n```rust\nfn main() {\n    let f: Box<dyn Fn() + Send + 'static> = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Box<dyn Fn() + Send + 'static>) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Box<dyn Fn() + Send + 'static> {\n        // --snip--\n        Box::new(|| ())\n    }\n}\n```\n\nListing 19-24: Using a long type in many places\n\nA type alias makes this code more manageable by reducing the repetition. In Listing 19-25, we’ve introduced an alias named `Thunk` for the verbose type and can replace all uses of the type with the shorter alias `Thunk`.\n\n```rust\nfn main() {\n    type Thunk = Box<dyn Fn() + Send + 'static>;\n\n    let f: Thunk = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Thunk) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Thunk {\n        // --snip--\n        Box::new(|| ())\n    }\n}\n```\n\nListing 19-25: Introducing a type alias `Thunk` to reduce repetition\n\nThis code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (_thunk_ is a word for code to be evaluated at a later time, so it’s an appropriate name for a closure that gets stored).\n\nType aliases are also commonly used with the `Result<T, E>` type for reducing repetition. Consider the `std::io` module in the standard library. I/O operations often return a `Result<T, E>` to handle situations when operations fail to work. This library has a `std::io::Error` struct that represents all possible I/O errors. Many of the functions in `std::io` will be returning `Result<T, E>` where the `E` is `std::io::Error`, such as these functions in the `Write` trait:\n\n```rust\nuse std::fmt;\nuse std::io::Error;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize, Error>;\n    fn flush(&mut self) -> Result<(), Error>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<(), Error>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<(), Error>;\n}\n```\n\nThe `Result<..., Error>` is repeated a lot. As such, `std::io` has this type alias declaration:\n\n```rust\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, std::io::Error>;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n}\n```\n\nBecause this declaration is in the `std::io` module, we can use the fully qualified alias `std::io::Result<T>`; that is, a `Result<T, E>` with the `E` filled in as `std::io::Error`. The `Write` trait function signatures end up looking like this:\n\n```rust\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, std::io::Error>;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n}\n```\n\nThe type alias helps in two ways: it makes code easier to write _and_ it gives us a consistent interface across all of `std::io`. Because it’s an alias, it’s just another `Result<T, E>`, which means we can use any methods that work on `Result<T, E>` with it, as well as special syntax like the `?` operator.\n\n### [The Never Type that Never Returns](#the-never-type-that-never-returns)\n\nRust has a special type named `!` that’s known in type theory lingo as the _empty type_ because it has no values. We prefer to call it the _never type_ because it stands in the place of the return type when a function will never return. Here is an example:\n\n```rust\nfn bar() -> ! {\n    // --snip--\n    panic!();\n}\n```\n\nThis code is read as “the function `bar` returns never.” Functions that return never are called _diverging functions_. We can’t create values of the type `!` so `bar` can never possibly return.\n\nBut what use is a type you can never create values for? Recall the code from Listing 2-5, part of the number guessing game; we’ve reproduced a bit of it here in Listing 19-26.\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 19-26: A `match` with an arm that ends in `continue`\n\nAt the time, we skipped over some details in this code. In Chapter 6 in [“The `match` Control Flow Operator”](about:blank/ch06-02-match.html#the-match-control-flow-operator) section, we discussed that `match` arms must all return the same type. So, for example, the following code doesn’t work:\n\n```rust\nfn main() {\n    let guess = \"3\";\n    let guess = match guess.trim().parse() {\n        Ok(_) => 5,\n        Err(_) => \"hello\",\n    };\n}\n```\n\nThe type of `guess` in this code would have to be an integer _and_ a string, and Rust requires that `guess` have only one type. So what does `continue` return? How were we allowed to return a `u32` from one arm and have another arm that ends with `continue` in Listing 19-26?\n\nAs you might have guessed, `continue` has a `!` value. That is, when Rust computes the type of `guess`, it looks at both match arms, the former with a value of `u32` and the latter with a `!` value. Because `!` can never have a value, Rust decides that the type of `guess` is `u32`.\n\nThe formal way of describing this behavior is that expressions of type `!` can be coerced into any other type. We’re allowed to end this `match` arm with `continue` because `continue` doesn’t return a value; instead, it moves control back to the top of the loop, so in the `Err` case, we never assign a value to `guess`.\n\nThe never type is useful with the `panic!` macro as well. Recall the `unwrap` function that we call on `Option<T>` values to produce a value or panic with this definition:\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n\nuse crate::Option::*;\n\nimpl<T> Option<T> {\n    pub fn unwrap(self) -> T {\n        match self {\n            Some(val) => val,\n            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n        }\n    }\n}\n```\n\nIn this code, the same thing happens as in the `match` in Listing 19-26: Rust sees that `val` has the type `T` and `panic!` has the type `!`, so the result of the overall `match` expression is `T`. This code works because `panic!` doesn’t produce a value; it ends the program. In the `None` case, we won’t be returning a value from `unwrap`, so this code is valid.\n\nOne final expression that has the type `!` is a `loop`:\n\n```rust\nfn main() {\n    print!(\"forever \");\n\n    loop {\n        print!(\"and ever \");\n    }\n}\n```\n\nHere, the loop never ends, so `!` is the value of the expression. However, this wouldn’t be true if we included a `break`, because the loop would terminate when it got to the `break`.\n\n### [Dynamically Sized Types and the `Sized` Trait](#dynamically-sized-types-and-the-sized-trait)\n\nRust needs to know certain details about its types, such as how much space to allocate for a value of a particular type. This leaves one corner of its type system a little confusing at first: the concept of _dynamically sized types_. Sometimes referred to as _DSTs_ or _unsized types_, these types let us write code using values whose size we can know only at runtime.\n\nLet’s dig into the details of a dynamically sized type called `str`, which we’ve been using throughout the book. That’s right, not `&str`, but `str` on its own, is a DST. We can’t know how long the string is until runtime, meaning we can’t create a variable of type `str`, nor can we take an argument of type `str`. Consider the following code, which does not work:\n\n```rust\nfn main() {\n    let s1: str = \"Hello there!\";\n    let s2: str = \"How's it going?\";\n}\n```\n\nRust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two `str` values would need to take up the same amount of space. But they have different lengths: `s1` needs 12 bytes of storage and `s2` needs 15. This is why it’s not possible to create a variable holding a dynamically sized type.\n\nSo what do we do? In this case, you already know the answer: we make the types of `s1` and `s2` a `&str` rather than a `str`. Recall from the [“String Slices”](about:blank/ch04-03-slices.html#string-slices) section of Chapter 4 that the slice data structure just stores the starting position and the length of the slice. So although a `&T` is a single value that stores the memory address of where the `T` is located, a `&str` is _two_ values: the address of the `str` and its length. As such, we can know the size of a `&str` value at compile time: it’s twice the length of a `usize`. That is, we always know the size of a `&str`, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.\n\nWe can combine `str` with all kinds of pointers: for example, `Box<str>` or `Rc<str>`. In fact, you’ve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In Chapter 17 in the [“Using Trait Objects That Allow for Values of Different Types”](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn Trait>` would work too).\n\nTo work with DSTs, Rust provides the `Sized` trait to determine whether or not a type’s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on `Sized` to every generic function. That is, a generic function definition like this:\n\n```rust\nfn generic<T>(t: T) {\n    // --snip--\n}\n```\n\nis actually treated as though we had written this:\n\n```rust\nfn generic<T: Sized>(t: T) {\n    // --snip--\n}\n```\n\nBy default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:\n\n```rust\nfn generic<T: ?Sized>(t: &T) {\n    // --snip--\n}\n```\n\nA trait bound on `?Sized` means “`T` may or may not be `Sized`” and this notation overrides the default that generic types must have a known size at compile time. The `?Trait` syntax with this meaning is only available for `Sized`, not any other traits.\n\nAlso note that we switched the type of the `t` parameter from `T` to `&T`. Because the type might not be `Sized`, we need to use it behind some kind of pointer. In this case, we’ve chosen a reference.\n\nNext, we’ll talk about functions and closures!",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Advanced Types - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"advanced-types\"><a class=\"header\" href=\"#advanced-types\">Advanced Types</a></h2>\n<p>The Rust type system has some features that we’ve so far mentioned but haven’t\nyet discussed. We’ll start by discussing newtypes in general as we examine why\nnewtypes are useful as types. Then we’ll move on to type aliases, a feature\nsimilar to newtypes but with slightly different semantics. We’ll also discuss\nthe <code class=\"hljs\">!</code> type and dynamically sized types.</p>\n<h3 id=\"using-the-newtype-pattern-for-type-safety-and-abstraction\"><a class=\"header\" href=\"#using-the-newtype-pattern-for-type-safety-and-abstraction\">Using the Newtype Pattern for Type Safety and Abstraction</a></h3>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: This section assumes you’ve read the earlier section <a href=\"ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">“Using the\nNewtype Pattern to Implement External Traits on External\nTypes.”</a><!-- ignore --></p>\n</section>\n<p>The newtype pattern is also useful for tasks beyond those we’ve discussed so\nfar, including statically enforcing that values are never confused and\nindicating the units of a value. You saw an example of using newtypes to\nindicate units in Listing 19-15: recall that the <code class=\"hljs\">Millimeters</code> and <code class=\"hljs\">Meters</code>\nstructs wrapped <code class=\"hljs\">u32</code> values in a newtype. If we wrote a function with a\nparameter of type <code class=\"hljs\">Millimeters</code>, we couldn’t compile a program that\naccidentally tried to call that function with a value of type <code class=\"hljs\">Meters</code> or a\nplain <code class=\"hljs\">u32</code>.</p>\n<p>We can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type.</p>\n<p>Newtypes can also hide internal implementation. For example, we could provide a\n<code class=\"hljs\">People</code> type to wrap a <code class=\"hljs\">HashMap&lt;i32, String&gt;</code> that stores a person’s ID\nassociated with their name. Code using <code class=\"hljs\">People</code> would only interact with the\npublic API we provide, such as a method to add a name string to the <code class=\"hljs\">People</code>\ncollection; that code wouldn’t need to know that we assign an <code class=\"hljs\">i32</code> ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation\nto hide implementation details, which we discussed in the <a href=\"ch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details\">“Encapsulation that\nHides Implementation\nDetails”</a><!-- ignore -->\nsection of Chapter 17.</p>\n<h3 id=\"creating-type-synonyms-with-type-aliases\"><a class=\"header\" href=\"#creating-type-synonyms-with-type-aliases\">Creating Type Synonyms with Type Aliases</a></h3>\n<p>Rust provides the ability to declare a <em>type alias</em> to give an existing type\nanother name. For this we use the <code class=\"hljs\">type</code> keyword. For example, we can create\nthe alias <code class=\"hljs\">Kilometers</code> to <code class=\"hljs\">i32</code> like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Kilometers</span></span> = <span class=\"hljs-built_in\">i32</span>;\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> y: Kilometers = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x + y = {}\"</span>, x + y);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Now, the alias <code class=\"hljs\">Kilometers</code> is a <em>synonym</em> for <code class=\"hljs\">i32</code>; unlike the <code class=\"hljs\">Millimeters</code>\nand <code class=\"hljs\">Meters</code> types we created in Listing 19-15, <code class=\"hljs\">Kilometers</code> is not a separate,\nnew type. Values that have the type <code class=\"hljs\">Kilometers</code> will be treated the same as\nvalues of type <code class=\"hljs\">i32</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Kilometers</span></span> = <span class=\"hljs-built_in\">i32</span>;\n\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y: Kilometers = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x + y = {}\"</span>, x + y);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Because <code class=\"hljs\">Kilometers</code> and <code class=\"hljs\">i32</code> are the same type, we can add values of both\ntypes and we can pass <code class=\"hljs\">Kilometers</code> values to functions that take <code class=\"hljs\">i32</code>\nparameters. However, using this method, we don’t get the type checking benefits\nthat we get from the newtype pattern discussed earlier. In other words, if we\nmix up <code class=\"hljs\">Kilometers</code> and <code class=\"hljs\">i32</code> values somewhere, the compiler will not give us\nan error.</p>\n<p>The main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;</code></pre>\n<p>Writing this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 19-24.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt; = <span class=\"hljs-built_in\">Box</span>::new(|| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi\"</span>));\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_long_type</span></span>(f: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;) {\n        <span class=\"hljs-comment\">// --snip--</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_long_type</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(|| ())\n</span>    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-24: Using a long type in many places</span></p>\n<p>A type alias makes this code more manageable by reducing the repetition. In\nListing 19-25, we’ve introduced an alias named <code class=\"hljs\">Thunk</code> for the verbose type and\ncan replace all uses of the type with the shorter alias <code class=\"hljs\">Thunk</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Thunk</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n    <span class=\"hljs-keyword\">let</span> f: Thunk = <span class=\"hljs-built_in\">Box</span>::new(|| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi\"</span>));\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_long_type</span></span>(f: Thunk) {\n        <span class=\"hljs-comment\">// --snip--</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_long_type</span></span>() -&gt; Thunk {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(|| ())\n</span>    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-25: Introducing a type alias <code class=\"hljs\">Thunk</code> to reduce\nrepetition</span></p>\n<p>This code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (<em>thunk</em> is a word for code\nto be evaluated at a later time, so it’s an appropriate name for a closure that\ngets stored).</p>\n<p>Type aliases are also commonly used with the <code class=\"hljs\">Result&lt;T, E&gt;</code> type for reducing\nrepetition. Consider the <code class=\"hljs\">std::io</code> module in the standard library. I/O\noperations often return a <code class=\"hljs\">Result&lt;T, E&gt;</code> to handle situations when operations\nfail to work. This library has a <code class=\"hljs\">std::io::Error</code> struct that represents all\npossible I/O errors. Many of the functions in <code class=\"hljs\">std::io</code> will be returning\n<code class=\"hljs\">Result&lt;T, E&gt;</code> where the <code class=\"hljs\">E</code> is <code class=\"hljs\">std::io::Error</code>, such as these functions in\nthe <code class=\"hljs\">Write</code> trait:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::fmt;\n<span class=\"hljs-keyword\">use</span> std::io::Error;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>, Error&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n}</code></pre>\n<p>The <code class=\"hljs\">Result&lt;..., Error&gt;</code> is repeated a lot. As such, <code class=\"hljs\">std::io</code> has this type\nalias declaration:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Result</span></span>&lt;T&gt; = std::result::<span class=\"hljs-built_in\">Result</span>&lt;T, std::io::Error&gt;;\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">}</span></code></pre>\n<p>Because this declaration is in the <code class=\"hljs\">std::io</code> module, we can use the fully\nqualified alias <code class=\"hljs\">std::io::Result&lt;T&gt;</code>; that is, a <code class=\"hljs\">Result&lt;T, E&gt;</code> with the <code class=\"hljs\">E</code>\nfilled in as <code class=\"hljs\">std::io::Error</code>. The <code class=\"hljs\">Write</code> trait function signatures end up\nlooking like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Result</span></span>&lt;T&gt; = std::result::<span class=\"hljs-built_in\">Result</span>&lt;T, std::io::Error&gt;;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n}</code></pre>\n<p>The type alias helps in two ways: it makes code easier to write <em>and</em> it gives\nus a consistent interface across all of <code class=\"hljs\">std::io</code>. Because it’s an alias, it’s\njust another <code class=\"hljs\">Result&lt;T, E&gt;</code>, which means we can use any methods that work on\n<code class=\"hljs\">Result&lt;T, E&gt;</code> with it, as well as special syntax like the <code class=\"hljs\">?</code> operator.</p>\n<h3 id=\"the-never-type-that-never-returns\"><a class=\"header\" href=\"#the-never-type-that-never-returns\">The Never Type that Never Returns</a></h3>\n<p>Rust has a special type named <code class=\"hljs\">!</code> that’s known in type theory lingo as the\n<em>empty type</em> because it has no values. We prefer to call it the <em>never type</em>\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() -&gt; ! {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-built_in\">panic!</span>();\n</span>}</code></pre>\n<p>This code is read as “the function <code class=\"hljs\">bar</code> returns never.” Functions that return\nnever are called <em>diverging functions</em>. We can’t create values of the type <code class=\"hljs\">!</code>\nso <code class=\"hljs\">bar</code> can never possibly return.</p>\n<p>But what use is a type you can never create values for? Recall the code from\nListing 2-5, part of the number guessing game; we’ve reproduced a bit of it\nhere in Listing 19-26.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">            Ordering::Equal =&gt; {\n</span><span class=\"boring\">                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n</span><span class=\"boring\">                <span class=\"hljs-keyword\">break</span>;\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 19-26: A <code class=\"hljs\">match</code> with an arm that ends in\n<code class=\"hljs\">continue</code></span></p>\n<p>At the time, we skipped over some details in this code. In Chapter 6 in <a href=\"ch06-02-match.html#the-match-control-flow-operator\">“The\n<code class=\"hljs\">match</code> Control Flow Operator”</a><!-- ignore -->\nsection, we discussed that <code class=\"hljs\">match</code> arms must all return the same type. So, for\nexample, the following code doesn’t work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> guess = <span class=\"hljs-string\">\"3\"</span>;\n</span>    <span class=\"hljs-keyword\">let</span> guess = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n        <span class=\"hljs-literal\">Ok</span>(_) =&gt; <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-string\">\"hello\"</span>,\n    };\n<span class=\"boring\">}</span></code></pre>\n<p>The type of <code class=\"hljs\">guess</code> in this code would have to be an integer <em>and</em> a string,\nand Rust requires that <code class=\"hljs\">guess</code> have only one type. So what does <code class=\"hljs\">continue</code>\nreturn? How were we allowed to return a <code class=\"hljs\">u32</code> from one arm and have another arm\nthat ends with <code class=\"hljs\">continue</code> in Listing 19-26?</p>\n<p>As you might have guessed, <code class=\"hljs\">continue</code> has a <code class=\"hljs\">!</code> value. That is, when Rust\ncomputes the type of <code class=\"hljs\">guess</code>, it looks at both match arms, the former with a\nvalue of <code class=\"hljs\">u32</code> and the latter with a <code class=\"hljs\">!</code> value. Because <code class=\"hljs\">!</code> can never have a\nvalue, Rust decides that the type of <code class=\"hljs\">guess</code> is <code class=\"hljs\">u32</code>.</p>\n<p>The formal way of describing this behavior is that expressions of type <code class=\"hljs\">!</code> can\nbe coerced into any other type. We’re allowed to end this <code class=\"hljs\">match</code> arm with\n<code class=\"hljs\">continue</code> because <code class=\"hljs\">continue</code> doesn’t return a value; instead, it moves control\nback to the top of the loop, so in the <code class=\"hljs\">Err</code> case, we never assign a value to\n<code class=\"hljs\">guess</code>.</p>\n<p>The never type is useful with the <code class=\"hljs\">panic!</code> macro as well. Recall the <code class=\"hljs\">unwrap</code>\nfunction that we call on <code class=\"hljs\">Option&lt;T&gt;</code> values to produce a value or panic with\nthis definition:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option</span></span>&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Some</span>(T),\n</span><span class=\"boring\">    <span class=\"hljs-literal\">None</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> crate::<span class=\"hljs-built_in\">Option</span>::*;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unwrap</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; T {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            <span class=\"hljs-literal\">Some</span>(val) =&gt; val,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"called `Option::unwrap()` on a `None` value\"</span>),\n        }\n    }\n}</code></pre>\n<p>In this code, the same thing happens as in the <code class=\"hljs\">match</code> in Listing 19-26: Rust\nsees that <code class=\"hljs\">val</code> has the type <code class=\"hljs\">T</code> and <code class=\"hljs\">panic!</code> has the type <code class=\"hljs\">!</code>, so the result\nof the overall <code class=\"hljs\">match</code> expression is <code class=\"hljs\">T</code>. This code works because <code class=\"hljs\">panic!</code>\ndoesn’t produce a value; it ends the program. In the <code class=\"hljs\">None</code> case, we won’t be\nreturning a value from <code class=\"hljs\">unwrap</code>, so this code is valid.</p>\n<p>One final expression that has the type <code class=\"hljs\">!</code> is a <code class=\"hljs\">loop</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"forever \"</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"and ever \"</span>);\n    }\n<span class=\"boring\">}</span></code></pre>\n<p>Here, the loop never ends, so <code class=\"hljs\">!</code> is the value of the expression. However, this\nwouldn’t be true if we included a <code class=\"hljs\">break</code>, because the loop would terminate\nwhen it got to the <code class=\"hljs\">break</code>.</p>\n<h3 id=\"dynamically-sized-types-and-the-sized-trait\"><a class=\"header\" href=\"#dynamically-sized-types-and-the-sized-trait\">Dynamically Sized Types and the <code>Sized</code> Trait</a></h3>\n<p>Rust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of <em>dynamically sized types</em>.\nSometimes referred to as <em>DSTs</em> or <em>unsized types</em>, these types let us write\ncode using values whose size we can know only at runtime.</p>\n<p>Let’s dig into the details of a dynamically sized type called <code class=\"hljs\">str</code>, which\nwe’ve been using throughout the book. That’s right, not <code class=\"hljs\">&amp;str</code>, but <code class=\"hljs\">str</code> on\nits own, is a DST. We can’t know how long the string is until runtime, meaning\nwe can’t create a variable of type <code class=\"hljs\">str</code>, nor can we take an argument of type\n<code class=\"hljs\">str</code>. Consider the following code, which does not work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"Hello there!\"</span>;\n    <span class=\"hljs-keyword\">let</span> s2: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"How's it going?\"</span>;\n<span class=\"boring\">}</span></code></pre>\n<p>Rust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two <code class=\"hljs\">str</code> values would need to take up the\nsame amount of space. But they have different lengths: <code class=\"hljs\">s1</code> needs 12 bytes of\nstorage and <code class=\"hljs\">s2</code> needs 15. This is why it’s not possible to create a variable\nholding a dynamically sized type.</p>\n<p>So what do we do? In this case, you already know the answer: we make the types\nof <code class=\"hljs\">s1</code> and <code class=\"hljs\">s2</code> a <code class=\"hljs\">&amp;str</code> rather than a <code class=\"hljs\">str</code>. Recall from the <a href=\"ch04-03-slices.html#string-slices\">“String\nSlices”</a><!-- ignore --> section of Chapter 4 that the slice data\nstructure just stores the starting position and the length of the slice. So\nalthough a <code class=\"hljs\">&amp;T</code> is a single value that stores the memory address of where the\n<code class=\"hljs\">T</code> is located, a <code class=\"hljs\">&amp;str</code> is <em>two</em> values: the address of the <code class=\"hljs\">str</code> and its\nlength. As such, we can know the size of a <code class=\"hljs\">&amp;str</code> value at compile time: it’s\ntwice the length of a <code class=\"hljs\">usize</code>. That is, we always know the size of a <code class=\"hljs\">&amp;str</code>, no\nmatter how long the string it refers to is. In general, this is the way in\nwhich dynamically sized types are used in Rust: they have an extra bit of\nmetadata that stores the size of the dynamic information. The golden rule of\ndynamically sized types is that we must always put values of dynamically sized\ntypes behind a pointer of some kind.</p>\n<p>We can combine <code class=\"hljs\">str</code> with all kinds of pointers: for example, <code class=\"hljs\">Box&lt;str&gt;</code> or\n<code class=\"hljs\">Rc&lt;str&gt;</code>. In fact, you’ve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In Chapter 17 in the <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“Using Trait Objects That\nAllow for Values of Different\nTypes”</a><!--\nignore --> section, we mentioned that to use traits as trait objects, we must\nput them behind a pointer, such as <code class=\"hljs\">&amp;dyn Trait</code> or <code class=\"hljs\">Box&lt;dyn Trait&gt;</code> (<code class=\"hljs\">Rc&lt;dyn Trait&gt;</code> would work too).</p>\n<p>To work with DSTs, Rust provides the <code class=\"hljs\">Sized</code> trait to determine whether or not\na type’s size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on <code class=\"hljs\">Sized</code> to every generic function. That is, a\ngeneric function definition like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T&gt;(t: T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>is actually treated as though we had written this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T: <span class=\"hljs-built_in\">Sized</span>&gt;(t: T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>By default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt;(t: &amp;T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>A trait bound on <code class=\"hljs\">?Sized</code> means “<code class=\"hljs\">T</code> may or may not be <code class=\"hljs\">Sized</code>” and this\nnotation overrides the default that generic types must have a known size at\ncompile time. The <code class=\"hljs\">?Trait</code> syntax with this meaning is only available for\n<code class=\"hljs\">Sized</code>, not any other traits.</p>\n<p>Also note that we switched the type of the <code class=\"hljs\">t</code> parameter from <code class=\"hljs\">T</code> to <code class=\"hljs\">&amp;T</code>.\nBecause the type might not be <code class=\"hljs\">Sized</code>, we need to use it behind some kind of\npointer. In this case, we’ve chosen a reference.</p>\n<p>Next, we’ll talk about functions and closures!</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch19-03-advanced-traits.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch19-05-advanced-functions-and-closures.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch19-03-advanced-traits.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch19-05-advanced-functions-and-closures.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:33.999Z"
}