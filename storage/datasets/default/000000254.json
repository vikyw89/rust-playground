{
	"title": "std::async_iter - Rust",
	"url": "https://doc.rust-lang.org/stable/std/async_iter/index.html",
	"markdown": "# std::async\\_iter - Rust\n\nðŸ”¬This is a nightly-only experimental API. (`async_iterator`Â [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nExpand description\n\nComposable asynchronous iteration.\n\nIf youâ€™ve found yourself with an asynchronous collection of some kind, and needed to perform an operation on the elements of said collection, youâ€™ll quickly run into â€˜async iteratorsâ€™. Async Iterators are heavily used in idiomatic asynchronous Rust code, so itâ€™s worth becoming familiar with them.\n\nBefore explaining more, letâ€™s talk about how this module is structured:\n\n## [Â§](#organization)Organization\n\nThis module is largely organized by type:\n\n-   [Traits](#traits) are the core portion: these traits define what kind of async iterators exist and what you can do with them. The methods of these traits are worth putting some extra study time into.\n-   Functions provide some helpful ways to create some basic async iterators.\n-   Structs are often the return types of the various methods on this moduleâ€™s traits. Youâ€™ll usually want to look at the method that creates the `struct`, rather than the `struct` itself. For more detail about why, see â€˜[Implementing Async Iterator](#implementing-async-iterator)â€™.\n\nThatâ€™s it! Letâ€™s dig into async iterators.\n\n## [Â§](#async-iterators)Async Iterators\n\nThe heart and soul of this module is the [`AsyncIterator`](trait.AsyncIterator.html \"trait std::async_iter::AsyncIterator\") trait. The core of [`AsyncIterator`](trait.AsyncIterator.html \"trait std::async_iter::AsyncIterator\") looks like this:\n\n```\ntrait AsyncIterator {\n    type Item;\n    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::%7BContext,+Poll%7D;%0A++++use+core::pin::Pin;%0A++++trait+AsyncIterator+%7B%0A++++++++type+Item;%0A++++++++fn+poll_next(self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3COption%3CSelf::Item%3E%3E;%0A++++%7D%0A%7D&edition=2021)\n\nUnlike `Iterator`, `AsyncIterator` makes a distinction between the [`poll_next`](about:blank/trait.AsyncIterator.html#tymethod.poll_next \"method std::async_iter::AsyncIterator::poll_next\") method which is used when implementing an `AsyncIterator`, and a (to-be-implemented) `next` method which is used when consuming an async iterator. Consumers of `AsyncIterator` only need to consider `next`, which when called, returns a future which yields `Option<AsyncIterator::Item>`.\n\nThe future returned by `next` will yield `Some(Item)` as long as there are elements, and once theyâ€™ve all been exhausted, will yield `None` to indicate that iteration is finished. If weâ€™re waiting on something asynchronous to resolve, the future will wait until the async iterator is ready to yield again.\n\nIndividual async iterators may choose to resume iteration, and so calling `next` again may or may not eventually yield `Some(Item)` again at some point.\n\n[`AsyncIterator`](trait.AsyncIterator.html \"trait std::async_iter::AsyncIterator\")â€™s full definition includes a number of other methods as well, but they are default methods, built on top of [`poll_next`](about:blank/trait.AsyncIterator.html#tymethod.poll_next \"method std::async_iter::AsyncIterator::poll_next\"), and so you get them for free.\n\n## [Â§](#implementing-async-iterator)Implementing Async Iterator\n\nCreating an async iterator of your own involves two steps: creating a `struct` to hold the async iteratorâ€™s state, and then implementing [`AsyncIterator`](trait.AsyncIterator.html \"trait std::async_iter::AsyncIterator\") for that `struct`.\n\nLetâ€™s make an async iterator named `Counter` which counts from `1` to `5`:\n\n```\n#![feature(async_iterator)]\n\n// First, the struct:\n\n/// An async iterator which counts from one to five\nstruct Counter {\n    count: usize,\n}\n\n// we want our count to start at one, so let's add a new() method to help.\n// This isn't strictly necessary, but is convenient. Note that we start\n// `count` at zero, we'll see why in `poll_next()`'s implementation below.\nimpl Counter {\n    fn new() -> Counter {\n        Counter { count: 0 }\n    }\n}\n\n// Then, we implement `AsyncIterator` for our `Counter`:\n\nimpl AsyncIterator for Counter {\n    // we will be counting with usize\n    type Item = usize;\n\n    // poll_next() is the only required method\n    fn poll_next(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n        // Increment our count. This is why we started at zero.\n        self.count += 1;\n\n        // Check to see if we've finished counting or not.\n        if self.count < 6 {\n            Poll::Ready(Some(self.count))\n        } else {\n            Poll::Ready(None)\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(async_iterator)%5D%0Afn+main()+%7B%0A++++use+core::async_iter::AsyncIterator;%0A++++use+core::task::%7BContext,+Poll%7D;%0A++++use+core::pin::Pin;%0A++++%0A++++//+First,+the+struct:%0A++++%0A++++///+An+async+iterator+which+counts+from+one+to+five%0A++++struct+Counter+%7B%0A++++++++count:+usize,%0A++++%7D%0A++++%0A++++//+we+want+our+count+to+start+at+one,+so+let%27s+add+a+new()+method+to+help.%0A++++//+This+isn%27t+strictly+necessary,+but+is+convenient.+Note+that+we+start%0A++++//+%60count%60+at+zero,+we%27ll+see+why+in+%60poll_next()%60%27s+implementation+below.%0A++++impl+Counter+%7B%0A++++++++fn+new()+-%3E+Counter+%7B%0A++++++++++++Counter+%7B+count:+0+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Then,+we+implement+%60AsyncIterator%60+for+our+%60Counter%60:%0A++++%0A++++impl+AsyncIterator+for+Counter+%7B%0A++++++++//+we+will+be+counting+with+usize%0A++++++++type+Item+=+usize;%0A++++%0A++++++++//+poll_next()+is+the+only+required+method%0A++++++++fn+poll_next(mut+self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C%27_%3E)+-%3E+Poll%3COption%3CSelf::Item%3E%3E+%7B%0A++++++++++++//+Increment+our+count.+This+is+why+we+started+at+zero.%0A++++++++++++self.count+%2B=+1;%0A++++%0A++++++++++++//+Check+to+see+if+we%27ve+finished+counting+or+not.%0A++++++++++++if+self.count+%3C+6+%7B%0A++++++++++++++++Poll::Ready(Some(self.count))%0A++++++++++++%7D+else+%7B%0A++++++++++++++++Poll::Ready(None)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n## [Â§](#laziness)Laziness\n\nAsync iterators are _lazy_. This means that just creating an async iterator doesnâ€™t _do_ a whole lot. Nothing really happens until you call `poll_next`. This is sometimes a source of confusion when creating an async iterator solely for its side effects. The compiler will warn us about this kind of behavior:\n\n```text\nwarning: unused result that must be used: async iterators do nothing unless polled\n\n``` \n\n-   An async iterator that was created from iterator.\n    \n\n-   A trait for dealing with asynchronous iterators.\n    \n-   Convert something into an async iterator\n    \n\n-   Converts an iterator into an async iterator.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Composable asynchronous iteration.\"><title>std::async_iter - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module async_iter</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module async_iter</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">async_iter</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/lib.rs.html#392\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Composable asynchronous iteration.</p>\n<p>If youâ€™ve found yourself with an asynchronous collection of some kind,\nand needed to perform an operation on the elements of said collection,\nyouâ€™ll quickly run into â€˜async iteratorsâ€™. Async Iterators are heavily used in\nidiomatic asynchronous Rust code, so itâ€™s worth becoming familiar with them.</p>\n<p>Before explaining more, letâ€™s talk about how this module is structured:</p>\n<h2 id=\"organization\"><a class=\"doc-anchor\" href=\"#organization\">Â§</a>Organization</h2>\n<p>This module is largely organized by type:</p>\n<ul>\n<li><a href=\"#traits\">Traits</a> are the core portion: these traits define what kind of async iterators\nexist and what you can do with them. The methods of these traits are worth\nputting some extra study time into.</li>\n<li>Functions provide some helpful ways to create some basic async iterators.</li>\n<li>Structs are often the return types of the various methods on this\nmoduleâ€™s traits. Youâ€™ll usually want to look at the method that creates\nthe <code>struct</code>, rather than the <code>struct</code> itself. For more detail about why,\nsee â€˜<a href=\"#implementing-async-iterator\">Implementing Async Iterator</a>â€™.</li>\n</ul>\n<p>Thatâ€™s it! Letâ€™s dig into async iterators.</p>\n<h2 id=\"async-iterators\"><a class=\"doc-anchor\" href=\"#async-iterators\">Â§</a>Async Iterators</h2>\n<p>The heart and soul of this module is the <a href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\"><code>AsyncIterator</code></a> trait. The core of\n<a href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\"><code>AsyncIterator</code></a> looks like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">trait </span>AsyncIterator {\n    <span class=\"kw\">type </span>Item;\n    <span class=\"kw\">fn </span>poll_next(<span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; Poll&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;&gt;;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+core::task::%7BContext,+Poll%7D;%0A++++use+core::pin::Pin;%0A++++trait+AsyncIterator+%7B%0A++++++++type+Item;%0A++++++++fn+poll_next(self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3COption%3CSelf::Item%3E%3E;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Unlike <code>Iterator</code>, <code>AsyncIterator</code> makes a distinction between the <a href=\"trait.AsyncIterator.html#tymethod.poll_next\" title=\"method std::async_iter::AsyncIterator::poll_next\"><code>poll_next</code></a>\nmethod which is used when implementing an <code>AsyncIterator</code>, and a (to-be-implemented)\n<code>next</code> method which is used when consuming an async iterator. Consumers of <code>AsyncIterator</code>\nonly need to consider <code>next</code>, which when called, returns a future which\nyields <code>Option&lt;AsyncIterator::Item&gt;</code>.</p>\n<p>The future returned by <code>next</code> will yield <code>Some(Item)</code> as long as there are\nelements, and once theyâ€™ve all been exhausted, will yield <code>None</code> to indicate\nthat iteration is finished. If weâ€™re waiting on something asynchronous to\nresolve, the future will wait until the async iterator is ready to yield again.</p>\n<p>Individual async iterators may choose to resume iteration, and so calling <code>next</code>\nagain may or may not eventually yield <code>Some(Item)</code> again at some point.</p>\n<p><a href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\"><code>AsyncIterator</code></a>â€™s full definition includes a number of other methods as well,\nbut they are default methods, built on top of <a href=\"trait.AsyncIterator.html#tymethod.poll_next\" title=\"method std::async_iter::AsyncIterator::poll_next\"><code>poll_next</code></a>, and so you get\nthem for free.</p>\n<h2 id=\"implementing-async-iterator\"><a class=\"doc-anchor\" href=\"#implementing-async-iterator\">Â§</a>Implementing Async Iterator</h2>\n<p>Creating an async iterator of your own involves two steps: creating a <code>struct</code> to\nhold the async iteratorâ€™s state, and then implementing <a href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\"><code>AsyncIterator</code></a> for that\n<code>struct</code>.</p>\n<p>Letâ€™s make an async iterator named <code>Counter</code> which counts from <code>1</code> to <code>5</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(async_iterator)]\n\n</span><span class=\"comment\">// First, the struct:\n\n</span><span class=\"doccomment\">/// An async iterator which counts from one to five\n</span><span class=\"kw\">struct </span>Counter {\n    count: usize,\n}\n\n<span class=\"comment\">// we want our count to start at one, so let's add a new() method to help.\n// This isn't strictly necessary, but is convenient. Note that we start\n// `count` at zero, we'll see why in `poll_next()`'s implementation below.\n</span><span class=\"kw\">impl </span>Counter {\n    <span class=\"kw\">fn </span>new() -&gt; Counter {\n        Counter { count: <span class=\"number\">0 </span>}\n    }\n}\n\n<span class=\"comment\">// Then, we implement `AsyncIterator` for our `Counter`:\n\n</span><span class=\"kw\">impl </span>AsyncIterator <span class=\"kw\">for </span>Counter {\n    <span class=\"comment\">// we will be counting with usize\n    </span><span class=\"kw\">type </span>Item = usize;\n\n    <span class=\"comment\">// poll_next() is the only required method\n    </span><span class=\"kw\">fn </span>poll_next(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>: Pin&lt;<span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>&gt;, cx: <span class=\"kw-2\">&amp;mut </span>Context&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; Poll&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>::Item&gt;&gt; {\n        <span class=\"comment\">// Increment our count. This is why we started at zero.\n        </span><span class=\"self\">self</span>.count += <span class=\"number\">1</span>;\n\n        <span class=\"comment\">// Check to see if we've finished counting or not.\n        </span><span class=\"kw\">if </span><span class=\"self\">self</span>.count &lt; <span class=\"number\">6 </span>{\n            Poll::Ready(<span class=\"prelude-val\">Some</span>(<span class=\"self\">self</span>.count))\n        } <span class=\"kw\">else </span>{\n            Poll::Ready(<span class=\"prelude-val\">None</span>)\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(async_iterator)%5D%0Afn+main()+%7B%0A++++use+core::async_iter::AsyncIterator;%0A++++use+core::task::%7BContext,+Poll%7D;%0A++++use+core::pin::Pin;%0A++++%0A++++//+First,+the+struct:%0A++++%0A++++///+An+async+iterator+which+counts+from+one+to+five%0A++++struct+Counter+%7B%0A++++++++count:+usize,%0A++++%7D%0A++++%0A++++//+we+want+our+count+to+start+at+one,+so+let's+add+a+new()+method+to+help.%0A++++//+This+isn't+strictly+necessary,+but+is+convenient.+Note+that+we+start%0A++++//+%60count%60+at+zero,+we'll+see+why+in+%60poll_next()%60's+implementation+below.%0A++++impl+Counter+%7B%0A++++++++fn+new()+-%3E+Counter+%7B%0A++++++++++++Counter+%7B+count:+0+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Then,+we+implement+%60AsyncIterator%60+for+our+%60Counter%60:%0A++++%0A++++impl+AsyncIterator+for+Counter+%7B%0A++++++++//+we+will+be+counting+with+usize%0A++++++++type+Item+=+usize;%0A++++%0A++++++++//+poll_next()+is+the+only+required+method%0A++++++++fn+poll_next(mut+self:+Pin%3C%26mut+Self%3E,+cx:+%26mut+Context%3C'_%3E)+-%3E+Poll%3COption%3CSelf::Item%3E%3E+%7B%0A++++++++++++//+Increment+our+count.+This+is+why+we+started+at+zero.%0A++++++++++++self.count+%2B=+1;%0A++++%0A++++++++++++//+Check+to+see+if+we've+finished+counting+or+not.%0A++++++++++++if+self.count+%3C+6+%7B%0A++++++++++++++++Poll::Ready(Some(self.count))%0A++++++++++++%7D+else+%7B%0A++++++++++++++++Poll::Ready(None)%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h2 id=\"laziness\"><a class=\"doc-anchor\" href=\"#laziness\">Â§</a>Laziness</h2>\n<p>Async iterators are <em>lazy</em>. This means that just creating an async iterator doesnâ€™t\n<em>do</em> a whole lot. Nothing really happens until you call <code>poll_next</code>. This is\nsometimes a source of confusion when creating an async iterator solely for its side\neffects. The compiler will warn us about this kind of behavior:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>warning: unused result that must be used: async iterators do nothing unless polled\n</code></pre></div></div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.FromIter.html\" title=\"struct std::async_iter::FromIter\">FromIter</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An async iterator that was created from iterator.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A trait for dealing with asynchronous iterators.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.IntoAsyncIterator.html\" title=\"trait std::async_iter::IntoAsyncIterator\">IntoAsyncIterator</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Convert something into an async iterator</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_iter.html\" title=\"fn std::async_iter::from_iter\">from_iter</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Converts an iterator into an async iterator.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:47.447Z"
}