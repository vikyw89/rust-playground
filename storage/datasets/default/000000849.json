{
	"title": "HashMap in std::collections - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html",
	"markdown": "# HashMap in std::collections - Rust\n\n```\npub struct HashMap<K, V, S = RandomState> { /* private fields */ }\n```\n\nExpand description\n\nA [hash map](about:blank/index.html#use-a-hashmap-when \"mod std::collections\") implemented with quadratic probing and SIMD lookup.\n\nBy default, `HashMap` uses a hashing algorithm selected to provide resistance against HashDoS attacks. The algorithm is randomly seeded, and a reasonable best-effort is made to generate this seed from a high quality, secure source of randomness provided by the host without blocking the program. Because of this, the randomness of the seed depends on the output quality of the system’s random number coroutine when the seed is created. In particular, seeds generated when the system’s entropy pool is abnormally low such as during system boot may be of a lower quality.\n\nThe default hashing algorithm is currently SipHash 1-3, though this is subject to change at any point in the future. While its performance is very competitive for medium sized keys, other hashing algorithms will outperform it for small keys such as integers as well as large keys such as long strings, though those algorithms will typically _not_ protect against attacks such as HashDoS.\n\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the [`default`](about:blank/default/trait.Default.html#tymethod.default \"associated function std::default::Default::default\"), [`with_hasher`](about:blank/hash_map/struct.HashMap.html#method.with_hasher \"associated function std::collections::hash_map::HashMap::with_hasher\"), and [`with_capacity_and_hasher`](about:blank/hash_map/struct.HashMap.html#method.with_capacity_and_hasher \"associated function std::collections::hash_map::HashMap::with_capacity_and_hasher\") methods. There are many alternative [hashing algorithms available on crates.io](https://crates.io/keywords/hasher).\n\nIt is required that the keys implement the [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") traits, although this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself, it is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n\n```\n\nIn other words, if two keys are equal, their hashes must be equal. Violating this property is a logic error.\n\nIt is also a logic error for a key to be modified in such a way that the key’s hash, as determined by the [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") trait, or its equality, as determined by the [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") trait, changes while it is in the map. This is normally only possible through [`Cell`](../cell/struct.Cell.html \"struct std::cell::Cell\"), [`RefCell`](../cell/struct.RefCell.html \"struct std::cell::RefCell\"), global state, I/O, or unsafe code.\n\nThe behavior resulting from either logic error is not specified, but will be encapsulated to the `HashMap` that observed the logic error and not result in undefined behavior. This could include panics, incorrect results, aborts, memory leaks, and non-termination.\n\nThe hash table implementation is a Rust port of Google’s [SwissTable](https://abseil.io/blog/20180927-swisstables). The original C++ version of SwissTable can be found [here](https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h), and this [CppCon talk](https://www.youtube.com/watch?v=ncHmEUmJZf4) gives an overview of how the algorithm works.\n\n## [§](#examples)Examples\n\n```\nuse std::collections::HashMap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `HashMap<String, String>` in this example).\nlet mut book_reviews = HashMap::new();\n\n// Review some books.\nbook_reviews.insert(\n    \"Adventures of Huckleberry Finn\".to_string(),\n    \"My favorite book.\".to_string(),\n);\nbook_reviews.insert(\n    \"Grimms' Fairy Tales\".to_string(),\n    \"Masterpiece.\".to_string(),\n);\nbook_reviews.insert(\n    \"Pride and Prejudice\".to_string(),\n    \"Very enjoyable.\".to_string(),\n);\nbook_reviews.insert(\n    \"The Adventures of Sherlock Holmes\".to_string(),\n    \"Eye lyked it alot.\".to_string(),\n);\n\n// Check for a specific one.\n// When collections store owned values (String), they can still be\n// queried using references (&str).\nif !book_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             book_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nbook_reviews.remove(\"The Adventures of Sherlock Holmes\");\n\n// Look up the values associated with some keys.\nlet to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\nfor &book in &to_find {\n    match book_reviews.get(book) {\n        Some(review) => println!(\"{book}: {review}\"),\n        None => println!(\"{book} is unreviewed.\")\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);\n\n// Iterate over everything.\nfor (book, review) in &book_reviews {\n    println!(\"{book}: \\\"{review}\\\"\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashMap%3CString,+String%3E%60+in+this+example).%0A++++let+mut+book_reviews+=+HashMap::new();%0A++++%0A++++//+Review+some+books.%0A++++book_reviews.insert(%0A++++++++%22Adventures+of+Huckleberry+Finn%22.to_string(),%0A++++++++%22My+favorite+book.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22Grimms%27+Fairy+Tales%22.to_string(),%0A++++++++%22Masterpiece.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22Pride+and+Prejudice%22.to_string(),%0A++++++++%22Very+enjoyable.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22The+Adventures+of+Sherlock+Holmes%22.to_string(),%0A++++++++%22Eye+lyked+it+alot.%22.to_string(),%0A++++);%0A++++%0A++++//+Check+for+a+specific+one.%0A++++//+When+collections+store+owned+values+(String),+they+can+still+be%0A++++//+queried+using+references+(%26str).%0A++++if+!book_reviews.contains_key(%22Les+Mis%C3%A9rables%22)+%7B%0A++++++++println!(%22We%27ve+got+%7B%7D+reviews,+but+Les+Mis%C3%A9rables+ain%27t+one.%22,%0A+++++++++++++++++book_reviews.len());%0A++++%7D%0A++++%0A++++//+oops,+this+review+has+a+lot+of+spelling+mistakes,+let%27s+delete+it.%0A++++book_reviews.remove(%22The+Adventures+of+Sherlock+Holmes%22);%0A++++%0A++++//+Look+up+the+values+associated+with+some+keys.%0A++++let+to_find+=+%5B%22Pride+and+Prejudice%22,+%22Alice%27s+Adventure+in+Wonderland%22%5D;%0A++++for+%26book+in+%26to_find+%7B%0A++++++++match+book_reviews.get(book)+%7B%0A++++++++++++Some(review)+=%3E+println!(%22%7Bbook%7D:+%7Breview%7D%22),%0A++++++++++++None+=%3E+println!(%22%7Bbook%7D+is+unreviewed.%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Look+up+the+value+for+a+key+(will+panic+if+the+key+is+not+found).%0A++++println!(%22Review+for+Jane:+%7B%7D%22,+book_reviews%5B%22Pride+and+Prejudice%22%5D);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+(book,+review)+in+%26book_reviews+%7B%0A++++++++println!(%22%7Bbook%7D:+%5C%22%7Breview%7D%5C%22%22);%0A++++%7D%0A%7D&edition=2021)\n\nA `HashMap` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::HashMap;\n\nlet solar_distance = HashMap::from([\n    (\"Mercury\", 0.4),\n    (\"Venus\", 0.7),\n    (\"Earth\", 1.0),\n    (\"Mars\", 1.5),\n]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+solar_distance+=+HashMap::from(%5B%0A++++++++(%22Mercury%22,+0.4),%0A++++++++(%22Venus%22,+0.7),%0A++++++++(%22Earth%22,+1.0),%0A++++++++(%22Mars%22,+1.5),%0A++++%5D);%0A%7D&edition=2021)\n\n`HashMap` implements an [`Entry` API](#method.entry), which allows for complex methods of getting, setting, updating and removing keys and their values:\n\n```\nuse std::collections::HashMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `HashMap<&str, u8>` in this example).\nlet mut player_stats = HashMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n\n// modify an entry before an insert with in-place mutation\nplayer_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++//+type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashMap%3C%26str,+u8%3E%60+in+this+example).%0A++++let+mut+player_stats+=+HashMap::new();%0A++++%0A++++fn+random_stat_buff()+-%3E+u8+%7B%0A++++++++//+could+actually+return+some+random+value+here+-+let%27s+just+return%0A++++++++//+some+fixed+value+for+now%0A++++++++42%0A++++%7D%0A++++%0A++++//+insert+a+key+only+if+it+doesn%27t+already+exist%0A++++player_stats.entry(%22health%22).or_insert(100);%0A++++%0A++++//+insert+a+key+using+a+function+that+provides+a+new+value+only+if+it%0A++++//+doesn%27t+already+exist%0A++++player_stats.entry(%22defence%22).or_insert_with(random_stat_buff);%0A++++%0A++++//+update+a+key,+guarding+against+the+key+possibly+not+being+set%0A++++let+stat+=+player_stats.entry(%22attack%22).or_insert(100);%0A++++*stat+%2B=+random_stat_buff();%0A++++%0A++++//+modify+an+entry+before+an+insert+with+in-place+mutation%0A++++player_stats.entry(%22mana%22).and_modify(%7Cmana%7C+*mana+%2B=+200).or_insert(100);%0A%7D&edition=2021)\n\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") and [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\"). We must also derive [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\").\n\n```\nuse std::collections::HashMap;\n\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    country: String,\n}\n\nimpl Viking {\n    /// Creates a new Viking.\n    fn new(name: &str, country: &str) -> Viking {\n        Viking { name: name.to_string(), country: country.to_string() }\n    }\n}\n\n// Use a HashMap to store the vikings' health points.\nlet vikings = HashMap::from([\n    (Viking::new(\"Einar\", \"Norway\"), 25),\n    (Viking::new(\"Olaf\", \"Denmark\"), 24),\n    (Viking::new(\"Harald\", \"Iceland\"), 12),\n]);\n\n// Use derived implementation to print the status of the vikings.\nfor (viking, health) in &vikings {\n    println!(\"{viking:?} has {health} hp\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++%23%5Bderive(Hash,+Eq,+PartialEq,+Debug)%5D%0A++++struct+Viking+%7B%0A++++++++name:+String,%0A++++++++country:+String,%0A++++%7D%0A++++%0A++++impl+Viking+%7B%0A++++++++///+Creates+a+new+Viking.%0A++++++++fn+new(name:+%26str,+country:+%26str)+-%3E+Viking+%7B%0A++++++++++++Viking+%7B+name:+name.to_string(),+country:+country.to_string()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Use+a+HashMap+to+store+the+vikings%27+health+points.%0A++++let+vikings+=+HashMap::from(%5B%0A++++++++(Viking::new(%22Einar%22,+%22Norway%22),+25),%0A++++++++(Viking::new(%22Olaf%22,+%22Denmark%22),+24),%0A++++++++(Viking::new(%22Harald%22,+%22Iceland%22),+12),%0A++++%5D);%0A++++%0A++++//+Use+derived+implementation+to+print+the+status+of+the+vikings.%0A++++for+(viking,+health)+in+%26vikings+%7B%0A++++++++println!(%22%7Bviking:?%7D+has+%7Bhealth%7D+hp%22);%0A++++%7D%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#217-254)[§](#impl-HashMap%3CK,+V%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#232-234)\n\nCreates an empty `HashMap`.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it is first inserted into.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::collections::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::new();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#251-253)\n\nCreates an empty `HashMap` with at least the specified capacity.\n\nThe hash map will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the hash map will not allocate.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::collections::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::with_capacity(10);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#256-731)[§](#impl-HashMap%3CK,+V,+S%3E)\n\n1.7.0 (const: [unstable](https://github.com/rust-lang/rust/issues/102575 \"Tracking issue for const_collections_with_hasher\")) · [source](about:blank/src/std/collections/hash/map.rs.html#283-285)\n\nCreates an empty `HashMap` which will use the given hash builder to hash keys.\n\nThe created map has the default initial capacity.\n\nWarning: `hash_builder` is normally randomly generated, and is designed to allow HashMaps to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\") trait for the HashMap to be useful, see its documentation for details.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::collections::HashMap;\nuse std::hash::RandomState;\n\nlet s = RandomState::new();\nlet mut map = HashMap::with_hasher(s);\nmap.insert(1, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+map+=+HashMap::with_hasher(s);%0A++++map.insert(1,+2);%0A%7D&edition=2021)\n\n1.7.0 · [source](about:blank/src/std/collections/hash/map.rs.html#314-316)\n\nCreates an empty `HashMap` with at least the specified capacity, using `hasher` to hash the keys.\n\nThe hash map will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the hash map will not allocate.\n\nWarning: `hasher` is normally randomly generated, and is designed to allow HashMaps to be resistant to attacks that cause many collisions and very poor performance. Setting it manually using this function can expose a DoS attack vector.\n\nThe `hasher` passed should implement the [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\") trait for the HashMap to be useful, see its documentation for details.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::collections::HashMap;\nuse std::hash::RandomState;\n\nlet s = RandomState::new();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nmap.insert(1, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+map+=+HashMap::with_capacity_and_hasher(10,+s);%0A++++map.insert(1,+2);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#332-334)\n\nReturns the number of elements the map can hold without reallocating.\n\nThis number is a lower bound; the `HashMap<K, V>` might be able to hold more, but is guaranteed to be able to hold at least this many.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::collections::HashMap;\nlet map: HashMap<i32, i32> = HashMap::with_capacity(100);\nassert!(map.capacity() >= 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++assert!(map.capacity()+%3E=+100);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#361-363)\n\nAn iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nfor key in map.keys() {\n    println!(\"{key}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+key+in+map.keys()+%7B%0A++++++++println!(%22%7Bkey%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance)Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.54.0 · [source](about:blank/src/std/collections/hash/map.rs.html#394-396)\n\nCreates a consuming iterator visiting all the keys in arbitrary order. The map cannot be used after calling this. The iterator element type is `K`.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++let+mut+vec:+Vec%3C%26str%3E+=+map.into_keys().collect();%0A++++//+The+%60IntoKeys%60+iterator+produces+keys+in+arbitrary+order,+so+the%0A++++//+keys+must+be+sorted+to+test+them+against+a+sorted+array.%0A++++vec.sort_unstable();%0A++++assert_eq!(vec,+%5B%22a%22,+%22b%22,+%22c%22%5D);%0A%7D&edition=2021)\n\n##### [§](#performance-1)Performance\n\nIn the current implementation, iterating over keys takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#423-425)\n\nAn iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nfor val in map.values() {\n    println!(\"{val}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+val+in+map.values()+%7B%0A++++++++println!(%22%7Bval%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance-2)Performance\n\nIn the current implementation, iterating over values takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.10.0 · [source](about:blank/src/std/collections/hash/map.rs.html#456-458)\n\nAn iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nfor val in map.values_mut() {\n    *val = *val + 10;\n}\n\nfor val in map.values() {\n    println!(\"{val}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+val+in+map.values_mut()+%7B%0A++++++++*val+=+*val+%2B+10;%0A++++%7D%0A++++%0A++++for+val+in+map.values()+%7B%0A++++++++println!(%22%7Bval%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance-3)Performance\n\nIn the current implementation, iterating over values takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.54.0 · [source](about:blank/src/std/collections/hash/map.rs.html#489-491)\n\nCreates a consuming iterator visiting all the values in arbitrary order. The map cannot be used after calling this. The iterator element type is `V`.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++let+mut+vec:+Vec%3Ci32%3E+=+map.into_values().collect();%0A++++//+The+%60IntoValues%60+iterator+produces+values+in+arbitrary+order,+so%0A++++//+the+values+must+be+sorted+to+test+them+against+a+sorted+array.%0A++++vec.sort_unstable();%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n##### [§](#performance-4)Performance\n\nIn the current implementation, iterating over values takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#518-520)\n\nAn iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\nfor (key, val) in map.iter() {\n    println!(\"key: {key} val: {val}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+(key,+val)+in+map.iter()+%7B%0A++++++++println!(%22key:+%7Bkey%7D+val:+%7Bval%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance-5)Performance\n\nIn the current implementation, iterating over map takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#553-555)\n\nAn iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\n// Update all values\nfor (_, val) in map.iter_mut() {\n    *val *= 2;\n}\n\nfor (key, val) in &map {\n    println!(\"key: {key} val: {val}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++//+Update+all+values%0A++++for+(_,+val)+in+map.iter_mut()+%7B%0A++++++++*val+*=+2;%0A++++%7D%0A++++%0A++++for+(key,+val)+in+%26map+%7B%0A++++++++println!(%22key:+%7Bkey%7D+val:+%7Bval%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#performance-6)Performance\n\nIn the current implementation, iterating over map takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#570-572)\n\nReturns the number of elements in the map.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut a = HashMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++assert_eq!(a.len(),+0);%0A++++a.insert(1,+%22a%22);%0A++++assert_eq!(a.len(),+1);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#588-590)\n\nReturns `true` if the map contains no elements.\n\n##### [§](#examples-14)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut a = HashMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++assert!(a.is_empty());%0A++++a.insert(1,+%22a%22);%0A++++assert!(!a.is_empty());%0A%7D&edition=2021)\n\n1.6.0 · [source](about:blank/src/std/collections/hash/map.rs.html#618-620)\n\nClears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.\n\nIf the returned iterator is dropped before being fully consumed, it drops the remaining key-value pairs. The returned iterator keeps a mutable borrow on the map to optimize its implementation.\n\n##### [§](#examples-15)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\n\nfor (k, v) in a.drain().take(1) {\n    assert!(k == 1 || k == 2);\n    assert!(v == \"a\" || v == \"b\");\n}\n\nassert!(a.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++a.insert(1,+%22a%22);%0A++++a.insert(2,+%22b%22);%0A++++%0A++++for+(k,+v)+in+a.drain().take(1)+%7B%0A++++++++assert!(k+==+1+%7C%7C+k+==+2);%0A++++++++assert!(v+==+%22a%22+%7C%7C+v+==+%22b%22);%0A++++%7D%0A++++%0A++++assert!(a.is_empty());%0A%7D&edition=2021)\n\n🔬This is a nightly-only experimental API. (`hash_extract_if` [#59618](https://github.com/rust-lang/rust/issues/59618))\n\nCreates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, the element is removed from the map and yielded. If the closure returns false, or panics, the element remains in the map and will not be yielded.\n\nNote that `extract_if` lets you mutate every value in the filter closure, regardless of whether you choose to keep or remove it.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use [`retain`](about:blank/hash_map/struct.HashMap.html#method.retain \"method std::collections::hash_map::HashMap::retain\") with a negated predicate if you do not need the returned iterator.\n\n##### [§](#examples-16)Examples\n\nSplitting a map into even and odd keys, reusing the original map:\n\n```\n#![feature(hash_extract_if)]\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\nlet extracted: HashMap<i32, i32> = map.extract_if(|k, _v| k % 2 == 0).collect();\n\nlet mut evens = extracted.keys().copied().collect::<Vec<_>>();\nlet mut odds = map.keys().copied().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+(0..8).map(%7Cx%7C+(x,+x)).collect();%0A++++let+extracted:+HashMap%3Ci32,+i32%3E+=+map.extract_if(%7Ck,+_v%7C+k+%25+2+==+0).collect();%0A++++%0A++++let+mut+evens+=+extracted.keys().copied().collect::%3CVec%3C_%3E%3E();%0A++++let+mut+odds+=+map.keys().copied().collect::%3CVec%3C_%3E%3E();%0A++++evens.sort();%0A++++odds.sort();%0A++++%0A++++assert_eq!(evens,+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+7%5D);%0A%7D&version=nightly&edition=2021)\n\n1.18.0 · [source](about:blank/src/std/collections/hash/map.rs.html#688-693)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`. The elements are visited in unsorted (and unspecified) order.\n\n##### [§](#examples-17)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\nmap.retain(|&k, _| k % 2 == 0);\nassert_eq!(map.len(), 4);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+(0..8).map(%7Cx%7C+(x,+x*10)).collect();%0A++++map.retain(%7C%26k,+_%7C+k+%25+2+==+0);%0A++++assert_eq!(map.len(),+4);%0A%7D&edition=2021)\n\n##### [§](#performance-7)Performance\n\nIn the current implementation, this operation takes O(capacity) time instead of O(len) because it internally visits empty buckets too.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#710-712)\n\nClears the map, removing all key-value pairs. Keeps the allocated memory for reuse.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.clear();\nassert!(a.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++a.insert(1,+%22a%22);%0A++++a.clear();%0A++++assert!(a.is_empty());%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/collections/hash/map.rs.html#728-730)\n\nReturns a reference to the map’s [`BuildHasher`](../hash/trait.BuildHasher.html \"trait std::hash::BuildHasher\").\n\n##### [§](#examples-19)Examples\n\n```\nuse std::collections::HashMap;\nuse std::hash::RandomState;\n\nlet hasher = RandomState::new();\nlet map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\nlet hasher: &RandomState = map.hasher();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+hasher+=+RandomState::new();%0A++++let+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_hasher(hasher);%0A++++let+hasher:+%26RandomState+=+map.hasher();%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#733-1196)[§](#impl-HashMap%3CK,+V,+S%3E-1)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#757-759)\n\nReserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.\n\n##### [§](#panics)Panics\n\nPanics if the new allocation size overflows [`usize`](../primitive.usize.html \"primitive usize\").\n\n##### [§](#examples-20)Examples\n\n```\nuse std::collections::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\nmap.reserve(10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::new();%0A++++map.reserve(10);%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/collections/hash/map.rs.html#783-785)\n\nTries to reserve capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `try_reserve`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if capacity is already sufficient.\n\n##### [§](#errors)Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error is returned.\n\n##### [§](#examples-21)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map: HashMap<&str, isize> = HashMap::new();\nmap.try_reserve(10).expect(\"why is the test harness OOMing on a handful of bytes?\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3C%26str,+isize%3E+=+HashMap::new();%0A++++map.try_reserve(10).expect(%22why+is+the+test+harness+OOMing+on+a+handful+of+bytes?%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#805-807)\n\nShrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.\n\n##### [§](#examples-22)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to_fit();\nassert!(map.capacity() >= 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++map.insert(1,+2);%0A++++map.insert(3,+4);%0A++++assert!(map.capacity()+%3E=+100);%0A++++map.shrink_to_fit();%0A++++assert!(map.capacity()+%3E=+2);%0A%7D&edition=2021)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/map.rs.html#831-833)\n\nShrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n##### [§](#examples-23)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to(10);\nassert!(map.capacity() >= 10);\nmap.shrink_to(0);\nassert!(map.capacity() >= 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++map.insert(1,+2);%0A++++map.insert(3,+4);%0A++++assert!(map.capacity()+%3E=+100);%0A++++map.shrink_to(10);%0A++++assert!(map.capacity()+%3E=+10);%0A++++map.shrink_to(0);%0A++++assert!(map.capacity()+%3E=+2);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#855-857)\n\nGets the given key’s corresponding entry in the map for in-place manipulation.\n\n##### [§](#examples-24)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut letters = HashMap::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    letters.entry(ch).and_modify(|counter| *counter += 1).or_insert(1);\n}\n\nassert_eq!(letters[&'s'], 2);\nassert_eq!(letters[&'t'], 3);\nassert_eq!(letters[&'u'], 1);\nassert_eq!(letters.get(&'y'), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+letters+=+HashMap::new();%0A++++%0A++++for+ch+in+%22a+short+treatise+on+fungi%22.chars()+%7B%0A++++++++letters.entry(ch).and_modify(%7Ccounter%7C+*counter+%2B=+1).or_insert(1);%0A++++%7D%0A++++%0A++++assert_eq!(letters%5B%26%27s%27%5D,+2);%0A++++assert_eq!(letters%5B%26%27t%27%5D,+3);%0A++++assert_eq!(letters%5B%26%27u%27%5D,+1);%0A++++assert_eq!(letters.get(%26%27y%27),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#877-883)\n\nReturns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-25)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.get(%261),+Some(%26%22a%22));%0A++++assert_eq!(map.get(%262),+None);%0A%7D&edition=2021)\n\n1.40.0 · [source](about:blank/src/std/collections/hash/map.rs.html#903-909)\n\nReturns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-26)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.get_key_value(%261),+Some((%261,+%26%22a%22)));%0A++++assert_eq!(map.get_key_value(%262),+None);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#957-963)\n\n🔬This is a nightly-only experimental API. (`map_many_mut` [#97601](https://github.com/rust-lang/rust/issues/97601))\n\nAttempts to get mutable references to `N` values in the map at once.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one mutable reference will be returned to any value. `None` will be returned if any of the keys are duplicates or missing.\n\n##### [§](#examples-27)Examples\n\n```\n#![feature(map_many_mut)]\nuse std::collections::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Athenæum\",\n]);\nassert_eq!(got, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_many_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+libraries+=+HashMap::new();%0A++++libraries.insert(%22Bodleian+Library%22.to_string(),+1602);%0A++++libraries.insert(%22Athen%C3%A6um%22.to_string(),+1807);%0A++++libraries.insert(%22Herzogin-Anna-Amalia-Bibliothek%22.to_string(),+1691);%0A++++libraries.insert(%22Library+of+Congress%22.to_string(),+1800);%0A++++%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Library+of+Congress%22,%0A++++%5D);%0A++++assert_eq!(%0A++++++++got,%0A++++++++Some(%5B%0A++++++++++++%26mut+1807,%0A++++++++++++%26mut+1800,%0A++++++++%5D),%0A++++);%0A++++%0A++++//+Missing+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22New+York+Public+Library%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A++++%0A++++//+Duplicate+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Athen%C3%A6um%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1013-1022)\n\n🔬This is a nightly-only experimental API. (`map_many_mut` [#97601](https://github.com/rust-lang/rust/issues/97601))\n\nAttempts to get mutable references to `N` values in the map at once, without validating that the values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if any of the keys are missing.\n\nFor a safe alternative see [`get_many_mut`](about:blank/hash_map/struct.HashMap.html#method.get_many_mut \"method std::collections::hash_map::HashMap::get_many_mut\").\n\n##### [§](#safety)Safety\n\nCalling this method with overlapping keys is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting references are not used.\n\n##### [§](#examples-28)Examples\n\n```\n#![feature(map_many_mut)]\nuse std::collections::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_many_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+libraries+=+HashMap::new();%0A++++libraries.insert(%22Bodleian+Library%22.to_string(),+1602);%0A++++libraries.insert(%22Athen%C3%A6um%22.to_string(),+1807);%0A++++libraries.insert(%22Herzogin-Anna-Amalia-Bibliothek%22.to_string(),+1691);%0A++++libraries.insert(%22Library+of+Congress%22.to_string(),+1800);%0A++++%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Library+of+Congress%22,%0A++++%5D);%0A++++assert_eq!(%0A++++++++got,%0A++++++++Some(%5B%0A++++++++++++%26mut+1807,%0A++++++++++++%26mut+1800,%0A++++++++%5D),%0A++++);%0A++++%0A++++//+Missing+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22New+York+Public+Library%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1042-1048)\n\nReturns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-29)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.contains_key(%261),+true);%0A++++assert_eq!(map.contains_key(%262),+false);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1070-1076)\n\nReturns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-30)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++if+let+Some(x)+=+map.get_mut(%261)+%7B%0A++++++++*x+=+%22b%22;%0A++++%7D%0A++++assert_eq!(map%5B%261%5D,+%22b%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1105-1107)\n\nInserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") is returned.\n\nIf the map did have this key present, the value is updated, and the old value is returned. The key is not updated, though; this matters for types that can be `==` without being identical. See the [module-level documentation](about:blank/index.html#insert-and-complex-keys \"mod std::collections\") for more.\n\n##### [§](#examples-31)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++assert_eq!(map.insert(37,+%22a%22),+None);%0A++++assert_eq!(map.is_empty(),+false);%0A++++%0A++++map.insert(37,+%22b%22);%0A++++assert_eq!(map.insert(37,+%22c%22),+Some(%22b%22));%0A++++assert_eq!(map%5B%2637%5D,+%22c%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1133-1138)\n\n🔬This is a nightly-only experimental API. (`map_try_insert` [#82766](https://github.com/rust-lang/rust/issues/82766))\n\nTries to insert a key-value pair into the map, and returns a mutable reference to the value in the entry.\n\nIf the map already had this key present, nothing is updated, and an error containing the occupied entry and the value is returned.\n\n##### [§](#examples-32)Examples\n\nBasic usage:\n\n```\n#![feature(map_try_insert)]\n\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nlet err = map.try_insert(37, \"b\").unwrap_err();\nassert_eq!(err.entry.key(), &37);\nassert_eq!(err.entry.get(), &\"a\");\nassert_eq!(err.value, \"b\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_try_insert)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++assert_eq!(map.try_insert(37,+%22a%22).unwrap(),+%26%22a%22);%0A++++%0A++++let+err+=+map.try_insert(37,+%22b%22).unwrap_err();%0A++++assert_eq!(err.entry.key(),+%2637);%0A++++assert_eq!(err.entry.get(),+%26%22a%22);%0A++++assert_eq!(err.value,+%22b%22);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1160-1166)\n\nRemoves a key from the map, returning the value at the key if the key was previously in the map.\n\nThe key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-33)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.remove(%261),+Some(%22a%22));%0A++++assert_eq!(map.remove(%261),+None);%0A%7D&edition=2021)\n\n1.27.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1189-1195)\n\nRemoves a key from the map, returning the stored key and value if the key was previously in the map.\n\nThe key may be any borrowed form of the map’s key type, but [`Hash`](../hash/trait.Hash.html \"trait std::hash::Hash\") and [`Eq`](../cmp/trait.Eq.html \"trait std::cmp::Eq\") on the borrowed form _must_ match those for the key type.\n\n##### [§](#examples-34)Examples\n\n```\nuse std::collections::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove(&1), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::collections::HashMap;%0A%0Afn+main()+%7B%0Alet+mut+map+=+HashMap::new();%0Amap.insert(1,+%22a%22);%0Aassert_eq!(map.remove_entry(%261),+Some((1,+%22a%22)));%0Aassert_eq!(map.remove(%261),+None);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1198-1259)[§](#impl-HashMap%3CK,+V,+S%3E-2)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1235-1237)\n\n🔬This is a nightly-only experimental API. (`hash_raw_entry` [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nCreates a raw entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and manipulating a map. They must be manually initialized with a hash and then manually searched. After this, insertions into a vacant entry still require an owned key to be provided.\n\nRaw entries are useful for such exotic situations as:\n\n-   Hash memoization\n-   Deferring the creation of an owned key until it is known to be required\n-   Using a search key that doesn’t work with the Borrow trait\n-   Using custom comparison logic without newtype wrappers\n\nBecause raw entries provide much more low-level control, it’s much easier to put the HashMap into an inconsistent state which, while memory-safe, will cause the map to produce seemingly random results. Higher-level and more foolproof APIs like `entry` should be preferred when possible.\n\nIn particular, the hash used to initialize the raw entry must still be consistent with the hash of the key that is ultimately stored in the entry. This is because implementations of HashMap may need to recompute hashes when resizing, at which point only the keys are available.\n\nRaw entries give mutable access to the keys. This must not be used to modify how the key would compare or hash, as the map will not re-evaluate where the key should go, meaning the keys may become “lost” if their location does not reflect their state. For instance, if you change a key so that the map now contains keys which compare equal, search may start acting erratically, with two keys randomly masking each other. Implementations are free to assume this doesn’t happen (within the limits of memory-safety).\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1256-1258)\n\n🔬This is a nightly-only experimental API. (`hash_raw_entry` [#56167](https://github.com/rust-lang/rust/issues/56167))\n\nCreates a raw immutable entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and manipulating a map. They must be manually initialized with a hash and then manually searched.\n\nThis is useful for\n\n-   Hash memoization\n-   Using a search key that doesn’t work with the Borrow trait\n-   Using custom comparison logic without newtype wrappers\n\nUnless you are in such a situation, higher-level and more foolproof APIs like `get` should be preferred.\n\nImmutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1262-1277)[§](#impl-Clone-for-HashMap%3CK,+V,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1305-1313)[§](#impl-Debug-for-HashMap%3CK,+V,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1316-1325)[§](#impl-Default-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1322-1324)[§](#method.default)\n\nCreates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n\n1.4.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3159-3179)[§](#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3166-3168)[§](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3171-3173)[§](#method.extend_one-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3176-3178)[§](#method.extend_reserve-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3137-3156)[§](#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E)\n\nInserts all new key-values from the iterator and replaces values with existing keys with new values returned from the iterator.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3143-3145)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3148-3150)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3153-3155)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1360-1376)[§](#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1373-1375)[§](#method.from)\n\n##### [§](#examples-36)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map1+=+HashMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+HashMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3122-3132)[§](#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1328-1345)[§](#impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1342-1344)[§](#method.index)\n\nReturns a reference to the value corresponding to the supplied key.\n\n##### [§](#panics-1)Panics\n\nPanics if the key is not present in the `HashMap`.\n\n[§](#associatedtype.Output)\n\nThe returned type after indexing.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#2175-2184)[§](#impl-IntoIterator-for-%26HashMap%3CK,+V,+S%3E)\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[source](about:blank/src/std/collections/hash/map.rs.html#2181-2183)[§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#2187-2196)[§](#impl-IntoIterator-for-%26mut+HashMap%3CK,+V,+S%3E)\n\n[§](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[source](about:blank/src/std/collections/hash/map.rs.html#2193-2195)[§](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#2199-2226)[§](#impl-IntoIterator-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#2223-2225)[§](#method.into_iter)\n\nCreates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.\n\n##### [§](#examples-35)Examples\n\n```\nuse std::collections::HashMap;\n\nlet map = HashMap::from([\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n]);\n\n// Not possible with .iter()\nlet vec: Vec<(&str, i32)> = map.into_iter().collect();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++//+Not+possible+with+.iter()%0A++++let+vec:+Vec%3C(%26str,+i32)%3E+=+map.into_iter().collect();%0A%7D&edition=2021)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1280-1293)[§](#impl-PartialEq-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#1286-1292)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#1296-1302)[§](#impl-Eq-for-HashMap%3CK,+V,+S%3E)\n\n1.36.0 · [source](about:blank/src/std/panic.rs.html#82-88)[§](#impl-UnwindSafe-for-HashMap%3CK,+V,+S%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A hash map implemented with quadratic probing and SIMD lookup.\"><title>HashMap in std::collections - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">HashMap</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">HashMap</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.contains_key\">contains_key</a></li><li><a href=\"#method.drain\">drain</a></li><li><a href=\"#method.entry\">entry</a></li><li><a href=\"#method.extract_if\">extract_if</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_key_value\">get_key_value</a></li><li><a href=\"#method.get_many_mut\">get_many_mut</a></li><li><a href=\"#method.get_many_unchecked_mut\">get_many_unchecked_mut</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.hasher\">hasher</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.into_keys\">into_keys</a></li><li><a href=\"#method.into_values\">into_values</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.iter_mut\">iter_mut</a></li><li><a href=\"#method.keys\">keys</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.raw_entry\">raw_entry</a></li><li><a href=\"#method.raw_entry_mut\">raw_entry_mut</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.remove_entry\">remove_entry</a></li><li><a href=\"#method.reserve\">reserve</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.shrink_to\">shrink_to</a></li><li><a href=\"#method.shrink_to_fit\">shrink_to_fit</a></li><li><a href=\"#method.try_insert\">try_insert</a></li><li><a href=\"#method.try_reserve\">try_reserve</a></li><li><a href=\"#method.values\">values</a></li><li><a href=\"#method.values_mut\">values_mut</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li><li><a href=\"#method.with_capacity_and_hasher\">with_capacity_and_hasher</a></li><li><a href=\"#method.with_hasher\">with_hasher</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-HashMap%3CK,+V,+S%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-HashMap%3CK,+V,+S%3E\">Debug</a></li><li><a href=\"#impl-Default-for-HashMap%3CK,+V,+S%3E\">Default</a></li><li><a href=\"#impl-Eq-for-HashMap%3CK,+V,+S%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\">Extend&lt;(&amp;'a K, &amp;'a V)&gt;</a></li><li><a href=\"#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\">Extend&lt;(K, V)&gt;</a></li><li><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\">From&lt;[(K, V); N]&gt;</a></li><li><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\">FromIterator&lt;(K, V)&gt;</a></li><li><a href=\"#impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E\">Index&lt;&amp;Q&gt;</a></li><li><a href=\"#impl-IntoIterator-for-%26HashMap%3CK,+V,+S%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+HashMap%3CK,+V,+S%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-HashMap%3CK,+V,+S%3E\">IntoIterator</a></li><li><a href=\"#impl-PartialEq-for-HashMap%3CK,+V,+S%3E\">PartialEq</a></li><li><a href=\"#impl-UnwindSafe-for-HashMap%3CK,+V,+S%3E\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-HashMap%3CK,+V,+S%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-HashMap%3CK,+V,+S%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-HashMap%3CK,+V,+S%3E\">Send</a></li><li><a href=\"#impl-Sync-for-HashMap%3CK,+V,+S%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-HashMap%3CK,+V,+S%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"binary_heap/index.html\">binary_heap</a></li><li><a href=\"btree_map/index.html\">btree_map</a></li><li><a href=\"btree_set/index.html\">btree_set</a></li><li><a href=\"hash_map/index.html\">hash_map</a></li><li><a href=\"hash_set/index.html\">hash_set</a></li><li><a href=\"linked_list/index.html\">linked_list</a></li><li><a href=\"vec_deque/index.html\">vec_deque</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"struct.BTreeSet.html\">BTreeSet</a></li><li><a href=\"struct.BinaryHeap.html\">BinaryHeap</a></li><li><a href=\"struct.HashMap.html\">HashMap</a></li><li><a href=\"struct.HashSet.html\">HashSet</a></li><li><a href=\"struct.LinkedList.html\">LinkedList</a></li><li><a href=\"struct.TryReserveError.html\">TryReserveError</a></li><li><a href=\"struct.VecDeque.html\">VecDeque</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryReserveErrorKind.html\">TryReserveErrorKind</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">collections</a>::<wbr><a class=\"struct\" href=\"#\">HashMap</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#213-215\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct HashMap&lt;K, V, S = <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <a href=\"index.html#use-a-hashmap-when\" title=\"mod std::collections\">hash map</a> implemented with quadratic probing and SIMD lookup.</p>\n<p>By default, <code>HashMap</code> uses a hashing algorithm selected to provide\nresistance against HashDoS attacks. The algorithm is randomly seeded, and a\nreasonable best-effort is made to generate this seed from a high quality,\nsecure source of randomness provided by the host without blocking the\nprogram. Because of this, the randomness of the seed depends on the output\nquality of the system’s random number coroutine when the seed is created.\nIn particular, seeds generated when the system’s entropy pool is abnormally\nlow such as during system boot may be of a lower quality.</p>\n<p>The default hashing algorithm is currently SipHash 1-3, though this is\nsubject to change at any point in the future. While its performance is very\ncompetitive for medium sized keys, other hashing algorithms will outperform\nit for small keys such as integers as well as large keys such as long\nstrings, though those algorithms will typically <em>not</em> protect against\nattacks such as HashDoS.</p>\n<p>The hashing algorithm can be replaced on a per-<code>HashMap</code> basis using the\n<a href=\"../default/trait.Default.html#tymethod.default\" title=\"associated function std::default::Default::default\"><code>default</code></a>, <a href=\"hash_map/struct.HashMap.html#method.with_hasher\" title=\"associated function std::collections::hash_map::HashMap::with_hasher\"><code>with_hasher</code></a>, and <a href=\"hash_map/struct.HashMap.html#method.with_capacity_and_hasher\" title=\"associated function std::collections::hash_map::HashMap::with_capacity_and_hasher\"><code>with_capacity_and_hasher</code></a> methods.\nThere are many alternative <a href=\"https://crates.io/keywords/hasher\">hashing algorithms available on crates.io</a>.</p>\n<p>It is required that the keys implement the <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> traits, although\nthis can frequently be achieved by using <code>#[derive(PartialEq, Eq, Hash)]</code>.\nIf you implement these yourself, it is important that the following\nproperty holds:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>k1 == k2 -&gt; hash(k1) == hash(k2)\n</code></pre></div>\n<p>In other words, if two keys are equal, their hashes must be equal.\nViolating this property is a logic error.</p>\n<p>It is also a logic error for a key to be modified in such a way that the key’s\nhash, as determined by the <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> trait, or its equality, as determined by\nthe <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> trait, changes while it is in the map. This is normally only\npossible through <a href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell</code></a>, <a href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell</code></a>, global state, I/O, or unsafe code.</p>\n<p>The behavior resulting from either logic error is not specified, but will\nbe encapsulated to the <code>HashMap</code> that observed the logic error and not\nresult in undefined behavior. This could include panics, incorrect results,\naborts, memory leaks, and non-termination.</p>\n<p>The hash table implementation is a Rust port of Google’s <a href=\"https://abseil.io/blog/20180927-swisstables\">SwissTable</a>.\nThe original C++ version of SwissTable can be found <a href=\"https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\">here</a>, and this\n<a href=\"https://www.youtube.com/watch?v=ncHmEUmJZf4\">CppCon talk</a> gives an overview of how the algorithm works.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"comment\">// Type inference lets us omit an explicit type signature (which\n// would be `HashMap&lt;String, String&gt;` in this example).\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>book_reviews = HashMap::new();\n\n<span class=\"comment\">// Review some books.\n</span>book_reviews.insert(\n    <span class=\"string\">\"Adventures of Huckleberry Finn\"</span>.to_string(),\n    <span class=\"string\">\"My favorite book.\"</span>.to_string(),\n);\nbook_reviews.insert(\n    <span class=\"string\">\"Grimms' Fairy Tales\"</span>.to_string(),\n    <span class=\"string\">\"Masterpiece.\"</span>.to_string(),\n);\nbook_reviews.insert(\n    <span class=\"string\">\"Pride and Prejudice\"</span>.to_string(),\n    <span class=\"string\">\"Very enjoyable.\"</span>.to_string(),\n);\nbook_reviews.insert(\n    <span class=\"string\">\"The Adventures of Sherlock Holmes\"</span>.to_string(),\n    <span class=\"string\">\"Eye lyked it alot.\"</span>.to_string(),\n);\n\n<span class=\"comment\">// Check for a specific one.\n// When collections store owned values (String), they can still be\n// queried using references (&amp;str).\n</span><span class=\"kw\">if </span>!book_reviews.contains_key(<span class=\"string\">\"Les Misérables\"</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"We've got {} reviews, but Les Misérables ain't one.\"</span>,\n             book_reviews.len());\n}\n\n<span class=\"comment\">// oops, this review has a lot of spelling mistakes, let's delete it.\n</span>book_reviews.remove(<span class=\"string\">\"The Adventures of Sherlock Holmes\"</span>);\n\n<span class=\"comment\">// Look up the values associated with some keys.\n</span><span class=\"kw\">let </span>to_find = [<span class=\"string\">\"Pride and Prejudice\"</span>, <span class=\"string\">\"Alice's Adventure in Wonderland\"</span>];\n<span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>book <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>to_find {\n    <span class=\"kw\">match </span>book_reviews.get(book) {\n        <span class=\"prelude-val\">Some</span>(review) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{book}: {review}\"</span>),\n        <span class=\"prelude-val\">None </span>=&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"{book} is unreviewed.\"</span>)\n    }\n}\n\n<span class=\"comment\">// Look up the value for a key (will panic if the key is not found).\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"Review for Jane: {}\"</span>, book_reviews[<span class=\"string\">\"Pride and Prejudice\"</span>]);\n\n<span class=\"comment\">// Iterate over everything.\n</span><span class=\"kw\">for </span>(book, review) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>book_reviews {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{book}: \\\"{review}\\\"\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++//+Type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashMap%3CString,+String%3E%60+in+this+example).%0A++++let+mut+book_reviews+=+HashMap::new();%0A++++%0A++++//+Review+some+books.%0A++++book_reviews.insert(%0A++++++++%22Adventures+of+Huckleberry+Finn%22.to_string(),%0A++++++++%22My+favorite+book.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22Grimms'+Fairy+Tales%22.to_string(),%0A++++++++%22Masterpiece.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22Pride+and+Prejudice%22.to_string(),%0A++++++++%22Very+enjoyable.%22.to_string(),%0A++++);%0A++++book_reviews.insert(%0A++++++++%22The+Adventures+of+Sherlock+Holmes%22.to_string(),%0A++++++++%22Eye+lyked+it+alot.%22.to_string(),%0A++++);%0A++++%0A++++//+Check+for+a+specific+one.%0A++++//+When+collections+store+owned+values+(String),+they+can+still+be%0A++++//+queried+using+references+(%26str).%0A++++if+!book_reviews.contains_key(%22Les+Mis%C3%A9rables%22)+%7B%0A++++++++println!(%22We've+got+%7B%7D+reviews,+but+Les+Mis%C3%A9rables+ain't+one.%22,%0A+++++++++++++++++book_reviews.len());%0A++++%7D%0A++++%0A++++//+oops,+this+review+has+a+lot+of+spelling+mistakes,+let's+delete+it.%0A++++book_reviews.remove(%22The+Adventures+of+Sherlock+Holmes%22);%0A++++%0A++++//+Look+up+the+values+associated+with+some+keys.%0A++++let+to_find+=+%5B%22Pride+and+Prejudice%22,+%22Alice's+Adventure+in+Wonderland%22%5D;%0A++++for+%26book+in+%26to_find+%7B%0A++++++++match+book_reviews.get(book)+%7B%0A++++++++++++Some(review)+=%3E+println!(%22%7Bbook%7D:+%7Breview%7D%22),%0A++++++++++++None+=%3E+println!(%22%7Bbook%7D+is+unreviewed.%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Look+up+the+value+for+a+key+(will+panic+if+the+key+is+not+found).%0A++++println!(%22Review+for+Jane:+%7B%7D%22,+book_reviews%5B%22Pride+and+Prejudice%22%5D);%0A++++%0A++++//+Iterate+over+everything.%0A++++for+(book,+review)+in+%26book_reviews+%7B%0A++++++++println!(%22%7Bbook%7D:+%5C%22%7Breview%7D%5C%22%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A <code>HashMap</code> with a known list of items can be initialized from an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>solar_distance = HashMap::from([\n    (<span class=\"string\">\"Mercury\"</span>, <span class=\"number\">0.4</span>),\n    (<span class=\"string\">\"Venus\"</span>, <span class=\"number\">0.7</span>),\n    (<span class=\"string\">\"Earth\"</span>, <span class=\"number\">1.0</span>),\n    (<span class=\"string\">\"Mars\"</span>, <span class=\"number\">1.5</span>),\n]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+solar_distance+=+HashMap::from(%5B%0A++++++++(%22Mercury%22,+0.4),%0A++++++++(%22Venus%22,+0.7),%0A++++++++(%22Earth%22,+1.0),%0A++++++++(%22Mars%22,+1.5),%0A++++%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><code>HashMap</code> implements an <a href=\"#method.entry\"><code>Entry</code> API</a>, which allows\nfor complex methods of getting, setting, updating and removing keys and\ntheir values:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"comment\">// type inference lets us omit an explicit type signature (which\n// would be `HashMap&lt;&amp;str, u8&gt;` in this example).\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>player_stats = HashMap::new();\n\n<span class=\"kw\">fn </span>random_stat_buff() -&gt; u8 {\n    <span class=\"comment\">// could actually return some random value here - let's just return\n    // some fixed value for now\n    </span><span class=\"number\">42\n</span>}\n\n<span class=\"comment\">// insert a key only if it doesn't already exist\n</span>player_stats.entry(<span class=\"string\">\"health\"</span>).or_insert(<span class=\"number\">100</span>);\n\n<span class=\"comment\">// insert a key using a function that provides a new value only if it\n// doesn't already exist\n</span>player_stats.entry(<span class=\"string\">\"defence\"</span>).or_insert_with(random_stat_buff);\n\n<span class=\"comment\">// update a key, guarding against the key possibly not being set\n</span><span class=\"kw\">let </span>stat = player_stats.entry(<span class=\"string\">\"attack\"</span>).or_insert(<span class=\"number\">100</span>);\n<span class=\"kw-2\">*</span>stat += random_stat_buff();\n\n<span class=\"comment\">// modify an entry before an insert with in-place mutation\n</span>player_stats.entry(<span class=\"string\">\"mana\"</span>).and_modify(|mana| <span class=\"kw-2\">*</span>mana += <span class=\"number\">200</span>).or_insert(<span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++//+type+inference+lets+us+omit+an+explicit+type+signature+(which%0A++++//+would+be+%60HashMap%3C%26str,+u8%3E%60+in+this+example).%0A++++let+mut+player_stats+=+HashMap::new();%0A++++%0A++++fn+random_stat_buff()+-%3E+u8+%7B%0A++++++++//+could+actually+return+some+random+value+here+-+let's+just+return%0A++++++++//+some+fixed+value+for+now%0A++++++++42%0A++++%7D%0A++++%0A++++//+insert+a+key+only+if+it+doesn't+already+exist%0A++++player_stats.entry(%22health%22).or_insert(100);%0A++++%0A++++//+insert+a+key+using+a+function+that+provides+a+new+value+only+if+it%0A++++//+doesn't+already+exist%0A++++player_stats.entry(%22defence%22).or_insert_with(random_stat_buff);%0A++++%0A++++//+update+a+key,+guarding+against+the+key+possibly+not+being+set%0A++++let+stat+=+player_stats.entry(%22attack%22).or_insert(100);%0A++++*stat+%2B=+random_stat_buff();%0A++++%0A++++//+modify+an+entry+before+an+insert+with+in-place+mutation%0A++++player_stats.entry(%22mana%22).and_modify(%7Cmana%7C+*mana+%2B=+200).or_insert(100);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The easiest way to use <code>HashMap</code> with a custom key type is to derive <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> and <a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a>.\nWe must also derive <a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"attr\">#[derive(Hash, Eq, PartialEq, Debug)]\n</span><span class=\"kw\">struct </span>Viking {\n    name: String,\n    country: String,\n}\n\n<span class=\"kw\">impl </span>Viking {\n    <span class=\"doccomment\">/// Creates a new Viking.\n    </span><span class=\"kw\">fn </span>new(name: <span class=\"kw-2\">&amp;</span>str, country: <span class=\"kw-2\">&amp;</span>str) -&gt; Viking {\n        Viking { name: name.to_string(), country: country.to_string() }\n    }\n}\n\n<span class=\"comment\">// Use a HashMap to store the vikings' health points.\n</span><span class=\"kw\">let </span>vikings = HashMap::from([\n    (Viking::new(<span class=\"string\">\"Einar\"</span>, <span class=\"string\">\"Norway\"</span>), <span class=\"number\">25</span>),\n    (Viking::new(<span class=\"string\">\"Olaf\"</span>, <span class=\"string\">\"Denmark\"</span>), <span class=\"number\">24</span>),\n    (Viking::new(<span class=\"string\">\"Harald\"</span>, <span class=\"string\">\"Iceland\"</span>), <span class=\"number\">12</span>),\n]);\n\n<span class=\"comment\">// Use derived implementation to print the status of the vikings.\n</span><span class=\"kw\">for </span>(viking, health) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>vikings {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{viking:?} has {health} hp\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++%23%5Bderive(Hash,+Eq,+PartialEq,+Debug)%5D%0A++++struct+Viking+%7B%0A++++++++name:+String,%0A++++++++country:+String,%0A++++%7D%0A++++%0A++++impl+Viking+%7B%0A++++++++///+Creates+a+new+Viking.%0A++++++++fn+new(name:+%26str,+country:+%26str)+-%3E+Viking+%7B%0A++++++++++++Viking+%7B+name:+name.to_string(),+country:+country.to_string()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Use+a+HashMap+to+store+the+vikings'+health+points.%0A++++let+vikings+=+HashMap::from(%5B%0A++++++++(Viking::new(%22Einar%22,+%22Norway%22),+25),%0A++++++++(Viking::new(%22Olaf%22,+%22Denmark%22),+24),%0A++++++++(Viking::new(%22Harald%22,+%22Iceland%22),+12),%0A++++%5D);%0A++++%0A++++//+Use+derived+implementation+to+print+the+status+of+the+vikings.%0A++++for+(viking,+health)+in+%26vikings+%7B%0A++++++++println!(%22%7Bviking:?%7D+has+%7Bhealth%7D+hp%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#217-254\">source</a><a href=\"#impl-HashMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#232-234\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code>.</p>\n<p>The hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; = HashMap::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#251-253\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code> with at least the specified capacity.</p>\n<p>The hash map will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the hash map will not allocate.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; = HashMap::with_capacity(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::with_capacity(10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#256-731\">source</a><a href=\"#impl-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const unstable\">1.7.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/102575\" title=\"Tracking issue for const_collections_with_hasher\">unstable</a>)</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#283-285\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_hasher\" class=\"fn\">with_hasher</a>(hash_builder: S) -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code> which will use the given hash builder to hash\nkeys.</p>\n<p>The created map has the default initial capacity.</p>\n<p>Warning: <code>hash_builder</code> is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::with_hasher(s);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+map+=+HashMap::with_hasher(s);%0A++++map.insert(1,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#314-316\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, hasher: S) -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code> with at least the specified capacity, using\n<code>hasher</code> to hash the keys.</p>\n<p>The hash map will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the hash map will not allocate.</p>\n<p>Warning: <code>hasher</code> is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.</p>\n<p>The <code>hasher</code> passed should implement the <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+s+=+RandomState::new();%0A++++let+mut+map+=+HashMap::with_capacity_and_hasher(10,+s);%0A++++map.insert(1,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#332-334\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the map can hold without reallocating.</p>\n<p>This number is a lower bound; the <code>HashMap&lt;K, V&gt;</code> might be able to hold\nmore, but is guaranteed to be able to hold at least this many.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">let </span>map: HashMap&lt;i32, i32&gt; = HashMap::with_capacity(<span class=\"number\">100</span>);\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++assert!(map.capacity()+%3E=+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.keys\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#361-363\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hash_map/struct.Keys.html\" title=\"struct std::collections::hash_map::Keys\">Keys</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Keys<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys in arbitrary order.\nThe iterator element type is <code>&amp;'a K</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>key <span class=\"kw\">in </span>map.keys() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+key+in+map.keys()+%7B%0A++++++++println!(%22%7Bkey%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance\"><a class=\"doc-anchor\" href=\"#performance\">§</a>Performance</h5>\n<p>In the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_keys\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#394-396\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_keys\" class=\"fn\">into_keys</a>(self) -&gt; <a class=\"struct\" href=\"hash_map/struct.IntoKeys.html\" title=\"struct std::collections::hash_map::IntoKeys\">IntoKeys</a>&lt;K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoKeys<K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is <code>K</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;<span class=\"kw-2\">&amp;</span>str&gt; = map.into_keys().collect();\n<span class=\"comment\">// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\n</span>vec.sort_unstable();\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++let+mut+vec:+Vec%3C%26str%3E+=+map.into_keys().collect();%0A++++//+The+%60IntoKeys%60+iterator+produces+keys+in+arbitrary+order,+so+the%0A++++//+keys+must+be+sorted+to+test+them+against+a+sorted+array.%0A++++vec.sort_unstable();%0A++++assert_eq!(vec,+%5B%22a%22,+%22b%22,+%22c%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-1\"><a class=\"doc-anchor\" href=\"#performance-1\">§</a>Performance</h5>\n<p>In the current implementation, iterating over keys takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.values\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#423-425\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.values\" class=\"fn\">values</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hash_map/struct.Values.html\" title=\"struct std::collections::hash_map::Values\">Values</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Values<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values in arbitrary order.\nThe iterator element type is <code>&amp;'a V</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{val}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+val+in+map.values()+%7B%0A++++++++println!(%22%7Bval%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-2\"><a class=\"doc-anchor\" href=\"#performance-2\">§</a>Performance</h5>\n<p>In the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.values_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#456-458\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.values_mut\" class=\"fn\">values_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hash_map/struct.ValuesMut.html\" title=\"struct std::collections::hash_map::ValuesMut\">ValuesMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ValuesMut<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values mutably in arbitrary order.\nThe iterator element type is <code>&amp;'a mut V</code>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values_mut() {\n    <span class=\"kw-2\">*</span>val = <span class=\"kw-2\">*</span>val + <span class=\"number\">10</span>;\n}\n\n<span class=\"kw\">for </span>val <span class=\"kw\">in </span>map.values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{val}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+val+in+map.values_mut()+%7B%0A++++++++*val+=+*val+%2B+10;%0A++++%7D%0A++++%0A++++for+val+in+map.values()+%7B%0A++++++++println!(%22%7Bval%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-3\"><a class=\"doc-anchor\" href=\"#performance-3\">§</a>Performance</h5>\n<p>In the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_values\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.54.0\">1.54.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#489-491\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_values\" class=\"fn\">into_values</a>(self) -&gt; <a class=\"struct\" href=\"hash_map/struct.IntoValues.html\" title=\"struct std::collections::hash_map::IntoValues\">IntoValues</a>&lt;K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoValues<K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is <code>V</code>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = map.into_values().collect();\n<span class=\"comment\">// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\n</span>vec.sort_unstable();\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++let+mut+vec:+Vec%3Ci32%3E+=+map.into_values().collect();%0A++++//+The+%60IntoValues%60+iterator+produces+values+in+arbitrary+order,+so%0A++++//+the+values+must+be+sorted+to+test+them+against+a+sorted+array.%0A++++vec.sort_unstable();%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-4\"><a class=\"doc-anchor\" href=\"#performance-4\">§</a>Performance</h5>\n<p>In the current implementation, iterating over values takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#518-520\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hash_map/struct.Iter.html\" title=\"struct std::collections::hash_map::Iter\">Iter</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order.\nThe iterator element type is <code>(&amp;'a K, &amp;'a V)</code>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>(key, val) <span class=\"kw\">in </span>map.iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {key} val: {val}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++for+(key,+val)+in+map.iter()+%7B%0A++++++++println!(%22key:+%7Bkey%7D+val:+%7Bval%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-5\"><a class=\"doc-anchor\" href=\"#performance-5\">§</a>Performance</h5>\n<p>In the current implementation, iterating over map takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#553-555\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hash_map/struct.IterMut.html\" title=\"struct std::collections::hash_map::IterMut\">IterMut</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nThe iterator element type is <code>(&amp;'a K, &amp;'a mut V)</code>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"comment\">// Update all values\n</span><span class=\"kw\">for </span>(<span class=\"kw\">_</span>, val) <span class=\"kw\">in </span>map.iter_mut() {\n    <span class=\"kw-2\">*</span>val <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n}\n\n<span class=\"kw\">for </span>(key, val) <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>map {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {key} val: {val}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++//+Update+all+values%0A++++for+(_,+val)+in+map.iter_mut()+%7B%0A++++++++*val+*=+2;%0A++++%7D%0A++++%0A++++for+(key,+val)+in+%26map+%7B%0A++++++++println!(%22key:+%7Bkey%7D+val:+%7Bval%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-6\"><a class=\"doc-anchor\" href=\"#performance-6\">§</a>Performance</h5>\n<p>In the current implementation, iterating over map takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#570-572\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the map.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">0</span>);\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++assert_eq!(a.len(),+0);%0A++++a.insert(1,+%22a%22);%0A++++assert_eq!(a.len(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#588-590\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains no elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = HashMap::new();\n<span class=\"macro\">assert!</span>(a.is_empty());\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert!</span>(!a.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++assert!(a.is_empty());%0A++++a.insert(1,+%22a%22);%0A++++assert!(!a.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#618-620\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.drain\" class=\"fn\">drain</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hash_map/struct.Drain.html\" title=\"struct std::collections::hash_map::Drain\">Drain</a>&lt;'_, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain<'_, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.</p>\n<p>If the returned iterator is dropped before being fully consumed, it\ndrops the remaining key-value pairs. The returned iterator keeps a\nmutable borrow on the map to optimize its implementation.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = HashMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\na.insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n\n<span class=\"kw\">for </span>(k, v) <span class=\"kw\">in </span>a.drain().take(<span class=\"number\">1</span>) {\n    <span class=\"macro\">assert!</span>(k == <span class=\"number\">1 </span>|| k == <span class=\"number\">2</span>);\n    <span class=\"macro\">assert!</span>(v == <span class=\"string\">\"a\" </span>|| v == <span class=\"string\">\"b\"</span>);\n}\n\n<span class=\"macro\">assert!</span>(a.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++a.insert(1,+%22a%22);%0A++++a.insert(2,+%22b%22);%0A++++%0A++++for+(k,+v)+in+a.drain().take(1)+%7B%0A++++++++assert!(k+==+1+%7C%7C+k+==+2);%0A++++++++assert!(v+==+%22a%22+%7C%7C+v+==+%22b%22);%0A++++%7D%0A++++%0A++++assert!(a.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#659-664\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"hash_map/struct.ExtractIf.html\" title=\"struct std::collections::hash_map::ExtractIf\">ExtractIf</a>&lt;'_, K, V, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf<'_, K, V, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_extract_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59618\">#59618</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element should be removed.</p>\n<p>If the closure returns true, the element is removed from the map and yielded.\nIf the closure returns false, or panics, the element remains in the map and will not be\nyielded.</p>\n<p>Note that <code>extract_if</code> lets you mutate every value in the filter closure, regardless of\nwhether you choose to keep or remove it.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"hash_map/struct.HashMap.html#method.retain\" title=\"method std::collections::hash_map::HashMap::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<p>Splitting a map into even and odd keys, reusing the original map:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(hash_extract_if)]\n</span><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x)).collect();\n<span class=\"kw\">let </span>extracted: HashMap&lt;i32, i32&gt; = map.extract_if(|k, _v| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>evens = extracted.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>odds = map.keys().copied().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\nevens.sort();\nodds.sort();\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(hash_extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+(0..8).map(%7Cx%7C+(x,+x)).collect();%0A++++let+extracted:+HashMap%3Ci32,+i32%3E+=+map.extract_if(%7Ck,+_v%7C+k+%25+2+==+0).collect();%0A++++%0A++++let+mut+evens+=+extracted.keys().copied().collect::%3CVec%3C_%3E%3E();%0A++++let+mut+odds+=+map.keys().copied().collect::%3CVec%3C_%3E%3E();%0A++++evens.sort();%0A++++odds.sort();%0A++++%0A++++assert_eq!(evens,+vec!%5B0,+2,+4,+6%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+7%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#688-693\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all pairs <code>(k, v)</code> for which <code>f(&amp;k, &amp;mut v)</code> returns <code>false</code>.\nThe elements are visited in unsorted (and unspecified) order.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x<span class=\"kw-2\">*</span><span class=\"number\">10</span>)).collect();\nmap.retain(|<span class=\"kw-2\">&amp;</span>k, <span class=\"kw\">_</span>| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">4</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+(0..8).map(%7Cx%7C+(x,+x*10)).collect();%0A++++map.retain(%7C%26k,+_%7C+k+%25+2+==+0);%0A++++assert_eq!(map.len(),+4);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"performance-7\"><a class=\"doc-anchor\" href=\"#performance-7\">§</a>Performance</h5>\n<p>In the current implementation, this operation takes O(capacity) time\ninstead of O(len) because it internally visits empty buckets too.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#710-712\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = HashMap::new();\na.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\na.clear();\n<span class=\"macro\">assert!</span>(a.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+a+=+HashMap::new();%0A++++a.insert(1,+%22a%22);%0A++++a.clear();%0A++++assert!(a.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hasher\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#728-730\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.hasher\" class=\"fn\">hasher</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;S</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the map’s <a href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\"><code>BuildHasher</code></a>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>hasher = RandomState::new();\n<span class=\"kw\">let </span>map: HashMap&lt;i32, i32&gt; = HashMap::with_hasher(hasher);\n<span class=\"kw\">let </span>hasher: <span class=\"kw-2\">&amp;</span>RandomState = map.hasher();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++use+std::hash::RandomState;%0A++++%0A++++let+hasher+=+RandomState::new();%0A++++let+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_hasher(hasher);%0A++++let+hasher:+%26RandomState+=+map.hasher();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashMap%3CK,+V,+S%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#733-1196\">source</a><a href=\"#impl-HashMap%3CK,+V,+S%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#757-759\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashMap</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <a href=\"../primitive.usize.html\" title=\"primitive usize\"><code>usize</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; = HashMap::new();\nmap.reserve(<span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++let+mut+map:+HashMap%3C%26str,+i32%3E+=+HashMap::new();%0A++++map.reserve(10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#783-785\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the <code>HashMap</code>. The collection may reserve more space to speculatively\navoid frequent reallocations. After calling <code>try_reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code> if\nit returns <code>Ok(())</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;<span class=\"kw-2\">&amp;</span>str, isize&gt; = HashMap::new();\nmap.try_reserve(<span class=\"number\">10</span>).expect(<span class=\"string\">\"why is the test harness OOMing on a handful of bytes?\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3C%26str,+isize%3E+=+HashMap::new();%0A++++map.try_reserve(10).expect(%22why+is+the+test+harness+OOMing+on+a+handful+of+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#805-807\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;i32, i32&gt; = HashMap::with_capacity(<span class=\"number\">100</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);\nmap.insert(<span class=\"number\">3</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">100</span>);\nmap.shrink_to_fit();\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++map.insert(1,+2);%0A++++map.insert(3,+4);%0A++++assert!(map.capacity()+%3E=+100);%0A++++map.shrink_to_fit();%0A++++assert!(map.capacity()+%3E=+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#831-833\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the map with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;i32, i32&gt; = HashMap::with_capacity(<span class=\"number\">100</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);\nmap.insert(<span class=\"number\">3</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">100</span>);\nmap.shrink_to(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">10</span>);\nmap.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map:+HashMap%3Ci32,+i32%3E+=+HashMap::with_capacity(100);%0A++++map.insert(1,+2);%0A++++map.insert(3,+4);%0A++++assert!(map.capacity()+%3E=+100);%0A++++map.shrink_to(10);%0A++++assert!(map.capacity()+%3E=+10);%0A++++map.shrink_to(0);%0A++++assert!(map.capacity()+%3E=+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#855-857\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.entry\" class=\"fn\">entry</a>(&amp;mut self, key: K) -&gt; <a class=\"enum\" href=\"hash_map/enum.Entry.html\" title=\"enum std::collections::hash_map::Entry\">Entry</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the given key’s corresponding entry in the map for in-place manipulation.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>letters = HashMap::new();\n\n<span class=\"kw\">for </span>ch <span class=\"kw\">in </span><span class=\"string\">\"a short treatise on fungi\"</span>.chars() {\n    letters.entry(ch).and_modify(|counter| <span class=\"kw-2\">*</span>counter += <span class=\"number\">1</span>).or_insert(<span class=\"number\">1</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(letters[<span class=\"kw-2\">&amp;</span><span class=\"string\">'s'</span>], <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(letters[<span class=\"kw-2\">&amp;</span><span class=\"string\">'t'</span>], <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(letters[<span class=\"kw-2\">&amp;</span><span class=\"string\">'u'</span>], <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(letters.get(<span class=\"kw-2\">&amp;</span><span class=\"string\">'y'</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+letters+=+HashMap::new();%0A++++%0A++++for+ch+in+%22a+short+treatise+on+fungi%22.chars()+%7B%0A++++++++letters.entry(ch).and_modify(%7Ccounter%7C+*counter+%2B=+1).or_insert(1);%0A++++%7D%0A++++%0A++++assert_eq!(letters%5B%26's'%5D,+2);%0A++++assert_eq!(letters%5B%26't'%5D,+3);%0A++++assert_eq!(letters%5B%26'u'%5D,+1);%0A++++assert_eq!(letters.get(%26'y'),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#877-883\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.get(%261),+Some(%26%22a%22));%0A++++assert_eq!(map.get(%262),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_key_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#903-909\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_key_value\" class=\"fn\">get_key_value</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;V</a>)&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the key-value pair corresponding to the supplied key.</p>\n<p>The supplied key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_key_value(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.get_key_value(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.get_key_value(%261),+Some((%261,+%26%22a%22)));%0A++++assert_eq!(map.get_key_value(%262),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_many_mut\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#957-963\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_many_mut\" class=\"fn\">get_many_mut</a>&lt;Q, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    ks: [<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>],\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>map_many_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/97601\">#97601</a>)</span></div></span></summary><div class=\"docblock\"><p>Attempts to get mutable references to <code>N</code> values in the map at once.</p>\n<p>Returns an array of length <code>N</code> with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. <code>None</code> will be returned if any of the\nkeys are duplicates or missing.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(map_many_mut)]\n</span><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>libraries = HashMap::new();\nlibraries.insert(<span class=\"string\">\"Bodleian Library\"</span>.to_string(), <span class=\"number\">1602</span>);\nlibraries.insert(<span class=\"string\">\"Athenæum\"</span>.to_string(), <span class=\"number\">1807</span>);\nlibraries.insert(<span class=\"string\">\"Herzogin-Anna-Amalia-Bibliothek\"</span>.to_string(), <span class=\"number\">1691</span>);\nlibraries.insert(<span class=\"string\">\"Library of Congress\"</span>.to_string(), <span class=\"number\">1800</span>);\n\n<span class=\"kw\">let </span>got = libraries.get_many_mut([\n    <span class=\"string\">\"Athenæum\"</span>,\n    <span class=\"string\">\"Library of Congress\"</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    got,\n    <span class=\"prelude-val\">Some</span>([\n        <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1807</span>,\n        <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1800</span>,\n    ]),\n);\n\n<span class=\"comment\">// Missing keys result in None\n</span><span class=\"kw\">let </span>got = libraries.get_many_mut([\n    <span class=\"string\">\"Athenæum\"</span>,\n    <span class=\"string\">\"New York Public Library\"</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(got, <span class=\"prelude-val\">None</span>);\n\n<span class=\"comment\">// Duplicate keys result in None\n</span><span class=\"kw\">let </span>got = libraries.get_many_mut([\n    <span class=\"string\">\"Athenæum\"</span>,\n    <span class=\"string\">\"Athenæum\"</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(got, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_many_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+libraries+=+HashMap::new();%0A++++libraries.insert(%22Bodleian+Library%22.to_string(),+1602);%0A++++libraries.insert(%22Athen%C3%A6um%22.to_string(),+1807);%0A++++libraries.insert(%22Herzogin-Anna-Amalia-Bibliothek%22.to_string(),+1691);%0A++++libraries.insert(%22Library+of+Congress%22.to_string(),+1800);%0A++++%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Library+of+Congress%22,%0A++++%5D);%0A++++assert_eq!(%0A++++++++got,%0A++++++++Some(%5B%0A++++++++++++%26mut+1807,%0A++++++++++++%26mut+1800,%0A++++++++%5D),%0A++++);%0A++++%0A++++//+Missing+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22New+York+Public+Library%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A++++%0A++++//+Duplicate+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Athen%C3%A6um%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_many_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1013-1022\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_many_unchecked_mut\" class=\"fn\">get_many_unchecked_mut</a>&lt;Q, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    ks: [<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>],\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;[<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>map_many_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/97601\">#97601</a>)</span></div></span></summary><div class=\"docblock\"><p>Attempts to get mutable references to <code>N</code> values in the map at once, without validating that\nthe values are unique.</p>\n<p>Returns an array of length <code>N</code> with the results of each query. <code>None</code> will be returned if\nany of the keys are missing.</p>\n<p>For a safe alternative see <a href=\"hash_map/struct.HashMap.html#method.get_many_mut\" title=\"method std::collections::hash_map::HashMap::get_many_mut\"><code>get_many_mut</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Calling this method with overlapping keys is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting\nreferences are not used.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(map_many_mut)]\n</span><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>libraries = HashMap::new();\nlibraries.insert(<span class=\"string\">\"Bodleian Library\"</span>.to_string(), <span class=\"number\">1602</span>);\nlibraries.insert(<span class=\"string\">\"Athenæum\"</span>.to_string(), <span class=\"number\">1807</span>);\nlibraries.insert(<span class=\"string\">\"Herzogin-Anna-Amalia-Bibliothek\"</span>.to_string(), <span class=\"number\">1691</span>);\nlibraries.insert(<span class=\"string\">\"Library of Congress\"</span>.to_string(), <span class=\"number\">1800</span>);\n\n<span class=\"kw\">let </span>got = libraries.get_many_mut([\n    <span class=\"string\">\"Athenæum\"</span>,\n    <span class=\"string\">\"Library of Congress\"</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(\n    got,\n    <span class=\"prelude-val\">Some</span>([\n        <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1807</span>,\n        <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1800</span>,\n    ]),\n);\n\n<span class=\"comment\">// Missing keys result in None\n</span><span class=\"kw\">let </span>got = libraries.get_many_mut([\n    <span class=\"string\">\"Athenæum\"</span>,\n    <span class=\"string\">\"New York Public Library\"</span>,\n]);\n<span class=\"macro\">assert_eq!</span>(got, <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_many_mut)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+libraries+=+HashMap::new();%0A++++libraries.insert(%22Bodleian+Library%22.to_string(),+1602);%0A++++libraries.insert(%22Athen%C3%A6um%22.to_string(),+1807);%0A++++libraries.insert(%22Herzogin-Anna-Amalia-Bibliothek%22.to_string(),+1691);%0A++++libraries.insert(%22Library+of+Congress%22.to_string(),+1800);%0A++++%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22Library+of+Congress%22,%0A++++%5D);%0A++++assert_eq!(%0A++++++++got,%0A++++++++Some(%5B%0A++++++++++++%26mut+1807,%0A++++++++++++%26mut+1800,%0A++++++++%5D),%0A++++);%0A++++%0A++++//+Missing+keys+result+in+None%0A++++let+got+=+libraries.get_many_mut(%5B%0A++++++++%22Athen%C3%A6um%22,%0A++++++++%22New+York+Public+Library%22,%0A++++%5D);%0A++++assert_eq!(got,+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1042-1048\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains a value for the specified key.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.contains_key(%261),+true);%0A++++assert_eq!(map.contains_key(%262),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1070-1076\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the value corresponding to the key.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = map.get_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>x = <span class=\"string\">\"b\"</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"string\">\"b\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++if+let+Some(x)+=+map.get_mut(%261)+%7B%0A++++++++*x+=+%22b%22;%0A++++%7D%0A++++assert_eq!(map%5B%261%5D,+%22b%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1105-1107\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, k: K, v: V) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not have this key present, <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> is returned.</p>\n<p>If the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be <code>==</code> without being identical. See the <a href=\"index.html#insert-and-complex-keys\" title=\"mod std::collections\">module-level\ndocumentation</a> for more.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.is_empty(), <span class=\"bool-val\">false</span>);\n\nmap.insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.insert(<span class=\"number\">37</span>, <span class=\"string\">\"c\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>));\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>], <span class=\"string\">\"c\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++assert_eq!(map.insert(37,+%22a%22),+None);%0A++++assert_eq!(map.is_empty(),+false);%0A++++%0A++++map.insert(37,+%22b%22);%0A++++assert_eq!(map.insert(37,+%22c%22),+Some(%22b%22));%0A++++assert_eq!(map%5B%2637%5D,+%22c%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1133-1138\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_insert\" class=\"fn\">try_insert</a>(\n    &amp;mut self,\n    key: K,\n    value: V,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut V</a>, <a class=\"struct\" href=\"hash_map/struct.OccupiedError.html\" title=\"struct std::collections::hash_map::OccupiedError\">OccupiedError</a>&lt;'_, K, V&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>map_try_insert</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82766\">#82766</a>)</span></div></span></summary><div class=\"docblock\"><p>Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.</p>\n<p>If the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(map_try_insert)]\n\n</span><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>err = map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>).unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.entry.key(), <span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>);\n<span class=\"macro\">assert_eq!</span>(err.entry.get(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(err.value, <span class=\"string\">\"b\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(map_try_insert)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++assert_eq!(map.try_insert(37,+%22a%22).unwrap(),+%26%22a%22);%0A++++%0A++++let+err+=+map.try_insert(37,+%22b%22).unwrap_err();%0A++++assert_eq!(err.entry.key(),+%2637);%0A++++assert_eq!(err.entry.get(),+%26%22a%22);%0A++++assert_eq!(err.value,+%22b%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1160-1166\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the value at the key if the key\nwas previously in the map.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+mut+map+=+HashMap::new();%0A++++map.insert(1,+%22a%22);%0A++++assert_eq!(map.remove(%261),+Some(%22a%22));%0A++++assert_eq!(map.remove(%261),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_entry\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1189-1195\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove_entry\" class=\"fn\">remove_entry</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the stored key and value if the\nkey was previously in the map.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a> and <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = HashMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove_entry(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>((<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::collections::HashMap;%0A%0Afn+main()+%7B%0Alet+mut+map+=+HashMap::new();%0Amap.insert(1,+%22a%22);%0Aassert_eq!(map.remove_entry(%261),+Some((1,+%22a%22)));%0Aassert_eq!(map.remove(%261),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-HashMap%3CK,+V,+S%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1198-1259\">source</a><a href=\"#impl-HashMap%3CK,+V,+S%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.raw_entry_mut\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1235-1237\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.raw_entry_mut\" class=\"fn\">raw_entry_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"hash_map/struct.RawEntryBuilderMut.html\" title=\"struct std::collections::hash_map::RawEntryBuilderMut\">RawEntryBuilderMut</a>&lt;'_, K, V, S&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a raw entry builder for the HashMap.</p>\n<p>Raw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched. After this, insertions into a vacant entry\nstill require an owned key to be provided.</p>\n<p>Raw entries are useful for such exotic situations as:</p>\n<ul>\n<li>Hash memoization</li>\n<li>Deferring the creation of an owned key until it is known to be required</li>\n<li>Using a search key that doesn’t work with the Borrow trait</li>\n<li>Using custom comparison logic without newtype wrappers</li>\n</ul>\n<p>Because raw entries provide much more low-level control, it’s much easier\nto put the HashMap into an inconsistent state which, while memory-safe,\nwill cause the map to produce seemingly random results. Higher-level and\nmore foolproof APIs like <code>entry</code> should be preferred when possible.</p>\n<p>In particular, the hash used to initialize the raw entry must still be\nconsistent with the hash of the key that is ultimately stored in the entry.\nThis is because implementations of HashMap may need to recompute hashes\nwhen resizing, at which point only the keys are available.</p>\n<p>Raw entries give mutable access to the keys. This must not be used\nto modify how the key would compare or hash, as the map will not re-evaluate\nwhere the key should go, meaning the keys may become “lost” if their\nlocation does not reflect their state. For instance, if you change a key\nso that the map now contains keys which compare equal, search may start\nacting erratically, with two keys randomly masking each other. Implementations\nare free to assume this doesn’t happen (within the limits of memory-safety).</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.raw_entry\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1256-1258\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.raw_entry\" class=\"fn\">raw_entry</a>(&amp;self) -&gt; <a class=\"struct\" href=\"hash_map/struct.RawEntryBuilder.html\" title=\"struct std::collections::hash_map::RawEntryBuilder\">RawEntryBuilder</a>&lt;'_, K, V, S&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hash_raw_entry</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/56167\">#56167</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a raw immutable entry builder for the HashMap.</p>\n<p>Raw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched.</p>\n<p>This is useful for</p>\n<ul>\n<li>Hash memoization</li>\n<li>Using a search key that doesn’t work with the Borrow trait</li>\n<li>Using custom comparison logic without newtype wrappers</li>\n</ul>\n<p>Unless you are in such a situation, higher-level and more foolproof APIs like\n<code>get</code> should be preferred.</p>\n<p>Immutable raw entries have very limited use; you might instead want <code>raw_entry_mut</code>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1262-1277\">source</a></span><a href=\"#impl-Clone-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1269-1271\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1274-1276\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1305-1313\">source</a></span><a href=\"#impl-Debug-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1310-1312\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1316-1325\">source</a></span><a href=\"#impl-Default-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1322-1324\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value for the hasher.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#3159-3179\">source</a></span><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3166-3168\">source</a><a href=\"#method.extend-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a V</a>)&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3171-3173\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, (k, v): (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a V</a>))</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3176-3178\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#3137-3156\">source</a></span><a href=\"#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"docblock\"><p>Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3143-3145\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3148-3150\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, (k, v): <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3153-3155\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1360-1376\">source</a></span><a href=\"#impl-From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, <a class=\"struct\" href=\"hash_map/struct.RandomState.html\" title=\"struct std::collections::hash_map::RandomState\">RandomState</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1373-1375\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: [<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map1 = HashMap::from([(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)]);\n<span class=\"kw\">let </span>map2: HashMap&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt; = [(<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>)].into();\n<span class=\"macro\">assert_eq!</span>(map1, map2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map1+=+HashMap::from(%5B(1,+2),+(3,+4)%5D);%0A++++let+map2:+HashMap%3C_,+_%3E+=+%5B(1,+2),+(3,+4)%5D.into();%0A++++assert_eq!(map1,+map2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#3122-3132\">source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#3127-3131\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt;&gt;(iter: T) -&gt; <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1328-1345\">source</a></span><a href=\"#impl-Index%3C%26Q%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, Q, V, S&gt; <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>&gt; for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1342-1344\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, key: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the supplied key.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the key is not present in the <code>HashMap</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#2175-2184\">source</a></span><a href=\"#impl-IntoIterator-for-%26HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a V</a>)</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hash_map/struct.Iter.html\" title=\"struct std::collections::hash_map::Iter\">Iter</a>&lt;'a, K, V&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#2181-2183\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hash_map/struct.Iter.html\" title=\"struct std::collections::hash_map::Iter\">Iter</a>&lt;'a, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#2187-2196\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut V</a>)</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hash_map/struct.IterMut.html\" title=\"struct std::collections::hash_map::IterMut\">IterMut</a>&lt;'a, K, V&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#2193-2195\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hash_map/struct.IterMut.html\" title=\"struct std::collections::hash_map::IterMut\">IterMut</a>&lt;'a, K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#2199-2226\">source</a></span><a href=\"#impl-IntoIterator-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#2223-2225\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"hash_map/struct.IntoIter.html\" title=\"struct std::collections::hash_map::IntoIter\">IntoIter</a>&lt;K, V&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<K, V>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"comment\">// Not possible with .iter()\n</span><span class=\"kw\">let </span>vec: Vec&lt;(<span class=\"kw-2\">&amp;</span>str, i32)&gt; = map.into_iter().collect();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::HashMap;%0A++++%0A++++let+map+=+HashMap::from(%5B%0A++++++++(%22a%22,+1),%0A++++++++(%22b%22,+2),%0A++++++++(%22c%22,+3),%0A++++%5D);%0A++++%0A++++//+Not+possible+with+.iter()%0A++++let+vec:+Vec%3C(%26str,+i32)%3E+=+map.into_iter().collect();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"hash_map/struct.IntoIter.html\" title=\"struct std::collections::hash_map::IntoIter\">IntoIter</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1280-1293\">source</a></span><a href=\"#impl-PartialEq-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/collections/hash/map.rs.html#1286-1292\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Eq-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/collections/hash/map.rs.html#1296-1302\">source</a></span><a href=\"#impl-Eq-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"../hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/panic.rs.html#82-88\">source</a></span><a href=\"#impl-UnwindSafe-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    V: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    S: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    K: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    V: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Send-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    K: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    V: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Sync-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    K: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    V: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    K: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    V: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Drain<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.Drain.html\\\" title=\\\"struct std::collections::hash_map::Drain\\\">Drain</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.Drain.html\\\" title=\\\"struct std::collections::hash_map::Drain\\\">Drain</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.tuple.html\\\">(K, V)</a>;</div>\",\"ExtractIf<'_, K, V, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.ExtractIf.html\\\" title=\\\"struct std::collections::hash_map::ExtractIf\\\">ExtractIf</a>&lt;'_, K, V, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K, V, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.ExtractIf.html\\\" title=\\\"struct std::collections::hash_map::ExtractIf\\\">ExtractIf</a>&lt;'_, K, V, F&gt;<div class=\\\"where\\\">where\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;K</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;mut V</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.tuple.html\\\">(K, V)</a>;</div>\",\"IntoIter<K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoIter.html\\\" title=\\\"struct std::collections::hash_map::IntoIter\\\">IntoIter</a>&lt;K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoIter.html\\\" title=\\\"struct std::collections::hash_map::IntoIter\\\">IntoIter</a>&lt;K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.tuple.html\\\">(K, V)</a>;</div>\",\"IntoKeys<K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoKeys.html\\\" title=\\\"struct std::collections::hash_map::IntoKeys\\\">IntoKeys</a>&lt;K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoKeys.html\\\" title=\\\"struct std::collections::hash_map::IntoKeys\\\">IntoKeys</a>&lt;K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = K;</div>\",\"IntoValues<K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoValues.html\\\" title=\\\"struct std::collections::hash_map::IntoValues\\\">IntoValues</a>&lt;K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.IntoValues.html\\\" title=\\\"struct std::collections::hash_map::IntoValues\\\">IntoValues</a>&lt;K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = V;</div>\",\"Iter<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.Iter.html\\\" title=\\\"struct std::collections::hash_map::Iter\\\">Iter</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.Iter.html\\\" title=\\\"struct std::collections::hash_map::Iter\\\">Iter</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a V</a>);</div>\",\"Iter<'a, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.Iter.html\\\" title=\\\"struct std::collections::hash_map::Iter\\\">Iter</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.Iter.html\\\" title=\\\"struct std::collections::hash_map::Iter\\\">Iter</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a V</a>);</div>\",\"IterMut<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.IterMut.html\\\" title=\\\"struct std::collections::hash_map::IterMut\\\">IterMut</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.IterMut.html\\\" title=\\\"struct std::collections::hash_map::IterMut\\\">IterMut</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut V</a>);</div>\",\"IterMut<'a, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.IterMut.html\\\" title=\\\"struct std::collections::hash_map::IterMut\\\">IterMut</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.IterMut.html\\\" title=\\\"struct std::collections::hash_map::IterMut\\\">IterMut</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut V</a>);</div>\",\"Keys<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.Keys.html\\\" title=\\\"struct std::collections::hash_map::Keys\\\">Keys</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.Keys.html\\\" title=\\\"struct std::collections::hash_map::Keys\\\">Keys</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a K</a>;</div>\",\"Values<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.Values.html\\\" title=\\\"struct std::collections::hash_map::Values\\\">Values</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.Values.html\\\" title=\\\"struct std::collections::hash_map::Values\\\">Values</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a V</a>;</div>\",\"ValuesMut<'_, K, V>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"hash_map/struct.ValuesMut.html\\\" title=\\\"struct std::collections::hash_map::ValuesMut\\\">ValuesMut</a>&lt;'a, K, V&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, K, V&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"hash_map/struct.ValuesMut.html\\\" title=\\\"struct std::collections::hash_map::ValuesMut\\\">ValuesMut</a>&lt;'a, K, V&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut V</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:59.302Z"
}