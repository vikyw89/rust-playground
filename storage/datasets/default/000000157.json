{
	"title": "Configuration - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/config.html",
	"markdown": "# Configuration - The Cargo Book\n\nThis document explains how Cargo’s configuration system works, as well as available keys or configuration. For configuration of a package through its manifest, see the [manifest format](manifest.html).\n\n## [Hierarchical structure](#hierarchical-structure)\n\nCargo allows local configuration for a particular package as well as global configuration. It looks for configuration files in the current directory and all parent directories. If, for example, Cargo were invoked in `/projects/foo/bar/baz`, then the following configuration files would be probed for and unified in this order:\n\n-   `/projects/foo/bar/baz/.cargo/config.toml`\n-   `/projects/foo/bar/.cargo/config.toml`\n-   `/projects/foo/.cargo/config.toml`\n-   `/projects/.cargo/config.toml`\n-   `/.cargo/config.toml`\n-   `$CARGO_HOME/config.toml` which defaults to:\n    -   Windows: `%USERPROFILE%\\.cargo\\config.toml`\n    -   Unix: `$HOME/.cargo/config.toml`\n\nWith this structure, you can specify configuration per-package, and even possibly check it into version control. You can also specify personal defaults with a configuration file in your home directory.\n\nIf a key is specified in multiple config files, the values will get merged together. Numbers, strings, and booleans will use the value in the deeper config directory taking precedence over ancestor directories, where the home directory is the lowest priority. Arrays will be joined together with higher precedence items being placed later in the merged array.\n\nAt present, when being invoked from a workspace, Cargo does not read config files from crates within the workspace. i.e. if a workspace has two crates in it, named `/projects/foo/bar/baz/mylib` and `/projects/foo/bar/baz/mybin`, and there are Cargo configs at `/projects/foo/bar/baz/mylib/.cargo/config.toml` and `/projects/foo/bar/baz/mybin/.cargo/config.toml`, Cargo does not read those configuration files if it is invoked from the workspace root (`/projects/foo/bar/baz/`).\n\n> **Note:** Cargo also reads config files without the `.toml` extension, such as `.cargo/config`. Support for the `.toml` extension was added in version 1.39 and is the preferred form. If both files exist, Cargo will use the file without the extension.\n\n## [Configuration format](#configuration-format)\n\nConfiguration files are written in the [TOML format](https://toml.io/) (like the manifest), with simple key-value pairs inside of sections (tables). The following is a quick overview of all settings, with detailed descriptions found below.\n\n```toml\npaths = [\"/path/to/override\"] # path dependency overrides\n\n[alias]     # command aliases\nb = \"build\"\nc = \"check\"\nt = \"test\"\nr = \"run\"\nrr = \"run --release\"\nrecursive_example = \"rr --example recursions\"\nspace_example = [\"run\", \"--release\", \"--\", \"\\\"command list\\\"\"]\n\n[build]\njobs = 1                      # number of parallel jobs, defaults to # of CPUs\nrustc = \"rustc\"               # the rust compiler tool\nrustc-wrapper = \"…\"           # run this wrapper instead of `rustc`\nrustc-workspace-wrapper = \"…\" # run this wrapper instead of `rustc` for workspace members\nrustdoc = \"rustdoc\"           # the doc generator tool\ntarget = \"triple\"             # build for the target triple (ignored by `cargo install`)\ntarget-dir = \"target\"         # path of where to place all generated artifacts\nrustflags = [\"…\", \"…\"]        # custom flags to pass to all compiler invocations\nrustdocflags = [\"…\", \"…\"]     # custom flags to pass to rustdoc\nincremental = true            # whether or not to enable incremental compilation\ndep-info-basedir = \"…\"        # path for the base directory for targets in depfiles\n\n[doc]\nbrowser = \"chromium\"          # browser to use with `cargo doc --open`,\n                              # overrides the `BROWSER` environment variable\n\n[env]\n# Set ENV_VAR_NAME=value for any process run by Cargo\nENV_VAR_NAME = \"value\"\n# Set even if already present in environment\nENV_VAR_NAME_2 = { value = \"value\", force = true }\n# Value is relative to .cargo directory containing `config.toml`, make absolute\nENV_VAR_NAME_3 = { value = \"relative/path\", relative = true }\n\n[future-incompat-report]\nfrequency = 'always' # when to display a notification about a future incompat report\n\n[cargo-new]\nvcs = \"none\"              # VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')\n\n[http]\ndebug = false               # HTTP debugging\nproxy = \"host:port\"         # HTTP proxy in libcurl format\nssl-version = \"tlsv1.3\"     # TLS version to use\nssl-version.max = \"tlsv1.3\" # maximum TLS version\nssl-version.min = \"tlsv1.1\" # minimum TLS version\ntimeout = 30                # timeout for each HTTP request, in seconds\nlow-speed-limit = 10        # network timeout threshold (bytes/sec)\ncainfo = \"cert.pem\"         # path to Certificate Authority (CA) bundle\ncheck-revoke = true         # check for SSL certificate revocation\nmultiplexing = true         # HTTP/2 multiplexing\nuser-agent = \"…\"            # the user-agent header\n\n[install]\nroot = \"/some/path\"         # `cargo install` destination directory\n\n[net]\nretry = 3                   # network retries\ngit-fetch-with-cli = true   # use the `git` executable for git operations\noffline = true              # do not access the network\n\n[net.ssh]\nknown-hosts = [\"...\"]       # known SSH host keys\n\n[patch.<registry>]\n# Same keys as for [patch] in Cargo.toml\n\n[profile.<name>]         # Modify profile settings via config.\ninherits = \"dev\"         # Inherits settings from [profile.dev].\nopt-level = 0            # Optimization level.\ndebug = true             # Include debug info.\nsplit-debuginfo = '...'  # Debug info splitting behavior.\nstrip = \"none\"           # Removes symbols or debuginfo.\ndebug-assertions = true  # Enables debug assertions.\noverflow-checks = true   # Enables runtime integer overflow checks.\nlto = false              # Sets link-time optimization.\npanic = 'unwind'         # The panic strategy.\nincremental = true       # Incremental compilation.\ncodegen-units = 16       # Number of code generation units.\nrpath = false            # Sets the rpath linking option.\n[profile.<name>.build-override]  # Overrides build-script settings.\n# Same keys for a normal profile.\n[profile.<name>.package.<name>]  # Override profile for a package.\n# Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).\n\n[registries.<name>]  # registries other than crates.io\nindex = \"…\"          # URL of the registry index\ntoken = \"…\"          # authentication token for the registry\n\n[registry]\ndefault = \"…\"        # name of the default registry\ntoken = \"…\"          # authentication token for crates.io\n\n[source.<name>]      # source definition and replacement\nreplace-with = \"…\"   # replace this source with the given named source\ndirectory = \"…\"      # path to a directory source\nregistry = \"…\"       # URL to a registry source\nlocal-registry = \"…\" # path to a local registry source\ngit = \"…\"            # URL of a git repository source\nbranch = \"…\"         # branch name for the git repository\ntag = \"…\"            # tag name for the git repository\nrev = \"…\"            # revision for the git repository\n\n[target.<triple>]\nlinker = \"…\"              # linker to use\nrunner = \"…\"              # wrapper to run executables\nrustflags = [\"…\", \"…\"]    # custom flags for `rustc`\nrustdocflags = [\"…\", \"…\"] # custom flags for `rustdoc`\n\n[target.<cfg>]\nrunner = \"…\"            # wrapper to run executables\nrustflags = [\"…\", \"…\"]  # custom flags for `rustc`\n\n[target.<triple>.<links>] # `links` build script override\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n[term]\nquiet = false          # whether cargo output is quiet\nverbose = false        # whether cargo provides verbose output\ncolor = 'auto'         # whether cargo colorizes output\nhyperlinks = true      # whether cargo inserts links into output\nunicode = true         # whether cargo can render output using non-ASCII unicode characters\nprogress.when = 'auto' # whether cargo shows progress bar\nprogress.width = 80    # width of progress bar\n\n```\n\n## [Environment variables](#environment-variables)\n\nCargo can also be configured through environment variables in addition to the TOML configuration files. For each configuration key of the form `foo.bar` the environment variable `CARGO_FOO_BAR` can also be used to define the value. Keys are converted to uppercase, dots and dashes are converted to underscores. For example the `target.x86_64-unknown-linux-gnu.runner` key can also be defined by the `CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER` environment variable.\n\nEnvironment variables will take precedence over TOML configuration files. Currently only integer, boolean, string and some array values are supported to be defined by environment variables. [Descriptions below](#configuration-keys) indicate which keys support environment variables and otherwise they are not supported due to [technical issues](https://github.com/rust-lang/cargo/issues/5416).\n\nIn addition to the system above, Cargo recognizes a few other specific [environment variables](environment-variables.html).\n\n## [Command-line overrides](#command-line-overrides)\n\nCargo also accepts arbitrary configuration overrides through the `--config` command-line option. The argument should be in TOML syntax of `KEY=VALUE`:\n\n```console\ncargo --config net.git-fetch-with-cli=true fetch\n\n```\n\nThe `--config` option may be specified multiple times, in which case the values are merged in left-to-right order, using the same merging logic that is used when multiple configuration files apply. Configuration values specified this way take precedence over environment variables, which take precedence over configuration files.\n\nSome examples of what it looks like using Bourne shell syntax:\n\n```console\n# Most shells will require escaping.\ncargo --config http.proxy=\\\"http://example.com\\\" …\n\n# Spaces may be used.\ncargo --config \"net.git-fetch-with-cli = true\" …\n\n# TOML array example. Single quotes make it easier to read and write.\ncargo --config 'build.rustdocflags = [\"--html-in-header\", \"header.html\"]' …\n\n# Example of a complex TOML key.\ncargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\"))'.runner = 'my-runner'\" …\n\n# Example of overriding a profile setting.\ncargo --config profile.dev.package.image.opt-level=3 …\n\n```\n\nThe `--config` option can also be used to pass paths to extra configuration files that Cargo should use for a specific invocation. Options from configuration files loaded this way follow the same precedence rules as other options specified directly with `--config`.\n\n## [Config-relative paths](#config-relative-paths)\n\nPaths in config files may be absolute, relative, or a bare name without any path separators. Paths for executables without a path separator will use the `PATH` environment variable to search for the executable. Paths for non-executables will be relative to where the config value is defined.\n\nIn particular, rules are:\n\n-   For environment variables, paths are relative to the current working directory.\n-   For config values loaded directly from the [`--config KEY=VALUE`](#command-line-overrides) option, paths are relative to the current working directory.\n-   For config files, paths are relative to the parent directory of the directory where the config files were defined, no matter those files are from either the [hierarchical probing](#hierarchical-structure) or the [`--config <path>`](#command-line-overrides) option.\n\n> **Note:** To maintain consistency with existing `.cargo/config.toml` probing behavior, it is by design that a path in a config file passed via `--config <path>` is also relative to two levels up from the config file itself.\n> \n> To avoid unexpected results, the rule of thumb is putting your extra config files at the same level of discovered `.cargo/config.toml` in your project. For instance, given a project `/my/project`, it is recommended to put config files under `/my/project/.cargo` or a new directory at the same level, such as `/my/project/.config`.\n\n```toml\n# Relative path examples.\n\n[target.x86_64-unknown-linux-gnu]\nrunner = \"foo\"  # Searches `PATH` for `foo`.\n\n[source.vendored-sources]\n# Directory is relative to the parent where `.cargo/config.toml` is located.\n# For example, `/my/project/.cargo/config.toml` would result in `/my/project/vendor`.\ndirectory = \"vendor\"\n\n```\n\n## [Executable paths with arguments](#executable-paths-with-arguments)\n\nSome Cargo commands invoke external programs, which can be configured as a path and some number of arguments.\n\nThe value may be an array of strings like `['/path/to/program', 'somearg']` or a space-separated string like `'/path/to/program somearg'`. If the path to the executable contains a space, the list form must be used.\n\nIf Cargo is passing other arguments to the program such as a path to open or run, they will be passed after the last specified argument in the value of an option of this format. If the specified program does not have path separators, Cargo will search `PATH` for its executable.\n\n## [Credentials](#credentials)\n\nConfiguration values with sensitive information are stored in the `$CARGO_HOME/credentials.toml` file. This file is automatically created and updated by [`cargo login`](../commands/cargo-login.html) and [`cargo logout`](../commands/cargo-logout.html) when using the [`cargo:token`](about:blank/registry-authentication.html#cargotoken) credential provider.\n\nTokens are used by some Cargo commands such as [`cargo publish`](../commands/cargo-publish.html) for authenticating with remote registries. Care should be taken to protect the tokens and to keep them secret.\n\nIt follows the same format as Cargo config files.\n\n```toml\n[registry]\ntoken = \"…\"   # Access token for crates.io\n\n[registries.<name>]\ntoken = \"…\"   # Access token for the named registry\n\n```\n\nAs with most other config values, tokens may be specified with environment variables. The token for [crates.io](https://crates.io/) may be specified with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other registries may be specified with environment variables of the form `CARGO_REGISTRIES_<name>_TOKEN` where `<name>` is the name of the registry in all capital letters.\n\n> **Note:** Cargo also reads and writes credential files without the `.toml` extension, such as `.cargo/credentials`. Support for the `.toml` extension was added in version 1.39. In version 1.68, Cargo writes to the file with the extension by default. However, for backward compatibility reason, when both files exist, Cargo will read and write the file without the extension.\n\n## [Configuration keys](#configuration-keys)\n\nThis section documents all configuration keys. The description for keys with variable parts are annotated with angled brackets like `target.<triple>` where the `<triple>` part can be any [target triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") like `target.x86_64-pc-windows-msvc`.\n\n### [`paths`](#paths)\n\n-   Type: array of strings (paths)\n-   Default: none\n-   Environment: not supported\n\nAn array of paths to local packages which are to be used as overrides for dependencies. For more information see the [Overriding Dependencies guide](about:blank/overriding-dependencies.html#paths-overrides).\n\n### [`[alias]`](#alias)\n\n-   Type: string or array of strings\n-   Default: see below\n-   Environment: `CARGO_ALIAS_<name>`\n\nThe `[alias]` table defines CLI command aliases. For example, running `cargo b` is an alias for running `cargo build`. Each key in the table is the subcommand, and the value is the actual command to run. The value may be an array of strings, where the first element is the command and the following are arguments. It may also be a string, which will be split on spaces into subcommand and arguments. The following aliases are built-in to Cargo:\n\n```toml\n[alias]\nb = \"build\"\nc = \"check\"\nd = \"doc\"\nt = \"test\"\nr = \"run\"\nrm = \"remove\"\n\n```\n\nAliases are not allowed to redefine existing built-in commands.\n\nAliases are recursive:\n\n```toml\n[alias]\nrr = \"run --release\"\nrecursive_example = \"rr --example recursions\"\n\n```\n\n### [`[build]`](#build)\n\nThe `[build]` table controls build-time operations and compiler settings.\n\n#### [`build.jobs`](#buildjobs)\n\n-   Type: integer or string\n-   Default: number of logical CPUs\n-   Environment: `CARGO_BUILD_JOBS`\n\nSets the maximum number of compiler processes to run in parallel. If negative, it sets the maximum number of compiler processes to the number of logical CPUs plus provided value. Should not be 0. If a string `default` is provided, it sets the value back to defaults.\n\nCan be overridden with the `--jobs` CLI option.\n\n#### [`build.rustc`](#buildrustc)\n\n-   Type: string (program path)\n-   Default: “rustc”\n-   Environment: `CARGO_BUILD_RUSTC` or `RUSTC`\n\nSets the executable to use for `rustc`.\n\n#### [`build.rustc-wrapper`](#buildrustc-wrapper)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTC_WRAPPER` or `RUSTC_WRAPPER`\n\nSets a wrapper to execute instead of `rustc`. The first argument passed to the wrapper is the path to the actual executable to use (i.e., `build.rustc`, if that is set, or `\"rustc\"` otherwise).\n\n#### [`build.rustc-workspace-wrapper`](#buildrustc-workspace-wrapper)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` or `RUSTC_WORKSPACE_WRAPPER`\n\nSets a wrapper to execute instead of `rustc`, for workspace members only. When building a single-package project without workspaces, that package is considered to be the workspace. The first argument passed to the wrapper is the path to the actual executable to use (i.e., `build.rustc`, if that is set, or `\"rustc\"` otherwise). It affects the filename hash so that artifacts produced by the wrapper are cached separately.\n\nIf both `rustc-wrapper` and `rustc-workspace-wrapper` are set, then they will be nested: the final invocation is `$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC`.\n\n#### [`build.rustdoc`](#buildrustdoc)\n\n-   Type: string (program path)\n-   Default: “rustdoc”\n-   Environment: `CARGO_BUILD_RUSTDOC` or `RUSTDOC`\n\nSets the executable to use for `rustdoc`.\n\n#### [`build.target`](#buildtarget)\n\n-   Type: string or array of strings\n-   Default: host platform\n-   Environment: `CARGO_BUILD_TARGET`\n\nThe default [target platform triples](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") to compile to.\n\nThis allows passing either a string or an array of strings. Each string value is a target platform triple. The selected build targets will be built for each of the selected architectures.\n\nThe string value may also be a relative path to a `.json` target spec file.\n\nCan be overridden with the `--target` CLI option.\n\n```toml\n[build]\ntarget = [\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"]\n\n```\n\n#### [`build.target-dir`](#buildtarget-dir)\n\n-   Type: string (path)\n-   Default: “target”\n-   Environment: `CARGO_BUILD_TARGET_DIR` or `CARGO_TARGET_DIR`\n\nThe path to where all compiler output is placed. The default if not specified is a directory named `target` located at the root of the workspace.\n\nCan be overridden with the `--target-dir` CLI option.\n\n#### [`build.rustflags`](#buildrustflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTFLAGS` or `CARGO_ENCODED_RUSTFLAGS` or `RUSTFLAGS`\n\nExtra command-line flags to pass to `rustc`. The value may be an array of strings or a space-separated string.\n\nThere are four mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1.  `CARGO_ENCODED_RUSTFLAGS` environment variable.\n2.  `RUSTFLAGS` environment variable.\n3.  All matching `target.<triple>.rustflags` and `target.<cfg>.rustflags` config entries joined together.\n4.  `build.rustflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustc`](../commands/cargo-rustc.html) command.\n\nIf the `--target` flag (or [`build.target`](#buildtarget)) is used, then the flags will only be passed to the compiler for the target. Things being built for the host, such as build scripts or proc macros, will not receive the args. Without `--target`, the flags will be passed to all compiler invocations (including build scripts and proc macros) because dependencies are shared. If you have args that you do not want to pass to build scripts or proc macros and are building for the host, pass `--target` with the [host triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\").\n\nIt is not recommended to pass in flags that Cargo itself usually manages. For example, the flags driven by [profiles](profiles.html) are best handled by setting the appropriate profile setting.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.\n\n#### [`build.rustdocflags`](#buildrustdocflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_BUILD_RUSTDOCFLAGS` or `CARGO_ENCODED_RUSTDOCFLAGS` or `RUSTDOCFLAGS`\n\nExtra command-line flags to pass to `rustdoc`. The value may be an array of strings or a space-separated string.\n\nThere are four mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1.  `CARGO_ENCODED_RUSTDOCFLAGS` environment variable.\n2.  `RUSTDOCFLAGS` environment variable.\n3.  All matching `target.<triple>.rustdocflags` config entries joined together.\n4.  `build.rustdocflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustdoc`](../commands/cargo-rustdoc.html) command.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.\n\n#### [`build.incremental`](#buildincremental)\n\n-   Type: bool\n-   Default: from profile\n-   Environment: `CARGO_BUILD_INCREMENTAL` or `CARGO_INCREMENTAL`\n\nWhether or not to perform [incremental compilation](about:blank/profiles.html#incremental). The default if not set is to use the value from the [profile](about:blank/profiles.html#incremental). Otherwise this overrides the setting of all profiles.\n\nThe `CARGO_INCREMENTAL` environment variable can be set to `1` to force enable incremental compilation for all profiles, or `0` to disable it. This env var overrides the config setting.\n\n#### [`build.dep-info-basedir`](#builddep-info-basedir)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: `CARGO_BUILD_DEP_INFO_BASEDIR`\n\nStrips the given path prefix from [dep info](about:blank/guide/build-cache.html#dep-info-files) file paths. This config setting is intended to convert absolute paths to relative paths for tools that require relative paths.\n\nThe setting itself is a config-relative path. So, for example, a value of `\".\"` would strip all paths starting with the parent directory of the `.cargo` directory.\n\n#### [`build.pipelining`](#buildpipelining)\n\nThis option is deprecated and unused. Cargo always has pipelining enabled.\n\n### [`[credential-alias]`](#credential-alias)\n\n-   Type: string or array of strings\n-   Default: empty\n-   Environment: `CARGO_CREDENTIAL_ALIAS_<name>`\n\nThe `[credential-alias]` table defines credential provider aliases. These aliases can be referenced as an element of the `registry.global-credential-providers` array, or as a credential provider for a specific registry under `registries.<NAME>.credential-provider`.\n\nIf specified as a string, the value will be split on spaces into path and arguments.\n\nFor example, to define an alias called `my-alias`:\n\n```toml\n[credential-alias]\nmy-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", \"value\", \"--flag\"]\n\n```\n\nSee [Registry Authentication](registry-authentication.html) for more information.\n\n### [`[doc]`](#doc)\n\nThe `[doc]` table defines options for the [`cargo doc`](../commands/cargo-doc.html) command.\n\n#### [`doc.browser`](#docbrowser)\n\n-   Type: string or array of strings ([program path with args](#executable-paths-with-arguments))\n-   Default: `BROWSER` environment variable, or, if that is missing, opening the link in a system specific way\n\nThis option sets the browser to be used by [`cargo doc`](../commands/cargo-doc.html), overriding the `BROWSER` environment variable when opening documentation with the `--open` option.\n\n### [`[cargo-new]`](#cargo-new)\n\nThe `[cargo-new]` table defines defaults for the [`cargo new`](../commands/cargo-new.html) command.\n\n#### [`cargo-new.name`](#cargo-newname)\n\nThis option is deprecated and unused.\n\n#### [`cargo-new.email`](#cargo-newemail)\n\nThis option is deprecated and unused.\n\n#### [`cargo-new.vcs`](#cargo-newvcs)\n\n-   Type: string\n-   Default: “git” or “none”\n-   Environment: `CARGO_CARGO_NEW_VCS`\n\nSpecifies the source control system to use for initializing a new repository. Valid values are `git`, `hg` (for Mercurial), `pijul`, `fossil` or `none` to disable this behavior. Defaults to `git`, or `none` if already inside a VCS repository. Can be overridden with the `--vcs` CLI option.\n\n### [`[env]`](#env)\n\nThe `[env]` section allows you to set additional environment variables for build scripts, rustc invocations, `cargo run` and `cargo build`.\n\n```toml\n[env]\nOPENSSL_DIR = \"/opt/openssl\"\n\n```\n\nBy default, the variables specified will not override values that already exist in the environment. This behavior can be changed by setting the `force` flag.\n\nSetting the `relative` flag evaluates the value as a config-relative path that is relative to the parent directory of the `.cargo` directory that contains the `config.toml` file. The value of the environment variable will be the full absolute path.\n\n```toml\n[env]\nTMPDIR = { value = \"/home/tmp\", force = true }\nOPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n\n```\n\n### [`[future-incompat-report]`](#future-incompat-report)\n\nThe `[future-incompat-report]` table controls setting for [future incompat reporting](future-incompat-report.html)\n\n#### [`future-incompat-report.frequency`](#future-incompat-reportfrequency)\n\n-   Type: string\n-   Default: “always”\n-   Environment: `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY`\n\nControls how often we display a notification to the terminal when a future incompat report is available. Possible values:\n\n-   `always` (default): Always display a notification when a command (e.g. `cargo build`) produces a future incompat report\n-   `never`: Never display a notification\n\n### [`[http]`](#http)\n\nThe `[http]` table defines settings for HTTP behavior. This includes fetching crate dependencies and accessing remote git repositories.\n\n#### [`http.debug`](#httpdebug)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_HTTP_DEBUG`\n\nIf `true`, enables debugging of HTTP requests. The debug information can be seen by setting the `CARGO_LOG=network=debug` environment variable (or use `network=trace` for even more information).\n\nBe wary when posting logs from this output in a public location. The output may include headers with authentication tokens which you don’t want to leak! Be sure to review logs before posting them.\n\n#### [`http.proxy`](#httpproxy)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_HTTP_PROXY` or `HTTPS_PROXY` or `https_proxy` or `http_proxy`\n\nSets an HTTP and HTTPS proxy to use. The format is in [libcurl format](https://everything.curl.dev/transfers/conn/proxies#proxy-types) as in `[protocol://]host[:port]`. If not set, Cargo will also check the `http.proxy` setting in your global git configuration. If none of those are set, the `HTTPS_PROXY` or `https_proxy` environment variables set the proxy for HTTPS requests, and `http_proxy` sets it for HTTP requests.\n\n#### [`http.timeout`](#httptimeout)\n\n-   Type: integer\n-   Default: 30\n-   Environment: `CARGO_HTTP_TIMEOUT` or `HTTP_TIMEOUT`\n\nSets the timeout for each HTTP request, in seconds.\n\n#### [`http.cainfo`](#httpcainfo)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: `CARGO_HTTP_CAINFO`\n\nPath to a Certificate Authority (CA) bundle file, used to verify TLS certificates. If not specified, Cargo attempts to use the system certificates.\n\n#### [`http.check-revoke`](#httpcheck-revoke)\n\n-   Type: boolean\n-   Default: true (Windows) false (all others)\n-   Environment: `CARGO_HTTP_CHECK_REVOKE`\n\nThis determines whether or not TLS certificate revocation checks should be performed. This only works on Windows.\n\n#### [`http.ssl-version`](#httpssl-version)\n\n-   Type: string or min/max table\n-   Default: none\n-   Environment: `CARGO_HTTP_SSL_VERSION`\n\nThis sets the minimum TLS version to use. It takes a string, with one of the possible values of “default”, “tlsv1”, “tlsv1.0”, “tlsv1.1”, “tlsv1.2”, or “tlsv1.3”.\n\nThis may alternatively take a table with two keys, `min` and `max`, which each take a string value of the same kind that specifies the minimum and maximum range of TLS versions to use.\n\nThe default is a minimum version of “tlsv1.0” and a max of the newest version supported on your platform, typically “tlsv1.3”.\n\n#### [`http.low-speed-limit`](#httplow-speed-limit)\n\n-   Type: integer\n-   Default: 10\n-   Environment: `CARGO_HTTP_LOW_SPEED_LIMIT`\n\nThis setting controls timeout behavior for slow connections. If the average transfer speed in bytes per second is below the given value for [`http.timeout`](#httptimeout) seconds (default 30 seconds), then the connection is considered too slow and Cargo will abort and retry.\n\n#### [`http.multiplexing`](#httpmultiplexing)\n\n-   Type: boolean\n-   Default: true\n-   Environment: `CARGO_HTTP_MULTIPLEXING`\n\nWhen `true`, Cargo will attempt to use the HTTP2 protocol with multiplexing. This allows multiple requests to use the same connection, usually improving performance when fetching multiple files. If `false`, Cargo will use HTTP 1.1 without pipelining.\n\n#### [`http.user-agent`](#httpuser-agent)\n\n-   Type: string\n-   Default: Cargo’s version\n-   Environment: `CARGO_HTTP_USER_AGENT`\n\nSpecifies a custom user-agent header to use. The default if not specified is a string that includes Cargo’s version.\n\n### [`[install]`](#install)\n\nThe `[install]` table defines defaults for the [`cargo install`](../commands/cargo-install.html) command.\n\n#### [`install.root`](#installroot)\n\n-   Type: string (path)\n-   Default: Cargo’s home directory\n-   Environment: `CARGO_INSTALL_ROOT`\n\nSets the path to the root directory for installing executables for [`cargo install`](../commands/cargo-install.html). Executables go into a `bin` directory underneath the root.\n\nTo track information of installed executables, some extra files, such as `.crates.toml` and `.crates2.json`, are also created under this root.\n\nThe default if not specified is Cargo’s home directory (default `.cargo` in your home directory).\n\nCan be overridden with the `--root` command-line option.\n\n### [`[net]`](#net)\n\nThe `[net]` table controls networking configuration.\n\n#### [`net.retry`](#netretry)\n\n-   Type: integer\n-   Default: 3\n-   Environment: `CARGO_NET_RETRY`\n\nNumber of times to retry possibly spurious network errors.\n\n#### [`net.git-fetch-with-cli`](#netgit-fetch-with-cli)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_NET_GIT_FETCH_WITH_CLI`\n\nIf this is `true`, then Cargo will use the `git` executable to fetch registry indexes and git dependencies. If `false`, then it uses a built-in `git` library.\n\nSetting this to `true` can be helpful if you have special authentication requirements that Cargo does not support. See [Git Authentication](../appendix/git-authentication.html) for more information about setting up git authentication.\n\n#### [`net.offline`](#netoffline)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_NET_OFFLINE`\n\nIf this is `true`, then Cargo will avoid accessing the network, and attempt to proceed with locally cached data. If `false`, Cargo will access the network as needed, and generate an error if it encounters a network error.\n\nCan be overridden with the `--offline` command-line option.\n\n#### [`net.ssh`](#netssh)\n\nThe `[net.ssh]` table contains settings for SSH connections.\n\n#### [`net.ssh.known-hosts`](#netsshknown-hosts)\n\n-   Type: array of strings\n-   Default: see description\n-   Environment: not supported\n\nThe `known-hosts` array contains a list of SSH host keys that should be accepted as valid when connecting to an SSH server (such as for SSH git dependencies). Each entry should be a string in a format similar to OpenSSH `known_hosts` files. Each string should start with one or more hostnames separated by commas, a space, the key type name, a space, and the base64-encoded key. For example:\n\n```toml\n[net.ssh]\nknown-hosts = [\n    \"example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"\n]\n\n```\n\nCargo will attempt to load known hosts keys from common locations supported in OpenSSH, and will join those with any listed in a Cargo configuration file. If any matching entry has the correct key, the connection will be allowed.\n\nCargo comes with the host keys for [github.com](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints) built-in. If those ever change, you can add the new keys to the config or known\\_hosts file.\n\nSee [Git Authentication](about:blank/appendix/git-authentication.html#ssh-known-hosts) for more details.\n\n### [`[patch]`](#patch)\n\nJust as you can override dependencies using [`[patch]` in `Cargo.toml`](about:blank/overriding-dependencies.html#the-patch-section), you can override them in the cargo configuration file to apply those patches to any affected build. The format is identical to the one used in `Cargo.toml`.\n\nSince `.cargo/config.toml` files are not usually checked into source control, you should prefer patching using `Cargo.toml` where possible to ensure that other developers can compile your crate in their own environments. Patching through cargo configuration files is generally only appropriate when the patch section is automatically generated by an external build tool.\n\nIf a given dependency is patched both in a cargo configuration file and a `Cargo.toml` file, the patch in the configuration file is used. If multiple configuration files patch the same dependency, standard cargo configuration merging is used, which prefers the value defined closest to the current directory, with `$HOME/.cargo/config.toml` taking the lowest precedence.\n\nRelative `path` dependencies in such a `[patch]` section are resolved relative to the configuration file they appear in.\n\n### [`[profile]`](#profile)\n\nThe `[profile]` table can be used to globally change profile settings, and override settings specified in `Cargo.toml`. It has the same syntax and options as profiles specified in `Cargo.toml`. See the [Profiles chapter](profiles.html) for details about the options.\n\n#### [`[profile.<name>.build-override]`](#profilenamebuild-override)\n\n-   Environment: `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>`\n\nThe build-override table overrides settings for build scripts, proc macros, and their dependencies. It has the same keys as a normal profile. See the [overrides section](about:blank/profiles.html#overrides) for more details.\n\n#### [`[profile.<name>.package.<name>]`](#profilenamepackagename)\n\n-   Environment: not supported\n\nThe package table overrides settings for specific packages. It has the same keys as a normal profile, minus the `panic`, `lto`, and `rpath` settings. See the [overrides section](about:blank/profiles.html#overrides) for more details.\n\n#### [`profile.<name>.codegen-units`](#profilenamecodegen-units)\n\n-   Type: integer\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_CODEGEN_UNITS`\n\nSee [codegen-units](about:blank/profiles.html#codegen-units).\n\n#### [`profile.<name>.debug`](#profilenamedebug)\n\n-   Type: integer or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_DEBUG`\n\nSee [debug](about:blank/profiles.html#debug).\n\n#### [`profile.<name>.split-debuginfo`](#profilenamesplit-debuginfo)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO`\n\nSee [split-debuginfo](about:blank/profiles.html#split-debuginfo).\n\n#### [`profile.<name>.strip`](#profilenamestrip)\n\n-   Type: string or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_STRIP`\n\nSee [strip](about:blank/profiles.html#strip).\n\n#### [`profile.<name>.debug-assertions`](#profilenamedebug-assertions)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS`\n\nSee [debug-assertions](about:blank/profiles.html#debug-assertions).\n\n#### [`profile.<name>.incremental`](#profilenameincremental)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_INCREMENTAL`\n\nSee [incremental](about:blank/profiles.html#incremental).\n\n#### [`profile.<name>.lto`](#profilenamelto)\n\n-   Type: string or boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_LTO`\n\nSee [lto](about:blank/profiles.html#lto).\n\n#### [`profile.<name>.overflow-checks`](#profilenameoverflow-checks)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_OVERFLOW_CHECKS`\n\nSee [overflow-checks](about:blank/profiles.html#overflow-checks).\n\n#### [`profile.<name>.opt-level`](#profilenameopt-level)\n\n-   Type: integer or string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_OPT_LEVEL`\n\nSee [opt-level](about:blank/profiles.html#opt-level).\n\n#### [`profile.<name>.panic`](#profilenamepanic)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_PANIC`\n\nSee [panic](about:blank/profiles.html#panic).\n\n#### [`profile.<name>.rpath`](#profilenamerpath)\n\n-   Type: boolean\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_RPATH`\n\nSee [rpath](about:blank/profiles.html#rpath).\n\n#### [`profile.<name>.strip`](#profilenamestrip-1)\n\n-   Type: string\n-   Default: See profile docs.\n-   Environment: `CARGO_PROFILE_<name>_STRIP`\n\nSee [strip](about:blank/profiles.html#strip).\n\n### [`[registries]`](#registries)\n\nThe `[registries]` table is used for specifying additional [registries](registries.html). It consists of a sub-table for each named registry.\n\n#### [`registries.<name>.index`](#registriesnameindex)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_INDEX`\n\nSpecifies the URL of the index for the registry.\n\n#### [`registries.<name>.token`](#registriesnametoken)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_TOKEN`\n\nSpecifies the authentication token for the given registry. This value should only appear in the [credentials](#credentials) file. This is used for registry commands like [`cargo publish`](../commands/cargo-publish.html) that require authentication.\n\nCan be overridden with the `--token` command-line option.\n\n#### [`registries.<name>.credential-provider`](#registriesnamecredential-provider)\n\n-   Type: string or array of path and arguments\n-   Default: none\n-   Environment: `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER`\n\nSpecifies the credential provider for the given registry. If not set, the providers in [`registry.global-credential-providers`](#registryglobal-credential-providers) will be used.\n\nIf specified as a string, path and arguments will be split on spaces. For paths or arguments that contain spaces, use an array.\n\nIf the value exists in the [`[credential-alias]`](#credential-alias) table, the alias will be used.\n\nSee [Registry Authentication](registry-authentication.html) for more information.\n\n#### [`registries.crates-io.protocol`](#registriescrates-ioprotocol)\n\n-   Type: string\n-   Default: `sparse`\n-   Environment: `CARGO_REGISTRIES_CRATES_IO_PROTOCOL`\n\nSpecifies the protocol used to access crates.io. Allowed values are `git` or `sparse`.\n\n`git` causes Cargo to clone the entire index of all packages ever published to [crates.io](https://crates.io/) from [https://github.com/rust-lang/crates.io-index/](https://github.com/rust-lang/crates.io-index/). This can have performance implications due to the size of the index. `sparse` is a newer protocol which uses HTTPS to download only what is necessary from [https://index.crates.io/](https://index.crates.io/). This can result in a significant performance improvement for resolving new dependencies in most situations.\n\nMore information about registry protocols may be found in the [Registries chapter](registries.html).\n\n### [`[registry]`](#registry)\n\nThe `[registry]` table controls the default registry used when one is not specified.\n\n#### [`registry.index`](#registryindex)\n\nThis value is no longer accepted and should not be used.\n\n#### [`registry.default`](#registrydefault)\n\n-   Type: string\n-   Default: `\"crates-io\"`\n-   Environment: `CARGO_REGISTRY_DEFAULT`\n\nThe name of the registry (from the [`registries` table](#registries)) to use by default for registry commands like [`cargo publish`](../commands/cargo-publish.html).\n\nCan be overridden with the `--registry` command-line option.\n\n#### [`registry.credential-provider`](#registrycredential-provider)\n\n-   Type: string or array of path and arguments\n-   Default: none\n-   Environment: `CARGO_REGISTRY_CREDENTIAL_PROVIDER`\n\nSpecifies the credential provider for [crates.io](https://crates.io/). If not set, the providers in [`registry.global-credential-providers`](#registryglobal-credential-providers) will be used.\n\nIf specified as a string, path and arguments will be split on spaces. For paths or arguments that contain spaces, use an array.\n\nIf the value exists in the `[credential-alias]` table, the alias will be used.\n\nSee [Registry Authentication](registry-authentication.html) for more information.\n\n#### [`registry.token`](#registrytoken)\n\n-   Type: string\n-   Default: none\n-   Environment: `CARGO_REGISTRY_TOKEN`\n\nSpecifies the authentication token for [crates.io](https://crates.io/). This value should only appear in the [credentials](#credentials) file. This is used for registry commands like [`cargo publish`](../commands/cargo-publish.html) that require authentication.\n\nCan be overridden with the `--token` command-line option.\n\n#### [`registry.global-credential-providers`](#registryglobal-credential-providers)\n\n-   Type: array\n-   Default: `[\"cargo:token\"]`\n-   Environment: `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS`\n\nSpecifies the list of global credential providers. If credential provider is not set for a specific registry using `registries.<name>.credential-provider`, Cargo will use the credential providers in this list. Providers toward the end of the list have precedence.\n\nPath and arguments are split on spaces. If the path or arguments contains spaces, the credential provider should be defined in the [`[credential-alias]`](#credential-alias) table and referenced here by its alias.\n\nSee [Registry Authentication](registry-authentication.html) for more information.\n\n### [`[source]`](#source)\n\nThe `[source]` table defines the registry sources available. See [Source Replacement](source-replacement.html) for more information. It consists of a sub-table for each named source. A source should only define one kind (directory, registry, local-registry, or git).\n\n#### [`source.<name>.replace-with`](#sourcenamereplace-with)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nIf set, replace this source with the given named source or named registry.\n\n#### [`source.<name>.directory`](#sourcenamedirectory)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: not supported\n\nSets the path to a directory to use as a directory source.\n\n#### [`source.<name>.registry`](#sourcenameregistry)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: not supported\n\nSets the URL to use for a registry source.\n\n#### [`source.<name>.local-registry`](#sourcenamelocal-registry)\n\n-   Type: string (path)\n-   Default: none\n-   Environment: not supported\n\nSets the path to a directory to use as a local registry source.\n\n#### [`source.<name>.git`](#sourcenamegit)\n\n-   Type: string (url)\n-   Default: none\n-   Environment: not supported\n\nSets the URL to use for a git repository source.\n\n#### [`source.<name>.branch`](#sourcenamebranch)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the branch name to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n#### [`source.<name>.tag`](#sourcenametag)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the tag name to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n#### [`source.<name>.rev`](#sourcenamerev)\n\n-   Type: string\n-   Default: none\n-   Environment: not supported\n\nSets the [revision](https://git-scm.com/docs/gitrevisions) to use for a git repository.\n\nIf none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch.\n\n### [`[target]`](#target)\n\nThe `[target]` table is used for specifying settings for specific platform targets. It consists of a sub-table which is either a [platform triple](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") or a [`cfg()` expression](../../reference/conditional-compilation.html). The given values will be used if the target platform matches either the `<triple>` value or the `<cfg>` expression.\n\n```toml\n[target.thumbv7m-none-eabi]\nlinker = \"arm-none-eabi-gcc\"\nrunner = \"my-emulator\"\nrustflags = [\"…\", \"…\"]\n\n[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']\nrunner = \"my-arm-wrapper\"\nrustflags = [\"…\", \"…\"]\n\n```\n\n`cfg` values come from those built-in to the compiler (run `rustc --print=cfg` to view), values set by [build scripts](build-scripts.html), and extra `--cfg` flags passed to `rustc` (such as those defined in `RUSTFLAGS`). Do not try to match on `debug_assertions` or Cargo features like `feature=\"foo\"`.\n\nIf using a target spec JSON file, the [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") value is the filename stem. For example `--target foo/bar.json` would match `[target.bar]`.\n\n#### [`target.<triple>.ar`](#targettriplear)\n\nThis option is deprecated and unused.\n\n#### [`target.<triple>.linker`](#targettriplelinker)\n\n-   Type: string (program path)\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_LINKER`\n\nSpecifies the linker which is passed to `rustc` (via [`-C linker`](about:blank/rustc/codegen-options/index.html#linker)) when the [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") is being compiled for. By default, the linker is not overridden.\n\n#### [`target.<cfg>.linker`](#targetcfglinker)\n\nThis is similar to the [target linker](#targettriplelinker), but using a [`cfg()` expression](../../reference/conditional-compilation.html). If both a [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") and `<cfg>` runner match, the `<triple>` will take precedence. It is an error if more than one `<cfg>` runner matches the current target.\n\n#### [`target.<triple>.runner`](#targettriplerunner)\n\n-   Type: string or array of strings ([program path with args](#executable-paths-with-arguments))\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUNNER`\n\nIf a runner is provided, executables for the target [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") will be executed by invoking the specified runner with the actual executable passed as an argument. This applies to [`cargo run`](../commands/cargo-run.html), [`cargo test`](../commands/cargo-test.html) and [`cargo bench`](../commands/cargo-bench.html) commands. By default, compiled executables are executed directly.\n\n#### [`target.<cfg>.runner`](#targetcfgrunner)\n\nThis is similar to the [target runner](#targettriplerunner), but using a [`cfg()` expression](../../reference/conditional-compilation.html). If both a [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") and `<cfg>` runner match, the `<triple>` will take precedence. It is an error if more than one `<cfg>` runner matches the current target.\n\n#### [`target.<triple>.rustflags`](#targettriplerustflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUSTFLAGS`\n\nPasses a set of custom flags to the compiler for this [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\"). The value may be an array of strings or a space-separated string.\n\nSee [`build.rustflags`](#buildrustflags) for more details on the different ways to specific extra flags.\n\n#### [`target.<cfg>.rustflags`](#targetcfgrustflags)\n\nThis is similar to the [target rustflags](#targettriplerustflags), but using a [`cfg()` expression](../../reference/conditional-compilation.html). If several `<cfg>` and [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\") entries match the current target, the flags are joined together.\n\n#### [`target.<triple>.rustdocflags`](#targettriplerustdocflags)\n\n-   Type: string or array of strings\n-   Default: none\n-   Environment: `CARGO_TARGET_<triple>_RUSTDOCFLAGS`\n\nPasses a set of custom flags to the compiler for this [`<triple>`](about:blank/appendix/glossary.html#target \"\"target\" (glossary)\"). The value may be an array of strings or a space-separated string.\n\nSee [`build.rustdocflags`](#buildrustdocflags) for more details on the different ways to specific extra flags.\n\n#### [`target.<triple>.<links>`](#targettriplelinks)\n\nThe links sub-table provides a way to [override a build script](about:blank/build-scripts.html#overriding-build-scripts). When specified, the build script for the given `links` library will not be run, and the given values will be used instead.\n\n```toml\n[target.x86_64-unknown-linux-gnu.foo]\nrustc-link-lib = [\"foo\"]\nrustc-link-search = [\"/path/to/foo\"]\nrustc-flags = \"-L /some/path\"\nrustc-cfg = ['key=\"value\"']\nrustc-env = {key = \"value\"}\nrustc-cdylib-link-arg = [\"…\"]\nmetadata_key1 = \"value\"\nmetadata_key2 = \"value\"\n\n```\n\n### [`[term]`](#term)\n\nThe `[term]` table controls terminal output and interaction.\n\n#### [`term.quiet`](#termquiet)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_TERM_QUIET`\n\nControls whether or not log messages are displayed by Cargo.\n\nSpecifying the `--quiet` flag will override and force quiet output. Specifying the `--verbose` flag will override and disable quiet output.\n\n#### [`term.verbose`](#termverbose)\n\n-   Type: boolean\n-   Default: false\n-   Environment: `CARGO_TERM_VERBOSE`\n\nControls whether or not extra detailed messages are displayed by Cargo.\n\nSpecifying the `--quiet` flag will override and disable verbose output. Specifying the `--verbose` flag will override and force verbose output.\n\n#### [`term.color`](#termcolor)\n\n-   Type: string\n-   Default: “auto”\n-   Environment: `CARGO_TERM_COLOR`\n\nControls whether or not colored output is used in the terminal. Possible values:\n\n-   `auto` (default): Automatically detect if color support is available on the terminal.\n-   `always`: Always display colors.\n-   `never`: Never display colors.\n\nCan be overridden with the `--color` command-line option.\n\n#### [`term.hyperlinks`](#termhyperlinks)\n\n-   Type: bool\n-   Default: auto-detect\n-   Environment: `CARGO_TERM_HYPERLINKS`\n\nControls whether or not hyperlinks are used in the terminal.\n\n#### [`term.unicode`](#termunicode)\n\n-   Type: bool\n-   Default: auto-detect\n-   Environment: `CARGO_TERM_UNICODE`\n\nControl whether output can be rendered using non-ASCII unicode characters.\n\n#### [`term.progress.when`](#termprogresswhen)\n\n-   Type: string\n-   Default: “auto”\n-   Environment: `CARGO_TERM_PROGRESS_WHEN`\n\nControls whether or not progress bar is shown in the terminal. Possible values:\n\n-   `auto` (default): Intelligently guess whether to show progress bar.\n-   `always`: Always show progress bar.\n-   `never`: Never show progress bar.\n\n#### [`term.progress.width`](#termprogresswidth)\n\n-   Type: integer\n-   Default: none\n-   Environment: `CARGO_TERM_PROGRESS_WIDTH`\n\nSets the width for progress bar.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Configuration - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/config.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"configuration\"><a class=\"header\" href=\"#configuration\">Configuration</a></h1>\n<p>This document explains how Cargo’s configuration system works, as well as\navailable keys or configuration. For configuration of a package through its\nmanifest, see the <a href=\"manifest.html\">manifest format</a>.</p>\n<h2 id=\"hierarchical-structure\"><a class=\"header\" href=\"#hierarchical-structure\">Hierarchical structure</a></h2>\n<p>Cargo allows local configuration for a particular package as well as global\nconfiguration. It looks for configuration files in the current directory and\nall parent directories. If, for example, Cargo were invoked in\n<code class=\"hljs\">/projects/foo/bar/baz</code>, then the following configuration files would be\nprobed for and unified in this order:</p>\n<ul>\n<li><code class=\"hljs\">/projects/foo/bar/baz/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/foo/bar/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/foo/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/projects/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">/.cargo/config.toml</code></li>\n<li><code class=\"hljs\">$CARGO_HOME/config.toml</code> which defaults to:\n<ul>\n<li>Windows: <code class=\"hljs\">%USERPROFILE%\\.cargo\\config.toml</code></li>\n<li>Unix: <code class=\"hljs\">$HOME/.cargo/config.toml</code></li>\n</ul>\n</li>\n</ul>\n<p>With this structure, you can specify configuration per-package, and even\npossibly check it into version control. You can also specify personal defaults\nwith a configuration file in your home directory.</p>\n<p>If a key is specified in multiple config files, the values will get merged\ntogether. Numbers, strings, and booleans will use the value in the deeper\nconfig directory taking precedence over ancestor directories, where the\nhome directory is the lowest priority. Arrays will be joined together\nwith higher precedence items being placed later in the merged array.</p>\n<p>At present, when being invoked from a workspace, Cargo does not read config\nfiles from crates within the workspace. i.e. if a workspace has two crates in\nit, named <code class=\"hljs\">/projects/foo/bar/baz/mylib</code> and <code class=\"hljs\">/projects/foo/bar/baz/mybin</code>, and\nthere are Cargo configs at <code class=\"hljs\">/projects/foo/bar/baz/mylib/.cargo/config.toml</code>\nand <code class=\"hljs\">/projects/foo/bar/baz/mybin/.cargo/config.toml</code>, Cargo does not read\nthose configuration files if it is invoked from the workspace root\n(<code class=\"hljs\">/projects/foo/bar/baz/</code>).</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo also reads config files without the <code class=\"hljs\">.toml</code> extension, such as\n<code class=\"hljs\">.cargo/config</code>. Support for the <code class=\"hljs\">.toml</code> extension was added in version 1.39\nand is the preferred form. If both files exist, Cargo will use the file\nwithout the extension.</p>\n</blockquote>\n<h2 id=\"configuration-format\"><a class=\"header\" href=\"#configuration-format\">Configuration format</a></h2>\n<p>Configuration files are written in the <a href=\"https://toml.io/\">TOML format</a> (like the\nmanifest), with simple key-value pairs inside of sections (tables). The\nfollowing is a quick overview of all settings, with detailed descriptions\nfound below.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">paths</span> = [<span class=\"hljs-string\">\"/path/to/override\"</span>] <span class=\"hljs-comment\"># path dependency overrides</span>\n\n<span class=\"hljs-section\">[alias]</span>     <span class=\"hljs-comment\"># command aliases</span>\n<span class=\"hljs-attr\">b</span> = <span class=\"hljs-string\">\"build\"</span>\n<span class=\"hljs-attr\">c</span> = <span class=\"hljs-string\">\"check\"</span>\n<span class=\"hljs-attr\">t</span> = <span class=\"hljs-string\">\"test\"</span>\n<span class=\"hljs-attr\">r</span> = <span class=\"hljs-string\">\"run\"</span>\n<span class=\"hljs-attr\">rr</span> = <span class=\"hljs-string\">\"run --release\"</span>\n<span class=\"hljs-attr\">recursive_example</span> = <span class=\"hljs-string\">\"rr --example recursions\"</span>\n<span class=\"hljs-attr\">space_example</span> = [<span class=\"hljs-string\">\"run\"</span>, <span class=\"hljs-string\">\"--release\"</span>, <span class=\"hljs-string\">\"--\"</span>, <span class=\"hljs-string\">\"\\\"command list\\\"\"</span>]\n\n<span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">jobs</span> = <span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\"># number of parallel jobs, defaults to # of CPUs</span>\n<span class=\"hljs-attr\">rustc</span> = <span class=\"hljs-string\">\"rustc\"</span>               <span class=\"hljs-comment\"># the rust compiler tool</span>\n<span class=\"hljs-attr\">rustc-wrapper</span> = <span class=\"hljs-string\">\"…\"</span>           <span class=\"hljs-comment\"># run this wrapper instead of `rustc`</span>\n<span class=\"hljs-attr\">rustc-workspace-wrapper</span> = <span class=\"hljs-string\">\"…\"</span> <span class=\"hljs-comment\"># run this wrapper instead of `rustc` for workspace members</span>\n<span class=\"hljs-attr\">rustdoc</span> = <span class=\"hljs-string\">\"rustdoc\"</span>           <span class=\"hljs-comment\"># the doc generator tool</span>\n<span class=\"hljs-attr\">target</span> = <span class=\"hljs-string\">\"triple\"</span>             <span class=\"hljs-comment\"># build for the target triple (ignored by `cargo install`)</span>\n<span class=\"hljs-attr\">target-dir</span> = <span class=\"hljs-string\">\"target\"</span>         <span class=\"hljs-comment\"># path of where to place all generated artifacts</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]        <span class=\"hljs-comment\"># custom flags to pass to all compiler invocations</span>\n<span class=\"hljs-attr\">rustdocflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]     <span class=\"hljs-comment\"># custom flags to pass to rustdoc</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>            <span class=\"hljs-comment\"># whether or not to enable incremental compilation</span>\n<span class=\"hljs-attr\">dep-info-basedir</span> = <span class=\"hljs-string\">\"…\"</span>        <span class=\"hljs-comment\"># path for the base directory for targets in depfiles</span>\n\n<span class=\"hljs-section\">[doc]</span>\n<span class=\"hljs-attr\">browser</span> = <span class=\"hljs-string\">\"chromium\"</span>          <span class=\"hljs-comment\"># browser to use with `cargo doc --open`,</span>\n                              <span class=\"hljs-comment\"># overrides the `BROWSER` environment variable</span>\n\n<span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-comment\"># Set ENV_VAR_NAME=value for any process run by Cargo</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-comment\"># Set even if already present in environment</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME_2</span> = { value = <span class=\"hljs-string\">\"value\"</span>, force = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-comment\"># Value is relative to .cargo directory containing `config.toml`, make absolute</span>\n<span class=\"hljs-attr\">ENV_VAR_NAME_3</span> = { value = <span class=\"hljs-string\">\"relative/path\"</span>, relative = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[future-incompat-report]</span>\n<span class=\"hljs-attr\">frequency</span> = <span class=\"hljs-string\">'always'</span> <span class=\"hljs-comment\"># when to display a notification about a future incompat report</span>\n\n<span class=\"hljs-section\">[cargo-new]</span>\n<span class=\"hljs-attr\">vcs</span> = <span class=\"hljs-string\">\"none\"</span>              <span class=\"hljs-comment\"># VCS to use ('git', 'hg', 'pijul', 'fossil', 'none')</span>\n\n<span class=\"hljs-section\">[http]</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">false</span>               <span class=\"hljs-comment\"># HTTP debugging</span>\n<span class=\"hljs-attr\">proxy</span> = <span class=\"hljs-string\">\"host:port\"</span>         <span class=\"hljs-comment\"># HTTP proxy in libcurl format</span>\n<span class=\"hljs-attr\">ssl-version</span> = <span class=\"hljs-string\">\"tlsv1.3\"</span>     <span class=\"hljs-comment\"># TLS version to use</span>\n<span class=\"hljs-attr\">ssl-version.max</span> = <span class=\"hljs-string\">\"tlsv1.3\"</span> <span class=\"hljs-comment\"># maximum TLS version</span>\n<span class=\"hljs-attr\">ssl-version.min</span> = <span class=\"hljs-string\">\"tlsv1.1\"</span> <span class=\"hljs-comment\"># minimum TLS version</span>\n<span class=\"hljs-attr\">timeout</span> = <span class=\"hljs-number\">30</span>                <span class=\"hljs-comment\"># timeout for each HTTP request, in seconds</span>\n<span class=\"hljs-attr\">low-speed-limit</span> = <span class=\"hljs-number\">10</span>        <span class=\"hljs-comment\"># network timeout threshold (bytes/sec)</span>\n<span class=\"hljs-attr\">cainfo</span> = <span class=\"hljs-string\">\"cert.pem\"</span>         <span class=\"hljs-comment\"># path to Certificate Authority (CA) bundle</span>\n<span class=\"hljs-attr\">check-revoke</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># check for SSL certificate revocation</span>\n<span class=\"hljs-attr\">multiplexing</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># HTTP/2 multiplexing</span>\n<span class=\"hljs-attr\">user-agent</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># the user-agent header</span>\n\n<span class=\"hljs-section\">[install]</span>\n<span class=\"hljs-attr\">root</span> = <span class=\"hljs-string\">\"/some/path\"</span>         <span class=\"hljs-comment\"># `cargo install` destination directory</span>\n\n<span class=\"hljs-section\">[net]</span>\n<span class=\"hljs-attr\">retry</span> = <span class=\"hljs-number\">3</span>                   <span class=\"hljs-comment\"># network retries</span>\n<span class=\"hljs-attr\">git-fetch-with-cli</span> = <span class=\"hljs-literal\">true</span>   <span class=\"hljs-comment\"># use the `git` executable for git operations</span>\n<span class=\"hljs-attr\">offline</span> = <span class=\"hljs-literal\">true</span>              <span class=\"hljs-comment\"># do not access the network</span>\n\n<span class=\"hljs-section\">[net.ssh]</span>\n<span class=\"hljs-attr\">known-hosts</span> = [<span class=\"hljs-string\">\"...\"</span>]       <span class=\"hljs-comment\"># known SSH host keys</span>\n\n<span class=\"hljs-section\">[patch.&lt;registry&gt;]</span>\n<span class=\"hljs-comment\"># Same keys as for [patch] in Cargo.toml</span>\n\n<span class=\"hljs-section\">[profile.&lt;name&gt;]</span>         <span class=\"hljs-comment\"># Modify profile settings via config.</span>\n<span class=\"hljs-attr\">inherits</span> = <span class=\"hljs-string\">\"dev\"</span>         <span class=\"hljs-comment\"># Inherits settings from [profile.dev].</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>            <span class=\"hljs-comment\"># Optimization level.</span>\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-literal\">true</span>             <span class=\"hljs-comment\"># Include debug info.</span>\n<span class=\"hljs-attr\">split-debuginfo</span> = <span class=\"hljs-string\">'...'</span>  <span class=\"hljs-comment\"># Debug info splitting behavior.</span>\n<span class=\"hljs-attr\">strip</span> = <span class=\"hljs-string\">\"none\"</span>           <span class=\"hljs-comment\"># Removes symbols or debuginfo.</span>\n<span class=\"hljs-attr\">debug-assertions</span> = <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># Enables debug assertions.</span>\n<span class=\"hljs-attr\">overflow-checks</span> = <span class=\"hljs-literal\">true</span>   <span class=\"hljs-comment\"># Enables runtime integer overflow checks.</span>\n<span class=\"hljs-attr\">lto</span> = <span class=\"hljs-literal\">false</span>              <span class=\"hljs-comment\"># Sets link-time optimization.</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'unwind'</span>         <span class=\"hljs-comment\"># The panic strategy.</span>\n<span class=\"hljs-attr\">incremental</span> = <span class=\"hljs-literal\">true</span>       <span class=\"hljs-comment\"># Incremental compilation.</span>\n<span class=\"hljs-attr\">codegen-units</span> = <span class=\"hljs-number\">16</span>       <span class=\"hljs-comment\"># Number of code generation units.</span>\n<span class=\"hljs-attr\">rpath</span> = <span class=\"hljs-literal\">false</span>            <span class=\"hljs-comment\"># Sets the rpath linking option.</span>\n<span class=\"hljs-section\">[profile.&lt;name&gt;.build-override]</span>  <span class=\"hljs-comment\"># Overrides build-script settings.</span>\n<span class=\"hljs-comment\"># Same keys for a normal profile.</span>\n<span class=\"hljs-section\">[profile.&lt;name&gt;.package.&lt;name&gt;]</span>  <span class=\"hljs-comment\"># Override profile for a package.</span>\n<span class=\"hljs-comment\"># Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).</span>\n\n<span class=\"hljs-section\">[registries.&lt;name&gt;]</span>  <span class=\"hljs-comment\"># registries other than crates.io</span>\n<span class=\"hljs-attr\">index</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># URL of the registry index</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># authentication token for the registry</span>\n\n<span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">default</span> = <span class=\"hljs-string\">\"…\"</span>        <span class=\"hljs-comment\"># name of the default registry</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>          <span class=\"hljs-comment\"># authentication token for crates.io</span>\n\n<span class=\"hljs-section\">[source.&lt;name&gt;]</span>      <span class=\"hljs-comment\"># source definition and replacement</span>\n<span class=\"hljs-attr\">replace-with</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># replace this source with the given named source</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"…\"</span>      <span class=\"hljs-comment\"># path to a directory source</span>\n<span class=\"hljs-attr\">registry</span> = <span class=\"hljs-string\">\"…\"</span>       <span class=\"hljs-comment\"># URL to a registry source</span>\n<span class=\"hljs-attr\">local-registry</span> = <span class=\"hljs-string\">\"…\"</span> <span class=\"hljs-comment\"># path to a local registry source</span>\n<span class=\"hljs-attr\">git</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># URL of a git repository source</span>\n<span class=\"hljs-attr\">branch</span> = <span class=\"hljs-string\">\"…\"</span>         <span class=\"hljs-comment\"># branch name for the git repository</span>\n<span class=\"hljs-attr\">tag</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># tag name for the git repository</span>\n<span class=\"hljs-attr\">rev</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># revision for the git repository</span>\n\n<span class=\"hljs-section\">[target.&lt;triple&gt;]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"…\"</span>              <span class=\"hljs-comment\"># linker to use</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"…\"</span>              <span class=\"hljs-comment\"># wrapper to run executables</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]    <span class=\"hljs-comment\"># custom flags for `rustc`</span>\n<span class=\"hljs-attr\">rustdocflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>] <span class=\"hljs-comment\"># custom flags for `rustdoc`</span>\n\n<span class=\"hljs-section\">[target.&lt;cfg&gt;]</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"…\"</span>            <span class=\"hljs-comment\"># wrapper to run executables</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]  <span class=\"hljs-comment\"># custom flags for `rustc`</span>\n\n<span class=\"hljs-section\">[target.&lt;triple&gt;.&lt;links&gt;]</span> <span class=\"hljs-comment\"># `links` build script override</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n\n<span class=\"hljs-section\">[term]</span>\n<span class=\"hljs-attr\">quiet</span> = <span class=\"hljs-literal\">false</span>          <span class=\"hljs-comment\"># whether cargo output is quiet</span>\n<span class=\"hljs-attr\">verbose</span> = <span class=\"hljs-literal\">false</span>        <span class=\"hljs-comment\"># whether cargo provides verbose output</span>\n<span class=\"hljs-attr\">color</span> = <span class=\"hljs-string\">'auto'</span>         <span class=\"hljs-comment\"># whether cargo colorizes output</span>\n<span class=\"hljs-attr\">hyperlinks</span> = <span class=\"hljs-literal\">true</span>      <span class=\"hljs-comment\"># whether cargo inserts links into output</span>\n<span class=\"hljs-attr\">unicode</span> = <span class=\"hljs-literal\">true</span>         <span class=\"hljs-comment\"># whether cargo can render output using non-ASCII unicode characters</span>\n<span class=\"hljs-attr\">progress.when</span> = <span class=\"hljs-string\">'auto'</span> <span class=\"hljs-comment\"># whether cargo shows progress bar</span>\n<span class=\"hljs-attr\">progress.width</span> = <span class=\"hljs-number\">80</span>    <span class=\"hljs-comment\"># width of progress bar</span>\n</code></pre>\n<h2 id=\"environment-variables\"><a class=\"header\" href=\"#environment-variables\">Environment variables</a></h2>\n<p>Cargo can also be configured through environment variables in addition to the\nTOML configuration files. For each configuration key of the form <code class=\"hljs\">foo.bar</code> the\nenvironment variable <code class=\"hljs\">CARGO_FOO_BAR</code> can also be used to define the value.\nKeys are converted to uppercase, dots and dashes are converted to underscores.\nFor example the <code class=\"hljs\">target.x86_64-unknown-linux-gnu.runner</code> key can also be\ndefined by the <code class=\"hljs\">CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER</code> environment\nvariable.</p>\n<p>Environment variables will take precedence over TOML configuration files.\nCurrently only integer, boolean, string and some array values are supported to\nbe defined by environment variables. <a href=\"#configuration-keys\">Descriptions below</a>\nindicate which keys support environment variables and otherwise they are not\nsupported due to <a href=\"https://github.com/rust-lang/cargo/issues/5416\">technical issues</a>.</p>\n<p>In addition to the system above, Cargo recognizes a few other specific\n<a href=\"environment-variables.html\">environment variables</a>.</p>\n<h2 id=\"command-line-overrides\"><a class=\"header\" href=\"#command-line-overrides\">Command-line overrides</a></h2>\n<p>Cargo also accepts arbitrary configuration overrides through the\n<code class=\"hljs\">--config</code> command-line option. The argument should be in TOML syntax of\n<code class=\"hljs\">KEY=VALUE</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo --config net.git-fetch-with-cli=true fetch\n</code></pre>\n<p>The <code class=\"hljs\">--config</code> option may be specified multiple times, in which case the\nvalues are merged in left-to-right order, using the same merging logic\nthat is used when multiple configuration files apply. Configuration\nvalues specified this way take precedence over environment variables,\nwhich take precedence over configuration files.</p>\n<p>Some examples of what it looks like using Bourne shell syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> Most shells will require escaping.</span>\ncargo --config http.proxy=\\\"http://example.com\\\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Spaces may be used.</span>\ncargo --config \"net.git-fetch-with-cli = true\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> TOML array example. Single quotes make it easier to <span class=\"hljs-built_in\">read</span> and write.</span>\ncargo --config 'build.rustdocflags = [\"--html-in-header\", \"header.html\"]' …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Example of a complex TOML key.</span>\ncargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\\"none\\\"))'.runner = 'my-runner'\" …\n<span class=\"hljs-meta\">\n#</span><span class=\"bash\"> Example of overriding a profile setting.</span>\ncargo --config profile.dev.package.image.opt-level=3 …\n</code></pre>\n<p>The <code class=\"hljs\">--config</code> option can also be used to pass paths to extra\nconfiguration files that Cargo should use for a specific invocation.\nOptions from configuration files loaded this way follow the same\nprecedence rules as other options specified directly with <code class=\"hljs\">--config</code>.</p>\n<h2 id=\"config-relative-paths\"><a class=\"header\" href=\"#config-relative-paths\">Config-relative paths</a></h2>\n<p>Paths in config files may be absolute, relative, or a bare name without any path separators.\nPaths for executables without a path separator will use the <code class=\"hljs\">PATH</code> environment variable to search for the executable.\nPaths for non-executables will be relative to where the config value is defined.</p>\n<p>In particular, rules are:</p>\n<ul>\n<li>For environment variables, paths are relative to the current working directory.</li>\n<li>For config values loaded directly from the <a href=\"#command-line-overrides\"><code class=\"hljs\">--config KEY=VALUE</code></a> option,\npaths are relative to the current working directory.</li>\n<li>For config files, paths are relative to the parent directory of the directory where the config files were defined,\nno matter those files are from either the <a href=\"#hierarchical-structure\">hierarchical probing</a>\nor the <a href=\"#command-line-overrides\"><code class=\"hljs\">--config &lt;path&gt;</code></a> option.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> To maintain consistency with existing <code class=\"hljs\">.cargo/config.toml</code> probing behavior,\nit is by design that a path in a config file passed via <code class=\"hljs\">--config &lt;path&gt;</code>\nis also relative to two levels up from the config file itself.</p>\n<p>To avoid unexpected results, the rule of thumb is putting your extra config files\nat the same level of discovered <code class=\"hljs\">.cargo/config.toml</code> in your project.\nFor instance, given a project <code class=\"hljs\">/my/project</code>,\nit is recommended to put config files under <code class=\"hljs\">/my/project/.cargo</code>\nor a new directory at the same level, such as <code class=\"hljs\">/my/project/.config</code>.</p>\n</blockquote>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-comment\"># Relative path examples.</span>\n\n<span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu]</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"foo\"</span>  <span class=\"hljs-comment\"># Searches `PATH` for `foo`.</span>\n\n<span class=\"hljs-section\">[source.vendored-sources]</span>\n<span class=\"hljs-comment\"># Directory is relative to the parent where `.cargo/config.toml` is located.</span>\n<span class=\"hljs-comment\"># For example, `/my/project/.cargo/config.toml` would result in `/my/project/vendor`.</span>\n<span class=\"hljs-attr\">directory</span> = <span class=\"hljs-string\">\"vendor\"</span>\n</code></pre>\n<h2 id=\"executable-paths-with-arguments\"><a class=\"header\" href=\"#executable-paths-with-arguments\">Executable paths with arguments</a></h2>\n<p>Some Cargo commands invoke external programs, which can be configured as a path\nand some number of arguments.</p>\n<p>The value may be an array of strings like <code class=\"hljs\">['/path/to/program', 'somearg']</code> or\na space-separated string like <code class=\"hljs\">'/path/to/program somearg'</code>. If the path to the\nexecutable contains a space, the list form must be used.</p>\n<p>If Cargo is passing other arguments to the program such as a path to open or\nrun, they will be passed after the last specified argument in the value of an\noption of this format. If the specified program does not have path separators,\nCargo will search <code class=\"hljs\">PATH</code> for its executable.</p>\n<h2 id=\"credentials\"><a class=\"header\" href=\"#credentials\">Credentials</a></h2>\n<p>Configuration values with sensitive information are stored in the\n<code class=\"hljs\">$CARGO_HOME/credentials.toml</code> file. This file is automatically created and updated\nby <a href=\"../commands/cargo-login.html\"><code class=\"hljs\">cargo login</code></a> and <a href=\"../commands/cargo-logout.html\"><code class=\"hljs\">cargo logout</code></a> when using the <a href=\"registry-authentication.html#cargotoken\"><code class=\"hljs\">cargo:token</code></a> credential provider.</p>\n<p>Tokens are used by some Cargo commands such as <a href=\"../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> for\nauthenticating with remote registries. Care should be taken to protect the\ntokens and to keep them secret.</p>\n<p>It follows the same format as Cargo config files.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[registry]</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># Access token for crates.io</span>\n\n<span class=\"hljs-section\">[registries.&lt;name&gt;]</span>\n<span class=\"hljs-attr\">token</span> = <span class=\"hljs-string\">\"…\"</span>   <span class=\"hljs-comment\"># Access token for the named registry</span>\n</code></pre>\n<p>As with most other config values, tokens may be specified with environment\nvariables. The token for <a href=\"https://crates.io/\">crates.io</a> may be specified with the\n<code class=\"hljs\">CARGO_REGISTRY_TOKEN</code> environment variable. Tokens for other registries may\nbe specified with environment variables of the form\n<code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code> where <code class=\"hljs\">&lt;name&gt;</code> is the name of the registry in\nall capital letters.</p>\n<blockquote>\n<p><strong>Note:</strong> Cargo also reads and writes credential files without the <code class=\"hljs\">.toml</code>\nextension, such as <code class=\"hljs\">.cargo/credentials</code>. Support for the <code class=\"hljs\">.toml</code> extension\nwas added in version 1.39. In version 1.68, Cargo writes to the file with the\nextension by default. However, for backward compatibility reason, when both\nfiles exist, Cargo will read and write the file without the extension.</p>\n</blockquote>\n<h2 id=\"configuration-keys\"><a class=\"header\" href=\"#configuration-keys\">Configuration keys</a></h2>\n<p>This section documents all configuration keys. The description for keys with\nvariable parts are annotated with angled brackets like <code class=\"hljs\">target.&lt;triple&gt;</code> where\nthe <code class=\"hljs\">&lt;triple&gt;</code> part can be any <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target triple</a> like\n<code class=\"hljs\">target.x86_64-pc-windows-msvc</code>.</p>\n<h3 id=\"paths\"><a class=\"header\" href=\"#paths\"><code>paths</code></a></h3>\n<ul>\n<li>Type: array of strings (paths)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>An array of paths to local packages which are to be used as overrides for\ndependencies. For more information see the <a href=\"overriding-dependencies.html#paths-overrides\">Overriding Dependencies\nguide</a>.</p>\n<h3 id=\"alias\"><a class=\"header\" href=\"#alias\"><code>[alias]</code></a></h3>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: see below</li>\n<li>Environment: <code class=\"hljs\">CARGO_ALIAS_&lt;name&gt;</code></li>\n</ul>\n<p>The <code class=\"hljs\">[alias]</code> table defines CLI command aliases. For example, running <code class=\"hljs\">cargo b</code> is an alias for running <code class=\"hljs\">cargo build</code>. Each key in the table is the\nsubcommand, and the value is the actual command to run. The value may be an\narray of strings, where the first element is the command and the following are\narguments. It may also be a string, which will be split on spaces into\nsubcommand and arguments. The following aliases are built-in to Cargo:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[alias]</span>\n<span class=\"hljs-attr\">b</span> = <span class=\"hljs-string\">\"build\"</span>\n<span class=\"hljs-attr\">c</span> = <span class=\"hljs-string\">\"check\"</span>\n<span class=\"hljs-attr\">d</span> = <span class=\"hljs-string\">\"doc\"</span>\n<span class=\"hljs-attr\">t</span> = <span class=\"hljs-string\">\"test\"</span>\n<span class=\"hljs-attr\">r</span> = <span class=\"hljs-string\">\"run\"</span>\n<span class=\"hljs-attr\">rm</span> = <span class=\"hljs-string\">\"remove\"</span>\n</code></pre>\n<p>Aliases are not allowed to redefine existing built-in commands.</p>\n<p>Aliases are recursive:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[alias]</span>\n<span class=\"hljs-attr\">rr</span> = <span class=\"hljs-string\">\"run --release\"</span>\n<span class=\"hljs-attr\">recursive_example</span> = <span class=\"hljs-string\">\"rr --example recursions\"</span>\n</code></pre>\n<h3 id=\"build\"><a class=\"header\" href=\"#build\"><code>[build]</code></a></h3>\n<p>The <code class=\"hljs\">[build]</code> table controls build-time operations and compiler settings.</p>\n<h4 id=\"buildjobs\"><a class=\"header\" href=\"#buildjobs\"><code>build.jobs</code></a></h4>\n<ul>\n<li>Type: integer or string</li>\n<li>Default: number of logical CPUs</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_JOBS</code></li>\n</ul>\n<p>Sets the maximum number of compiler processes to run in parallel. If negative,\nit sets the maximum number of compiler processes to the number of logical CPUs\nplus provided value. Should not be 0. If a string <code class=\"hljs\">default</code> is provided, it sets\nthe value back to defaults.</p>\n<p>Can be overridden with the <code class=\"hljs\">--jobs</code> CLI option.</p>\n<h4 id=\"buildrustc\"><a class=\"header\" href=\"#buildrustc\"><code>build.rustc</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: “rustc”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC</code> or <code class=\"hljs\">RUSTC</code></li>\n</ul>\n<p>Sets the executable to use for <code class=\"hljs\">rustc</code>.</p>\n<h4 id=\"buildrustc-wrapper\"><a class=\"header\" href=\"#buildrustc-wrapper\"><code>build.rustc-wrapper</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC_WRAPPER</code> or <code class=\"hljs\">RUSTC_WRAPPER</code></li>\n</ul>\n<p>Sets a wrapper to execute instead of <code class=\"hljs\">rustc</code>. The first argument passed to the\nwrapper is the path to the actual executable to use\n(i.e., <code class=\"hljs\">build.rustc</code>, if that is set, or <code class=\"hljs\">\"rustc\"</code> otherwise).</p>\n<h4 id=\"buildrustc-workspace-wrapper\"><a class=\"header\" href=\"#buildrustc-workspace-wrapper\"><code>build.rustc-workspace-wrapper</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER</code> or <code class=\"hljs\">RUSTC_WORKSPACE_WRAPPER</code></li>\n</ul>\n<p>Sets a wrapper to execute instead of <code class=\"hljs\">rustc</code>, for workspace members only. When building a\nsingle-package project without workspaces, that package is considered to be the workspace. The first\nargument passed to the wrapper is the path to the actual executable to use (i.e., <code class=\"hljs\">build.rustc</code>, if\nthat is set, or <code class=\"hljs\">\"rustc\"</code> otherwise). It affects the filename hash so that artifacts produced by the\nwrapper are cached separately.</p>\n<p>If both <code class=\"hljs\">rustc-wrapper</code> and <code class=\"hljs\">rustc-workspace-wrapper</code> are set, then they will be nested:\nthe final invocation is <code class=\"hljs\">$RUSTC_WRAPPER $RUSTC_WORKSPACE_WRAPPER $RUSTC</code>.</p>\n<h4 id=\"buildrustdoc\"><a class=\"header\" href=\"#buildrustdoc\"><code>build.rustdoc</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: “rustdoc”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTDOC</code> or <code class=\"hljs\">RUSTDOC</code></li>\n</ul>\n<p>Sets the executable to use for <code class=\"hljs\">rustdoc</code>.</p>\n<h4 id=\"buildtarget\"><a class=\"header\" href=\"#buildtarget\"><code>build.target</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: host platform</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_TARGET</code></li>\n</ul>\n<p>The default <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">target platform triples</a> to compile to.</p>\n<p>This allows passing either a string or an array of strings. Each string value\nis a target platform triple. The selected build targets will be built for each\nof the selected architectures.</p>\n<p>The string value may also be a relative path to a <code class=\"hljs\">.json</code> target spec file.</p>\n<p>Can be overridden with the <code class=\"hljs\">--target</code> CLI option.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[build]</span>\n<span class=\"hljs-attr\">target</span> = [<span class=\"hljs-string\">\"x86_64-unknown-linux-gnu\"</span>, <span class=\"hljs-string\">\"i686-unknown-linux-gnu\"</span>]\n</code></pre>\n<h4 id=\"buildtarget-dir\"><a class=\"header\" href=\"#buildtarget-dir\"><code>build.target-dir</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: “target”</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_TARGET_DIR</code> or <code class=\"hljs\">CARGO_TARGET_DIR</code></li>\n</ul>\n<p>The path to where all compiler output is placed. The default if not specified\nis a directory named <code class=\"hljs\">target</code> located at the root of the workspace.</p>\n<p>Can be overridden with the <code class=\"hljs\">--target-dir</code> CLI option.</p>\n<h4 id=\"buildrustflags\"><a class=\"header\" href=\"#buildrustflags\"><code>build.rustflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTFLAGS</code> or <code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> or <code class=\"hljs\">RUSTFLAGS</code></li>\n</ul>\n<p>Extra command-line flags to pass to <code class=\"hljs\">rustc</code>. The value may be an array of\nstrings or a space-separated string.</p>\n<p>There are four mutually exclusive sources of extra flags. They are checked in\norder, with the first one being used:</p>\n<ol>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTFLAGS</code> environment variable.</li>\n<li><code class=\"hljs\">RUSTFLAGS</code> environment variable.</li>\n<li>All matching <code class=\"hljs\">target.&lt;triple&gt;.rustflags</code> and <code class=\"hljs\">target.&lt;cfg&gt;.rustflags</code>\nconfig entries joined together.</li>\n<li><code class=\"hljs\">build.rustflags</code> config value.</li>\n</ol>\n<p>Additional flags may also be passed with the <a href=\"../commands/cargo-rustc.html\"><code class=\"hljs\">cargo rustc</code></a> command.</p>\n<p>If the <code class=\"hljs\">--target</code> flag (or <a href=\"#buildtarget\"><code class=\"hljs\">build.target</code></a>) is used, then the\nflags will only be passed to the compiler for the target. Things being built\nfor the host, such as build scripts or proc macros, will not receive the args.\nWithout <code class=\"hljs\">--target</code>, the flags will be passed to all compiler invocations\n(including build scripts and proc macros) because dependencies are shared. If\nyou have args that you do not want to pass to build scripts or proc macros and\nare building for the host, pass <code class=\"hljs\">--target</code> with the <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">host triple</a>.</p>\n<p>It is not recommended to pass in flags that Cargo itself usually manages. For\nexample, the flags driven by <a href=\"profiles.html\">profiles</a> are best handled by setting the\nappropriate profile setting.</p>\n<blockquote>\n<p><strong>Caution</strong>: Due to the low-level nature of passing flags directly to the\ncompiler, this may cause a conflict with future versions of Cargo which may\nissue the same or similar flags on its own which may interfere with the\nflags you specify. This is an area where Cargo may not always be backwards\ncompatible.</p>\n</blockquote>\n<h4 id=\"buildrustdocflags\"><a class=\"header\" href=\"#buildrustdocflags\"><code>build.rustdocflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_RUSTDOCFLAGS</code> or <code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> or <code class=\"hljs\">RUSTDOCFLAGS</code></li>\n</ul>\n<p>Extra command-line flags to pass to <code class=\"hljs\">rustdoc</code>. The value may be an array of\nstrings or a space-separated string.</p>\n<p>There are four mutually exclusive sources of extra flags. They are checked in\norder, with the first one being used:</p>\n<ol>\n<li><code class=\"hljs\">CARGO_ENCODED_RUSTDOCFLAGS</code> environment variable.</li>\n<li><code class=\"hljs\">RUSTDOCFLAGS</code> environment variable.</li>\n<li>All matching <code class=\"hljs\">target.&lt;triple&gt;.rustdocflags</code> config entries joined together.</li>\n<li><code class=\"hljs\">build.rustdocflags</code> config value.</li>\n</ol>\n<p>Additional flags may also be passed with the <a href=\"../commands/cargo-rustdoc.html\"><code class=\"hljs\">cargo rustdoc</code></a> command.</p>\n<blockquote>\n<p><strong>Caution</strong>: Due to the low-level nature of passing flags directly to the\ncompiler, this may cause a conflict with future versions of Cargo which may\nissue the same or similar flags on its own which may interfere with the\nflags you specify. This is an area where Cargo may not always be backwards\ncompatible.</p>\n</blockquote>\n<h4 id=\"buildincremental\"><a class=\"header\" href=\"#buildincremental\"><code>build.incremental</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: from profile</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_INCREMENTAL</code> or <code class=\"hljs\">CARGO_INCREMENTAL</code></li>\n</ul>\n<p>Whether or not to perform <a href=\"profiles.html#incremental\">incremental compilation</a>. The default if not set is\nto use the value from the <a href=\"profiles.html#incremental\">profile</a>. Otherwise this overrides the setting of\nall profiles.</p>\n<p>The <code class=\"hljs\">CARGO_INCREMENTAL</code> environment variable can be set to <code class=\"hljs\">1</code> to force enable\nincremental compilation for all profiles, or <code class=\"hljs\">0</code> to disable it. This env var\noverrides the config setting.</p>\n<h4 id=\"builddep-info-basedir\"><a class=\"header\" href=\"#builddep-info-basedir\"><code>build.dep-info-basedir</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_BUILD_DEP_INFO_BASEDIR</code></li>\n</ul>\n<p>Strips the given path prefix from <a href=\"../guide/build-cache.html#dep-info-files\">dep\ninfo</a> file paths. This config setting\nis intended to convert absolute paths to relative paths for tools that require\nrelative paths.</p>\n<p>The setting itself is a config-relative path. So, for example, a value of\n<code class=\"hljs\">\".\"</code> would strip all paths starting with the parent directory of the <code class=\"hljs\">.cargo</code>\ndirectory.</p>\n<h4 id=\"buildpipelining\"><a class=\"header\" href=\"#buildpipelining\"><code>build.pipelining</code></a></h4>\n<p>This option is deprecated and unused. Cargo always has pipelining enabled.</p>\n<h3 id=\"credential-alias\"><a class=\"header\" href=\"#credential-alias\"><code>[credential-alias]</code></a></h3>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: empty</li>\n<li>Environment: <code class=\"hljs\">CARGO_CREDENTIAL_ALIAS_&lt;name&gt;</code></li>\n</ul>\n<p>The <code class=\"hljs\">[credential-alias]</code> table defines credential provider aliases.\nThese aliases can be referenced as an element of the <code class=\"hljs\">registry.global-credential-providers</code>\narray, or as a credential provider for a specific registry\nunder <code class=\"hljs\">registries.&lt;NAME&gt;.credential-provider</code>.</p>\n<p>If specified as a string, the value will be split on spaces into path and arguments.</p>\n<p>For example, to define an alias called <code class=\"hljs\">my-alias</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[credential-alias]</span>\n<span class=\"hljs-attr\">my-alias</span> = [<span class=\"hljs-string\">\"/usr/bin/cargo-credential-example\"</span>, <span class=\"hljs-string\">\"--argument\"</span>, <span class=\"hljs-string\">\"value\"</span>, <span class=\"hljs-string\">\"--flag\"</span>]\n</code></pre>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h3 id=\"doc\"><a class=\"header\" href=\"#doc\"><code>[doc]</code></a></h3>\n<p>The <code class=\"hljs\">[doc]</code> table defines options for the <a href=\"../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a> command.</p>\n<h4 id=\"docbrowser\"><a class=\"header\" href=\"#docbrowser\"><code>doc.browser</code></a></h4>\n<ul>\n<li>Type: string or array of strings (<a href=\"#executable-paths-with-arguments\">program path with args</a>)</li>\n<li>Default: <code class=\"hljs\">BROWSER</code> environment variable, or, if that is missing,\nopening the link in a system specific way</li>\n</ul>\n<p>This option sets the browser to be used by <a href=\"../commands/cargo-doc.html\"><code class=\"hljs\">cargo doc</code></a>, overriding the\n<code class=\"hljs\">BROWSER</code> environment variable when opening documentation with the <code class=\"hljs\">--open</code>\noption.</p>\n<h3 id=\"cargo-new\"><a class=\"header\" href=\"#cargo-new\"><code>[cargo-new]</code></a></h3>\n<p>The <code class=\"hljs\">[cargo-new]</code> table defines defaults for the <a href=\"../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> command.</p>\n<h4 id=\"cargo-newname\"><a class=\"header\" href=\"#cargo-newname\"><code>cargo-new.name</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"cargo-newemail\"><a class=\"header\" href=\"#cargo-newemail\"><code>cargo-new.email</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"cargo-newvcs\"><a class=\"header\" href=\"#cargo-newvcs\"><code>cargo-new.vcs</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “git” or “none”</li>\n<li>Environment: <code class=\"hljs\">CARGO_CARGO_NEW_VCS</code></li>\n</ul>\n<p>Specifies the source control system to use for initializing a new repository.\nValid values are <code class=\"hljs\">git</code>, <code class=\"hljs\">hg</code> (for Mercurial), <code class=\"hljs\">pijul</code>, <code class=\"hljs\">fossil</code> or <code class=\"hljs\">none</code> to\ndisable this behavior. Defaults to <code class=\"hljs\">git</code>, or <code class=\"hljs\">none</code> if already inside a VCS\nrepository. Can be overridden with the <code class=\"hljs\">--vcs</code> CLI option.</p>\n<h3 id=\"env\"><a class=\"header\" href=\"#env\"><code>[env]</code></a></h3>\n<p>The <code class=\"hljs\">[env]</code> section allows you to set additional environment variables for\nbuild scripts, rustc invocations, <code class=\"hljs\">cargo run</code> and <code class=\"hljs\">cargo build</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-attr\">OPENSSL_DIR</span> = <span class=\"hljs-string\">\"/opt/openssl\"</span>\n</code></pre>\n<p>By default, the variables specified will not override values that already exist\nin the environment. This behavior can be changed by setting the <code class=\"hljs\">force</code> flag.</p>\n<p>Setting the <code class=\"hljs\">relative</code> flag evaluates the value as a config-relative path that\nis relative to the parent directory of the <code class=\"hljs\">.cargo</code> directory that contains the\n<code class=\"hljs\">config.toml</code> file. The value of the environment variable will be the full\nabsolute path.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[env]</span>\n<span class=\"hljs-attr\">TMPDIR</span> = { value = <span class=\"hljs-string\">\"/home/tmp\"</span>, force = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">OPENSSL_DIR</span> = { value = <span class=\"hljs-string\">\"vendor/openssl\"</span>, relative = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<h3 id=\"future-incompat-report\"><a class=\"header\" href=\"#future-incompat-report\"><code>[future-incompat-report]</code></a></h3>\n<p>The <code class=\"hljs\">[future-incompat-report]</code> table controls setting for <a href=\"future-incompat-report.html\">future incompat reporting</a></p>\n<h4 id=\"future-incompat-reportfrequency\"><a class=\"header\" href=\"#future-incompat-reportfrequency\"><code>future-incompat-report.frequency</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “always”</li>\n<li>Environment: <code class=\"hljs\">CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY</code></li>\n</ul>\n<p>Controls how often we display a notification to the terminal when a future incompat report is available. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">always</code> (default): Always display a notification when a command (e.g. <code class=\"hljs\">cargo build</code>) produces a future incompat report</li>\n<li><code class=\"hljs\">never</code>: Never display a notification</li>\n</ul>\n<h3 id=\"http\"><a class=\"header\" href=\"#http\"><code>[http]</code></a></h3>\n<p>The <code class=\"hljs\">[http]</code> table defines settings for HTTP behavior. This includes fetching\ncrate dependencies and accessing remote git repositories.</p>\n<h4 id=\"httpdebug\"><a class=\"header\" href=\"#httpdebug\"><code>http.debug</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_DEBUG</code></li>\n</ul>\n<p>If <code class=\"hljs\">true</code>, enables debugging of HTTP requests. The debug information can be\nseen by setting the <code class=\"hljs\">CARGO_LOG=network=debug</code> environment\nvariable (or use <code class=\"hljs\">network=trace</code> for even more information).</p>\n<p>Be wary when posting logs from this output in a public location. The output\nmay include headers with authentication tokens which you don’t want to leak!\nBe sure to review logs before posting them.</p>\n<h4 id=\"httpproxy\"><a class=\"header\" href=\"#httpproxy\"><code>http.proxy</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_PROXY</code> or <code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> or <code class=\"hljs\">http_proxy</code></li>\n</ul>\n<p>Sets an HTTP and HTTPS proxy to use. The format is in <a href=\"https://everything.curl.dev/transfers/conn/proxies#proxy-types\">libcurl format</a> as in\n<code class=\"hljs\">[protocol://]host[:port]</code>. If not set, Cargo will also check the <code class=\"hljs\">http.proxy</code>\nsetting in your global git configuration. If none of those are set, the\n<code class=\"hljs\">HTTPS_PROXY</code> or <code class=\"hljs\">https_proxy</code> environment variables set the proxy for HTTPS\nrequests, and <code class=\"hljs\">http_proxy</code> sets it for HTTP requests.</p>\n<h4 id=\"httptimeout\"><a class=\"header\" href=\"#httptimeout\"><code>http.timeout</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 30</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_TIMEOUT</code> or <code class=\"hljs\">HTTP_TIMEOUT</code></li>\n</ul>\n<p>Sets the timeout for each HTTP request, in seconds.</p>\n<h4 id=\"httpcainfo\"><a class=\"header\" href=\"#httpcainfo\"><code>http.cainfo</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_CAINFO</code></li>\n</ul>\n<p>Path to a Certificate Authority (CA) bundle file, used to verify TLS\ncertificates. If not specified, Cargo attempts to use the system certificates.</p>\n<h4 id=\"httpcheck-revoke\"><a class=\"header\" href=\"#httpcheck-revoke\"><code>http.check-revoke</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: true (Windows) false (all others)</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_CHECK_REVOKE</code></li>\n</ul>\n<p>This determines whether or not TLS certificate revocation checks should be\nperformed. This only works on Windows.</p>\n<h4 id=\"httpssl-version\"><a class=\"header\" href=\"#httpssl-version\"><code>http.ssl-version</code></a></h4>\n<ul>\n<li>Type: string or min/max table</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_SSL_VERSION</code></li>\n</ul>\n<p>This sets the minimum TLS version to use. It takes a string, with one of the\npossible values of “default”, “tlsv1”, “tlsv1.0”, “tlsv1.1”, “tlsv1.2”, or\n“tlsv1.3”.</p>\n<p>This may alternatively take a table with two keys, <code class=\"hljs\">min</code> and <code class=\"hljs\">max</code>, which each\ntake a string value of the same kind that specifies the minimum and maximum\nrange of TLS versions to use.</p>\n<p>The default is a minimum version of “tlsv1.0” and a max of the newest version\nsupported on your platform, typically “tlsv1.3”.</p>\n<h4 id=\"httplow-speed-limit\"><a class=\"header\" href=\"#httplow-speed-limit\"><code>http.low-speed-limit</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 10</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_LOW_SPEED_LIMIT</code></li>\n</ul>\n<p>This setting controls timeout behavior for slow connections. If the average\ntransfer speed in bytes per second is below the given value for\n<a href=\"#httptimeout\"><code class=\"hljs\">http.timeout</code></a> seconds (default 30 seconds), then the\nconnection is considered too slow and Cargo will abort and retry.</p>\n<h4 id=\"httpmultiplexing\"><a class=\"header\" href=\"#httpmultiplexing\"><code>http.multiplexing</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_MULTIPLEXING</code></li>\n</ul>\n<p>When <code class=\"hljs\">true</code>, Cargo will attempt to use the HTTP2 protocol with multiplexing.\nThis allows multiple requests to use the same connection, usually improving\nperformance when fetching multiple files. If <code class=\"hljs\">false</code>, Cargo will use HTTP 1.1\nwithout pipelining.</p>\n<h4 id=\"httpuser-agent\"><a class=\"header\" href=\"#httpuser-agent\"><code>http.user-agent</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: Cargo’s version</li>\n<li>Environment: <code class=\"hljs\">CARGO_HTTP_USER_AGENT</code></li>\n</ul>\n<p>Specifies a custom user-agent header to use. The default if not specified is a\nstring that includes Cargo’s version.</p>\n<h3 id=\"install\"><a class=\"header\" href=\"#install\"><code>[install]</code></a></h3>\n<p>The <code class=\"hljs\">[install]</code> table defines defaults for the <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a> command.</p>\n<h4 id=\"installroot\"><a class=\"header\" href=\"#installroot\"><code>install.root</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: Cargo’s home directory</li>\n<li>Environment: <code class=\"hljs\">CARGO_INSTALL_ROOT</code></li>\n</ul>\n<p>Sets the path to the root directory for installing executables for <a href=\"../commands/cargo-install.html\"><code class=\"hljs\">cargo install</code></a>. Executables go into a <code class=\"hljs\">bin</code> directory underneath the root.</p>\n<p>To track information of installed executables, some extra files, such as\n<code class=\"hljs\">.crates.toml</code> and <code class=\"hljs\">.crates2.json</code>, are also created under this root.</p>\n<p>The default if not specified is Cargo’s home directory (default <code class=\"hljs\">.cargo</code> in\nyour home directory).</p>\n<p>Can be overridden with the <code class=\"hljs\">--root</code> command-line option.</p>\n<h3 id=\"net\"><a class=\"header\" href=\"#net\"><code>[net]</code></a></h3>\n<p>The <code class=\"hljs\">[net]</code> table controls networking configuration.</p>\n<h4 id=\"netretry\"><a class=\"header\" href=\"#netretry\"><code>net.retry</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: 3</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_RETRY</code></li>\n</ul>\n<p>Number of times to retry possibly spurious network errors.</p>\n<h4 id=\"netgit-fetch-with-cli\"><a class=\"header\" href=\"#netgit-fetch-with-cli\"><code>net.git-fetch-with-cli</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_GIT_FETCH_WITH_CLI</code></li>\n</ul>\n<p>If this is <code class=\"hljs\">true</code>, then Cargo will use the <code class=\"hljs\">git</code> executable to fetch registry\nindexes and git dependencies. If <code class=\"hljs\">false</code>, then it uses a built-in <code class=\"hljs\">git</code>\nlibrary.</p>\n<p>Setting this to <code class=\"hljs\">true</code> can be helpful if you have special authentication\nrequirements that Cargo does not support. See <a href=\"../appendix/git-authentication.html\">Git\nAuthentication</a> for more information about\nsetting up git authentication.</p>\n<h4 id=\"netoffline\"><a class=\"header\" href=\"#netoffline\"><code>net.offline</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_NET_OFFLINE</code></li>\n</ul>\n<p>If this is <code class=\"hljs\">true</code>, then Cargo will avoid accessing the network, and attempt to\nproceed with locally cached data. If <code class=\"hljs\">false</code>, Cargo will access the network as\nneeded, and generate an error if it encounters a network error.</p>\n<p>Can be overridden with the <code class=\"hljs\">--offline</code> command-line option.</p>\n<h4 id=\"netssh\"><a class=\"header\" href=\"#netssh\"><code>net.ssh</code></a></h4>\n<p>The <code class=\"hljs\">[net.ssh]</code> table contains settings for SSH connections.</p>\n<h4 id=\"netsshknown-hosts\"><a class=\"header\" href=\"#netsshknown-hosts\"><code>net.ssh.known-hosts</code></a></h4>\n<ul>\n<li>Type: array of strings</li>\n<li>Default: see description</li>\n<li>Environment: not supported</li>\n</ul>\n<p>The <code class=\"hljs\">known-hosts</code> array contains a list of SSH host keys that should be\naccepted as valid when connecting to an SSH server (such as for SSH git\ndependencies). Each entry should be a string in a format similar to OpenSSH\n<code class=\"hljs\">known_hosts</code> files. Each string should start with one or more hostnames\nseparated by commas, a space, the key type name, a space, and the\nbase64-encoded key. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[net.ssh]</span>\n<span class=\"hljs-attr\">known-hosts</span> = [\n    <span class=\"hljs-string\">\"example.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"</span>\n]\n</code></pre>\n<p>Cargo will attempt to load known hosts keys from common locations supported in\nOpenSSH, and will join those with any listed in a Cargo configuration file.\nIf any matching entry has the correct key, the connection will be allowed.</p>\n<p>Cargo comes with the host keys for <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">github.com</a> built-in. If\nthose ever change, you can add the new keys to the config or known_hosts file.</p>\n<p>See <a href=\"../appendix/git-authentication.html#ssh-known-hosts\">Git Authentication</a>\nfor more details.</p>\n<h3 id=\"patch\"><a class=\"header\" href=\"#patch\"><code>[patch]</code></a></h3>\n<p>Just as you can override dependencies using <a href=\"overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code> in\n<code class=\"hljs\">Cargo.toml</code></a>, you can\noverride them in the cargo configuration file to apply those patches to\nany affected build. The format is identical to the one used in\n<code class=\"hljs\">Cargo.toml</code>.</p>\n<p>Since <code class=\"hljs\">.cargo/config.toml</code> files are not usually checked into source\ncontrol, you should prefer patching using <code class=\"hljs\">Cargo.toml</code> where possible to\nensure that other developers can compile your crate in their own\nenvironments. Patching through cargo configuration files is generally\nonly appropriate when the patch section is automatically generated by an\nexternal build tool.</p>\n<p>If a given dependency is patched both in a cargo configuration file and\na <code class=\"hljs\">Cargo.toml</code> file, the patch in the configuration file is used. If\nmultiple configuration files patch the same dependency, standard cargo\nconfiguration merging is used, which prefers the value defined closest\nto the current directory, with <code class=\"hljs\">$HOME/.cargo/config.toml</code> taking the\nlowest precedence.</p>\n<p>Relative <code class=\"hljs\">path</code> dependencies in such a <code class=\"hljs\">[patch]</code> section are resolved\nrelative to the configuration file they appear in.</p>\n<h3 id=\"profile\"><a class=\"header\" href=\"#profile\"><code>[profile]</code></a></h3>\n<p>The <code class=\"hljs\">[profile]</code> table can be used to globally change profile settings, and\noverride settings specified in <code class=\"hljs\">Cargo.toml</code>. It has the same syntax and\noptions as profiles specified in <code class=\"hljs\">Cargo.toml</code>. See the <a href=\"profiles.html\">Profiles chapter</a> for\ndetails about the options.</p>\n<h4 id=\"profilenamebuild-override\"><a class=\"header\" href=\"#profilenamebuild-override\"><code>[profile.&lt;name&gt;.build-override]</code></a></h4>\n<ul>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_BUILD_OVERRIDE_&lt;key&gt;</code></li>\n</ul>\n<p>The build-override table overrides settings for build scripts, proc macros,\nand their dependencies. It has the same keys as a normal profile. See the\n<a href=\"profiles.html#overrides\">overrides section</a> for more details.</p>\n<h4 id=\"profilenamepackagename\"><a class=\"header\" href=\"#profilenamepackagename\"><code>[profile.&lt;name&gt;.package.&lt;name&gt;]</code></a></h4>\n<ul>\n<li>Environment: not supported</li>\n</ul>\n<p>The package table overrides settings for specific packages. It has the same\nkeys as a normal profile, minus the <code class=\"hljs\">panic</code>, <code class=\"hljs\">lto</code>, and <code class=\"hljs\">rpath</code> settings. See\nthe <a href=\"profiles.html#overrides\">overrides section</a> for more details.</p>\n<h4 id=\"profilenamecodegen-units\"><a class=\"header\" href=\"#profilenamecodegen-units\"><code>profile.&lt;name&gt;.codegen-units</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_CODEGEN_UNITS</code></li>\n</ul>\n<p>See <a href=\"profiles.html#codegen-units\">codegen-units</a>.</p>\n<h4 id=\"profilenamedebug\"><a class=\"header\" href=\"#profilenamedebug\"><code>profile.&lt;name&gt;.debug</code></a></h4>\n<ul>\n<li>Type: integer or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG</code></li>\n</ul>\n<p>See <a href=\"profiles.html#debug\">debug</a>.</p>\n<h4 id=\"profilenamesplit-debuginfo\"><a class=\"header\" href=\"#profilenamesplit-debuginfo\"><code>profile.&lt;name&gt;.split-debuginfo</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_SPLIT_DEBUGINFO</code></li>\n</ul>\n<p>See <a href=\"profiles.html#split-debuginfo\">split-debuginfo</a>.</p>\n<h4 id=\"profilenamestrip\"><a class=\"header\" href=\"#profilenamestrip\"><code>profile.&lt;name&gt;.strip</code></a></h4>\n<ul>\n<li>Type: string or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code></li>\n</ul>\n<p>See <a href=\"profiles.html#strip\">strip</a>.</p>\n<h4 id=\"profilenamedebug-assertions\"><a class=\"header\" href=\"#profilenamedebug-assertions\"><code>profile.&lt;name&gt;.debug-assertions</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_DEBUG_ASSERTIONS</code></li>\n</ul>\n<p>See <a href=\"profiles.html#debug-assertions\">debug-assertions</a>.</p>\n<h4 id=\"profilenameincremental\"><a class=\"header\" href=\"#profilenameincremental\"><code>profile.&lt;name&gt;.incremental</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_INCREMENTAL</code></li>\n</ul>\n<p>See <a href=\"profiles.html#incremental\">incremental</a>.</p>\n<h4 id=\"profilenamelto\"><a class=\"header\" href=\"#profilenamelto\"><code>profile.&lt;name&gt;.lto</code></a></h4>\n<ul>\n<li>Type: string or boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_LTO</code></li>\n</ul>\n<p>See <a href=\"profiles.html#lto\">lto</a>.</p>\n<h4 id=\"profilenameoverflow-checks\"><a class=\"header\" href=\"#profilenameoverflow-checks\"><code>profile.&lt;name&gt;.overflow-checks</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OVERFLOW_CHECKS</code></li>\n</ul>\n<p>See <a href=\"profiles.html#overflow-checks\">overflow-checks</a>.</p>\n<h4 id=\"profilenameopt-level\"><a class=\"header\" href=\"#profilenameopt-level\"><code>profile.&lt;name&gt;.opt-level</code></a></h4>\n<ul>\n<li>Type: integer or string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_OPT_LEVEL</code></li>\n</ul>\n<p>See <a href=\"profiles.html#opt-level\">opt-level</a>.</p>\n<h4 id=\"profilenamepanic\"><a class=\"header\" href=\"#profilenamepanic\"><code>profile.&lt;name&gt;.panic</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_PANIC</code></li>\n</ul>\n<p>See <a href=\"profiles.html#panic\">panic</a>.</p>\n<h4 id=\"profilenamerpath\"><a class=\"header\" href=\"#profilenamerpath\"><code>profile.&lt;name&gt;.rpath</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_RPATH</code></li>\n</ul>\n<p>See <a href=\"profiles.html#rpath\">rpath</a>.</p>\n<h4 id=\"profilenamestrip-1\"><a class=\"header\" href=\"#profilenamestrip-1\"><code>profile.&lt;name&gt;.strip</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: See profile docs.</li>\n<li>Environment: <code class=\"hljs\">CARGO_PROFILE_&lt;name&gt;_STRIP</code></li>\n</ul>\n<p>See <a href=\"profiles.html#strip\">strip</a>.</p>\n<h3 id=\"registries\"><a class=\"header\" href=\"#registries\"><code>[registries]</code></a></h3>\n<p>The <code class=\"hljs\">[registries]</code> table is used for specifying additional <a href=\"registries.html\">registries</a>. It\nconsists of a sub-table for each named registry.</p>\n<h4 id=\"registriesnameindex\"><a class=\"header\" href=\"#registriesnameindex\"><code>registries.&lt;name&gt;.index</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_INDEX</code></li>\n</ul>\n<p>Specifies the URL of the index for the registry.</p>\n<h4 id=\"registriesnametoken\"><a class=\"header\" href=\"#registriesnametoken\"><code>registries.&lt;name&gt;.token</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_TOKEN</code></li>\n</ul>\n<p>Specifies the authentication token for the given registry. This value should\nonly appear in the <a href=\"#credentials\">credentials</a> file. This is used for registry\ncommands like <a href=\"../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> that require authentication.</p>\n<p>Can be overridden with the <code class=\"hljs\">--token</code> command-line option.</p>\n<h4 id=\"registriesnamecredential-provider\"><a class=\"header\" href=\"#registriesnamecredential-provider\"><code>registries.&lt;name&gt;.credential-provider</code></a></h4>\n<ul>\n<li>Type: string or array of path and arguments</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_&lt;name&gt;_CREDENTIAL_PROVIDER</code></li>\n</ul>\n<p>Specifies the credential provider for the given registry. If not set, the\nproviders in <a href=\"#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>\nwill be used.</p>\n<p>If specified as a string, path and arguments will be split on spaces. For\npaths or arguments that contain spaces, use an array.</p>\n<p>If the value exists in the <a href=\"#credential-alias\"><code class=\"hljs\">[credential-alias]</code></a> table, the alias will be used.</p>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h4 id=\"registriescrates-ioprotocol\"><a class=\"header\" href=\"#registriescrates-ioprotocol\"><code>registries.crates-io.protocol</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: <code class=\"hljs\">sparse</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRIES_CRATES_IO_PROTOCOL</code></li>\n</ul>\n<p>Specifies the protocol used to access crates.io. Allowed values are <code class=\"hljs\">git</code> or <code class=\"hljs\">sparse</code>.</p>\n<p><code class=\"hljs\">git</code> causes Cargo to clone the entire index of all packages ever published to <a href=\"https://crates.io/\">crates.io</a> from <a href=\"https://github.com/rust-lang/crates.io-index/\">https://github.com/rust-lang/crates.io-index/</a>.\nThis can have performance implications due to the size of the index.\n<code class=\"hljs\">sparse</code> is a newer protocol which uses HTTPS to download only what is necessary from <a href=\"https://index.crates.io/\">https://index.crates.io/</a>.\nThis can result in a significant performance improvement for resolving new dependencies in most situations.</p>\n<p>More information about registry protocols may be found in the <a href=\"registries.html\">Registries chapter</a>.</p>\n<h3 id=\"registry\"><a class=\"header\" href=\"#registry\"><code>[registry]</code></a></h3>\n<p>The <code class=\"hljs\">[registry]</code> table controls the default registry used when one is not\nspecified.</p>\n<h4 id=\"registryindex\"><a class=\"header\" href=\"#registryindex\"><code>registry.index</code></a></h4>\n<p>This value is no longer accepted and should not be used.</p>\n<h4 id=\"registrydefault\"><a class=\"header\" href=\"#registrydefault\"><code>registry.default</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: <code class=\"hljs\">\"crates-io\"</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_DEFAULT</code></li>\n</ul>\n<p>The name of the registry (from the <a href=\"#registries\"><code class=\"hljs\">registries</code> table</a>) to use\nby default for registry commands like <a href=\"../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a>.</p>\n<p>Can be overridden with the <code class=\"hljs\">--registry</code> command-line option.</p>\n<h4 id=\"registrycredential-provider\"><a class=\"header\" href=\"#registrycredential-provider\"><code>registry.credential-provider</code></a></h4>\n<ul>\n<li>Type: string or array of path and arguments</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_CREDENTIAL_PROVIDER</code></li>\n</ul>\n<p>Specifies the credential provider for <a href=\"https://crates.io/\">crates.io</a>. If not set, the\nproviders in <a href=\"#registryglobal-credential-providers\"><code class=\"hljs\">registry.global-credential-providers</code></a>\nwill be used.</p>\n<p>If specified as a string, path and arguments will be split on spaces. For\npaths or arguments that contain spaces, use an array.</p>\n<p>If the value exists in the <code class=\"hljs\">[credential-alias]</code> table, the alias will be used.</p>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h4 id=\"registrytoken\"><a class=\"header\" href=\"#registrytoken\"><code>registry.token</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_TOKEN</code></li>\n</ul>\n<p>Specifies the authentication token for <a href=\"https://crates.io/\">crates.io</a>. This value should only\nappear in the <a href=\"#credentials\">credentials</a> file. This is used for registry\ncommands like <a href=\"../commands/cargo-publish.html\"><code class=\"hljs\">cargo publish</code></a> that require authentication.</p>\n<p>Can be overridden with the <code class=\"hljs\">--token</code> command-line option.</p>\n<h4 id=\"registryglobal-credential-providers\"><a class=\"header\" href=\"#registryglobal-credential-providers\"><code>registry.global-credential-providers</code></a></h4>\n<ul>\n<li>Type: array</li>\n<li>Default: <code class=\"hljs\">[\"cargo:token\"]</code></li>\n<li>Environment: <code class=\"hljs\">CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS</code></li>\n</ul>\n<p>Specifies the list of global credential providers. If credential provider is not set\nfor a specific registry using <code class=\"hljs\">registries.&lt;name&gt;.credential-provider</code>, Cargo will use\nthe credential providers in this list. Providers toward the end of the list have precedence.</p>\n<p>Path and arguments are split on spaces. If the path or arguments contains spaces, the credential\nprovider should be defined in the <a href=\"#credential-alias\"><code class=\"hljs\">[credential-alias]</code></a> table and\nreferenced here by its alias.</p>\n<p>See <a href=\"registry-authentication.html\">Registry Authentication</a> for more information.</p>\n<h3 id=\"source\"><a class=\"header\" href=\"#source\"><code>[source]</code></a></h3>\n<p>The <code class=\"hljs\">[source]</code> table defines the registry sources available. See <a href=\"source-replacement.html\">Source\nReplacement</a> for more information. It consists of a sub-table for each named\nsource. A source should only define one kind (directory, registry,\nlocal-registry, or git).</p>\n<h4 id=\"sourcenamereplace-with\"><a class=\"header\" href=\"#sourcenamereplace-with\"><code>source.&lt;name&gt;.replace-with</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>If set, replace this source with the given named source or named registry.</p>\n<h4 id=\"sourcenamedirectory\"><a class=\"header\" href=\"#sourcenamedirectory\"><code>source.&lt;name&gt;.directory</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the path to a directory to use as a directory source.</p>\n<h4 id=\"sourcenameregistry\"><a class=\"header\" href=\"#sourcenameregistry\"><code>source.&lt;name&gt;.registry</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the URL to use for a registry source.</p>\n<h4 id=\"sourcenamelocal-registry\"><a class=\"header\" href=\"#sourcenamelocal-registry\"><code>source.&lt;name&gt;.local-registry</code></a></h4>\n<ul>\n<li>Type: string (path)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the path to a directory to use as a local registry source.</p>\n<h4 id=\"sourcenamegit\"><a class=\"header\" href=\"#sourcenamegit\"><code>source.&lt;name&gt;.git</code></a></h4>\n<ul>\n<li>Type: string (url)</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the URL to use for a git repository source.</p>\n<h4 id=\"sourcenamebranch\"><a class=\"header\" href=\"#sourcenamebranch\"><code>source.&lt;name&gt;.branch</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the branch name to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h4 id=\"sourcenametag\"><a class=\"header\" href=\"#sourcenametag\"><code>source.&lt;name&gt;.tag</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the tag name to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h4 id=\"sourcenamerev\"><a class=\"header\" href=\"#sourcenamerev\"><code>source.&lt;name&gt;.rev</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: not supported</li>\n</ul>\n<p>Sets the <a href=\"https://git-scm.com/docs/gitrevisions\">revision</a> to use for a git repository.</p>\n<p>If none of <code class=\"hljs\">branch</code>, <code class=\"hljs\">tag</code>, or <code class=\"hljs\">rev</code> is set, defaults to the <code class=\"hljs\">master</code> branch.</p>\n<h3 id=\"target\"><a class=\"header\" href=\"#target\"><code>[target]</code></a></h3>\n<p>The <code class=\"hljs\">[target]</code> table is used for specifying settings for specific platform\ntargets. It consists of a sub-table which is either a <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\">platform triple</a>\nor a <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. The given values will be used if the target platform\nmatches either the <code class=\"hljs\">&lt;triple&gt;</code> value or the <code class=\"hljs\">&lt;cfg&gt;</code> expression.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.thumbv7m-none-eabi]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"arm-none-eabi-gcc\"</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"my-emulator\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]\n\n<span class=\"hljs-section\">[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']</span>\n<span class=\"hljs-attr\">runner</span> = <span class=\"hljs-string\">\"my-arm-wrapper\"</span>\n<span class=\"hljs-attr\">rustflags</span> = [<span class=\"hljs-string\">\"…\"</span>, <span class=\"hljs-string\">\"…\"</span>]\n</code></pre>\n<p><code class=\"hljs\">cfg</code> values come from those built-in to the compiler (run <code class=\"hljs\">rustc --print=cfg</code>\nto view), values set by <a href=\"build-scripts.html\">build scripts</a>, and extra <code class=\"hljs\">--cfg</code> flags passed to\n<code class=\"hljs\">rustc</code> (such as those defined in <code class=\"hljs\">RUSTFLAGS</code>). Do not try to match on\n<code class=\"hljs\">debug_assertions</code> or Cargo features like <code class=\"hljs\">feature=\"foo\"</code>.</p>\n<p>If using a target spec JSON file, the <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> value is the filename stem.\nFor example <code class=\"hljs\">--target foo/bar.json</code> would match <code class=\"hljs\">[target.bar]</code>.</p>\n<h4 id=\"targettriplear\"><a class=\"header\" href=\"#targettriplear\"><code>target.&lt;triple&gt;.ar</code></a></h4>\n<p>This option is deprecated and unused.</p>\n<h4 id=\"targettriplelinker\"><a class=\"header\" href=\"#targettriplelinker\"><code>target.&lt;triple&gt;.linker</code></a></h4>\n<ul>\n<li>Type: string (program path)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_LINKER</code></li>\n</ul>\n<p>Specifies the linker which is passed to <code class=\"hljs\">rustc</code> (via <a href=\"../../rustc/codegen-options/index.html#linker\"><code class=\"hljs\">-C linker</code></a>) when the\n<a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> is being compiled for. By default, the linker is not overridden.</p>\n<h4 id=\"targetcfglinker\"><a class=\"header\" href=\"#targetcfglinker\"><code>target.&lt;cfg&gt;.linker</code></a></h4>\n<p>This is similar to the <a href=\"#targettriplelinker\">target linker</a>, but using\na <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If both a <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> and <code class=\"hljs\">&lt;cfg&gt;</code> runner match,\nthe <code class=\"hljs\">&lt;triple&gt;</code> will take precedence. It is an error if more than one\n<code class=\"hljs\">&lt;cfg&gt;</code> runner matches the current target.</p>\n<h4 id=\"targettriplerunner\"><a class=\"header\" href=\"#targettriplerunner\"><code>target.&lt;triple&gt;.runner</code></a></h4>\n<ul>\n<li>Type: string or array of strings (<a href=\"#executable-paths-with-arguments\">program path with args</a>)</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUNNER</code></li>\n</ul>\n<p>If a runner is provided, executables for the target <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> will be\nexecuted by invoking the specified runner with the actual executable passed as\nan argument. This applies to <a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>, <a href=\"../commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a> and <a href=\"../commands/cargo-bench.html\"><code class=\"hljs\">cargo bench</code></a>\ncommands. By default, compiled executables are executed directly.</p>\n<h4 id=\"targetcfgrunner\"><a class=\"header\" href=\"#targetcfgrunner\"><code>target.&lt;cfg&gt;.runner</code></a></h4>\n<p>This is similar to the <a href=\"#targettriplerunner\">target runner</a>, but using\na <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If both a <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> and <code class=\"hljs\">&lt;cfg&gt;</code> runner match,\nthe <code class=\"hljs\">&lt;triple&gt;</code> will take precedence. It is an error if more than one\n<code class=\"hljs\">&lt;cfg&gt;</code> runner matches the current target.</p>\n<h4 id=\"targettriplerustflags\"><a class=\"header\" href=\"#targettriplerustflags\"><code>target.&lt;triple&gt;.rustflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTFLAGS</code></li>\n</ul>\n<p>Passes a set of custom flags to the compiler for this <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a>.\nThe value may be an array of strings or a space-separated string.</p>\n<p>See <a href=\"#buildrustflags\"><code class=\"hljs\">build.rustflags</code></a> for more details on the different\nways to specific extra flags.</p>\n<h4 id=\"targetcfgrustflags\"><a class=\"header\" href=\"#targetcfgrustflags\"><code>target.&lt;cfg&gt;.rustflags</code></a></h4>\n<p>This is similar to the <a href=\"#targettriplerustflags\">target rustflags</a>, but\nusing a <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg()</code> expression</a>. If several <code class=\"hljs\">&lt;cfg&gt;</code> and <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a> entries\nmatch the current target, the flags are joined together.</p>\n<h4 id=\"targettriplerustdocflags\"><a class=\"header\" href=\"#targettriplerustdocflags\"><code>target.&lt;triple&gt;.rustdocflags</code></a></h4>\n<ul>\n<li>Type: string or array of strings</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TARGET_&lt;triple&gt;_RUSTDOCFLAGS</code></li>\n</ul>\n<p>Passes a set of custom flags to the compiler for this <a href=\"../appendix/glossary.html#target\" title=\"&quot;target&quot; (glossary)\"><code class=\"hljs\">&lt;triple&gt;</code></a>.\nThe value may be an array of strings or a space-separated string.</p>\n<p>See <a href=\"#buildrustdocflags\"><code class=\"hljs\">build.rustdocflags</code></a> for more details on the different\nways to specific extra flags.</p>\n<h4 id=\"targettriplelinks\"><a class=\"header\" href=\"#targettriplelinks\"><code>target.&lt;triple&gt;.&lt;links&gt;</code></a></h4>\n<p>The links sub-table provides a way to <a href=\"build-scripts.html#overriding-build-scripts\">override a build script</a>. When\nspecified, the build script for the given <code class=\"hljs\">links</code> library will not be\nrun, and the given values will be used instead.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[target.x86_64-unknown-linux-gnu.foo]</span>\n<span class=\"hljs-attr\">rustc-link-lib</span> = [<span class=\"hljs-string\">\"foo\"</span>]\n<span class=\"hljs-attr\">rustc-link-search</span> = [<span class=\"hljs-string\">\"/path/to/foo\"</span>]\n<span class=\"hljs-attr\">rustc-flags</span> = <span class=\"hljs-string\">\"-L /some/path\"</span>\n<span class=\"hljs-attr\">rustc-cfg</span> = [<span class=\"hljs-string\">'key=\"value\"'</span>]\n<span class=\"hljs-attr\">rustc-env</span> = {key = <span class=\"hljs-string\">\"value\"</span>}\n<span class=\"hljs-attr\">rustc-cdylib-link-arg</span> = [<span class=\"hljs-string\">\"…\"</span>]\n<span class=\"hljs-attr\">metadata_key1</span> = <span class=\"hljs-string\">\"value\"</span>\n<span class=\"hljs-attr\">metadata_key2</span> = <span class=\"hljs-string\">\"value\"</span>\n</code></pre>\n<h3 id=\"term\"><a class=\"header\" href=\"#term\"><code>[term]</code></a></h3>\n<p>The <code class=\"hljs\">[term]</code> table controls terminal output and interaction.</p>\n<h4 id=\"termquiet\"><a class=\"header\" href=\"#termquiet\"><code>term.quiet</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_QUIET</code></li>\n</ul>\n<p>Controls whether or not log messages are displayed by Cargo.</p>\n<p>Specifying the <code class=\"hljs\">--quiet</code> flag will override and force quiet output.\nSpecifying the <code class=\"hljs\">--verbose</code> flag will override and disable quiet output.</p>\n<h4 id=\"termverbose\"><a class=\"header\" href=\"#termverbose\"><code>term.verbose</code></a></h4>\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_VERBOSE</code></li>\n</ul>\n<p>Controls whether or not extra detailed messages are displayed by Cargo.</p>\n<p>Specifying the <code class=\"hljs\">--quiet</code> flag will override and disable verbose output.\nSpecifying the <code class=\"hljs\">--verbose</code> flag will override and force verbose output.</p>\n<h4 id=\"termcolor\"><a class=\"header\" href=\"#termcolor\"><code>term.color</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “auto”</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_COLOR</code></li>\n</ul>\n<p>Controls whether or not colored output is used in the terminal. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Automatically detect if color support is available on the\nterminal.</li>\n<li><code class=\"hljs\">always</code>: Always display colors.</li>\n<li><code class=\"hljs\">never</code>: Never display colors.</li>\n</ul>\n<p>Can be overridden with the <code class=\"hljs\">--color</code> command-line option.</p>\n<h4 id=\"termhyperlinks\"><a class=\"header\" href=\"#termhyperlinks\"><code>term.hyperlinks</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: auto-detect</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_HYPERLINKS</code></li>\n</ul>\n<p>Controls whether or not hyperlinks are used in the terminal.</p>\n<h4 id=\"termunicode\"><a class=\"header\" href=\"#termunicode\"><code>term.unicode</code></a></h4>\n<ul>\n<li>Type: bool</li>\n<li>Default: auto-detect</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_UNICODE</code></li>\n</ul>\n<p>Control whether output can be rendered using non-ASCII unicode characters.</p>\n<h4 id=\"termprogresswhen\"><a class=\"header\" href=\"#termprogresswhen\"><code>term.progress.when</code></a></h4>\n<ul>\n<li>Type: string</li>\n<li>Default: “auto”</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_PROGRESS_WHEN</code></li>\n</ul>\n<p>Controls whether or not progress bar is shown in the terminal. Possible values:</p>\n<ul>\n<li><code class=\"hljs\">auto</code> (default): Intelligently guess whether to show progress bar.</li>\n<li><code class=\"hljs\">always</code>: Always show progress bar.</li>\n<li><code class=\"hljs\">never</code>: Never show progress bar.</li>\n</ul>\n<h4 id=\"termprogresswidth\"><a class=\"header\" href=\"#termprogresswidth\"><code>term.progress.width</code></a></h4>\n<ul>\n<li>Type: integer</li>\n<li>Default: none</li>\n<li>Environment: <code class=\"hljs\">CARGO_TERM_PROGRESS_WIDTH</code></li>\n</ul>\n<p>Sets the width for progress bar.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/profiles.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/environment-variables.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/profiles.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/environment-variables.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:22.037Z"
}