{
	"title": "Improving Our I/O Project - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch13-03-improving-our-io-project.html",
	"markdown": "# Improving Our I/O Project - The Rust Programming Language\n\nWith this new knowledge about iterators, we can improve the I/O project in Chapter 12 by using iterators to make places in the code clearer and more concise. Let’s look at how iterators can improve our implementation of the `Config::build` function and the `search` function.\n\n### [Removing a `clone` Using an Iterator](#removing-a-clone-using-an-iterator)\n\nIn Listing 12-6, we added code that took a slice of `String` values and created an instance of the `Config` struct by indexing into the slice and cloning the values, allowing the `Config` struct to own those values. In Listing 13-17, we’ve reproduced the implementation of the `Config::build` function as it was in Listing 12-23:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-17: Reproduction of the `Config::build` function from Listing 12-23\n\nAt the time, we said not to worry about the inefficient `clone` calls because we would remove them in the future. Well, that time is now!\n\nWe needed `clone` here because we have a slice with `String` elements in the parameter `args`, but the `build` function doesn’t own `args`. To return ownership of a `Config` instance, we had to clone the values from the `query` and `file_path` fields of `Config` so the `Config` instance can own its values.\n\nWith our new knowledge about iterators, we can change the `build` function to take ownership of an iterator as its argument instead of borrowing a slice. We’ll use the iterator functionality instead of the code that checks the length of the slice and indexes into specific locations. This will clarify what the `Config::build` function is doing because the iterator will access the values.\n\nOnce `Config::build` takes ownership of the iterator and stops using indexing operations that borrow, we can move the `String` values from the iterator into `Config` rather than calling `clone` and making a new allocation.\n\n#### [Using the Returned Iterator Directly](#using-the-returned-iterator-directly)\n\nOpen your I/O project’s _src/main.rs_ file, which should look like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    // --snip--\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nWe’ll first change the start of the `main` function that we had in Listing 12-24 to the code in Listing 13-18, which this time uses an iterator. This won’t compile until we update `Config::build` as well.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    let config = Config::build(env::args()).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    // --snip--\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nListing 13-18: Passing the return value of `env::args` to `Config::build`\n\nThe `env::args` function returns an iterator! Rather than collecting the iterator values into a vector and then passing a slice to `Config::build`, now we’re passing ownership of the iterator returned from `env::args` to `Config::build` directly.\n\nNext, we need to update the definition of `Config::build`. In your I/O project’s _src/lib.rs_ file, let’s change the signature of `Config::build` to look like Listing 13-19. This still won’t compile because we need to update the function body.\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        // --snip--\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-19: Updating the signature of `Config::build` to expect an iterator\n\nThe standard library documentation for the `env::args` function shows that the type of the iterator it returns is `std::env::Args`, and that type implements the `Iterator` trait and returns `String` values.\n\nWe’ve updated the signature of the `Config::build` function so the parameter `args` has a generic type with the trait bounds `impl Iterator<Item = String>` instead of `&[String]`. This usage of the `impl Trait` syntax we discussed in the [“Traits as Parameters”](about:blank/ch10-02-traits.html#traits-as-parameters) section of Chapter 10 means that `args` can be any type that implements the `Iterator` trait and returns `String` items.\n\nBecause we’re taking ownership of `args` and we’ll be mutating `args` by iterating over it, we can add the `mut` keyword into the specification of the `args` parameter to make it mutable.\n\n#### [Using `Iterator` Trait Methods Instead of Indexing](#using-iterator-trait-methods-instead-of-indexing)\n\nNext, we’ll fix the body of `Config::build`. Because `args` implements the `Iterator` trait, we know we can call the `next` method on it! Listing 13-20 updates the code from Listing 12-23 to use the `next` method:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        args.next();\n\n        let query = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a query string\"),\n        };\n\n        let file_path = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a file path\"),\n        };\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-20: Changing the body of `Config::build` to use iterator methods\n\nRemember that the first value in the return value of `env::args` is the name of the program. We want to ignore that and get to the next value, so first we call `next` and do nothing with the return value. Second, we call `next` to get the value we want to put in the `query` field of `Config`. If `next` returns a `Some`, we use a `match` to extract the value. If it returns `None`, it means not enough arguments were given and we return early with an `Err` value. We do the same thing for the `file_path` value.\n\n### [Making Code Clearer with Iterator Adaptors](#making-code-clearer-with-iterator-adaptors)\n\nWe can also take advantage of iterators in the `search` function in our I/O project, which is reproduced here in Listing 13-21 as it was in Listing 12-19:\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 13-21: The implementation of the `search` function from Listing 12-19\n\nWe can write this code in a more concise way using iterator adaptor methods. Doing so also lets us avoid having a mutable intermediate `results` vector. The functional programming style prefers to minimize the amount of mutable state to make code clearer. Removing the mutable state might enable a future enhancement to make searching happen in parallel, because we wouldn’t have to manage concurrent access to the `results` vector. Listing 13-22 shows this change:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        args.next();\n\n        let query = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a query string\"),\n        };\n\n        let file_path = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a file path\"),\n        };\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    contents\n        .lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-22: Using iterator adaptor methods in the implementation of the `search` function\n\nRecall that the purpose of the `search` function is to return all lines in `contents` that contain the `query`. Similar to the `filter` example in Listing 13-16, this code uses the `filter` adaptor to keep only the lines that `line.contains(query)` returns `true` for. We then collect the matching lines into another vector with `collect`. Much simpler! Feel free to make the same change to use iterator methods in the `search_case_insensitive` function as well.\n\n### [Choosing Between Loops or Iterators](#choosing-between-loops-or-iterators)\n\nThe next logical question is which style you should choose in your own code and why: the original implementation in Listing 13-21 or the version using iterators in Listing 13-22. Most Rust programmers prefer to use the iterator style. It’s a bit tougher to get the hang of at first, but once you get a feel for the various iterator adaptors and what they do, iterators can be easier to understand. Instead of fiddling with the various bits of looping and building new vectors, the code focuses on the high-level objective of the loop. This abstracts away some of the commonplace code so it’s easier to see the concepts that are unique to this code, such as the filtering condition each element in the iterator must pass.\n\nBut are the two implementations truly equivalent? The intuitive assumption might be that the more low-level loop will be faster. Let’s talk about performance.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Improving Our I/O Project - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"improving-our-io-project\"><a class=\"header\" href=\"#improving-our-io-project\">Improving Our I/O Project</a></h2>\n<p>With this new knowledge about iterators, we can improve the I/O project in\nChapter 12 by using iterators to make places in the code clearer and more\nconcise. Let’s look at how iterators can improve our implementation of the\n<code class=\"hljs\">Config::build</code> function and the <code class=\"hljs\">search</code> function.</p>\n<h3 id=\"removing-a-clone-using-an-iterator\"><a class=\"header\" href=\"#removing-a-clone-using-an-iterator\">Removing a <code>clone</code> Using an Iterator</a></h3>\n<p>In Listing 12-6, we added code that took a slice of <code class=\"hljs\">String</code> values and created\nan instance of the <code class=\"hljs\">Config</code> struct by indexing into the slice and cloning the\nvalues, allowing the <code class=\"hljs\">Config</code> struct to own those values. In Listing 13-17,\nwe’ve reproduced the implementation of the <code class=\"hljs\">Config::build</code> function as it was\nin Listing 12-23:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-17: Reproduction of the <code class=\"hljs\">Config::build</code>\nfunction from Listing 12-23</span></p>\n<p>At the time, we said not to worry about the inefficient <code class=\"hljs\">clone</code> calls because\nwe would remove them in the future. Well, that time is now!</p>\n<p>We needed <code class=\"hljs\">clone</code> here because we have a slice with <code class=\"hljs\">String</code> elements in the\nparameter <code class=\"hljs\">args</code>, but the <code class=\"hljs\">build</code> function doesn’t own <code class=\"hljs\">args</code>. To return\nownership of a <code class=\"hljs\">Config</code> instance, we had to clone the values from the <code class=\"hljs\">query</code>\nand <code class=\"hljs\">file_path</code> fields of <code class=\"hljs\">Config</code> so the <code class=\"hljs\">Config</code> instance can own its values.</p>\n<p>With our new knowledge about iterators, we can change the <code class=\"hljs\">build</code> function to\ntake ownership of an iterator as its argument instead of borrowing a slice.\nWe’ll use the iterator functionality instead of the code that checks the length\nof the slice and indexes into specific locations. This will clarify what the\n<code class=\"hljs\">Config::build</code> function is doing because the iterator will access the values.</p>\n<p>Once <code class=\"hljs\">Config::build</code> takes ownership of the iterator and stops using indexing\noperations that borrow, we can move the <code class=\"hljs\">String</code> values from the iterator into\n<code class=\"hljs\">Config</code> rather than calling <code class=\"hljs\">clone</code> and making a new allocation.</p>\n<h4 id=\"using-the-returned-iterator-directly\"><a class=\"header\" href=\"#using-the-returned-iterator-directly\">Using the Returned Iterator Directly</a></h4>\n<p>Open your I/O project’s <em>src/main.rs</em> file, which should look like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> minigrep::Config;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n        eprintln!(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n</span><span class=\"boring\">        eprintln!(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p>We’ll first change the start of the <code class=\"hljs\">main</code> function that we had in Listing\n12-24 to the code in Listing 13-18, which this time uses an iterator. This\nwon’t compile until we update <code class=\"hljs\">Config::build</code> as well.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> minigrep::Config;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> config = Config::build(env::args()).unwrap_or_else(|err| {\n        eprintln!(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n</span><span class=\"boring\">        eprintln!(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 13-18: Passing the return value of <code class=\"hljs\">env::args</code> to\n<code class=\"hljs\">Config::build</code></span></p>\n<p>The <code class=\"hljs\">env::args</code> function returns an iterator! Rather than collecting the\niterator values into a vector and then passing a slice to <code class=\"hljs\">Config::build</code>, now\nwe’re passing ownership of the iterator returned from <code class=\"hljs\">env::args</code> to\n<code class=\"hljs\">Config::build</code> directly.</p>\n<p>Next, we need to update the definition of <code class=\"hljs\">Config::build</code>. In your I/O\nproject’s <em>src/lib.rs</em> file, let’s change the signature of <code class=\"hljs\">Config::build</code> to\nlook like Listing 13-19. This still won’t compile because we need to update the\nfunction body.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config {\n</span><span class=\"boring\">            query,\n</span><span class=\"boring\">            file_path,\n</span><span class=\"boring\">            ignore_case,\n</span><span class=\"boring\">        })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-19: Updating the signature of <code class=\"hljs\">Config::build</code>\nto expect an iterator</span></p>\n<p>The standard library documentation for the <code class=\"hljs\">env::args</code> function shows that the\ntype of the iterator it returns is <code class=\"hljs\">std::env::Args</code>, and that type implements\nthe <code class=\"hljs\">Iterator</code> trait and returns <code class=\"hljs\">String</code> values.</p>\n<p>We’ve updated the signature of the <code class=\"hljs\">Config::build</code> function so the parameter\n<code class=\"hljs\">args</code> has a generic type with the trait bounds <code class=\"hljs\">impl Iterator&lt;Item = String&gt;</code>\ninstead of <code class=\"hljs\">&amp;[String]</code>. This usage of the <code class=\"hljs\">impl Trait</code> syntax we discussed in\nthe <a href=\"ch10-02-traits.html#traits-as-parameters\">“Traits as Parameters”</a><!-- ignore --> section of Chapter 10\nmeans that <code class=\"hljs\">args</code> can be any type that implements the <code class=\"hljs\">Iterator</code> trait and\nreturns <code class=\"hljs\">String</code> items.</p>\n<p>Because we’re taking ownership of <code class=\"hljs\">args</code> and we’ll be mutating <code class=\"hljs\">args</code> by\niterating over it, we can add the <code class=\"hljs\">mut</code> keyword into the specification of the\n<code class=\"hljs\">args</code> parameter to make it mutable.</p>\n<h4 id=\"using-iterator-trait-methods-instead-of-indexing\"><a class=\"header\" href=\"#using-iterator-trait-methods-instead-of-indexing\">Using <code>Iterator</code> Trait Methods Instead of Indexing</a></h4>\n<p>Next, we’ll fix the body of <code class=\"hljs\">Config::build</code>. Because <code class=\"hljs\">args</code> implements the\n<code class=\"hljs\">Iterator</code> trait, we know we can call the <code class=\"hljs\">next</code> method on it! Listing 13-20\nupdates the code from Listing 12-23 to use the <code class=\"hljs\">next</code> method:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        args.next();\n\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-keyword\">match</span> args.next() {\n            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a query string\"</span>),\n        };\n\n        <span class=\"hljs-keyword\">let</span> file_path = <span class=\"hljs-keyword\">match</span> args.next() {\n            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a file path\"</span>),\n        };\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-20: Changing the body of <code class=\"hljs\">Config::build</code> to use\niterator methods</span></p>\n<p>Remember that the first value in the return value of <code class=\"hljs\">env::args</code> is the name of\nthe program. We want to ignore that and get to the next value, so first we call\n<code class=\"hljs\">next</code> and do nothing with the return value. Second, we call <code class=\"hljs\">next</code> to get the\nvalue we want to put in the <code class=\"hljs\">query</code> field of <code class=\"hljs\">Config</code>. If <code class=\"hljs\">next</code> returns a\n<code class=\"hljs\">Some</code>, we use a <code class=\"hljs\">match</code> to extract the value. If it returns <code class=\"hljs\">None</code>, it means\nnot enough arguments were given and we return early with an <code class=\"hljs\">Err</code> value. We do\nthe same thing for the <code class=\"hljs\">file_path</code> value.</p>\n<h3 id=\"making-code-clearer-with-iterator-adaptors\"><a class=\"header\" href=\"#making-code-clearer-with-iterator-adaptors\">Making Code Clearer with Iterator Adaptors</a></h3>\n<p>We can also take advantage of iterators in the <code class=\"hljs\">search</code> function in our I/O\nproject, which is reproduced here in Listing 13-21 as it was in Listing 12-19:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-21: The implementation of the <code class=\"hljs\">search</code>\nfunction from Listing 12-19</span></p>\n<p>We can write this code in a more concise way using iterator adaptor methods.\nDoing so also lets us avoid having a mutable intermediate <code class=\"hljs\">results</code> vector. The\nfunctional programming style prefers to minimize the amount of mutable state to\nmake code clearer. Removing the mutable state might enable a future enhancement\nto make searching happen in parallel, because we wouldn’t have to manage\nconcurrent access to the <code class=\"hljs\">results</code> vector. Listing 13-22 shows this change:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n</span><span class=\"boring\">    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        args.next();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-keyword\">match</span> args.next() {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a query string\"</span>),\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = <span class=\"hljs-keyword\">match</span> args.next() {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a file path\"</span>),\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config {\n</span><span class=\"boring\">            query,\n</span><span class=\"boring\">            file_path,\n</span><span class=\"boring\">            ignore_case,\n</span><span class=\"boring\">        })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    contents\n        .lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-22: Using iterator adaptor methods in the\nimplementation of the <code class=\"hljs\">search</code> function</span></p>\n<p>Recall that the purpose of the <code class=\"hljs\">search</code> function is to return all lines in\n<code class=\"hljs\">contents</code> that contain the <code class=\"hljs\">query</code>. Similar to the <code class=\"hljs\">filter</code> example in Listing\n13-16, this code uses the <code class=\"hljs\">filter</code> adaptor to keep only the lines that\n<code class=\"hljs\">line.contains(query)</code> returns <code class=\"hljs\">true</code> for. We then collect the matching lines\ninto another vector with <code class=\"hljs\">collect</code>. Much simpler! Feel free to make the same\nchange to use iterator methods in the <code class=\"hljs\">search_case_insensitive</code> function as\nwell.</p>\n<h3 id=\"choosing-between-loops-or-iterators\"><a class=\"header\" href=\"#choosing-between-loops-or-iterators\">Choosing Between Loops or Iterators</a></h3>\n<p>The next logical question is which style you should choose in your own code and\nwhy: the original implementation in Listing 13-21 or the version using\niterators in Listing 13-22. Most Rust programmers prefer to use the iterator\nstyle. It’s a bit tougher to get the hang of at first, but once you get a feel\nfor the various iterator adaptors and what they do, iterators can be easier to\nunderstand. Instead of fiddling with the various bits of looping and building\nnew vectors, the code focuses on the high-level objective of the loop. This\nabstracts away some of the commonplace code so it’s easier to see the concepts\nthat are unique to this code, such as the filtering condition each element in\nthe iterator must pass.</p>\n<p>But are the two implementations truly equivalent? The intuitive assumption\nmight be that the more low-level loop will be faster. Let’s talk about\nperformance.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch13-02-iterators.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch13-04-performance.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch13-02-iterators.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch13-04-performance.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:26.960Z"
}