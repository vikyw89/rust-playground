{
	"title": "Loop expressions - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/expressions/loop-expr.html",
	"markdown": "# Loop expressions - The Rust Reference\n\n## [Loops and other breakable expressions](#loops-and-other-breakable-expressions)\n\n> **Syntax**  \n> _LoopExpression_ :  \n>    [_LoopLabel_](#loop-labels)? (  \n>          [_InfiniteLoopExpression_](#infinite-loops)  \n>       | [_PredicateLoopExpression_](#predicate-loops)  \n>       | [_PredicatePatternLoopExpression_](#predicate-pattern-loops)  \n>       | [_IteratorLoopExpression_](#iterator-loops)  \n>       | [_LabelBlockExpression_](#labelled-block-expressions)  \n>    )\n\nRust supports five loop expressions:\n\n-   A [`loop` expression](#infinite-loops) denotes an infinite loop.\n-   A [`while` expression](#predicate-loops) loops until a predicate is false.\n-   A [`while let` expression](#predicate-pattern-loops) tests a pattern.\n-   A [`for` expression](#iterator-loops) extracts values from an iterator, looping until the iterator is empty.\n-   A [labelled block expression](#labelled-block-expressions) runs a loop exactly once, but allows exiting the loop early with `break`.\n\nAll five types of loop support [`break` expressions](#break-expressions), and [labels](#loop-labels). All except labelled block expressions support [`continue` expressions](#continue-expressions). Only `loop` and labelled block expressions support [evaluation to non-trivial values](#break-and-loop-values).\n\n## [Infinite loops](#infinite-loops)\n\n> **Syntax**  \n> _InfiniteLoopExpression_ :  \n>    `loop` [_BlockExpression_](block-expr.html)\n\nA `loop` expression repeats execution of its body continuously: `loop { println!(\"I live.\"); }`.\n\nA `loop` expression without an associated `break` expression is diverging and has type [`!`](../types/never.html). A `loop` expression containing associated [`break` expression(s)](#break-expressions) may terminate, and must have type compatible with the value of the `break` expression(s).\n\n## [Predicate loops](#predicate-loops)\n\n> **Syntax**  \n> _PredicateLoopExpression_ :  \n>    `while` [_Expression_](../expressions.html)_except struct expression_ [_BlockExpression_](block-expr.html)\n\nA `while` loop begins by evaluating the [boolean](../types/boolean.html) loop conditional operand. If the loop conditional operand evaluates to `true`, the loop body block executes, then control returns to the loop conditional operand. If the loop conditional expression evaluates to `false`, the `while` expression completes.\n\nAn example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut i = 0;\n\nwhile i < 10 {\n    println!(\"hello\");\n    i = i + 1;\n}\n}\n```\n\n## [Predicate pattern loops](#predicate-pattern-loops)\n\n> **Syntax**  \n> [_PredicatePatternLoopExpression_](#predicate-pattern-loops) :  \n>    `while` `let` [_Pattern_](../patterns.html) `=` [_Scrutinee_](match-expr.html)_except lazy boolean operator expression_ [_BlockExpression_](block-expr.html)\n\nA `while let` loop is semantically similar to a `while` loop but in place of a condition expression it expects the keyword `let` followed by a pattern, an `=`, a [scrutinee](about:blank/glossary.html#scrutinee) expression and a block expression. If the value of the scrutinee matches the pattern, the loop body block executes then control returns to the pattern matching statement. Otherwise, the while expression completes.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut x = vec![1, 2, 3];\n\nwhile let Some(y) = x.pop() {\n    println!(\"y = {}\", y);\n}\n\nwhile let _ = 5 {\n    println!(\"Irrefutable patterns are always true\");\n    break;\n}\n}\n```\n\nA `while let` loop is equivalent to a `loop` expression containing a [`match` expression](match-expr.html) as follows.\n\n```rust\n'label: while let PATS = EXPR {\n    /* loop body */\n}\n```\n\nis equivalent to\n\n```rust\n'label: loop {\n    match EXPR {\n        PATS => { /* loop body */ },\n        _ => break,\n    }\n}\n```\n\nMultiple patterns may be specified with the `|` operator. This has the same semantics as with `|` in `match` expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut vals = vec![2, 3, 1, 2, 2];\nwhile let Some(v @ 1) | Some(v @ 2) = vals.pop() {\n    // Prints 2, 2, then 1\n    println!(\"{}\", v);\n}\n}\n```\n\nAs is the case in [`if let` expressions](about:blank/if-expr.html#if-let-expressions), the scrutinee cannot be a [lazy boolean operator expression](about:blank/operator-expr.html#lazy-boolean-operators).\n\n## [Iterator loops](#iterator-loops)\n\n> **Syntax**  \n> _IteratorLoopExpression_ :  \n>    `for` [_Pattern_](../patterns.html) `in` [_Expression_](../expressions.html)_except struct expression_ [_BlockExpression_](block-expr.html)\n\nA `for` expression is a syntactic construct for looping over elements provided by an implementation of `std::iter::IntoIterator`. If the iterator yields a value, that value is matched against the irrefutable pattern, the body of the loop is executed, and then control returns to the head of the `for` loop. If the iterator is empty, the `for` expression completes.\n\nAn example of a `for` loop over the contents of an array:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet v = &[\"apples\", \"cake\", \"coffee\"];\n\nfor text in v {\n    println!(\"I like {}.\", text);\n}\n}\n```\n\nAn example of a for loop over a series of integers:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut sum = 0;\nfor n in 1..11 {\n    sum += n;\n}\nassert_eq!(sum, 55);\n}\n```\n\nA `for` loop is equivalent to a `loop` expression containing a [`match` expression](match-expr.html) as follows:\n\n```rust\n'label: for PATTERN in iter_expr {\n    /* loop body */\n}\n```\n\nis equivalent to\n\n```rust\n{\n    let result = match IntoIterator::into_iter(iter_expr) {\n        mut iter => 'label: loop {\n            let mut next;\n            match Iterator::next(&mut iter) {\n                Option::Some(val) => next = val,\n                Option::None => break,\n            };\n            let PATTERN = next;\n            let () = { /* loop body */ };\n        },\n    };\n    result\n}\n```\n\n`IntoIterator`, `Iterator`, and `Option` are always the standard library items here, not whatever those names resolve to in the current scope. The variable names `next`, `iter`, and `val` are for exposition only, they do not actually have names the user can type.\n\n> **Note**: that the outer `match` is used to ensure that any [temporary values](about:blank/expressions.html#temporaries) in `iter_expr` don't get dropped before the loop is finished. `next` is declared before being assigned because it results in types being inferred correctly more often.\n\n## [Loop labels](#loop-labels)\n\n> **Syntax**  \n> _LoopLabel_ :  \n>    [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels) `:`\n\nA loop expression may optionally have a _label_. The label is written as a lifetime preceding the loop expression, as in `'foo: loop { break 'foo; }`, `'bar: while false {}`, `'humbug: for _ in 0..0 {}`. If a label is present, then labeled `break` and `continue` expressions nested within this loop may exit out of this loop or return control to its head. See [break expressions](#break-expressions) and [continue expressions](#continue-expressions).\n\nLabels follow the hygiene and shadowing rules of local variables. For example, this code will print \"outer loop\":\n\n```rust\n#![allow(unused)]\nfn main() {\n'a: loop {\n    'a: loop {\n        break 'a;\n    }\n    print!(\"outer loop\");\n    break 'a;\n}\n}\n```\n\n## [`break` expressions](#break-expressions)\n\n> **Syntax**  \n> _BreakExpression_ :  \n>    `break` [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)? [_Expression_](../expressions.html)?\n\nWhen `break` is encountered, execution of the associated loop body is immediately terminated, for example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet mut last = 0;\nfor x in 1..100 {\n    if x > 12 {\n        break;\n    }\n    last = x;\n}\nassert_eq!(last, 12);\n}\n```\n\nA `break` expression is normally associated with the innermost `loop`, `for` or `while` loop enclosing the `break` expression, but a [label](#loop-labels) can be used to specify which enclosing loop is affected. Example:\n\n```rust\n#![allow(unused)]\nfn main() {\n'outer: loop {\n    while true {\n        break 'outer;\n    }\n}\n}\n```\n\nA `break` expression is only permitted in the body of a loop, and has one of the forms `break`, `break 'label` or ([see below](#break-and-loop-values)) `break EXPR` or `break 'label EXPR`.\n\n## [Labelled block expressions](#labelled-block-expressions)\n\n> **Syntax**  \n> _LabelBlockExpression_ :  \n>    [_BlockExpression_](block-expr.html)\n\nLabelled block expressions are exactly like block expressions, except that they allow using `break` expressions within the block. Unlike loops, `break` expressions within a labelled block expression _must_ have a label (i.e. the label is not optional). Similarly, labelled block expressions _must_ begin with a label.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn do_thing() {}\nfn condition_not_met() -> bool { true }\nfn do_next_thing() {}\nfn do_last_thing() {}\nlet result = 'block: {\n    do_thing();\n    if condition_not_met() {\n        break 'block 1;\n    }\n    do_next_thing();\n    if condition_not_met() {\n        break 'block 2;\n    }\n    do_last_thing();\n    3\n};\n}\n```\n\n## [`continue` expressions](#continue-expressions)\n\n> **Syntax**  \n> _ContinueExpression_ :  \n>    `continue` [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels)?\n\nWhen `continue` is encountered, the current iteration of the associated loop body is immediately terminated, returning control to the loop _head_. In the case of a `while` loop, the head is the conditional expression controlling the loop. In the case of a `for` loop, the head is the call-expression controlling the loop.\n\nLike `break`, `continue` is normally associated with the innermost enclosing loop, but `continue 'label` may be used to specify the loop affected. A `continue` expression is only permitted in the body of a loop.\n\n## [`break` and loop values](#break-and-loop-values)\n\nWhen associated with a `loop`, a break expression may be used to return a value from that loop, via one of the forms `break EXPR` or `break 'label EXPR`, where `EXPR` is an expression whose result is returned from the `loop`. For example:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet (mut a, mut b) = (1, 1);\nlet result = loop {\n    if b > 10 {\n        break b;\n    }\n    let c = a + b;\n    a = b;\n    b = c;\n};\n// first number in Fibonacci sequence over 10:\nassert_eq!(result, 13);\n}\n```\n\nIn the case a `loop` has an associated `break`, it is not considered diverging, and the `loop` must have a type compatible with each `break` expression. `break` without an expression is considered identical to `break` with expression `()`.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Loop expressions - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/expressions/loop-expr.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"loops-and-other-breakable-expressions\"><a class=\"header\" href=\"#loops-and-other-breakable-expressions\">Loops and other breakable expressions</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LoopExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"#loop-labels\"><em>LoopLabel</em></a><sup>?</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"#infinite-loops\"><em>InfiniteLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"#predicate-loops\"><em>PredicateLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"#predicate-pattern-loops\"><em>PredicatePatternLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"#iterator-loops\"><em>IteratorLoopExpression</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | <a href=\"#labelled-block-expressions\"><em>LabelBlockExpression</em></a><br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p>Rust supports five loop expressions:</p>\n<ul>\n<li>A <a href=\"#infinite-loops\"><code class=\"hljs\">loop</code> expression</a> denotes an infinite loop.</li>\n<li>A <a href=\"#predicate-loops\"><code class=\"hljs\">while</code> expression</a> loops until a predicate is false.</li>\n<li>A <a href=\"#predicate-pattern-loops\"><code class=\"hljs\">while let</code> expression</a> tests a pattern.</li>\n<li>A <a href=\"#iterator-loops\"><code class=\"hljs\">for</code> expression</a> extracts values from an iterator, looping until the iterator is empty.</li>\n<li>A <a href=\"#labelled-block-expressions\">labelled block expression</a> runs a loop exactly once, but allows exiting the loop early with <code class=\"hljs\">break</code>.</li>\n</ul>\n<p>All five types of loop support <a href=\"#break-expressions\"><code class=\"hljs\">break</code> expressions</a>, and <a href=\"#loop-labels\">labels</a>.\nAll except labelled block expressions support <a href=\"#continue-expressions\"><code class=\"hljs\">continue</code> expressions</a>.\nOnly <code class=\"hljs\">loop</code> and labelled block expressions support <a href=\"#break-and-loop-values\">evaluation to non-trivial values</a>.</p>\n<h2 id=\"infinite-loops\"><a class=\"header\" href=\"#infinite-loops\">Infinite loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>InfiniteLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">loop</code> <a href=\"block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">loop</code> expression repeats execution of its body continuously:\n<code class=\"hljs\">loop { println!(\"I live.\"); }</code>.</p>\n<p>A <code class=\"hljs\">loop</code> expression without an associated <code class=\"hljs\">break</code> expression is diverging and has type <a href=\"../types/never.html\"><code class=\"hljs\">!</code></a>.\nA <code class=\"hljs\">loop</code> expression containing associated <a href=\"#break-expressions\"><code class=\"hljs\">break</code> expression(s)</a> may terminate, and must have type compatible with the value of the <code class=\"hljs\">break</code> expression(s).</p>\n<h2 id=\"predicate-loops\"><a class=\"header\" href=\"#predicate-loops\">Predicate loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>PredicateLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">while</code> <a href=\"../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub> <a href=\"block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">while</code> loop begins by evaluating the <a href=\"../types/boolean.html\">boolean</a> loop conditional operand.\nIf the loop conditional operand evaluates to <code class=\"hljs\">true</code>, the loop body block executes, then control returns to the loop conditional operand.\nIf the loop conditional expression evaluates to <code class=\"hljs\">false</code>, the <code class=\"hljs\">while</code> expression completes.</p>\n<p>An example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> i = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-number\">10</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hello\"</span>);\n    i = i + <span class=\"hljs-number\">1</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"predicate-pattern-loops\"><a class=\"header\" href=\"#predicate-pattern-loops\">Predicate pattern loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<a href=\"#predicate-pattern-loops\"><em>PredicatePatternLoopExpression</em></a> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">while</code> <code class=\"hljs\">let</code> <a href=\"../patterns.html\"><em>Pattern</em></a> <code class=\"hljs\">=</code> <a href=\"match-expr.html\"><em>Scrutinee</em></a><sub><em>except lazy boolean operator expression</em></sub>\n<a href=\"block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">while let</code> loop is semantically similar to a <code class=\"hljs\">while</code> loop but in place of a condition expression it expects the keyword <code class=\"hljs\">let</code> followed by a pattern, an <code class=\"hljs\">=</code>, a <a href=\"../glossary.html#scrutinee\">scrutinee</a> expression and a block expression.\nIf the value of the scrutinee matches the pattern, the loop body block executes then control returns to the pattern matching statement.\nOtherwise, the while expression completes.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(y) = x.pop() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"y = {}\"</span>, y);\n}\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> _ = <span class=\"hljs-number\">5</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Irrefutable patterns are always true\"</span>);\n    <span class=\"hljs-keyword\">break</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">while let</code> loop is equivalent to a <code class=\"hljs\">loop</code> expression containing a <a href=\"match-expr.html\"><code class=\"hljs\">match</code> expression</a> as follows.</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> PATS = EXPR {\n    <span class=\"hljs-comment\">/* loop body */</span>\n}</code></pre>\n<p>is equivalent to</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">match</span> EXPR {\n        PATS =&gt; { <span class=\"hljs-comment\">/* loop body */</span> },\n        _ =&gt; <span class=\"hljs-keyword\">break</span>,\n    }\n}</code></pre>\n<p>Multiple patterns may be specified with the <code class=\"hljs\">|</code> operator.\nThis has the same semantics as with <code class=\"hljs\">|</code> in <code class=\"hljs\">match</code> expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> vals = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(v @ <span class=\"hljs-number\">1</span>) | <span class=\"hljs-literal\">Some</span>(v @ <span class=\"hljs-number\">2</span>) = vals.pop() {\n    <span class=\"hljs-comment\">// Prints 2, 2, then 1</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, v);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As is the case in <a href=\"if-expr.html#if-let-expressions\"><code class=\"hljs\">if let</code> expressions</a>, the scrutinee cannot be a <a href=\"operator-expr.html#lazy-boolean-operators\">lazy boolean operator expression</a>.</p>\n<h2 id=\"iterator-loops\"><a class=\"header\" href=\"#iterator-loops\">Iterator loops</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>IteratorLoopExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">for</code> <a href=\"../patterns.html\"><em>Pattern</em></a> <code class=\"hljs\">in</code> <a href=\"../expressions.html\"><em>Expression</em></a><sub><em>except struct expression</em></sub>\n<a href=\"block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>A <code class=\"hljs\">for</code> expression is a syntactic construct for looping over elements provided by an implementation of <code class=\"hljs\">std::iter::IntoIterator</code>.\nIf the iterator yields a value, that value is matched against the irrefutable pattern, the body of the loop is executed, and then control returns to the head of the <code class=\"hljs\">for</code> loop.\nIf the iterator is empty, the <code class=\"hljs\">for</code> expression completes.</p>\n<p>An example of a <code class=\"hljs\">for</code> loop over the contents of an array:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> v = &amp;[<span class=\"hljs-string\">\"apples\"</span>, <span class=\"hljs-string\">\"cake\"</span>, <span class=\"hljs-string\">\"coffee\"</span>];\n\n<span class=\"hljs-keyword\">for</span> text <span class=\"hljs-keyword\">in</span> v {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I like {}.\"</span>, text);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>An example of a for loop over a series of integers:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> sum = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">11</span> {\n    sum += n;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(sum, <span class=\"hljs-number\">55</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">for</code> loop is equivalent to a <code class=\"hljs\">loop</code> expression containing a <a href=\"match-expr.html\"><code class=\"hljs\">match</code> expression</a> as follows:</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">for</span> PATTERN <span class=\"hljs-keyword\">in</span> iter_expr {\n    <span class=\"hljs-comment\">/* loop body */</span>\n}</code></pre>\n<p>is equivalent to</p>\n<!-- ignore: expansion example -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">{\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">match</span> <span class=\"hljs-built_in\">IntoIterator</span>::into_iter(iter_expr) {\n        <span class=\"hljs-keyword\">mut</span> iter =&gt; <span class=\"hljs-symbol\">'label</span>: <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> next;\n            <span class=\"hljs-keyword\">match</span> <span class=\"hljs-built_in\">Iterator</span>::next(&amp;<span class=\"hljs-keyword\">mut</span> iter) {\n                <span class=\"hljs-built_in\">Option</span>::<span class=\"hljs-literal\">Some</span>(val) =&gt; next = val,\n                <span class=\"hljs-built_in\">Option</span>::<span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">break</span>,\n            };\n            <span class=\"hljs-keyword\">let</span> PATTERN = next;\n            <span class=\"hljs-keyword\">let</span> () = { <span class=\"hljs-comment\">/* loop body */</span> };\n        },\n    };\n    result\n}</code></pre>\n<p><code class=\"hljs\">IntoIterator</code>, <code class=\"hljs\">Iterator</code>, and <code class=\"hljs\">Option</code> are always the standard library items here, not whatever those names resolve to in the current scope.\nThe variable names <code class=\"hljs\">next</code>, <code class=\"hljs\">iter</code>, and <code class=\"hljs\">val</code> are for exposition only, they do not actually have names the user can type.</p>\n<blockquote>\n<p><strong>Note</strong>: that the outer <code class=\"hljs\">match</code> is used to ensure that any <a href=\"../expressions.html#temporaries\">temporary values</a> in <code class=\"hljs\">iter_expr</code> don't get dropped before the loop is finished.\n<code class=\"hljs\">next</code> is declared before being assigned because it results in types being inferred correctly more often.</p>\n</blockquote>\n<h2 id=\"loop-labels\"><a class=\"header\" href=\"#loop-labels\">Loop labels</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LoopLabel</em> :<br>\n&nbsp;&nbsp; <a href=\"../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a> <code class=\"hljs\">:</code></p>\n</blockquote>\n<p>A loop expression may optionally have a <em>label</em>. The label is written as a lifetime preceding the loop expression, as in <code class=\"hljs\">'foo: loop { break 'foo; }</code>, <code class=\"hljs\">'bar: while false {}</code>, <code class=\"hljs\">'humbug: for _ in 0..0 {}</code>.\nIf a label is present, then labeled <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> expressions nested within this loop may exit out of this loop or return control to its head.\nSee <a href=\"#break-expressions\">break expressions</a> and <a href=\"#continue-expressions\">continue expressions</a>.</p>\n<p>Labels follow the hygiene and shadowing rules of local variables. For example, this code will print \"outer loop\":</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-symbol\">'a</span>: <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n    }\n    <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"outer loop\"</span>);\n    <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'a</span>;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"break-expressions\"><a class=\"header\" href=\"#break-expressions\"><code>break</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>BreakExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">break</code> <a href=\"../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><sup>?</sup> <a href=\"../expressions.html\"><em>Expression</em></a><sup>?</sup></p>\n</blockquote>\n<p>When <code class=\"hljs\">break</code> is encountered, execution of the associated loop body is immediately terminated, for example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> last = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">100</span> {\n    <span class=\"hljs-keyword\">if</span> x &gt; <span class=\"hljs-number\">12</span> {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    last = x;\n}\n<span class=\"hljs-built_in\">assert_eq!</span>(last, <span class=\"hljs-number\">12</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">break</code> expression is normally associated with the innermost <code class=\"hljs\">loop</code>, <code class=\"hljs\">for</code> or <code class=\"hljs\">while</code> loop enclosing the <code class=\"hljs\">break</code> expression,\nbut a <a href=\"#loop-labels\">label</a> can be used to specify which enclosing loop is affected.\nExample:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-symbol\">'outer</span>: <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span> {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'outer</span>;\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A <code class=\"hljs\">break</code> expression is only permitted in the body of a loop, and has one of the forms <code class=\"hljs\">break</code>, <code class=\"hljs\">break 'label</code> or (<a href=\"#break-and-loop-values\">see below</a>) <code class=\"hljs\">break EXPR</code> or <code class=\"hljs\">break 'label EXPR</code>.</p>\n<h2 id=\"labelled-block-expressions\"><a class=\"header\" href=\"#labelled-block-expressions\">Labelled block expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>LabelBlockExpression</em> :<br>\n&nbsp;&nbsp; <a href=\"block-expr.html\"><em>BlockExpression</em></a></p>\n</blockquote>\n<p>Labelled block expressions are exactly like block expressions, except that they allow using <code class=\"hljs\">break</code> expressions within the block.\nUnlike loops, <code class=\"hljs\">break</code> expressions within a labelled block expression <em>must</em> have a label (i.e. the label is not optional).\nSimilarly, labelled block expressions <em>must</em> begin with a label.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_thing</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">condition_not_met</span></span>() -&gt; <span class=\"hljs-built_in\">bool</span> { <span class=\"hljs-literal\">true</span> }\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_next_thing</span></span>() {}\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_last_thing</span></span>() {}\n</span><span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-symbol\">'block</span>: {\n    do_thing();\n    <span class=\"hljs-keyword\">if</span> condition_not_met() {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'block</span> <span class=\"hljs-number\">1</span>;\n    }\n    do_next_thing();\n    <span class=\"hljs-keyword\">if</span> condition_not_met() {\n        <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'block</span> <span class=\"hljs-number\">2</span>;\n    }\n    do_last_thing();\n    <span class=\"hljs-number\">3</span>\n};\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"continue-expressions\"><a class=\"header\" href=\"#continue-expressions\"><code>continue</code> expressions</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ContinueExpression</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">continue</code> <a href=\"../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a><sup>?</sup></p>\n</blockquote>\n<p>When <code class=\"hljs\">continue</code> is encountered, the current iteration of the associated loop body is immediately terminated, returning control to the loop <em>head</em>.\nIn the case of a <code class=\"hljs\">while</code> loop, the head is the conditional expression controlling the loop.\nIn the case of a <code class=\"hljs\">for</code> loop, the head is the call-expression controlling the loop.</p>\n<p>Like <code class=\"hljs\">break</code>, <code class=\"hljs\">continue</code> is normally associated with the innermost enclosing loop, but <code class=\"hljs\">continue 'label</code> may be used to specify the loop affected.\nA <code class=\"hljs\">continue</code> expression is only permitted in the body of a loop.</p>\n<h2 id=\"break-and-loop-values\"><a class=\"header\" href=\"#break-and-loop-values\"><code>break</code> and loop values</a></h2>\n<p>When associated with a <code class=\"hljs\">loop</code>, a break expression may be used to return a value from that loop, via one of the forms <code class=\"hljs\">break EXPR</code> or <code class=\"hljs\">break 'label EXPR</code>, where <code class=\"hljs\">EXPR</code> is an expression whose result is returned from the <code class=\"hljs\">loop</code>.\nFor example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> a, <span class=\"hljs-keyword\">mut</span> b) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">loop</span> {\n    <span class=\"hljs-keyword\">if</span> b &gt; <span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">break</span> b;\n    }\n    <span class=\"hljs-keyword\">let</span> c = a + b;\n    a = b;\n    b = c;\n};\n<span class=\"hljs-comment\">// first number in Fibonacci sequence over 10:</span>\n<span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">13</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In the case a <code class=\"hljs\">loop</code> has an associated <code class=\"hljs\">break</code>, it is not considered diverging, and the <code class=\"hljs\">loop</code> must have a type compatible with each <code class=\"hljs\">break</code> expression.\n<code class=\"hljs\">break</code> without an expression is considered identical to <code class=\"hljs\">break</code> with expression <code class=\"hljs\">()</code>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../expressions/closure-expr.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../expressions/range-expr.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../expressions/closure-expr.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../expressions/range-expr.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:09.537Z"
}