{
	"title": "SocketAddr in std::os::unix::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/unix/net/struct.SocketAddr.html",
	"markdown": "# SocketAddr in std::os::unix::net - Rust\n\n```\npub struct SocketAddr { /* private fields */ }\n```\n\nAvailable on **Unix** only.\n\nExpand description\n\nAn address associated with a Unix socket.\n\n## [§](#examples)Examples\n\n```\nuse std::os::unix::net::UnixListener;\n\nlet socket = match UnixListener::bind(\"/tmp/sock\") {\n    Ok(sock) => sock,\n    Err(e) => {\n        println!(\"Couldn't bind: {e:?}\");\n        return\n    }\n};\nlet addr = socket.local_addr().expect(\"Couldn't get local address\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixListener;%0A++++%0A++++let+socket+=+match+UnixListener::bind(%22/tmp/sock%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn%27t+bind:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/unix/net/addr.rs.html#93-256)[§](#impl-SocketAddr)\n\n1.61.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#162-167)\n\nConstructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n\n##### [§](#errors)Errors\n\nReturns an error if the path is longer than `SUN_LEN` or if it contains NULL bytes.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::os::unix::net::SocketAddr;\nuse std::path::Path;\n\nlet address = SocketAddr::from_pathname(\"/path/to/socket\")?;\nassert_eq!(address.as_pathname(), Some(Path::new(\"/path/to/socket\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::SocketAddr;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0Alet+address+=+SocketAddr::from_pathname(%22/path/to/socket%22)?;%0Aassert_eq!(address.as_pathname(),+Some(Path::new(%22/path/to/socket%22)));%0AOk(())%0A%7D&edition=2021)\n\nCreating a `SocketAddr` with a NULL byte results in an error.\n\n```\nuse std::os::unix::net::SocketAddr;\n\nassert!(SocketAddr::from_pathname(\"/path/with/\\0/bytes\").is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::SocketAddr;%0A++++%0A++++assert!(SocketAddr::from_pathname(%22/path/with/%5C0/bytes%22).is_err());%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#200-202)\n\nReturns `true` if the address is unnamed.\n\n##### [§](#examples-2)Examples\n\nA named address:\n\n```\nuse std::os::unix::net::UnixListener;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixListener::bind(\"/tmp/sock\")?;\n    let addr = socket.local_addr().expect(\"Couldn't get local address\");\n    assert_eq!(addr.is_unnamed(), false);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixListener::bind(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++assert_eq!(addr.is_unnamed(),+false);%0A++++Ok(())%0A%7D&edition=2021)\n\nAn unnamed address:\n\n```\nuse std::os::unix::net::UnixDatagram;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixDatagram::unbound()?;\n    let addr = socket.local_addr().expect(\"Couldn't get local address\");\n    assert_eq!(addr.is_unnamed(), true);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixDatagram;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixDatagram::unbound()?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++assert_eq!(addr.is_unnamed(),+true);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#236-238)\n\nReturns the contents of this address if it is a `pathname` address.\n\n##### [§](#examples-3)Examples\n\nWith a pathname:\n\n```\nuse std::os::unix::net::UnixListener;\nuse std::path::Path;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixListener::bind(\"/tmp/sock\")?;\n    let addr = socket.local_addr().expect(\"Couldn't get local address\");\n    assert_eq!(addr.as_pathname(), Some(Path::new(\"/tmp/sock\")));\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixListener::bind(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++assert_eq!(addr.as_pathname(),+Some(Path::new(%22/tmp/sock%22)));%0A++++Ok(())%0A%7D&edition=2021)\n\nWithout a pathname:\n\n```\nuse std::os::unix::net::UnixDatagram;\n\nfn main() -> std::io::Result<()> {\n    let socket = UnixDatagram::unbound()?;\n    let addr = socket.local_addr().expect(\"Couldn't get local address\");\n    assert_eq!(addr.as_pathname(), None);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixDatagram;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixDatagram::unbound()?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn%27t+get+local+address%22);%0A++++assert_eq!(addr.as_pathname(),+None);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#86)[§](#impl-Clone-for-SocketAddr)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#297-305)[§](#impl-Debug-for-SocketAddr)\n\n1.70.0 · [source](about:blank/src/std/os/unix/net/addr.rs.html#264-294)[§](#impl-SocketAddrExt-for-SocketAddr)\n\nAvailable on **Android or Linux** only.\n\n[source](about:blank/src/std/os/unix/net/addr.rs.html#265-267)[§](#method.as_abstract_name)\n\nAvailable on **Linux and (Linux or Android)** only.\n\nReturns the contents of this address if it is in the abstract namespace. [Read more](about:blank/linux/net/trait.SocketAddrExt.html#tymethod.as_abstract_name)\n\n[source](about:blank/src/std/os/unix/net/addr.rs.html#269-293)[§](#method.from_abstract_name)\n\nAvailable on **Linux and (Linux or Android)** only.\n\nCreates a Unix socket address in the abstract namespace. [Read more](about:blank/linux/net/trait.SocketAddrExt.html#tymethod.from_abstract_name)\n\n[§](#impl-Freeze-for-SocketAddr)\n\n[§](#impl-RefUnwindSafe-for-SocketAddr)\n\n[§](#impl-Send-for-SocketAddr)\n\n[§](#impl-Sync-for-SocketAddr)\n\n[§](#impl-Unpin-for-SocketAddr)\n\n[§](#impl-UnwindSafe-for-SocketAddr)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An address associated with a Unix socket.\"><title>SocketAddr in std::os::unix::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SocketAddr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SocketAddr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_pathname\">as_pathname</a></li><li><a href=\"#method.from_pathname\">from_pathname</a></li><li><a href=\"#method.is_unnamed\">is_unnamed</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-SocketAddr\">Clone</a></li><li><a href=\"#impl-Debug-for-SocketAddr\">Debug</a></li><li><a href=\"#impl-SocketAddrExt-for-SocketAddr\">SocketAddrExt</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-SocketAddr\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-SocketAddr\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-SocketAddr\">Send</a></li><li><a href=\"#impl-Sync-for-SocketAddr\">Sync</a></li><li><a href=\"#impl-Unpin-for-SocketAddr\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-SocketAddr\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::os::unix::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.Messages.html\">Messages</a></li><li><a href=\"struct.ScmCredentials.html\">ScmCredentials</a></li><li><a href=\"struct.ScmRights.html\">ScmRights</a></li><li><a href=\"struct.SocketAddr.html\">SocketAddr</a></li><li><a href=\"struct.SocketAncillary.html\">SocketAncillary</a></li><li><a href=\"struct.SocketCred.html\">SocketCred</a></li><li><a href=\"struct.UCred.html\">UCred</a></li><li><a href=\"struct.UnixDatagram.html\">UnixDatagram</a></li><li><a href=\"struct.UnixListener.html\">UnixListener</a></li><li><a href=\"struct.UnixStream.html\">UnixStream</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.AncillaryData.html\">AncillaryData</a></li><li><a href=\"enum.AncillaryError.html\">AncillaryError</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">unix</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"struct\" href=\"#\">SocketAddr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#88-91\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct SocketAddr { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An address associated with a Unix socket.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">let </span>socket = <span class=\"kw\">match </span>UnixListener::bind(<span class=\"string\">\"/tmp/sock\"</span>) {\n    <span class=\"prelude-val\">Ok</span>(sock) =&gt; sock,\n    <span class=\"prelude-val\">Err</span>(e) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Couldn't bind: {e:?}\"</span>);\n        <span class=\"kw\">return\n    </span>}\n};\n<span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::UnixListener;%0A++++%0A++++let+socket+=+match+UnixListener::bind(%22/tmp/sock%22)+%7B%0A++++++++Ok(sock)+=%3E+sock,%0A++++++++Err(e)+=%3E+%7B%0A++++++++++++println!(%22Couldn't+bind:+%7Be:?%7D%22);%0A++++++++++++return%0A++++++++%7D%0A++++%7D;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SocketAddr\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/addr.rs.html#93-256\">source</a><a href=\"#impl-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_pathname\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#162-167\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.from_pathname\" class=\"fn\">from_pathname</a>&lt;P&gt;(path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the provided path.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the path is longer than <code>SUN_LEN</code> or if it contains\nNULL bytes.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::SocketAddr;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">let </span>address = SocketAddr::from_pathname(<span class=\"string\">\"/path/to/socket\"</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(address.as_pathname(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/path/to/socket\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::SocketAddr;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0Alet+address+=+SocketAddr::from_pathname(%22/path/to/socket%22)?;%0Aassert_eq!(address.as_pathname(),+Some(Path::new(%22/path/to/socket%22)));%0AOk(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creating a <code>SocketAddr</code> with a NULL byte results in an error.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::SocketAddr;\n\n<span class=\"macro\">assert!</span>(SocketAddr::from_pathname(<span class=\"string\">\"/path/with/\\0/bytes\"</span>).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::os::unix::net::SocketAddr;%0A++++%0A++++assert!(SocketAddr::from_pathname(%22/path/with/%5C0/bytes%22).is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_unnamed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#200-202\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_unnamed\" class=\"fn\">is_unnamed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the address is unnamed.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>A named address:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixListener::bind(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"macro\">assert_eq!</span>(addr.is_unnamed(), <span class=\"bool-val\">false</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixListener::bind(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++assert_eq!(addr.is_unnamed(),+false);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An unnamed address:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixDatagram;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixDatagram::unbound()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"macro\">assert_eq!</span>(addr.is_unnamed(), <span class=\"bool-val\">true</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixDatagram;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixDatagram::unbound()?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++assert_eq!(addr.is_unnamed(),+true);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_pathname\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#236-238\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_pathname\" class=\"fn\">as_pathname</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the contents of this address if it is a <code>pathname</code> address.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>With a pathname:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixListener;\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixListener::bind(<span class=\"string\">\"/tmp/sock\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"macro\">assert_eq!</span>(addr.as_pathname(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/tmp/sock\"</span>)));\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixListener;%0Ause+std::path::Path;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixListener::bind(%22/tmp/sock%22)?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++assert_eq!(addr.as_pathname(),+Some(Path::new(%22/tmp/sock%22)));%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Without a pathname:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::os::unix::net::UnixDatagram;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>socket = UnixDatagram::unbound()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>addr = socket.local_addr().expect(<span class=\"string\">\"Couldn't get local address\"</span>);\n    <span class=\"macro\">assert_eq!</span>(addr.as_pathname(), <span class=\"prelude-val\">None</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::os::unix::net::UnixDatagram;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+socket+=+UnixDatagram::unbound()?;%0A++++let+addr+=+socket.local_addr().expect(%22Couldn't+get+local+address%22);%0A++++assert_eq!(addr.as_pathname(),+None);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#86\">source</a></span><a href=\"#impl-Clone-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/addr.rs.html#86\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#297-305\">source</a></span><a href=\"#impl-Debug-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/addr.rs.html#298-304\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SocketAddrExt-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../../../src/std/os/unix/net/addr.rs.html#264-294\">source</a></span><a href=\"#impl-SocketAddrExt-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../linux/net/trait.SocketAddrExt.html\" title=\"trait std::os::linux::net::SocketAddrExt\">SocketAddrExt</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Android or Linux</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_abstract_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/addr.rs.html#265-267\">source</a><a href=\"#method.as_abstract_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../linux/net/trait.SocketAddrExt.html#tymethod.as_abstract_name\" class=\"fn\">as_abstract_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux and (Linux or Android)</strong> only.</div></span><div class=\"docblock\">Returns the contents of this address if it is in the abstract namespace. <a href=\"../../linux/net/trait.SocketAddrExt.html#tymethod.as_abstract_name\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_abstract_name\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/unix/net/addr.rs.html#269-293\">source</a><a href=\"#method.from_abstract_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../linux/net/trait.SocketAddrExt.html#tymethod.from_abstract_name\" class=\"fn\">from_abstract_name</a>&lt;N&gt;(name: N) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;Self&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>]&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux and (Linux or Android)</strong> only.</div></span><div class=\"docblock\">Creates a Unix socket address in the abstract namespace. <a href=\"../../linux/net/trait.SocketAddrExt.html#tymethod.from_abstract_name\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-SocketAddr\" class=\"impl\"><a href=\"#impl-Freeze-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-RefUnwindSafe-for-SocketAddr\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-Send-for-SocketAddr\" class=\"impl\"><a href=\"#impl-Send-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-Sync-for-SocketAddr\" class=\"impl\"><a href=\"#impl-Sync-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-Unpin-for-SocketAddr\" class=\"impl\"><a href=\"#impl-Unpin-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-UnwindSafe-for-SocketAddr\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.SocketAddr.html\" title=\"struct std::os::unix::net::SocketAddr\">SocketAddr</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:18.651Z"
}