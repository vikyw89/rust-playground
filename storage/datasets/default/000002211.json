{
	"title": "read_dir in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/fn.read_dir.html",
	"markdown": "# read\\_dir in std::fs - Rust\n\n## Function [std](../index.html)::[fs](index.html)::[read\\_dir](#)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#2586-2588) ·\n\n```\npub fn read_dir<P: AsRef<Path>>(path: P) -> Result<ReadDir>\n```\n\nExpand description\n\nReturns an iterator over the entries within a directory.\n\nThe iterator will yield instances of `[io::Result](../io/type.Result.html \"type std::io::Result\")<[DirEntry](struct.DirEntry.html \"struct std::fs::DirEntry\")>`. New errors may be encountered after an iterator is initially constructed. Entries for the current and parent directories (typically `.` and `..`) are skipped.\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nThis function currently corresponds to the `opendir` function on Unix and the `FindFirstFile` function on Windows. Advancing the iterator currently corresponds to `readdir` on Unix and `FindNextFile` on Windows. Note that, this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\nThe order in which this iterator returns entries is platform and filesystem dependent.\n\n## [§](#errors)Errors\n\nThis function will return an error in the following situations, but is not limited to just these cases:\n\n-   The provided `path` doesn’t exist.\n-   The process lacks permissions to view the contents.\n-   The `path` points at a non-directory file.\n\n## [§](#examples)Examples\n\n```\nuse std::io;\nuse std::fs::{self, DirEntry};\nuse std::path::Path;\n\n// one possible implementation of walking a directory only visiting files\nfn visit_dirs(dir: &Path, cb: &dyn Fn(&DirEntry)) -> io::Result<()> {\n    if dir.is_dir() {\n        for entry in fs::read_dir(dir)? {\n            let entry = entry?;\n            let path = entry.path();\n            if path.is_dir() {\n                visit_dirs(&path, cb)?;\n            } else {\n                cb(&entry);\n            }\n        }\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::fs::%7Bself,+DirEntry%7D;%0A++++use+std::path::Path;%0A++++%0A++++//+one+possible+implementation+of+walking+a+directory+only+visiting+files%0A++++fn+visit_dirs(dir:+%26Path,+cb:+%26dyn+Fn(%26DirEntry))+-%3E+io::Result%3C()%3E+%7B%0A++++++++if+dir.is_dir()+%7B%0A++++++++++++for+entry+in+fs::read_dir(dir)?+%7B%0A++++++++++++++++let+entry+=+entry?;%0A++++++++++++++++let+path+=+entry.path();%0A++++++++++++++++if+path.is_dir()+%7B%0A++++++++++++++++++++visit_dirs(%26path,+cb)?;%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++cb(%26entry);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++++++%7D%0A++++++++Ok(())%0A++++%7D%0A%7D&edition=2021)\n\n```\nuse std::{fs, io};\n\nfn main() -> io::Result<()> {\n    let mut entries = fs::read_dir(\".\")?\n        .map(|res| res.map(|e| e.path()))\n        .collect::<Result<Vec<_>, io::Error>>()?;\n\n    // The order in which `read_dir` returns entries is not guaranteed. If reproducible\n    // ordering is required the entries should be explicitly sorted.\n\n    entries.sort();\n\n    // The entries have now been sorted by their path.\n\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7Bfs,+io%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+entries+=+fs::read_dir(%22.%22)?%0A++++++++.map(%7Cres%7C+res.map(%7Ce%7C+e.path()))%0A++++++++.collect::%3CResult%3CVec%3C_%3E,+io::Error%3E%3E()?;%0A%0A++++//+The+order+in+which+%60read_dir%60+returns+entries+is+not+guaranteed.+If+reproducible%0A++++//+ordering+is+required+the+entries+should+be+explicitly+sorted.%0A%0A++++entries.sort();%0A%0A++++//+The+entries+have+now+been+sorted+by+their+path.%0A%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns an iterator over the entries within a directory.\"><title>read_dir in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"fn\" href=\"#\">read_dir</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#2586-2588\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn read_dir&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.ReadDir.html\" title=\"struct std::fs::ReadDir\">ReadDir</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns an iterator over the entries within a directory.</p>\n<p>The iterator will yield instances of <code><a href=\"../io/type.Result.html\" title=\"type std::io::Result\">io::Result</a>&lt;<a href=\"struct.DirEntry.html\" title=\"struct std::fs::DirEntry\">DirEntry</a>&gt;</code>.\nNew errors may be encountered after an iterator is initially constructed.\nEntries for the current and parent directories (typically <code>.</code> and <code>..</code>) are\nskipped.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>This function currently corresponds to the <code>opendir</code> function on Unix\nand the <code>FindFirstFile</code> function on Windows. Advancing the iterator\ncurrently corresponds to <code>readdir</code> on Unix and <code>FindNextFile</code> on Windows.\nNote that, this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<p>The order in which this iterator returns entries is platform and filesystem\ndependent.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>This function will return an error in the following situations, but is not\nlimited to just these cases:</p>\n<ul>\n<li>The provided <code>path</code> doesn’t exist.</li>\n<li>The process lacks permissions to view the contents.</li>\n<li>The <code>path</code> points at a non-directory file.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::fs::{<span class=\"self\">self</span>, DirEntry};\n<span class=\"kw\">use </span>std::path::Path;\n\n<span class=\"comment\">// one possible implementation of walking a directory only visiting files\n</span><span class=\"kw\">fn </span>visit_dirs(dir: <span class=\"kw-2\">&amp;</span>Path, cb: <span class=\"kw-2\">&amp;</span><span class=\"kw\">dyn </span>Fn(<span class=\"kw-2\">&amp;</span>DirEntry)) -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">if </span>dir.is_dir() {\n        <span class=\"kw\">for </span>entry <span class=\"kw\">in </span>fs::read_dir(dir)<span class=\"question-mark\">? </span>{\n            <span class=\"kw\">let </span>entry = entry<span class=\"question-mark\">?</span>;\n            <span class=\"kw\">let </span>path = entry.path();\n            <span class=\"kw\">if </span>path.is_dir() {\n                visit_dirs(<span class=\"kw-2\">&amp;</span>path, cb)<span class=\"question-mark\">?</span>;\n            } <span class=\"kw\">else </span>{\n                cb(<span class=\"kw-2\">&amp;</span>entry);\n            }\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::fs::%7Bself,+DirEntry%7D;%0A++++use+std::path::Path;%0A++++%0A++++//+one+possible+implementation+of+walking+a+directory+only+visiting+files%0A++++fn+visit_dirs(dir:+%26Path,+cb:+%26dyn+Fn(%26DirEntry))+-%3E+io::Result%3C()%3E+%7B%0A++++++++if+dir.is_dir()+%7B%0A++++++++++++for+entry+in+fs::read_dir(dir)?+%7B%0A++++++++++++++++let+entry+=+entry?;%0A++++++++++++++++let+path+=+entry.path();%0A++++++++++++++++if+path.is_dir()+%7B%0A++++++++++++++++++++visit_dirs(%26path,+cb)?;%0A++++++++++++++++%7D+else+%7B%0A++++++++++++++++++++cb(%26entry);%0A++++++++++++++++%7D%0A++++++++++++%7D%0A++++++++%7D%0A++++++++Ok(())%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{fs, io};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>entries = fs::read_dir(<span class=\"string\">\".\"</span>)<span class=\"question-mark\">?\n        </span>.map(|res| res.map(|e| e.path()))\n        .collect::&lt;<span class=\"prelude-ty\">Result</span>&lt;Vec&lt;<span class=\"kw\">_</span>&gt;, io::Error&gt;&gt;()<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// The order in which `read_dir` returns entries is not guaranteed. If reproducible\n    // ordering is required the entries should be explicitly sorted.\n\n    </span>entries.sort();\n\n    <span class=\"comment\">// The entries have now been sorted by their path.\n\n    </span><span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7Bfs,+io%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+entries+=+fs::read_dir(%22.%22)?%0A++++++++.map(%7Cres%7C+res.map(%7Ce%7C+e.path()))%0A++++++++.collect::%3CResult%3CVec%3C_%3E,+io::Error%3E%3E()?;%0A%0A++++//+The+order+in+which+%60read_dir%60+returns+entries+is+not+guaranteed.+If+reproducible%0A++++//+ordering+is+required+the+entries+should+be+explicitly+sorted.%0A%0A++++entries.sort();%0A%0A++++//+The+entries+have+now+been+sorted+by+their+path.%0A%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:13.914Z"
}