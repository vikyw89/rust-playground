{
	"title": "LinkedList in std::collections::linked_list - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/linked_list/struct.LinkedList.html",
	"markdown": "# LinkedList in std::collections::linked\\_list - Rust\n\n```\npub struct LinkedList<T, A = Global>where\n    A: Allocator,{ /* private fields */ }\n```\n\nExpand description\n\nA doubly-linked list with owned nodes.\n\nThe `LinkedList` allows pushing and popping elements at either end in constant time.\n\nA `LinkedList` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::LinkedList;\n\nlet list = LinkedList::from([1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list+=+LinkedList::from(%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\nNOTE: It is almost always better to use [`Vec`](../../vec/struct.Vec.html \"struct std::vec::Vec\") or [`VecDeque`](../struct.VecDeque.html \"struct std::collections::VecDeque\") because array-based containers are generally faster, more memory efficient, and make better use of CPU cache.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#434)[¬ß](#impl-LinkedList%3CT%3E)\n\n1.0.0 (const: 1.39.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#448)\n\nCreates an empty `LinkedList`.\n\n##### [¬ß](#examples)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet list: LinkedList<u32> = LinkedList::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#482)\n\nMoves all elements from `other` to the end of the list.\n\nThis reuses all the nodes from `other` and moves them into `self`. After this operation, `other` becomes empty.\n\nThis operation should compute in _O_(1) time and _O_(1) memory.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list1 = LinkedList::new();\nlist1.push_back('a');\n\nlet mut list2 = LinkedList::new();\nlist2.push_back('b');\nlist2.push_back('c');\n\nlist1.append(&mut list2);\n\nlet mut iter = list1.iter();\nassert_eq!(iter.next(), Some(&'a'));\nassert_eq!(iter.next(), Some(&'b'));\nassert_eq!(iter.next(), Some(&'c'));\nassert!(iter.next().is_none());\n\nassert!(list2.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list1+=+LinkedList::new();%0A++++list1.push_back(%27a%27);%0A++++%0A++++let+mut+list2+=+LinkedList::new();%0A++++list2.push_back(%27b%27);%0A++++list2.push_back(%27c%27);%0A++++%0A++++list1.append(%26mut+list2);%0A++++%0A++++let+mut+iter+=+list1.iter();%0A++++assert_eq!(iter.next(),+Some(%26%27a%27));%0A++++assert_eq!(iter.next(),+Some(%26%27b%27));%0A++++assert_eq!(iter.next(),+Some(%26%27c%27));%0A++++assert!(iter.next().is_none());%0A++++%0A++++assert!(list2.is_empty());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#502)[¬ß](#impl-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#517)\n\nüî¨This is a nightly-only experimental API. (`allocator_api`¬†[#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs an empty `LinkedList<T, A>`.\n\n##### [¬ß](#examples-2)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\nuse std::collections::LinkedList;\n\nlet list: LinkedList<u32, _> = LinkedList::new_in(System);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list:+LinkedList%3Cu32,+_%3E+=+LinkedList::new_in(System);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#541)\n\nProvides a forward iterator.\n\n##### [¬ß](#examples-3)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++let+mut+iter+=+list.iter();%0A++++assert_eq!(iter.next(),+Some(%260));%0A++++assert_eq!(iter.next(),+Some(%261));%0A++++assert_eq!(iter.next(),+Some(%262));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#570)\n\nProvides a forward iterator with mutable references.\n\n##### [¬ß](#examples-4)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nfor element in list.iter_mut() {\n    *element += 10;\n}\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&10));\nassert_eq!(iter.next(), Some(&11));\nassert_eq!(iter.next(), Some(&12));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++for+element+in+list.iter_mut()+%7B%0A++++++++*element+%2B=+10;%0A++++%7D%0A++++%0A++++let+mut+iter+=+list.iter();%0A++++assert_eq!(iter.next(),+Some(%2610));%0A++++assert_eq!(iter.next(),+Some(%2611));%0A++++assert_eq!(iter.next(),+Some(%2612));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#580)\n\nüî¨This is a nightly-only experimental API. (`linked_list_cursors`¬†[#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a cursor at the front element.\n\nThe cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#590)\n\nüî¨This is a nightly-only experimental API. (`linked_list_cursors`¬†[#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a cursor with editing operations at the front element.\n\nThe cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#600)\n\nüî¨This is a nightly-only experimental API. (`linked_list_cursors`¬†[#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a cursor at the back element.\n\nThe cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#610)\n\nüî¨This is a nightly-only experimental API. (`linked_list_cursors`¬†[#58533](https://github.com/rust-lang/rust/issues/58533))\n\nProvides a cursor with editing operations at the back element.\n\nThe cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#632)\n\nReturns `true` if the `LinkedList` is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-5)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert!(dl.is_empty());\n\ndl.push_front(\"foo\");\nassert!(!dl.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert!(dl.is_empty());%0A++++%0A++++dl.push_front(%22foo%22);%0A++++assert!(!dl.is_empty());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#660)\n\nReturns the length of the `LinkedList`.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-6)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.len(), 1);\n\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\n\ndl.push_back(3);\nassert_eq!(dl.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++assert_eq!(dl.len(),+1);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.len(),+2);%0A++++%0A++++dl.push_back(3);%0A++++assert_eq!(dl.len(),+3);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#686)\n\nRemoves all elements from the `LinkedList`.\n\nThis operation should compute in _O_(_n_) time.\n\n##### [¬ß](#examples-7)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\nassert_eq!(dl.front(), Some(&1));\n\ndl.clear();\nassert_eq!(dl.len(), 0);\nassert_eq!(dl.front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++dl.push_front(1);%0A++++assert_eq!(dl.len(),+2);%0A++++assert_eq!(dl.front(),+Some(%261));%0A++++%0A++++dl.clear();%0A++++assert_eq!(dl.len(),+0);%0A++++assert_eq!(dl.front(),+None);%0A%7D&edition=2021)\n\n1.12.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#718-720)\n\nReturns `true` if the `LinkedList` contains an element equal to the given value.\n\nThis operation should compute linearly in _O_(_n_) time.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nassert_eq!(list.contains(&0), true);\nassert_eq!(list.contains(&10), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++assert_eq!(list.contains(%260),+true);%0A++++assert_eq!(list.contains(%2610),+false);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#745)\n\nProvides a reference to the front element, or `None` if the list is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-9)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.front(),+None);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front(),+Some(%261));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#774)\n\nProvides a mutable reference to the front element, or `None` if the list is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-10)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n\nmatch dl.front_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.front(), Some(&5));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.front(),+None);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front(),+Some(%261));%0A++++%0A++++match+dl.front_mut()+%7B%0A++++++++None+=%3E+%7B%7D,%0A++++++++Some(x)+=%3E+*x+=+5,%0A++++%7D%0A++++assert_eq!(dl.front(),+Some(%265));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#797)\n\nProvides a reference to the back element, or `None` if the list is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-11)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.back(),+None);%0A++++%0A++++dl.push_back(1);%0A++++assert_eq!(dl.back(),+Some(%261));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#825)\n\nProvides a mutable reference to the back element, or `None` if the list is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-12)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n\nmatch dl.back_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.back(), Some(&5));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.back(),+None);%0A++++%0A++++dl.push_back(1);%0A++++assert_eq!(dl.back(),+Some(%261));%0A++++%0A++++match+dl.back_mut()+%7B%0A++++++++None+=%3E+%7B%7D,%0A++++++++Some(x)+=%3E+*x+=+5,%0A++++%7D%0A++++assert_eq!(dl.back(),+Some(%265));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#847)\n\nAdds an element first in the list.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-13)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.front().unwrap(), &2);\n\ndl.push_front(1);\nassert_eq!(dl.front().unwrap(), &1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++assert_eq!(dl.front().unwrap(),+%262);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front().unwrap(),+%261);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#876)\n\nRemoves the first element and returns it, or `None` if the list is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-14)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_front(), None);\n\nd.push_front(1);\nd.push_front(3);\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++assert_eq!(d.pop_front(),+None);%0A++++%0A++++d.push_front(1);%0A++++d.push_front(3);%0A++++assert_eq!(d.pop_front(),+Some(3));%0A++++assert_eq!(d.pop_front(),+Some(1));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#896)\n\nAppends an element to the back of a list.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-15)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nd.push_back(1);\nd.push_back(3);\nassert_eq!(3, *d.back().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++d.push_back(1);%0A++++d.push_back(3);%0A++++assert_eq!(3,+*d.back().unwrap());%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#922)\n\nRemoves the last element from a list and returns it, or `None` if it is empty.\n\nThis operation should compute in _O_(1) time.\n\n##### [¬ß](#examples-16)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_back(), None);\nd.push_back(1);\nd.push_back(3);\nassert_eq!(d.pop_back(), Some(3));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++assert_eq!(d.pop_back(),+None);%0A++++d.push_back(1);%0A++++d.push_back(3);%0A++++assert_eq!(d.pop_back(),+Some(3));%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#952-954)\n\nSplits the list into two at the given index. Returns everything after the given index, including the index.\n\nThis operation should compute in _O_(_n_) time.\n\n##### [¬ß](#panics)Panics\n\nPanics if `at > len`.\n\n##### [¬ß](#examples-17)Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet mut split = d.split_off(2);\n\nassert_eq!(split.pop_front(), Some(1));\nassert_eq!(split.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++let+mut+split+=+d.split_off(2);%0A++++%0A++++assert_eq!(split.pop_front(),+Some(1));%0A++++assert_eq!(split.pop_front(),+None);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1011)\n\nüî¨This is a nightly-only experimental API. (`linked_list_remove`¬†[#69210](https://github.com/rust-lang/rust/issues/69210))\n\nRemoves the element at the given index and returns it.\n\nThis operation should compute in _O_(_n_) time.\n\n##### [¬ß](#panics-1)Panics\n\nPanics if at >= len\n\n##### [¬ß](#examples-18)Examples\n\n```\n#![feature(linked_list_remove)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nassert_eq!(d.remove(1), 2);\nassert_eq!(d.remove(0), 3);\nassert_eq!(d.remove(0), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_remove)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++assert_eq!(d.remove(1),+2);%0A++++assert_eq!(d.remove(0),+3);%0A++++assert_eq!(d.remove(0),+1);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1077-1079)\n\nüî¨This is a nightly-only experimental API. (`linked_list_retain`¬†[#114135](https://github.com/rust-lang/rust/issues/114135))\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [¬ß](#examples-19)Examples\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nd.retain(|&x| x % 2 == 0);\n\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++d.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&version=nightly&edition=2021)\n\nBecause the elements are visited exactly once in the original order, external state may be used to decide which elements to keep.\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet keep = [false, true, false];\nlet mut iter = keep.iter();\nd.retain(|_| *iter.next().unwrap());\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++let+keep+=+%5Bfalse,+true,+false%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++d.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1112-1114)\n\nüî¨This is a nightly-only experimental API. (`linked_list_retain`¬†[#114135](https://github.com/rust-lang/rust/issues/114135))\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [¬ß](#examples-20)Examples\n\n```\n#![feature(linked_list_retain)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nd.retain_mut(|x| if *x % 2 == 0 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++d.retain_mut(%7Cx%7C+if+*x+%25+2+==+0+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(d.pop_front(),+Some(3));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&version=nightly&edition=2021)\n\nüî¨This is a nightly-only experimental API. (`extract_if`¬†[#43244](https://github.com/rust-lang/rust/issues/43244))\n\nCreates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded. If the closure returns false, the element will remain in the list and will not be yielded by the iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use `extract_if().for_each(drop)` if you do not need the returned iterator.\n\nNote that `extract_if` lets you mutate every element in the filter closure, regardless of whether you choose to keep or remove it.\n\n##### [¬ß](#examples-21)Examples\n\nSplitting a list into evens and odds, reusing the original list:\n\n```\n#![feature(extract_if)]\nuse std::collections::LinkedList;\n\nlet mut numbers: LinkedList<u32> = LinkedList::new();\nnumbers.extend(&[1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15]);\n\nlet evens = numbers.extract_if(|x| *x % 2 == 0).collect::<LinkedList<_>>();\nlet odds = numbers;\n\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![2, 4, 6, 8, 14]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+numbers:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++numbers.extend(%26%5B1,+2,+3,+4,+5,+6,+8,+9,+11,+13,+14,+15%5D);%0A++++%0A++++let+evens+=+numbers.extract_if(%7Cx%7C+*x+%25+2+==+0).collect::%3CLinkedList%3C_%3E%3E();%0A++++let+odds+=+numbers;%0A++++%0A++++assert_eq!(evens.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B2,+4,+6,+8,+14%5D);%0A++++assert_eq!(odds.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+3,+5,+9,+11,+13,+15%5D);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2122)[¬ß](#impl-Clone-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2135)[¬ß](#method.clone_from)\n\nOverwrites the contents of `self` with a clone of the contents of `source`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids reallocation of the nodes of the linked list. Additionally, if the element type `T` overrides `clone_from()`, this will reuse the resources of `self`‚Äôs elements as well.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2123)[¬ß](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2150)[¬ß](#impl-Debug-for-LinkedList%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#426)[¬ß](#impl-Default-for-LinkedList%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#429)[¬ß](#method.default)\n\nCreates an empty `LinkedList<T>`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1170)[¬ß](#impl-Drop-for-LinkedList%3CT,+A%3E)\n\n1.2.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2081)[¬ß](#impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2082)[¬ß](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2087)[¬ß](#method.extend_one-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[¬ß](#method.extend_reserve-1)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2057)[¬ß](#impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2058)[¬ß](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2063)[¬ß](#method.extend_one)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[¬ß](#method.extend_reserve)\n\nüî¨This is a nightly-only experimental API. (`extend_one`¬†[#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2167)[¬ß](#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2177)[¬ß](#method.from)\n\nConverts a `[T; N]` into a `LinkedList<T>`.\n\n```\nuse std::collections::LinkedList;\n\nlet list1 = LinkedList::from([1, 2, 3, 4]);\nlet list2: LinkedList<_> = [1, 2, 3, 4].into();\nassert_eq!(list1, list2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list1+=+LinkedList::from(%5B1,+2,+3,+4%5D);%0A++++let+list2:+LinkedList%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(list1,+list2);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2016)[¬ß](#impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2157)[¬ß](#impl-Hash-for-LinkedList%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2037)[¬ß](#impl-IntoIterator-for-%26LinkedList%3CT,+A%3E)\n\n[¬ß](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2041)[¬ß](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2047)[¬ß](#impl-IntoIterator-for-%26mut+LinkedList%3CT,+A%3E)\n\n[¬ß](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2051)[¬ß](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2025)[¬ß](#impl-IntoIterator-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2031)[¬ß](#method.into_iter-1)\n\nConsumes the list into an iterator yielding elements by value.\n\n[¬ß](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[¬ß](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2114)[¬ß](#impl-Ord-for-LinkedList%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2093)[¬ß](#impl-PartialEq-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2094)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2098)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2107)[¬ß](#impl-PartialOrd-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2108)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2104)[¬ß](#impl-Eq-for-LinkedList%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2197)[¬ß](#impl-Send-for-LinkedList%3CT,+A%3E)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2200)[¬ß](#impl-Sync-for-LinkedList%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A doubly-linked list with owned nodes.\"><title>LinkedList in std::collections::linked_list - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">LinkedList</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">LinkedList</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.append\">append</a></li><li><a href=\"#method.back\">back</a></li><li><a href=\"#method.back_mut\">back_mut</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.cursor_back\">cursor_back</a></li><li><a href=\"#method.cursor_back_mut\">cursor_back_mut</a></li><li><a href=\"#method.cursor_front\">cursor_front</a></li><li><a href=\"#method.cursor_front_mut\">cursor_front_mut</a></li><li><a href=\"#method.extract_if\">extract_if</a></li><li><a href=\"#method.front\">front</a></li><li><a href=\"#method.front_mut\">front_mut</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.iter_mut\">iter_mut</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.pop_back\">pop_back</a></li><li><a href=\"#method.pop_front\">pop_front</a></li><li><a href=\"#method.push_back\">push_back</a></li><li><a href=\"#method.push_front\">push_front</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.retain_mut\">retain_mut</a></li><li><a href=\"#method.split_off\">split_off</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-LinkedList%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-LinkedList%3CT,+A%3E\">Debug</a></li><li><a href=\"#impl-Default-for-LinkedList%3CT%3E\">Default</a></li><li><a href=\"#impl-Drop-for-LinkedList%3CT,+A%3E\">Drop</a></li><li><a href=\"#impl-Eq-for-LinkedList%3CT,+A%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E\">Extend&lt;&amp;'a T&gt;</a></li><li><a href=\"#impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E\">Extend&lt;T&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E\">FromIterator&lt;T&gt;</a></li><li><a href=\"#impl-Hash-for-LinkedList%3CT,+A%3E\">Hash</a></li><li><a href=\"#impl-IntoIterator-for-%26LinkedList%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+LinkedList%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-LinkedList%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-LinkedList%3CT,+A%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-LinkedList%3CT,+A%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-LinkedList%3CT,+A%3E\">PartialOrd</a></li><li><a href=\"#impl-Send-for-LinkedList%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-LinkedList%3CT,+A%3E\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-LinkedList%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-LinkedList%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-LinkedList%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-LinkedList%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::linked_list</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.CursorMut.html\">CursorMut</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.LinkedList.html\">LinkedList</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">linked_list</a>::<wbr><a class=\"struct\" href=\"#\">LinkedList</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#51-54\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct LinkedList&lt;T, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A doubly-linked list with owned nodes.</p>\n<p>The <code>LinkedList</code> allows pushing and popping elements at either end\nin constant time.</p>\n<p>A <code>LinkedList</code> with a known list of items can be initialized from an array:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span>list = LinkedList::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list+=+LinkedList::from(%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>NOTE: It is almost always better to use <a href=\"../../vec/struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a> or <a href=\"../struct.VecDeque.html\" title=\"struct std::collections::VecDeque\"><code>VecDeque</code></a> because\narray-based containers are generally faster,\nmore memory efficient, and make better use of CPU cache.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LinkedList%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#434\">source</a><a href=\"#impl-LinkedList%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#448\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>LinkedList</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span>list: LinkedList&lt;u32&gt; = LinkedList::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#482\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all elements from <code>other</code> to the end of the list.</p>\n<p>This reuses all the nodes from <code>other</code> and moves them into <code>self</code>. After\nthis operation, <code>other</code> becomes empty.</p>\n<p>This operation should compute in <em>O</em>(1) time and <em>O</em>(1) memory.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list1 = LinkedList::new();\nlist1.push_back(<span class=\"string\">'a'</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list2 = LinkedList::new();\nlist2.push_back(<span class=\"string\">'b'</span>);\nlist2.push_back(<span class=\"string\">'c'</span>);\n\nlist1.append(<span class=\"kw-2\">&amp;mut </span>list2);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = list1.iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">'b'</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">'c'</span>));\n<span class=\"macro\">assert!</span>(iter.next().is_none());\n\n<span class=\"macro\">assert!</span>(list2.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list1+=+LinkedList::new();%0A++++list1.push_back('a');%0A++++%0A++++let+mut+list2+=+LinkedList::new();%0A++++list2.push_back('b');%0A++++list2.push_back('c');%0A++++%0A++++list1.append(%26mut+list2);%0A++++%0A++++let+mut+iter+=+list1.iter();%0A++++assert_eq!(iter.next(),+Some(%26'a'));%0A++++assert_eq!(iter.next(),+Some(%26'b'));%0A++++assert_eq!(iter.next(),+Some(%26'c'));%0A++++assert!(iter.next().is_none());%0A++++%0A++++assert!(list2.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LinkedList%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#502\">source</a><a href=\"#impl-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#517\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs an empty <code>LinkedList&lt;T, A&gt;</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n<span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span>list: LinkedList&lt;u32, <span class=\"kw\">_</span>&gt; = LinkedList::new_in(System);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list:+LinkedList%3Cu32,+_%3E+=+LinkedList::new_in(System);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#541\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::linked_list::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Provides a forward iterator.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list: LinkedList&lt;u32&gt; = LinkedList::new();\n\nlist.push_back(<span class=\"number\">0</span>);\nlist.push_back(<span class=\"number\">1</span>);\nlist.push_back(<span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = list.iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++let+mut+iter+=+list.iter();%0A++++assert_eq!(iter.next(),+Some(%260));%0A++++assert_eq!(iter.next(),+Some(%261));%0A++++assert_eq!(iter.next(),+Some(%262));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#570\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::linked_list::IterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Provides a forward iterator with mutable references.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list: LinkedList&lt;u32&gt; = LinkedList::new();\n\nlist.push_back(<span class=\"number\">0</span>);\nlist.push_back(<span class=\"number\">1</span>);\nlist.push_back(<span class=\"number\">2</span>);\n\n<span class=\"kw\">for </span>element <span class=\"kw\">in </span>list.iter_mut() {\n    <span class=\"kw-2\">*</span>element += <span class=\"number\">10</span>;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = list.iter();\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">11</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12</span>));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++for+element+in+list.iter_mut()+%7B%0A++++++++*element+%2B=+10;%0A++++%7D%0A++++%0A++++let+mut+iter+=+list.iter();%0A++++assert_eq!(iter.next(),+Some(%2610));%0A++++assert_eq!(iter.next(),+Some(%2611));%0A++++assert_eq!(iter.next(),+Some(%2612));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cursor_front\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#580\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.cursor_front\" class=\"fn\">cursor_front</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::collections::linked_list::Cursor\">Cursor</a>&lt;'_, T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a cursor at the front element.</p>\n<p>The cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cursor_front_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#590\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.cursor_front_mut\" class=\"fn\">cursor_front_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'_, T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a cursor with editing operations at the front element.</p>\n<p>The cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cursor_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#600\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.cursor_back\" class=\"fn\">cursor_back</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::collections::linked_list::Cursor\">Cursor</a>&lt;'_, T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a cursor at the back element.</p>\n<p>The cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cursor_back_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#610\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.cursor_back_mut\" class=\"fn\">cursor_back_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"struct.CursorMut.html\" title=\"struct std::collections::linked_list::CursorMut\">CursorMut</a>&lt;'_, T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/58533\">#58533</a>)</span></div></span></summary><div class=\"docblock\"><p>Provides a cursor with editing operations at the back element.</p>\n<p>The cursor is pointing to the ‚Äúghost‚Äù non-element if the list is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#632\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>LinkedList</code> is empty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n<span class=\"macro\">assert!</span>(dl.is_empty());\n\ndl.push_front(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert!</span>(!dl.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert!(dl.is_empty());%0A++++%0A++++dl.push_front(%22foo%22);%0A++++assert!(!dl.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#660\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of the <code>LinkedList</code>.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n\ndl.push_front(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(dl.len(), <span class=\"number\">1</span>);\n\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.len(), <span class=\"number\">2</span>);\n\ndl.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(dl.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++assert_eq!(dl.len(),+1);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.len(),+2);%0A++++%0A++++dl.push_back(3);%0A++++assert_eq!(dl.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#686\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes all elements from the <code>LinkedList</code>.</p>\n<p>This operation should compute in <em>O</em>(<em>n</em>) time.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n\ndl.push_front(<span class=\"number\">2</span>);\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n\ndl.clear();\n<span class=\"macro\">assert_eq!</span>(dl.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++dl.push_front(1);%0A++++assert_eq!(dl.len(),+2);%0A++++assert_eq!(dl.front(),+Some(%261));%0A++++%0A++++dl.clear();%0A++++assert_eq!(dl.len(),+0);%0A++++assert_eq!(dl.front(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#718-720\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>(&amp;self, x: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the <code>LinkedList</code> contains an element equal to the\ngiven value.</p>\n<p>This operation should compute linearly in <em>O</em>(<em>n</em>) time.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list: LinkedList&lt;u32&gt; = LinkedList::new();\n\nlist.push_back(<span class=\"number\">0</span>);\nlist.push_back(<span class=\"number\">1</span>);\nlist.push_back(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(list.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(list.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+list:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++%0A++++list.push_back(0);%0A++++list.push_back(1);%0A++++list.push_back(2);%0A++++%0A++++assert_eq!(list.contains(%260),+true);%0A++++assert_eq!(list.contains(%2610),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#745\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.front\" class=\"fn\">front</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a reference to the front element, or <code>None</code> if the list is\nempty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">None</span>);\n\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.front(),+None);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front(),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.front_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#774\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.front_mut\" class=\"fn\">front_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a mutable reference to the front element, or <code>None</code> if the list\nis empty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">None</span>);\n\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n\n<span class=\"kw\">match </span>dl.front_mut() {\n    <span class=\"prelude-val\">None </span>=&gt; {},\n    <span class=\"prelude-val\">Some</span>(x) =&gt; <span class=\"kw-2\">*</span>x = <span class=\"number\">5</span>,\n}\n<span class=\"macro\">assert_eq!</span>(dl.front(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.front(),+None);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front(),+Some(%261));%0A++++%0A++++match+dl.front_mut()+%7B%0A++++++++None+=%3E+%7B%7D,%0A++++++++Some(x)+=%3E+*x+=+5,%0A++++%7D%0A++++assert_eq!(dl.front(),+Some(%265));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#797\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.back\" class=\"fn\">back</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a reference to the back element, or <code>None</code> if the list is\nempty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(dl.back(), <span class=\"prelude-val\">None</span>);\n\ndl.push_back(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.back(),+None);%0A++++%0A++++dl.push_back(1);%0A++++assert_eq!(dl.back(),+Some(%261));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.back_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#825\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.back_mut\" class=\"fn\">back_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Provides a mutable reference to the back element, or <code>None</code> if the list\nis empty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(dl.back(), <span class=\"prelude-val\">None</span>);\n\ndl.push_back(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n\n<span class=\"kw\">match </span>dl.back_mut() {\n    <span class=\"prelude-val\">None </span>=&gt; {},\n    <span class=\"prelude-val\">Some</span>(x) =&gt; <span class=\"kw-2\">*</span>x = <span class=\"number\">5</span>,\n}\n<span class=\"macro\">assert_eq!</span>(dl.back(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++assert_eq!(dl.back(),+None);%0A++++%0A++++dl.push_back(1);%0A++++assert_eq!(dl.back(),+Some(%261));%0A++++%0A++++match+dl.back_mut()+%7B%0A++++++++None+=%3E+%7B%7D,%0A++++++++Some(x)+=%3E+*x+=+5,%0A++++%7D%0A++++assert_eq!(dl.back(),+Some(%265));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#847\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push_front\" class=\"fn\">push_front</a>(&amp;mut self, elt: T)</h4></section></summary><div class=\"docblock\"><p>Adds an element first in the list.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dl = LinkedList::new();\n\ndl.push_front(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front().unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n\ndl.push_front(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(dl.front().unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+dl+=+LinkedList::new();%0A++++%0A++++dl.push_front(2);%0A++++assert_eq!(dl.front().unwrap(),+%262);%0A++++%0A++++dl.push_front(1);%0A++++assert_eq!(dl.front().unwrap(),+%261);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_front\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#876\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_front\" class=\"fn\">pop_front</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the first element and returns it, or <code>None</code> if the list is\nempty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++assert_eq!(d.pop_front(),+None);%0A++++%0A++++d.push_front(1);%0A++++d.push_front(3);%0A++++assert_eq!(d.pop_front(),+Some(3));%0A++++assert_eq!(d.pop_front(),+Some(1));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#896\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push_back\" class=\"fn\">push_back</a>(&amp;mut self, elt: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a list.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3</span>, <span class=\"kw-2\">*</span>d.back().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++d.push_back(1);%0A++++d.push_back(3);%0A++++assert_eq!(3,+*d.back().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_back\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#922\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop_back\" class=\"fn\">pop_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a list and returns it, or <code>None</code> if\nit is empty.</p>\n<p>This operation should compute in <em>O</em>(1) time.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n<span class=\"macro\">assert_eq!</span>(d.pop_back(), <span class=\"prelude-val\">None</span>);\nd.push_back(<span class=\"number\">1</span>);\nd.push_back(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(d.pop_back(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++assert_eq!(d.pop_back(),+None);%0A++++d.push_back(1);%0A++++d.push_back(3);%0A++++assert_eq!(d.pop_back(),+Some(3));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#952-954\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.</p>\n<p>This operation should compute in <em>O</em>(<em>n</em>) time.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\nd.push_front(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>split = d.split_off(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(split.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(split.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++let+mut+split+=+d.split_off(2);%0A++++%0A++++assert_eq!(split.pop_front(),+Some(1));%0A++++assert_eq!(split.pop_front(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1011\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>(&amp;mut self, at: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_remove</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69210\">#69210</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the element at the given index and returns it.</p>\n<p>This operation should compute in <em>O</em>(<em>n</em>) time.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>Panics if at &gt;= len</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(linked_list_remove)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\nd.push_front(<span class=\"number\">3</span>);\n\n<span class=\"macro\">assert_eq!</span>(d.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(d.remove(<span class=\"number\">0</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(d.remove(<span class=\"number\">0</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_remove)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++assert_eq!(d.remove(1),+2);%0A++++assert_eq!(d.remove(0),+3);%0A++++assert_eq!(d.remove(0),+1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1077-1079\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_retain</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/114135\">#114135</a>)</span></div></span></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(linked_list_retain)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\nd.push_front(<span class=\"number\">3</span>);\n\nd.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++d.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(linked_list_retain)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\nd.push_front(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nd.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++let+keep+=+%5Bfalse,+true,+false%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++d.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(d.pop_front(),+Some(2));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1112-1114\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>linked_list_retain</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/114135\">#114135</a>)</span></div></span></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(linked_list_retain)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>d = LinkedList::new();\n\nd.push_front(<span class=\"number\">1</span>);\nd.push_front(<span class=\"number\">2</span>);\nd.push_front(<span class=\"number\">3</span>);\n\nd.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(d.pop_front(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(linked_list_retain)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+d+=+LinkedList::new();%0A++++%0A++++d.push_front(1);%0A++++d.push_front(2);%0A++++d.push_front(3);%0A++++%0A++++d.retain_mut(%7Cx%7C+if+*x+%25+2+==+0+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(d.pop_front(),+Some(3));%0A++++assert_eq!(d.pop_front(),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1157-1159\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, filter: F) -&gt; <a class=\"struct\" href=\"struct.ExtractIf.html\" title=\"struct std::collections::linked_list::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf<'_, T, F, A>\">‚ìò</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extract_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43244\">#43244</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element should be removed.</p>\n<p>If the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the list and will not be yielded\nby the iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <code>extract_if().for_each(drop)</code> if you do not need the returned iterator.</p>\n<p>Note that <code>extract_if</code> lets you mutate every element in the filter closure, regardless of\nwhether you choose to keep or remove it.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">¬ß</a>Examples</h5>\n<p>Splitting a list into evens and odds, reusing the original list:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(extract_if)]\n</span><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers: LinkedList&lt;u32&gt; = LinkedList::new();\nnumbers.extend(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>]);\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(|x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;LinkedList&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds.into_iter().collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(extract_if)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+mut+numbers:+LinkedList%3Cu32%3E+=+LinkedList::new();%0A++++numbers.extend(%26%5B1,+2,+3,+4,+5,+6,+8,+9,+11,+13,+14,+15%5D);%0A++++%0A++++let+evens+=+numbers.extract_if(%7Cx%7C+*x+%25+2+==+0).collect::%3CLinkedList%3C_%3E%3E();%0A++++let+odds+=+numbers;%0A++++%0A++++assert_eq!(evens.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B2,+4,+6,+8,+14%5D);%0A++++assert_eq!(odds.into_iter().collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+3,+5,+9,+11,+13,+15%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2122\">source</a></span><a href=\"#impl-Clone-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2135\">source</a><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation of the nodes of the linked list. Additionally,\nif the element type <code>T</code> overrides <code>clone_from()</code>, this will reuse the\nresources of <code>self</code>‚Äôs elements as well.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2123\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2150\">source</a></span><a href=\"#impl-Debug-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2151\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-LinkedList%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#426\">source</a></span><a href=\"#impl-Default-for-LinkedList%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#429\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>LinkedList&lt;T&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1170\">source</a></span><a href=\"#impl-Drop-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1171\">source</a><a href=\"#method.drop\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2081\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2082\">source</a><a href=\"#method.extend-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2087\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2057\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2058\">source</a><a href=\"#method.extend\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2063\">source</a><a href=\"#method.extend_one\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, elem: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2167\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-LinkedList%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2177\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(arr: <a class=\"primitive\" href=\"../../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::LinkedList;\n\n<span class=\"kw\">let </span>list1 = LinkedList::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"kw\">let </span>list2: LinkedList&lt;<span class=\"kw\">_</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>].into();\n<span class=\"macro\">assert_eq!</span>(list1, list2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::LinkedList;%0A++++%0A++++let+list1+=+LinkedList::from(%5B1,+2,+3,+4%5D);%0A++++let+list2:+LinkedList%3C_%3E+=+%5B1,+2,+3,+4%5D.into();%0A++++assert_eq!(list1,+list2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2016\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-LinkedList%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2017\">source</a><a href=\"#method.from_iter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2157\">source</a></span><a href=\"#impl-Hash-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2158\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2037\">source</a></span><a href=\"#impl-IntoIterator-for-%26LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::linked_list::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2041\">source</a><a href=\"#method.into_iter\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::collections::linked_list::Iter\">Iter</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2047\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::linked_list::IterMut\">IterMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2051\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::collections::linked_list::IterMut\">IterMut</a>&lt;'a, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, T>\">‚ìò</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2025\">source</a></span><a href=\"#impl-IntoIterator-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2031\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::linked_list::IntoIter\">IntoIter</a>&lt;T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<T, A>\">‚ìò</a></h4></section></summary><div class=\"docblock\"><p>Consumes the list into an iterator yielding elements by value.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::collections::linked_list::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2114\">source</a></span><a href=\"#impl-Ord-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2116\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2093\">source</a></span><a href=\"#impl-PartialEq-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2094\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2098\">source</a><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2107\">source</a></span><a href=\"#impl-PartialOrd-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2108\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><section id=\"impl-Eq-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2104\">source</a></span><a href=\"#impl-Eq-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Send-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2197\">source</a></span><a href=\"#impl-Send-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2200\">source</a></span><a href=\"#impl-Sync-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-LinkedList%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-LinkedList%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Unpin-for-LinkedList%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-LinkedList%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-LinkedList%3CT,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"../struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"ExtractIf<'_, T, F, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.ExtractIf.html\\\" title=\\\"struct std::collections::linked_list::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, F, A&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.ExtractIf.html\\\" title=\\\"struct std::collections::linked_list::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;mut T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"IntoIter<T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::collections::linked_list::IntoIter\\\">IntoIter</a>&lt;T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IntoIter.html\\\" title=\\\"struct std::collections::linked_list::IntoIter\\\">IntoIter</a>&lt;T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::linked_list::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::linked_list::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"Iter<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::linked_list::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Iter.html\\\" title=\\\"struct std::collections::linked_list::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IterMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::linked_list::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::linked_list::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\",\"IterMut<'a, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::linked_list::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.IterMut.html\\\" title=\\\"struct std::collections::linked_list::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:13.520Z"
}