{
	"title": "Storing Keys with Associated Values in Hash Maps - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html",
	"markdown": "# Storing Keys with Associated Values in Hash Maps\n\nThe last of our common collections is the _hash map_. The type `HashMap<K, V>` stores a mapping of keys of type `K` to values of type `V` using a _hashing function_, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as _hash_, _map_, _object_, _hash table_, _dictionary_, or _associative array_, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type. For example, in a game, you could keep track of each team’s score in a hash map in which each key is a team’s name and the values are each team’s score. Given a team name, you can retrieve its score.\n\nWe’ll go over the basic API of hash maps in this section, but many more goodies are hiding in the functions defined on `HashMap<K, V>` by the standard library. As always, check the standard library documentation for more information.\n\n### [Creating a New Hash Map](#creating-a-new-hash-map)\n\nOne way to create an empty hash map is to use `new` and to add elements with `insert`. In Listing 8-20, we’re keeping track of the scores of two teams whose names are _Blue_ and _Yellow_. The Blue team starts with 10 points, and the Yellow team starts with 50.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n}\n```\n\nListing 8-20: Creating a new hash map and inserting some keys and values\n\nNote that we need to first `use` the `HashMap` from the collections portion of the standard library. Of our three common collections, this one is the least often used, so it’s not included in the features brought into scope automatically in the prelude. Hash maps also have less support from the standard library; there’s no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has keys of type `String` and values of type `i32`. Like vectors, hash maps are homogeneous: all of the keys must have the same type, and all of the values must have the same type.\n\n### [Accessing Values in a Hash Map](#accessing-values-in-a-hash-map)\n\nWe can get a value out of the hash map by providing its key to the `get` method, as shown in Listing 8-21.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    let team_name = String::from(\"Blue\");\n    let score = scores.get(&team_name).copied().unwrap_or(0);\n}\n```\n\nListing 8-21: Accessing the score for the Blue team stored in the hash map\n\nHere, `score` will have the value that’s associated with the Blue team, and the result will be `10`. The `get` method returns an `Option<&V>`; if there’s no value for that key in the hash map, `get` will return `None`. This program handles the `Option` by calling `copied` to get an `Option<i32>` rather than an `Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn’t have an entry for the key.\n\nWe can iterate over each key–value pair in a hash map in a similar manner as we do with vectors, using a `for` loop:\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    for (key, value) in &scores {\n        println!(\"{key}: {value}\");\n    }\n}\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n\n```\n\n### [Hash Maps and Ownership](#hash-maps-and-ownership)\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied into the hash map. For owned values like `String`, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let field_name = String::from(\"Favorite color\");\n    let field_value = String::from(\"Blue\");\n\n    let mut map = HashMap::new();\n    map.insert(field_name, field_value);\n    // field_name and field_value are invalid at this point, try using them and\n    // see what compiler error you get!\n}\n```\n\nListing 8-22: Showing that keys and values are owned by the hash map once they’re inserted\n\nWe aren’t able to use the variables `field_name` and `field_value` after they’ve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won’t be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We’ll talk more about these issues in the [“Validating References with Lifetimes”](about:blank/ch10-03-lifetime-syntax.html#validating-references-with-lifetimes) section in Chapter 10.\n\n### [Updating a Hash Map](#updating-a-hash-map)\n\nAlthough the number of key and value pairs is growable, each unique key can only have one value associated with it at a time (but not vice versa: for example, both the Blue team and the Yellow team could have the value `10` stored in the `scores` hash map).\n\nWhen you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key _doesn’t_ already have a value. Or you could combine the old value and the new value. Let’s look at how to do each of these!\n\n#### [Overwriting a Value](#overwriting-a-value)\n\nIf we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced. Even though the code in Listing 8-23 calls `insert` twice, the hash map will only contain one key–value pair because we’re inserting the value for the Blue team’s key both times.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Blue\"), 25);\n\n    println!(\"{scores:?}\");\n}\n```\n\nListing 8-23: Replacing a value stored with a particular key\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been overwritten.\n\n#### [Adding a Key and Value Only If a Key Isn’t Present](#adding-a-key-and-value-only-if-a-key-isnt-present)\n\nIt’s common to check whether a particular key already exists in the hash map with a value and then to take the following actions: if the key does exist in the hash map, the existing value should remain the way it is; if the key doesn’t exist, insert it and a value for it.\n\nHash maps have a special API for this called `entry` that takes the key you want to check as a parameter. The return value of the `entry` method is an enum called `Entry` that represents a value that might or might not exist. Let’s say we want to check whether the key for the Yellow team has a value associated with it. If it doesn’t, we want to insert the value `50`, and the same for the Blue team. Using the `entry` API, the code looks like Listing 8-24.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n    scores.insert(String::from(\"Blue\"), 10);\n\n    scores.entry(String::from(\"Yellow\")).or_insert(50);\n    scores.entry(String::from(\"Blue\")).or_insert(50);\n\n    println!(\"{scores:?}\");\n}\n```\n\nListing 8-24: Using the `entry` method to only insert if the key does not already have a value\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to the value for the corresponding `Entry` key if that key exists, and if not, it inserts the parameter as the new value for this key and returns a mutable reference to the new value. This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The first call to `entry` will insert the key for the Yellow team with the value `50` because the Yellow team doesn’t have a value already. The second call to `entry` will not change the hash map because the Blue team already has the value `10`.\n\n#### [Updating a Value Based on the Old Value](#updating-a-value-based-on-the-old-value)\n\nAnother common use case for hash maps is to look up a key’s value and then update it based on the old value. For instance, Listing 8-25 shows code that counts how many times each word appears in some text. We use a hash map with the words as keys and increment the value to keep track of how many times we’ve seen that word. If it’s the first time we’ve seen a word, we’ll first insert the value `0`.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let text = \"hello world wonderful world\";\n\n    let mut map = HashMap::new();\n\n    for word in text.split_whitespace() {\n        let count = map.entry(word).or_insert(0);\n        *count += 1;\n    }\n\n    println!(\"{map:?}\");\n}\n```\n\nListing 8-25: Counting occurrences of words using a hash map that stores words and counts\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see the same key–value pairs printed in a different order: recall from the [“Accessing Values in a Hash Map”](#accessing-values-in-a-hash-map) section that iterating over a hash map happens in an arbitrary order.\n\nThe `split_whitespace` method returns an iterator over subslices, separated by whitespace, of the value in `text`. The `or_insert` method returns a mutable reference (`&mut V`) to the value for the specified key. Here, we store that mutable reference in the `count` variable, so in order to assign to that value, we must first dereference `count` using the asterisk (`*`). The mutable reference goes out of scope at the end of the `for` loop, so all of these changes are safe and allowed by the borrowing rules.\n\n### [Hashing Functions](#hashing-functions)\n\nBy default, `HashMap` uses a hashing function called _SipHash_ that can provide resistance to denial-of-service (DoS) attacks involving hash tables[1](#siphash). This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher. A _hasher_ is a type that implements the `BuildHasher` trait. We’ll talk about traits and how to implement them in [Chapter 10](ch10-02-traits.html). You don’t necessarily have to implement your own hasher from scratch; [crates.io](https://crates.io/) has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.\n\n## [Summary](#summary)\n\nVectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:\n\n1.  Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list.\n2.  Convert strings to pig latin. The first consonant of each word is moved to the end of the word and _ay_ is added, so _first_ becomes _irst-fay_. Words that start with a vowel have _hay_ added to the end instead (_apple_ becomes _apple-hay_). Keep in mind the details about UTF-8 encoding!\n3.  Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company; for example, “Add Sally to Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!\n\nWe’re getting into more complex programs in which operations can fail, so it’s a perfect time to discuss error handling. We’ll do that next!",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Storing Keys with Associated Values in Hash Maps - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"storing-keys-with-associated-values-in-hash-maps\"><a class=\"header\" href=\"#storing-keys-with-associated-values-in-hash-maps\">Storing Keys with Associated Values in Hash Maps</a></h2>\n<p>The last of our common collections is the <em>hash map</em>. The type <code class=\"hljs\">HashMap&lt;K, V&gt;</code>\nstores a mapping of keys of type <code class=\"hljs\">K</code> to values of type <code class=\"hljs\">V</code> using a <em>hashing\nfunction</em>, which determines how it places these keys and values into memory.\nMany programming languages support this kind of data structure, but they often\nuse a different name, such as <em>hash</em>, <em>map</em>, <em>object</em>, <em>hash table</em>,\n<em>dictionary</em>, or <em>associative array</em>, just to name a few.</p>\n<p>Hash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team’s score in a hash map in which\neach key is a team’s name and the values are each team’s score. Given a team\nname, you can retrieve its score.</p>\n<p>We’ll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on <code class=\"hljs\">HashMap&lt;K, V&gt;</code> by the standard library.\nAs always, check the standard library documentation for more information.</p>\n<h3 id=\"creating-a-new-hash-map\"><a class=\"header\" href=\"#creating-a-new-hash-map\">Creating a New Hash Map</a></h3>\n<p>One way to create an empty hash map is to use <code class=\"hljs\">new</code> and to add elements with\n<code class=\"hljs\">insert</code>. In Listing 8-20, we’re keeping track of the scores of two teams whose\nnames are <em>Blue</em> and <em>Yellow</em>. The Blue team starts with 10 points, and the\nYellow team starts with 50.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span></p>\n<p>Note that we need to first <code class=\"hljs\">use</code> the <code class=\"hljs\">HashMap</code> from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it’s not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there’s no built-in macro to construct them, for example.</p>\n<p>Just like vectors, hash maps store their data on the heap. This <code class=\"hljs\">HashMap</code> has\nkeys of type <code class=\"hljs\">String</code> and values of type <code class=\"hljs\">i32</code>. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type, and all of the values\nmust have the same type.</p>\n<h3 id=\"accessing-values-in-a-hash-map\"><a class=\"header\" href=\"#accessing-values-in-a-hash-map\">Accessing Values in a Hash Map</a></h3>\n<p>We can get a value out of the hash map by providing its key to the <code class=\"hljs\">get</code>\nmethod, as shown in Listing 8-21.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-keyword\">let</span> team_name = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>);\n    <span class=\"hljs-keyword\">let</span> score = scores.get(&amp;team_name).copied().unwrap_or(<span class=\"hljs-number\">0</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-21: Accessing the score for the Blue team\nstored in the hash map</span></p>\n<p>Here, <code class=\"hljs\">score</code> will have the value that’s associated with the Blue team, and the\nresult will be <code class=\"hljs\">10</code>. The <code class=\"hljs\">get</code> method returns an <code class=\"hljs\">Option&lt;&amp;V&gt;</code>; if there’s no\nvalue for that key in the hash map, <code class=\"hljs\">get</code> will return <code class=\"hljs\">None</code>. This program\nhandles the <code class=\"hljs\">Option</code> by calling <code class=\"hljs\">copied</code> to get an <code class=\"hljs\">Option&lt;i32&gt;</code> rather than an\n<code class=\"hljs\">Option&lt;&amp;i32&gt;</code>, then <code class=\"hljs\">unwrap_or</code> to set <code class=\"hljs\">score</code> to zero if <code class=\"hljs\">scores</code> doesn’t\nhave an entry for the key.</p>\n<p>We can iterate over each key–value pair in a hash map in a similar manner as we\ndo with vectors, using a <code class=\"hljs\">for</code> loop:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> &amp;scores {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{key}: {value}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code will print each pair in an arbitrary order:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Yellow: 50\nBlue: 10\n</code></pre>\n<h3 id=\"hash-maps-and-ownership\"><a class=\"header\" href=\"#hash-maps-and-ownership\">Hash Maps and Ownership</a></h3>\n<p>For types that implement the <code class=\"hljs\">Copy</code> trait, like <code class=\"hljs\">i32</code>, the values are copied\ninto the hash map. For owned values like <code class=\"hljs\">String</code>, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> field_name = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Favorite color\"</span>);\n    <span class=\"hljs-keyword\">let</span> field_value = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> map = HashMap::new();\n    map.insert(field_name, field_value);\n    <span class=\"hljs-comment\">// field_name and field_value are invalid at this point, try using them and</span>\n    <span class=\"hljs-comment\">// see what compiler error you get!</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they’re inserted</span></p>\n<p>We aren’t able to use the variables <code class=\"hljs\">field_name</code> and <code class=\"hljs\">field_value</code> after\nthey’ve been moved into the hash map with the call to <code class=\"hljs\">insert</code>.</p>\n<p>If we insert references to values into the hash map, the values won’t be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We’ll talk more about these issues in\nthe <a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">“Validating References with\nLifetimes”</a><!-- ignore --> section in\nChapter 10.</p>\n<h3 id=\"updating-a-hash-map\"><a class=\"header\" href=\"#updating-a-hash-map\">Updating a Hash Map</a></h3>\n<p>Although the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have the value <code class=\"hljs\">10</code>\nstored in the <code class=\"hljs\">scores</code> hash map).</p>\n<p>When you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey <em>doesn’t</em> already have a value. Or you could combine the old value and the\nnew value. Let’s look at how to do each of these!</p>\n<h4 id=\"overwriting-a-value\"><a class=\"header\" href=\"#overwriting-a-value\">Overwriting a Value</a></h4>\n<p>If we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls <code class=\"hljs\">insert</code> twice, the hash map will\nonly contain one key–value pair because we’re inserting the value for the Blue\nteam’s key both times.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">25</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{scores:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-23: Replacing a value stored with a particular\nkey</span></p>\n<p>This code will print <code class=\"hljs\">{\"Blue\": 25}</code>. The original value of <code class=\"hljs\">10</code> has been\noverwritten.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a></p>\n<h4 id=\"adding-a-key-and-value-only-if-a-key-isnt-present\"><a class=\"header\" href=\"#adding-a-key-and-value-only-if-a-key-isnt-present\">Adding a Key and Value Only If a Key Isn’t Present</a></h4>\n<p>It’s common to check whether a particular key already exists in the hash map\nwith a value and then to take the following actions: if the key does exist in\nthe hash map, the existing value should remain the way it is; if the key\ndoesn’t exist, insert it and a value for it.</p>\n<p>Hash maps have a special API for this called <code class=\"hljs\">entry</code> that takes the key you\nwant to check as a parameter. The return value of the <code class=\"hljs\">entry</code> method is an enum\ncalled <code class=\"hljs\">Entry</code> that represents a value that might or might not exist. Let’s say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn’t, we want to insert the value <code class=\"hljs\">50</code>, and the same for the\nBlue team. Using the <code class=\"hljs\">entry</code> API, the code looks like Listing 8-24.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n\n    scores.entry(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>)).or_insert(<span class=\"hljs-number\">50</span>);\n    scores.entry(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>)).or_insert(<span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{scores:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-24: Using the <code class=\"hljs\">entry</code> method to only insert if\nthe key does not already have a value</span></p>\n<p>The <code class=\"hljs\">or_insert</code> method on <code class=\"hljs\">Entry</code> is defined to return a mutable reference to\nthe value for the corresponding <code class=\"hljs\">Entry</code> key if that key exists, and if not, it\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.</p>\n<p>Running the code in Listing 8-24 will print <code class=\"hljs\">{\"Yellow\": 50, \"Blue\": 10}</code>. The\nfirst call to <code class=\"hljs\">entry</code> will insert the key for the Yellow team with the value\n<code class=\"hljs\">50</code> because the Yellow team doesn’t have a value already. The second call to\n<code class=\"hljs\">entry</code> will not change the hash map because the Blue team already has the\nvalue <code class=\"hljs\">10</code>.</p>\n<h4 id=\"updating-a-value-based-on-the-old-value\"><a class=\"header\" href=\"#updating-a-value-based-on-the-old-value\">Updating a Value Based on the Old Value</a></h4>\n<p>Another common use case for hash maps is to look up a key’s value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we’ve\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\nthe value <code class=\"hljs\">0</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> text = <span class=\"hljs-string\">\"hello world wonderful world\"</span>;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> map = HashMap::new();\n\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> text.split_whitespace() {\n        <span class=\"hljs-keyword\">let</span> count = map.entry(word).or_insert(<span class=\"hljs-number\">0</span>);\n        *count += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{map:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-25: Counting occurrences of words using a hash\nmap that stores words and counts</span></p>\n<p>This code will print <code class=\"hljs\">{\"world\": 2, \"hello\": 1, \"wonderful\": 1}</code>. You might see\nthe same key–value pairs printed in a different order: recall from the\n<a href=\"#accessing-values-in-a-hash-map\">“Accessing Values in a Hash Map”</a><!-- ignore --> section that\niterating over a hash map happens in an arbitrary order.</p>\n<p>The <code class=\"hljs\">split_whitespace</code> method returns an iterator over subslices, separated by\nwhitespace, of the value in <code class=\"hljs\">text</code>. The <code class=\"hljs\">or_insert</code> method returns a mutable\nreference (<code class=\"hljs\">&amp;mut V</code>) to the value for the specified key. Here, we store that\nmutable reference in the <code class=\"hljs\">count</code> variable, so in order to assign to that value,\nwe must first dereference <code class=\"hljs\">count</code> using the asterisk (<code class=\"hljs\">*</code>). The mutable\nreference goes out of scope at the end of the <code class=\"hljs\">for</code> loop, so all of these\nchanges are safe and allowed by the borrowing rules.</p>\n<h3 id=\"hashing-functions\"><a class=\"header\" href=\"#hashing-functions\">Hashing Functions</a></h3>\n<p>By default, <code class=\"hljs\">HashMap</code> uses a hashing function called <em>SipHash</em> that can provide\nresistance to denial-of-service (DoS) attacks involving hash\ntables<sup class=\"footnote-reference\"><a href=\"#siphash\">1</a></sup><!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A <em>hasher</em> is a type that implements the\n<code class=\"hljs\">BuildHasher</code> trait. We’ll talk about traits and how to implement them in\n<a href=\"ch10-02-traits.html\">Chapter 10</a><!-- ignore -->. You don’t necessarily have to implement\nyour own hasher from scratch; <a href=\"https://crates.io/\">crates.io</a><!-- ignore -->\nhas libraries shared by other Rust users that provide hashers implementing many\ncommon hashing algorithms.</p>\n<div class=\"footnote-definition\" id=\"siphash\"><sup class=\"footnote-definition-label\">1</sup>\n<p><a href=\"https://en.wikipedia.org/wiki/SipHash\">https://en.wikipedia.org/wiki/SipHash</a></p>\n</div>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>Vectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:</p>\n<ol>\n<li>Given a list of integers, use a vector and return the median (when sorted,\nthe value in the middle position) and mode (the value that occurs most\noften; a hash map will be helpful here) of the list.</li>\n<li>Convert strings to pig latin. The first consonant of each word is moved to\nthe end of the word and <em>ay</em> is added, so <em>first</em> becomes <em>irst-fay</em>. Words\nthat start with a vowel have <em>hay</em> added to the end instead (<em>apple</em> becomes\n<em>apple-hay</em>). Keep in mind the details about UTF-8 encoding!</li>\n<li>Using a hash map and vectors, create a text interface to allow a user to add\nemployee names to a department in a company; for example, “Add Sally to\nEngineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\npeople in a department or all people in the company by department, sorted\nalphabetically.</li>\n</ol>\n<p>The standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!</p>\n<p>We’re getting into more complex programs in which operations can fail, so it’s\na perfect time to discuss error handling. We’ll do that next!</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch08-02-strings.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch09-00-error-handling.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch08-02-strings.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch09-00-error-handling.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:20.029Z"
}