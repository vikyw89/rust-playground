{
	"title": "SimdConstPtr in std::simd::prelude - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/prelude/trait.SimdConstPtr.html",
	"markdown": "# SimdConstPtr in std::simd::prelude - Rust\n\n```\npub trait SimdConstPtr: Copy + Sealed {\n    type Usize;\n    type Isize;\n    type CastPtr<T>;\n    type MutPtr;\n    type Mask;\n\n    // Required methods\n    fn is_null(self) -> Self::Mask;\n    fn cast<T>(self) -> Self::CastPtr<T>;\n    fn cast_mut(self) -> Self::MutPtr;\n    fn addr(self) -> Self::Usize;\n    fn with_addr(self, addr: Self::Usize) -> Self;\n    fn expose_provenance(self) -> Self::Usize;\n    fn with_exposed_provenance(addr: Self::Usize) -> Self;\n    fn wrapping_offset(self, offset: Self::Isize) -> Self;\n    fn wrapping_add(self, count: Self::Usize) -> Self;\n    fn wrapping_sub(self, count: Self::Usize) -> Self;\n}\n```\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nOperations on SIMD vectors of constant pointers.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#7)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `usize` with the same number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#10)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of `isize` with the same number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#13)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of const pointers with the same number of elements.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#16)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nVector of mutable pointers to the same type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#19)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nMask type used for manipulating this SIMD vector type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#22)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns `true` for each element that is null.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#27)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCasts to a pointer of another type.\n\nEquivalent to calling [`pointer::cast`](about:blank/primitive.pointer.html#method.cast \"method pointer::cast\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#32)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nChanges constness without changing the type.\n\nEquivalent to calling [`pointer::cast_mut`](about:blank/primitive.pointer.html#method.cast_mut \"method pointer::cast_mut\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#43)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nGets the “address” portion of the pointer.\n\nThis method discards pointer semantic metadata, so the result cannot be directly cast into a valid pointer.\n\nThis method semantically discards _provenance_ and _address-space_ information. To properly restore that information, use [`Self::with_addr`](about:blank/trait.SimdConstPtr.html#tymethod.with_addr \"method core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_addr::with_addr\").\n\nEquivalent to calling [`pointer::addr`](about:blank/primitive.pointer.html#method.addr \"method pointer::addr\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#51)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreates a new pointer with the given address.\n\nThis performs the same operation as a cast, but copies the _address-space_ and _provenance_ of `self` to the new pointer.\n\nEquivalent to calling [`pointer::with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#55)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExposes the “provenance” part of the pointer for future use in [`Self::with_exposed_provenance`](about:blank/trait.SimdConstPtr.html#tymethod.with_exposed_provenance \"associated function core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_exposed_provenance::with_exposed_provenance\") and returns the “address” portion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#60)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#65)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic.\n\nEquivalent to calling [`pointer::wrapping_offset`](about:blank/primitive.pointer.html#method.wrapping_offset \"method pointer::wrapping_offset\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#70)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic.\n\nEquivalent to calling [`pointer::wrapping_add`](about:blank/primitive.pointer.html#method.wrapping_add \"method pointer::wrapping_add\") on each element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#75)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCalculates the offset from a pointer using wrapping arithmetic.\n\nEquivalent to calling [`pointer::wrapping_sub`](about:blank/primitive.pointer.html#method.wrapping_sub \"method pointer::wrapping_sub\") on each element.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Operations on SIMD vectors of constant pointers.\"><title>SimdConstPtr in std::simd::prelude - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SimdConstPtr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SimdConstPtr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.CastPtr\">CastPtr</a></li><li><a href=\"#associatedtype.Isize\">Isize</a></li><li><a href=\"#associatedtype.Mask\">Mask</a></li><li><a href=\"#associatedtype.MutPtr\">MutPtr</a></li><li><a href=\"#associatedtype.Usize\">Usize</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.addr\">addr</a></li><li><a href=\"#tymethod.cast\">cast</a></li><li><a href=\"#tymethod.cast_mut\">cast_mut</a></li><li><a href=\"#tymethod.expose_provenance\">expose_provenance</a></li><li><a href=\"#tymethod.is_null\">is_null</a></li><li><a href=\"#tymethod.with_addr\">with_addr</a></li><li><a href=\"#tymethod.with_exposed_provenance\">with_exposed_provenance</a></li><li><a href=\"#tymethod.wrapping_add\">wrapping_add</a></li><li><a href=\"#tymethod.wrapping_offset\">wrapping_offset</a></li><li><a href=\"#tymethod.wrapping_sub\">wrapping_sub</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::simd::prelude</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SimdConstPtr.html\">SimdConstPtr</a></li><li><a href=\"trait.SimdFloat.html\">SimdFloat</a></li><li><a href=\"trait.SimdInt.html\">SimdInt</a></li><li><a href=\"trait.SimdMutPtr.html\">SimdMutPtr</a></li><li><a href=\"trait.SimdOrd.html\">SimdOrd</a></li><li><a href=\"trait.SimdPartialEq.html\">SimdPartialEq</a></li><li><a href=\"trait.SimdPartialOrd.html\">SimdPartialOrd</a></li><li><a href=\"trait.SimdUint.html\">SimdUint</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">simd</a>::<wbr><a href=\"index.html\">prelude</a>::<wbr><a class=\"trait\" href=\"#\">SimdConstPtr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#5\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait SimdConstPtr: <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + Sealed {\n    type <a href=\"#associatedtype.Usize\" class=\"associatedtype\">Usize</a>;\n    type <a href=\"#associatedtype.Isize\" class=\"associatedtype\">Isize</a>;\n    type <a href=\"#associatedtype.CastPtr\" class=\"associatedtype\">CastPtr</a>&lt;T&gt;;\n    type <a href=\"#associatedtype.MutPtr\" class=\"associatedtype\">MutPtr</a>;\n    type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a>;\n\n    // Required methods\n    fn <a href=\"#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdConstPtr::Mask\">Mask</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.CastPtr\" title=\"type std::simd::prelude::SimdConstPtr::CastPtr\">CastPtr</a>&lt;T&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.MutPtr\" title=\"type std::simd::prelude::SimdConstPtr::MutPtr\">MutPtr</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.with_exposed_provenance\" class=\"fn\">with_exposed_provenance</a>(addr: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(self, offset: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Isize\" title=\"type std::simd::prelude::SimdConstPtr::Isize\">Isize</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, count: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, count: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Operations on SIMD vectors of constant pointers.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Usize\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#7\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Usize\" class=\"associatedtype\">Usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Vector of <code>usize</code> with the same number of elements.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Isize\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#10\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Isize\" class=\"associatedtype\">Isize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Vector of <code>isize</code> with the same number of elements.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CastPtr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#13\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CastPtr\" class=\"associatedtype\">CastPtr</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Vector of const pointers with the same number of elements.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.MutPtr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#16\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.MutPtr\" class=\"associatedtype\">MutPtr</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Vector of mutable pointers to the same type.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#19\">source</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Mask type used for manipulating this SIMD vector type.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_null\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#22\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.is_null\" class=\"fn\">is_null</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdConstPtr::Mask\">Mask</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> for each element that is null.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#27\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cast\" class=\"fn\">cast</a>&lt;T&gt;(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.CastPtr\" title=\"type std::simd::prelude::SimdConstPtr::CastPtr\">CastPtr</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.cast\" title=\"method pointer::cast\"><code>pointer::cast</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cast_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#32\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cast_mut\" class=\"fn\">cast_mut</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.MutPtr\" title=\"type std::simd::prelude::SimdConstPtr::MutPtr\">MutPtr</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Changes constness without changing the type.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.cast_mut\" title=\"method pointer::cast_mut\"><code>pointer::cast_mut</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#43\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>This method discards pointer semantic metadata, so the result cannot be\ndirectly cast into a valid pointer.</p>\n<p>This method semantically discards <em>provenance</em> and\n<em>address-space</em> information. To properly restore that information, use <a href=\"trait.SimdConstPtr.html#tymethod.with_addr\" title=\"method core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_addr::with_addr\"><code>Self::with_addr</code></a>.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>pointer::addr</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.with_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#51\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>This performs the same operation as a cast, but copies the <em>address-space</em> and\n<em>provenance</em> of <code>self</code> to the new pointer.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>pointer::with_addr</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.expose_provenance\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#55\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.expose_provenance\" class=\"fn\">expose_provenance</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Exposes the “provenance” part of the pointer for future use in\n<a href=\"trait.SimdConstPtr.html#tymethod.with_exposed_provenance\" title=\"associated function core::core_simd::simd::ptr::const_ptr::SimdConstPtr::with_exposed_provenance::with_exposed_provenance\"><code>Self::with_exposed_provenance</code></a> and returns the “address” portion.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.with_exposed_provenance\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#60\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.with_exposed_provenance\" class=\"fn\">with_exposed_provenance</a>(addr: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Convert an address back to a pointer, picking up a previously “exposed” provenance.</p>\n<p>Equivalent to calling <a href=\"../../ptr/fn.with_exposed_provenance.html\" title=\"fn std::ptr::with_exposed_provenance\"><code>core::ptr::with_exposed_provenance</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wrapping_offset\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#65\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.wrapping_offset\" class=\"fn\">wrapping_offset</a>(self, offset: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Isize\" title=\"type std::simd::prelude::SimdConstPtr::Isize\">Isize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.wrapping_offset\" title=\"method pointer::wrapping_offset\"><code>pointer::wrapping_offset</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wrapping_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#70\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, count: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.wrapping_add\" title=\"method pointer::wrapping_add\"><code>pointer::wrapping_add</code></a> on each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.wrapping_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#75\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, count: Self::<a class=\"associatedtype\" href=\"trait.SimdConstPtr.html#associatedtype.Usize\" title=\"type std::simd::prelude::SimdConstPtr::Usize\">Usize</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer using wrapping arithmetic.</p>\n<p>Equivalent to calling <a href=\"../../primitive.pointer.html#method.wrapping_sub\" title=\"method pointer::wrapping_sub\"><code>pointer::wrapping_sub</code></a> on each element.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html#80-82\">source</a><a href=\"#impl-SimdConstPtr-for-Simd%3C*const+T,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdConstPtr.html\" title=\"trait std::simd::prelude::SimdConstPtr\">SimdConstPtr</a> for <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.pointer.html\">*const T</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Usize-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Usize-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Usize\" class=\"associatedtype\">Usize</a> = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, N&gt;</h4></section><section id=\"associatedtype.Isize-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Isize-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Isize\" class=\"associatedtype\">Isize</a> = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section><section id=\"associatedtype.CastPtr-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CastPtr-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.CastPtr\" class=\"associatedtype\">CastPtr</a>&lt;U&gt; = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.pointer.html\">*const U</a>, N&gt;</h4></section><section id=\"associatedtype.MutPtr-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.MutPtr-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.MutPtr\" class=\"associatedtype\">MutPtr</a> = <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.pointer.html\">*mut T</a>, N&gt;</h4></section><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></div></details></div><script src=\"../../../trait.impl/core/core_simd/simd/ptr/const_ptr/trait.SimdConstPtr.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:36.152Z"
}