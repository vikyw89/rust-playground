{
	"title": "std::slice - Rust",
	"url": "https://doc.rust-lang.org/stable/std/slice/index.html",
	"markdown": "# std::slice - Rust\n\n## Module [std](../index.html)::[slice](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/lib.rs.html#248) ·\n\nExpand description\n\nUtilities for the slice primitive type.\n\n_[See also the slice primitive type](../primitive.slice.html \"primitive slice\")._\n\nMost of the structs in this module are iterator types which can only be created using a certain function. For example, `slice.iter()` yields an [`Iter`](struct.Iter.html \"struct std::slice::Iter\").\n\nA few functions are provided to create a slice from a value reference or from a raw pointer.\n\n-   An iterator over slice in (non-overlapping) chunks separated by a predicate.\n    \n-   An iterator over slice in (non-overlapping) mutable chunks separated by a predicate.\n    \n-   An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the beginning of the slice.\n    \n-   An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the beginning of the slice.\n    \n-   An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice.\n    \n-   An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the beginning of the slice.\n    \n-   An iterator over the escaped version of a byte slice.\n    \n-   Immutable slice iterator\n    \n-   Mutable slice iterator.\n    \n-   An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the end of the slice.\n    \n-   An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time), starting at the end of the slice.\n    \n-   An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the end of the slice.\n    \n-   An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time), starting at the end of the slice.\n    \n-   An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.\n    \n-   An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.\n    \n-   An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.\n    \n-   An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.\n    \n-   An iterator over subslices separated by elements that match a predicate function.\n    \n-   An iterator over subslices separated by elements that match a predicate function. Unlike `Split`, it contains the matched part as a terminator of the subslice.\n    \n-   An iterator over the mutable subslices of the vector which are separated by elements that match `pred`. Unlike `SplitMut`, it contains the matched parts in the ends of the subslices.\n    \n-   An iterator over the mutable subslices of the vector which are separated by elements that match `pred`.\n    \n-   An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.\n    \n-   An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.\n    \n-   An iterator over overlapping subslices of length `size`.\n    \n-   An iterator over a slice in (non-overlapping) chunks (`N` elements at a time), starting at the beginning of the slice.\n    \n-   An iterator over a slice in (non-overlapping) mutable chunks (`N` elements at a time), starting at the beginning of the slice.\n    \n-   A windowed iterator over a slice in overlapping chunks (`N` elements at a time), starting at the beginning of the slice\n    \n\n-   A helper trait used for indexing operations.\n    \n\n-   Converts a reference to T into a slice of length 1 (without copying).\n    \n-   Forms a slice from a pointer and a length.\n    \n-   Performs the same functionality as [`from_raw_parts`](fn.from_raw_parts.html \"fn std::slice::from_raw_parts\"), except that a mutable slice is returned.\n    \n-   Converts a reference to T into a slice of length 1 (without copying).\n    \n-   Forms a mutable slice from a pointer range.\n    \n-   Forms a slice from a pointer range.\n    \n-   Performs bounds-checking of a range.\n    \n-   Performs bounds-checking of a range without panicking.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Utilities for the slice primitive type.\"><title>std::slice - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module slice</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module slice</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">slice</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/lib.rs.html#248\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Utilities for the slice primitive type.</p>\n<p><em><a href=\"../primitive.slice.html\" title=\"primitive slice\">See also the slice primitive type</a>.</em></p>\n<p>Most of the structs in this module are iterator types which can only be created\nusing a certain function. For example, <code>slice.iter()</code> yields an <a href=\"struct.Iter.html\" title=\"struct std::slice::Iter\"><code>Iter</code></a>.</p>\n<p>A few functions are provided to create a slice from a value reference\nor from a raw pointer.</p>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ChunkBy.html\" title=\"struct std::slice::ChunkBy\">ChunkBy</a></div><div class=\"desc docblock-short\">An iterator over slice in (non-overlapping) chunks separated by a predicate.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ChunkByMut.html\" title=\"struct std::slice::ChunkByMut\">ChunkByMut</a></div><div class=\"desc docblock-short\">An iterator over slice in (non-overlapping) mutable chunks separated\nby a predicate.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Chunks.html\" title=\"struct std::slice::Chunks\">Chunks</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) chunks (<code>chunk_size</code> elements at a\ntime), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ChunksExact.html\" title=\"struct std::slice::ChunksExact\">ChunksExact</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) chunks (<code>chunk_size</code> elements at a\ntime), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ChunksExactMut.html\" title=\"struct std::slice::ChunksExactMut\">ChunksExactMut</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) mutable chunks (<code>chunk_size</code>\nelements at a time), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ChunksMut.html\" title=\"struct std::slice::ChunksMut\">ChunksMut</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) mutable chunks (<code>chunk_size</code>\nelements at a time), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.EscapeAscii.html\" title=\"struct std::slice::EscapeAscii\">EscapeAscii</a></div><div class=\"desc docblock-short\">An iterator over the escaped version of a byte slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a></div><div class=\"desc docblock-short\">Immutable slice iterator</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a></div><div class=\"desc docblock-short\">Mutable slice iterator.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RChunks.html\" title=\"struct std::slice::RChunks\">RChunks</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) chunks (<code>chunk_size</code> elements at a\ntime), starting at the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RChunksExact.html\" title=\"struct std::slice::RChunksExact\">RChunksExact</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) chunks (<code>chunk_size</code> elements at a\ntime), starting at the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RChunksExactMut.html\" title=\"struct std::slice::RChunksExactMut\">RChunksExactMut</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) mutable chunks (<code>chunk_size</code>\nelements at a time), starting at the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RChunksMut.html\" title=\"struct std::slice::RChunksMut\">RChunksMut</a></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) mutable chunks (<code>chunk_size</code>\nelements at a time), starting at the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RSplit.html\" title=\"struct std::slice::RSplit\">RSplit</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a predicate\nfunction, starting from the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RSplitMut.html\" title=\"struct std::slice::RSplitMut\">RSplitMut</a></div><div class=\"desc docblock-short\">An iterator over the subslices of the vector which are separated\nby elements that match <code>pred</code>, starting from the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RSplitN.html\" title=\"struct std::slice::RSplitN\">RSplitN</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.RSplitNMut.html\" title=\"struct std::slice::RSplitNMut\">RSplitNMut</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Split.html\" title=\"struct std::slice::Split\">Split</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a predicate\nfunction.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SplitInclusive.html\" title=\"struct std::slice::SplitInclusive\">SplitInclusive</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a predicate\nfunction. Unlike <code>Split</code>, it contains the matched part as a terminator\nof the subslice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SplitInclusiveMut.html\" title=\"struct std::slice::SplitInclusiveMut\">SplitInclusiveMut</a></div><div class=\"desc docblock-short\">An iterator over the mutable subslices of the vector which are separated\nby elements that match <code>pred</code>. Unlike <code>SplitMut</code>, it contains the matched\nparts in the ends of the subslices.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SplitMut.html\" title=\"struct std::slice::SplitMut\">SplitMut</a></div><div class=\"desc docblock-short\">An iterator over the mutable subslices of the vector which are separated\nby elements that match <code>pred</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SplitN.html\" title=\"struct std::slice::SplitN\">SplitN</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.SplitNMut.html\" title=\"struct std::slice::SplitNMut\">SplitNMut</a></div><div class=\"desc docblock-short\">An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Windows.html\" title=\"struct std::slice::Windows\">Windows</a></div><div class=\"desc docblock-short\">An iterator over overlapping subslices of length <code>size</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ArrayChunks.html\" title=\"struct std::slice::ArrayChunks\">ArrayChunks</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) chunks (<code>N</code> elements at a\ntime), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ArrayChunksMut.html\" title=\"struct std::slice::ArrayChunksMut\">ArrayChunksMut</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">An iterator over a slice in (non-overlapping) mutable chunks (<code>N</code> elements\nat a time), starting at the beginning of the slice.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.ArrayWindows.html\" title=\"struct std::slice::ArrayWindows\">ArrayWindows</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A windowed iterator over a slice in overlapping chunks (<code>N</code> elements at a\ntime), starting at the beginning of the slice</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a></div><div class=\"desc docblock-short\">A helper trait used for indexing operations.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Concat.html\" title=\"trait std::slice::Concat\">Concat</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Helper trait for <a href=\"../primitive.slice.html#method.concat\" title=\"method slice::concat\"><code>[T]::concat</code></a>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.Join.html\" title=\"trait std::slice::Join\">Join</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Helper trait for <a href=\"../primitive.slice.html#method.join\" title=\"method slice::join\"><code>[T]::join</code></a></div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_mut.html\" title=\"fn std::slice::from_mut\">from_mut</a></div><div class=\"desc docblock-short\">Converts a reference to T into a slice of length 1 (without copying).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\">from_raw_parts</a><sup title=\"unsafe function\">⚠</sup></div><div class=\"desc docblock-short\">Forms a slice from a pointer and a length.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_raw_parts_mut.html\" title=\"fn std::slice::from_raw_parts_mut\">from_raw_parts_mut</a><sup title=\"unsafe function\">⚠</sup></div><div class=\"desc docblock-short\">Performs the same functionality as <a href=\"fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>from_raw_parts</code></a>, except that a\nmutable slice is returned.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_ref.html\" title=\"fn std::slice::from_ref\">from_ref</a></div><div class=\"desc docblock-short\">Converts a reference to T into a slice of length 1 (without copying).</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_mut_ptr_range.html\" title=\"fn std::slice::from_mut_ptr_range\">from_mut_ptr_range</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Forms a mutable slice from a pointer range.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.from_ptr_range.html\" title=\"fn std::slice::from_ptr_range\">from_ptr_range</a><sup title=\"unsafe function\">⚠</sup><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Forms a slice from a pointer range.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.range.html\" title=\"fn std::slice::range\">range</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Performs bounds-checking of a range.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.try_range.html\" title=\"fn std::slice::try_range\">try_range</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Performs bounds-checking of a range without panicking.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:07.255Z"
}