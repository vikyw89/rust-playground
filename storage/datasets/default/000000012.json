{
	"title": "Data Types - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch03-02-data-types.html",
	"markdown": "# Data Types - The Rust Programming Language\n\nEvery value in Rust is of a certain _data type_, which tells Rust what kind of data is being specified so it knows how to work with that data. We‚Äôll look at two data type subsets: scalar and compound.\n\nKeep in mind that Rust is a _statically typed_ language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a `String` to a numeric type using `parse` in the [‚ÄúComparing the Guess to the Secret Number‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) section in Chapter 2, we must add a type annotation, like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n}\n```\n\nIf we don‚Äôt add the `: u32` type annotation shown in the preceding code, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:\n\n```console\n$ cargo build\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0284]: type annotations needed\n --> src/main.rs:2:9\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^        ----- type must be known at this point\n  |\n  = note: cannot satisfy `<_ as FromStr>::Err == _`\nhelp: consider giving `guess` an explicit type\n  |\n2 |     let guess: /* Type */ = \"42\".parse().expect(\"Not a number!\");\n  |              ++++++++++++\n\nFor more information about this error, try `rustc --explain E0284`.\nerror: could not compile `no_type_annotations` (bin \"no_type_annotations\") due to 1 previous error\n\n```\n\nYou‚Äôll see different type annotations for other data types.\n\n### [Scalar Types](#scalar-types)\n\nA _scalar_ type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let‚Äôs jump into how they work in Rust.\n\n#### [Integer Types](#integer-types)\n\nAn _integer_ is a number without a fractional component. We used one integer type in Chapter 2, the `u32` type. This type declaration indicates that the value it‚Äôs associated with should be an unsigned integer (signed integer types start with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. We can use any of these variants to declare the type of an integer value.\n\nTable 3-1: Integer Types in Rust\n\n| Length | Signed | Unsigned |\n| --- | --- | --- |\n| 8-bit | `i8` | `u8` |\n| 16-bit | `i16` | `u16` |\n| 32-bit | `i32` | `u32` |\n| 64-bit | `i64` | `u64` |\n| 128-bit | `i128` | `u128` |\n| arch | `isize` | `usize` |\n\nEach variant can be either signed or unsigned and has an explicit size. _Signed_ and _unsigned_ refer to whether it‚Äôs possible for the number to be negative‚Äîin other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It‚Äôs like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign. Signed numbers are stored using [two‚Äôs complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\n\nEach signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where _n_ is the number of bits that variant uses. So an `i8` can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a `u8` can store numbers from 0 to 28 - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the architecture of the computer your program is running on, which is denoted in the table as ‚Äúarch‚Äù: 64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit architecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note that number literals that can be multiple numeric types allow a type suffix, such as `57u8`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000`, which will have the same value as if you had specified `1000`.\n\nTable 3-2: Integer Literals in Rust\n\n| Number literals | Example |\n| --- | --- |\n| Decimal | `98_222` |\n| Hex | `0xff` |\n| Octal | `0o77` |\n| Binary | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'` |\n\nSo how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôs defaults are generally good places to start: integer types default to `i32`. The primary situation in which you‚Äôd use `isize` or `usize` is when indexing some sort of collection.\n\n##### [Integer Overflow](#integer-overflow)\n\nLet‚Äôs say you have a variable of type `u8` that can hold values between 0 and 255. If you try to change the variable to a value outside that range, such as 256, _integer overflow_ will occur, which can result in one of two behaviors. When you‚Äôre compiling in debug mode, Rust includes checks for integer overflow that cause your program to _panic_ at runtime if this behavior occurs. Rust uses the term _panicking_ when a program exits with an error; we‚Äôll discuss panics in more depth in the [‚ÄúUnrecoverable Errors with `panic!`‚Äù](ch09-01-unrecoverable-errors-with-panic.html) section in Chapter 9.\n\nWhen you‚Äôre compiling in release mode with the `--release` flag, Rust does _not_ include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs _two‚Äôs complement wrapping_. In short, values greater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum of the values the type can hold. In the case of a `u8`, the value 256 becomes 0, the value 257 becomes 1, and so on. The program won‚Äôt panic, but the variable will have a value that probably isn‚Äôt what you were expecting it to have. Relying on integer overflow‚Äôs wrapping behavior is considered an error.\n\nTo explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:\n\n-   Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n-   Return the `None` value if there is overflow with the `checked_*` methods.\n-   Return the value and a boolean indicating whether there was overflow with the `overflowing_*` methods.\n-   Saturate at the value‚Äôs minimum or maximum values with the `saturating_*` methods.\n\n#### [Floating-Point Types](#floating-point-types)\n\nRust also has two primitive types for _floating-point numbers_, which are numbers with decimal points. Rust‚Äôs floating-point types are `f32` and `f64`, which are 32 bits and 64 bits in size, respectively. The default type is `f64` because on modern CPUs, it‚Äôs roughly the same speed as `f32` but is capable of more precision. All floating-point types are signed.\n\nHere‚Äôs an example that shows floating-point numbers in action:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The `f32` type is a single-precision float, and `f64` has double precision.\n\n#### [Numeric Operations](#numeric-operations)\n\nRust supports the basic mathematical operations you‚Äôd expect for all the number types: addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer. The following code shows how you‚Äôd use each numeric operation in a `let` statement:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n    let truncated = -5 / 3; // Results in -1\n\n    // remainder\n    let remainder = 43 % 5;\n}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. [Appendix B](appendix-02-operators.html) contains a list of all operators that Rust provides.\n\n#### [The Boolean Type](#the-boolean-type)\n\nAs in most other programming languages, a Boolean type in Rust has two possible values: `true` and `false`. Booleans are one byte in size. The Boolean type in Rust is specified using `bool`. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if` expression. We‚Äôll cover how `if` expressions work in Rust in the [‚ÄúControl Flow‚Äù](about:blank/ch03-05-control-flow.html#control-flow) section.\n\n#### [The Character Type](#the-character-type)\n\nRust‚Äôs `char` type is the language‚Äôs most primitive alphabetic type. Here are some examples of declaring `char` values:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let c = 'z';\n    let z: char = '‚Ñ§'; // with explicit type annotation\n    let heart_eyed_cat = 'üòª';\n}\n```\n\nNote that we specify `char` literals with single quotes, as opposed to string literals, which use double quotes. Rust‚Äôs `char` type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid `char` values in Rust. Unicode Scalar Values range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human intuition for what a ‚Äúcharacter‚Äù is may not match up with what a `char` is in Rust. We‚Äôll discuss this topic in detail in [‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù](about:blank/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) in Chapter 8.\n\n### [Compound Types](#compound-types)\n\n_Compound types_ can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\n\n#### [The Tuple Type](#the-tuple-type)\n\nA _tuple_ is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don‚Äôt have to be the same. We‚Äôve added optional type annotations in this example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\nThe variable `tup` binds to the entire tuple because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"The value of y is: {y}\");\n}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then uses a pattern with `let` to take `tup` and turn it into three separate variables, `x`, `y`, and `z`. This is called _destructuring_ because it breaks the single tuple into three parts. Finally, the program prints the value of `y`, which is `6.4`.\n\nWe can also access a tuple element directly by using a period (`.`) followed by the index of the value we want to access. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n```\n\nThis program creates the tuple `x` and then accesses each element of the tuple using their respective indices. As with most programming languages, the first index in a tuple is 0.\n\nThe tuple without any values has a special name, _unit_. This value and its corresponding type are both written `()` and represent an empty value or an empty return type. Expressions implicitly return the unit value if they don‚Äôt return any other value.\n\n#### [The Array Type](#the-array-type)\n\nAnother way to have a collection of multiple values is with an _array_. Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length.\n\nWe write the values in an array as a comma-separated list inside square brackets:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n```\n\nArrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in [Chapter 4](about:blank/ch04-01-what-is-ownership.html#the-stack-and-the-heap)) or when you want to ensure you always have a fixed number of elements. An array isn‚Äôt as flexible as the vector type, though. A _vector_ is a similar collection type provided by the standard library that _is_ allowed to grow or shrink in size. If you‚Äôre unsure whether to use an array or a vector, chances are you should use a vector. [Chapter 8](ch08-01-vectors.html) discusses vectors in more detail.\n\nHowever, arrays are more useful when you know the number of elements will not need to change. For example, if you were using the names of the month in a program, you would probably use an array rather than a vector because you know it will always contain 12 elements:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n}\n```\n\nYou write an array‚Äôs type using square brackets with the type of each element, a semicolon, and then the number of elements in the array, like so:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n}\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5` indicates the array contains five elements.\n\nYou can also initialize an array to contain the same value for each element by specifying the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = [3; 5];\n}\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value `3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a more concise way.\n\n##### [Accessing Array Elements](#accessing-array-elements)\n\nAn array is a single chunk of memory of a known, fixed size that can be allocated on the stack. You can access elements of an array using indexing, like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n```\n\nIn this example, the variable named `first` will get the value `1` because that is the value at index `[0]` in the array. The variable named `second` will get the value `2` from index `[1]` in the array.\n\n##### [Invalid Array Element Access](#invalid-array-element-access)\n\nLet‚Äôs see what happens if you try to access an element of an array that is past the end of the array. Say you run this code, similar to the guessing game in Chapter 2, to get an array index from the user:\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\n\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    println!(\"Please enter an array index.\");\n\n    let mut index = String::new();\n\n    io::stdin()\n        .read_line(&mut index)\n        .expect(\"Failed to read line\");\n\n    let index: usize = index\n        .trim()\n        .parse()\n        .expect(\"Index entered was not a number\");\n\n    let element = a[index];\n\n    println!(\"The value of the element at index {index} is: {element}\");\n}\n```\n\nThis code compiles successfully. If you run this code using `cargo run` and enter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding value at that index in the array. If you instead enter a number past the end of the array, such as `10`, you‚Äôll see output like this:\n\n```console\nthread 'main' panicked at src/main.rs:19:19:\nindex out of bounds: the len is 5 but the index is 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThe program resulted in a _runtime_ error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn‚Äôt execute the final `println!` statement. When you attempt to access an element using indexing, Rust will check that the index you‚Äôve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can‚Äôt possibly know what value a user will enter when they run the code later.\n\nThis is an example of Rust‚Äôs memory safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust‚Äôs error handling and how you can write readable, safe code that neither panics nor allows invalid memory access.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Data Types - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library‚Äôs Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and ‚ÄúNightly Rust‚Äù</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"data-types\"><a class=\"header\" href=\"#data-types\">Data Types</a></h2>\n<p>Every value in Rust is of a certain <em>data type</em>, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We‚Äôll look at\ntwo data type subsets: scalar and compound.</p>\n<p>Keep in mind that Rust is a <em>statically typed</em> language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a <code class=\"hljs\">String</code> to a numeric\ntype using <code class=\"hljs\">parse</code> in the <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">‚ÄúComparing the Guess to the Secret\nNumber‚Äù</a><!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-string\">\"42\"</span>.parse().expect(<span class=\"hljs-string\">\"Not a number!\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If we don‚Äôt add the <code class=\"hljs\">: u32</code> type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0284]: type annotations needed\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:9</span>\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^        ----- type must be known at this point\n  |\n  = note: cannot satisfy `&lt;_ as FromStr&gt;::Err == _`\nhelp: consider giving `guess` an explicit type\n  |\n2 |     let guess: /* Type */ = \"42\".parse().expect(\"Not a number!\");\n  |              ++++++++++++\n\nFor more information about this error, try `rustc --explain E0284`.\nerror: could not compile `no_type_annotations` (bin \"no_type_annotations\") due to 1 previous error\n</code></pre>\n<p>You‚Äôll see different type annotations for other data types.</p>\n<h3 id=\"scalar-types\"><a class=\"header\" href=\"#scalar-types\">Scalar Types</a></h3>\n<p>A <em>scalar</em> type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let‚Äôs jump into how they work in Rust.</p>\n<h4 id=\"integer-types\"><a class=\"header\" href=\"#integer-types\">Integer Types</a></h4>\n<p>An <em>integer</em> is a number without a fractional component. We used one integer\ntype in Chapter 2, the <code class=\"hljs\">u32</code> type. This type declaration indicates that the\nvalue it‚Äôs associated with should be an unsigned integer (signed integer types\nstart with <code class=\"hljs\">i</code> instead of <code class=\"hljs\">u</code>) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value.</p>\n<p><span class=\"caption\">Table 3-1: Integer Types in Rust</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Length</th><th>Signed</th><th>Unsigned</th></tr></thead><tbody>\n<tr><td>8-bit</td><td><code class=\"hljs\">i8</code></td><td><code class=\"hljs\">u8</code></td></tr>\n<tr><td>16-bit</td><td><code class=\"hljs\">i16</code></td><td><code class=\"hljs\">u16</code></td></tr>\n<tr><td>32-bit</td><td><code class=\"hljs\">i32</code></td><td><code class=\"hljs\">u32</code></td></tr>\n<tr><td>64-bit</td><td><code class=\"hljs\">i64</code></td><td><code class=\"hljs\">u64</code></td></tr>\n<tr><td>128-bit</td><td><code class=\"hljs\">i128</code></td><td><code class=\"hljs\">u128</code></td></tr>\n<tr><td>arch</td><td><code class=\"hljs\">isize</code></td><td><code class=\"hljs\">usize</code></td></tr>\n</tbody></table>\n</div>\n<p>Each variant can be either signed or unsigned and has an explicit size.\n<em>Signed</em> and <em>unsigned</em> refer to whether it‚Äôs possible for the number to be\nnegative‚Äîin other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It‚Äôs like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign.\nSigned numbers are stored using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two‚Äôs complement</a><!-- ignore\n--> representation.</p>\n<p>Each signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where <em>n</em> is the number of bits that variant uses. So an\n<code class=\"hljs\">i8</code> can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a <code class=\"hljs\">u8</code> can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.</p>\n<p>Additionally, the <code class=\"hljs\">isize</code> and <code class=\"hljs\">usize</code> types depend on the architecture of the\ncomputer your program is running on, which is denoted in the table as ‚Äúarch‚Äù:\n64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit\narchitecture.</p>\n<p>You can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as <code class=\"hljs\">57u8</code>, to designate the type. Number literals can also use <code class=\"hljs\">_</code> as a\nvisual separator to make the number easier to read, such as <code class=\"hljs\">1_000</code>, which will\nhave the same value as if you had specified <code class=\"hljs\">1000</code>.</p>\n<p><span class=\"caption\">Table 3-2: Integer Literals in Rust</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Number literals</th><th>Example</th></tr></thead><tbody>\n<tr><td>Decimal</td><td><code class=\"hljs\">98_222</code></td></tr>\n<tr><td>Hex</td><td><code class=\"hljs\">0xff</code></td></tr>\n<tr><td>Octal</td><td><code class=\"hljs\">0o77</code></td></tr>\n<tr><td>Binary</td><td><code class=\"hljs\">0b1111_0000</code></td></tr>\n<tr><td>Byte (<code class=\"hljs\">u8</code> only)</td><td><code class=\"hljs\">b'A'</code></td></tr>\n</tbody></table>\n</div>\n<p>So how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôs\ndefaults are generally good places to start: integer types default to <code class=\"hljs\">i32</code>.\nThe primary situation in which you‚Äôd use <code class=\"hljs\">isize</code> or <code class=\"hljs\">usize</code> is when indexing\nsome sort of collection.</p>\n<section class=\"note\" aria-role=\"note\">\n<h5 id=\"integer-overflow\"><a class=\"header\" href=\"#integer-overflow\">Integer Overflow</a></h5>\n<p>Let‚Äôs say you have a variable of type <code class=\"hljs\">u8</code> that can hold values between 0 and\n255. If you try to change the variable to a value outside that range, such as\n256, <em>integer overflow</em> will occur, which can result in one of two behaviors.\nWhen you‚Äôre compiling in debug mode, Rust includes checks for integer overflow\nthat cause your program to <em>panic</em> at runtime if this behavior occurs. Rust\nuses the term <em>panicking</em> when a program exits with an error; we‚Äôll discuss\npanics in more depth in the <a href=\"ch09-01-unrecoverable-errors-with-panic.html\">‚ÄúUnrecoverable Errors with\n<code class=\"hljs\">panic!</code>‚Äù</a><!-- ignore --> section in Chapter\n9.</p>\n<p>When you‚Äôre compiling in release mode with the <code class=\"hljs\">--release</code> flag, Rust does\n<em>not</em> include checks for integer overflow that cause panics. Instead, if\noverflow occurs, Rust performs <em>two‚Äôs complement wrapping</em>. In short, values\ngreater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum\nof the values the type can hold. In the case of a <code class=\"hljs\">u8</code>, the value 256 becomes\n0, the value 257 becomes 1, and so on. The program won‚Äôt panic, but the\nvariable will have a value that probably isn‚Äôt what you were expecting it to\nhave. Relying on integer overflow‚Äôs wrapping behavior is considered an error.</p>\n<p>To explicitly handle the possibility of overflow, you can use these families\nof methods provided by the standard library for primitive numeric types:</p>\n<ul>\n<li>Wrap in all modes with the <code class=\"hljs\">wrapping_*</code> methods, such as <code class=\"hljs\">wrapping_add</code>.</li>\n<li>Return the <code class=\"hljs\">None</code> value if there is overflow with the <code class=\"hljs\">checked_*</code> methods.</li>\n<li>Return the value and a boolean indicating whether there was overflow with\nthe <code class=\"hljs\">overflowing_*</code> methods.</li>\n<li>Saturate at the value‚Äôs minimum or maximum values with the <code class=\"hljs\">saturating_*</code>\nmethods.</li>\n</ul>\n</section>\n<h4 id=\"floating-point-types\"><a class=\"header\" href=\"#floating-point-types\">Floating-Point Types</a></h4>\n<p>Rust also has two primitive types for <em>floating-point numbers</em>, which are\nnumbers with decimal points. Rust‚Äôs floating-point types are <code class=\"hljs\">f32</code> and <code class=\"hljs\">f64</code>,\nwhich are 32 bits and 64 bits in size, respectively. The default type is <code class=\"hljs\">f64</code>\nbecause on modern CPUs, it‚Äôs roughly the same speed as <code class=\"hljs\">f32</code> but is capable of\nmore precision. All floating-point types are signed.</p>\n<p>Here‚Äôs an example that shows floating-point numbers in action:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">2.0</span>; <span class=\"hljs-comment\">// f64</span>\n\n    <span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">f32</span> = <span class=\"hljs-number\">3.0</span>; <span class=\"hljs-comment\">// f32</span>\n}</code></pre></pre>\n<p>Floating-point numbers are represented according to the IEEE-754 standard. The\n<code class=\"hljs\">f32</code> type is a single-precision float, and <code class=\"hljs\">f64</code> has double precision.</p>\n<h4 id=\"numeric-operations\"><a class=\"header\" href=\"#numeric-operations\">Numeric Operations</a></h4>\n<p>Rust supports the basic mathematical operations you‚Äôd expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you‚Äôd use each numeric operation in a <code class=\"hljs\">let</code> statement:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// addition</span>\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-comment\">// subtraction</span>\n    <span class=\"hljs-keyword\">let</span> difference = <span class=\"hljs-number\">95.5</span> - <span class=\"hljs-number\">4.3</span>;\n\n    <span class=\"hljs-comment\">// multiplication</span>\n    <span class=\"hljs-keyword\">let</span> product = <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">30</span>;\n\n    <span class=\"hljs-comment\">// division</span>\n    <span class=\"hljs-keyword\">let</span> quotient = <span class=\"hljs-number\">56.7</span> / <span class=\"hljs-number\">32.2</span>;\n    <span class=\"hljs-keyword\">let</span> truncated = -<span class=\"hljs-number\">5</span> / <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// Results in -1</span>\n\n    <span class=\"hljs-comment\">// remainder</span>\n    <span class=\"hljs-keyword\">let</span> remainder = <span class=\"hljs-number\">43</span> % <span class=\"hljs-number\">5</span>;\n}</code></pre></pre>\n<p>Each expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. <a href=\"appendix-02-operators.html\">Appendix\nB</a><!-- ignore --> contains a list of all operators that Rust\nprovides.</p>\n<h4 id=\"the-boolean-type\"><a class=\"header\" href=\"#the-boolean-type\">The Boolean Type</a></h4>\n<p>As in most other programming languages, a Boolean type in Rust has two possible\nvalues: <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code>. Booleans are one byte in size. The Boolean type in\nRust is specified using <code class=\"hljs\">bool</code>. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// with explicit type annotation</span>\n}</code></pre></pre>\n<p>The main way to use Boolean values is through conditionals, such as an <code class=\"hljs\">if</code>\nexpression. We‚Äôll cover how <code class=\"hljs\">if</code> expressions work in Rust in the <a href=\"ch03-05-control-flow.html#control-flow\">‚ÄúControl\nFlow‚Äù</a><!-- ignore --> section.</p>\n<h4 id=\"the-character-type\"><a class=\"header\" href=\"#the-character-type\">The Character Type</a></h4>\n<p>Rust‚Äôs <code class=\"hljs\">char</code> type is the language‚Äôs most primitive alphabetic type. Here are\nsome examples of declaring <code class=\"hljs\">char</code> values:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-string\">'z'</span>;\n    <span class=\"hljs-keyword\">let</span> z: <span class=\"hljs-built_in\">char</span> = <span class=\"hljs-string\">'‚Ñ§'</span>; <span class=\"hljs-comment\">// with explicit type annotation</span>\n    <span class=\"hljs-keyword\">let</span> heart_eyed_cat = 'üòª';\n}</code></pre></pre>\n<p>Note that we specify <code class=\"hljs\">char</code> literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust‚Äôs <code class=\"hljs\">char</code> type is four bytes in size and\nrepresents a Unicode Scalar Value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid <code class=\"hljs\">char</code> values in Rust. Unicode Scalar\nValues range from <code class=\"hljs\">U+0000</code> to <code class=\"hljs\">U+D7FF</code> and <code class=\"hljs\">U+E000</code> to <code class=\"hljs\">U+10FFFF</code> inclusive.\nHowever, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human\nintuition for what a ‚Äúcharacter‚Äù is may not match up with what a <code class=\"hljs\">char</code> is in\nRust. We‚Äôll discuss this topic in detail in <a href=\"ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\">‚ÄúStoring UTF-8 Encoded Text with\nStrings‚Äù</a><!-- ignore --> in Chapter 8.</p>\n<h3 id=\"compound-types\"><a class=\"header\" href=\"#compound-types\">Compound Types</a></h3>\n<p><em>Compound types</em> can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.</p>\n<h4 id=\"the-tuple-type\"><a class=\"header\" href=\"#the-tuple-type\">The Tuple Type</a></h4>\n<p>A <em>tuple</em> is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size.</p>\n<p>We create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don‚Äôt have to be the same. We‚Äôve added optional\ntype annotations in this example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tup: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">u8</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n}</code></pre></pre>\n<p>The variable <code class=\"hljs\">tup</code> binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tup = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> (x, y, z) = tup;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of y is: {y}\"</span>);\n}</code></pre></pre>\n<p>This program first creates a tuple and binds it to the variable <code class=\"hljs\">tup</code>. It then\nuses a pattern with <code class=\"hljs\">let</code> to take <code class=\"hljs\">tup</code> and turn it into three separate\nvariables, <code class=\"hljs\">x</code>, <code class=\"hljs\">y</code>, and <code class=\"hljs\">z</code>. This is called <em>destructuring</em> because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n<code class=\"hljs\">y</code>, which is <code class=\"hljs\">6.4</code>.</p>\n<p>We can also access a tuple element directly by using a period (<code class=\"hljs\">.</code>) followed by\nthe index of the value we want to access. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">u8</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> five_hundred = x.<span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">let</span> six_point_four = x.<span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">let</span> one = x.<span class=\"hljs-number\">2</span>;\n}</code></pre></pre>\n<p>This program creates the tuple <code class=\"hljs\">x</code> and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0.</p>\n<p>The tuple without any values has a special name, <em>unit</em>. This value and its\ncorresponding type are both written <code class=\"hljs\">()</code> and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don‚Äôt\nreturn any other value.</p>\n<h4 id=\"the-array-type\"><a class=\"header\" href=\"#the-array-type\">The Array Type</a></h4>\n<p>Another way to have a collection of multiple values is with an <em>array</em>. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length.</p>\n<p>We write the values in an array as a comma-separated list inside square\nbrackets:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n}</code></pre></pre>\n<p>Arrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in <a href=\"ch04-01-what-is-ownership.html#the-stack-and-the-heap\">Chapter\n4</a><!-- ignore -->) or when you want to ensure you always have a\nfixed number of elements. An array isn‚Äôt as flexible as the vector type,\nthough. A <em>vector</em> is a similar collection type provided by the standard\nlibrary that <em>is</em> allowed to grow or shrink in size. If you‚Äôre unsure whether\nto use an array or a vector, chances are you should use a vector. <a href=\"ch08-01-vectors.html\">Chapter\n8</a><!-- ignore --> discusses vectors in more detail.</p>\n<p>However, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> months = [<span class=\"hljs-string\">\"January\"</span>, <span class=\"hljs-string\">\"February\"</span>, <span class=\"hljs-string\">\"March\"</span>, <span class=\"hljs-string\">\"April\"</span>, <span class=\"hljs-string\">\"May\"</span>, <span class=\"hljs-string\">\"June\"</span>, <span class=\"hljs-string\">\"July\"</span>,\n              <span class=\"hljs-string\">\"August\"</span>, <span class=\"hljs-string\">\"September\"</span>, <span class=\"hljs-string\">\"October\"</span>, <span class=\"hljs-string\">\"November\"</span>, <span class=\"hljs-string\">\"December\"</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>You write an array‚Äôs type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a: [<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">5</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">i32</code> is the type of each element. After the semicolon, the number <code class=\"hljs\">5</code>\nindicates the array contains five elements.</p>\n<p>You can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">3</span>; <span class=\"hljs-number\">5</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The array named <code class=\"hljs\">a</code> will contain <code class=\"hljs\">5</code> elements that will all be set to the value\n<code class=\"hljs\">3</code> initially. This is the same as writing <code class=\"hljs\">let a = [3, 3, 3, 3, 3];</code> but in a\nmore concise way.</p>\n<h5 id=\"accessing-array-elements\"><a class=\"header\" href=\"#accessing-array-elements\">Accessing Array Elements</a></h5>\n<p>An array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-keyword\">let</span> first = a[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">let</span> second = a[<span class=\"hljs-number\">1</span>];\n}</code></pre></pre>\n<p>In this example, the variable named <code class=\"hljs\">first</code> will get the value <code class=\"hljs\">1</code> because that\nis the value at index <code class=\"hljs\">[0]</code> in the array. The variable named <code class=\"hljs\">second</code> will get\nthe value <code class=\"hljs\">2</code> from index <code class=\"hljs\">[1]</code> in the array.</p>\n<h5 id=\"invalid-array-element-access\"><a class=\"header\" href=\"#invalid-array-element-access\">Invalid Array Element Access</a></h5>\n<p>Let‚Äôs see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore panics hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please enter an array index.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> index = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> index)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> index: <span class=\"hljs-built_in\">usize</span> = index\n        .trim()\n        .parse()\n        .expect(<span class=\"hljs-string\">\"Index entered was not a number\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> element = a[index];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of the element at index {index} is: {element}\"</span>);\n}</code></pre>\n<p>This code compiles successfully. If you run this code using <code class=\"hljs\">cargo run</code> and\nenter <code class=\"hljs\">0</code>, <code class=\"hljs\">1</code>, <code class=\"hljs\">2</code>, <code class=\"hljs\">3</code>, or <code class=\"hljs\">4</code>, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as <code class=\"hljs\">10</code>, you‚Äôll see output like this:</p>\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">thread 'main' panicked at src/main.rs:19:19:\nindex out of bounds: the len is 5 but the index is 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>The program resulted in a <em>runtime</em> error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn‚Äôt execute the final <code class=\"hljs\">println!</code> statement. When you attempt to access an\nelement using indexing, Rust will check that the index you‚Äôve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can‚Äôt possibly know what value a user will enter when they\nrun the code later.</p>\n<p>This is an example of Rust‚Äôs memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust‚Äôs error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch03-01-variables-and-mutability.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch03-03-how-functions-work.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch03-01-variables-and-mutability.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch03-03-how-functions-work.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:12.933Z"
}