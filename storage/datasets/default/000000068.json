{
	"title": "Using Box<T> to Point to Data on the Heap - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch15-01-box.html",
	"markdown": "# Using Box to Point to Data on the Heap\n\nThe most straightforward smart pointer is a _box_, whose type is written `Box<T>`. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter 4 to review the difference between the stack and the heap.\n\nBoxes don’t have performance overhead, other than storing their data on the heap instead of on the stack. But they don’t have many extra capabilities either. You’ll use them most often in these situations:\n\n-   When you have a type whose size can’t be known at compile time and you want to use a value of that type in a context that requires an exact size\n-   When you have a large amount of data and you want to transfer ownership but ensure the data won’t be copied when you do so\n-   When you want to own a value and you care only that it’s a type that implements a particular trait rather than being of a specific type\n\nWe’ll demonstrate the first situation in the [“Enabling Recursive Types with Boxes”](#enabling-recursive-types-with-boxes) section. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a _trait object_, and Chapter 17 devotes an entire section, [“Using Trait Objects That Allow for Values of Different Types,”](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) just to that topic. So what you learn here you’ll apply again in Chapter 17!\n\n### [Using a `Box<T>` to Store Data on the Heap](#using-a-boxt-to-store-data-on-the-heap)\n\nBefore we discuss the heap storage use case for `Box<T>`, we’ll cover the syntax and how to interact with values stored within a `Box<T>`.\n\nListing 15-1 shows how to use a box to store an `i32` value on the heap:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let b = Box::new(5);\n    println!(\"b = {b}\");\n}\n```\n\nListing 15-1: Storing an `i32` value on the heap using a box\n\nWe define the variable `b` to have the value of a `Box` that points to the value `5`, which is allocated on the heap. This program will print `b = 5`; in this case, we can access the data in the box similar to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as `b` does at the end of `main`, it will be deallocated. The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).\n\nPutting a single value on the heap isn’t very useful, so you won’t use boxes by themselves in this way very often. Having values like a single `i32` on the stack, where they’re stored by default, is more appropriate in the majority of situations. Let’s look at a case where boxes allow us to define types that we wouldn’t be allowed to if we didn’t have boxes.\n\n### [Enabling Recursive Types with Boxes](#enabling-recursive-types-with-boxes)\n\nA value of _recursive type_ can have another value of the same type as part of itself. Recursive types pose an issue because at compile time Rust needs to know how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can’t know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.\n\nAs an example of a recursive type, let’s explore the _cons list_. This is a data type commonly found in functional programming languages. The cons list type we’ll define is straightforward except for the recursion; therefore, the concepts in the example we’ll work with will be useful any time you get into more complex situations involving recursive types.\n\n#### [More Information About the Cons List](#more-information-about-the-cons-list)\n\nA _cons list_ is a data structure that comes from the Lisp programming language and its dialects and is made up of nested pairs, and is the Lisp version of a linked list. Its name comes from the `cons` function (short for “construct function”) in Lisp that constructs a new pair from its two arguments. By calling `cons` on a pair consisting of a value and another pair, we can construct cons lists made up of recursive pairs.\n\nFor example, here’s a pseudocode representation of a cons list containing the list 1, 2, 3 with each pair in parentheses:\n\n```text\n(1, (2, (3, Nil)))\n\n```\n\nEach item in a cons list contains two elements: the value of the current item and the next item. The last item in the list contains only a value called `Nil` without a next item. A cons list is produced by recursively calling the `cons` function. The canonical name to denote the base case of the recursion is `Nil`. Note that this is not the same as the “null” or “nil” concept in Chapter 6, which is an invalid or absent value.\n\nThe cons list isn’t a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, `Vec<T>` is a better choice to use. Other, more complex recursive data types _are_ useful in various situations, but by starting with the cons list in this chapter, we can explore how boxes let us define a recursive data type without much distraction.\n\nListing 15-2 contains an enum definition for a cons list. Note that this code won’t compile yet because the `List` type doesn’t have a known size, which we’ll demonstrate.\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, List),\n    Nil,\n}\n\nfn main() {}\n```\n\nListing 15-2: The first attempt at defining an enum to represent a cons list data structure of `i32` values\n\nNote: We’re implementing a cons list that holds only `i32` values for the purposes of this example. We could have implemented it using generics, as we discussed in Chapter 10, to define a cons list type that could store values of any type.\n\nUsing the `List` type to store the list `1, 2, 3` would look like the code in Listing 15-3:\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, List),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n```\n\nListing 15-3: Using the `List` enum to store the list `1, 2, 3`\n\nThe first `Cons` value holds `1` and another `List` value. This `List` value is another `Cons` value that holds `2` and another `List` value. This `List` value is one more `Cons` value that holds `3` and a `List` value, which is finally `Nil`, the non-recursive variant that signals the end of the list.\n\nIf we try to compile the code in Listing 15-3, we get the error shown in Listing 15-4:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0072]: recursive type `List` has infinite size\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^\n2 |     Cons(i32, List),\n  |               ---- recursive without indirection\n  |\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +\n\nerror[E0391]: cycle detected when computing when `List` needs drop\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^\n  |\n  = note: ...which immediately requires computing when `List` needs drop again\n  = note: cycle used when computing whether `List` needs drop\n  = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information\n\nSome errors have detailed explanations: E0072, E0391.\nFor more information about an error, try `rustc --explain E0072`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 2 previous errors\n\n```\n\nListing 15-4: The error we get when attempting to define a recursive enum\n\nThe error shows this type “has infinite size.” The reason is that we’ve defined `List` with a variant that is recursive: it holds another value of itself directly. As a result, Rust can’t figure out how much space it needs to store a `List` value. Let’s break down why we get this error. First, we’ll look at how Rust decides how much space it needs to store a value of a non-recursive type.\n\n#### [Computing the Size of a Non-Recursive Type](#computing-the-size-of-a-non-recursive-type)\n\nRecall the `Message` enum we defined in Listing 6-2 when we discussed enum definitions in Chapter 6:\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {}\n```\n\nTo determine how much space to allocate for a `Message` value, Rust goes through each of the variants to see which variant needs the most space. Rust sees that `Message::Quit` doesn’t need any space, `Message::Move` needs enough space to store two `i32` values, and so forth. Because only one variant will be used, the most space a `Message` value will need is the space it would take to store the largest of its variants.\n\nContrast this with what happens when Rust tries to determine how much space a recursive type like the `List` enum in Listing 15-2 needs. The compiler starts by looking at the `Cons` variant, which holds a value of type `i32` and a value of type `List`. Therefore, `Cons` needs an amount of space equal to the size of an `i32` plus the size of a `List`. To figure out how much memory the `List` type needs, the compiler looks at the variants, starting with the `Cons` variant. The `Cons` variant holds a value of type `i32` and a value of type `List`, and this process continues infinitely, as shown in Figure 15-1.\n\n![An infinite Cons list](img/trpl15-01.svg)\n\nFigure 15-1: An infinite `List` consisting of infinite `Cons` variants\n\n#### [Using `Box<T>` to Get a Recursive Type with a Known Size](#using-boxt-to-get-a-recursive-type-with-a-known-size)\n\nBecause Rust can’t figure out how much space to allocate for recursively defined types, the compiler gives an error with this helpful suggestion:\n\n```text\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +\n\n```\n\nIn this suggestion, “indirection” means that instead of storing a value directly, we should change the data structure to store the value indirectly by storing a pointer to the value instead.\n\nBecause a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>` needs: a pointer’s size doesn’t change based on the amount of data it’s pointing to. This means we can put a `Box<T>` inside the `Cons` variant instead of another `List` value directly. The `Box<T>` will point to the next `List` value that will be on the heap rather than inside the `Cons` variant. Conceptually, we still have a list, created with lists holding other lists, but this implementation is now more like placing the items next to one another rather than inside one another.\n\nWe can change the definition of the `List` enum in Listing 15-2 and the usage of the `List` in Listing 15-3 to the code in Listing 15-5, which will compile:\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));\n}\n```\n\nListing 15-5: Definition of `List` that uses `Box<T>` in order to have a known size\n\nThe `Cons` variant needs the size of an `i32` plus the space to store the box’s pointer data. The `Nil` variant stores no values, so it needs less space than the `Cons` variant. We now know that any `List` value will take up the size of an `i32` plus the size of a box’s pointer data. By using a box, we’ve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a `List` value. Figure 15-2 shows what the `Cons` variant looks like now.\n\n![A finite Cons list](img/trpl15-02.svg)\n\nFigure 15-2: A `List` that is not infinitely sized because `Cons` holds a `Box`\n\nBoxes provide only the indirection and heap allocation; they don’t have any other special capabilities, like those we’ll see with the other smart pointer types. They also don’t have the performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We’ll look at more use cases for boxes in Chapter 17, too.\n\nThe `Box<T>` type is a smart pointer because it implements the `Deref` trait, which allows `Box<T>` values to be treated like references. When a `Box<T>` value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the `Drop` trait implementation. These two traits will be even more important to the functionality provided by the other smart pointer types we’ll discuss in the rest of this chapter. Let’s explore these two traits in more detail.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Using Box&lt;T&gt; to Point to Data on the Heap - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"using-boxt-to-point-to-data-on-the-heap\"><a class=\"header\" href=\"#using-boxt-to-point-to-data-on-the-heap\">Using <code>Box&lt;T&gt;</code> to Point to Data on the Heap</a></h2>\n<p>The most straightforward smart pointer is a <em>box</em>, whose type is written\n<code class=\"hljs\">Box&lt;T&gt;</code>. Boxes allow you to store data on the heap rather than the stack. What\nremains on the stack is the pointer to the heap data. Refer to Chapter 4 to\nreview the difference between the stack and the heap.</p>\n<p>Boxes don’t have performance overhead, other than storing their data on the\nheap instead of on the stack. But they don’t have many extra capabilities\neither. You’ll use them most often in these situations:</p>\n<ul>\n<li>When you have a type whose size can’t be known at compile time and you want\nto use a value of that type in a context that requires an exact size</li>\n<li>When you have a large amount of data and you want to transfer ownership but\nensure the data won’t be copied when you do so</li>\n<li>When you want to own a value and you care only that it’s a type that\nimplements a particular trait rather than being of a specific type</li>\n</ul>\n<p>We’ll demonstrate the first situation in the <a href=\"#enabling-recursive-types-with-boxes\">“Enabling Recursive Types with\nBoxes”</a><!-- ignore --> section. In the\nsecond case, transferring ownership of a large amount of data can take a long\ntime because the data is copied around on the stack. To improve performance in\nthis situation, we can store the large amount of data on the heap in a box.\nThen, only the small amount of pointer data is copied around on the stack,\nwhile the data it references stays in one place on the heap. The third case is\nknown as a <em>trait object</em>, and Chapter 17 devotes an entire section, <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">“Using\nTrait Objects That Allow for Values of Different Types,”</a><!--\nignore --> just to that topic. So what you learn here you’ll apply again in\nChapter 17!</p>\n<h3 id=\"using-a-boxt-to-store-data-on-the-heap\"><a class=\"header\" href=\"#using-a-boxt-to-store-data-on-the-heap\">Using a <code>Box&lt;T&gt;</code> to Store Data on the Heap</a></h3>\n<p>Before we discuss the heap storage use case for <code class=\"hljs\">Box&lt;T&gt;</code>, we’ll cover the\nsyntax and how to interact with values stored within a <code class=\"hljs\">Box&lt;T&gt;</code>.</p>\n<p>Listing 15-1 shows how to use a box to store an <code class=\"hljs\">i32</code> value on the heap:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b = {b}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-1: Storing an <code class=\"hljs\">i32</code> value on the heap using a\nbox</span></p>\n<p>We define the variable <code class=\"hljs\">b</code> to have the value of a <code class=\"hljs\">Box</code> that points to the\nvalue <code class=\"hljs\">5</code>, which is allocated on the heap. This program will print <code class=\"hljs\">b = 5</code>; in\nthis case, we can access the data in the box similar to how we would if this\ndata were on the stack. Just like any owned value, when a box goes out of\nscope, as <code class=\"hljs\">b</code> does at the end of <code class=\"hljs\">main</code>, it will be deallocated. The\ndeallocation happens both for the box (stored on the stack) and the data it\npoints to (stored on the heap).</p>\n<p>Putting a single value on the heap isn’t very useful, so you won’t use boxes by\nthemselves in this way very often. Having values like a single <code class=\"hljs\">i32</code> on the\nstack, where they’re stored by default, is more appropriate in the majority of\nsituations. Let’s look at a case where boxes allow us to define types that we\nwouldn’t be allowed to if we didn’t have boxes.</p>\n<h3 id=\"enabling-recursive-types-with-boxes\"><a class=\"header\" href=\"#enabling-recursive-types-with-boxes\">Enabling Recursive Types with Boxes</a></h3>\n<p>A value of <em>recursive type</em> can have another value of the same type as part of\nitself. Recursive types pose an issue because at compile time Rust needs to\nknow how much space a type takes up. However, the nesting of values of\nrecursive types could theoretically continue infinitely, so Rust can’t know how\nmuch space the value needs. Because boxes have a known size, we can enable\nrecursive types by inserting a box in the recursive type definition.</p>\n<p>As an example of a recursive type, let’s explore the <em>cons list</em>. This is a data\ntype commonly found in functional programming languages. The cons list type\nwe’ll define is straightforward except for the recursion; therefore, the\nconcepts in the example we’ll work with will be useful any time you get into\nmore complex situations involving recursive types.</p>\n<h4 id=\"more-information-about-the-cons-list\"><a class=\"header\" href=\"#more-information-about-the-cons-list\">More Information About the Cons List</a></h4>\n<p>A <em>cons list</em> is a data structure that comes from the Lisp programming language\nand its dialects and is made up of nested pairs, and is the Lisp version of a\nlinked list. Its name comes from the <code class=\"hljs\">cons</code> function (short for “construct\nfunction”) in Lisp that constructs a new pair from its two arguments. By\ncalling <code class=\"hljs\">cons</code> on a pair consisting of a value and another pair, we can\nconstruct cons lists made up of recursive pairs.</p>\n<p>For example, here’s a pseudocode representation of a cons list containing the\nlist 1, 2, 3 with each pair in parentheses:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">(1, (2, (3, Nil)))\n</code></pre>\n<p>Each item in a cons list contains two elements: the value of the current item\nand the next item. The last item in the list contains only a value called <code class=\"hljs\">Nil</code>\nwithout a next item. A cons list is produced by recursively calling the <code class=\"hljs\">cons</code>\nfunction. The canonical name to denote the base case of the recursion is <code class=\"hljs\">Nil</code>.\nNote that this is not the same as the “null” or “nil” concept in Chapter 6,\nwhich is an invalid or absent value.</p>\n<p>The cons list isn’t a commonly used data structure in Rust. Most of the time\nwhen you have a list of items in Rust, <code class=\"hljs\">Vec&lt;T&gt;</code> is a better choice to use.\nOther, more complex recursive data types <em>are</em> useful in various situations,\nbut by starting with the cons list in this chapter, we can explore how boxes\nlet us define a recursive data type without much distraction.</p>\n<p>Listing 15-2 contains an enum definition for a cons list. Note that this code\nwon’t compile yet because the <code class=\"hljs\">List</code> type doesn’t have a known size, which\nwe’ll demonstrate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, List),\n    Nil,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p><span class=\"caption\">Listing 15-2: The first attempt at defining an enum to\nrepresent a cons list data structure of <code class=\"hljs\">i32</code> values</span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: We’re implementing a cons list that holds only <code class=\"hljs\">i32</code> values for the\npurposes of this example. We could have implemented it using generics, as we\ndiscussed in Chapter 10, to define a cons list type that could store values of\nany type.</p>\n</section>\n<p>Using the <code class=\"hljs\">List</code> type to store the list <code class=\"hljs\">1, 2, 3</code> would look like the code in\nListing 15-3:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n</span><span class=\"boring\">    Cons(<span class=\"hljs-built_in\">i32</span>, List),\n</span><span class=\"boring\">    Nil,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = Cons(<span class=\"hljs-number\">1</span>, Cons(<span class=\"hljs-number\">2</span>, Cons(<span class=\"hljs-number\">3</span>, Nil)));\n}</code></pre>\n<p><span class=\"caption\">Listing 15-3: Using the <code class=\"hljs\">List</code> enum to store the list <code class=\"hljs\">1, 2, 3</code></span></p>\n<p>The first <code class=\"hljs\">Cons</code> value holds <code class=\"hljs\">1</code> and another <code class=\"hljs\">List</code> value. This <code class=\"hljs\">List</code> value is\nanother <code class=\"hljs\">Cons</code> value that holds <code class=\"hljs\">2</code> and another <code class=\"hljs\">List</code> value. This <code class=\"hljs\">List</code> value\nis one more <code class=\"hljs\">Cons</code> value that holds <code class=\"hljs\">3</code> and a <code class=\"hljs\">List</code> value, which is finally\n<code class=\"hljs\">Nil</code>, the non-recursive variant that signals the end of the list.</p>\n<p>If we try to compile the code in Listing 15-3, we get the error shown in\nListing 15-4:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0072]: recursive type `List` has infinite size\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:1:1</span>\n  |\n1 | enum List {\n  | ^^^^^^^^^\n2 |     Cons(i32, List),\n  |               ---- recursive without indirection\n  |\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&amp;`) to break the cycle\n  |\n2 |     Cons(i32, Box&lt;List&gt;),\n  |               ++++    +\n\nerror[E0391]: cycle detected when computing when `List` needs drop\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:1:1</span>\n  |\n1 | enum List {\n  | ^^^^^^^^^\n  |\n  = note: ...which immediately requires computing when `List` needs drop again\n  = note: cycle used when computing whether `List` needs drop\n  = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information\n\nSome errors have detailed explanations: E0072, E0391.\nFor more information about an error, try `rustc --explain E0072`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 15-4: The error we get when attempting to define\na recursive enum</span></p>\n<p>The error shows this type “has infinite size.” The reason is that we’ve defined\n<code class=\"hljs\">List</code> with a variant that is recursive: it holds another value of itself\ndirectly. As a result, Rust can’t figure out how much space it needs to store a\n<code class=\"hljs\">List</code> value. Let’s break down why we get this error. First, we’ll look at how\nRust decides how much space it needs to store a value of a non-recursive type.</p>\n<h4 id=\"computing-the-size-of-a-non-recursive-type\"><a class=\"header\" href=\"#computing-the-size-of-a-non-recursive-type\">Computing the Size of a Non-Recursive Type</a></h4>\n<p>Recall the <code class=\"hljs\">Message</code> enum we defined in Listing 6-2 when we discussed enum\ndefinitions in Chapter 6:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    Quit,\n    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n    Write(<span class=\"hljs-built_in\">String</span>),\n    ChangeColor(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>To determine how much space to allocate for a <code class=\"hljs\">Message</code> value, Rust goes\nthrough each of the variants to see which variant needs the most space. Rust\nsees that <code class=\"hljs\">Message::Quit</code> doesn’t need any space, <code class=\"hljs\">Message::Move</code> needs enough\nspace to store two <code class=\"hljs\">i32</code> values, and so forth. Because only one variant will be\nused, the most space a <code class=\"hljs\">Message</code> value will need is the space it would take to\nstore the largest of its variants.</p>\n<p>Contrast this with what happens when Rust tries to determine how much space a\nrecursive type like the <code class=\"hljs\">List</code> enum in Listing 15-2 needs. The compiler starts\nby looking at the <code class=\"hljs\">Cons</code> variant, which holds a value of type <code class=\"hljs\">i32</code> and a value\nof type <code class=\"hljs\">List</code>. Therefore, <code class=\"hljs\">Cons</code> needs an amount of space equal to the size of\nan <code class=\"hljs\">i32</code> plus the size of a <code class=\"hljs\">List</code>. To figure out how much memory the <code class=\"hljs\">List</code>\ntype needs, the compiler looks at the variants, starting with the <code class=\"hljs\">Cons</code>\nvariant. The <code class=\"hljs\">Cons</code> variant holds a value of type <code class=\"hljs\">i32</code> and a value of type\n<code class=\"hljs\">List</code>, and this process continues infinitely, as shown in Figure 15-1.</p>\n<img alt=\"An infinite Cons list\" src=\"img/trpl15-01.svg\" class=\"center\" style=\"width: 50%;\">\n<p><span class=\"caption\">Figure 15-1: An infinite <code class=\"hljs\">List</code> consisting of infinite\n<code class=\"hljs\">Cons</code> variants</span></p>\n<h4 id=\"using-boxt-to-get-a-recursive-type-with-a-known-size\"><a class=\"header\" href=\"#using-boxt-to-get-a-recursive-type-with-a-known-size\">Using <code>Box&lt;T&gt;</code> to Get a Recursive Type with a Known Size</a></h4>\n<p>Because Rust can’t figure out how much space to allocate for recursively\ndefined types, the compiler gives an error with this helpful suggestion:</p>\n<!-- manual-regeneration\nafter doing automatic regeneration, look at listings/ch15-smart-pointers/listing-15-03/output.txt and copy the relevant line\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">help: insert some indirection (e.g., a `Box`, `Rc`, or `&amp;`) to break the cycle\n  |\n2 |     Cons(i32, Box&lt;List&gt;),\n  |               ++++    +\n</code></pre>\n<p>In this suggestion, “indirection” means that instead of storing a value\ndirectly, we should change the data structure to store the value indirectly by\nstoring a pointer to the value instead.</p>\n<p>Because a <code class=\"hljs\">Box&lt;T&gt;</code> is a pointer, Rust always knows how much space a <code class=\"hljs\">Box&lt;T&gt;</code>\nneeds: a pointer’s size doesn’t change based on the amount of data it’s\npointing to. This means we can put a <code class=\"hljs\">Box&lt;T&gt;</code> inside the <code class=\"hljs\">Cons</code> variant instead\nof another <code class=\"hljs\">List</code> value directly. The <code class=\"hljs\">Box&lt;T&gt;</code> will point to the next <code class=\"hljs\">List</code>\nvalue that will be on the heap rather than inside the <code class=\"hljs\">Cons</code> variant.\nConceptually, we still have a list, created with lists holding other lists, but\nthis implementation is now more like placing the items next to one another\nrather than inside one another.</p>\n<p>We can change the definition of the <code class=\"hljs\">List</code> enum in Listing 15-2 and the usage\nof the <code class=\"hljs\">List</code> in Listing 15-3 to the code in Listing 15-5, which will compile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">Box</span>&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = Cons(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Box</span>::new(Cons(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">Box</span>::new(Cons(<span class=\"hljs-number\">3</span>, <span class=\"hljs-built_in\">Box</span>::new(Nil))))));\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-5: Definition of <code class=\"hljs\">List</code> that uses <code class=\"hljs\">Box&lt;T&gt;</code> in\norder to have a known size</span></p>\n<p>The <code class=\"hljs\">Cons</code> variant needs the size of an <code class=\"hljs\">i32</code> plus the space to store the\nbox’s pointer data. The <code class=\"hljs\">Nil</code> variant stores no values, so it needs less space\nthan the <code class=\"hljs\">Cons</code> variant. We now know that any <code class=\"hljs\">List</code> value will take up the\nsize of an <code class=\"hljs\">i32</code> plus the size of a box’s pointer data. By using a box, we’ve\nbroken the infinite, recursive chain, so the compiler can figure out the size\nit needs to store a <code class=\"hljs\">List</code> value. Figure 15-2 shows what the <code class=\"hljs\">Cons</code> variant\nlooks like now.</p>\n<img alt=\"A finite Cons list\" src=\"img/trpl15-02.svg\" class=\"center\">\n<p><span class=\"caption\">Figure 15-2: A <code class=\"hljs\">List</code> that is not infinitely sized\nbecause <code class=\"hljs\">Cons</code> holds a <code class=\"hljs\">Box</code></span></p>\n<p>Boxes provide only the indirection and heap allocation; they don’t have any\nother special capabilities, like those we’ll see with the other smart pointer\ntypes. They also don’t have the performance overhead that these special\ncapabilities incur, so they can be useful in cases like the cons list where the\nindirection is the only feature we need. We’ll look at more use cases for boxes\nin Chapter 17, too.</p>\n<p>The <code class=\"hljs\">Box&lt;T&gt;</code> type is a smart pointer because it implements the <code class=\"hljs\">Deref</code> trait,\nwhich allows <code class=\"hljs\">Box&lt;T&gt;</code> values to be treated like references. When a <code class=\"hljs\">Box&lt;T&gt;</code>\nvalue goes out of scope, the heap data that the box is pointing to is cleaned\nup as well because of the <code class=\"hljs\">Drop</code> trait implementation. These two traits will be\neven more important to the functionality provided by the other smart pointer\ntypes we’ll discuss in the rest of this chapter. Let’s explore these two traits\nin more detail.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch15-00-smart-pointers.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch15-02-deref.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch15-00-smart-pointers.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch15-02-deref.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:28.677Z"
}