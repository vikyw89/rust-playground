{
	"title": "Working with Environment Variables - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch12-05-working-with-environment-variables.html",
	"markdown": "# Working with Environment Variables - The Rust Programming Language\n\nWe’ll improve `minigrep` by adding an extra feature: an option for case-insensitive searching that the user can turn on via an environment variable. We could make this feature a command line option and require that users enter it each time they want it to apply, but by instead making it an environment variable, we allow our users to set the environment variable once and have all their searches be case insensitive in that terminal session.\n\n### [Writing a Failing Test for the Case-Insensitive `search` Function](#writing-a-failing-test-for-the-case-insensitive-search-function)\n\nWe first add a new `search_case_insensitive` function that will be called when the environment variable has a value. We’ll continue to follow the TDD process, so the first step is again to write a failing test. We’ll add a new test for the new `search_case_insensitive` function and rename our old test from `one_result` to `case_sensitive` to clarify the differences between the two tests, as shown in Listing 12-20.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-20: Adding a new failing test for the case-insensitive function we’re about to add\n\nNote that we’ve edited the old test’s `contents` too. We’ve added a new line with the text `\"Duct tape.\"` using a capital D that shouldn’t match the query `\"duct\"` when we’re searching in a case-sensitive manner. Changing the old test in this way helps ensure that we don’t accidentally break the case-sensitive search functionality that we’ve already implemented. This test should pass now and should continue to pass as we work on the case-insensitive search.\n\nThe new test for the case-_insensitive_ search uses `\"rUsT\"` as its query. In the `search_case_insensitive` function we’re about to add, the query `\"rUsT\"` should match the line containing `\"Rust:\"` with a capital R and match the line `\"Trust me.\"` even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven’t yet defined the `search_case_insensitive` function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the `search` function in Listing 12-16 to see the test compile and fail.\n\n### [Implementing the `search_case_insensitive` Function](#implementing-the-search_case_insensitive-function)\n\nThe `search_case_insensitive` function, shown in Listing 12-21, will be almost the same as the `search` function. The only difference is that we’ll lowercase the `query` and each `line` so whatever the case of the input arguments, they’ll be the same case when we check whether the line contains the query.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-21: Defining the `search_case_insensitive` function to lowercase the query and the line before comparing them\n\nFirst, we lowercase the `query` string and store it in a shadowed variable with the same name. Calling `to_lowercase` on the query is necessary so no matter whether the user’s query is `\"rust\"`, `\"RUST\"`, `\"Rust\"`, or `\"rUsT\"`, we’ll treat the query as if it were `\"rust\"` and be insensitive to the case. While `to_lowercase` will handle basic Unicode, it won’t be 100% accurate. If we were writing a real application, we’d want to do a bit more work here, but this section is about environment variables, not Unicode, so we’ll leave it at that here.\n\nNote that `query` is now a `String` rather than a string slice, because calling `to_lowercase` creates new data rather than referencing existing data. Say the query is `\"rUsT\"`, as an example: that string slice doesn’t contain a lowercase `u` or `t` for us to use, so we have to allocate a new `String` containing `\"rust\"`. When we pass `query` as an argument to the `contains` method now, we need to add an ampersand because the signature of `contains` is defined to take a string slice.\n\nNext, we add a call to `to_lowercase` on each `line` to lowercase all characters. Now that we’ve converted `line` and `query` to lowercase, we’ll find matches no matter what the case of the query is.\n\nLet’s see if this implementation passes the tests:\n\n```console\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.33s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 2 tests\ntest tests::case_insensitive ... ok\ntest tests::case_sensitive ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nGreat! They passed. Now, let’s call the new `search_case_insensitive` function from the `run` function. First, we’ll add a configuration option to the `Config` struct to switch between case-sensitive and case-insensitive search. Adding this field will cause compiler errors because we aren’t initializing this field anywhere yet:\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nWe added the `ignore_case` field that holds a Boolean. Next, we need the `run` function to check the `ignore_case` field’s value and use that to decide whether to call the `search` function or the `search_case_insensitive` function, as shown in Listing 12-22. This still won’t compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-22: Calling either `search` or `search_case_insensitive` based on the value in `config.ignore_case`\n\nFinally, we need to check for the environment variable. The functions for working with environment variables are in the `env` module in the standard library, so we bring that module into scope at the top of _src/lib.rs_. Then we’ll use the `var` function from the `env` module to check if any value has been set for an environment variable named `IGNORE_CASE`, as shown in Listing 12-23.\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\n// --snip--\n\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-23: Checking for any value in an environment variable named `IGNORE_CASE`\n\nHere, we create a new variable `ignore_case`. To set its value, we call the `env::var` function and pass it the name of the `IGNORE_CASE` environment variable. The `env::var` function returns a `Result` that will be the successful `Ok` variant that contains the value of the environment variable if the environment variable is set to any value. It will return the `Err` variant if the environment variable is not set.\n\nWe’re using the `is_ok` method on the `Result` to check whether the environment variable is set, which means the program should do a case-insensitive search. If the `IGNORE_CASE` environment variable isn’t set to anything, `is_ok` will return false and the program will perform a case-sensitive search. We don’t care about the _value_ of the environment variable, just whether it’s set or unset, so we’re checking `is_ok` rather than using `unwrap`, `expect`, or any of the other methods we’ve seen on `Result`.\n\nWe pass the value in the `ignore_case` variable to the `Config` instance so the `run` function can read that value and decide whether to call `search_case_insensitive` or `search`, as we implemented in Listing 12-22.\n\nLet’s give it a try! First, we’ll run our program without the environment variable set and with the query `to`, which should match any line that contains the word “to” in all lowercase:\n\n```console\n$ cargo run -- to poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\n\n```\n\nLooks like that still works! Now, let’s run the program with `IGNORE_CASE` set to `1` but with the same query `to`.\n\n```console\n$ IGNORE_CASE=1 cargo run -- to poem.txt\n\n```\n\nIf you’re using PowerShell, you will need to set the environment variable and run the program as separate commands:\n\n```console\nPS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt\n\n```\n\nThis will make `IGNORE_CASE` persist for the remainder of your shell session. It can be unset with the `Remove-Item` cmdlet:\n\n```console\nPS> Remove-Item Env:IGNORE_CASE\n\n```\n\nWe should get lines that contain “to” that might have uppercase letters:\n\n```console\nAre you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n\n```\n\nExcellent, we also got lines containing “To”! Our `minigrep` program can now do case-insensitive searching controlled by an environment variable. Now you know how to manage options set using either command line arguments or environment variables.\n\nSome programs allow arguments _and_ environment variables for the same configuration. In those cases, the programs decide that one or the other takes precedence. For another exercise on your own, try controlling case sensitivity through either a command line argument or an environment variable. Decide whether the command line argument or the environment variable should take precedence if the program is run with one set to case sensitive and one set to ignore case.\n\nThe `std::env` module contains many more useful features for dealing with environment variables: check out its documentation to see what is available.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Working with Environment Variables - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"working-with-environment-variables\"><a class=\"header\" href=\"#working-with-environment-variables\">Working with Environment Variables</a></h2>\n<p>We’ll improve <code class=\"hljs\">minigrep</code> by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but by instead making it an\nenvironment variable, we allow our users to set the environment variable once\nand have all their searches be case insensitive in that terminal session.</p>\n<h3 id=\"writing-a-failing-test-for-the-case-insensitive-search-function\"><a class=\"header\" href=\"#writing-a-failing-test-for-the-case-insensitive-search-function\">Writing a Failing Test for the Case-Insensitive <code>search</code> Function</a></h3>\n<p>We first add a new <code class=\"hljs\">search_case_insensitive</code> function that will be called when\nthe environment variable has a value. We’ll continue to follow the TDD process,\nso the first step is again to write a failing test. We’ll add a new test for\nthe new <code class=\"hljs\">search_case_insensitive</code> function and rename our old test from\n<code class=\"hljs\">one_result</code> to <code class=\"hljs\">case_sensitive</code> to clarify the differences between the two\ntests, as shown in Listing 12-20.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> search(&amp;config.query, &amp;contents) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\"</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\"</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n            search_case_insensitive(query, contents)\n        );\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-20: Adding a new failing test for the\ncase-insensitive function we’re about to add</span></p>\n<p>Note that we’ve edited the old test’s <code class=\"hljs\">contents</code> too. We’ve added a new line\nwith the text <code class=\"hljs\">\"Duct tape.\"</code> using a capital D that shouldn’t match the query\n<code class=\"hljs\">\"duct\"</code> when we’re searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don’t accidentally break the case-sensitive\nsearch functionality that we’ve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search.</p>\n<p>The new test for the case-<em>insensitive</em> search uses <code class=\"hljs\">\"rUsT\"</code> as its query. In\nthe <code class=\"hljs\">search_case_insensitive</code> function we’re about to add, the query <code class=\"hljs\">\"rUsT\"</code>\nshould match the line containing <code class=\"hljs\">\"Rust:\"</code> with a capital R and match the line\n<code class=\"hljs\">\"Trust me.\"</code> even though both have different casing from the query. This is\nour failing test, and it will fail to compile because we haven’t yet defined\nthe <code class=\"hljs\">search_case_insensitive</code> function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the <code class=\"hljs\">search</code> function in Listing 12-16 to see the test compile and fail.</p>\n<h3 id=\"implementing-the-search_case_insensitive-function\"><a class=\"header\" href=\"#implementing-the-search_case_insensitive-function\">Implementing the <code>search_case_insensitive</code> Function</a></h3>\n<p>The <code class=\"hljs\">search_case_insensitive</code> function, shown in Listing 12-21, will be almost\nthe same as the <code class=\"hljs\">search</code> function. The only difference is that we’ll lowercase\nthe <code class=\"hljs\">query</code> and each <code class=\"hljs\">line</code> so whatever the case of the input arguments,\nthey’ll be the same case when we check whether the line contains the query.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> search(&amp;config.query, &amp;contents) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n    query: &amp;<span class=\"hljs-built_in\">str</span>,\n    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-21: Defining the <code class=\"hljs\">search_case_insensitive</code>\nfunction to lowercase the query and the line before comparing them</span></p>\n<p>First, we lowercase the <code class=\"hljs\">query</code> string and store it in a shadowed variable with\nthe same name. Calling <code class=\"hljs\">to_lowercase</code> on the query is necessary so no\nmatter whether the user’s query is <code class=\"hljs\">\"rust\"</code>, <code class=\"hljs\">\"RUST\"</code>, <code class=\"hljs\">\"Rust\"</code>, or <code class=\"hljs\">\"rUsT\"</code>,\nwe’ll treat the query as if it were <code class=\"hljs\">\"rust\"</code> and be insensitive to the case.\nWhile <code class=\"hljs\">to_lowercase</code> will handle basic Unicode, it won’t be 100% accurate. If\nwe were writing a real application, we’d want to do a bit more work here, but\nthis section is about environment variables, not Unicode, so we’ll leave it at\nthat here.</p>\n<p>Note that <code class=\"hljs\">query</code> is now a <code class=\"hljs\">String</code> rather than a string slice, because calling\n<code class=\"hljs\">to_lowercase</code> creates new data rather than referencing existing data. Say the\nquery is <code class=\"hljs\">\"rUsT\"</code>, as an example: that string slice doesn’t contain a lowercase\n<code class=\"hljs\">u</code> or <code class=\"hljs\">t</code> for us to use, so we have to allocate a new <code class=\"hljs\">String</code> containing\n<code class=\"hljs\">\"rust\"</code>. When we pass <code class=\"hljs\">query</code> as an argument to the <code class=\"hljs\">contains</code> method now, we\nneed to add an ampersand because the signature of <code class=\"hljs\">contains</code> is defined to take\na string slice.</p>\n<p>Next, we add a call to <code class=\"hljs\">to_lowercase</code> on each <code class=\"hljs\">line</code> to lowercase all\ncharacters. Now that we’ve converted <code class=\"hljs\">line</code> and <code class=\"hljs\">query</code> to lowercase, we’ll\nfind matches no matter what the case of the query is.</p>\n<p>Let’s see if this implementation passes the tests:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.33s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 2 tests\ntest tests::case_insensitive ... ok\ntest tests::case_sensitive ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Great! They passed. Now, let’s call the new <code class=\"hljs\">search_case_insensitive</code> function\nfrom the <code class=\"hljs\">run</code> function. First, we’ll add a configuration option to the\n<code class=\"hljs\">Config</code> struct to switch between case-sensitive and case-insensitive search.\nAdding this field will cause compiler errors because we aren’t initializing\nthis field anywhere yet:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>We added the <code class=\"hljs\">ignore_case</code> field that holds a Boolean. Next, we need the <code class=\"hljs\">run</code>\nfunction to check the <code class=\"hljs\">ignore_case</code> field’s value and use that to decide\nwhether to call the <code class=\"hljs\">search</code> function or the <code class=\"hljs\">search_case_insensitive</code>\nfunction, as shown in Listing 12-22. This still won’t compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n\n    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n        search_case_insensitive(&amp;config.query, &amp;contents)\n    } <span class=\"hljs-keyword\">else</span> {\n        search(&amp;config.query, &amp;contents)\n    };\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n    }\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-22: Calling either <code class=\"hljs\">search</code> or\n<code class=\"hljs\">search_case_insensitive</code> based on the value in <code class=\"hljs\">config.ignore_case</code></span></p>\n<p>Finally, we need to check for the environment variable. The functions for\nworking with environment variables are in the <code class=\"hljs\">env</code> module in the standard\nlibrary, so we bring that module into scope at the top of <em>src/lib.rs</em>. Then\nwe’ll use the <code class=\"hljs\">var</code> function from the <code class=\"hljs\">env</code> module to check if any value\nhas been set for an environment variable named <code class=\"hljs\">IGNORE_CASE</code>, as shown in\nListing 12-23.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-23: Checking for any value in an environment\nvariable named <code class=\"hljs\">IGNORE_CASE</code></span></p>\n<p>Here, we create a new variable <code class=\"hljs\">ignore_case</code>. To set its value, we call the\n<code class=\"hljs\">env::var</code> function and pass it the name of the <code class=\"hljs\">IGNORE_CASE</code> environment\nvariable. The <code class=\"hljs\">env::var</code> function returns a <code class=\"hljs\">Result</code> that will be the\nsuccessful <code class=\"hljs\">Ok</code> variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the <code class=\"hljs\">Err</code> variant\nif the environment variable is not set.</p>\n<p>We’re using the <code class=\"hljs\">is_ok</code> method on the <code class=\"hljs\">Result</code> to check whether the environment\nvariable is set, which means the program should do a case-insensitive search.\nIf the <code class=\"hljs\">IGNORE_CASE</code> environment variable isn’t set to anything, <code class=\"hljs\">is_ok</code> will\nreturn false and the program will perform a case-sensitive search. We don’t\ncare about the <em>value</em> of the environment variable, just whether it’s set or\nunset, so we’re checking <code class=\"hljs\">is_ok</code> rather than using <code class=\"hljs\">unwrap</code>, <code class=\"hljs\">expect</code>, or any\nof the other methods we’ve seen on <code class=\"hljs\">Result</code>.</p>\n<p>We pass the value in the <code class=\"hljs\">ignore_case</code> variable to the <code class=\"hljs\">Config</code> instance so the\n<code class=\"hljs\">run</code> function can read that value and decide whether to call\n<code class=\"hljs\">search_case_insensitive</code> or <code class=\"hljs\">search</code>, as we implemented in Listing 12-22.</p>\n<p>Let’s give it a try! First, we’ll run our program without the environment\nvariable set and with the query <code class=\"hljs\">to</code>, which should match any line that contains\nthe word “to” in all lowercase:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- to poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\n</code></pre>\n<p>Looks like that still works! Now, let’s run the program with <code class=\"hljs\">IGNORE_CASE</code>\nset to <code class=\"hljs\">1</code> but with the same query <code class=\"hljs\">to</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> IGNORE_CASE=1 cargo run -- to poem.txt</span>\n</code></pre>\n<p>If you’re using PowerShell, you will need to set the environment variable and\nrun the program as separate commands:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">PS&gt;</span><span class=\"bash\"> <span class=\"hljs-variable\">$Env</span>:IGNORE_CASE=1; cargo run -- to poem.txt</span>\n</code></pre>\n<p>This will make <code class=\"hljs\">IGNORE_CASE</code> persist for the remainder of your shell\nsession. It can be unset with the <code class=\"hljs\">Remove-Item</code> cmdlet:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">PS&gt;</span><span class=\"bash\"> Remove-Item Env:IGNORE_CASE</span>\n</code></pre>\n<p>We should get lines that contain “to” that might have uppercase letters:</p>\n<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nIGNORE_CASE=1 cargo run -- to poem.txt\ncan't extract because of the environment variable\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">Are you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n</code></pre>\n<p>Excellent, we also got lines containing “To”! Our <code class=\"hljs\">minigrep</code> program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables.</p>\n<p>Some programs allow arguments <em>and</em> environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case sensitivity\nthrough either a command line argument or an environment variable. Decide\nwhether the command line argument or the environment variable should take\nprecedence if the program is run with one set to case sensitive and one set to\nignore case.</p>\n<p>The <code class=\"hljs\">std::env</code> module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch12-04-testing-the-librarys-functionality.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch12-04-testing-the-librarys-functionality.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:25.154Z"
}