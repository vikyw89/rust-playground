{
	"title": "tuple - Rust",
	"url": "https://doc.rust-lang.org/stable/std/primitive.tuple.html",
	"markdown": "# tuple - Rust\n\n## Primitive Type [tuple](#)\n\n1.0.0 ·\n\nExpand description\n\nA finite heterogeneous sequence, `(T, U, ..)`.\n\nLet’s cover each of those in turn:\n\nTuples are _finite_. In other words, a tuple has a length. Here’s a tuple of length `3`:\n\n‘Length’ is also sometimes called ‘arity’ here; each tuple of a different length is a different, distinct type.\n\nTuples are _heterogeneous_. This means that each element of the tuple can have a different type. In that tuple above, it has the type:\n\n```\n(&'static str, i32, char)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+_:%0A++++(%26%27static+str,+i32,+char)%0A++++=+(%22hello%22,+5,+%27c%27);%0A%7D&edition=2021)\n\nTuples are a _sequence_. This means that they can be accessed by position; this is called ‘tuple indexing’, and it looks like this:\n\n```\nlet tuple = (\"hello\", 5, 'c');\n\nassert_eq!(tuple.0, \"hello\");\nassert_eq!(tuple.1, 5);\nassert_eq!(tuple.2, 'c');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple+=+(%22hello%22,+5,+%27c%27);%0A++++%0A++++assert_eq!(tuple.0,+%22hello%22);%0A++++assert_eq!(tuple.1,+5);%0A++++assert_eq!(tuple.2,+%27c%27);%0A%7D&edition=2021)\n\nThe sequential nature of the tuple applies to its implementations of various traits. For example, in [`PartialOrd`](cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\") and [`Ord`](cmp/trait.Ord.html \"trait std::cmp::Ord\"), the elements are compared sequentially until the first non-equal set is found.\n\nFor more about tuples, see [the book](about:blank/book/ch03-02-data-types.html#the-tuple-type).\n\n## [§](#trait-implementations-1)Trait implementations\n\nIn this documentation the shorthand `(T₁, T₂, …, Tₙ)` is used to represent tuples of varying length. When that is used, any trait bound expressed on `T` applies to each element of the tuple independently. Note that this is a convenience notation to avoid repetitive documentation, not valid Rust syntax.\n\nDue to a temporary restriction in Rust’s type system, the following traits are only implemented on tuples of arity 12 or less. In the future, this may change:\n\n-   [`PartialEq`](cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\")\n-   [`Eq`](cmp/trait.Eq.html \"trait std::cmp::Eq\")\n-   [`PartialOrd`](cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\")\n-   [`Ord`](cmp/trait.Ord.html \"trait std::cmp::Ord\")\n-   [`Debug`](fmt/trait.Debug.html \"trait std::fmt::Debug\")\n-   [`Default`](default/trait.Default.html \"trait std::default::Default\")\n-   [`Hash`](hash/trait.Hash.html \"trait std::hash::Hash\")\n-   [`From<[T; N]>`](convert/trait.From.html \"trait std::convert::From\")\n\nThe following traits are implemented for tuples of any length. These traits have implementations that are automatically generated by the compiler, so are not limited by missing language features.\n\n-   [`Clone`](clone/trait.Clone.html \"trait std::clone::Clone\")\n-   [`Copy`](marker/trait.Copy.html \"trait std::marker::Copy\")\n-   [`Send`](marker/trait.Send.html \"trait std::marker::Send\")\n-   [`Sync`](marker/trait.Sync.html \"trait std::marker::Sync\")\n-   [`Unpin`](marker/trait.Unpin.html \"trait std::marker::Unpin\")\n-   [`UnwindSafe`](panic/trait.UnwindSafe.html \"trait std::panic::UnwindSafe\")\n-   [`RefUnwindSafe`](panic/trait.RefUnwindSafe.html \"trait std::panic::RefUnwindSafe\")\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nlet tuple = (\"hello\", 5, 'c');\n\nassert_eq!(tuple.0, \"hello\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple+=+(%22hello%22,+5,+%27c%27);%0A++++%0A++++assert_eq!(tuple.0,+%22hello%22);%0A%7D&edition=2021)\n\nTuples are often used as a return type when you want to return more than one value:\n\n```\nfn calculate_point() -> (i32, i32) {\n    // Don't do a calculation, that's not the point of the example\n    (4, 5)\n}\n\nlet point = calculate_point();\n\nassert_eq!(point.0, 4);\nassert_eq!(point.1, 5);\n\n// Combining this with patterns can be nicer.\n\nlet (x, y) = calculate_point();\n\nassert_eq!(x, 4);\nassert_eq!(y, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+calculate_point()+-%3E+(i32,+i32)+%7B%0A++++++++//+Don%27t+do+a+calculation,+that%27s+not+the+point+of+the+example%0A++++++++(4,+5)%0A++++%7D%0A++++%0A++++let+point+=+calculate_point();%0A++++%0A++++assert_eq!(point.0,+4);%0A++++assert_eq!(point.1,+5);%0A++++%0A++++//+Combining+this+with+patterns+can+be+nicer.%0A++++%0A++++let+(x,+y)+=+calculate_point();%0A++++%0A++++assert_eq!(x,+4);%0A++++assert_eq!(y,+5);%0A%7D&edition=2021)\n\nHomogeneous tuples can be created from arrays of appropriate length:\n\n```\nlet array: [u32; 3] = [1, 2, 3];\nlet tuple: (u32, u32, u32) = array.into();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+array:+%5Bu32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+tuple:+(u32,+u32,+u32)+=+array.into();%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2600)[§](#impl-Debug-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-Default-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2254-2255)[§](#impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2257)[§](#method.extend-2)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2262)[§](#method.extend_one-2)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve-2)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.4.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3159-3179)[§](#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3166-3168)[§](#method.extend-4)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3171-3173)[§](#method.extend_one-4)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3176-3178)[§](#method.extend_reserve-4)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#475-478)[§](#impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#500)[§](#method.extend)\n\nAllows to `extend` a tuple of collections that also implement `Extend`.\n\nSee also: [`Iterator::unzip`](about:blank/iter/trait.Iterator.html#method.unzip \"method std::iter::Iterator::unzip\")\n\n##### [§](#examples-1)Examples\n\n```\nlet mut tuple = (vec![0], vec![1]);\ntuple.extend([(2, 3), (4, 5), (6, 7)]);\nassert_eq!(tuple.0, [0, 2, 4, 6]);\nassert_eq!(tuple.1, [1, 3, 5, 7]);\n\n// also allows for arbitrarily nested tuples as elements\nlet mut nested_tuple = (vec![1], (vec![2], vec![3]));\nnested_tuple.extend([(4, (5, 6)), (7, (8, 9))]);\n\nlet (a, (b, c)) = nested_tuple;\nassert_eq!(a, [1, 4, 7]);\nassert_eq!(b, [2, 5, 8]);\nassert_eq!(c, [3, 6, 9]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+tuple+=+(vec!%5B0%5D,+vec!%5B1%5D);%0A++++tuple.extend(%5B(2,+3),+(4,+5),+(6,+7)%5D);%0A++++assert_eq!(tuple.0,+%5B0,+2,+4,+6%5D);%0A++++assert_eq!(tuple.1,+%5B1,+3,+5,+7%5D);%0A++++%0A++++//+also+allows+for+arbitrarily+nested+tuples+as+elements%0A++++let+mut+nested_tuple+=+(vec!%5B1%5D,+(vec!%5B2%5D,+vec!%5B3%5D));%0A++++nested_tuple.extend(%5B(4,+(5,+6)),+(7,+(8,+9))%5D);%0A++++%0A++++let+(a,+(b,+c))+=+nested_tuple;%0A++++assert_eq!(a,+%5B1,+4,+7%5D);%0A++++assert_eq!(b,+%5B2,+5,+8%5D);%0A++++assert_eq!(c,+%5B3,+6,+9%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#523)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#528)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2239)[§](#impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2241)[§](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2248)[§](#method.extend_one-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3137-3156)[§](#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E)\n\nInserts all new key-values from the iterator and replaces values with existing keys with new values returned from the iterator.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3143-3145)[§](#method.extend-3)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3148-3150)[§](#method.extend_one-3)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](about:blank/src/std/collections/hash/map.rs.html#3153-3155)[§](#method.extend_reserve-3)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+1%5D%3E-for-(T,))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-19)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-5)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-14)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-15)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+2%5D%3E-for-(T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-12)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-21)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-22)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-10)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-11)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-6)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-17)\n\nConverts to this type from the input type.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#557)[§](#impl-From%3C(I,+u16)%3E-for-SocketAddr)\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,)%3E-for-%5BT;+1%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-4)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-3)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-20)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-13)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-7)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-2)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-18)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-9)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-16)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-23)\n\nConverts to this type from the input type.\n\n1.71.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.from-8)\n\nConverts to this type from the input type.\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#173-176)[§](#impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B))\n\nThis implementation turns an iterator of tuples into a tuple of types which implement [`Default`](default/trait.Default.html \"trait std::default::Default\") and [`Extend`](iter/trait.Extend.html \"trait std::iter::Extend\").\n\nThis is similar to [`Iterator::unzip`](about:blank/iter/trait.Iterator.html#method.unzip \"method std::iter::Iterator::unzip\"), but is also composable with other [`FromIterator`](iter/trait.FromIterator.html \"trait std::iter::FromIterator\") implementations:\n\n```\nlet string = \"1,2,123,4\";\n\nlet (numbers, lengths): (Vec<_>, Vec<_>) = string\n    .split(',')\n    .map(|s| s.parse().map(|n: u32| (n, s.len())))\n    .collect::<Result<_, _>>()?;\n\nassert_eq!(numbers, [1, 2, 123, 4]);\nassert_eq!(lengths, [1, 1, 3, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+core::num::ParseIntError%3E+%7B%0Alet+string+=+%221,2,123,4%22;%0A%0Alet+(numbers,+lengths):+(Vec%3C_%3E,+Vec%3C_%3E)+=+string%0A++++.split(%27,%27)%0A++++.map(%7Cs%7C+s.parse().map(%7Cn:+u32%7C+(n,+s.len())))%0A++++.collect::%3CResult%3C_,+_%3E%3E()?;%0A%0Aassert_eq!(numbers,+%5B1,+2,+123,+4%5D);%0Aassert_eq!(lengths,+%5B1,+1,+3,+1%5D);%0AOk(())+%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2224)[§](#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E)\n\n1.0.0 · [source](about:blank/src/std/collections/hash/map.rs.html#3122-3132)[§](#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#928)[§](#impl-Hash-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-Ord-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-PartialEq-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-PartialOrd-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#922)[§](#impl-RangeBounds%3CT%3E-for-(Bound%3C%26T%3E,+Bound%3C%26T%3E))\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#903)[§](#impl-RangeBounds%3CT%3E-for-(Bound%3CT%3E,+Bound%3CT%3E))\n\n1.53.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#854)[§](#impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E))\n\n[§](#associatedtype.Output)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#858)[§](#method.get)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#863)[§](#method.get_mut)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#868)[§](#method.get_unchecked)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#874)[§](#method.get_unchecked_mut)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#880)[§](#method.index)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#885)[§](#method.index_mut)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.73.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278)[§](#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E))\n\nImplements substring slicing for arbitrary bounds.\n\nReturns a slice of the given string bounded by the byte indices provided by each bound.\n\nThis operation is _O_(1).\n\n#### [§](#panics)Panics\n\nPanics if `begin` or `end` (if it exists and once adjusted for inclusion/exclusion) does not point to the starting byte offset of a character (as defined by `is_char_boundary`), if `begin > end`, or if `end > len`.\n\n[§](#associatedtype.Output-1)\n\nThe output type returned by methods.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#282)[§](#method.get-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#287)[§](#method.get_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, if in bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#292)[§](#method.get_unchecked-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#299)[§](#method.get_unchecked_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable pointer to the output at this location, without performing any bounds checking. Calling this method with an out-of-bounds index or a dangling `slice` pointer is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#306)[§](#method.index-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a shared reference to the output at this location, panicking if out of bounds.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#311)[§](#method.index_mut-1)\n\n🔬This is a nightly-only experimental API. (`slice_index_methods`)\n\nReturns a mutable reference to the output at this location, panicking if out of bounds.\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#251-268)[§](#impl-ToSocketAddrs-for-(%26str,+u16))\n\n[§](#associatedtype.Iter-4)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#253-267)[§](#method.to_socket_addrs-4)\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#210-219)[§](#impl-ToSocketAddrs-for-(IpAddr,+u16))\n\n[§](#associatedtype.Iter-1)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#212-218)[§](#method.to_socket_addrs-1)\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#222-228)[§](#impl-ToSocketAddrs-for-(Ipv4Addr,+u16))\n\n[§](#associatedtype.Iter)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#224-227)[§](#method.to_socket_addrs)\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#231-237)[§](#impl-ToSocketAddrs-for-(Ipv6Addr,+u16))\n\n[§](#associatedtype.Iter-2)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#233-236)[§](#method.to_socket_addrs-2)\n\n1.46.0 · [source](about:blank/src/std/net/socket_addr.rs.html#271-276)[§](#impl-ToSocketAddrs-for-(String,+u16))\n\n[§](#associatedtype.Iter-3)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n[source](about:blank/src/std/net/socket_addr.rs.html#273-275)[§](#method.to_socket_addrs-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-ConstParamTy-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-Eq-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201)[§](#impl-StructuralPartialEq-for-(T,))\n\nThis trait is implemented for tuples up to twelve items long.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-25)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A finite heterogeneous sequence, `(T, U, ..)`.\"><title>tuple - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc primitive\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">tuple</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">tuple</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-ConstParamTy-for-(T,)\">ConstParamTy</a></li><li><a href=\"#impl-Debug-for-(T,)\">Debug</a></li><li><a href=\"#impl-Default-for-(T,)\">Default</a></li><li><a href=\"#impl-Eq-for-(T,)\">Eq</a></li><li><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E\">Extend&lt;(&amp;'a K, &amp;'a V)&gt;</a></li><li><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\">Extend&lt;(&amp;'a K, &amp;'a V)&gt;</a></li><li><a href=\"#impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB)\">Extend&lt;(A, B)&gt;</a></li><li><a href=\"#impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E\">Extend&lt;(K, V)&gt;</a></li><li><a href=\"#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\">Extend&lt;(K, V)&gt;</a></li><li><a href=\"#impl-From%3C(I,+u16)%3E-for-SocketAddr\">From&lt;(I, u16)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\">From&lt;(T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\">From&lt;(T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\">From&lt;(T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\">From&lt;(T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\">From&lt;(T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\">From&lt;(T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\">From&lt;(T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\">From&lt;(T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\">From&lt;(T, T, T, T, T, T, T, T, T, T, T, T)&gt;</a></li><li><a href=\"#impl-From%3C(T,)%3E-for-%5BT;+1%5D\">From&lt;(T,)&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 10]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 11]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 12]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+1%5D%3E-for-(T,)\">From&lt;[T; 1]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\">From&lt;[T; 2]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\">From&lt;[T; 3]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\">From&lt;[T; 4]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\">From&lt;[T; 5]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\">From&lt;[T; 6]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 7]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 8]&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\">From&lt;[T; 9]&gt;</a></li><li><a href=\"#impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B)\">FromIterator&lt;(AE, BE)&gt;</a></li><li><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\">FromIterator&lt;(K, V)&gt;</a></li><li><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\">FromIterator&lt;(K, V)&gt;</a></li><li><a href=\"#impl-Hash-for-(T,)\">Hash</a></li><li><a href=\"#impl-Ord-for-(T,)\">Ord</a></li><li><a href=\"#impl-PartialEq-for-(T,)\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-(T,)\">PartialOrd</a></li><li><a href=\"#impl-RangeBounds%3CT%3E-for-(Bound%3C%26T%3E,+Bound%3C%26T%3E)\">RangeBounds&lt;T&gt;</a></li><li><a href=\"#impl-RangeBounds%3CT%3E-for-(Bound%3CT%3E,+Bound%3CT%3E)\">RangeBounds&lt;T&gt;</a></li><li><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\">SliceIndex&lt;[T]&gt;</a></li><li><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\">SliceIndex&lt;str&gt;</a></li><li><a href=\"#impl-StructuralPartialEq-for-(T,)\">StructuralPartialEq</a></li><li><a href=\"#impl-ToSocketAddrs-for-(%26str,+u16)\">ToSocketAddrs</a></li><li><a href=\"#impl-ToSocketAddrs-for-(IpAddr,+u16)\">ToSocketAddrs</a></li><li><a href=\"#impl-ToSocketAddrs-for-(Ipv4Addr,+u16)\">ToSocketAddrs</a></li><li><a href=\"#impl-ToSocketAddrs-for-(Ipv6Addr,+u16)\">ToSocketAddrs</a></li><li><a href=\"#impl-ToSocketAddrs-for-(String,+u16)\">ToSocketAddrs</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-(T,)\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-(T,)\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-(T,)\">Send</a></li><li><a href=\"#impl-Sync-for-(T,)\">Sync</a></li><li><a href=\"#impl-Unpin-for-(T,)\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-(T,)\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In crate std</a></h2><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Primitive Type <a class=\"primitive\" href=\"#\">tuple</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A finite heterogeneous sequence, <code>(T, U, ..)</code>.</p>\n<p>Let’s cover each of those in turn:</p>\n<p>Tuples are <em>finite</em>. In other words, a tuple has a length. Here’s a tuple\nof length <code>3</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>(<span class=\"string\">\"hello\"</span>, <span class=\"number\">5</span>, <span class=\"string\">'c'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++(%22hello%22,+5,+'c');%0A%7D&amp;edition=2021\">Run</a></div>\n<p>‘Length’ is also sometimes called ‘arity’ here; each tuple of a different\nlength is a different, distinct type.</p>\n<p>Tuples are <em>heterogeneous</em>. This means that each element of the tuple can\nhave a different type. In that tuple above, it has the type:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str, i32, char)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+_:%0A++++(%26'static+str,+i32,+char)%0A++++=+(%22hello%22,+5,+'c');%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Tuples are a <em>sequence</em>. This means that they can be accessed by position;\nthis is called ‘tuple indexing’, and it looks like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>tuple = (<span class=\"string\">\"hello\"</span>, <span class=\"number\">5</span>, <span class=\"string\">'c'</span>);\n\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">0</span>, <span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">1</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">2</span>, <span class=\"string\">'c'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple+=+(%22hello%22,+5,+'c');%0A++++%0A++++assert_eq!(tuple.0,+%22hello%22);%0A++++assert_eq!(tuple.1,+5);%0A++++assert_eq!(tuple.2,+'c');%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The sequential nature of the tuple applies to its implementations of various\ntraits. For example, in <a href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> and <a href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a>, the elements are compared\nsequentially until the first non-equal set is found.</p>\n<p>For more about tuples, see <a href=\"../book/ch03-02-data-types.html#the-tuple-type\">the book</a>.</p>\n<h2 id=\"trait-implementations-1\"><a class=\"doc-anchor\" href=\"#trait-implementations-1\">§</a>Trait implementations</h2>\n<p>In this documentation the shorthand <code>(T₁, T₂, …, Tₙ)</code> is used to represent tuples of varying\nlength. When that is used, any trait bound expressed on <code>T</code> applies to each element of the\ntuple independently. Note that this is a convenience notation to avoid repetitive\ndocumentation, not valid Rust syntax.</p>\n<p>Due to a temporary restriction in Rust’s type system, the following traits are only\nimplemented on tuples of arity 12 or less. In the future, this may change:</p>\n<ul>\n<li><a href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a></li>\n<li><a href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a></li>\n<li><a href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a></li>\n<li><a href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a></li>\n<li><a href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a></li>\n<li><a href=\"default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a></li>\n<li><a href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\"><code>Hash</code></a></li>\n<li><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\"><code>From&lt;[T; N]&gt;</code></a></li>\n</ul>\n<p>The following traits are implemented for tuples of any length. These traits have\nimplementations that are automatically generated by the compiler, so are not limited by\nmissing language features.</p>\n<ul>\n<li><a href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a></li>\n<li><a href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a></li>\n<li><a href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a></li>\n<li><a href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a></li>\n<li><a href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a></li>\n<li><a href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\"><code>UnwindSafe</code></a></li>\n<li><a href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\"><code>RefUnwindSafe</code></a></li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>tuple = (<span class=\"string\">\"hello\"</span>, <span class=\"number\">5</span>, <span class=\"string\">'c'</span>);\n\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">0</span>, <span class=\"string\">\"hello\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+tuple+=+(%22hello%22,+5,+'c');%0A++++%0A++++assert_eq!(tuple.0,+%22hello%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Tuples are often used as a return type when you want to return more than\none value:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>calculate_point() -&gt; (i32, i32) {\n    <span class=\"comment\">// Don't do a calculation, that's not the point of the example\n    </span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>)\n}\n\n<span class=\"kw\">let </span>point = calculate_point();\n\n<span class=\"macro\">assert_eq!</span>(point.<span class=\"number\">0</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(point.<span class=\"number\">1</span>, <span class=\"number\">5</span>);\n\n<span class=\"comment\">// Combining this with patterns can be nicer.\n\n</span><span class=\"kw\">let </span>(x, y) = calculate_point();\n\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(y, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+calculate_point()+-%3E+(i32,+i32)+%7B%0A++++++++//+Don't+do+a+calculation,+that's+not+the+point+of+the+example%0A++++++++(4,+5)%0A++++%7D%0A++++%0A++++let+point+=+calculate_point();%0A++++%0A++++assert_eq!(point.0,+4);%0A++++assert_eq!(point.1,+5);%0A++++%0A++++//+Combining+this+with+patterns+can+be+nicer.%0A++++%0A++++let+(x,+y)+=+calculate_point();%0A++++%0A++++assert_eq!(x,+4);%0A++++assert_eq!(y,+5);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Homogeneous tuples can be created from arrays of appropriate length:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>array: [u32; <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>tuple: (u32, u32, u32) = array.into();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+array:+%5Bu32;+3%5D+=+%5B1,+2,+3%5D;%0A++++let+tuple:+(u32,+u32,+u32)+=+array.into();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2600\">source</a></span><a href=\"#impl-Debug-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2600\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"primitive.unit.html\">()</a>, <a class=\"struct\" href=\"fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-Default-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a></h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2254-2255\">source</a></span><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2257\">source</a><a href=\"#method.extend-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>)&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2262\">source</a><a href=\"#method.extend_one-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: (<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>))</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../src/std/collections/hash/map.rs.html#3159-3179\">source</a></span><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3166-3168\">source</a><a href=\"#method.extend-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>)&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3171-3173\">source</a><a href=\"#method.extend_one-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, (k, v): (<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a V</a>))</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3176-3178\">source</a><a href=\"#method.extend_reserve-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#475-478\">source</a></span><a href=\"#impl-Extend%3C(A,+B)%3E-for-(ExtendA,+ExtendB)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, ExtendA, ExtendB&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(A, B)</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(ExtendA, ExtendB)</a><div class=\"where\">where\n    ExtendA: <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;A&gt;,\n    ExtendB: <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;B&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#500\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, into_iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(A, B)</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Allows to <code>extend</code> a tuple of collections that also implement <code>Extend</code>.</p>\n<p>See also: <a href=\"iter/trait.Iterator.html#method.unzip\" title=\"method std::iter::Iterator::unzip\"><code>Iterator::unzip</code></a></p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tuple = (<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>]);\ntuple.extend([(<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">5</span>), (<span class=\"number\">6</span>, <span class=\"number\">7</span>)]);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">0</span>, [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(tuple.<span class=\"number\">1</span>, [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]);\n\n<span class=\"comment\">// also allows for arbitrarily nested tuples as elements\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>nested_tuple = (<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>], (<span class=\"macro\">vec!</span>[<span class=\"number\">2</span>], <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>]));\nnested_tuple.extend([(<span class=\"number\">4</span>, (<span class=\"number\">5</span>, <span class=\"number\">6</span>)), (<span class=\"number\">7</span>, (<span class=\"number\">8</span>, <span class=\"number\">9</span>))]);\n\n<span class=\"kw\">let </span>(a, (b, c)) = nested_tuple;\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>]);\n<span class=\"macro\">assert_eq!</span>(b, [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>]);\n<span class=\"macro\">assert_eq!</span>(c, [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+tuple+=+(vec!%5B0%5D,+vec!%5B1%5D);%0A++++tuple.extend(%5B(2,+3),+(4,+5),+(6,+7)%5D);%0A++++assert_eq!(tuple.0,+%5B0,+2,+4,+6%5D);%0A++++assert_eq!(tuple.1,+%5B1,+3,+5,+7%5D);%0A++++%0A++++//+also+allows+for+arbitrarily+nested+tuples+as+elements%0A++++let+mut+nested_tuple+=+(vec!%5B1%5D,+(vec!%5B2%5D,+vec!%5B3%5D));%0A++++nested_tuple.extend(%5B(4,+(5,+6)),+(7,+(8,+9))%5D);%0A++++%0A++++let+(a,+(b,+c))+=+nested_tuple;%0A++++assert_eq!(a,+%5B1,+4,+7%5D);%0A++++assert_eq!(b,+%5B2,+5,+8%5D);%0A++++assert_eq!(c,+%5B3,+6,+9%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#523\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: <a class=\"primitive\" href=\"primitive.tuple.html\">(A, B)</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#528\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2239\">source</a></span><a href=\"#impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2241\">source</a><a href=\"#method.extend-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2248\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/collections/hash/map.rs.html#3137-3156\">source</a></span><a href=\"#impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"docblock\"><p>Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3143-3145\">source</a><a href=\"#method.extend-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3148-3150\">source</a><a href=\"#method.extend_one-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, (k, v): <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3153-3155\">source</a><a href=\"#method.extend_reserve-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+1%5D%3E-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+1%5D%3E-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+10%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+11%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+12%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+2%5D%3E-for-(T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+3%5D%3E-for-(T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+4%5D%3E-for-(T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+5%5D%3E-for-(T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+6%5D%3E-for-(T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+7%5D%3E-for-(T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+8%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C%5BT;+9%5D%3E-for-(T,+T,+T,+T,+T,+T,+T,+T,+T)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a>) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(I,+u16)%3E-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#557\">source</a></span><a href=\"#impl-From%3C(I,+u16)%3E-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;(I, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)&gt; for <a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#564\">source</a><a href=\"#method.from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(pieces: (I, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)) -&gt; <a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a></h4></section></summary><div class=\"docblock\"><p>Converts a tuple struct (Into&lt;<a href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\"><code>IpAddr</code></a>&gt;, <code>u16</code>) into a <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>.</p>\n<p>This conversion creates a <a href=\"net/enum.SocketAddr.html#variant.V4\" title=\"variant std::net::SocketAddr::V4\"><code>SocketAddr::V4</code></a> for an <a href=\"net/enum.IpAddr.html#variant.V4\" title=\"variant std::net::IpAddr::V4\"><code>IpAddr::V4</code></a>\nand creates a <a href=\"net/enum.SocketAddr.html#variant.V6\" title=\"variant std::net::SocketAddr::V6\"><code>SocketAddr::V6</code></a> for an <a href=\"net/enum.IpAddr.html#variant.V6\" title=\"variant std::net::IpAddr::V6\"><code>IpAddr::V6</code></a>.</p>\n<p><code>u16</code> is treated as port of the newly created <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,)%3E-for-%5BT;+1%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 1]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T)%3E-for-%5BT;+2%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 2]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T)%3E-for-%5BT;+3%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 3]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T)%3E-for-%5BT;+4%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 4]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T)%3E-for-%5BT;+5%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 5]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T)%3E-for-%5BT;+6%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 6]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+7%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 7]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 8]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+9%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 9]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+10%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 10]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+11%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 11]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-From%3C(T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T,+T)%3E-for-%5BT;+12%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a>&gt; for <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(tuple: <a class=\"primitive\" href=\"primitive.tuple.html\">(T, T, T, T, T, T, T, T, T, T, T, T)</a>) -&gt; <a class=\"primitive\" href=\"primitive.array.html\">[T; 12]</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#173-176\">source</a></span><a href=\"#impl-FromIterator%3C(AE,+BE)%3E-for-(A,+B)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, AE, BE&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(AE, BE)</a>&gt; for <a class=\"primitive\" href=\"primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;AE&gt;,\n    B: <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;BE&gt;,</div></h3></section></summary><div class=\"docblock\"><p>This implementation turns an iterator of tuples into a tuple of types which implement\n<a href=\"default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> and <a href=\"iter/trait.Extend.html\" title=\"trait std::iter::Extend\"><code>Extend</code></a>.</p>\n<p>This is similar to <a href=\"iter/trait.Iterator.html#method.unzip\" title=\"method std::iter::Iterator::unzip\"><code>Iterator::unzip</code></a>, but is also composable with other <a href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\"><code>FromIterator</code></a>\nimplementations:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>string = <span class=\"string\">\"1,2,123,4\"</span>;\n\n<span class=\"kw\">let </span>(numbers, lengths): (Vec&lt;<span class=\"kw\">_</span>&gt;, Vec&lt;<span class=\"kw\">_</span>&gt;) = string\n    .split(<span class=\"string\">','</span>)\n    .map(|s| s.parse().map(|n: u32| (n, s.len())))\n    .collect::&lt;<span class=\"prelude-ty\">Result</span>&lt;<span class=\"kw\">_</span>, <span class=\"kw\">_</span>&gt;&gt;()<span class=\"question-mark\">?</span>;\n\n<span class=\"macro\">assert_eq!</span>(numbers, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">123</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(lengths, [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+Result%3C(),+core::num::ParseIntError%3E+%7B%0Alet+string+=+%221,2,123,4%22;%0A%0Alet+(numbers,+lengths):+(Vec%3C_%3E,+Vec%3C_%3E)+=+string%0A++++.split(',')%0A++++.map(%7Cs%7C+s.parse().map(%7Cn:+u32%7C+(n,+s.len())))%0A++++.collect::%3CResult%3C_,+_%3E%3E()?;%0A%0Aassert_eq!(numbers,+%5B1,+2,+123,+4%5D);%0Aassert_eq!(lengths,+%5B1,+1,+3,+1%5D);%0AOk(())+%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#178\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"primitive.tuple.html\">(A, B)</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(AE, BE)</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2224\">source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-BTreeMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2225\">source</a><a href=\"#method.from_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/collections/hash/map.rs.html#3122-3132\">source</a></span><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"hash/trait.BuildHasher.html\" title=\"trait std::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/collections/hash/map.rs.html#3127-3131\">source</a><a href=\"#method.from_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T: <a class=\"trait\" href=\"iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.tuple.html\">(K, V)</a>&gt;&gt;(iter: T) -&gt; <a class=\"struct\" href=\"collections/hash_map/struct.HashMap.html\" title=\"struct std::collections::hash_map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#928\">source</a></span><a href=\"#impl-Hash-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#928\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;S&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut S</a>)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-Ord-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-PartialEq-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-PartialOrd-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.tuple.html\">(T,)</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RangeBounds%3CT%3E-for-(Bound%3C%26T%3E,+Bound%3C%26T%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#922\">source</a></span><a href=\"#impl-RangeBounds%3CT%3E-for-(Bound%3C%26T%3E,+Bound%3C%26T%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt; for (<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a T</a>&gt;)<div class=\"where\">where\n    T: 'a + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.start_bound-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#923\">source</a><a href=\"#method.start_bound-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#tymethod.start_bound\" class=\"fn\">start_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">Start index bound. <a href=\"ops/trait.RangeBounds.html#tymethod.start_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.end_bound-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#927\">source</a><a href=\"#method.end_bound-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#tymethod.end_bound\" class=\"fn\">end_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">End index bound. <a href=\"ops/trait.RangeBounds.html#tymethod.end_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#817-820\">source</a></span><a href=\"#method.contains-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#method.contains\" class=\"fn\">contains</a>&lt;U&gt;(&amp;self, item: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if <code>item</code> is contained in the range. <a href=\"ops/trait.RangeBounds.html#method.contains\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RangeBounds%3CT%3E-for-(Bound%3CT%3E,+Bound%3CT%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#903\">source</a></span><a href=\"#impl-RangeBounds%3CT%3E-for-(Bound%3CT%3E,+Bound%3CT%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;T&gt; for (<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;T&gt;)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.start_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#904\">source</a><a href=\"#method.start_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#tymethod.start_bound\" class=\"fn\">start_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">Start index bound. <a href=\"ops/trait.RangeBounds.html#tymethod.start_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.end_bound\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#912\">source</a><a href=\"#method.end_bound\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#tymethod.end_bound\" class=\"fn\">end_bound</a>(&amp;self) -&gt; <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\">End index bound. <a href=\"ops/trait.RangeBounds.html#tymethod.end_bound\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/range.rs.html#817-820\">source</a></span><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ops/trait.RangeBounds.html#method.contains\" class=\"fn\">contains</a>&lt;U&gt;(&amp;self, item: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;U</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;U&gt;,\n    U: <a class=\"trait\" href=\"cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;T&gt; + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if <code>item</code> is contained in the range. <a href=\"ops/trait.RangeBounds.html#method.contains\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#854\">source</a></span><a href=\"#impl-SliceIndex%3C%5BT%5D%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt; for (<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#858\">source</a><a href=\"#method.get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#863\">source</a><a href=\"#method.get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#868\">source</a><a href=\"#method.get_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a>&lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#874\">source</a><a href=\"#method.get_unchecked_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(\n    self,\n    slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a>&lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#880\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(\n    self,\n    slice: &amp;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; &amp;&lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/index.rs.html#885\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(\n    self,\n    slice: &amp;mut <a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>,\n) -&gt; &amp;mut &lt;(<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;) as <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#278\">source</a></span><a href=\"#impl-SliceIndex%3Cstr%3E-for-(Bound%3Cusize%3E,+Bound%3Cusize%3E)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt; for (<a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;, <a class=\"enum\" href=\"ops/enum.Bound.html\" title=\"enum std::ops::Bound\">Bound</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;)</h3></section></summary><div class=\"docblock\"><p>Implements substring slicing for arbitrary bounds.</p>\n<p>Returns a slice of the given string bounded by the byte indices\nprovided by each bound.</p>\n<p>This operation is <em>O</em>(1).</p>\n<h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>Panics if <code>begin</code> or <code>end</code> (if it exists and once adjusted for\ninclusion/exclusion) does not point to the starting byte offset of\na character (as defined by <code>is_char_boundary</code>), if <code>begin &gt; end</code>, or if\n<code>end &gt; len</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"slice/trait.SliceIndex.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\">The output type returned by methods.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#282\">source</a><a href=\"#method.get-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get\" class=\"fn\">get</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#287\">source</a><a href=\"#method.get_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, if in\nbounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#292\">source</a><a href=\"#method.get_unchecked-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(self, slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#299\">source</a><a href=\"#method.get_unchecked_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"slice/trait.SliceIndex.html#tymethod.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>(self, slice: <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable pointer to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling <code>slice</code> pointer\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#306\">source</a><a href=\"#method.index-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index\" class=\"fn\">index</a>(self, slice: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a shared reference to the output at this location, panicking\nif out of bounds.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#311\">source</a><a href=\"#method.index_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"slice/trait.SliceIndex.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(self, slice: &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; &amp;mut <a class=\"primitive\" href=\"primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_index_methods</code>)</span></div></span><div class=\"docblock\">Returns a mutable reference to the output at this location, panicking\nif out of bounds.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-(%26str,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#251-268\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(%26str,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (&amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#253-267\">source</a><a href=\"#method.to_socket_addrs-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-(IpAddr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#210-219\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(IpAddr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"enum\" href=\"net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#212-218\">source</a><a href=\"#method.to_socket_addrs-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-(Ipv4Addr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#222-228\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(Ipv4Addr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#224-227\">source</a><a href=\"#method.to_socket_addrs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-(Ipv6Addr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#231-237\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(Ipv6Addr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a>, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#233-236\">source</a><a href=\"#method.to_socket_addrs-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToSocketAddrs-for-(String,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"../src/std/net/socket_addr.rs.html#271-276\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(String,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"net/trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"string/struct.String.html\" title=\"struct std::string::String\">String</a>, <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"net/trait.ToSocketAddrs.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\">Returned iterator over socket addresses which this type may correspond\nto.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_socket_addrs-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../src/std/net/socket_addr.rs.html#273-275\">source</a><a href=\"#method.to_socket_addrs-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></summary><div class=\"docblock\">Converts this object to an iterator of resolved <a href=\"net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s. <a href=\"net/trait.ToSocketAddrs.html#tymethod.to_socket_addrs\">Read more</a></div></details></div></details><section id=\"impl-ConstParamTy-for-(T,)\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#impl-ConstParamTy-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.ConstParamTy.html\" title=\"trait std::marker::ConstParamTy\">ConstParamTy</a>,</div></h3></section><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><section id=\"impl-Eq-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-Eq-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><section id=\"impl-StructuralPartialEq-for-(T,)\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a><a href=\"#impl-StructuralPartialEq-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.StructuralPartialEq.html\" title=\"trait std::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a></h3></section><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-(T,)\" class=\"impl\"><a href=\"#impl-Freeze-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-(T,)\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-(T,)\" class=\"impl\"><a href=\"#impl-Send-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-(T,)\" class=\"impl\"><a href=\"#impl-Sync-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-(T,)\" class=\"impl\"><a href=\"#impl-Unpin-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-(T,)\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"primitive\" href=\"primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:10:21.702Z"
}