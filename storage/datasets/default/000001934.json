{
	"title": "write in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.write.html",
	"markdown": "# write in std::ptr - Rust\n\n## Function [std](../index.html)::[ptr](index.html)::[write](#)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#1512) ·\n\n```\npub unsafe fn write<T>(dst: *mut T, src: T)\n```\n\nExpand description\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\n`write` does not drop the contents of `dst`. This is safe, but it could leak allocations or resources, so care should be taken not to overwrite an object that should be dropped.\n\nAdditionally, it does not drop `src`. Semantically, `src` is moved into the location pointed to by `dst`.\n\nThis is appropriate for initializing uninitialized memory, or overwriting memory that has previously been [`read`](fn.read.html \"fn std::ptr::read\") from.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `dst` must be [valid](about:blank/index.html#safety \"mod std::ptr\") for writes.\n    \n-   `dst` must be properly aligned. Use [`write_unaligned`](fn.write_unaligned.html \"fn std::ptr::write_unaligned\") if this is not the case.\n    \n\nNote that even if `T` has size `0`, the pointer must be non-null and properly aligned.\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nlet mut x = 0;\nlet y = &mut x as *mut i32;\nlet z = 12;\n\nunsafe {\n    std::ptr::write(y, z);\n    assert_eq!(std::ptr::read(y), 12);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+0;%0A++++let+y+=+%26mut+x+as+*mut+i32;%0A++++let+z+=+12;%0A++++%0A++++unsafe+%7B%0A++++++++std::ptr::write(y,+z);%0A++++++++assert_eq!(std::ptr::read(y),+12);%0A++++%7D%0A%7D&edition=2021)\n\nManually implement [`mem::swap`](../mem/fn.swap.html \"fn std::mem::swap\"):\n\n```\nuse std::ptr;\n\nfn swap<T>(a: &mut T, b: &mut T) {\n    unsafe {\n        // Create a bitwise copy of the value at `a` in `tmp`.\n        let tmp = ptr::read(a);\n\n        // Exiting at this point (either by explicitly returning or by\n        // calling a function which panics) would cause the value in `tmp` to\n        // be dropped while the same value is still referenced by `a`. This\n        // could trigger undefined behavior if `T` is not `Copy`.\n\n        // Create a bitwise copy of the value at `b` in `a`.\n        // This is safe because mutable references cannot alias.\n        ptr::copy_nonoverlapping(b, a, 1);\n\n        // As above, exiting here could trigger undefined behavior because\n        // the same value is referenced by `a` and `b`.\n\n        // Move `tmp` into `b`.\n        ptr::write(b, tmp);\n\n        // `tmp` has been moved (`write` takes ownership of its second argument),\n        // so nothing is dropped implicitly here.\n    }\n}\n\nlet mut foo = \"foo\".to_owned();\nlet mut bar = \"bar\".to_owned();\n\nswap(&mut foo, &mut bar);\n\nassert_eq!(foo, \"bar\");\nassert_eq!(bar, \"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++fn+swap%3CT%3E(a:+%26mut+T,+b:+%26mut+T)+%7B%0A++++++++unsafe+%7B%0A++++++++++++//+Create+a+bitwise+copy+of+the+value+at+%60a%60+in+%60tmp%60.%0A++++++++++++let+tmp+=+ptr::read(a);%0A++++%0A++++++++++++//+Exiting+at+this+point+(either+by+explicitly+returning+or+by%0A++++++++++++//+calling+a+function+which+panics)+would+cause+the+value+in+%60tmp%60+to%0A++++++++++++//+be+dropped+while+the+same+value+is+still+referenced+by+%60a%60.+This%0A++++++++++++//+could+trigger+undefined+behavior+if+%60T%60+is+not+%60Copy%60.%0A++++%0A++++++++++++//+Create+a+bitwise+copy+of+the+value+at+%60b%60+in+%60a%60.%0A++++++++++++//+This+is+safe+because+mutable+references+cannot+alias.%0A++++++++++++ptr::copy_nonoverlapping(b,+a,+1);%0A++++%0A++++++++++++//+As+above,+exiting+here+could+trigger+undefined+behavior+because%0A++++++++++++//+the+same+value+is+referenced+by+%60a%60+and+%60b%60.%0A++++%0A++++++++++++//+Move+%60tmp%60+into+%60b%60.%0A++++++++++++ptr::write(b,+tmp);%0A++++%0A++++++++++++//+%60tmp%60+has+been+moved+(%60write%60+takes+ownership+of+its+second+argument),%0A++++++++++++//+so+nothing+is+dropped+implicitly+here.%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+foo+=+%22foo%22.to_owned();%0A++++let+mut+bar+=+%22bar%22.to_owned();%0A++++%0A++++swap(%26mut+foo,+%26mut+bar);%0A++++%0A++++assert_eq!(foo,+%22bar%22);%0A++++assert_eq!(bar,+%22foo%22);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Overwrites a memory location with the given value without reading or dropping the old value.\"><title>write in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">write</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#1512\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe fn write&lt;T&gt;(dst: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, src: T)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p><code>write</code> does not drop the contents of <code>dst</code>. This is safe, but it could leak\nallocations or resources, so care should be taken not to overwrite an object\nthat should be dropped.</p>\n<p>Additionally, it does not drop <code>src</code>. Semantically, <code>src</code> is moved into the\nlocation pointed to by <code>dst</code>.</p>\n<p>This is appropriate for initializing uninitialized memory, or overwriting\nmemory that has previously been <a href=\"fn.read.html\" title=\"fn std::ptr::read\"><code>read</code></a> from.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>dst</code> must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for writes.</p>\n</li>\n<li>\n<p><code>dst</code> must be properly aligned. Use <a href=\"fn.write_unaligned.html\" title=\"fn std::ptr::write_unaligned\"><code>write_unaligned</code></a> if this is not the\ncase.</p>\n</li>\n</ul>\n<p>Note that even if <code>T</code> has size <code>0</code>, the pointer must be non-null and properly aligned.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0</span>;\n<span class=\"kw\">let </span>y = <span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n<span class=\"kw\">let </span>z = <span class=\"number\">12</span>;\n\n<span class=\"kw\">unsafe </span>{\n    std::ptr::write(y, z);\n    <span class=\"macro\">assert_eq!</span>(std::ptr::read(y), <span class=\"number\">12</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+x+=+0;%0A++++let+y+=+%26mut+x+as+*mut+i32;%0A++++let+z+=+12;%0A++++%0A++++unsafe+%7B%0A++++++++std::ptr::write(y,+z);%0A++++++++assert_eq!(std::ptr::read(y),+12);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Manually implement <a href=\"../mem/fn.swap.html\" title=\"fn std::mem::swap\"><code>mem::swap</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">fn </span>swap&lt;T&gt;(a: <span class=\"kw-2\">&amp;mut </span>T, b: <span class=\"kw-2\">&amp;mut </span>T) {\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Create a bitwise copy of the value at `a` in `tmp`.\n        </span><span class=\"kw\">let </span>tmp = ptr::read(a);\n\n        <span class=\"comment\">// Exiting at this point (either by explicitly returning or by\n        // calling a function which panics) would cause the value in `tmp` to\n        // be dropped while the same value is still referenced by `a`. This\n        // could trigger undefined behavior if `T` is not `Copy`.\n\n        // Create a bitwise copy of the value at `b` in `a`.\n        // This is safe because mutable references cannot alias.\n        </span>ptr::copy_nonoverlapping(b, a, <span class=\"number\">1</span>);\n\n        <span class=\"comment\">// As above, exiting here could trigger undefined behavior because\n        // the same value is referenced by `a` and `b`.\n\n        // Move `tmp` into `b`.\n        </span>ptr::write(b, tmp);\n\n        <span class=\"comment\">// `tmp` has been moved (`write` takes ownership of its second argument),\n        // so nothing is dropped implicitly here.\n    </span>}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>foo = <span class=\"string\">\"foo\"</span>.to_owned();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bar = <span class=\"string\">\"bar\"</span>.to_owned();\n\nswap(<span class=\"kw-2\">&amp;mut </span>foo, <span class=\"kw-2\">&amp;mut </span>bar);\n\n<span class=\"macro\">assert_eq!</span>(foo, <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(bar, <span class=\"string\">\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++fn+swap%3CT%3E(a:+%26mut+T,+b:+%26mut+T)+%7B%0A++++++++unsafe+%7B%0A++++++++++++//+Create+a+bitwise+copy+of+the+value+at+%60a%60+in+%60tmp%60.%0A++++++++++++let+tmp+=+ptr::read(a);%0A++++%0A++++++++++++//+Exiting+at+this+point+(either+by+explicitly+returning+or+by%0A++++++++++++//+calling+a+function+which+panics)+would+cause+the+value+in+%60tmp%60+to%0A++++++++++++//+be+dropped+while+the+same+value+is+still+referenced+by+%60a%60.+This%0A++++++++++++//+could+trigger+undefined+behavior+if+%60T%60+is+not+%60Copy%60.%0A++++%0A++++++++++++//+Create+a+bitwise+copy+of+the+value+at+%60b%60+in+%60a%60.%0A++++++++++++//+This+is+safe+because+mutable+references+cannot+alias.%0A++++++++++++ptr::copy_nonoverlapping(b,+a,+1);%0A++++%0A++++++++++++//+As+above,+exiting+here+could+trigger+undefined+behavior+because%0A++++++++++++//+the+same+value+is+referenced+by+%60a%60+and+%60b%60.%0A++++%0A++++++++++++//+Move+%60tmp%60+into+%60b%60.%0A++++++++++++ptr::write(b,+tmp);%0A++++%0A++++++++++++//+%60tmp%60+has+been+moved+(%60write%60+takes+ownership+of+its+second+argument),%0A++++++++++++//+so+nothing+is+dropped+implicitly+here.%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+foo+=+%22foo%22.to_owned();%0A++++let+mut+bar+=+%22bar%22.to_owned();%0A++++%0A++++swap(%26mut+foo,+%26mut+bar);%0A++++%0A++++assert_eq!(foo,+%22bar%22);%0A++++assert_eq!(bar,+%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:28.803Z"
}