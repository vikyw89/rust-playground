{
	"title": "The Manifest Format - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/manifest.html",
	"markdown": "# The Manifest Format - The Cargo Book\n\nThe `Cargo.toml` file for each package is called its _manifest_. It is written in the [TOML](https://toml.io/) format. It contains metadata that is needed to compile the package. Checkout the `cargo locate-project` section for more detail on how cargo finds the manifest file.\n\nEvery manifest file consists of the following sections:\n\n-   [`cargo-features`](unstable.html) — Unstable, nightly-only features.\n-   [`[package]`](#the-package-section) — Defines a package.\n    -   [`name`](#the-name-field) — The name of the package.\n    -   [`version`](#the-version-field) — The version of the package.\n    -   [`authors`](#the-authors-field) — The authors of the package.\n    -   [`edition`](#the-edition-field) — The Rust edition.\n    -   [`rust-version`](#the-rust-version-field) — The minimal supported Rust version.\n    -   [`description`](#the-description-field) — A description of the package.\n    -   [`documentation`](#the-documentation-field) — URL of the package documentation.\n    -   [`readme`](#the-readme-field) — Path to the package’s README file.\n    -   [`homepage`](#the-homepage-field) — URL of the package homepage.\n    -   [`repository`](#the-repository-field) — URL of the package source repository.\n    -   [`license`](#the-license-and-license-file-fields) — The package license.\n    -   [`license-file`](#the-license-and-license-file-fields) — Path to the text of the license.\n    -   [`keywords`](#the-keywords-field) — Keywords for the package.\n    -   [`categories`](#the-categories-field) — Categories of the package.\n    -   [`workspace`](#the-workspace-field) — Path to the workspace for the package.\n    -   [`build`](#the-build-field) — Path to the package build script.\n    -   [`links`](#the-links-field) — Name of the native library the package links with.\n    -   [`exclude`](#the-exclude-and-include-fields) — Files to exclude when publishing.\n    -   [`include`](#the-exclude-and-include-fields) — Files to include when publishing.\n    -   [`publish`](#the-publish-field) — Can be used to prevent publishing the package.\n    -   [`metadata`](#the-metadata-table) — Extra settings for external tools.\n    -   [`default-run`](#the-default-run-field) — The default binary to run by [`cargo run`](../commands/cargo-run.html).\n    -   [`autobins`](about:blank/cargo-targets.html#target-auto-discovery) — Disables binary auto discovery.\n    -   [`autoexamples`](about:blank/cargo-targets.html#target-auto-discovery) — Disables example auto discovery.\n    -   [`autotests`](about:blank/cargo-targets.html#target-auto-discovery) — Disables test auto discovery.\n    -   [`autobenches`](about:blank/cargo-targets.html#target-auto-discovery) — Disables bench auto discovery.\n    -   [`resolver`](about:blank/resolver.html#resolver-versions) — Sets the dependency resolver to use.\n-   Target tables: (see [configuration](about:blank/cargo-targets.html#configuring-a-target) for settings)\n    -   [`[lib]`](about:blank/cargo-targets.html#library) — Library target settings.\n    -   [`[[bin]]`](about:blank/cargo-targets.html#binaries) — Binary target settings.\n    -   [`[[example]]`](about:blank/cargo-targets.html#examples) — Example target settings.\n    -   [`[[test]]`](about:blank/cargo-targets.html#tests) — Test target settings.\n    -   [`[[bench]]`](about:blank/cargo-targets.html#benchmarks) — Benchmark target settings.\n-   Dependency tables:\n    -   [`[dependencies]`](specifying-dependencies.html) — Package library dependencies.\n    -   [`[dev-dependencies]`](about:blank/specifying-dependencies.html#development-dependencies) — Dependencies for examples, tests, and benchmarks.\n    -   [`[build-dependencies]`](about:blank/specifying-dependencies.html#build-dependencies) — Dependencies for build scripts.\n    -   [`[target]`](about:blank/specifying-dependencies.html#platform-specific-dependencies) — Platform-specific dependencies.\n-   [`[badges]`](#the-badges-section) — Badges to display on a registry.\n-   [`[features]`](features.html) — Conditional compilation features.\n-   [`[lints]`](#the-lints-section) — Configure linters for this package.\n-   [`[patch]`](about:blank/overriding-dependencies.html#the-patch-section) — Override dependencies.\n-   [`[replace]`](about:blank/overriding-dependencies.html#the-replace-section) — Override dependencies (deprecated).\n-   [`[profile]`](profiles.html) — Compiler settings and optimizations.\n-   [`[workspace]`](workspaces.html) — The workspace definition.\n\n## [The `[package]` section](#the-package-section)\n\nThe first section in a `Cargo.toml` is `[package]`.\n\n```toml\n[package]\nname = \"hello_world\" # the name of the package\nversion = \"0.1.0\"    # the current version, obeying semver\nauthors = [\"Alice <a@example.com>\", \"Bob <b@example.com>\"]\n\n```\n\nThe only field required by Cargo is [`name`](#the-name-field). If publishing to a registry, the registry may require additional fields. See the notes below and [the publishing chapter](publishing.html) for requirements for publishing to [crates.io](https://crates.io/).\n\n### [The `name` field](#the-name-field)\n\nThe package name is an identifier used to refer to the package. It is used when listed as a dependency in another package, and as the default name of inferred lib and bin targets.\n\nThe name must use only [alphanumeric](about:blank/std/primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and cannot be empty.\n\nNote that [`cargo new`](../commands/cargo-new.html) and [`cargo init`](../commands/cargo-init.html) impose some additional restrictions on the package name, such as enforcing that it is a valid Rust identifier and not a keyword. [crates.io](https://crates.io/) imposes even more restrictions, such as:\n\n-   Only ASCII characters are allowed.\n-   Do not use reserved names.\n-   Do not use special Windows names such as “nul”.\n-   Use a maximum of 64 characters of length.\n\n### [The `version` field](#the-version-field)\n\nCargo bakes in the concept of [Semantic Versioning](https://semver.org/), so make sure you follow some basic rules:\n\n-   Before you reach 1.0.0, anything goes, but if you make breaking changes, increment the minor version. In Rust, breaking changes include adding fields to structs or variants to enums.\n-   After 1.0.0, only make breaking changes when you increment the major version. Don’t break the build.\n-   After 1.0.0, don’t add any new public API (no new `pub` anything) in patch-level versions. Always increment the minor version if you add any new `pub` structs, traits, fields, types, functions, methods or anything else.\n-   Use version numbers with three numeric parts such as 1.0.0 rather than 1.0.\n\nSee the [Resolver](resolver.html) chapter for more information on how Cargo uses versions to resolve dependencies, and for guidelines on setting your own version. See the [SemVer compatibility](semver.html) chapter for more details on exactly what constitutes a breaking change.\n\nThis field is optional and defaults to `0.0.0`. The field is required for publishing packages.\n\nThe optional `authors` field lists in an array the people or organizations that are considered the “authors” of the package. The exact meaning is open to interpretation — it may list the original or primary authors, current maintainers, or owners of the package. An optional email address may be included within angled brackets at the end of each author entry.\n\n```toml\n[package]\n# ...\nauthors = [\"Graydon Hoare\", \"Fnu Lnu <no-reply@rust-lang.org>\"]\n\n```\n\nThis field is only surfaced in package metadata and in the `CARGO_PKG_AUTHORS` environment variable within `build.rs`. It is not displayed in the [crates.io](https://crates.io/) user interface.\n\n> **Warning**: Package manifests cannot be changed once published, so this field cannot be changed or removed in already-published versions of a package.\n\n### [The `edition` field](#the-edition-field)\n\nThe `edition` key is an optional key that affects which [Rust Edition](../../edition-guide/index.html) your package is compiled with. Setting the `edition` key in `[package]` will affect all targets/crates in the package, including test suites, benchmarks, binaries, examples, etc.\n\n```toml\n[package]\n# ...\nedition = '2021'\n\n```\n\nMost manifests have the `edition` field filled in automatically by [`cargo new`](../commands/cargo-new.html) with the latest stable edition. By default `cargo new` creates a manifest with the 2021 edition currently.\n\nIf the `edition` field is not present in `Cargo.toml`, then the 2015 edition is assumed for backwards compatibility. Note that all manifests created with [`cargo new`](../commands/cargo-new.html) will not use this historical fallback because they will have `edition` explicitly specified to a newer value.\n\n### [The `rust-version` field](#the-rust-version-field)\n\nThe `rust-version` field is an optional key that tells cargo what version of the Rust language and compiler your package can be compiled with. If the currently selected version of the Rust compiler is older than the stated version, cargo will exit with an error, telling the user what version is required.\n\nThe first version of Cargo that supports this field was released with Rust 1.56.0. In older releases, the field will be ignored, and Cargo will display a warning.\n\n```toml\n[package]\n# ...\nrust-version = \"1.56\"\n\n```\n\nThe Rust version must be a bare version number with two or three components; it cannot include semver operators or pre-release identifiers. Compiler pre-release identifiers such as -nightly will be ignored while checking the Rust version. The `rust-version` must be equal to or newer than the version that first introduced the configured `edition`.\n\nThe `rust-version` may be ignored using the `--ignore-rust-version` option.\n\nSetting the `rust-version` key in `[package]` will affect all targets/crates in the package, including test suites, benchmarks, binaries, examples, etc.\n\nTo find the minimum `rust-version` compatible with your project, you can use third-party tools like [`cargo-msrv`](https://crates.io/crates/cargo-msrv).\n\nWhen used on packages that get published, we recommend [verifying the `rust-version`](about:blank/guide/continuous-integration.html#verifying-rust-version).\n\n### [The `description` field](#the-description-field)\n\nThe description is a short blurb about the package. [crates.io](https://crates.io/) will display this with your package. This should be plain text (not Markdown).\n\n```toml\n[package]\n# ...\ndescription = \"A short description of my package\"\n\n```\n\n> **Note**: [crates.io](https://crates.io/) requires the `description` to be set.\n\n### [The `documentation` field](#the-documentation-field)\n\nThe `documentation` field specifies a URL to a website hosting the crate’s documentation. If no URL is specified in the manifest file, [crates.io](https://crates.io/) will automatically link your crate to the corresponding [docs.rs](https://docs.rs/) page when the documentation has been built and is available (see [docs.rs queue](https://docs.rs/releases/queue)).\n\n```toml\n[package]\n# ...\ndocumentation = \"https://docs.rs/bitflags\"\n\n```\n\n### [The `readme` field](#the-readme-field)\n\nThe `readme` field should be the path to a file in the package root (relative to this `Cargo.toml`) that contains general information about the package. This file will be transferred to the registry when you publish. [crates.io](https://crates.io/) will interpret it as Markdown and render it on the crate’s page.\n\n```toml\n[package]\n# ...\nreadme = \"README.md\"\n\n```\n\nIf no value is specified for this field, and a file named `README.md`, `README.txt` or `README` exists in the package root, then the name of that file will be used. You can suppress this behavior by setting this field to `false`. If the field is set to `true`, a default value of `README.md` will be assumed.\n\n### [The `homepage` field](#the-homepage-field)\n\nThe `homepage` field should be a URL to a site that is the home page for your package.\n\n```toml\n[package]\n# ...\nhomepage = \"https://serde.rs\"\n\n```\n\nA value should only be set for `homepage` if there is a dedicated website for the crate other than the source repository or API documentation. Do not make `homepage` redundant with either the `documentation` or `repository` values.\n\n### [The `repository` field](#the-repository-field)\n\nThe `repository` field should be a URL to the source repository for your package.\n\n```toml\n[package]\n# ...\nrepository = \"https://github.com/rust-lang/cargo\"\n\n```\n\n### [The `license` and `license-file` fields](#the-license-and-license-file-fields)\n\nThe `license` field contains the name of the software license that the package is released under. The `license-file` field contains the path to a file containing the text of the license (relative to this `Cargo.toml`).\n\n[crates.io](https://crates.io/) interprets the `license` field as an [SPDX 2.3 license expression](https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/). The name must be a known license from the [SPDX license list 3.20](https://github.com/spdx/license-list-data/tree/v3.20). See the [SPDX site](https://spdx.org/) for more information.\n\nSPDX license expressions support AND and OR operators to combine multiple licenses.[1](#slash)\n\n```toml\n[package]\n# ...\nlicense = \"MIT OR Apache-2.0\"\n\n```\n\nUsing `OR` indicates the user may choose either license. Using `AND` indicates the user must comply with both licenses simultaneously. The `WITH` operator indicates a license with a special exception. Some examples:\n\n-   `MIT OR Apache-2.0`\n-   `LGPL-2.1-only AND MIT AND BSD-2-Clause`\n-   `GPL-2.0-or-later WITH Bison-exception-2.2`\n\nIf a package is using a nonstandard license, then the `license-file` field may be specified in lieu of the `license` field.\n\n```toml\n[package]\n# ...\nlicense-file = \"LICENSE.txt\"\n\n```\n\n> **Note**: [crates.io](https://crates.io/) requires either `license` or `license-file` to be set.\n\n### [The `keywords` field](#the-keywords-field)\n\nThe `keywords` field is an array of strings that describe this package. This can help when searching for the package on a registry, and you may choose any words that would help someone find this crate.\n\n```toml\n[package]\n# ...\nkeywords = [\"gamedev\", \"graphics\"]\n\n```\n\n> **Note**: [crates.io](https://crates.io/) allows a maximum of 5 keywords. Each keyword must be ASCII text, have at most 20 characters, start with an alphanumeric character, and only contain letters, numbers, `_`, `-` or `+`.\n\n### [The `categories` field](#the-categories-field)\n\nThe `categories` field is an array of strings of the categories this package belongs to.\n\n```toml\ncategories = [\"command-line-utilities\", \"development-tools::cargo-plugins\"]\n\n```\n\n> **Note**: [crates.io](https://crates.io/) has a maximum of 5 categories. Each category should match one of the strings available at [https://crates.io/category\\_slugs](https://crates.io/category_slugs), and must match exactly.\n\n### [The `workspace` field](#the-workspace-field)\n\nThe `workspace` field can be used to configure the workspace that this package will be a member of. If not specified this will be inferred as the first Cargo.toml with `[workspace]` upwards in the filesystem. Setting this is useful if the member is not inside a subdirectory of the workspace root.\n\n```toml\n[package]\n# ...\nworkspace = \"path/to/workspace/root\"\n\n```\n\nThis field cannot be specified if the manifest already has a `[workspace]` table defined. That is, a crate cannot both be a root crate in a workspace (contain `[workspace]`) and also be a member crate of another workspace (contain `package.workspace`).\n\nFor more information, see the [workspaces chapter](workspaces.html).\n\n### [The `build` field](#the-build-field)\n\nThe `build` field specifies a file in the package root which is a [build script](build-scripts.html) for building native code. More information can be found in the [build script guide](build-scripts.html).\n\n```toml\n[package]\n# ...\nbuild = \"build.rs\"\n\n```\n\nThe default is `\"build.rs\"`, which loads the script from a file named `build.rs` in the root of the package. Use `build = \"custom_build_name.rs\"` to specify a path to a different file or `build = false` to disable automatic detection of the build script.\n\n### [The `links` field](#the-links-field)\n\nThe `links` field specifies the name of a native library that is being linked to. More information can be found in the [`links`](about:blank/build-scripts.html#the-links-manifest-key) section of the build script guide.\n\nFor example, a crate that links a native library called “git2” (e.g. `libgit2.a` on Linux) may specify:\n\n```toml\n[package]\n# ...\nlinks = \"git2\"\n\n```\n\n### [The `exclude` and `include` fields](#the-exclude-and-include-fields)\n\nThe `exclude` and `include` fields can be used to explicitly specify which files are included when packaging a project to be [published](publishing.html), and certain kinds of change tracking (described below). The patterns specified in the `exclude` field identify a set of files that are not included, and the patterns in `include` specify files that are explicitly included. You may run [`cargo package --list`](../commands/cargo-package.html) to verify which files will be included in the package.\n\n```toml\n[package]\n# ...\nexclude = [\"/ci\", \"images/\", \".*\"]\n\n```\n\n```toml\n[package]\n# ...\ninclude = [\"/src\", \"COPYRIGHT\", \"/examples\", \"!/examples/big_example\"]\n\n```\n\nThe default if neither field is specified is to include all files from the root of the package, except for the exclusions listed below.\n\nIf `include` is not specified, then the following files will be excluded:\n\n-   If the package is not in a git repository, all “hidden” files starting with a dot will be skipped.\n-   If the package is in a git repository, any files that are ignored by the [gitignore](https://git-scm.com/docs/gitignore) rules of the repository and global git configuration will be skipped.\n\nRegardless of whether `exclude` or `include` is specified, the following files are always excluded:\n\n-   Any sub-packages will be skipped (any subdirectory that contains a `Cargo.toml` file).\n-   A directory named `target` in the root of the package will be skipped.\n\nThe following files are always included:\n\n-   The `Cargo.toml` file of the package itself is always included, it does not need to be listed in `include`.\n-   A minimized `Cargo.lock` is automatically included if the package contains a binary or example target, see [`cargo package`](../commands/cargo-package.html) for more information.\n-   If a [`license-file`](#the-license-and-license-file-fields) is specified, it is always included.\n\nThe options are mutually exclusive; setting `include` will override an `exclude`. If you need to have exclusions to a set of `include` files, use the `!` operator described below.\n\nThe patterns should be [gitignore](https://git-scm.com/docs/gitignore)\\-style patterns. Briefly:\n\n-   `foo` matches any file or directory with the name `foo` anywhere in the package. This is equivalent to the pattern `**/foo`.\n-   `/foo` matches any file or directory with the name `foo` only in the root of the package.\n-   `foo/` matches any _directory_ with the name `foo` anywhere in the package.\n-   Common glob patterns like `*`, `?`, and `[]` are supported:\n    -   `*` matches zero or more characters except `/`. For example, `*.html` matches any file or directory with the `.html` extension anywhere in the package.\n    -   `?` matches any character except `/`. For example, `foo?` matches `food`, but not `foo`.\n    -   `[]` allows for matching a range of characters. For example, `[ab]` matches either `a` or `b`. `[a-z]` matches letters a through z.\n-   `**/` prefix matches in any directory. For example, `**/foo/bar` matches the file or directory `bar` anywhere that is directly under directory `foo`.\n-   `/**` suffix matches everything inside. For example, `foo/**` matches all files inside directory `foo`, including all files in subdirectories below `foo`.\n-   `/**/` matches zero or more directories. For example, `a/**/b` matches `a/b`, `a/x/b`, `a/x/y/b`, and so on.\n-   `!` prefix negates a pattern. For example, a pattern of `src/*.rs` and `!foo.rs` would match all files with the `.rs` extension inside the `src` directory, except for any file named `foo.rs`.\n\nThe include/exclude list is also used for change tracking in some situations. For targets built with `rustdoc`, it is used to determine the list of files to track to determine if the target should be rebuilt. If the package has a [build script](build-scripts.html) that does not emit any `rerun-if-*` directives, then the include/exclude list is used for tracking if the build script should be re-run if any of those files change.\n\n### [The `publish` field](#the-publish-field)\n\nThe `publish` field can be used to control which registries names the package may be published to:\n\n```toml\n[package]\n# ...\npublish = [\"some-registry-name\"]\n\n```\n\nTo prevent a package from being published to a registry (like crates.io) by mistake, for instance to keep a package private in a company, you can omit the [`version`](#the-version-field) field. If you’d like to be more explicit, you can disable publishing:\n\n```toml\n[package]\n# ...\npublish = false\n\n```\n\nIf publish array contains a single registry, `cargo publish` command will use it when `--registry` flag is not specified.\n\n### [The `metadata` table](#the-metadata-table)\n\nCargo by default will warn about unused keys in `Cargo.toml` to assist in detecting typos and such. The `package.metadata` table, however, is completely ignored by Cargo and will not be warned about. This section can be used for tools which would like to store package configuration in `Cargo.toml`. For example:\n\n```toml\n[package]\nname = \"...\"\n# ...\n\n# Metadata used when generating an Android APK, for example.\n[package.metadata.android]\npackage-name = \"my-awesome-android-app\"\nassets = \"path/to/static\"\n\n```\n\nYou’ll need to look in the documentation for your tool to see how to use this field. For Rust Projects that use `package.metadata` tables, see:\n\n-   [docs.rs](https://docs.rs/about/metadata)\n\nThere is a similar table at the workspace level at [`workspace.metadata`](about:blank/workspaces.html#the-metadata-table). While cargo does not specify a format for the content of either of these tables, it is suggested that external tools may wish to use them in a consistent fashion, such as referring to the data in `workspace.metadata` if data is missing from `package.metadata`, if that makes sense for the tool in question.\n\n### [The `default-run` field](#the-default-run-field)\n\nThe `default-run` field in the `[package]` section of the manifest can be used to specify a default binary picked by [`cargo run`](../commands/cargo-run.html). For example, when there is both `src/bin/a.rs` and `src/bin/b.rs`:\n\n```toml\n[package]\ndefault-run = \"a\"\n\n```\n\n## [The `[lints]` section](#the-lints-section)\n\nOverride the default level of lints from different tools by assigning them to a new level in a table, for example:\n\n```toml\n[lints.rust]\nunsafe_code = \"forbid\"\n\n```\n\nThis is short-hand for:\n\n```toml\n[lints.rust]\nunsafe_code = { level = \"forbid\", priority = 0 }\n\n```\n\n`level` corresponds to the [lint levels](https://doc.rust-lang.org/rustc/lints/levels.html) in `rustc`:\n\n-   `forbid`\n-   `deny`\n-   `warn`\n-   `allow`\n\n`priority` is a signed integer that controls which lints or lint groups override other lint groups:\n\n-   lower (particularly negative) numbers have lower priority, being overridden by higher numbers, and show up first on the command-line to tools like `rustc`\n\nTo know which table under `[lints]` a particular lint belongs under, it is the part before `::` in the lint name. If there isn’t a `::`, then the tool is `rust`. For example a warning about `unsafe_code` would be `lints.rust.unsafe_code` but a lint about `clippy::enum_glob_use` would be `lints.clippy.enum_glob_use`.\n\nFor example:\n\n```toml\n[lints.rust]\nunsafe_code = \"forbid\"\n\n[lints.clippy]\nenum_glob_use = \"deny\"\n\n```\n\nGenerally, these will only affect local development of the current package. Cargo only applies these to the current package and not to dependencies. As for dependents, Cargo suppresses lints from non-path dependencies with features like [`--cap-lints`](about:blank/rustc/lints/levels.html#capping-lints).\n\n## [The `[badges]` section](#the-badges-section)\n\nThe `[badges]` section is for specifying status badges that can be displayed on a registry website when the package is published.\n\n> Note: [crates.io](https://crates.io/) previously displayed badges next to a crate on its website, but that functionality has been removed. Packages should place badges in its README file which will be displayed on [crates.io](https://crates.io/) (see [the `readme` field](#the-readme-field)).\n\n```toml\n[badges]\n# The `maintenance` table indicates the status of the maintenance of\n# the crate. This may be used by a registry, but is currently not\n# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437\n# and https://github.com/rust-lang/crates.io/issues/2438 for more details.\n#\n# The `status` field is required. Available options are:\n# - `actively-developed`: New features are being added and bugs are being fixed.\n# - `passively-maintained`: There are no plans for new features, but the maintainer intends to\n#   respond to issues that get filed.\n# - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on\n#   it or providing support, but it works for the purposes it was designed for.\n# - `experimental`: The author wants to share it with the community but is not intending to meet\n#   anyone's particular use case.\n# - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone\n#   else.\n# - `deprecated`: The maintainer does not recommend using this crate (the description of the crate\n#   can describe why, there could be a better solution available or there could be problems with\n#   the crate that the author does not want to fix).\n# - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify\n#   their intentions, potential crate users will need to investigate on their own.\nmaintenance = { status = \"...\" }\n\n```\n\n## [Dependency sections](#dependency-sections)\n\nSee the [specifying dependencies page](specifying-dependencies.html) for information on the `[dependencies]`, `[dev-dependencies]`, `[build-dependencies]`, and target-specific `[target.*.dependencies]` sections.\n\n## [The `[profile.*]` sections](#the-profile-sections)\n\nThe `[profile]` tables provide a way to customize compiler settings such as optimizations and debug settings. See [the Profiles chapter](profiles.html) for more detail.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Manifest Format - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/manifest.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"the-manifest-format\"><a class=\"header\" href=\"#the-manifest-format\">The Manifest Format</a></h1>\n<p>The <code class=\"hljs\">Cargo.toml</code> file for each package is called its <em>manifest</em>. It is written\nin the <a href=\"https://toml.io/\">TOML</a> format. It contains metadata that is needed to compile the package. Checkout\nthe <code class=\"hljs\">cargo locate-project</code> section for more detail on how cargo finds the manifest file.</p>\n<p>Every manifest file consists of the following sections:</p>\n<ul>\n<li><a href=\"unstable.html\"><code class=\"hljs\">cargo-features</code></a> — Unstable, nightly-only features.</li>\n<li><a href=\"#the-package-section\"><code class=\"hljs\">[package]</code></a> — Defines a package.\n<ul>\n<li><a href=\"#the-name-field\"><code class=\"hljs\">name</code></a> — The name of the package.</li>\n<li><a href=\"#the-version-field\"><code class=\"hljs\">version</code></a> — The version of the package.</li>\n<li><a href=\"#the-authors-field\"><code class=\"hljs\">authors</code></a> — The authors of the package.</li>\n<li><a href=\"#the-edition-field\"><code class=\"hljs\">edition</code></a> — The Rust edition.</li>\n<li><a href=\"#the-rust-version-field\"><code class=\"hljs\">rust-version</code></a> — The minimal supported Rust version.</li>\n<li><a href=\"#the-description-field\"><code class=\"hljs\">description</code></a> — A description of the package.</li>\n<li><a href=\"#the-documentation-field\"><code class=\"hljs\">documentation</code></a> — URL of the package documentation.</li>\n<li><a href=\"#the-readme-field\"><code class=\"hljs\">readme</code></a> — Path to the package’s README file.</li>\n<li><a href=\"#the-homepage-field\"><code class=\"hljs\">homepage</code></a> — URL of the package homepage.</li>\n<li><a href=\"#the-repository-field\"><code class=\"hljs\">repository</code></a> — URL of the package source repository.</li>\n<li><a href=\"#the-license-and-license-file-fields\"><code class=\"hljs\">license</code></a> — The package license.</li>\n<li><a href=\"#the-license-and-license-file-fields\"><code class=\"hljs\">license-file</code></a> — Path to the text of the license.</li>\n<li><a href=\"#the-keywords-field\"><code class=\"hljs\">keywords</code></a> — Keywords for the package.</li>\n<li><a href=\"#the-categories-field\"><code class=\"hljs\">categories</code></a> — Categories of the package.</li>\n<li><a href=\"#the-workspace-field\"><code class=\"hljs\">workspace</code></a> — Path to the workspace for the package.</li>\n<li><a href=\"#the-build-field\"><code class=\"hljs\">build</code></a> — Path to the package build script.</li>\n<li><a href=\"#the-links-field\"><code class=\"hljs\">links</code></a> — Name of the native library the package links with.</li>\n<li><a href=\"#the-exclude-and-include-fields\"><code class=\"hljs\">exclude</code></a> — Files to exclude when publishing.</li>\n<li><a href=\"#the-exclude-and-include-fields\"><code class=\"hljs\">include</code></a> — Files to include when publishing.</li>\n<li><a href=\"#the-publish-field\"><code class=\"hljs\">publish</code></a> — Can be used to prevent publishing the package.</li>\n<li><a href=\"#the-metadata-table\"><code class=\"hljs\">metadata</code></a> — Extra settings for external tools.</li>\n<li><a href=\"#the-default-run-field\"><code class=\"hljs\">default-run</code></a> — The default binary to run by <a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>.</li>\n<li><a href=\"cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autobins</code></a> — Disables binary auto discovery.</li>\n<li><a href=\"cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autoexamples</code></a> — Disables example auto discovery.</li>\n<li><a href=\"cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autotests</code></a> — Disables test auto discovery.</li>\n<li><a href=\"cargo-targets.html#target-auto-discovery\"><code class=\"hljs\">autobenches</code></a> — Disables bench auto discovery.</li>\n<li><a href=\"resolver.html#resolver-versions\"><code class=\"hljs\">resolver</code></a> — Sets the dependency resolver to use.</li>\n</ul>\n</li>\n<li>Target tables: (see <a href=\"cargo-targets.html#configuring-a-target\">configuration</a> for settings)\n<ul>\n<li><a href=\"cargo-targets.html#library\"><code class=\"hljs\">[lib]</code></a> — Library target settings.</li>\n<li><a href=\"cargo-targets.html#binaries\"><code class=\"hljs\">[[bin]]</code></a> — Binary target settings.</li>\n<li><a href=\"cargo-targets.html#examples\"><code class=\"hljs\">[[example]]</code></a> — Example target settings.</li>\n<li><a href=\"cargo-targets.html#tests\"><code class=\"hljs\">[[test]]</code></a> — Test target settings.</li>\n<li><a href=\"cargo-targets.html#benchmarks\"><code class=\"hljs\">[[bench]]</code></a> — Benchmark target settings.</li>\n</ul>\n</li>\n<li>Dependency tables:\n<ul>\n<li><a href=\"specifying-dependencies.html\"><code class=\"hljs\">[dependencies]</code></a> — Package library dependencies.</li>\n<li><a href=\"specifying-dependencies.html#development-dependencies\"><code class=\"hljs\">[dev-dependencies]</code></a> — Dependencies for examples, tests, and benchmarks.</li>\n<li><a href=\"specifying-dependencies.html#build-dependencies\"><code class=\"hljs\">[build-dependencies]</code></a> — Dependencies for build scripts.</li>\n<li><a href=\"specifying-dependencies.html#platform-specific-dependencies\"><code class=\"hljs\">[target]</code></a> — Platform-specific dependencies.</li>\n</ul>\n</li>\n<li><a href=\"#the-badges-section\"><code class=\"hljs\">[badges]</code></a> — Badges to display on a registry.</li>\n<li><a href=\"features.html\"><code class=\"hljs\">[features]</code></a> — Conditional compilation features.</li>\n<li><a href=\"#the-lints-section\"><code class=\"hljs\">[lints]</code></a> — Configure linters for this package.</li>\n<li><a href=\"overriding-dependencies.html#the-patch-section\"><code class=\"hljs\">[patch]</code></a> — Override dependencies.</li>\n<li><a href=\"overriding-dependencies.html#the-replace-section\"><code class=\"hljs\">[replace]</code></a> — Override dependencies (deprecated).</li>\n<li><a href=\"profiles.html\"><code class=\"hljs\">[profile]</code></a> — Compiler settings and optimizations.</li>\n<li><a href=\"workspaces.html\"><code class=\"hljs\">[workspace]</code></a> — The workspace definition.</li>\n</ul>\n<h2 id=\"the-package-section\"><a class=\"header\" href=\"#the-package-section\">The <code>[package]</code> section</a></h2>\n<p>The first section in a <code class=\"hljs\">Cargo.toml</code> is <code class=\"hljs\">[package]</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_world\"</span> <span class=\"hljs-comment\"># the name of the package</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>    <span class=\"hljs-comment\"># the current version, obeying semver</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Alice &lt;a@example.com&gt;\"</span>, <span class=\"hljs-string\">\"Bob &lt;b@example.com&gt;\"</span>]\n</code></pre>\n<p>The only field required by Cargo is <a href=\"#the-name-field\"><code class=\"hljs\">name</code></a>. If publishing to\na registry, the registry may require additional fields. See the notes below and\n<a href=\"publishing.html\">the publishing chapter</a> for requirements for publishing to\n<a href=\"https://crates.io/\">crates.io</a>.</p>\n<h3 id=\"the-name-field\"><a class=\"header\" href=\"#the-name-field\">The <code>name</code> field</a></h3>\n<p>The package name is an identifier used to refer to the package. It is used\nwhen listed as a dependency in another package, and as the default name of\ninferred lib and bin targets.</p>\n<p>The name must use only <a href=\"../../std/primitive.char.html#method.is_alphanumeric\">alphanumeric</a> characters or <code class=\"hljs\">-</code> or <code class=\"hljs\">_</code>, and cannot be empty.</p>\n<p>Note that <a href=\"../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> and <a href=\"../commands/cargo-init.html\"><code class=\"hljs\">cargo init</code></a> impose some additional restrictions on\nthe package name, such as enforcing that it is a valid Rust identifier and not\na keyword. <a href=\"https://crates.io/\">crates.io</a> imposes even more restrictions, such as:</p>\n<ul>\n<li>Only ASCII characters are allowed.</li>\n<li>Do not use reserved names.</li>\n<li>Do not use special Windows names such as “nul”.</li>\n<li>Use a maximum of 64 characters of length.</li>\n</ul>\n<h3 id=\"the-version-field\"><a class=\"header\" href=\"#the-version-field\">The <code>version</code> field</a></h3>\n<p>Cargo bakes in the concept of <a href=\"https://semver.org/\">Semantic\nVersioning</a>, so make sure you follow some basic rules:</p>\n<ul>\n<li>Before you reach 1.0.0, anything goes, but if you make breaking changes,\nincrement the minor version. In Rust, breaking changes include adding fields to\nstructs or variants to enums.</li>\n<li>After 1.0.0, only make breaking changes when you increment the major version.\nDon’t break the build.</li>\n<li>After 1.0.0, don’t add any new public API (no new <code class=\"hljs\">pub</code> anything) in patch-level\nversions. Always increment the minor version if you add any new <code class=\"hljs\">pub</code> structs,\ntraits, fields, types, functions, methods or anything else.</li>\n<li>Use version numbers with three numeric parts such as 1.0.0 rather than 1.0.</li>\n</ul>\n<p>See the <a href=\"resolver.html\">Resolver</a> chapter for more information on how Cargo uses versions to\nresolve dependencies, and for guidelines on setting your own version. See the\n<a href=\"semver.html\">SemVer compatibility</a> chapter for more details on exactly what constitutes a\nbreaking change.</p>\n<p>This field is optional and defaults to <code class=\"hljs\">0.0.0</code>.  The field is required for publishing packages.</p>\n<h3 id=\"the-authors-field\"><a class=\"header\" href=\"#the-authors-field\">The <code>authors</code> field</a></h3>\n<p>The optional <code class=\"hljs\">authors</code> field lists in an array the people or organizations that are considered\nthe “authors” of the package. The exact meaning is open to interpretation — it\nmay list the original or primary authors, current maintainers, or owners of the\npackage. An optional email address may be included within angled brackets at\nthe end of each author entry.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">authors</span> = [<span class=\"hljs-string\">\"Graydon Hoare\"</span>, <span class=\"hljs-string\">\"Fnu Lnu &lt;no-reply@rust-lang.org&gt;\"</span>]\n</code></pre>\n<p>This field is only surfaced in package metadata and in the <code class=\"hljs\">CARGO_PKG_AUTHORS</code>\nenvironment variable within <code class=\"hljs\">build.rs</code>. It is not displayed in the <a href=\"https://crates.io/\">crates.io</a>\nuser interface.</p>\n<blockquote>\n<p><strong>Warning</strong>: Package manifests cannot be changed once published, so this\nfield cannot be changed or removed in already-published versions of a\npackage.</p>\n</blockquote>\n<h3 id=\"the-edition-field\"><a class=\"header\" href=\"#the-edition-field\">The <code>edition</code> field</a></h3>\n<p>The <code class=\"hljs\">edition</code> key is an optional key that affects which <a href=\"../../edition-guide/index.html\">Rust Edition</a> your package\nis compiled with. Setting the <code class=\"hljs\">edition</code> key in <code class=\"hljs\">[package]</code> will affect all\ntargets/crates in the package, including test suites, benchmarks, binaries,\nexamples, etc.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">'2021'</span>\n</code></pre>\n<p>Most manifests have the <code class=\"hljs\">edition</code> field filled in automatically by <a href=\"../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a>\nwith the latest stable edition. By default <code class=\"hljs\">cargo new</code> creates a manifest with\nthe 2021 edition currently.</p>\n<p>If the <code class=\"hljs\">edition</code> field is not present in <code class=\"hljs\">Cargo.toml</code>, then the 2015 edition is\nassumed for backwards compatibility. Note that all manifests\ncreated with <a href=\"../commands/cargo-new.html\"><code class=\"hljs\">cargo new</code></a> will not use this historical fallback because they\nwill have <code class=\"hljs\">edition</code> explicitly specified to a newer value.</p>\n<h3 id=\"the-rust-version-field\"><a class=\"header\" href=\"#the-rust-version-field\">The <code>rust-version</code> field</a></h3>\n<p>The <code class=\"hljs\">rust-version</code> field is an optional key that tells cargo what version of the\nRust language and compiler your package can be compiled with. If the currently\nselected version of the Rust compiler is older than the stated version, cargo\nwill exit with an error, telling the user what version is required.</p>\n<p>The first version of Cargo that supports this field was released with Rust 1.56.0.\nIn older releases, the field will be ignored, and Cargo will display a warning.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">rust-version</span> = <span class=\"hljs-string\">\"1.56\"</span>\n</code></pre>\n<p>The Rust version must be a bare version number with two or three components; it\ncannot include semver operators or pre-release identifiers. Compiler pre-release\nidentifiers such as -nightly will be ignored while checking the Rust version.\nThe <code class=\"hljs\">rust-version</code> must be equal to or newer than the version that first\nintroduced the configured <code class=\"hljs\">edition</code>.</p>\n<p>The <code class=\"hljs\">rust-version</code> may be ignored using the <code class=\"hljs\">--ignore-rust-version</code> option.</p>\n<p>Setting the <code class=\"hljs\">rust-version</code> key in <code class=\"hljs\">[package]</code> will affect all targets/crates in\nthe package, including test suites, benchmarks, binaries, examples, etc.</p>\n<p>To find the minimum <code class=\"hljs\">rust-version</code> compatible with your project, you can use third-party tools like <a href=\"https://crates.io/crates/cargo-msrv\"><code class=\"hljs\">cargo-msrv</code></a>.</p>\n<p>When used on packages that get published, we recommend <a href=\"../guide/continuous-integration.html#verifying-rust-version\">verifying the <code class=\"hljs\">rust-version</code></a>.</p>\n<h3 id=\"the-description-field\"><a class=\"header\" href=\"#the-description-field\">The <code>description</code> field</a></h3>\n<p>The description is a short blurb about the package. <a href=\"https://crates.io/\">crates.io</a> will display\nthis with your package. This should be plain text (not Markdown).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"A short description of my package\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> requires the <code class=\"hljs\">description</code> to be set.</p>\n</blockquote>\n<h3 id=\"the-documentation-field\"><a class=\"header\" href=\"#the-documentation-field\">The <code>documentation</code> field</a></h3>\n<p>The <code class=\"hljs\">documentation</code> field specifies a URL to a website hosting the crate’s\ndocumentation. If no URL is specified in the manifest file, <a href=\"https://crates.io/\">crates.io</a> will\nautomatically link your crate to the corresponding <a href=\"https://docs.rs/\">docs.rs</a> page when the\ndocumentation has been built and is available (see <a href=\"https://docs.rs/releases/queue\">docs.rs queue</a>).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">documentation</span> = <span class=\"hljs-string\">\"https://docs.rs/bitflags\"</span>\n</code></pre>\n<h3 id=\"the-readme-field\"><a class=\"header\" href=\"#the-readme-field\">The <code>readme</code> field</a></h3>\n<p>The <code class=\"hljs\">readme</code> field should be the path to a file in the package root (relative\nto this <code class=\"hljs\">Cargo.toml</code>) that contains general information about the package.\nThis file will be transferred to the registry when you publish. <a href=\"https://crates.io/\">crates.io</a>\nwill interpret it as Markdown and render it on the crate’s page.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">readme</span> = <span class=\"hljs-string\">\"README.md\"</span>\n</code></pre>\n<p>If no value is specified for this field, and a file named <code class=\"hljs\">README.md</code>,\n<code class=\"hljs\">README.txt</code> or <code class=\"hljs\">README</code> exists in the package root, then the name of that\nfile will be used. You can suppress this behavior by setting this field to\n<code class=\"hljs\">false</code>. If the field is set to <code class=\"hljs\">true</code>, a default value of <code class=\"hljs\">README.md</code> will\nbe assumed.</p>\n<h3 id=\"the-homepage-field\"><a class=\"header\" href=\"#the-homepage-field\">The <code>homepage</code> field</a></h3>\n<p>The <code class=\"hljs\">homepage</code> field should be a URL to a site that is the home page for your\npackage.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">homepage</span> = <span class=\"hljs-string\">\"https://serde.rs\"</span>\n</code></pre>\n<p>A value should only be set for <code class=\"hljs\">homepage</code> if there is a dedicated website for\nthe crate other than the source repository or API documentation. Do not make\n<code class=\"hljs\">homepage</code> redundant with either the <code class=\"hljs\">documentation</code> or <code class=\"hljs\">repository</code> values.</p>\n<h3 id=\"the-repository-field\"><a class=\"header\" href=\"#the-repository-field\">The <code>repository</code> field</a></h3>\n<p>The <code class=\"hljs\">repository</code> field should be a URL to the source repository for your\npackage.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">repository</span> = <span class=\"hljs-string\">\"https://github.com/rust-lang/cargo\"</span>\n</code></pre>\n<h3 id=\"the-license-and-license-file-fields\"><a class=\"header\" href=\"#the-license-and-license-file-fields\">The <code>license</code> and <code>license-file</code> fields</a></h3>\n<p>The <code class=\"hljs\">license</code> field contains the name of the software license that the package\nis released under. The <code class=\"hljs\">license-file</code> field contains the path to a file\ncontaining the text of the license (relative to this <code class=\"hljs\">Cargo.toml</code>).</p>\n<p><a href=\"https://crates.io/\">crates.io</a> interprets the <code class=\"hljs\">license</code> field as an <a href=\"https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions/\">SPDX 2.3 license\nexpression</a>. The name must be a known license\nfrom the <a href=\"https://github.com/spdx/license-list-data/tree/v3.20\">SPDX license list 3.20</a>. See the <a href=\"https://spdx.org\">SPDX site</a>\nfor more information.</p>\n<p>SPDX license expressions support AND and OR operators to combine multiple\nlicenses.<sup class=\"footnote-reference\"><a href=\"#slash\">1</a></sup></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT OR Apache-2.0\"</span>\n</code></pre>\n<p>Using <code class=\"hljs\">OR</code> indicates the user may choose either license. Using <code class=\"hljs\">AND</code> indicates\nthe user must comply with both licenses simultaneously. The <code class=\"hljs\">WITH</code> operator\nindicates a license with a special exception. Some examples:</p>\n<ul>\n<li><code class=\"hljs\">MIT OR Apache-2.0</code></li>\n<li><code class=\"hljs\">LGPL-2.1-only AND MIT AND BSD-2-Clause</code></li>\n<li><code class=\"hljs\">GPL-2.0-or-later WITH Bison-exception-2.2</code></li>\n</ul>\n<p>If a package is using a nonstandard license, then the <code class=\"hljs\">license-file</code> field may\nbe specified in lieu of the <code class=\"hljs\">license</code> field.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">license-file</span> = <span class=\"hljs-string\">\"LICENSE.txt\"</span>\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> requires either <code class=\"hljs\">license</code> or <code class=\"hljs\">license-file</code> to be set.</p>\n</blockquote>\n<div class=\"footnote-definition\" id=\"slash\"><sup class=\"footnote-definition-label\">1</sup>\n<p>Previously multiple licenses could be separated with a <code class=\"hljs\">/</code>, but that\nusage is deprecated.</p>\n</div>\n<h3 id=\"the-keywords-field\"><a class=\"header\" href=\"#the-keywords-field\">The <code>keywords</code> field</a></h3>\n<p>The <code class=\"hljs\">keywords</code> field is an array of strings that describe this package. This\ncan help when searching for the package on a registry, and you may choose any\nwords that would help someone find this crate.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">keywords</span> = [<span class=\"hljs-string\">\"gamedev\"</span>, <span class=\"hljs-string\">\"graphics\"</span>]\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> allows a maximum of 5 keywords. Each keyword must be\nASCII text, have at most 20 characters, start with an alphanumeric character,\nand only contain letters, numbers, <code class=\"hljs\">_</code>, <code class=\"hljs\">-</code> or <code class=\"hljs\">+</code>.</p>\n</blockquote>\n<h3 id=\"the-categories-field\"><a class=\"header\" href=\"#the-categories-field\">The <code>categories</code> field</a></h3>\n<p>The <code class=\"hljs\">categories</code> field is an array of strings of the categories this package\nbelongs to.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">categories</span> = [<span class=\"hljs-string\">\"command-line-utilities\"</span>, <span class=\"hljs-string\">\"development-tools::cargo-plugins\"</span>]\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> has a maximum of 5 categories. Each category should\nmatch one of the strings available at <a href=\"https://crates.io/category_slugs\">https://crates.io/category_slugs</a>, and\nmust match exactly.</p>\n</blockquote>\n<h3 id=\"the-workspace-field\"><a class=\"header\" href=\"#the-workspace-field\">The <code>workspace</code> field</a></h3>\n<p>The <code class=\"hljs\">workspace</code> field can be used to configure the workspace that this package\nwill be a member of. If not specified this will be inferred as the first\nCargo.toml with <code class=\"hljs\">[workspace]</code> upwards in the filesystem. Setting this is\nuseful if the member is not inside a subdirectory of the workspace root.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">workspace</span> = <span class=\"hljs-string\">\"path/to/workspace/root\"</span>\n</code></pre>\n<p>This field cannot be specified if the manifest already has a <code class=\"hljs\">[workspace]</code>\ntable defined. That is, a crate cannot both be a root crate in a workspace\n(contain <code class=\"hljs\">[workspace]</code>) and also be a member crate of another workspace\n(contain <code class=\"hljs\">package.workspace</code>).</p>\n<p>For more information, see the <a href=\"workspaces.html\">workspaces chapter</a>.</p>\n<h3 id=\"the-build-field\"><a class=\"header\" href=\"#the-build-field\">The <code>build</code> field</a></h3>\n<p>The <code class=\"hljs\">build</code> field specifies a file in the package root which is a <a href=\"build-scripts.html\">build\nscript</a> for building native code. More information can be found in the <a href=\"build-scripts.html\">build\nscript guide</a>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">build</span> = <span class=\"hljs-string\">\"build.rs\"</span>\n</code></pre>\n<p>The default is <code class=\"hljs\">\"build.rs\"</code>, which loads the script from a file named\n<code class=\"hljs\">build.rs</code> in the root of the package. Use <code class=\"hljs\">build = \"custom_build_name.rs\"</code> to\nspecify a path to a different file or <code class=\"hljs\">build = false</code> to disable automatic\ndetection of the build script.</p>\n<h3 id=\"the-links-field\"><a class=\"header\" href=\"#the-links-field\">The <code>links</code> field</a></h3>\n<p>The <code class=\"hljs\">links</code> field specifies the name of a native library that is being linked\nto. More information can be found in the <a href=\"build-scripts.html#the-links-manifest-key\"><code class=\"hljs\">links</code></a> section of the build\nscript guide.</p>\n<p>For example, a crate that links a native library called “git2” (e.g. <code class=\"hljs\">libgit2.a</code>\non Linux) may specify:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">links</span> = <span class=\"hljs-string\">\"git2\"</span>\n</code></pre>\n<h3 id=\"the-exclude-and-include-fields\"><a class=\"header\" href=\"#the-exclude-and-include-fields\">The <code>exclude</code> and <code>include</code> fields</a></h3>\n<p>The <code class=\"hljs\">exclude</code> and <code class=\"hljs\">include</code> fields can be used to explicitly specify which\nfiles are included when packaging a project to be <a href=\"publishing.html\">published</a>,\nand certain kinds of change tracking (described below).\nThe patterns specified in the <code class=\"hljs\">exclude</code> field identify a set of files that are\nnot included, and the patterns in <code class=\"hljs\">include</code> specify files that are explicitly\nincluded.\nYou may run <a href=\"../commands/cargo-package.html\"><code class=\"hljs\">cargo package --list</code></a> to verify which files will\nbe included in the package.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">exclude</span> = [<span class=\"hljs-string\">\"/ci\"</span>, <span class=\"hljs-string\">\"images/\"</span>, <span class=\"hljs-string\">\".*\"</span>]\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">include</span> = [<span class=\"hljs-string\">\"/src\"</span>, <span class=\"hljs-string\">\"COPYRIGHT\"</span>, <span class=\"hljs-string\">\"/examples\"</span>, <span class=\"hljs-string\">\"!/examples/big_example\"</span>]\n</code></pre>\n<p>The default if neither field is specified is to include all files from the\nroot of the package, except for the exclusions listed below.</p>\n<p>If <code class=\"hljs\">include</code> is not specified, then the following files will be excluded:</p>\n<ul>\n<li>If the package is not in a git repository, all “hidden” files starting with\na dot will be skipped.</li>\n<li>If the package is in a git repository, any files that are ignored by the\n<a href=\"https://git-scm.com/docs/gitignore\">gitignore</a> rules of the repository and global git configuration will be\nskipped.</li>\n</ul>\n<p>Regardless of whether <code class=\"hljs\">exclude</code> or <code class=\"hljs\">include</code> is specified, the following files\nare always excluded:</p>\n<ul>\n<li>Any sub-packages will be skipped (any subdirectory that contains a\n<code class=\"hljs\">Cargo.toml</code> file).</li>\n<li>A directory named <code class=\"hljs\">target</code> in the root of the package will be skipped.</li>\n</ul>\n<p>The following files are always included:</p>\n<ul>\n<li>The <code class=\"hljs\">Cargo.toml</code> file of the package itself is always included, it does not\nneed to be listed in <code class=\"hljs\">include</code>.</li>\n<li>A minimized <code class=\"hljs\">Cargo.lock</code> is automatically included if the package contains a\nbinary or example target, see <a href=\"../commands/cargo-package.html\"><code class=\"hljs\">cargo package</code></a> for more information.</li>\n<li>If a <a href=\"#the-license-and-license-file-fields\"><code class=\"hljs\">license-file</code></a> is specified, it\nis always included.</li>\n</ul>\n<p>The options are mutually exclusive; setting <code class=\"hljs\">include</code> will override an\n<code class=\"hljs\">exclude</code>. If you need to have exclusions to a set of <code class=\"hljs\">include</code> files, use the\n<code class=\"hljs\">!</code> operator described below.</p>\n<p>The patterns should be <a href=\"https://git-scm.com/docs/gitignore\">gitignore</a>-style patterns. Briefly:</p>\n<ul>\n<li><code class=\"hljs\">foo</code> matches any file or directory with the name <code class=\"hljs\">foo</code> anywhere in the\npackage. This is equivalent to the pattern <code class=\"hljs\">**/foo</code>.</li>\n<li><code class=\"hljs\">/foo</code> matches any file or directory with the name <code class=\"hljs\">foo</code> only in the root of\nthe package.</li>\n<li><code class=\"hljs\">foo/</code> matches any <em>directory</em> with the name <code class=\"hljs\">foo</code> anywhere in the package.</li>\n<li>Common glob patterns like <code class=\"hljs\">*</code>, <code class=\"hljs\">?</code>, and <code class=\"hljs\">[]</code> are supported:\n<ul>\n<li><code class=\"hljs\">*</code> matches zero or more characters except <code class=\"hljs\">/</code>.  For example, <code class=\"hljs\">*.html</code>\nmatches any file or directory with the <code class=\"hljs\">.html</code> extension anywhere in the\npackage.</li>\n<li><code class=\"hljs\">?</code> matches any character except <code class=\"hljs\">/</code>. For example, <code class=\"hljs\">foo?</code> matches <code class=\"hljs\">food</code>,\nbut not <code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">[]</code> allows for matching a range of characters. For example, <code class=\"hljs\">[ab]</code>\nmatches either <code class=\"hljs\">a</code> or <code class=\"hljs\">b</code>. <code class=\"hljs\">[a-z]</code> matches letters a through z.</li>\n</ul>\n</li>\n<li><code class=\"hljs\">**/</code> prefix matches in any directory. For example, <code class=\"hljs\">**/foo/bar</code> matches the\nfile or directory <code class=\"hljs\">bar</code> anywhere that is directly under directory <code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">/**</code> suffix matches everything inside. For example, <code class=\"hljs\">foo/**</code> matches all\nfiles inside directory <code class=\"hljs\">foo</code>, including all files in subdirectories below\n<code class=\"hljs\">foo</code>.</li>\n<li><code class=\"hljs\">/**/</code> matches zero or more directories. For example, <code class=\"hljs\">a/**/b</code> matches\n<code class=\"hljs\">a/b</code>, <code class=\"hljs\">a/x/b</code>, <code class=\"hljs\">a/x/y/b</code>, and so on.</li>\n<li><code class=\"hljs\">!</code> prefix negates a pattern. For example, a pattern of <code class=\"hljs\">src/*.rs</code> and\n<code class=\"hljs\">!foo.rs</code> would match all files with the <code class=\"hljs\">.rs</code> extension inside the <code class=\"hljs\">src</code>\ndirectory, except for any file named <code class=\"hljs\">foo.rs</code>.</li>\n</ul>\n<p>The include/exclude list is also used for change tracking in some situations.\nFor targets built with <code class=\"hljs\">rustdoc</code>, it is used to determine the list of files to\ntrack to determine if the target should be rebuilt. If the package has a\n<a href=\"build-scripts.html\">build script</a> that does not emit any <code class=\"hljs\">rerun-if-*</code> directives, then the\ninclude/exclude list is used for tracking if the build script should be re-run\nif any of those files change.</p>\n<h3 id=\"the-publish-field\"><a class=\"header\" href=\"#the-publish-field\">The <code>publish</code> field</a></h3>\n<p>The <code class=\"hljs\">publish</code> field can be used to control which registries names the package\nmay be published to:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">publish</span> = [<span class=\"hljs-string\">\"some-registry-name\"</span>]\n</code></pre>\n<p>To prevent a package from being published to a registry (like crates.io) by mistake,\nfor instance to keep a package private in a company,\nyou can omit the <a href=\"#the-version-field\"><code class=\"hljs\">version</code></a> field.\nIf you’d like to be more explicit, you can disable publishing:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-comment\"># ...</span>\n<span class=\"hljs-attr\">publish</span> = <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>If publish array contains a single registry, <code class=\"hljs\">cargo publish</code> command will use\nit when <code class=\"hljs\">--registry</code> flag is not specified.</p>\n<h3 id=\"the-metadata-table\"><a class=\"header\" href=\"#the-metadata-table\">The <code>metadata</code> table</a></h3>\n<p>Cargo by default will warn about unused keys in <code class=\"hljs\">Cargo.toml</code> to assist in\ndetecting typos and such. The <code class=\"hljs\">package.metadata</code> table, however, is completely\nignored by Cargo and will not be warned about. This section can be used for\ntools which would like to store package configuration in <code class=\"hljs\">Cargo.toml</code>. For\nexample:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"...\"</span>\n<span class=\"hljs-comment\"># ...</span>\n\n<span class=\"hljs-comment\"># Metadata used when generating an Android APK, for example.</span>\n<span class=\"hljs-section\">[package.metadata.android]</span>\n<span class=\"hljs-attr\">package-name</span> = <span class=\"hljs-string\">\"my-awesome-android-app\"</span>\n<span class=\"hljs-attr\">assets</span> = <span class=\"hljs-string\">\"path/to/static\"</span>\n</code></pre>\n<p>You’ll need to look in the documentation for your tool to see how to use this field.\nFor Rust Projects that use <code class=\"hljs\">package.metadata</code> tables, see:</p>\n<ul>\n<li><a href=\"https://docs.rs/about/metadata\">docs.rs</a></li>\n</ul>\n<p>There is a similar table at the workspace level at\n<a href=\"workspaces.html#the-metadata-table\"><code class=\"hljs\">workspace.metadata</code></a>. While cargo does not specify a\nformat for the content of either of these tables, it is suggested that\nexternal tools may wish to use them in a consistent fashion, such as referring\nto the data in <code class=\"hljs\">workspace.metadata</code> if data is missing from <code class=\"hljs\">package.metadata</code>,\nif that makes sense for the tool in question.</p>\n<h3 id=\"the-default-run-field\"><a class=\"header\" href=\"#the-default-run-field\">The <code>default-run</code> field</a></h3>\n<p>The <code class=\"hljs\">default-run</code> field in the <code class=\"hljs\">[package]</code> section of the manifest can be used\nto specify a default binary picked by <a href=\"../commands/cargo-run.html\"><code class=\"hljs\">cargo run</code></a>. For example, when there is\nboth <code class=\"hljs\">src/bin/a.rs</code> and <code class=\"hljs\">src/bin/b.rs</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">default-run</span> = <span class=\"hljs-string\">\"a\"</span>\n</code></pre>\n<h2 id=\"the-lints-section\"><a class=\"header\" href=\"#the-lints-section\">The <code>[lints]</code> section</a></h2>\n<p>Override the default level of lints from different tools by assigning them to a new level in a\ntable, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = <span class=\"hljs-string\">\"forbid\"</span>\n</code></pre>\n<p>This is short-hand for:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = { level = <span class=\"hljs-string\">\"forbid\"</span>, priority = <span class=\"hljs-number\">0</span> }\n</code></pre>\n<p><code class=\"hljs\">level</code> corresponds to the <a href=\"https://doc.rust-lang.org/rustc/lints/levels.html\">lint levels</a> in <code class=\"hljs\">rustc</code>:</p>\n<ul>\n<li><code class=\"hljs\">forbid</code></li>\n<li><code class=\"hljs\">deny</code></li>\n<li><code class=\"hljs\">warn</code></li>\n<li><code class=\"hljs\">allow</code></li>\n</ul>\n<p><code class=\"hljs\">priority</code> is a signed integer that controls which lints or lint groups override other lint groups:</p>\n<ul>\n<li>lower (particularly negative) numbers have lower priority, being overridden\nby higher numbers, and show up first on the command-line to tools like\n<code class=\"hljs\">rustc</code></li>\n</ul>\n<p>To know which table under <code class=\"hljs\">[lints]</code> a particular lint belongs under, it is the part before <code class=\"hljs\">::</code> in the lint\nname.  If there isn’t a <code class=\"hljs\">::</code>, then the tool is <code class=\"hljs\">rust</code>.  For example a warning\nabout <code class=\"hljs\">unsafe_code</code> would be <code class=\"hljs\">lints.rust.unsafe_code</code> but a lint about\n<code class=\"hljs\">clippy::enum_glob_use</code> would be <code class=\"hljs\">lints.clippy.enum_glob_use</code>.</p>\n<p>For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lints.rust]</span>\n<span class=\"hljs-attr\">unsafe_code</span> = <span class=\"hljs-string\">\"forbid\"</span>\n\n<span class=\"hljs-section\">[lints.clippy]</span>\n<span class=\"hljs-attr\">enum_glob_use</span> = <span class=\"hljs-string\">\"deny\"</span>\n</code></pre>\n<p>Generally, these will only affect local development of the current package.\nCargo only applies these to the current package and not to dependencies.\nAs for dependents, Cargo suppresses lints from non-path dependencies with features like\n<a href=\"../../rustc/lints/levels.html#capping-lints\"><code class=\"hljs\">--cap-lints</code></a>.</p>\n<h2 id=\"the-badges-section\"><a class=\"header\" href=\"#the-badges-section\">The <code>[badges]</code> section</a></h2>\n<p>The <code class=\"hljs\">[badges]</code> section is for specifying status badges that can be displayed\non a registry website when the package is published.</p>\n<blockquote>\n<p>Note: <a href=\"https://crates.io/\">crates.io</a> previously displayed badges next to a crate on its\nwebsite, but that functionality has been removed. Packages should place\nbadges in its README file which will be displayed on <a href=\"https://crates.io/\">crates.io</a> (see <a href=\"#the-readme-field\">the\n<code class=\"hljs\">readme</code> field</a>).</p>\n</blockquote>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[badges]</span>\n<span class=\"hljs-comment\"># The `maintenance` table indicates the status of the maintenance of</span>\n<span class=\"hljs-comment\"># the crate. This may be used by a registry, but is currently not</span>\n<span class=\"hljs-comment\"># used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437</span>\n<span class=\"hljs-comment\"># and https://github.com/rust-lang/crates.io/issues/2438 for more details.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># The `status` field is required. Available options are:</span>\n<span class=\"hljs-comment\"># - `actively-developed`: New features are being added and bugs are being fixed.</span>\n<span class=\"hljs-comment\"># - `passively-maintained`: There are no plans for new features, but the maintainer intends to</span>\n<span class=\"hljs-comment\">#   respond to issues that get filed.</span>\n<span class=\"hljs-comment\"># - `as-is`: The crate is feature complete, the maintainer does not intend to continue working on</span>\n<span class=\"hljs-comment\">#   it or providing support, but it works for the purposes it was designed for.</span>\n<span class=\"hljs-comment\"># - `experimental`: The author wants to share it with the community but is not intending to meet</span>\n<span class=\"hljs-comment\">#   anyone's particular use case.</span>\n<span class=\"hljs-comment\"># - `looking-for-maintainer`: The current maintainer would like to transfer the crate to someone</span>\n<span class=\"hljs-comment\">#   else.</span>\n<span class=\"hljs-comment\"># - `deprecated`: The maintainer does not recommend using this crate (the description of the crate</span>\n<span class=\"hljs-comment\">#   can describe why, there could be a better solution available or there could be problems with</span>\n<span class=\"hljs-comment\">#   the crate that the author does not want to fix).</span>\n<span class=\"hljs-comment\"># - `none`: Displays no badge on crates.io, since the maintainer has not chosen to specify</span>\n<span class=\"hljs-comment\">#   their intentions, potential crate users will need to investigate on their own.</span>\n<span class=\"hljs-attr\">maintenance</span> = { status = <span class=\"hljs-string\">\"...\"</span> }\n</code></pre>\n<h2 id=\"dependency-sections\"><a class=\"header\" href=\"#dependency-sections\">Dependency sections</a></h2>\n<p>See the <a href=\"specifying-dependencies.html\">specifying dependencies page</a> for\ninformation on the <code class=\"hljs\">[dependencies]</code>, <code class=\"hljs\">[dev-dependencies]</code>,\n<code class=\"hljs\">[build-dependencies]</code>, and target-specific <code class=\"hljs\">[target.*.dependencies]</code> sections.</p>\n<h2 id=\"the-profile-sections\"><a class=\"header\" href=\"#the-profile-sections\">The <code>[profile.*]</code> sections</a></h2>\n<p>The <code class=\"hljs\">[profile]</code> tables provide a way to customize compiler settings such as\noptimizations and debug settings. See <a href=\"profiles.html\">the Profiles chapter</a> for\nmore detail.</p>\n<script>\n(function() {\n    var fragments = {\n        \"#the-project-layout\": \"../guide/project-layout.html\",\n        \"#examples\": \"cargo-targets.html#examples\",\n        \"#tests\": \"cargo-targets.html#tests\",\n        \"#integration-tests\": \"cargo-targets.html#integration-tests\",\n        \"#configuring-a-target\": \"cargo-targets.html#configuring-a-target\",\n        \"#target-auto-discovery\": \"cargo-targets.html#target-auto-discovery\",\n        \"#the-required-features-field-optional\": \"cargo-targets.html#the-required-features-field\",\n        \"#building-dynamic-or-static-libraries\": \"cargo-targets.html#the-crate-type-field\",\n        \"#the-workspace-section\": \"workspaces.html#the-workspace-section\",\n        \"#virtual-workspace\": \"workspaces.html\",\n        \"#package-selection\": \"workspaces.html#package-selection\",\n        \"#the-features-section\": \"features.html#the-features-section\",\n        \"#rules\": \"features.html\",\n        \"#usage-in-end-products\": \"features.html\",\n        \"#usage-in-packages\": \"features.html\",\n        \"#the-patch-section\": \"overriding-dependencies.html#the-patch-section\",\n        \"#using-patch-with-multiple-versions\": \"overriding-dependencies.html#using-patch-with-multiple-versions\",\n        \"#the-replace-section\": \"overriding-dependencies.html#the-replace-section\",\n        \"#package-metadata\": \"manifest.html#the-package-section\",\n        \"#the-authors-field-optional\": \"manifest.html#the-authors-field\",\n        \"#the-edition-field-optional\": \"manifest.html#the-edition-field\",\n        \"#the-documentation-field-optional\": \"manifest.html#the-documentation-field\",\n        \"#the-workspace--field-optional\": \"manifest.html#the-workspace-field\",\n        \"#package-build\": \"manifest.html#the-build-field\",\n        \"#the-build-field-optional\": \"manifest.html#the-build-field\",\n        \"#the-links-field-optional\": \"manifest.html#the-links-field\",\n        \"#the-exclude-and-include-fields-optional\": \"manifest.html#the-exclude-and-include-fields\",\n        \"#the-publish--field-optional\": \"manifest.html#the-publish-field\",\n        \"#the-metadata-table-optional\": \"manifest.html#the-metadata-table\",\n    };\n    var target = fragments[window.location.hash];\n    if (target) {\n        var url = window.location.toString();\n        var base = url.substring(0, url.lastIndexOf('/'));\n        window.location.replace(base + \"/\" + target);\n    }\n})();\n</script>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/overriding-dependencies.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/cargo-targets.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/overriding-dependencies.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/cargo-targets.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:21.156Z"
}