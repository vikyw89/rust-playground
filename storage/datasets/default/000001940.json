{
	"title": "NonNull in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.dangling",
	"markdown": "# NonNull in std::ptr - Rust\n\n## Struct [std](../index.html)::[ptr](index.html)::[NonNull](#)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#73) ¬∑\n\n```\npub struct NonNull<T>where\n    T: ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\n`*mut T` but non-zero and [covariant](https://doc.rust-lang.org/reference/subtyping.html).\n\nThis is often the correct thing to use when building data structures using raw pointers, but is ultimately more dangerous to use because of its additional properties. If you‚Äôre not sure if you should use `NonNull<T>`, just use `*mut T`!\n\nUnlike `*mut T`, the pointer must always be non-null, even if the pointer is never dereferenced. This is so that enums may use this forbidden value as a discriminant ‚Äì `Option<NonNull<T>>` has the same size as `*mut T`. However the pointer may still dangle if it isn‚Äôt dereferenced.\n\nUnlike `*mut T`, `NonNull<T>` was chosen to be covariant over `T`. This makes it possible to use `NonNull<T>` when building covariant types, but introduces the risk of unsoundness if used in a type that shouldn‚Äôt actually be covariant. (The opposite choice was made for `*mut T` even though technically the unsoundness could only be caused by calling unsafe functions.)\n\nCovariance is correct for most safe abstractions, such as `Box`, `Rc`, `Arc`, `Vec`, and `LinkedList`. This is the case because they provide a public API that follows the normal shared XOR mutable rules of Rust.\n\nIf your type cannot safely be covariant, you must ensure it contains some additional field to provide invariance. Often this field will be a [`PhantomData`](../marker/struct.PhantomData.html \"struct std::marker::PhantomData\") type like `PhantomData<Cell<T>>` or `PhantomData<&'a mut T>`.\n\nNotice that `NonNull<T>` has a `From` instance for `&T`. However, this does not change the fact that mutating through a (pointer derived from a) shared reference is undefined behavior unless the mutation happens inside an [`UnsafeCell<T>`](../cell/struct.UnsafeCell.html \"struct std::cell::UnsafeCell\"). The same goes for creating a mutable reference from a shared reference. When using this `From` instance without an `UnsafeCell<T>`, it is your responsibility to ensure that `as_mut` is never called, and `as_ptr` is never used for mutation.\n\n## [¬ß](#representation)Representation\n\nThanks to the [null pointer optimization](about:blank/option/index.html#representation \"mod std::option\"), `NonNull<T>` and `Option<NonNull<T>>` are guaranteed to have the same size and alignment:\n\n```\nuse std::ptr::NonNull;\n\nassert_eq!(size_of::<NonNull<i16>>(), size_of::<Option<NonNull<i16>>>());\nassert_eq!(align_of::<NonNull<i16>>(), align_of::<Option<NonNull<i16>>>());\n\nassert_eq!(size_of::<NonNull<str>>(), size_of::<Option<NonNull<str>>>());\nassert_eq!(align_of::<NonNull<str>>(), align_of::<Option<NonNull<str>>>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::%7Bsize_of,+align_of%7D;%0A++++use+std::ptr::NonNull;%0A++++%0A++++assert_eq!(size_of::%3CNonNull%3Ci16%3E%3E(),+size_of::%3COption%3CNonNull%3Ci16%3E%3E%3E());%0A++++assert_eq!(align_of::%3CNonNull%3Ci16%3E%3E(),+align_of::%3COption%3CNonNull%3Ci16%3E%3E%3E());%0A++++%0A++++assert_eq!(size_of::%3CNonNull%3Cstr%3E%3E(),+size_of::%3COption%3CNonNull%3Cstr%3E%3E%3E());%0A++++assert_eq!(align_of::%3CNonNull%3Cstr%3E%3E(),+align_of::%3COption%3CNonNull%3Cstr%3E%3E%3E());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#87)[¬ß](#impl-NonNull%3CT%3E)\n\n1.25.0 (const: 1.36.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#111)\n\nCreates a new `NonNull` that is dangling, but well-aligned.\n\nThis is useful for initializing types which lazily allocate, like `Vec::new` does.\n\nNote that the pointer value may potentially represent a valid pointer to a `T`, which means this must not be used as a ‚Äúnot yet initialized‚Äù sentinel value. Types that lazily allocate must track initialization by some other means.\n\n##### [¬ß](#examples)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet ptr = NonNull::<u32>::dangling();\n// Important: don't try to access the value of `ptr` without\n// initializing it first! The pointer is not null but isn't valid either!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+ptr+=+NonNull::%3Cu32%3E::dangling();%0A++++//+Important:+don%27t+try+to+access+the+value+of+%60ptr%60+without%0A++++//+initializing+it+first!+The+pointer+is+not+null+but+isn%27t+valid+either!%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#149)\n\nüî¨This is a nightly-only experimental API. (`ptr_as_uninit`¬†[#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns a shared references to the value. In contrast to [`as_ref`](about:blank/struct.NonNull.html#method.as_ref \"method std::ptr::NonNull::as_ref\"), this does not require that the value has to be initialized.\n\nFor the mutable counterpart see [`as_uninit_mut`](about:blank/struct.NonNull.html#method.as_uninit_mut \"method std::ptr::NonNull::as_uninit_mut\").\n\n##### [¬ß](#safety)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be ‚Äúdereferenceable‚Äù in the sense defined in [the module documentation](about:blank/index.html#safety \"mod std::ptr\").\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#183)\n\nüî¨This is a nightly-only experimental API. (`ptr_as_uninit`¬†[#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns a unique references to the value. In contrast to [`as_mut`](about:blank/struct.NonNull.html#method.as_mut \"method std::ptr::NonNull::as_mut\"), this does not require that the value has to be initialized.\n\nFor the shared counterpart see [`as_uninit_ref`](about:blank/struct.NonNull.html#method.as_uninit_ref \"method std::ptr::NonNull::as_uninit_ref\").\n\n##### [¬ß](#safety-1)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be ‚Äúdereferenceable‚Äù in the sense defined in [the module documentation](about:blank/index.html#safety \"mod std::ptr\").\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused!\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#190)[¬ß](#impl-NonNull%3CT%3E-1)\n\n1.25.0 (const: 1.25.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#217)\n\nCreates a new `NonNull`.\n\n##### [¬ß](#safety-2)Safety\n\n`ptr` must be non-null.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet ptr = unsafe { NonNull::new_unchecked(&mut x as *mut _) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+unsafe+%7B+NonNull::new_unchecked(%26mut+x+as+*mut+_)+%7D;%0A%7D&edition=2021)\n\n_Incorrect_ usage of this function:\n\n```\nuse std::ptr::NonNull;\n\n// NEVER DO THAT!!! This is undefined behavior. ‚ö†Ô∏è\nlet ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+NEVER+DO+THAT!!!+This+is+undefined+behavior.+%E2%9A%A0%EF%B8%8F%0A++++let+ptr+=+unsafe+%7B+NonNull::%3Cu32%3E::new_unchecked(std::ptr::null_mut())+%7D;%0A%7D&edition=2021)\n\n1.25.0 (const: [unstable](https://github.com/rust-lang/rust/issues/93235 \"Tracking issue for const_nonnull_new\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#246)\n\nCreates a new `NonNull` if `ptr` is non-null.\n\n##### [¬ß](#examples-2)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet ptr = NonNull::<u32>::new(&mut x as *mut _).expect(\"ptr is null!\");\n\nif let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {\n    unreachable!();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::%3Cu32%3E::new(%26mut+x+as+*mut+_).expect(%22ptr+is+null!%22);%0A++++%0A++++if+let+Some(ptr)+=+NonNull::%3Cu32%3E::new(std::ptr::null_mut())+%7B%0A++++++++unreachable!();%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#264-267)\n\nüî¨This is a nightly-only experimental API. (`ptr_metadata`¬†[#81513](https://github.com/rust-lang/rust/issues/81513))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#282)\n\nüî¨This is a nightly-only experimental API. (`ptr_metadata`¬†[#81513](https://github.com/rust-lang/rust/issues/81513))\n\nDecompose a (possibly wide) pointer into its data pointer and metadata components.\n\nThe pointer can be later reconstructed with [`NonNull::from_raw_parts`](about:blank/struct.NonNull.html#method.from_raw_parts \"associated function std::ptr::NonNull::from_raw_parts\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#295)\n\nüî¨This is a nightly-only experimental API. (`strict_provenance`¬†[#95228](https://github.com/rust-lang/rust/issues/95228))\n\nGets the ‚Äúaddress‚Äù portion of the pointer.\n\nFor more details see the equivalent method on a raw pointer, [`pointer::addr`](about:blank/primitive.pointer.html#method.addr \"method pointer::addr\").\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [`ptr` module documentation](index.html \"mod std::ptr\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#310)\n\nüî¨This is a nightly-only experimental API. (`strict_provenance`¬†[#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer with the given address.\n\nFor more details see the equivalent method on a raw pointer, [`pointer::with_addr`](about:blank/primitive.pointer.html#method.with_addr \"method pointer::with_addr\").\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [`ptr` module documentation](index.html \"mod std::ptr\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#324)\n\nüî¨This is a nightly-only experimental API. (`strict_provenance`¬†[#95228](https://github.com/rust-lang/rust/issues/95228))\n\nCreates a new pointer by mapping `self`‚Äôs address to a new one.\n\nFor more details see the equivalent method on a raw pointer, [`pointer::map_addr`](about:blank/primitive.pointer.html#method.map_addr \"method pointer::map_addr\").\n\nThis API and its claimed semantics are part of the Strict Provenance experiment, see the [`ptr` module documentation](index.html \"mod std::ptr\").\n\n1.25.0 (const: 1.32.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#350)\n\nAcquires the underlying `*mut` pointer.\n\n##### [¬ß](#examples-3)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet ptr = NonNull::new(&mut x).expect(\"ptr is null!\");\n\nlet x_value = unsafe { *ptr.as_ptr() };\nassert_eq!(x_value, 0);\n\nunsafe { *ptr.as_ptr() += 2; }\nlet x_value = unsafe { *ptr.as_ptr() };\nassert_eq!(x_value, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x).expect(%22ptr+is+null!%22);%0A++++%0A++++let+x_value+=+unsafe+%7B+*ptr.as_ptr()+%7D;%0A++++assert_eq!(x_value,+0);%0A++++%0A++++unsafe+%7B+*ptr.as_ptr()+%2B=+2;+%7D%0A++++let+x_value+=+unsafe+%7B+*ptr.as_ptr()+%7D;%0A++++assert_eq!(x_value,+2);%0A%7D&edition=2021)\n\n1.25.0 (const: 1.73.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#398)\n\nReturns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`](about:blank/struct.NonNull.html#method.as_uninit_ref \"method std::ptr::NonNull::as_uninit_ref\") must be used instead.\n\nFor the mutable counterpart see [`as_mut`](about:blank/struct.NonNull.html#method.as_mut \"method std::ptr::NonNull::as_mut\").\n\n##### [¬ß](#safety-3)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be ‚Äúdereferenceable‚Äù in the sense defined in [the module documentation](about:blank/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [¬ß](#examples-4)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet ptr = NonNull::new(&mut x as *mut _).expect(\"ptr is null!\");\n\nlet ref_x = unsafe { ptr.as_ref() };\nprintln!(\"{ref_x}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x+as+*mut+_).expect(%22ptr+is+null!%22);%0A++++%0A++++let+ref_x+=+unsafe+%7B+ptr.as_ref()+%7D;%0A++++println!(%22%7Bref_x%7D%22);%0A%7D&edition=2021)\n\n1.25.0 (const: [unstable](https://github.com/rust-lang/rust/issues/91822 \"Tracking issue for const_ptr_as_ref\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#450)\n\nReturns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`](about:blank/struct.NonNull.html#method.as_uninit_mut \"method std::ptr::NonNull::as_uninit_mut\") must be used instead.\n\nFor the shared counterpart see [`as_ref`](about:blank/struct.NonNull.html#method.as_ref \"method std::ptr::NonNull::as_ref\").\n\n##### [¬ß](#safety-4)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be properly aligned.\n    \n-   It must be ‚Äúdereferenceable‚Äù in the sense defined in [the module documentation](about:blank/index.html#safety \"mod std::ptr\").\n    \n-   The pointer must point to an initialized instance of `T`.\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused! (The part about being initialized is not yet fully decided, but until it is, the only safe approach is to ensure that they are indeed initialized.)\n\n##### [¬ß](#examples-5)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet mut ptr = NonNull::new(&mut x).expect(\"null pointer\");\n\nlet x_ref = unsafe { ptr.as_mut() };\nassert_eq!(*x_ref, 0);\n*x_ref += 2;\nassert_eq!(*x_ref, 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+mut+ptr+=+NonNull::new(%26mut+x).expect(%22null+pointer%22);%0A++++%0A++++let+x_ref+=+unsafe+%7B+ptr.as_mut()+%7D;%0A++++assert_eq!(*x_ref,+0);%0A++++*x_ref+%2B=+2;%0A++++assert_eq!(*x_ref,+2);%0A%7D&edition=2021)\n\n1.27.0 (const: 1.36.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#474)\n\nCasts to a pointer of another type.\n\n##### [¬ß](#examples-6)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut x = 0u32;\nlet ptr = NonNull::new(&mut x as *mut _).expect(\"null pointer\");\n\nlet casted_ptr = ptr.cast::<i8>();\nlet raw_ptr: *mut i8 = casted_ptr.as_ptr();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x+as+*mut+_).expect(%22null+pointer%22);%0A++++%0A++++let+casted_ptr+=+ptr.cast::%3Ci8%3E();%0A++++let+raw_ptr:+*mut+i8+=+casted_ptr.as_ptr();%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#530-532)\n\nCalculates the offset from a pointer.\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [¬ß](#safety-5)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   Both the starting and resulting pointer must be either in bounds or one byte past the end of the same [allocated object](about:blank/index.html#allocated-object \"mod std::ptr\").\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address space. That is, the infinite-precision sum, **in bytes** must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can‚Äôt even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\n##### [¬ß](#examples-7)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet mut s = [1, 2, 3];\nlet ptr: NonNull<u32> = NonNull::new(s.as_mut_ptr()).unwrap();\n\nunsafe {\n    println!(\"{}\", ptr.offset(1).read());\n    println!(\"{}\", ptr.offset(2).read());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+NonNull%3Cu32%3E+=+NonNull::new(s.as_mut_ptr()).unwrap();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+ptr.offset(1).read());%0A++++++++println!(%22%7B%7D%22,+ptr.offset(2).read());%0A++++%7D%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#556)\n\nCalculates the offset from a pointer in bytes.\n\n`count` is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [offset](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#616-618)\n\nCalculates the offset from a pointer (convenience for `.offset(count as isize)`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [¬ß](#safety-6)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   Both the starting and resulting pointer must be either in bounds or one byte past the end of the same [allocated object](about:blank/index.html#allocated-object \"mod std::ptr\").\n    \n-   The computed offset, **in bytes**, cannot overflow an `isize`.\n    \n-   The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address space. That is, the infinite-precision sum must fit in a `usize`.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len())` is always safe.\n\nMost platforms fundamentally can‚Äôt even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet s: &str = \"123\";\nlet ptr: NonNull<u8> = NonNull::new(s.as_ptr().cast_mut()).unwrap();\n\nunsafe {\n    println!(\"{}\", ptr.add(1).read() as char);\n    println!(\"{}\", ptr.add(2).read() as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+NonNull%3Cu8%3E+=+NonNull::new(s.as_ptr().cast_mut()).unwrap();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+ptr.add(1).read()+as+char);%0A++++++++println!(%22%7B%7D%22,+ptr.add(2).read()+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#643)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset(count as isize)`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [`add`](about:blank/struct.NonNull.html#method.add \"method std::ptr::NonNull::add\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#705-707)\n\nCalculates the offset from a pointer (convenience for `.offset((count as isize).wrapping_neg())`).\n\n`count` is in units of T; e.g., a `count` of 3 represents a pointer offset of `3 * size_of::<T>()` bytes.\n\n##### [¬ß](#safety-7)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   Both the starting and resulting pointer must be either in bounds or one byte past the end of the same [allocated object](about:blank/index.html#allocated-object \"mod std::ptr\").\n    \n-   The computed offset cannot exceed `isize::MAX` **bytes**.\n    \n-   The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address space. That is, the infinite-precision sum must fit in a usize.\n    \n\nThe compiler and standard library generally tries to ensure allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `vec.as_ptr().add(vec.len()).sub(vec.len())` is always safe.\n\nMost platforms fundamentally can‚Äôt even construct such an allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function.\n\n##### [¬ß](#examples-9)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet s: &str = \"123\";\n\nunsafe {\n    let end: NonNull<u8> = NonNull::new(s.as_ptr().cast_mut()).unwrap().add(3);\n    println!(\"{}\", end.sub(1).read() as char);\n    println!(\"{}\", end.sub(2).read() as char);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+NonNull%3Cu8%3E+=+NonNull::new(s.as_ptr().cast_mut()).unwrap().add(3);%0A++++++++println!(%22%7B%7D%22,+end.sub(1).read()+as+char);%0A++++++++println!(%22%7B%7D%22,+end.sub(2).read()+as+char);%0A++++%7D%0A%7D&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#737)\n\nCalculates the offset from a pointer in bytes (convenience for `.byte_offset((count as isize).wrapping_neg())`).\n\n`count` is in units of bytes.\n\nThis is purely a convenience for casting to a `u8` pointer and using [`sub`](about:blank/struct.NonNull.html#method.sub \"method std::ptr::NonNull::sub\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation changes only the data pointer, leaving the metadata untouched.\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#852-854)\n\nCalculates the distance between two pointers. The returned value is in units of T: the distance in bytes divided by `mem::size_of::<T>()`.\n\nThis is equivalent to `(self as isize - origin as isize) / (mem::size_of::<T>() as isize)`, except that it has a lot more opportunities for UB, in exchange for the compiler better understanding what you are doing.\n\nThe primary motivation of this method is for computing the `len` of an array/slice of `T` that you are currently representing as a ‚Äústart‚Äù and ‚Äúend‚Äù pointer (and ‚Äúend‚Äù is ‚Äúone past the end‚Äù of the array). In that case, `end.offset_from(start)` gets you the length of the array.\n\nAll of the following safety requirements are trivially satisfied for this usecase.\n\n##### [¬ß](#safety-8)Safety\n\nIf any of the following conditions are violated, the result is Undefined Behavior:\n\n-   Both `self` and `origin` must be either in bounds or one byte past the end of the same [allocated object](about:blank/index.html#allocated-object \"mod std::ptr\").\n    \n-   Both pointers must be _derived from_ a pointer to the same object. (See below for an example.)\n    \n-   The distance between the pointers, in bytes, must be an exact multiple of the size of `T`.\n    \n-   The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n    \n-   The distance being in bounds cannot rely on ‚Äúwrapping around‚Äù the address space.\n    \n\nRust types are never larger than `isize::MAX` and Rust allocations never wrap around the address space, so two pointers within some value of any Rust type `T` will always satisfy the last two conditions. The standard library also generally ensures that allocations never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())` always satisfies the last two conditions.\n\nMost platforms fundamentally can‚Äôt even construct such a large allocation. For instance, no known 64-bit platform can ever serve a request for 263 bytes due to page-table limitations or splitting the address space. However, some 32-bit and 16-bit platforms may successfully serve a request for more than `isize::MAX` bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files _may_ be too large to handle with this function. (Note that [`offset`](#method.offset) and [`add`](#method.add) also have a similar limitation and hence cannot be used on such large allocations either.)\n\nThe requirement for pointers to be derived from the same allocated object is primarily needed for `const`\\-compatibility: the distance between pointers into _different_ allocated objects is not known at compile-time. However, the requirement also exists at runtime and may be exploited by optimizations. If you wish to compute the difference between pointers that are not guaranteed to be from the same allocation, use `(self as isize - origin as isize) / mem::size_of::<T>()`.\n\n##### [¬ß](#panics)Panics\n\nThis function panics if `T` is a Zero-Sized Type (‚ÄúZST‚Äù).\n\n##### [¬ß](#examples-10)Examples\n\nBasic usage:\n\n```\nuse std::ptr::NonNull;\n\nlet a = [0; 5];\nlet ptr1: NonNull<u32> = NonNull::from(&a[1]);\nlet ptr2: NonNull<u32> = NonNull::from(&a[3]);\nunsafe {\n    assert_eq!(ptr2.offset_from(ptr1), 2);\n    assert_eq!(ptr1.offset_from(ptr2), -2);\n    assert_eq!(ptr1.offset(2), ptr2);\n    assert_eq!(ptr2.offset(-2), ptr1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B1%5D);%0A++++let+ptr2:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B3%5D);%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&edition=2021)\n\n_Incorrect_ usage:\n\n```\n#![feature(strict_provenance)]\nuse std::ptr::NonNull;\n\nlet ptr1 = NonNull::new(Box::into_raw(Box::new(0u8))).unwrap();\nlet ptr2 = NonNull::new(Box::into_raw(Box::new(1u8))).unwrap();\nlet diff = (ptr2.addr().get() as isize).wrapping_sub(ptr1.addr().get() as isize);\n// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\nlet ptr2_other = NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff)).unwrap();\nassert_eq!(ptr2.addr(), ptr2_other.addr());\n// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\n\nlet zero = unsafe { ptr2_other.offset_from(ptr2) }; // Undefined Behavior\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(strict_provenance)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+ptr1+=+NonNull::new(Box::into_raw(Box::new(0u8))).unwrap();%0A++++let+ptr2+=+NonNull::new(Box::into_raw(Box::new(1u8))).unwrap();%0A++++let+diff+=+(ptr2.addr().get()+as+isize).wrapping_sub(ptr1.addr().get()+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff)).unwrap();%0A++++assert_eq!(ptr2.addr(),+ptr2_other.addr());%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++%0A++++let+zero+=+unsafe+%7B+ptr2_other.offset_from(ptr2)+%7D;+//+Undefined+Behavior%0A%7D&version=nightly&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#873)\n\nCalculates the distance between two pointers. The returned value is in units of **bytes**.\n\nThis is purely a convenience for casting to a `u8` pointer and using [`offset_from`](about:blank/struct.NonNull.html#method.offset_from \"method std::ptr::NonNull::offset_from\") on it. See that method for documentation and safety requirements.\n\nFor non-`Sized` pointees this operation considers only the data pointers, ignoring the metadata.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#945-947)\n\nüî¨This is a nightly-only experimental API. (`ptr_sub_ptr`¬†[#95892](https://github.com/rust-lang/rust/issues/95892))\n\nCalculates the distance between two pointers, _where it‚Äôs known that `self` is equal to or greater than `origin`_. The returned value is in units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n\nThis computes the same value that [`offset_from`](#method.offset_from) would compute, but with the added precondition that the offset is guaranteed to be non-negative. This method is equivalent to `usize::try_from(self.offset_from(origin)).unwrap_unchecked()`, but it provides slightly more information to the optimizer, which can sometimes allow it to optimize slightly better with some backends.\n\nThis method can be though of as recovering the `count` that was passed to [`add`](#method.add) (or, with the parameters in the other order, to [`sub`](#method.sub)). The following are all equivalent, assuming that their safety preconditions are met:\n\n```\nptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+std::ptr::NonNull%3Cu32%3E,+origin:+std::ptr::NonNull%3Cu32%3E,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [¬ß](#safety-9)Safety\n\n-   The distance between the pointers must be non-negative (`self >= origin`)\n    \n-   _All_ the safety conditions of [`offset_from`](#method.offset_from) apply to this method as well; see it for the full details.\n    \n\nImportantly, despite the return type of this method being able to represent a larger offset, it‚Äôs still _not permitted_ to pass pointers which differ by more than `isize::MAX` _bytes_. As such, the result of this method will always be less than or equal to `isize::MAX as usize`.\n\n##### [¬ß](#panics-1)Panics\n\nThis function panics if `T` is a Zero-Sized Type (‚ÄúZST‚Äù).\n\n##### [¬ß](#examples-11)Examples\n\n```\n#![feature(ptr_sub_ptr)]\nuse std::ptr::NonNull;\n\nlet a = [0; 5];\nlet ptr1: NonNull<u32> = NonNull::from(&a[1]);\nlet ptr2: NonNull<u32> = NonNull::from(&a[3]);\nunsafe {\n    assert_eq!(ptr2.sub_ptr(ptr1), 2);\n    assert_eq!(ptr1.add(2), ptr2);\n    assert_eq!(ptr2.sub(2), ptr1);\n    assert_eq!(ptr2.sub_ptr(ptr2), 0);\n}\n\n// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B1%5D);%0A++++let+ptr2:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B3%5D);%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.sub_ptr(ptr2)%0A%7D&version=nightly&edition=2021)\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#963-965)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nSee [`ptr::read`](fn.read.html \"fn std::ptr::read\") for safety concerns and examples.\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#984-986)\n\nPerforms a volatile read of the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.\n\nSee [`ptr::read_volatile`](fn.read_volatile.html \"fn std::ptr::read_volatile\") for safety concerns and examples.\n\n1.80.0 (const: 1.80.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1004-1006)\n\nReads the value from `self` without moving it. This leaves the memory in `self` unchanged.\n\nUnlike `read`, the pointer may be unaligned.\n\nSee [`ptr::read_unaligned`](fn.read_unaligned.html \"fn std::ptr::read_unaligned\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1024-1026)\n\nCopies `count * size_of<T>` bytes from `self` to `dest`. The source and destination may overlap.\n\nNOTE: this has the _same_ argument order as [`ptr::copy`](fn.copy.html \"fn std::ptr::copy\").\n\nSee [`ptr::copy`](fn.copy.html \"fn std::ptr::copy\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1044-1046)\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1064-1066)\n\nCopies `count * size_of<T>` bytes from `src` to `self`. The source and destination may overlap.\n\nNOTE: this has the _opposite_ argument order of [`ptr::copy`](fn.copy.html \"fn std::ptr::copy\").\n\nSee [`ptr::copy`](fn.copy.html \"fn std::ptr::copy\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/80697 \"Tracking issue for const_intrinsic_copy\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1084-1086)\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1099)\n\nExecutes the destructor (if any) of the pointed-to value.\n\nSee [`ptr::drop_in_place`](fn.drop_in_place.html \"fn std::ptr::drop_in_place\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1114-1116)\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\nSee [`ptr::write`](fn.write.html \"fn std::ptr::write\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1133-1135)\n\nInvokes memset on the specified pointer, setting `count * size_of::<T>()` bytes of memory starting at `self` to `val`.\n\nSee [`ptr::write_bytes`](fn.write_bytes.html \"fn std::ptr::write_bytes\") for safety concerns and examples.\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1154-1156)\n\nPerforms a volatile write of a memory location with the given value without reading or dropping the old value.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not be elided or reordered by the compiler across other volatile operations.\n\nSee [`ptr::write_volatile`](fn.write_volatile.html \"fn std::ptr::write_volatile\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/86302 \"Tracking issue for const_ptr_write\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1174-1176)\n\nOverwrites a memory location with the given value without reading or dropping the old value.\n\nUnlike `write`, the pointer may be unaligned.\n\nSee [`ptr::write_unaligned`](fn.write_unaligned.html \"fn std::ptr::write_unaligned\") for safety concerns and examples.\n\n1.80.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1190-1192)\n\nReplaces the value at `self` with `src`, returning the old value, without dropping either.\n\nSee [`ptr::replace`](fn.replace.html \"fn std::ptr::replace\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/83163 \"Tracking issue for const_swap\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1208-1210)\n\nSwaps the values at two mutable locations of the same type, without deinitializing either. They may overlap, unlike `mem::swap` which is otherwise equivalent.\n\nSee [`ptr::swap`](fn.swap.html \"fn std::ptr::swap\") for safety concerns and examples.\n\n1.80.0 (const: [unstable](https://github.com/rust-lang/rust/issues/90962 \"Tracking issue for const_align_offset\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1260-1262)\n\nComputes the offset that needs to be applied to the pointer in order to make it aligned to `align`.\n\nIf it is not possible to align the pointer, the implementation returns `usize::MAX`. It is permissible for the implementation to _always_ return `usize::MAX`. Only your algorithm‚Äôs performance can depend on getting a usable offset here, not its correctness.\n\nThe offset is expressed in number of `T` elements, and not bytes.\n\nThere are no guarantees whatsoever that offsetting the pointer will not overflow or go beyond the allocation that the pointer points into. It is up to the caller to ensure that the returned offset is correct in all terms other than alignment.\n\n##### [¬ß](#panics-2)Panics\n\nThe function panics if `align` is not a power-of-two.\n\n##### [¬ß](#examples-12)Examples\n\nAccessing adjacent `u8` as `u16`\n\n```\nuse std::mem::align_of;\nuse std::ptr::NonNull;\n\nlet x = [5_u8, 6, 7, 8, 9];\nlet ptr = NonNull::new(x.as_ptr() as *mut u8).unwrap();\nlet offset = ptr.align_offset(align_of::<u16>());\n\nif offset < x.len() - 1 {\n    let u16_ptr = ptr.add(offset).cast::<u16>();\n    assert!(u16_ptr.read() == u16::from_ne_bytes([5, 6]) || u16_ptr.read() == u16::from_ne_bytes([6, 7]));\n} else {\n    // while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++use+std::ptr::NonNull;%0A++++%0A++++unsafe+%7B%0A++++let+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+NonNull::new(x.as_ptr()+as+*mut+u8).unwrap();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++assert!(u16_ptr.read()+==+u16::from_ne_bytes(%5B5,+6%5D)+%7C%7C+u16_ptr.read()+==+u16::from_ne_bytes(%5B6,+7%5D));%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.79.0 (const: [unstable](https://github.com/rust-lang/rust/issues/104203 \"Tracking issue for const_pointer_is_aligned\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1384-1386)\n\nReturns whether the pointer is properly aligned for `T`.\n\n##### [¬ß](#examples-13)Examples\n\n```\nuse std::ptr::NonNull;\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet data = AlignedI32(42);\nlet ptr = NonNull::<AlignedI32>::from(&data);\n\nassert!(ptr.is_aligned());\nassert!(!NonNull::new(ptr.as_ptr().wrapping_byte_add(1)).unwrap().is_aligned());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+NonNull::%3CAlignedI32%3E::from(%26data);%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!NonNull::new(ptr.as_ptr().wrapping_byte_add(1)).unwrap().is_aligned());%0A%7D&edition=2021)\n\n##### [¬ß](#at-compiletime)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer is never aligned if cast to a type with a stricter alignment than the reference‚Äôs underlying allocation.\n\n```\n#![feature(const_nonnull_new)]\n#![feature(const_option)]\n#![feature(const_pointer_is_aligned)]\nuse std::ptr::NonNull;\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let data = [AlignedI32(42), AlignedI32(42)];\n    let ptr = NonNull::<AlignedI32>::new(&data[0] as *const _ as *mut _).unwrap();\n    assert!(ptr.is_aligned());\n\n    // At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = unsafe { ptr.add(1).cast::<AlignedI64>() };\n    assert!(!ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_nonnull_new)%5D%0A%23!%5Bfeature(const_option)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+%5BAlignedI32(42),+AlignedI32(42)%5D;%0A++++++++let+ptr+=+NonNull::%3CAlignedI32%3E::new(%26data%5B0%5D+as+*const+_+as+*mut+_).unwrap();%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+unsafe+%7B+ptr.add(1).cast::%3CAlignedI64%3E()+%7D;%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn‚Äôt aligned.\n\n```\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\nconst COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\nconst _: () = assert!(!COMPTIME_PTR.cast::<AlignedI64>().is_aligned());\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).cast::<AlignedI64>().is_aligned());\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.cast::<AlignedI64>().is_aligned(),\n    runtime_ptr.wrapping_add(1).cast::<AlignedI64>().is_aligned(),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(const_pointer_is_aligned)]\n#![feature(const_option)]\n#![feature(const_nonnull_new)]\nuse std::ptr::NonNull;\n\n// On some platforms, the alignment of primitives is less than their size.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n#[repr(align(8))]\nstruct AlignedI64(i64);\n\nconst _: () = {\n    let ptr = NonNull::new(40 as *mut AlignedI32).unwrap();\n    assert!(ptr.is_aligned());\n\n    // For pointers with a known address, runtime and compiletime behavior are identical.\n    let ptr1 = ptr.cast::<AlignedI64>();\n    let ptr2 = NonNull::new(ptr.as_ptr().wrapping_add(1)).unwrap().cast::<AlignedI64>();\n    assert!(ptr1.is_aligned());\n    assert!(!ptr2.is_aligned());\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_option)%5D%0A%23!%5Bfeature(const_nonnull_new)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+NonNull::new(40+as+*mut+AlignedI32).unwrap();%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+NonNull::new(ptr.as_ptr().wrapping_add(1)).unwrap().cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1499)\n\nüî¨This is a nightly-only experimental API. (`pointer_is_aligned_to`¬†[#96284](https://github.com/rust-lang/rust/issues/96284))\n\nReturns whether the pointer is aligned to `align`.\n\nFor non-`Sized` pointees this operation considers only the data pointer, ignoring the metadata.\n\n##### [¬ß](#panics-3)Panics\n\nThe function panics if `align` is not a power-of-two (this includes 0).\n\n##### [¬ß](#examples-14)Examples\n\n```\n#![feature(pointer_is_aligned_to)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nlet data = AlignedI32(42);\nlet ptr = &data as *const AlignedI32;\n\nassert!(ptr.is_aligned_to(1));\nassert!(ptr.is_aligned_to(2));\nassert!(ptr.is_aligned_to(4));\n\nassert!(ptr.wrapping_byte_add(2).is_aligned_to(2));\nassert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));\n\nassert_ne!(ptr.is_aligned_to(8), ptr.wrapping_add(1).is_aligned_to(8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&version=nightly&edition=2021)\n\n##### [¬ß](#at-compiletime-1)At compiletime\n\n**Note: Alignment at compiletime is experimental and subject to change. See the [tracking issue](https://github.com/rust-lang/rust/issues/104203) for details.**\n\nAt compiletime, the compiler may not know where a value will end up in memory. Calling this function on a pointer created from a reference at compiletime will only return `true` if the pointer is guaranteed to be aligned. This means that the pointer cannot be stricter aligned than the reference‚Äôs underlying allocation.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\nconst _: () = {\n    let data = AlignedI32(42);\n    let ptr = &data as *const AlignedI32;\n\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n\n    // At compiletime, we know for sure that the pointer isn't aligned to 8.\n    assert!(!ptr.is_aligned_to(8));\n    assert!(!ptr.wrapping_add(1).is_aligned_to(8));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn%27t+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\nDue to this behavior, it is possible that a runtime pointer derived from a compiletime pointer is aligned, even if the compiletime pointer wasn‚Äôt aligned.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n// On some platforms, the alignment of i32 is less than 4.\n#[repr(align(4))]\nstruct AlignedI32(i32);\n\n// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\nconst COMPTIME_PTR: *const AlignedI32 = &AlignedI32(42);\nconst _: () = assert!(!COMPTIME_PTR.is_aligned_to(8));\nconst _: () = assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));\n\n// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\nlet runtime_ptr = COMPTIME_PTR;\nassert_ne!(\n    runtime_ptr.is_aligned_to(8),\n    runtime_ptr.wrapping_add(1).is_aligned_to(8),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&version=nightly&edition=2021)\n\nIf a pointer is created from a fixed address, this function behaves the same during runtime and compiletime.\n\n```\n#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\nconst _: () = {\n    let ptr = 40 as *const u8;\n    assert!(ptr.is_aligned_to(1));\n    assert!(ptr.is_aligned_to(2));\n    assert!(ptr.is_aligned_to(4));\n    assert!(ptr.is_aligned_to(8));\n    assert!(!ptr.is_aligned_to(16));\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1504)[¬ß](#impl-NonNull%3C%5BT%5D%3E)\n\n1.70.0 (const: [unstable](https://github.com/rust-lang/rust/issues/67456 \"Tracking issue for const_slice_from_raw_parts_mut\")) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1530)\n\nCreates a non-null raw slice from a thin pointer and a length.\n\nThe `len` argument is the number of **elements**, not the number of bytes.\n\nThis function is safe, but dereferencing the return value is unsafe. See the documentation of [`slice::from_raw_parts`](../slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\") for slice safety requirements.\n\n##### [¬ß](#examples-15)Examples\n\n```\nuse std::ptr::NonNull;\n\n// create a slice pointer when starting out with a pointer to the first element\nlet mut x = [5, 6, 7];\nlet nonnull_pointer = NonNull::new(x.as_mut_ptr()).unwrap();\nlet slice = NonNull::slice_from_raw_parts(nonnull_pointer, 3);\nassert_eq!(unsafe { slice.as_ref()[2] }, 7);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+create+a+slice+pointer+when+starting+out+with+a+pointer+to+the+first+element%0A++++let+mut+x+=+%5B5,+6,+7%5D;%0A++++let+nonnull_pointer+=+NonNull::new(x.as_mut_ptr()).unwrap();%0A++++let+slice+=+NonNull::slice_from_raw_parts(nonnull_pointer,+3);%0A++++assert_eq!(unsafe+%7B+slice.as_ref()%5B2%5D+%7D,+7);%0A%7D&edition=2021)\n\n(Note that this example artificially demonstrates a use of this method, but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n\n1.63.0 (const: 1.63.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1554)\n\nReturns the length of a non-null raw slice.\n\nThe returned value is the number of **elements**, not the number of bytes.\n\nThis function is safe, even when the non-null raw slice cannot be dereferenced to a slice because the pointer does not have a valid address.\n\n##### [¬ß](#examples-16)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\nassert_eq!(slice.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&edition=2021)\n\n1.79.0 (const: 1.79.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1572)\n\nReturns `true` if the non-null raw slice has a length of 0.\n\n##### [¬ß](#examples-17)Examples\n\n```\nuse std::ptr::NonNull;\n\nlet slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\nassert!(!slice.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1591)\n\nüî¨This is a nightly-only experimental API. (`slice_ptr_get`¬†[#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a non-null pointer to the slice‚Äôs buffer.\n\n##### [¬ß](#examples-18)Examples\n\n```\n#![feature(slice_ptr_get)]\nuse std::ptr::NonNull;\n\nlet slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\nassert_eq!(slice.as_non_null_ptr(), NonNull::<i8>::dangling());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.as_non_null_ptr(),+NonNull::%3Ci8%3E::dangling());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1611)\n\nüî¨This is a nightly-only experimental API. (`slice_ptr_get`¬†[#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to the slice‚Äôs buffer.\n\n##### [¬ß](#examples-19)Examples\n\n```\n#![feature(slice_ptr_get)]\nuse std::ptr::NonNull;\n\nlet slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\nassert_eq!(slice.as_mut_ptr(), NonNull::<i8>::dangling().as_ptr());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.as_mut_ptr(),+NonNull::%3Ci8%3E::dangling().as_ptr());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1656)\n\nüî¨This is a nightly-only experimental API. (`ptr_as_uninit`¬†[#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns a shared reference to a slice of possibly uninitialized values. In contrast to [`as_ref`](about:blank/struct.NonNull.html#method.as_ref \"method std::ptr::NonNull::as_ref\"), this does not require that the value has to be initialized.\n\nFor the mutable counterpart see [`as_uninit_slice_mut`](about:blank/struct.NonNull.html#method.as_uninit_slice_mut \"method std::ptr::NonNull::as_uninit_slice_mut\").\n\n##### [¬ß](#safety-10)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be [valid](about:blank/index.html#safety \"mod std::ptr\") for reads for `ptr.len() * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects.\n        \n    -   The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n        \n-   The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n    \n\nThis applies even if the result of this method is unused!\n\nSee also [`slice::from_raw_parts`](../slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1719)\n\nüî¨This is a nightly-only experimental API. (`ptr_as_uninit`¬†[#75402](https://github.com/rust-lang/rust/issues/75402))\n\nReturns a unique reference to a slice of possibly uninitialized values. In contrast to [`as_mut`](about:blank/struct.NonNull.html#method.as_mut \"method std::ptr::NonNull::as_mut\"), this does not require that the value has to be initialized.\n\nFor the shared counterpart see [`as_uninit_slice`](about:blank/struct.NonNull.html#method.as_uninit_slice \"method std::ptr::NonNull::as_uninit_slice\").\n\n##### [¬ß](#safety-11)Safety\n\nWhen calling this method, you have to ensure that all of the following is true:\n\n-   The pointer must be [valid](about:blank/index.html#safety \"mod std::ptr\") for reads and writes for `ptr.len() * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects.\n        \n    -   The pointer must be aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n        \n-   The total size `ptr.len() * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n-   You must enforce Rust‚Äôs aliasing rules, since the returned lifetime `'a` is arbitrarily chosen and does not necessarily reflect the actual lifetime of the data. In particular, while this reference exists, the memory the pointer points to must not get accessed (read or written) through any other pointer.\n    \n\nThis applies even if the result of this method is unused!\n\nSee also [`slice::from_raw_parts_mut`](../slice/fn.from_raw_parts_mut.html \"fn std::slice::from_raw_parts_mut\").\n\n##### [¬ß](#examples-20)Examples\n\n```\n#![feature(allocator_api, ptr_as_uninit)]\n\nuse std::alloc::{Allocator, Layout, Global};\nuse std::mem::MaybeUninit;\nuse std::ptr::NonNull;\n\nlet memory: NonNull<[u8]> = Global.allocate(Layout::new::<[u8; 32]>())?;\n// This is safe as `memory` is valid for reads and writes for `memory.len()` many bytes.\n// Note that calling `memory.as_mut()` is not allowed here as the content may be uninitialized.\nlet slice: &mut [MaybeUninit<u8>] = unsafe { memory.as_uninit_slice_mut() };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+ptr_as_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+Global%7D;%0A++++use+std::mem::MaybeUninit;%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+memory:+NonNull%3C%5Bu8%5D%3E+=+Global.allocate(Layout::new::%3C%5Bu8;+32%5D%3E())?;%0A++++//+This+is+safe+as+%60memory%60+is+valid+for+reads+and+writes+for+%60memory.len()%60+many+bytes.%0A++++//+Note+that+calling+%60memory.as_mut()%60+is+not+allowed+here+as+the+content+may+be+uninitialized.%0A++++%23%5Ballow(unused_variables)%5D%0A++++let+slice:+%26mut+%5BMaybeUninit%3Cu8%3E%5D+=+unsafe+%7B+memory.as_uninit_slice_mut()+%7D;%0A++++Ok::%3C_,+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1747-1749)\n\nüî¨This is a nightly-only experimental API. (`slice_ptr_get`¬†[#74265](https://github.com/rust-lang/rust/issues/74265))\n\nReturns a raw pointer to an element or subslice, without doing bounds checking.\n\nCalling this method with an out-of-bounds index or when `self` is not dereferenceable is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting pointer is not used.\n\n##### [¬ß](#examples-21)Examples\n\n```\n#![feature(slice_ptr_get)]\nuse std::ptr::NonNull;\n\nlet x = &mut [1, 2, 4];\nlet x = NonNull::slice_from_raw_parts(NonNull::new(x.as_mut_ptr()).unwrap(), x.len());\n\nunsafe {\n    assert_eq!(x.get_unchecked_mut(1).as_ptr(), x.as_non_null_ptr().as_ptr().add(1));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++let+x+=+NonNull::slice_from_raw_parts(NonNull::new(x.as_mut_ptr()).unwrap(),+x.len());%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked_mut(1).as_ptr(),+x.as_non_null_ptr().as_ptr().add(1));%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1758)[¬ß](#impl-Clone-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1775)[¬ß](#impl-Debug-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1847)[¬ß](#impl-From%3C%26T%3E-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1852)[¬ß](#method.from)\n\nConverts a `&T` to a `NonNull<T>`.\n\nThis conversion is safe and infallible since references cannot be null.\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1835)[¬ß](#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1840)[¬ß](#method.from-1)\n\nConverts a `&mut T` to a `NonNull<T>`.\n\nThis conversion is safe and infallible since references cannot be null.\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1819)[¬ß](#impl-Hash-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1801)[¬ß](#impl-Ord-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1792)[¬ß](#impl-PartialEq-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1795)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1810)[¬ß](#impl-PartialOrd-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1813)[¬ß](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[¬ß](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[¬ß](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[¬ß](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[¬ß](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1782)[¬ß](#impl-Pointer-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1769)[¬ß](#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1766)[¬ß](#impl-Copy-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1772)[¬ß](#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1789)[¬ß](#impl-Eq-for-NonNull%3CT%3E)\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#80)[¬ß](#impl-Send-for-NonNull%3CT%3E)\n\n`NonNull` pointers are not `Send` because the data they reference may be aliased.\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#85)[¬ß](#impl-Sync-for-NonNull%3CT%3E)\n\n`NonNull` pointers are not `Sync` because the data they reference may be aliased.\n\n1.25.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#191)[¬ß](#impl-UnwindSafe-for-NonNull%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`*mut T` but non-zero and covariant.\"><title>NonNull in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">NonNull</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">NonNull</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.add\">add</a></li><li><a href=\"#method.addr\">addr</a></li><li><a href=\"#method.align_offset\">align_offset</a></li><li><a href=\"#method.as_mut\">as_mut</a></li><li><a href=\"#method.as_mut_ptr\">as_mut_ptr</a></li><li><a href=\"#method.as_non_null_ptr\">as_non_null_ptr</a></li><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.as_ref\">as_ref</a></li><li><a href=\"#method.as_uninit_mut\">as_uninit_mut</a></li><li><a href=\"#method.as_uninit_ref\">as_uninit_ref</a></li><li><a href=\"#method.as_uninit_slice\">as_uninit_slice</a></li><li><a href=\"#method.as_uninit_slice_mut\">as_uninit_slice_mut</a></li><li><a href=\"#method.byte_add\">byte_add</a></li><li><a href=\"#method.byte_offset\">byte_offset</a></li><li><a href=\"#method.byte_offset_from\">byte_offset_from</a></li><li><a href=\"#method.byte_sub\">byte_sub</a></li><li><a href=\"#method.cast\">cast</a></li><li><a href=\"#method.copy_from\">copy_from</a></li><li><a href=\"#method.copy_from_nonoverlapping\">copy_from_nonoverlapping</a></li><li><a href=\"#method.copy_to\">copy_to</a></li><li><a href=\"#method.copy_to_nonoverlapping\">copy_to_nonoverlapping</a></li><li><a href=\"#method.dangling\">dangling</a></li><li><a href=\"#method.drop_in_place\">drop_in_place</a></li><li><a href=\"#method.from_raw_parts\">from_raw_parts</a></li><li><a href=\"#method.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#method.is_aligned\">is_aligned</a></li><li><a href=\"#method.is_aligned_to\">is_aligned_to</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.map_addr\">map_addr</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_unchecked\">new_unchecked</a></li><li><a href=\"#method.offset\">offset</a></li><li><a href=\"#method.offset_from\">offset_from</a></li><li><a href=\"#method.read\">read</a></li><li><a href=\"#method.read_unaligned\">read_unaligned</a></li><li><a href=\"#method.read_volatile\">read_volatile</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.slice_from_raw_parts\">slice_from_raw_parts</a></li><li><a href=\"#method.sub\">sub</a></li><li><a href=\"#method.sub_ptr\">sub_ptr</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.to_raw_parts\">to_raw_parts</a></li><li><a href=\"#method.with_addr\">with_addr</a></li><li><a href=\"#method.write\">write</a></li><li><a href=\"#method.write_bytes\">write_bytes</a></li><li><a href=\"#method.write_unaligned\">write_unaligned</a></li><li><a href=\"#method.write_volatile\">write_volatile</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Send-for-NonNull%3CT%3E\">!Send</a></li><li><a href=\"#impl-Sync-for-NonNull%3CT%3E\">!Sync</a></li><li><a href=\"#impl-Clone-for-NonNull%3CT%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\">CoerceUnsized&lt;NonNull&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Copy-for-NonNull%3CT%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-NonNull%3CT%3E\">Debug</a></li><li><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\">DispatchFromDyn&lt;NonNull&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Eq-for-NonNull%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3C%26T%3E-for-NonNull%3CT%3E\">From&lt;&amp;T&gt;</a></li><li><a href=\"#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\">From&lt;&amp;mut T&gt;</a></li><li><a href=\"#impl-Hash-for-NonNull%3CT%3E\">Hash</a></li><li><a href=\"#impl-Ord-for-NonNull%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-NonNull%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-NonNull%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-Pointer-for-NonNull%3CT%3E\">Pointer</a></li><li><a href=\"#impl-UnwindSafe-for-NonNull%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-NonNull%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-NonNull%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-NonNull%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"struct\" href=\"#\">NonNull</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#73\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct NonNull&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>*mut T</code> but non-zero and <a href=\"https://doc.rust-lang.org/reference/subtyping.html\">covariant</a>.</p>\n<p>This is often the correct thing to use when building data structures using\nraw pointers, but is ultimately more dangerous to use because of its additional\nproperties. If you‚Äôre not sure if you should use <code>NonNull&lt;T&gt;</code>, just use <code>*mut T</code>!</p>\n<p>Unlike <code>*mut T</code>, the pointer must always be non-null, even if the pointer\nis never dereferenced. This is so that enums may use this forbidden value\nas a discriminant ‚Äì <code>Option&lt;NonNull&lt;T&gt;&gt;</code> has the same size as <code>*mut T</code>.\nHowever the pointer may still dangle if it isn‚Äôt dereferenced.</p>\n<p>Unlike <code>*mut T</code>, <code>NonNull&lt;T&gt;</code> was chosen to be covariant over <code>T</code>. This makes it\npossible to use <code>NonNull&lt;T&gt;</code> when building covariant types, but introduces the\nrisk of unsoundness if used in a type that shouldn‚Äôt actually be covariant.\n(The opposite choice was made for <code>*mut T</code> even though technically the unsoundness\ncould only be caused by calling unsafe functions.)</p>\n<p>Covariance is correct for most safe abstractions, such as <code>Box</code>, <code>Rc</code>, <code>Arc</code>, <code>Vec</code>,\nand <code>LinkedList</code>. This is the case because they provide a public API that follows the\nnormal shared XOR mutable rules of Rust.</p>\n<p>If your type cannot safely be covariant, you must ensure it contains some\nadditional field to provide invariance. Often this field will be a <a href=\"../marker/struct.PhantomData.html\" title=\"struct std::marker::PhantomData\"><code>PhantomData</code></a>\ntype like <code>PhantomData&lt;Cell&lt;T&gt;&gt;</code> or <code>PhantomData&lt;&amp;'a mut T&gt;</code>.</p>\n<p>Notice that <code>NonNull&lt;T&gt;</code> has a <code>From</code> instance for <code>&amp;T</code>. However, this does\nnot change the fact that mutating through a (pointer derived from a) shared\nreference is undefined behavior unless the mutation happens inside an\n<a href=\"../cell/struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\"><code>UnsafeCell&lt;T&gt;</code></a>. The same goes for creating a mutable reference from a shared\nreference. When using this <code>From</code> instance without an <code>UnsafeCell&lt;T&gt;</code>,\nit is your responsibility to ensure that <code>as_mut</code> is never called, and <code>as_ptr</code>\nis never used for mutation.</p>\n<h2 id=\"representation\"><a class=\"doc-anchor\" href=\"#representation\">¬ß</a>Representation</h2>\n<p>Thanks to the <a href=\"../option/index.html#representation\" title=\"mod std::option\">null pointer optimization</a>,\n<code>NonNull&lt;T&gt;</code> and <code>Option&lt;NonNull&lt;T&gt;&gt;</code>\nare guaranteed to have the same size and alignment:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"macro\">assert_eq!</span>(size_of::&lt;NonNull&lt;i16&gt;&gt;(), size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonNull&lt;i16&gt;&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(align_of::&lt;NonNull&lt;i16&gt;&gt;(), align_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonNull&lt;i16&gt;&gt;&gt;());\n\n<span class=\"macro\">assert_eq!</span>(size_of::&lt;NonNull&lt;str&gt;&gt;(), size_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonNull&lt;str&gt;&gt;&gt;());\n<span class=\"macro\">assert_eq!</span>(align_of::&lt;NonNull&lt;str&gt;&gt;(), align_of::&lt;<span class=\"prelude-ty\">Option</span>&lt;NonNull&lt;str&gt;&gt;&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::%7Bsize_of,+align_of%7D;%0A++++use+std::ptr::NonNull;%0A++++%0A++++assert_eq!(size_of::%3CNonNull%3Ci16%3E%3E(),+size_of::%3COption%3CNonNull%3Ci16%3E%3E%3E());%0A++++assert_eq!(align_of::%3CNonNull%3Ci16%3E%3E(),+align_of::%3COption%3CNonNull%3Ci16%3E%3E%3E());%0A++++%0A++++assert_eq!(size_of::%3CNonNull%3Cstr%3E%3E(),+size_of::%3COption%3CNonNull%3Cstr%3E%3E%3E());%0A++++assert_eq!(align_of::%3CNonNull%3Cstr%3E%3E(),+align_of::%3COption%3CNonNull%3Cstr%3E%3E%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#87\">source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dangling\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.36.0\">1.25.0 (const: 1.36.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#111\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.dangling\" class=\"fn\">dangling</a>() -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> that is dangling, but well-aligned.</p>\n<p>This is useful for initializing types which lazily allocate, like\n<code>Vec::new</code> does.</p>\n<p>Note that the pointer value may potentially represent a valid pointer to\na <code>T</code>, which means this must not be used as a ‚Äúnot yet initialized‚Äù\nsentinel value. Types that lazily allocate must track initialization by\nsome other means.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::dangling();\n<span class=\"comment\">// Important: don't try to access the value of `ptr` without\n// initializing it first! The pointer is not null but isn't valid either!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+ptr+=+NonNull::%3Cu32%3E::dangling();%0A++++//+Important:+don't+try+to+access+the+value+of+%60ptr%60+without%0A++++//+initializing+it+first!+The+pointer+is+not+null+but+isn't+valid+either!%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#149\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; &amp;'a <a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared references to the value. In contrast to <a href=\"struct.NonNull.html#method.as_ref\" title=\"method std::ptr::NonNull::as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"struct.NonNull.html#method.as_uninit_mut\" title=\"method std::ptr::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be ‚Äúdereferenceable‚Äù in the sense defined in <a href=\"index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#183\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_mut\" class=\"fn\">as_uninit_mut</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique references to the value. In contrast to <a href=\"struct.NonNull.html#method.as_mut\" title=\"method std::ptr::NonNull::as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"struct.NonNull.html#method.as_uninit_ref\" title=\"method std::ptr::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be ‚Äúdereferenceable‚Äù in the sense defined in <a href=\"index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonNull%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#190\">source</a><a href=\"#impl-NonNull%3CT%3E-1\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.25.0\">1.25.0 (const: 1.25.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#217\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.new_unchecked\" class=\"fn\">new_unchecked</a>(ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">¬ß</a>Safety</h5>\n<p><code>ptr</code> must be non-null.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+unsafe+%7B+NonNull::new_unchecked(%26mut+x+as+*mut+_)+%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p><em>Incorrect</em> usage of this function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// NEVER DO THAT!!! This is undefined behavior. ‚ö†Ô∏è\n</span><span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::&lt;u32&gt;::new_unchecked(std::ptr::null_mut()) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+NEVER+DO+THAT!!!+This+is+undefined+behavior.+%E2%9A%A0%EF%B8%8F%0A++++let+ptr+=+unsafe+%7B+NonNull::%3Cu32%3E::new_unchecked(std::ptr::null_mut())+%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/93235\" title=\"Tracking issue for const_nonnull_new\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#246\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ptr) = NonNull::&lt;u32&gt;::new(std::ptr::null_mut()) {\n    <span class=\"macro\">unreachable!</span>();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::%3Cu32%3E::new(%26mut+x+as+*mut+_).expect(%22ptr+is+null!%22);%0A++++%0A++++if+let+Some(ptr)+=+NonNull::%3Cu32%3E::new(std::ptr::null_mut())+%7B%0A++++++++unreachable!();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#264-267\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    data_pointer: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;,\n    metadata: &lt;T as <a class=\"trait\" href=\"trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a>,\n) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs the same functionality as <a href=\"fn.from_raw_parts.html\" title=\"fn std::ptr::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a>, except that a\n<code>NonNull</code> pointer is returned, as opposed to a raw <code>*const</code> pointer.</p>\n<p>See the documentation of <a href=\"fn.from_raw_parts.html\" title=\"fn std::ptr::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a> for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#282\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;, &lt;T as <a class=\"trait\" href=\"trait.Pointee.html\" title=\"trait std::ptr::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"trait.Pointee.html#associatedtype.Metadata\" title=\"type std::ptr::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81513\">#81513</a>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its data pointer and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"struct.NonNull.html#method.from_raw_parts\" title=\"associated function std::ptr::NonNull::from_raw_parts\"><code>NonNull::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#295\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the ‚Äúaddress‚Äù portion of the pointer.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"../primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>pointer::addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"index.html\" title=\"mod std::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#310\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"../primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>pointer::with_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"index.html\" title=\"mod std::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#324\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.map_addr\" class=\"fn\">map_addr</a>(\n    self,\n    f: impl <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;) -&gt; <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95228\">#95228</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>‚Äôs address to a new one.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"../primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>pointer::map_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"index.html\" title=\"mod std::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.32.0\">1.25.0 (const: 1.32.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#350\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying <code>*mut</code> pointer.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">0</span>);\n\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() += <span class=\"number\">2</span>; }\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x).expect(%22ptr+is+null!%22);%0A++++%0A++++let+x_value+=+unsafe+%7B+*ptr.as_ptr()+%7D;%0A++++assert_eq!(x_value,+0);%0A++++%0A++++unsafe+%7B+*ptr.as_ptr()+%2B=+2;+%7D%0A++++let+x_value+=+unsafe+%7B+*ptr.as_ptr()+%7D;%0A++++assert_eq!(x_value,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.73.0\">1.25.0 (const: 1.73.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#398\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the value. If the value may be uninitialized, <a href=\"struct.NonNull.html#method.as_uninit_ref\" title=\"method std::ptr::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<p>For the mutable counterpart see <a href=\"struct.NonNull.html#method.as_mut\" title=\"method std::ptr::NonNull::as_mut\"><code>as_mut</code></a>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be ‚Äúdereferenceable‚Äù in the sense defined in <a href=\"index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>ref_x = <span class=\"kw\">unsafe </span>{ ptr.as_ref() };\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{ref_x}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x+as+*mut+_).expect(%22ptr+is+null!%22);%0A++++%0A++++let+ref_x+=+unsafe+%7B+ptr.as_ref()+%7D;%0A++++println!(%22%7Bref_x%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#450\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique reference to the value. If the value may be uninitialized, <a href=\"struct.NonNull.html#method.as_uninit_mut\" title=\"method std::ptr::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>\nmust be used instead.</p>\n<p>For the shared counterpart see <a href=\"struct.NonNull.html#method.as_ref\" title=\"method std::ptr::NonNull::as_ref\"><code>as_ref</code></a>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be ‚Äúdereferenceable‚Äù in the sense defined in <a href=\"index.html#safety\" title=\"mod std::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>x_ref = <span class=\"kw\">unsafe </span>{ ptr.as_mut() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>x_ref += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+mut+ptr+=+NonNull::new(%26mut+x).expect(%22null+pointer%22);%0A++++%0A++++let+x_ref+=+unsafe+%7B+ptr.as_mut()+%7D;%0A++++assert_eq!(*x_ref,+0);%0A++++*x_ref+%2B=+2;%0A++++assert_eq!(*x_ref,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.36.0\">1.27.0 (const: 1.36.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#474\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>casted_ptr = ptr.cast::&lt;i8&gt;();\n<span class=\"kw\">let </span>raw_ptr: <span class=\"kw-2\">*mut </span>i8 = casted_ptr.as_ptr();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+x+=+0u32;%0A++++let+ptr+=+NonNull::new(%26mut+x+as+*mut+_).expect(%22null+pointer%22);%0A++++%0A++++let+casted_ptr+=+ptr.cast::%3Ci8%3E();%0A++++let+raw_ptr:+*mut+i8+=+casted_ptr.as_ptr();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#530-532\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">¬ß</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address\nspace. That is, the infinite-precision sum, <strong>in bytes</strong> must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can‚Äôt even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: NonNull&lt;u32&gt; = NonNull::new(s.as_mut_ptr()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">1</span>).read());\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">2</span>).read());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+mut+s+=+%5B1,+2,+3%5D;%0A++++let+ptr:+NonNull%3Cu32%3E+=+NonNull::new(s.as_mut_ptr()).unwrap();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+ptr.offset(1).read());%0A++++++++println!(%22%7B%7D%22,+ptr.offset(2).read());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#556\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#616-618\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for <code>.offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">¬ß</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address\nspace. That is, the infinite-precision sum must fit in a <code>usize</code>.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can‚Äôt even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+s:+%26str+=+%22123%22;%0A++++let+ptr:+NonNull%3Cu8%3E+=+NonNull::new(s.as_ptr().cast_mut()).unwrap();%0A++++%0A++++unsafe+%7B%0A++++++++println!(%22%7B%7D%22,+ptr.add(1).read()+as+char);%0A++++++++println!(%22%7B%7D%22,+ptr.add(2).read()+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#643\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for <code>.byte_offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"struct.NonNull.html#method.add\" title=\"method std::ptr::NonNull::add\"><code>add</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#705-707\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for\n<code>.offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">¬ß</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset cannot exceed <code>isize::MAX</code> <strong>bytes</strong>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on ‚Äúwrapping around‚Äù the address\nspace. That is, the infinite-precision sum must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len()).sub(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can‚Äôt even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+s:+%26str+=+%22123%22;%0A++++%0A++++unsafe+%7B%0A++++++++let+end:+NonNull%3Cu8%3E+=+NonNull::new(s.as_ptr().cast_mut()).unwrap().add(3);%0A++++++++println!(%22%7B%7D%22,+end.sub(1).read()+as+char);%0A++++++++println!(%22%7B%7D%22,+end.sub(2).read()+as+char);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#737\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for\n<code>.byte_offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"struct.NonNull.html#method.sub\" title=\"method std::ptr::NonNull::sub\"><code>sub</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#852-854\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a ‚Äústart‚Äù and ‚Äúend‚Äù pointer\n(and ‚Äúend‚Äù is ‚Äúone past the end‚Äù of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">¬ß</a>Safety</h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both <code>self</code> and <code>origin</code> must be either in bounds or one\nbyte past the end of the same <a href=\"index.html#allocated-object\" title=\"mod std::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>Both pointers must be <em>derived from</em> a pointer to the same object.\n(See below for an example.)</p>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n<li>\n<p>The distance between the pointers, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The distance being in bounds cannot rely on ‚Äúwrapping around‚Äù the address space.</p>\n</li>\n</ul>\n<p>Rust types are never larger than <code>isize::MAX</code> and Rust allocations never wrap around the\naddress space, so two pointers within some value of any Rust type <code>T</code> will always satisfy\nthe last two conditions. The standard library also generally ensures that allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code> and <code>Box</code> ensure they\nnever allocate more than <code>isize::MAX</code> bytes, so <code>ptr_into_vec.offset_from(vec.as_ptr())</code>\nalways satisfies the last two conditions.</p>\n<p>Most platforms fundamentally can‚Äôt even construct such a large allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.\n(Note that <a href=\"#method.offset\"><code>offset</code></a> and <a href=\"#method.add\"><code>add</code></a> also have a similar limitation and hence cannot be used on\nsuch large allocations either.)</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (‚ÄúZST‚Äù).</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">¬ß</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B1%5D);%0A++++let+ptr2:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B3%5D);%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.offset_from(ptr1),+2);%0A++++++++assert_eq!(ptr1.offset_from(ptr2),+-2);%0A++++++++assert_eq!(ptr1.offset(2),+ptr2);%0A++++++++assert_eq!(ptr2.offset(-2),+ptr1);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_provenance)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr1 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">0u8</span>))).unwrap();\n<span class=\"kw\">let </span>ptr2 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">1u8</span>))).unwrap();\n<span class=\"kw\">let </span>diff = (ptr2.addr().get() <span class=\"kw\">as </span>isize).wrapping_sub(ptr1.addr().get() <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff)).unwrap();\n<span class=\"macro\">assert_eq!</span>(ptr2.addr(), ptr2_other.addr());\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\n\n</span><span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ ptr2_other.offset_from(ptr2) }; <span class=\"comment\">// Undefined Behavior</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(strict_provenance)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+ptr1+=+NonNull::new(Box::into_raw(Box::new(0u8))).unwrap();%0A++++let+ptr2+=+NonNull::new(Box::into_raw(Box::new(1u8))).unwrap();%0A++++let+diff+=+(ptr2.addr().get()+as+isize).wrapping_sub(ptr1.addr().get()+as+isize);%0A++++//+Make+ptr2_other+an+%22alias%22+of+ptr2,+but+derived+from+ptr1.%0A++++let+ptr2_other+=+NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff)).unwrap();%0A++++assert_eq!(ptr2.addr(),+ptr2_other.addr());%0A++++//+Since+ptr2_other+and+ptr2+are+derived+from+pointers+to+different+objects,%0A++++//+computing+their+offset+is+undefined+behavior,+even+though%0A++++//+they+point+to+the+same+address!%0A++++%0A++++let+zero+=+unsafe+%7B+ptr2_other.offset_from(ptr2)+%7D;+//+Undefined+Behavior%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#873\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;U&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"struct.NonNull.html#method.offset_from\" title=\"method std::ptr::NonNull::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sub_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#945-947\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.sub_ptr\" class=\"fn\">sub_ptr</a>(self, subtracted: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_sub_ptr</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/95892\">#95892</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers, <em>where it‚Äôs known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be though of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++unsafe+fn+blah(ptr:+std::ptr::NonNull%3Cu32%3E,+origin:+std::ptr::NonNull%3Cu32%3E,+count:+usize)+-%3E+bool+%7B%0A++++ptr.sub_ptr(origin)+==+count%0A++++%26%26%0A++++origin.add(count)+==+ptr%0A++++%26%26%0A++++ptr.sub(count)+==+origin%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">¬ß</a>Safety</h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it‚Äôs still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (‚ÄúZST‚Äù).</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(ptr_sub_ptr)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(ptr_sub_ptr)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+a+=+%5B0;+5%5D;%0A++++let+ptr1:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B1%5D);%0A++++let+ptr2:+NonNull%3Cu32%3E+=+NonNull::from(%26a%5B3%5D);%0A++++unsafe+%7B%0A++++++++assert_eq!(ptr2.sub_ptr(ptr1),+2);%0A++++++++assert_eq!(ptr1.add(2),+ptr2);%0A++++++++assert_eq!(ptr2.sub(2),+ptr1);%0A++++++++assert_eq!(ptr2.sub_ptr(ptr2),+0);%0A++++%7D%0A++++%0A++++//+This+would+be+incorrect,+as+the+pointers+are+not+correctly+ordered:%0A++++//+ptr1.sub_ptr(ptr2)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#963-965\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"fn.read.html\" title=\"fn std::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#984-986\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"fn.read_volatile.html\" title=\"fn std::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const since 1.80.0\">1.80.0 (const: 1.80.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1004-1006\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"fn.read_unaligned.html\" title=\"fn std::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1024-1026\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1044-1046\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1064-1066\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_from\" class=\"fn\">copy_from</a>(self, src: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"fn.copy.html\" title=\"fn std::ptr::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_from_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/80697\" title=\"Tracking issue for const_intrinsic_copy\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1084-1086\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.copy_from_nonoverlapping\" class=\"fn\">copy_from_nonoverlapping</a>(self, src: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"fn.copy_nonoverlapping.html\" title=\"fn std::ptr::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop_in_place\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1099\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.drop_in_place\" class=\"fn\">drop_in_place</a>(self)</h4></section></summary><div class=\"docblock\"><p>Executes the destructor (if any) of the pointed-to value.</p>\n<p>See <a href=\"fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>ptr::drop_in_place</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1114-1116\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write\" class=\"fn\">write</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>See <a href=\"fn.write.html\" title=\"fn std::ptr::write\"><code>ptr::write</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1133-1135\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_bytes\" class=\"fn\">write_bytes</a>(self, val: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, count: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Invokes memset on the specified pointer, setting <code>count * size_of::&lt;T&gt;()</code>\nbytes of memory starting at <code>self</code> to <code>val</code>.</p>\n<p>See <a href=\"fn.write_bytes.html\" title=\"fn std::ptr::write_bytes\"><code>ptr::write_bytes</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_volatile\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1154-1156\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_volatile\" class=\"fn\">write_volatile</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"fn.write_volatile.html\" title=\"fn std::ptr::write_volatile\"><code>ptr::write_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/86302\" title=\"Tracking issue for const_ptr_write\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1174-1176\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.write_unaligned\" class=\"fn\">write_unaligned</a>(self, val: T)</h4></section></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>Unlike <code>write</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"fn.write_unaligned.html\" title=\"fn std::ptr::write_unaligned\"><code>ptr::write_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1190-1192\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.replace\" class=\"fn\">replace</a>(self, src: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the value at <code>self</code> with <code>src</code>, returning the old\nvalue, without dropping either.</p>\n<p>See <a href=\"fn.replace.html\" title=\"fn std::ptr::replace\"><code>ptr::replace</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/83163\" title=\"Tracking issue for const_swap\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1208-1210\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.swap\" class=\"fn\">swap</a>(self, with: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike <code>mem::swap</code> which is\notherwise equivalent.</p>\n<p>See <a href=\"fn.swap.html\" title=\"fn std::ptr::swap\"><code>ptr::swap</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0, const unstable\">1.80.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/90962\" title=\"Tracking issue for const_align_offset\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1260-1262\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>. It is permissible for the implementation to <em>always</em>\nreturn <code>usize::MAX</code>. Only your algorithm‚Äôs performance can depend\non getting a usable offset here, not its correctness.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">¬ß</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">¬ß</a>Examples</h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem::align_of;\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = NonNull::new(x.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8).unwrap();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem::align_of;%0A++++use+std::ptr::NonNull;%0A++++%0A++++unsafe+%7B%0A++++let+x+=+%5B5_u8,+6,+7,+8,+9%5D;%0A++++let+ptr+=+NonNull::new(x.as_ptr()+as+*mut+u8).unwrap();%0A++++let+offset+=+ptr.align_offset(align_of::%3Cu16%3E());%0A++++%0A++++if+offset+%3C+x.len()+-+1+%7B%0A++++++++let+u16_ptr+=+ptr.add(offset).cast::%3Cu16%3E();%0A++++++++assert!(u16_ptr.read()+==+u16::from_ne_bytes(%5B5,+6%5D)+%7C%7C+u16_ptr.read()+==+u16::from_ne_bytes(%5B6,+7%5D));%0A++++%7D+else+%7B%0A++++++++//+while+the+pointer+can+be+aligned+via+%60offset%60,+it+would+point%0A++++++++//+outside+the+allocation%0A++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const unstable\">1.79.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/104203\" title=\"Tracking issue for const_pointer_is_aligned\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1384-1386\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = NonNull::&lt;AlignedI32&gt;::from(<span class=\"kw-2\">&amp;</span>data);\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!NonNull::new(ptr.as_ptr().wrapping_byte_add(<span class=\"number\">1</span>)).unwrap().is_aligned());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+NonNull::%3CAlignedI32%3E::from(%26data);%0A++++%0A++++assert!(ptr.is_aligned());%0A++++assert!(!NonNull::new(ptr.as_ptr().wrapping_byte_add(1)).unwrap().is_aligned());%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime\"><a class=\"doc-anchor\" href=\"#at-compiletime\">¬ß</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\nis never aligned if cast to a type with a stricter alignment than the reference‚Äôs\nunderlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_nonnull_new)]\n#![feature(const_option)]\n#![feature(const_pointer_is_aligned)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = [AlignedI32(<span class=\"number\">42</span>), AlignedI32(<span class=\"number\">42</span>)];\n    <span class=\"kw\">let </span>ptr = NonNull::&lt;AlignedI32&gt;::new(<span class=\"kw-2\">&amp;</span>data[<span class=\"number\">0</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">_ as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).unwrap();\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = <span class=\"kw\">unsafe </span>{ ptr.add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;() };\n    <span class=\"macro\">assert!</span>(!ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_nonnull_new)%5D%0A%23!%5Bfeature(const_option)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+%5BAlignedI32(42),+AlignedI32(42)%5D;%0A++++++++let+ptr+=+NonNull::%3CAlignedI32%3E::new(%26data%5B0%5D+as+*const+_+as+*mut+_).unwrap();%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+At+runtime+either+%60ptr1%60+or+%60ptr2%60+would+be+aligned,+but+at+compiletime+neither+is+aligned.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+unsafe+%7B+ptr.add(1).cast::%3CAlignedI64%3E()+%7D;%0A++++++++assert!(!ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn‚Äôt aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.cast::&lt;AlignedI64&gt;().is_aligned());\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned());\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.cast::&lt;AlignedI64&gt;().is_aligned(),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned(),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.cast::%3CAlignedI64%3E().is_aligned());%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned());%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.cast::%3CAlignedI64%3E().is_aligned(),%0A++++++++runtime_ptr.wrapping_add(1).cast::%3CAlignedI64%3E().is_aligned(),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(const_pointer_is_aligned)]\n#![feature(const_option)]\n#![feature(const_nonnull_new)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32).unwrap();\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// For pointers with a known address, runtime and compiletime behavior are identical.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = NonNull::new(ptr.as_ptr().wrapping_add(<span class=\"number\">1</span>)).unwrap().cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%23!%5Bfeature(const_option)%5D%0A%23!%5Bfeature(const_nonnull_new)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+On+some+platforms,+the+alignment+of+primitives+is+less+than+their+size.%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%23%5Brepr(align(8))%5D%0A++++struct+AlignedI64(i64);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+NonNull::new(40+as+*mut+AlignedI32).unwrap();%0A++++++++assert!(ptr.is_aligned());%0A++++%0A++++++++//+For+pointers+with+a+known+address,+runtime+and+compiletime+behavior+are+identical.%0A++++++++let+ptr1+=+ptr.cast::%3CAlignedI64%3E();%0A++++++++let+ptr2+=+NonNull::new(ptr.as_ptr().wrapping_add(1)).unwrap().cast::%3CAlignedI64%3E();%0A++++++++assert!(ptr1.is_aligned());%0A++++++++assert!(!ptr2.is_aligned());%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_aligned_to\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1499\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned_to</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96284\">#96284</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">¬ß</a>Panics</h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++let+data+=+AlignedI32(42);%0A++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++assert!(ptr.is_aligned_to(1));%0A++++assert!(ptr.is_aligned_to(2));%0A++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++assert!(ptr.wrapping_byte_add(2).is_aligned_to(2));%0A++++assert!(!ptr.wrapping_byte_add(2).is_aligned_to(4));%0A++++%0A++++assert_ne!(ptr.is_aligned_to(8),+ptr.wrapping_add(1).is_aligned_to(8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"at-compiletime-1\"><a class=\"doc-anchor\" href=\"#at-compiletime-1\">¬ß</a>At compiletime</h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\ncannot be stricter aligned than the reference‚Äôs underlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n    <span class=\"comment\">// At compiletime, we know for sure that the pointer isn't aligned to 8.\n    </span><span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++const+_:+()+=+%7B%0A++++++++let+data+=+AlignedI32(42);%0A++++++++let+ptr+=+%26data+as+*const+AlignedI32;%0A++++%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++%0A++++++++//+At+compiletime,+we+know+for+sure+that+the+pointer+isn't+aligned+to+8.%0A++++++++assert!(!ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.wrapping_add(1).is_aligned_to(8));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn‚Äôt aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.is_aligned_to(<span class=\"number\">8</span>));\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.is_aligned_to(<span class=\"number\">8</span>),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0A//+On+some+platforms,+the+alignment+of+i32+is+less+than+4.%0Afn+main()+%7B%0A++++%23%5Brepr(align(4))%5D%0A++++struct+AlignedI32(i32);%0A++++%0A++++//+At+compiletime,+neither+%60COMPTIME_PTR%60+nor+%60COMPTIME_PTR+%2B+1%60+is+aligned.%0A++++const+COMPTIME_PTR:+*const+AlignedI32+=+%26AlignedI32(42);%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.is_aligned_to(8));%0A++++const+_:+()+=+assert!(!COMPTIME_PTR.wrapping_add(1).is_aligned_to(8));%0A++++%0A++++//+At+runtime,+either+%60runtime_ptr%60+or+%60runtime_ptr+%2B+1%60+is+aligned.%0A++++let+runtime_ptr+=+COMPTIME_PTR;%0A++++assert_ne!(%0A++++++++runtime_ptr.is_aligned_to(8),%0A++++++++runtime_ptr.wrapping_add(1).is_aligned_to(8),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned_to)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">16</span>));\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(pointer_is_aligned_to)%5D%0A%23!%5Bfeature(const_pointer_is_aligned)%5D%0A%0Afn+main()+%7B%0A++++const+_:+()+=+%7B%0A++++++++let+ptr+=+40+as+*const+u8;%0A++++++++assert!(ptr.is_aligned_to(1));%0A++++++++assert!(ptr.is_aligned_to(2));%0A++++++++assert!(ptr.is_aligned_to(4));%0A++++++++assert!(ptr.is_aligned_to(8));%0A++++++++assert!(!ptr.is_aligned_to(16));%0A++++%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-NonNull%3C%5BT%5D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1504\">source</a><a href=\"#impl-NonNull%3C%5BT%5D%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.slice_from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const unstable\">1.70.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67456\" title=\"Tracking issue for const_slice_from_raw_parts_mut\">unstable</a>)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1530\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.slice_from_raw_parts\" class=\"fn\">slice_from_raw_parts</a>(data: <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a non-null raw slice from a thin pointer and a length.</p>\n<p>The <code>len</code> argument is the number of <strong>elements</strong>, not the number of bytes.</p>\n<p>This function is safe, but dereferencing the return value is unsafe.\nSee the documentation of <a href=\"../slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a> for slice safety requirements.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// create a slice pointer when starting out with a pointer to the first element\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = [<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span>nonnull_pointer = NonNull::new(x.as_mut_ptr()).unwrap();\n<span class=\"kw\">let </span>slice = NonNull::slice_from_raw_parts(nonnull_pointer, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ slice.as_ref()[<span class=\"number\">2</span>] }, <span class=\"number\">7</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++//+create+a+slice+pointer+when+starting+out+with+a+pointer+to+the+first+element%0A++++let+mut+x+=+%5B5,+6,+7%5D;%0A++++let+nonnull_pointer+=+NonNull::new(x.as_mut_ptr()).unwrap();%0A++++let+slice+=+NonNull::slice_from_raw_parts(nonnull_pointer,+3);%0A++++assert_eq!(unsafe+%7B+slice.as_ref()%5B2%5D+%7D,+7);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>(Note that this example artificially demonstrates a use of this method,\nbut <code>let slice = NonNull::from(&amp;x[..]);</code> would be a better way to write code like this.)</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0, const since 1.63.0\">1.63.0 (const: 1.63.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1554\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.len\" class=\"fn\">len</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of a non-null raw slice.</p>\n<p>The returned value is the number of <strong>elements</strong>, not the number of bytes.</p>\n<p>This function is safe, even when the non-null raw slice cannot be dereferenced to a slice\nbecause the pointer does not have a valid address.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>slice: NonNull&lt;[i8]&gt; = NonNull::slice_from_raw_parts(NonNull::dangling(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1572\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the non-null raw slice has a length of 0.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>slice: NonNull&lt;[i8]&gt; = NonNull::slice_from_raw_parts(NonNull::dangling(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(!slice.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert!(!slice.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_non_null_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1591\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_non_null_ptr\" class=\"fn\">as_non_null_ptr</a>(self) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a non-null pointer to the slice‚Äôs buffer.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>slice: NonNull&lt;[i8]&gt; = NonNull::slice_from_raw_parts(NonNull::dangling(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.as_non_null_ptr(), NonNull::&lt;i8&gt;::dangling());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.as_non_null_ptr(),+NonNull::%3Ci8%3E::dangling());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1611\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the slice‚Äôs buffer.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>slice: NonNull&lt;[i8]&gt; = NonNull::slice_from_raw_parts(NonNull::dangling(), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(slice.as_mut_ptr(), NonNull::&lt;i8&gt;::dangling().as_ptr());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+slice:+NonNull%3C%5Bi8%5D%3E+=+NonNull::slice_from_raw_parts(NonNull::dangling(),+3);%0A++++assert_eq!(slice.as_mut_ptr(),+NonNull::%3Ci8%3E::dangling().as_ptr());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1656\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_slice\" class=\"fn\">as_uninit_slice</a>&lt;'a&gt;(self) -&gt; &amp;'a [<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared reference to a slice of possibly uninitialized values. In contrast to\n<a href=\"struct.NonNull.html#method.as_ref\" title=\"method std::ptr::NonNull::as_ref\"><code>as_ref</code></a>, this does not require that the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"struct.NonNull.html#method.as_uninit_slice_mut\" title=\"method std::ptr::NonNull::as_uninit_slice_mut\"><code>as_uninit_slice_mut</code></a>.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for reads for <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> many bytes,\nand it must be properly aligned. This means in particular:</p>\n<ul>\n<li>\n<p>The entire memory range of this slice must be contained within a single allocated object!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The pointer must be aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The total size <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<p>See also <a href=\"../slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_uninit_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1719\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.as_uninit_slice_mut\" class=\"fn\">as_uninit_slice_mut</a>&lt;'a&gt;(self) -&gt; &amp;'a mut [<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75402\">#75402</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique reference to a slice of possibly uninitialized values. In contrast to\n<a href=\"struct.NonNull.html#method.as_mut\" title=\"method std::ptr::NonNull::as_mut\"><code>as_mut</code></a>, this does not require that the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"struct.NonNull.html#method.as_uninit_slice\" title=\"method std::ptr::NonNull::as_uninit_slice\"><code>as_uninit_slice</code></a>.</p>\n<h5 id=\"safety-11\"><a class=\"doc-anchor\" href=\"#safety-11\">¬ß</a>Safety</h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be <a href=\"index.html#safety\" title=\"mod std::ptr\">valid</a> for reads and writes for <code>ptr.len() * mem::size_of::&lt;T&gt;()</code>\nmany bytes, and it must be properly aligned. This means in particular:</p>\n<ul>\n<li>\n<p>The entire memory range of this slice must be contained within a single allocated object!\nSlices can never span across multiple allocated objects.</p>\n</li>\n<li>\n<p>The pointer must be aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The total size <code>ptr.len() * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n<li>\n<p>You must enforce Rust‚Äôs aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n<p>See also <a href=\"../slice/fn.from_raw_parts_mut.html\" title=\"fn std::slice::from_raw_parts_mut\"><code>slice::from_raw_parts_mut</code></a>.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, ptr_as_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, Global};\n<span class=\"kw\">use </span>std::mem::MaybeUninit;\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>memory: NonNull&lt;[u8]&gt; = Global.allocate(Layout::new::&lt;[u8; <span class=\"number\">32</span>]&gt;())<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// This is safe as `memory` is valid for reads and writes for `memory.len()` many bytes.\n// Note that calling `memory.as_mut()` is not allowed here as the content may be uninitialized.\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;u8&gt;] = <span class=\"kw\">unsafe </span>{ memory.as_uninit_slice_mut() };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+ptr_as_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+Global%7D;%0A++++use+std::mem::MaybeUninit;%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+memory:+NonNull%3C%5Bu8%5D%3E+=+Global.allocate(Layout::new::%3C%5Bu8;+32%5D%3E())?;%0A++++//+This+is+safe+as+%60memory%60+is+valid+for+reads+and+writes+for+%60memory.len()%60+many+bytes.%0A++++//+Note+that+calling+%60memory.as_mut()%60+is+not+allowed+here+as+the+content+may+be+uninitialized.%0A++++%23%5Ballow(unused_variables)%5D%0A++++let+slice:+%26mut+%5BMaybeUninit%3Cu8%3E%5D+=+unsafe+%7B+memory.as_uninit_slice_mut()+%7D;%0A++++Ok::%3C_,+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1747-1749\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    self,\n    index: I,\n) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;&lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>slice_ptr_get</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74265\">#74265</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to an element or subslice, without doing bounds\nchecking.</p>\n<p>Calling this method with an out-of-bounds index or when <code>self</code> is not dereferenceable\nis <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em> even if the resulting pointer is not used.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_ptr_get)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x = NonNull::slice_from_raw_parts(NonNull::new(x.as_mut_ptr()).unwrap(), x.len());\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(x.get_unchecked_mut(<span class=\"number\">1</span>).as_ptr(), x.as_non_null_ptr().as_ptr().add(<span class=\"number\">1</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_ptr_get)%5D%0Afn+main()+%7B%0A++++use+std::ptr::NonNull;%0A++++%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++let+x+=+NonNull::slice_from_raw_parts(NonNull::new(x.as_mut_ptr()).unwrap(),+x.len());%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked_mut(1).as_ptr(),+x.as_non_null_ptr().as_ptr().add(1));%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1758\">source</a></span><a href=\"#impl-Clone-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1760\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1775\">source</a></span><a href=\"#impl-Debug-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1776\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1847\">source</a></span><a href=\"#impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1852\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1835\">source</a></span><a href=\"#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt; for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1840\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1819\">source</a></span><a href=\"#impl-Hash-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1821\">source</a><a href=\"#method.hash\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1801\">source</a></span><a href=\"#impl-Ord-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1804\">source</a><a href=\"#method.cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1792\">source</a></span><a href=\"#impl-PartialEq-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1795\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1810\">source</a></span><a href=\"#impl-PartialOrd-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1813\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pointer-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1782\">source</a></span><a href=\"#impl-Pointer-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1783\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1769\">source</a><a href=\"#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Copy-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1766\">source</a></span><a href=\"#impl-Copy-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1772\">source</a><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Eq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1789\">source</a></span><a href=\"#impl-Eq-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#80\">source</a></span><a href=\"#impl-Send-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Send</code> because the data they reference may be aliased.</p>\n</div><section id=\"impl-Sync-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#85\">source</a></span><a href=\"#impl-Sync-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Sync</code> because the data they reference may be aliased.</p>\n</div><section id=\"impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#191\">source</a></span><a href=\"#impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-NonNull%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-NonNull%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-NonNull%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-NonNull%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:29.983Z"
}