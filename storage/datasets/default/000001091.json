{
	"title": "sanitizer - The Rust Unstable Book",
	"url": "https://doc.rust-lang.org/stable/unstable-book/compiler-flags/sanitizer.html",
	"markdown": "# sanitizer - The Rust Unstable Book\n\nSanitizers are tools that help detect and prevent various types of bugs and vulnerabilities in software. They are available in compilers and work by instrumenting the code to add additional runtime checks. While they provide powerful tools for identifying bugs or security issues, it's important to note that using sanitizers can introduce runtime overhead and might not catch all possible issues. Therefore, they are typically used alongside other best practices in software development, such as testing and fuzzing, to ensure the highest level of software quality and security.\n\nThe tracking issues for this feature are:\n\n-   [#39699](https://github.com/rust-lang/rust/issues/39699).\n-   [#89653](https://github.com/rust-lang/rust/issues/89653).\n\n---\n\nThis feature allows for use of one of following sanitizers:\n\n-   Those intended for testing or fuzzing (but not production use):\n    \n    -   [AddressSanitizer](#addresssanitizer) a fast memory error detector.\n    -   [HWAddressSanitizer](#hwaddresssanitizer) a memory error detector similar to AddressSanitizer, but based on partial hardware assistance.\n    -   [LeakSanitizer](#leaksanitizer) a run-time memory leak detector.\n    -   [MemorySanitizer](#memorysanitizer) a detector of uninitialized reads.\n    -   [ThreadSanitizer](#threadsanitizer) a fast data race detector.\n-   Those that apart from testing, may be used in production:\n    \n    -   [ControlFlowIntegrity](#controlflowintegrity) LLVM Control Flow Integrity (CFI) provides forward-edge control flow protection.\n    -   [DataFlowSanitizer](#dataflowsanitizer) a generic dynamic data flow analysis framework.\n    -   [KernelControlFlowIntegrity](#kernelcontrolflowintegrity) LLVM Kernel Control Flow Integrity (KCFI) provides forward-edge control flow protection for operating systems kernels.\n    -   [MemTagSanitizer](#memtagsanitizer) fast memory error detector based on Armv8.5-A Memory Tagging Extension.\n    -   [SafeStack](#safestack) provides backward-edge control flow protection by separating the stack into safe and unsafe regions.\n    -   [ShadowCallStack](#shadowcallstack) provides backward-edge control flow protection (aarch64 only).\n\nTo enable a sanitizer compile with `-Zsanitizer=address`, `-Zsanitizer=cfi`, `-Zsanitizer=dataflow`,`-Zsanitizer=hwaddress`, `-Zsanitizer=leak`, `-Zsanitizer=memory`, `-Zsanitizer=memtag`, `-Zsanitizer=shadow-call-stack`, or `-Zsanitizer=thread`. You might also need the `--target` and `build-std` flags. If you're working with other languages that are also instrumented with sanitizers, you might need the `external-clangrt` flag. See the section on [working with other languages](#working-with-other-languages).\n\nExample:\n\n```shell\n$ RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu\n\n```\n\nAdditional options for sanitizers can be passed to LLVM command line argument processor via LLVM arguments using `llvm-args` codegen option (e.g., `-Cllvm-args=-dfsan-combine-pointer-labels-on-load=false`). See the sanitizer documentation for more information about additional options.\n\n## [AddressSanitizer](#addresssanitizer)\n\nAddressSanitizer is a memory error detector. It can detect the following types of bugs:\n\n-   Out of bound accesses to heap, stack and globals\n-   Use after free\n-   Use after return (runtime flag `ASAN_OPTIONS=detect_stack_use_after_return=1`)\n-   Use after scope\n-   Double-free, invalid free\n-   Memory leaks\n\nThe memory leak detection is enabled by default on Linux, and can be enabled with runtime flag `ASAN_OPTIONS=detect_leaks=1` on macOS.\n\nAddressSanitizer is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-fuchsia`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-fuchsia`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nAddressSanitizer works with non-instrumented code although it will impede its ability to detect some bugs. It is not expected to produce false positive reports.\n\nSee the [Clang AddressSanitizer documentation](https://clang.llvm.org/docs/AddressSanitizer.html) for more details.\n\n## [Examples](#examples)\n\nStack buffer overflow:\n\n```rust\nfn main() {\n    let xs = [0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==37882==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe400e6250 at pc 0x5609a841fb20 bp 0x7ffe400e6210 sp 0x7ffe400e6208\nREAD of size 4 at 0x7ffe400e6250 thread T0\n    #0 0x5609a841fb1f in example::main::h628ffc6626ed85b2 /.../src/main.rs:3:23\n    ...\n\nAddress 0x7ffe400e6250 is located in stack of thread T0 at offset 48 in frame\n    #0 0x5609a841f8af in example::main::h628ffc6626ed85b2 /.../src/main.rs:1\n\n  This frame has 1 object(s):\n    [32, 48) 'xs' (line 2) <== Memory access at offset 48 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /.../src/main.rs:3:23 in example::main::h628ffc6626ed85b2\nShadow bytes around the buggy address:\n  0x100048014bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x100048014c40: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n  0x100048014c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c70: f1 f1 f1 f1 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x100048014c80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100048014c90: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==37882==ABORTING\n\n```\n\nUse of a stack object after its scope has already ended:\n\n```rust\nstatic mut P: *mut usize = std::ptr::null_mut();\n\nfn main() {\n    unsafe {\n        {\n            let mut x = 0;\n            P = &mut x;\n        }\n        std::ptr::write_volatile(P, 123);\n    }\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n=================================================================\n==39249==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffc7ed3e1a0 at pc 0x55c98b262a8e bp 0x7ffc7ed3e050 sp 0x7ffc7ed3e048\nWRITE of size 8 at 0x7ffc7ed3e1a0 thread T0\n    #0 0x55c98b262a8d in core::ptr::write_volatile::he21f1df5a82f329a /.../src/rust/src/libcore/ptr/mod.rs:1048:5\n    #1 0x55c98b262cd2 in example::main::h628ffc6626ed85b2 /.../src/main.rs:9:9\n    ...\n\nAddress 0x7ffc7ed3e1a0 is located in stack of thread T0 at offset 32 in frame\n    #0 0x55c98b262bdf in example::main::h628ffc6626ed85b2 /.../src/main.rs:3\n\n  This frame has 1 object(s):\n    [32, 40) 'x' (line 6) <== Memory access at offset 32 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-use-after-scope /.../src/rust/src/libcore/ptr/mod.rs:1048:5 in core::ptr::write_volatile::he21f1df5a82f329a\nShadow bytes around the buggy address:\n  0x10000fd9fbe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fbf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc10: f8 f8 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x10000fd9fc30: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00\n  0x10000fd9fc40: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc50: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc60: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3\n  0x10000fd9fc70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc80: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==39249==ABORTING\n\n```\n\n## [ControlFlowIntegrity](#controlflowintegrity)\n\nThe LLVM CFI support in the Rust compiler provides forward-edge control flow protection for both Rust-compiled code only and for C or C++ and Rust -compiled code mixed-language binaries, also known as “mixed binaries” (i.e., for when C or C++ and Rust -compiled code share the same virtual address space), by aggregating function pointers in groups identified by their return and parameter types.\n\nLLVM CFI can be enabled with `-Zsanitizer=cfi` and requires LTO (i.e., `-Clinker-plugin-lto` or `-Clto`). Cross-language LLVM CFI can be enabled with `-Zsanitizer=cfi`, and requires the `-Zsanitizer-cfi-normalize-integers` option to be used with Clang `-fsanitize-cfi-icall-experimental-normalize-integers` option for cross-language LLVM CFI support, and proper (i.e., non-rustc) LTO (i.e., `-Clinker-plugin-lto`).\n\nIt is recommended to rebuild the standard library with CFI enabled by using the Cargo build-std feature (i.e., `-Zbuild-std`) when enabling CFI.\n\nSee the [Clang ControlFlowIntegrity documentation](https://clang.llvm.org/docs/ControlFlowIntegrity.html) for more details.\n\n## [Example 1: Redirecting control flow using an indirect branch/call to an invalid destination](#example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination)\n\n```rust\n#![feature(naked_functions)]\n\nuse std::arch::asm;\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n#[naked]\npub extern \"C\" fn add_two(x: i32) {\n    // x + 2 preceded by a landing pad/nop block\n    unsafe {\n        asm!(\n            \"\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             lea eax, [rdi+2]\n             ret\n        \",\n            options(noreturn)\n        );\n    }\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 = unsafe {\n        // Offset 0 is a valid branch/call destination (i.e., the function entry\n        // point), but offsets 1-8 within the landing pad/nop block are invalid\n        // branch/call destinations (i.e., within the body of the function).\n        mem::transmute::<*const u8, fn(i32) -> i32>((add_two as *const u8).offset(5))\n    };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 1. Redirecting control flow using an indirect branch/call to an invalid destination (i.e., within the body of the function).\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 0.42s\n     Running `target/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 2. Build and execution of Fig. 1 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 3. Build and execution of Fig. 1 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to an invalid destination, the execution is terminated (see Fig. 3).\n\n## [Example 2: Redirecting control flow using an indirect branch/call to a function with a different number of parameters](#example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters)\n\n```rust\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn add_two(x: i32, _y: i32) -> i32 {\n    x + 2\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 =\n        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 4. Redirecting control flow using an indirect branch/call to a function with a different number of parameters than arguments intended/passed in the call/branch site.\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 0.43s\n     Running `target/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 5. Build and execution of Fig. 4 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 6. Build and execution of Fig. 4 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to a function with different number of parameters than arguments intended/passed in the call/branch site, the execution is also terminated (see Fig. 6).\n\n## [Example 3: Redirecting control flow using an indirect branch/call to a function with different return and parameter types](#example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types)\n\n```rust\nuse std::mem;\n\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn add_two(x: i64) -> i64 {\n    x + 2\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: fn(i32) -> i32 =\n        unsafe { mem::transmute::<*const u8, fn(i32) -> i32>(add_two as *const u8) };\n    let next_answer = do_twice(f, 5);\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n```\n\nFig. 7. Redirecting control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed at the call/branch site.\n\n```shell\n$ cargo run --release\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 0.44s\n     Running `target/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 8. Build and execution of Fig. 7 with LLVM CFI disabled.\n\n```shell\n$ RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\" cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 1m 07s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 9. Build and execution of Fig. 7 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to change/hijack control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, the execution is also terminated (see Fig. 9).\n\n## [Example 4: Redirecting control flow using an indirect branch/call to a function with different return and parameter types across the FFI boundary](#example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary)\n\n```ignore\nint\ndo_twice(int (*fn)(int), int arg)\n{\n    return fn(arg) + fn(arg);\n}\n\n```\n\nFig. 10. Example C library.\n\n```ignore\nuse std::mem;\n\n#[link(name = \"foo\")]\nextern \"C\" {\n    fn do_twice(f: unsafe extern \"C\" fn(i32) -> i32, arg: i32) -> i32;\n}\n\nunsafe extern \"C\" fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nunsafe extern \"C\" fn add_two(x: i64) -> i64 {\n    x + 2\n}\n\nfn main() {\n    let answer = unsafe { do_twice(add_one, 5) };\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: unsafe extern \"C\" fn(i32) -> i32 = unsafe {\n        mem::transmute::<*const u8, unsafe extern \"C\" fn(i32) -> i32>(add_two as *const u8)\n    };\n    let next_answer = unsafe { do_twice(f, 5) };\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n\n```\n\nFig. 11. Redirecting control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, across the FFI boundary.\n\n```shell\n$ make\nmkdir -p target/release\nclang -I. -Isrc -Wall -c src/foo.c -o target/release/libfoo.o\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.o\nRUSTFLAGS=\"-L./target/release -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 0.49s\n$ ./target/release/rust-cfi-4\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n$\n\n```\n\nFig. 12. Build and execution of Figs. 10–11 with LLVM CFI disabled.\n\n```shell\n$ make\nmkdir -p target/release\nclang -I. -Isrc -Wall -flto -fsanitize=cfi -fsanitize-cfi-icall-experimental-normalize-integers -fvisibility=hidden -c -emit-llvm src/foo.c -o target/release/libfoo.bc\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.bc\nRUSTFLAGS=\"-L./target/release -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 1m 06s\n$ ./target/x86_64-unknown-linux-gnu/release/rust-cfi-4\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n$\n\n```\n\nFig. 13. Build and execution of FIgs. 10–11 with LLVM CFI enabled.\n\nWhen LLVM CFI is enabled, if there are any attempts to redirect control flow using an indirect branch/call to a function with different return and parameter types than the return type expected and arguments intended/passed in the call/branch site, even across the FFI boundary and for extern \"C\" function types indirectly called (i.e., callbacks/function pointers) across the FFI boundary, the execution is also terminated (see Fig. 13).\n\n## [HWAddressSanitizer](#hwaddresssanitizer)\n\nHWAddressSanitizer is a newer variant of AddressSanitizer that consumes much less memory.\n\nHWAddressSanitizer is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n\nHWAddressSanitizer requires `tagged-globals` target feature to instrument globals. To enable this target feature compile with `-C target-feature=+tagged-globals`\n\nSee the [Clang HWAddressSanitizer documentation](https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html) for more details.\n\n## [Example](#example)\n\nHeap buffer overflow:\n\n```rust\nfn main() {\n    let xs = vec![0, 1, 2, 3];\n    let _y = unsafe { *xs.as_ptr().offset(4) };\n}\n```\n\n```shell\n$ rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C\nlinker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\naarch64-unknown-linux-gnu\n\n```\n\n```shell\n$ ./main\n==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\nREAD of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n    ...\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n    ...\n\nThread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=>0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=>0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaae0ae4a98):\n    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\nSUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n\n```\n\n## [KernelControlFlowIntegrity](#kernelcontrolflowintegrity)\n\nThe LLVM Kernel Control Flow Integrity (CFI) support to the Rust compiler initially provides forward-edge control flow protection for operating systems kernels for Rust-compiled code only by aggregating function pointers in groups identified by their return and parameter types. (See [LLVM commit cff5bef \"KCFI sanitizer\"](https://github.com/llvm/llvm-project/commit/cff5bef948c91e4919de8a5fb9765e0edc13f3de).)\n\nForward-edge control flow protection for C or C++ and Rust -compiled code \"mixed binaries\" (i.e., for when C or C++ and Rust -compiled code share the same virtual address space) will be provided in later work by defining and using compatible type identifiers (see Type metadata in the design document in the tracking issue [#89653](https://github.com/rust-lang/rust/issues/89653)).\n\nLLVM KCFI can be enabled with `-Zsanitizer=kcfi`.\n\nLLVM KCFI is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-linux-android`\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang KernelControlFlowIntegrity documentation](https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi) for more details.\n\n## [DataFlowSanitizer](#dataflowsanitizer)\n\nDataFlowSanitizer is a generalised dynamic data flow analysis.\n\nUnlike other Sanitizer tools, this tool is not designed to detect a specific class of bugs on its own. Instead, it provides a generic dynamic data flow analysis framework to be used by clients to help detect application-specific issues within their own code.\n\nDataFlowSanitizer is supported on the following targets:\n\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang DataFlowSanitizer documentation](https://clang.llvm.org/docs/DataFlowSanitizer.html) for more details.\n\n## [KernelAddressSanitizer](#kerneladdresssanitizer)\n\nKernelAddressSanitizer (KASAN) is a freestanding version of AddressSanitizer which is suitable for detecting memory errors in programs which do not have a runtime environment, such as operating system kernels. KernelAddressSanitizer requires manual implementation of the underlying functions used for tracking KernelAddressSanitizer state.\n\nKernelAddressSanitizer is supported on the following targets:\n\n-   `aarch64-unknown-none`\n-   `riscv64gc-unknown-none-elf`\n-   `riscv64imac-unknown-none-elf`\n-   `x86_64-unknown-none`\n\nSee the [Linux Kernel's KernelAddressSanitizer documentation](https://www.kernel.org/doc/html/latest/dev-tools/kasan.html) for more details.\n\n## [LeakSanitizer](#leaksanitizer)\n\nLeakSanitizer is run-time memory leak detector.\n\nLeakSanitizer is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang LeakSanitizer documentation](https://clang.llvm.org/docs/LeakSanitizer.html) for more details.\n\n## [MemorySanitizer](#memorysanitizer)\n\nMemorySanitizer is detector of uninitialized reads.\n\nMemorySanitizer is supported on the following targets:\n\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nMemorySanitizer requires all program code to be instrumented. C/C++ dependencies need to be recompiled using Clang with `-fsanitize=memory` option. Failing to achieve that will result in false positive reports.\n\nSee the [Clang MemorySanitizer documentation](https://clang.llvm.org/docs/MemorySanitizer.html) for more details.\n\n## [Example](#example-1)\n\nDetecting the use of uninitialized memory. The `-Zbuild-std` flag rebuilds and instruments the standard library, and is strictly necessary for the correct operation of the tool. The `-Zsanitizer-memory-track-origins` enables tracking of the origins of uninitialized memory:\n\n```rust\nuse std::mem::MaybeUninit;\n\nfn main() {\n    unsafe {\n        let a = MaybeUninit::<[usize; 4]>::uninit();\n        let a = a.assume_init();\n        println!(\"{}\", a[2]);\n    }\n}\n```\n\n```shell\n$ export \\\n  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n$ cargo clean\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n...\n  Uninitialized value was stored to memory at\n    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n\n  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n\n```\n\nMemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.\n\nMemTagSanitizer is supported on the following targets:\n\n-   `aarch64-linux-android`\n-   `aarch64-unknown-linux-gnu`\n\nMemTagSanitizer requires hardware support and the `mte` target feature. To enable this target feature compile with `-C target-feature=\"+mte\"`.\n\nSee the [LLVM MemTagSanitizer documentation](https://llvm.org/docs/MemTagSanitizer.html) for more details.\n\n## [SafeStack](#safestack)\n\nSafeStack provides backward edge control flow protection by separating the stack into data which is only accessed safely (the safe stack) and all other data (the unsafe stack).\n\nSafeStack can be enabled with the `-Zsanitizer=safestack` option and is supported on the following targets:\n\n-   `x86_64-unknown-linux-gnu`\n\nSee the [Clang SafeStack documentation](https://clang.llvm.org/docs/SafeStack.html) for more details.\n\n## [ShadowCallStack](#shadowcallstack)\n\nShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.\n\nShadowCallStack requires a platform ABI which reserves `x18` as the instrumentation makes use of this register.\n\nShadowCallStack can be enabled with `-Zsanitizer=shadow-call-stack` option and is supported on the following targets:\n\n-   `aarch64-linux-android`\n\nA runtime must be provided by the application or operating system.\n\nSee the [Clang ShadowCallStack documentation](https://clang.llvm.org/docs/ShadowCallStack.html) for more details.\n\n## [ThreadSanitizer](#threadsanitizer)\n\nThreadSanitizer is a data race detection tool. It is supported on the following targets:\n\n-   `aarch64-apple-darwin`\n-   `aarch64-unknown-linux-gnu`\n-   `x86_64-apple-darwin`\n-   `x86_64-unknown-freebsd`\n-   `x86_64-unknown-linux-gnu`\n\nTo work correctly ThreadSanitizer needs to be \"aware\" of all synchronization operations in a program. It generally achieves that through combination of library interception (for example synchronization performed through `pthread_mutex_lock` / `pthread_mutex_unlock`) and compile time instrumentation (e.g. atomic operations). Using it without instrumenting all the program code can lead to false positive reports.\n\nThreadSanitizer does not support atomic fences `std::sync::atomic::fence`, nor synchronization performed using inline assembly code.\n\nSee the [Clang ThreadSanitizer documentation](https://clang.llvm.org/docs/ThreadSanitizer.html) for more details.\n\n## [Example](#example-2)\n\n```rust\nstatic mut A: usize = 0;\n\nfn main() {\n    let t = std::thread::spawn(|| {\n        unsafe { A += 1 };\n    });\n    unsafe { A += 1 };\n\n    t.join().unwrap();\n}\n```\n\n```shell\n$ export RUSTFLAGS=-Zsanitizer=thread RUSTDOCFLAGS=-Zsanitizer=thread\n$ cargo run -Zbuild-std --target x86_64-unknown-linux-gnu\n==================\nWARNING: ThreadSanitizer: data race (pid=10574)\n  Read of size 8 at 0x5632dfe3d030 by thread T1:\n    #0 example::main::_$u7b$$u7b$closure$u7d$$u7d$::h23f64b0b2f8c9484 ../src/main.rs:5:18 (example+0x86cec)\n    ...\n\n  Previous write of size 8 at 0x5632dfe3d030 by main thread:\n    #0 example::main::h628ffc6626ed85b2 /.../src/main.rs:7:14 (example+0x868c8)\n    ...\n    #11 main <null> (example+0x86a1a)\n\n  Location is global 'example::A::h43ac149ddf992709' of size 8 at 0x5632dfe3d030 (example+0x000000bd9030)\n\n```\n\n## [Instrumentation of external dependencies and std](#instrumentation-of-external-dependencies-and-std)\n\nThe sanitizers to varying degrees work correctly with partially instrumented code. On the one extreme is LeakSanitizer that doesn't use any compile time instrumentation, on the other is MemorySanitizer that requires that all program code to be instrumented (failing to achieve that will inevitably result in false positives).\n\nIt is strongly recommended to combine sanitizers with recompiled and instrumented standard library, for example using [cargo `-Zbuild-std` functionality](about:blank/cargo/reference/unstable.html#build-std).\n\n## [Working with other languages](#working-with-other-languages)\n\nSanitizers rely on compiler runtime libraries to function properly. Rust links in its own compiler runtime which might conflict with runtimes required by languages such as C++. Since Rust's runtime doesn't always contain the symbols required by C++ instrumented code, you might need to skip linking it so another runtime can be linked instead.\n\nA separate unstable option `-Zexternal-clangrt` can be used to make rustc skip linking the compiler runtime for the sanitizer. This will require you to link in an external runtime, such as from clang instead.\n\n## [Build scripts and procedural macros](#build-scripts-and-procedural-macros)\n\nUse of sanitizers together with build scripts and procedural macros is technically possible, but in almost all cases it would be best avoided. This is especially true for procedural macros which would require an instrumented version of rustc.\n\nIn more practical terms when using cargo always remember to pass `--target` flag, so that rustflags will not be applied to build scripts and procedural macros.\n\n## [Symbolizing the Reports](#symbolizing-the-reports)\n\nSanitizers produce symbolized stacktraces when llvm-symbolizer binary is in `PATH`.\n\n## [Additional Information](#additional-information)\n\n-   [Sanitizers project page](https://github.com/google/sanitizers/wiki/)\n-   [AddressSanitizer in Clang](https://clang.llvm.org/docs/AddressSanitizer.html)\n-   [ControlFlowIntegrity in Clang](https://clang.llvm.org/docs/ControlFlowIntegrity.html)\n-   [DataFlowSanitizer in Clang](https://clang.llvm.org/docs/DataFlowSanitizer.html)\n-   [HWAddressSanitizer in Clang](https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html)\n-   [Linux Kernel's KernelAddressSanitizer documentation](https://www.kernel.org/doc/html/latest/dev-tools/kasan.html)\n-   [LeakSanitizer in Clang](https://clang.llvm.org/docs/LeakSanitizer.html)\n-   [MemorySanitizer in Clang](https://clang.llvm.org/docs/MemorySanitizer.html)\n-   [MemTagSanitizer in LLVM](https://llvm.org/docs/MemTagSanitizer.html)\n-   [ThreadSanitizer in Clang](https://clang.llvm.org/docs/ThreadSanitizer.html)",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>sanitizer - The Rust Unstable Book</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../the-unstable-book.html\" tabindex=\"0\">The Unstable Book</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Compiler flags</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/branch-protection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> branch_protection</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/cf-protection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> cf_protection</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/codegen-backend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> codegen_backend</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/codegen-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.4.</strong> codegen_options</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/control-flow-guard.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.5.</strong> control_flow_guard</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/coverage-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.6.</strong> coverage_options</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/debug_info_for_profiling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.7.</strong> debug_info_for_profiling</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/default-hidden-visibility.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.8.</strong> default_hidden_visibility</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/direct-access-external-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.9.</strong> direct_access_external_data</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/dump-mono-stats.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.10.</strong> dump_mono_stats</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/dump-mono-stats-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.11.</strong> dump_mono_stats_format</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/dwarf-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.12.</strong> dwarf_version</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/dylib-lto.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.13.</strong> dylib_lto</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/emit-stack-sizes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.14.</strong> emit_stack_sizes</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/env-set.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.15.</strong> env_set</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/export-executable-symbols.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.16.</strong> export_executable_symbols</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/extern-options.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.17.</strong> extern_options</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/external-clangrt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.18.</strong> external_clangrt</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/fixed-x18.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.19.</strong> fixed_x18</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/function-return.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.20.</strong> function_return</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/instrument-xray.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.21.</strong> instrument_xray</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/link-native-libraries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.22.</strong> link_native_libraries</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/linker-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.23.</strong> linker_features</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/llvm-module-flag.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.24.</strong> llvm_module_flag</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/location-detail.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.25.</strong> location_detail</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/move-size-limit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.26.</strong> move_size_limit</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/no-jump-tables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.27.</strong> no_jump_tables</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/no-parallel-llvm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.28.</strong> no_parallel_llvm</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/no-unique-section-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.29.</strong> no_unique_section_names</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/on-broken-pipe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.30.</strong> on_broken_pipe</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/print-check-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.31.</strong> print_check_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/profile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.32.</strong> profile</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/profile_sample_use.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.33.</strong> profile_sample_use</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/remap-cwd-prefix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.34.</strong> remap_cwd_prefix</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/remap-path-scope.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.35.</strong> remap_path_scope</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/report-time.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.36.</strong> report_time</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/sanitizer.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">1.37.</strong> sanitizer</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/self-profile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.38.</strong> self_profile</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/self-profile-events.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.39.</strong> self_profile_events</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/shell-argfiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.40.</strong> shell_argfiles</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/src-hash-algorithm.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.41.</strong> src_hash_algorithm</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/temps-dir.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.42.</strong> temps_dir</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/tiny-const-eval-limit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.43.</strong> tiny_const_eval_limit</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/tls-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.44.</strong> tls_model</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.45.</strong> ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/unsound-mir-opts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.46.</strong> unsound_mir_opts</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/virtual-function-elimination.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.47.</strong> virtual_function_elimination</a></li><li class=\"chapter-item expanded \"><a href=\"../compiler-flags/wasm-c-abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.48.</strong> wasm_c_abi</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../language-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Language features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../language-features/aarch64-ver-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> aarch64_ver_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-avr-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> abi_avr_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-c-cmse-nonsecure-call.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> abi_c_cmse_nonsecure_call</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-msp430-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> abi_msp430_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-ptx.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> abi_ptx</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-riscv-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> abi_riscv_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-unadjusted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> abi_unadjusted</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-vectorcall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> abi_vectorcall</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/abi-x86-interrupt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> abi_x86_interrupt</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/adt-const-params.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> adt_const_params</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/alloc-error-handler.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.11.</strong> alloc_error_handler</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/allocator-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.12.</strong> allocator_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/allow-internal-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.13.</strong> allow_internal_unsafe</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/allow-internal-unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.14.</strong> allow_internal_unstable</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/anonymous-lifetime-in-impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.15.</strong> anonymous_lifetime_in_impl_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/arbitrary-self-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.16.</strong> arbitrary_self_types</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/arm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.17.</strong> arm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/asm-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.18.</strong> asm_const</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/asm-experimental-arch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.19.</strong> asm_experimental_arch</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/asm-goto.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.20.</strong> asm_goto</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/asm-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.21.</strong> asm_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/associated-const-equality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.22.</strong> associated_const_equality</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/associated-type-defaults.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.23.</strong> associated_type_defaults</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/async-closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.24.</strong> async_closure</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/async-fn-track-caller.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.25.</strong> async_fn_track_caller</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/async-for-loop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.26.</strong> async_for_loop</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/auto-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.27.</strong> auto_traits</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/avx512-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.28.</strong> avx512_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/box-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.29.</strong> box_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/bpf-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.30.</strong> bpf_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/builtin-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.31.</strong> builtin_syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/c-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.32.</strong> c_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/c-variadic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.33.</strong> c_variadic</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-overflow-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.34.</strong> cfg_overflow_checks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-relocation-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.35.</strong> cfg_relocation_model</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-sanitize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.36.</strong> cfg_sanitize</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-sanitizer-cfi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.37.</strong> cfg_sanitizer_cfi</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-target-compact.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.38.</strong> cfg_target_compact</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-target-has-atomic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.39.</strong> cfg_target_has_atomic</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-target-has-atomic-equal-alignment.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.40.</strong> cfg_target_has_atomic_equal_alignment</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-target-thread-local.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.41.</strong> cfg_target_thread_local</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.42.</strong> cfg_ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfg-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.43.</strong> cfg_version</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cfi-encoding.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.44.</strong> cfi_encoding</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/closure-lifetime-binder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.45.</strong> closure_lifetime_binder</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/closure-track-caller.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.46.</strong> closure_track_caller</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/cmse-nonsecure-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.47.</strong> cmse_nonsecure_entry</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/compiler-builtins.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.48.</strong> compiler_builtins</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-async-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.49.</strong> const_async_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.50.</strong> const_closures</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-extern-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.51.</strong> const_extern_fn</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-fn-floating-point-arithmetic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.52.</strong> const_fn_floating_point_arithmetic</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-for.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.53.</strong> const_for</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-mut-refs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.54.</strong> const_mut_refs</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-precise-live-drops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.55.</strong> const_precise_live_drops</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-refs-to-cell.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.56.</strong> const_refs_to_cell</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-refs-to-static.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.57.</strong> const_refs_to_static</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-trait-impl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.58.</strong> const_trait_impl</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/const-try.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.59.</strong> const_try</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/coroutine-clone.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.60.</strong> coroutine_clone</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/coroutines.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.61.</strong> coroutines</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/coverage-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.62.</strong> coverage_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/csky-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.63.</strong> csky_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/custom-inner-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.64.</strong> custom_inner_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/custom-mir.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.65.</strong> custom_mir</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/custom-test-frameworks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.66.</strong> custom_test_frameworks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/decl-macro.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.67.</strong> decl_macro</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/default-type-parameter-fallback.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.68.</strong> default_type_parameter_fallback</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/deprecated-safe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.69.</strong> deprecated_safe</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/deprecated-suggestion.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.70.</strong> deprecated_suggestion</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/deref-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.71.</strong> deref_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/do-not-recommend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.72.</strong> do_not_recommend</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/doc-auto-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.73.</strong> doc_auto_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/doc-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.74.</strong> doc_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/doc-cfg-hide.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.75.</strong> doc_cfg_hide</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/doc-masked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.76.</strong> doc_masked</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/doc-notable-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.77.</strong> doc_notable_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/dropck-eyepatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.78.</strong> dropck_eyepatch</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/dyn-star.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.79.</strong> dyn_star</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/effects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.80.</strong> effects</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/ermsb-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.81.</strong> ermsb_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/exhaustive-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.82.</strong> exhaustive_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/explicit-tail-calls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.83.</strong> explicit_tail_calls</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/expr-fragment-specifier-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.84.</strong> expr_fragment_specifier_2024</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/extended-varargs-abi-support.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.85.</strong> extended_varargs_abi_support</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/extern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.86.</strong> extern_types</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/f128.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.87.</strong> f128</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/f16.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.88.</strong> f16</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/ffi-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.89.</strong> ffi_const</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/ffi-pure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.90.</strong> ffi_pure</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/fn-align.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.91.</strong> fn_align</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/fn-delegation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.92.</strong> fn_delegation</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/freeze-impls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.93.</strong> freeze_impls</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/fundamental.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.94.</strong> fundamental</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/gen-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.95.</strong> gen_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/generic-arg-infer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.96.</strong> generic_arg_infer</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/generic-assert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.97.</strong> generic_assert</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/generic-associated-types-extended.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.98.</strong> generic_associated_types_extended</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/generic-const-exprs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.99.</strong> generic_const_exprs</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/generic-const-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.100.</strong> generic_const_items</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/global-registration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.101.</strong> global_registration</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/half-open-range-patterns-in-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.102.</strong> half_open_range_patterns_in_slices</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/hexagon-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.103.</strong> hexagon_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/if-let-guard.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.104.</strong> if_let_guard</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/impl-trait-in-assoc-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.105.</strong> impl_trait_in_assoc_type</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/impl-trait-in-fn-trait-return.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.106.</strong> impl_trait_in_fn_trait_return</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/inherent-associated-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.107.</strong> inherent_associated_types</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/inline-const-pat.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.108.</strong> inline_const_pat</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/intra-doc-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.109.</strong> intra_doc_pointers</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.110.</strong> intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/lahfsahf-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.111.</strong> lahfsahf_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/lang-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.112.</strong> lang_items</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/large-assignments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.113.</strong> large_assignments</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/lazy-type-alias.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.114.</strong> lazy_type_alias</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/let-chains.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.115.</strong> let_chains</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/lifetime-capture-rules-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.116.</strong> lifetime_capture_rules_2024</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/link-arg-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.117.</strong> link_arg_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/link-cfg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.118.</strong> link_cfg</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/link-llvm-intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.119.</strong> link_llvm_intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.120.</strong> linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/lint-reasons.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.121.</strong> lint_reasons</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/loongarch-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.122.</strong> loongarch_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/macro-metavar-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.123.</strong> macro_metavar_expr</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/marker-trait-attr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.124.</strong> marker_trait_attr</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/min-exhaustive-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.125.</strong> min_exhaustive_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/min-specialization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.126.</strong> min_specialization</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/mips-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.127.</strong> mips_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/more-qualified-paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.128.</strong> more_qualified_paths</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/multiple-supertrait-upcastable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.129.</strong> multiple_supertrait_upcastable</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/must-not-suspend.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.130.</strong> must_not_suspend</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/mut-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.131.</strong> mut_ref</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/naked-functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.132.</strong> naked_functions</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/native-link-modifiers-as-needed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.133.</strong> native_link_modifiers_as_needed</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/needs-panic-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.134.</strong> needs_panic_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/negative-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.135.</strong> negative_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/negative-impls.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.136.</strong> negative_impls</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/never-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.137.</strong> never_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/never-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.138.</strong> never_type</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/never-type-fallback.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.139.</strong> never_type_fallback</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/no-core.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.140.</strong> no_core</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/no-sanitize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.141.</strong> no_sanitize</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/non-exhaustive-omitted-patterns-lint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.142.</strong> non_exhaustive_omitted_patterns_lint</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/non-lifetime-binders.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.143.</strong> non_lifetime_binders</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/object-safe-for-dispatch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.144.</strong> object_safe_for_dispatch</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/offset-of-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.145.</strong> offset_of_enum</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/offset-of-nested.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.146.</strong> offset_of_nested</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/omit-gdb-pretty-printer-section.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.147.</strong> omit_gdb_pretty_printer_section</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/optimize-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.148.</strong> optimize_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/panic-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.149.</strong> panic_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/pattern-complexity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.150.</strong> pattern_complexity</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/pattern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.151.</strong> pattern_types</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/postfix-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.152.</strong> postfix_match</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/powerpc-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.153.</strong> powerpc_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/precise-capturing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.154.</strong> precise_capturing</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/prelude-import.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.155.</strong> prelude_import</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/prfchw-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.156.</strong> prfchw_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/proc-macro-hygiene.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.157.</strong> proc_macro_hygiene</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/profiler-runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.158.</strong> profiler_runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/raw-ref-op.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.159.</strong> raw_ref_op</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/ref-pat-eat-one-layer-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.160.</strong> ref_pat_eat_one_layer_2024</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/register-tool.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.161.</strong> register_tool</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/repr-simd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.162.</strong> repr_simd</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/repr128.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.163.</strong> repr128</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/result-ffi-guarantees.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.164.</strong> result_ffi_guarantees</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/return-type-notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.165.</strong> return_type_notation</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/riscv-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.166.</strong> riscv_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rtm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.167.</strong> rtm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rust-cold-cc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.168.</strong> rust_cold_cc</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rustc-allow-const-fn-unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.169.</strong> rustc_allow_const_fn_unstable</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rustc-attrs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.170.</strong> rustc_attrs</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rustc-private.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.171.</strong> rustc_private</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rustdoc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.172.</strong> rustdoc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/rustdoc-missing-doc-code-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.173.</strong> rustdoc_missing_doc_code_examples</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/simd-ffi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.174.</strong> simd_ffi</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/specialization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.175.</strong> specialization</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/sse4a-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.176.</strong> sse4a_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/staged-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.177.</strong> staged_api</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/start.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.178.</strong> start</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/stmt-expr-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.179.</strong> stmt_expr_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/strict-provenance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.180.</strong> strict_provenance</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/string-deref-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.181.</strong> string_deref_patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/structural-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.182.</strong> structural_match</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/target-feature-11.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.183.</strong> target_feature_11</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/tbm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.184.</strong> tbm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/test-unstable-lint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.185.</strong> test_unstable_lint</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/thread-local.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.186.</strong> thread_local</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/trait-alias.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.187.</strong> trait_alias</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/trait-upcasting.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.188.</strong> trait_upcasting</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/transmute-generic-consts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.189.</strong> transmute_generic_consts</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/transparent-unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.190.</strong> transparent_unions</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/trivial-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.191.</strong> trivial_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/try-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.192.</strong> try_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/type-alias-impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.193.</strong> type_alias_impl_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/type-ascription.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.194.</strong> type_ascription</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/type-changing-struct-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.195.</strong> type_changing_struct_update</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unboxed-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.196.</strong> unboxed_closures</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unnamed-fields.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.197.</strong> unnamed_fields</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unsafe-attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.198.</strong> unsafe_attributes</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unsafe-extern-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.199.</strong> unsafe_extern_blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unsized-fn-params.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.200.</strong> unsized_fn_params</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unsized-locals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.201.</strong> unsized_locals</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/unsized-tuple-coercion.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.202.</strong> unsized_tuple_coercion</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/used-with-arg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.203.</strong> used_with_arg</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/wasm-abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.204.</strong> wasm_abi</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/wasm-target-feature.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.205.</strong> wasm_target_feature</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/with-negative-coherence.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.206.</strong> with_negative_coherence</a></li><li class=\"chapter-item expanded \"><a href=\"../language-features/yeet-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.207.</strong> yeet_expr</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../library-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Library Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../library-features/acceptfilter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> acceptfilter</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/addr-parse-ascii.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> addr_parse_ascii</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/alloc-error-hook.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> alloc_error_hook</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/alloc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> alloc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/alloc-layout-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> alloc_layout_extra</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/allocator-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> allocator_api</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> array_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-into-iter-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> array_into_iter_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-ptr-get.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> array_ptr_get</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-try-from-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> array_try_from_fn</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-try-map.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> array_try_map</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/array-windows.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> array_windows</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/as-array-of-cells.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> as_array_of_cells</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ascii-char.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> ascii_char</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ascii-char-variants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> ascii_char_variants</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/assert-matches.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> assert_matches</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/async-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> async_drop</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/async-fn-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> async_fn_traits</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/async-gen-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.19.</strong> async_gen_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/async-iter-from-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.20.</strong> async_iter_from_iter</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/async-iterator.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.21.</strong> async_iterator</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/atomic-bool-fetch-not.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.22.</strong> atomic_bool_fetch_not</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/atomic-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.23.</strong> atomic_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/backtrace-frames.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.24.</strong> backtrace_frames</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/bigint-helper-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.25.</strong> bigint_helper_methods</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/binary-heap-drain-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.26.</strong> binary_heap_drain_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/binary-heap-into-iter-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.27.</strong> binary_heap_into_iter_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/bound-as-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.28.</strong> bound_as_ref</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/box-into-boxed-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.29.</strong> box_into_boxed_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/box-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.30.</strong> box_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/btree-cursors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.31.</strong> btree_cursors</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/btree-extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.32.</strong> btree_extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/btreemap-alloc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.33.</strong> btreemap_alloc</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/buf-read-has-data-left.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.34.</strong> buf_read_has_data_left</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/bufread-skip-until.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.35.</strong> bufread_skip_until</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/build-hasher-default-const-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.36.</strong> build_hasher_default_const_new</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/c-size-t.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.37.</strong> c_size_t</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/c-str-module.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.38.</strong> c_str_module</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/c-void-variant.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.39.</strong> c_void_variant</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/can-vector.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.40.</strong> can_vector</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cell-leak.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.41.</strong> cell_leak</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cell-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.42.</strong> cell_update</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cfg-accessible.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.43.</strong> cfg_accessible</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cfg-eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.44.</strong> cfg_eval</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cfg-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.45.</strong> cfg_match</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/char-indices-offset.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.46.</strong> char_indices_offset</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/char-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.47.</strong> char_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/char-min.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.48.</strong> char_min</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cmp-minmax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.49.</strong> cmp_minmax</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/coerce-unsized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.50.</strong> coerce_unsized</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/concat-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.51.</strong> concat_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/concat-idents.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.52.</strong> concat_idents</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-align-of-val.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.53.</strong> const_align_of_val</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-align-of-val-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.54.</strong> const_align_of_val_raw</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-align-offset.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.55.</strong> const_align_offset</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-alloc-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.56.</strong> const_alloc_error</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-alloc-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.57.</strong> const_alloc_layout</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-arguments-as-str.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.58.</strong> const_arguments_as_str</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-array-from-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.59.</strong> const_array_from_ref</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-array-into-iter-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.60.</strong> const_array_into_iter_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-atomic-from-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.61.</strong> const_atomic_from_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-bigint-helper-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.62.</strong> const_bigint_helper_methods</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-binary-heap-new-in.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.63.</strong> const_binary_heap_new_in</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-black-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.64.</strong> const_black_box</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.65.</strong> const_box</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-btree-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.66.</strong> const_btree_len</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-cell-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.67.</strong> const_cell_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-char-from-u32-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.68.</strong> const_char_from_u32_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-cmp.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.69.</strong> const_cmp</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-collections-with-hasher.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.70.</strong> const_collections_with_hasher</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-cow-is-borrowed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.71.</strong> const_cow_is_borrowed</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-cstr-from-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.72.</strong> const_cstr_from_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-eval-select.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.73.</strong> const_eval_select</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-exact-div.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.74.</strong> const_exact_div</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-float-bits-conv.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.75.</strong> const_float_bits_conv</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-float-classify.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.76.</strong> const_float_classify</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-fmt-arguments-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.77.</strong> const_fmt_arguments_new</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-format-args.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.78.</strong> const_format_args</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-hash.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.79.</strong> const_hash</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-heap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.80.</strong> const_heap</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-hint-assert-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.81.</strong> const_hint_assert_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-index-range-slice-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.82.</strong> const_index_range_slice_index</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-int-from-str.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.83.</strong> const_int_from_str</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-intoiterator-identity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.84.</strong> const_intoiterator_identity</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-intrinsic-compare-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.85.</strong> const_intrinsic_compare_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-intrinsic-copy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.86.</strong> const_intrinsic_copy</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-intrinsic-forget.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.87.</strong> const_intrinsic_forget</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-intrinsic-raw-eq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.88.</strong> const_intrinsic_raw_eq</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.89.</strong> const_ip</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ipv4.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.90.</strong> const_ipv4</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ipv6.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.91.</strong> const_ipv6</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-likely.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.92.</strong> const_likely</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-maybe-uninit-array-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.93.</strong> const_maybe_uninit_array_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-maybe-uninit-as-mut-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.94.</strong> const_maybe_uninit_as_mut_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-maybe-uninit-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.95.</strong> const_maybe_uninit_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-maybe-uninit-uninit-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.96.</strong> const_maybe_uninit_uninit_array</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-maybe-uninit-write.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.97.</strong> const_maybe_uninit_write</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-nonnull-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.98.</strong> const_nonnull_new</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-num-midpoint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.99.</strong> const_num_midpoint</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.100.</strong> const_ops</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-option.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.101.</strong> const_option</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-option-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.102.</strong> const_option_ext</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-pin.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.103.</strong> const_pin</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-pointer-is-aligned.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.104.</strong> const_pointer_is_aligned</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-pref-align-of.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.105.</strong> const_pref_align_of</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ptr-as-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.106.</strong> const_ptr_as_ref</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ptr-is-null.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.107.</strong> const_ptr_is_null</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ptr-sub-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.108.</strong> const_ptr_sub_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ptr-write.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.109.</strong> const_ptr_write</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-range-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.110.</strong> const_range_bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-raw-ptr-comparison.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.111.</strong> const_raw_ptr_comparison</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-replace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.112.</strong> const_replace</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.113.</strong> const_result</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-size-of-val.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.114.</strong> const_size_of_val</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-size-of-val-raw.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.115.</strong> const_size_of_val_raw</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-first-last.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.116.</strong> const_slice_first_last</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-first-last-chunk.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.117.</strong> const_slice_first_last_chunk</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-flatten.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.118.</strong> const_slice_flatten</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-from-mut-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.119.</strong> const_slice_from_mut_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-from-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.120.</strong> const_slice_from_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-from-raw-parts-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.121.</strong> const_slice_from_raw_parts_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-from-ref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.122.</strong> const_slice_from_ref</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.123.</strong> const_slice_index</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-slice-split-at-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.124.</strong> const_slice_split_at_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-str-from-raw-parts-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.125.</strong> const_str_from_raw_parts_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-str-from-utf8.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.126.</strong> const_str_from_utf8</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-str-from-utf8-unchecked-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.127.</strong> const_str_from_utf8_unchecked_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-strict-overflow-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.128.</strong> const_strict_overflow_ops</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-swap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.129.</strong> const_swap</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-three-way-compare.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.130.</strong> const_three_way_compare</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-type-id.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.131.</strong> const_type_id</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-type-name.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.132.</strong> const_type_name</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-typed-swap.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.133.</strong> const_typed_swap</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.134.</strong> const_ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-unicode-case-lookup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.135.</strong> const_unicode_case_lookup</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-unsafecell-get-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.136.</strong> const_unsafecell_get_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/const-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.137.</strong> const_waker</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/container-error-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.138.</strong> container_error_extra</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/context-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.139.</strong> context_ext</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/control-flow-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.140.</strong> control_flow_enum</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/convert-float-to-int.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.141.</strong> convert_float_to_int</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-intrinsics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.142.</strong> core_intrinsics</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-io-borrowed-buf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.143.</strong> core_io_borrowed_buf</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-pattern-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.144.</strong> core_pattern_type</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-pattern-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.145.</strong> core_pattern_types</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-private-bignum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.146.</strong> core_private_bignum</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/core-private-diy-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.147.</strong> core_private_diy_float</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/coroutine-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.148.</strong> coroutine_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cow-is-borrowed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.149.</strong> cow_is_borrowed</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cstr-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.150.</strong> cstr_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/cursor-remaining.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.151.</strong> cursor_remaining</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/deadline-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.152.</strong> deadline_api</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/debug-closure-helpers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.153.</strong> debug_closure_helpers</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/dec2flt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.154.</strong> dec2flt</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/deref-pure-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.155.</strong> deref_pure_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/derive-clone-copy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.156.</strong> derive_clone_copy</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/derive-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.157.</strong> derive_const</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/derive-eq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.158.</strong> derive_eq</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/dir-entry-ext2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.159.</strong> dir_entry_ext2</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/discriminant-kind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.160.</strong> discriminant_kind</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/dispatch-from-dyn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.161.</strong> dispatch_from_dyn</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/downcast-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.162.</strong> downcast_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/drain-keep-rest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.163.</strong> drain_keep_rest</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-abs-diff.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.164.</strong> duration_abs_diff</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-constants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.165.</strong> duration_constants</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-constructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.166.</strong> duration_constructors</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-consts-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.167.</strong> duration_consts_float</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-millis-float.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.168.</strong> duration_millis_float</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/duration-units.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.169.</strong> duration_units</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/edition-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.170.</strong> edition_panic</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/entry-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.171.</strong> entry_insert</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/error-generic-member-access.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.172.</strong> error_generic_member_access</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/error-in-core.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.173.</strong> error_in_core</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/error-iter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.174.</strong> error_iter</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/error-reporter.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.175.</strong> error_reporter</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/error-type-id.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.176.</strong> error_type_id</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/exact-size-is-empty.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.177.</strong> exact_size_is_empty</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/exclusive-wrapper.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.178.</strong> exclusive_wrapper</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/exit-status-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.179.</strong> exit_status_error</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/exitcode-exit-method.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.180.</strong> exitcode_exit_method</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/exposed-provenance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.181.</strong> exposed_provenance</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/extend-one.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.182.</strong> extend_one</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.183.</strong> extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.184.</strong> fd</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fd-read.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.185.</strong> fd_read</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/float-gamma.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.186.</strong> float_gamma</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/float-minimum-maximum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.187.</strong> float_minimum_maximum</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/float-next-up-down.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.188.</strong> float_next_up_down</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/flt2dec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.189.</strong> flt2dec</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fmt-helpers-for-derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.190.</strong> fmt_helpers_for_derive</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fmt-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.191.</strong> fmt_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fn-ptr-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.192.</strong> fn_ptr_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fn-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.193.</strong> fn_traits</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/forget-unsized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.194.</strong> forget_unsized</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/format-args-nl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.195.</strong> format_args_nl</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/freeze.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.196.</strong> freeze</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/fs-try-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.197.</strong> fs_try_exists</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/future-join.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.198.</strong> future_join</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/gen-future.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.199.</strong> gen_future</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/generic-assert-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.200.</strong> generic_assert_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/get-many-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.201.</strong> get_many_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/get-mut-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.202.</strong> get_mut_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hash-extract-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.203.</strong> hash_extract_if</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hash-raw-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.204.</strong> hash_raw_entry</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hash-set-entry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.205.</strong> hash_set_entry</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hasher-prefixfree-extras.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.206.</strong> hasher_prefixfree_extras</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hashmap-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.207.</strong> hashmap_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hint-assert-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.208.</strong> hint_assert_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/hint-must-use.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.209.</strong> hint_must_use</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/inplace-iteration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.210.</strong> inplace_iteration</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/int-roundings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.211.</strong> int_roundings</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/integer-atomics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.212.</strong> integer_atomics</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/integer-sign-cast.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.213.</strong> integer_sign_cast</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/internal-impls-macro.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.214.</strong> internal_impls_macro</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/internal-output-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.215.</strong> internal_output_capture</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/io-error-more.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.216.</strong> io_error_more</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/io-error-uncategorized.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.217.</strong> io_error_uncategorized</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/io-slice-advance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.218.</strong> io_slice_advance</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.219.</strong> ip</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/is-ascii-octdigit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.220.</strong> is_ascii_octdigit</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/is-riscv-feature-detected.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.221.</strong> is_riscv_feature_detected</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/is-sorted.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.222.</strong> is_sorted</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/is-val-statically-known.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.223.</strong> is_val_statically_known</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/isqrt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.224.</strong> isqrt</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-advance-by.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.225.</strong> iter_advance_by</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-array-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.226.</strong> iter_array_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-chain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.227.</strong> iter_chain</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-collect-into.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.228.</strong> iter_collect_into</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-from-coroutine.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.229.</strong> iter_from_coroutine</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-intersperse.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.230.</strong> iter_intersperse</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-is-partitioned.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.231.</strong> iter_is_partitioned</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-map-windows.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.232.</strong> iter_map_windows</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-next-chunk.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.233.</strong> iter_next_chunk</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-order-by.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.234.</strong> iter_order_by</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-partition-in-place.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.235.</strong> iter_partition_in_place</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iter-repeat-n.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.236.</strong> iter_repeat_n</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iterator-try-collect.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.237.</strong> iterator_try_collect</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/iterator-try-reduce.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.238.</strong> iterator_try_reduce</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/junction-point.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.239.</strong> junction_point</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/layout-for-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.240.</strong> layout_for_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/lazy-cell-consume.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.241.</strong> lazy_cell_consume</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/liballoc-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.242.</strong> liballoc_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/libstd-sys-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.243.</strong> libstd_sys_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/linked-list-cursors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.244.</strong> linked_list_cursors</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/linked-list-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.245.</strong> linked_list_remove</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/linked-list-retain.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.246.</strong> linked_list_retain</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/linux-pidfd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.247.</strong> linux_pidfd</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/local-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.248.</strong> local_waker</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/log-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.249.</strong> log_syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/map-entry-replace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.250.</strong> map_entry_replace</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/map-many-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.251.</strong> map_many_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/map-try-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.252.</strong> map_try_insert</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/mapped-lock-guards.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.253.</strong> mapped_lock_guards</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-array-assume-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.254.</strong> maybe_uninit_array_assume_init</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-as-bytes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.255.</strong> maybe_uninit_as_bytes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-fill.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.256.</strong> maybe_uninit_fill</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.257.</strong> maybe_uninit_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-uninit-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.258.</strong> maybe_uninit_uninit_array</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-uninit-array-transpose.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.259.</strong> maybe_uninit_uninit_array_transpose</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/maybe-uninit-write-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.260.</strong> maybe_uninit_write_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/mem-copy-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.261.</strong> mem_copy_fn</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/more-float-constants.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.262.</strong> more_float_constants</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/new-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.263.</strong> new_uninit</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/non-zero-count-ones.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.264.</strong> non_zero_count_ones</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/nonzero-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.265.</strong> nonzero_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/nonzero-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.266.</strong> nonzero_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/nonzero-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.267.</strong> nonzero_ops</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/noop-waker.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.268.</strong> noop_waker</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/num-midpoint.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.269.</strong> num_midpoint</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/numfmt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.270.</strong> numfmt</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/once-cell-get-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.271.</strong> once_cell_get_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/once-cell-try.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.272.</strong> once_cell_try</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/once-cell-try-insert.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.273.</strong> once_cell_try_insert</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/one-sided-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.274.</strong> one_sided_range</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/option-get-or-insert-default.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.275.</strong> option_get_or_insert_default</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/option-zip.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.276.</strong> option_zip</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/os-str-display.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.277.</strong> os_str_display</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/os-str-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.278.</strong> os_str_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-abort.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.279.</strong> panic_abort</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-always-abort.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.280.</strong> panic_always_abort</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-backtrace-config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.281.</strong> panic_backtrace_config</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-can-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.282.</strong> panic_can_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-info-message.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.283.</strong> panic_info_message</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.284.</strong> panic_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-unwind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.285.</strong> panic_unwind</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/panic-update-hook.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.286.</strong> panic_update_hook</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/path-file-prefix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.287.</strong> path_file_prefix</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/pattern.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.288.</strong> pattern</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/peer-credentials-unix-socket.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.289.</strong> peer_credentials_unix_socket</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/pin-deref-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.290.</strong> pin_deref_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/pointer-is-aligned-to.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.291.</strong> pointer_is_aligned_to</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/pointer-like-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.292.</strong> pointer_like_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/portable-simd.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.293.</strong> portable_simd</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/prelude-2024.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.294.</strong> prelude_2024</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/print-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.295.</strong> print_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-def-site.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.296.</strong> proc_macro_def_site</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-diagnostic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.297.</strong> proc_macro_diagnostic</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-expand.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.298.</strong> proc_macro_expand</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.299.</strong> proc_macro_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-quote.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.300.</strong> proc_macro_quote</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-span.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.301.</strong> proc_macro_span</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/proc-macro-tracked-env.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.302.</strong> proc_macro_tracked_env</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/process-exitcode-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.303.</strong> process_exitcode_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/process-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.304.</strong> process_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/profiler-runtime-lib.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.305.</strong> profiler_runtime_lib</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-alignment-type.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.306.</strong> ptr_alignment_type</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-as-ref-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.307.</strong> ptr_as_ref_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-as-uninit.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.308.</strong> ptr_as_uninit</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.309.</strong> ptr_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-mask.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.310.</strong> ptr_mask</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.311.</strong> ptr_metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-sub-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.312.</strong> ptr_sub_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ptr-to-from-bits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.313.</strong> ptr_to_from_bits</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/pub-crate-should-not-need-unstable-attr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.314.</strong> pub_crate_should_not_need_unstable_attr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/raw-os-error-ty.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.315.</strong> raw_os_error_ty</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/raw-slice-split.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.316.</strong> raw_slice_split</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/raw-vec-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.317.</strong> raw_vec_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/read-buf.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.318.</strong> read_buf</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ready-into-inner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.319.</strong> ready_into_inner</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/receiver-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.320.</strong> receiver_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/reentrant-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.321.</strong> reentrant_lock</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/restricted-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.322.</strong> restricted_std</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/result-flattening.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.323.</strong> result_flattening</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/round-char-boundary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.324.</strong> round_char_boundary</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/rt.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.325.</strong> rt</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/rustc-encodable-decodable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.326.</strong> rustc_encodable_decodable</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sealed.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.327.</strong> sealed</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/seek-stream-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.328.</strong> seek_stream_len</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/set-ptr-value.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.329.</strong> set_ptr_value</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/setgroups.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.330.</strong> setgroups</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sgx-platform.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.331.</strong> sgx_platform</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sized-type-properties.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.332.</strong> sized_type_properties</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-as-chunks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.333.</strong> slice_as_chunks</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-concat-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.334.</strong> slice_concat_ext</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-concat-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.335.</strong> slice_concat_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-from-ptr-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.336.</strong> slice_from_ptr_range</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-index-methods.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.337.</strong> slice_index_methods</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.338.</strong> slice_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-iter-mut-as-mut-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.339.</strong> slice_iter_mut_as_mut_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-partition-dedup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.340.</strong> slice_partition_dedup</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-pattern.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.341.</strong> slice_pattern</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-ptr-get.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.342.</strong> slice_ptr_get</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-range.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.343.</strong> slice_range</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-split-once.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.344.</strong> slice_split_once</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-swap-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.345.</strong> slice_swap_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/slice-take.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.346.</strong> slice_take</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/solid-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.347.</strong> solid_ext</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sort-floats.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.348.</strong> sort_floats</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sort-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.349.</strong> sort_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/split-array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.350.</strong> split_array</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/split-as-slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.351.</strong> split_as_slice</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/std-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.352.</strong> std_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/stdarch-arm-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.353.</strong> stdarch_arm_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/stdarch-mips-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.354.</strong> stdarch_mips_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/stdarch-powerpc-feature-detection.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.355.</strong> stdarch_powerpc_feature_detection</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/stdio-makes-pipe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.356.</strong> stdio_makes_pipe</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/step-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.357.</strong> step_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-from-raw-parts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.358.</strong> str_from_raw_parts</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-from-utf16-endian.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.359.</strong> str_from_utf16_endian</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.360.</strong> str_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-lines-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.361.</strong> str_lines_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-split-inclusive-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.362.</strong> str_split_inclusive_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-split-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.363.</strong> str_split_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/str-split-whitespace-remainder.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.364.</strong> str_split_whitespace_remainder</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/strict-overflow-ops.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.365.</strong> strict_overflow_ops</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/strict-provenance-atomic-ptr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.366.</strong> strict_provenance_atomic_ptr</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/string-extend-from-within.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.367.</strong> string_extend_from_within</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/string-remove-matches.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.368.</strong> string_remove_matches</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/sync-unsafe-cell.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.369.</strong> sync_unsafe_cell</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/tcp-deferaccept.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.370.</strong> tcp_deferaccept</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/tcp-linger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.371.</strong> tcp_linger</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/tcp-quickack.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.372.</strong> tcp_quickack</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/tcplistener-into-incoming.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.373.</strong> tcplistener_into_incoming</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.374.</strong> test</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/thin-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.375.</strong> thin_box</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/thread-id-value.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.376.</strong> thread_id_value</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/thread-local-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.377.</strong> thread_local_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/thread-sleep-until.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.378.</strong> thread_sleep_until</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/thread-spawn-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.379.</strong> thread_spawn_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trace-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.380.</strong> trace_macros</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/track-path.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.381.</strong> track_path</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/transmutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.382.</strong> transmutability</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trusted-fused.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.383.</strong> trusted_fused</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trusted-len.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.384.</strong> trusted_len</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trusted-len-next-unchecked.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.385.</strong> trusted_len_next_unchecked</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trusted-random-access.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.386.</strong> trusted_random_access</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/trusted-step.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.387.</strong> trusted_step</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-find.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.388.</strong> try_find</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-reserve-kind.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.389.</strong> try_reserve_kind</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-trait-v2.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.390.</strong> try_trait_v2</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-trait-v2-residual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.391.</strong> try_trait_v2_residual</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-trait-v2-yeet.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.392.</strong> try_trait_v2_yeet</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/try-with-capacity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.393.</strong> try_with_capacity</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/tuple-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.394.</strong> tuple_trait</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/ub-checks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.395.</strong> ub_checks</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/uefi-std.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.396.</strong> uefi_std</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unchecked-neg.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.397.</strong> unchecked_neg</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unchecked-shifts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.398.</strong> unchecked_shifts</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unicode-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.399.</strong> unicode_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unique-rc-arc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.400.</strong> unique_rc_arc</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unix-file-vectored-at.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.401.</strong> unix_file_vectored_at</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unix-set-mark.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.402.</strong> unix_set_mark</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unix-socket-ancillary-data.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.403.</strong> unix_socket_ancillary_data</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unix-socket-peek.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.404.</strong> unix_socket_peek</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unsafe-cell-from-mut.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.405.</strong> unsafe_cell_from_mut</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unsafe-pin-internals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.406.</strong> unsafe_pin_internals</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unsize.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.407.</strong> unsize</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/unwrap-infallible.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.408.</strong> unwrap_infallible</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/update-panic-count.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.409.</strong> update_panic_count</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/utf16-extra.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.410.</strong> utf16_extra</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/utf16-extra-const.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.411.</strong> utf16_extra_const</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/variant-count.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.412.</strong> variant_count</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/vec-into-raw-parts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.413.</strong> vec_into_raw_parts</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/vec-pop-if.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.414.</strong> vec_pop_if</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/vec-push-within-capacity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.415.</strong> vec_push_within_capacity</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/vec-split-at-spare.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.416.</strong> vec_split_at_spare</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/waker-getters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.417.</strong> waker_getters</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/wasi-ext.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.418.</strong> wasi_ext</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-by-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.419.</strong> windows_by_handle</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-c.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.420.</strong> windows_c</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.421.</strong> windows_handle</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-net.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.422.</strong> windows_net</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-process-exit-code-from.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.423.</strong> windows_process_exit_code_from</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-process-extensions-async-pipes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.424.</strong> windows_process_extensions_async_pipes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-process-extensions-force-quotes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.425.</strong> windows_process_extensions_force_quotes</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-process-extensions-main-thread-handle.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.426.</strong> windows_process_extensions_main_thread_handle</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-process-extensions-raw-attribute.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.427.</strong> windows_process_extensions_raw_attribute</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/windows-stdio.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.428.</strong> windows_stdio</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/wrapping-int-impl.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.429.</strong> wrapping_int_impl</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/wrapping-next-power-of-two.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.430.</strong> wrapping_next_power_of_two</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/write-all-vectored.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.431.</strong> write_all_vectored</a></li><li class=\"chapter-item expanded \"><a href=\"../library-features/yeet-desugar-details.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.432.</strong> yeet_desugar_details</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Unstable Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/tree/master/src/doc/unstable-book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/rust/edit/master/src/doc/unstable-book/src/compiler-flags/sanitizer.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"sanitizer\"><a class=\"header\" href=\"#sanitizer\"><code>sanitizer</code></a></h1>\n<p>Sanitizers are tools that help detect and prevent various types of bugs and\nvulnerabilities in software. They are available in compilers and work by\ninstrumenting the code to add additional runtime checks. While they provide\npowerful tools for identifying bugs or security issues, it's important to note\nthat using sanitizers can introduce runtime overhead and might not catch all\npossible issues. Therefore, they are typically used alongside other best\npractices in software development, such as testing and fuzzing, to ensure the\nhighest level of software quality and security.</p>\n<p>The tracking issues for this feature are:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/39699\">#39699</a>.</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a>.</li>\n</ul>\n<hr>\n<p>This feature allows for use of one of following sanitizers:</p>\n<ul>\n<li>\n<p>Those intended for testing or fuzzing (but not production use):</p>\n<ul>\n<li><a href=\"#addresssanitizer\">AddressSanitizer</a> a fast memory error detector.</li>\n<li><a href=\"#hwaddresssanitizer\">HWAddressSanitizer</a> a memory error detector similar to\nAddressSanitizer, but based on partial hardware assistance.</li>\n<li><a href=\"#leaksanitizer\">LeakSanitizer</a> a run-time memory leak detector.</li>\n<li><a href=\"#memorysanitizer\">MemorySanitizer</a> a detector of uninitialized reads.</li>\n<li><a href=\"#threadsanitizer\">ThreadSanitizer</a> a fast data race detector.</li>\n</ul>\n</li>\n<li>\n<p>Those that apart from testing, may be used in production:</p>\n<ul>\n<li><a href=\"#controlflowintegrity\">ControlFlowIntegrity</a> LLVM Control Flow Integrity\n(CFI) provides forward-edge control flow protection.</li>\n<li><a href=\"#dataflowsanitizer\">DataFlowSanitizer</a> a generic dynamic data flow analysis\nframework.</li>\n<li><a href=\"#kernelcontrolflowintegrity\">KernelControlFlowIntegrity</a> LLVM Kernel\nControl Flow Integrity (KCFI) provides forward-edge control flow protection\nfor operating systems kernels.</li>\n<li><a href=\"#memtagsanitizer\">MemTagSanitizer</a> fast memory error detector based on\nArmv8.5-A Memory Tagging Extension.</li>\n<li><a href=\"#safestack\">SafeStack</a> provides backward-edge control flow protection by\nseparating the stack into safe and unsafe regions.</li>\n<li><a href=\"#shadowcallstack\">ShadowCallStack</a> provides backward-edge control flow\nprotection (aarch64 only).</li>\n</ul>\n</li>\n</ul>\n<p>To enable a sanitizer compile with <code class=\"hljs\">-Zsanitizer=address</code>, <code class=\"hljs\">-Zsanitizer=cfi</code>,\n<code class=\"hljs\">-Zsanitizer=dataflow</code>,<code class=\"hljs\">-Zsanitizer=hwaddress</code>, <code class=\"hljs\">-Zsanitizer=leak</code>,\n<code class=\"hljs\">-Zsanitizer=memory</code>, <code class=\"hljs\">-Zsanitizer=memtag</code>, <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code>, or\n<code class=\"hljs\">-Zsanitizer=thread</code>. You might also need the <code class=\"hljs\">--target</code> and <code class=\"hljs\">build-std</code> flags.\nIf you're working with other languages that are also instrumented with sanitizers,\nyou might need the <code class=\"hljs\">external-clangrt</code> flag. See the section on\n<a href=\"#working-with-other-languages\">working with other languages</a>.</p>\n<p>Example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=-Zsanitizer=address cargo build -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n</code></pre>\n<p>Additional options for sanitizers can be passed to LLVM command line argument\nprocessor via LLVM arguments using <code class=\"hljs\">llvm-args</code> codegen option (e.g.,\n<code class=\"hljs\">-Cllvm-args=-dfsan-combine-pointer-labels-on-load=false</code>). See the sanitizer\ndocumentation for more information about additional options.</p>\n<h1 id=\"addresssanitizer\"><a class=\"header\" href=\"#addresssanitizer\">AddressSanitizer</a></h1>\n<p>AddressSanitizer is a memory error detector. It can detect the following types\nof bugs:</p>\n<ul>\n<li>Out of bound accesses to heap, stack and globals</li>\n<li>Use after free</li>\n<li>Use after return (runtime flag <code class=\"hljs\">ASAN_OPTIONS=detect_stack_use_after_return=1</code>)</li>\n<li>Use after scope</li>\n<li>Double-free, invalid free</li>\n<li>Memory leaks</li>\n</ul>\n<p>The memory leak detection is enabled by default on Linux, and can be enabled\nwith runtime flag <code class=\"hljs\">ASAN_OPTIONS=detect_leaks=1</code> on macOS.</p>\n<p>AddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-fuchsia</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-fuchsia</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>AddressSanitizer works with non-instrumented code although it will impede its\nability to detect some bugs.  It is not expected to produce false positive\nreports.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">Clang AddressSanitizer documentation</a> for more details.</p>\n<h2 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h2>\n<p>Stack buffer overflow:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> _y = <span class=\"hljs-keyword\">unsafe</span> { *xs.as_ptr().offset(<span class=\"hljs-number\">4</span>) };\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==37882==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe400e6250 at pc 0x5609a841fb20 bp 0x7ffe400e6210 sp 0x7ffe400e6208\nREAD of size 4 at 0x7ffe400e6250 thread T0\n    #0 0x5609a841fb1f in example::main::h628ffc6626ed85b2 /.../src/main.rs:3:23\n    ...\n\nAddress 0x7ffe400e6250 is located in stack of thread T0 at offset 48 in frame\n    #0 0x5609a841f8af in example::main::h628ffc6626ed85b2 /.../src/main.rs:1\n\n  This frame has 1 object(s):\n    [32, 48) 'xs' (line 2) &lt;== Memory access at offset 48 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow /.../src/main.rs:3:23 in example::main::h628ffc6626ed85b2\nShadow bytes around the buggy address:\n  0x100048014bf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=&gt;0x100048014c40: 00 00 00 00 f1 f1 f1 f1 00 00[f3]f3 00 00 00 00\n  0x100048014c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x100048014c70: f1 f1 f1 f1 00 00 f3 f3 00 00 00 00 00 00 00 00\n  0x100048014c80: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x100048014c90: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==37882==ABORTING\n</code></pre>\n<p>Use of a stack object after its scope has already ended:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> P: *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">usize</span> = std::ptr::null_mut();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">0</span>;\n            P = &amp;<span class=\"hljs-keyword\">mut</span> x;\n        }\n        std::ptr::write_volatile(P, <span class=\"hljs-number\">123</span>);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=address RUSTDOCFLAGS=-Zsanitizer=address</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n=================================================================\n==39249==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffc7ed3e1a0 at pc 0x55c98b262a8e bp 0x7ffc7ed3e050 sp 0x7ffc7ed3e048\nWRITE of size 8 at 0x7ffc7ed3e1a0 thread T0\n    #0 0x55c98b262a8d in core::ptr::write_volatile::he21f1df5a82f329a /.../src/rust/src/libcore/ptr/mod.rs:1048:5\n    #1 0x55c98b262cd2 in example::main::h628ffc6626ed85b2 /.../src/main.rs:9:9\n    ...\n\nAddress 0x7ffc7ed3e1a0 is located in stack of thread T0 at offset 32 in frame\n    #0 0x55c98b262bdf in example::main::h628ffc6626ed85b2 /.../src/main.rs:3\n\n  This frame has 1 object(s):\n    [32, 40) 'x' (line 6) &lt;== Memory access at offset 32 is inside this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-use-after-scope /.../src/rust/src/libcore/ptr/mod.rs:1048:5 in core::ptr::write_volatile::he21f1df5a82f329a\nShadow bytes around the buggy address:\n  0x10000fd9fbe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fbf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc00: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc10: f8 f8 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=&gt;0x10000fd9fc30: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00\n  0x10000fd9fc40: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1\n  0x10000fd9fc50: 00 00 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc60: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3\n  0x10000fd9fc70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x10000fd9fc80: 00 00 00 00 f1 f1 f1 f1 00 00 f3 f3 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==39249==ABORTING\n</code></pre>\n<h1 id=\"controlflowintegrity\"><a class=\"header\" href=\"#controlflowintegrity\">ControlFlowIntegrity</a></h1>\n<p>The LLVM CFI support in the Rust compiler provides forward-edge control flow\nprotection for both Rust-compiled code only and for C or C++ and Rust -compiled\ncode mixed-language binaries, also known as “mixed binaries” (i.e., for when C\nor C++ and Rust -compiled code share the same virtual address space), by\naggregating function pointers in groups identified by their return and parameter\ntypes.</p>\n<p>LLVM CFI can be enabled with <code class=\"hljs\">-Zsanitizer=cfi</code> and requires LTO (i.e.,\n<code class=\"hljs\">-Clinker-plugin-lto</code> or <code class=\"hljs\">-Clto</code>). Cross-language LLVM CFI can be enabled with\n<code class=\"hljs\">-Zsanitizer=cfi</code>, and requires the <code class=\"hljs\">-Zsanitizer-cfi-normalize-integers</code> option\nto be used with Clang <code class=\"hljs\">-fsanitize-cfi-icall-experimental-normalize-integers</code>\noption for cross-language LLVM CFI support, and proper (i.e., non-rustc) LTO\n(i.e., <code class=\"hljs\">-Clinker-plugin-lto</code>).</p>\n<p>It is recommended to rebuild the standard library with CFI enabled by using the\nCargo build-std feature (i.e., <code class=\"hljs\">-Zbuild-std</code>) when enabling CFI.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\">Clang ControlFlowIntegrity documentation</a> for more details.</p>\n<h2 id=\"example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination\"><a class=\"header\" href=\"#example-1-redirecting-control-flow-using-an-indirect-branchcall-to-an-invalid-destination\">Example 1: Redirecting control flow using an indirect branch/call to an invalid destination</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore (making doc tests pass cross-platform is hard) hljs\"><span class=\"hljs-meta\">#![feature(naked_functions)]</span>\n\n<span class=\"hljs-keyword\">use</span> std::arch::asm;\n<span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-meta\">#[naked]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-comment\">// x + 2 preceded by a landing pad/nop block</span>\n    <span class=\"hljs-keyword\">unsafe</span> {\n        asm!(\n            <span class=\"hljs-string\">\"\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             nop\n             lea eax, [rdi+2]\n             ret\n        \"</span>,\n            options(noreturn)\n        );\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-comment\">// Offset 0 is a valid branch/call destination (i.e., the function entry</span>\n        <span class=\"hljs-comment\">// point), but offsets 1-8 within the landing pad/nop block are invalid</span>\n        <span class=\"hljs-comment\">// branch/call destinations (i.e., within the body of the function).</span>\n        mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;((add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>).offset(<span class=\"hljs-number\">5</span>))\n    };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre>\n<p>Fig. 1. Redirecting control flow using an indirect branch/call to an invalid\ndestination (i.e., within the body of the function).</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 0.42s\n     Running `target/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 2. Build and execution of Fig. 1 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-1 v0.1.0 (/home/rcvalle/rust-cfi-1)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-1`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 3. Build and execution of Fig. 1 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to an invalid destination, the execution is\nterminated (see Fig. 3).</p>\n<h2 id=\"example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters\"><a class=\"header\" href=\"#example-2-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-a-different-number-of-parameters\">Example 2: Redirecting control flow using an indirect branch/call to a function with a different number of parameters</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i32</span>, _y: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> =\n        <span class=\"hljs-keyword\">unsafe</span> { mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;(add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre></pre>\n<p>Fig. 4. Redirecting control flow using an indirect branch/call to a function\nwith a different number of parameters than arguments intended/passed in the\ncall/branch site.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 0.43s\n     Running `target/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 5. Build and execution of Fig. 4 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-2 v0.1.0 (/home/rcvalle/rust-cfi-2)\n    Finished release [optimized] target(s) in 1m 08s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-2`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 6. Build and execution of Fig. 4 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to a function with different number of\nparameters than arguments intended/passed in the call/branch site, the\nexecution is also terminated (see Fig. 6).</p>\n<h2 id=\"example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types\"><a class=\"header\" href=\"#example-3-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types\">Example 3: Redirecting control flow using an indirect branch/call to a function with different return and parameter types</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(x: <span class=\"hljs-built_in\">i64</span>) -&gt; <span class=\"hljs-built_in\">i64</span> {\n    x + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {}\"</span>, answer);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With CFI enabled, you should not see the next answer\"</span>);\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> =\n        <span class=\"hljs-keyword\">unsafe</span> { mem::transmute::&lt;*<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt;(add_two <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>) };\n    <span class=\"hljs-keyword\">let</span> next_answer = do_twice(f, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The next answer is: {}\"</span>, next_answer);\n}</code></pre></pre>\n<p>Fig. 7. Redirecting control flow using an indirect branch/call to a function\nwith different return and parameter types than the return type expected and\narguments intended/passed at the call/branch site.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run --release</span>\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 0.44s\n     Running `target/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 8. Build and execution of Fig. 7 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUSTFLAGS=<span class=\"hljs-string\">\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi\"</span> cargo run -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu</span>\n   ...\n   Compiling rust-cfi-3 v0.1.0 (/home/rcvalle/rust-cfi-3)\n    Finished release [optimized] target(s) in 1m 07s\n     Running `target/x86_64-unknown-linux-gnu/release/rust-cfi-3`\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 9. Build and execution of Fig. 7 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to change/hijack control\nflow using an indirect branch/call to a function with different return and\nparameter types than the return type expected and arguments intended/passed in\nthe call/branch site, the execution is also terminated (see Fig. 9).</p>\n<h2 id=\"example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary\"><a class=\"header\" href=\"#example-4-redirecting-control-flow-using-an-indirect-branchcall-to-a-function-with-different-return-and-parameter-types-across-the-ffi-boundary\">Example 4: Redirecting control flow using an indirect branch/call to a function with different return and parameter types across the FFI boundary</a></h2>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ignore (cannot-test-this-because-uses-custom-build) hljs\">int\ndo_twice(int (*fn)(int), int arg)\n{\n    return fn(arg) + fn(arg);\n}\n</code></pre>\n<p>Fig. 10. Example C library.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-ignore (cannot-test-this-because-uses-custom-build) hljs\">use std::mem;\n\n#[link(name = \"foo\")]\nextern \"C\" {\n    fn do_twice(f: unsafe extern \"C\" fn(i32) -&gt; i32, arg: i32) -&gt; i32;\n}\n\nunsafe extern \"C\" fn add_one(x: i32) -&gt; i32 {\n    x + 1\n}\n\nunsafe extern \"C\" fn add_two(x: i64) -&gt; i64 {\n    x + 2\n}\n\nfn main() {\n    let answer = unsafe { do_twice(add_one, 5) };\n\n    println!(\"The answer is: {}\", answer);\n\n    println!(\"With CFI enabled, you should not see the next answer\");\n    let f: unsafe extern \"C\" fn(i32) -&gt; i32 = unsafe {\n        mem::transmute::&lt;*const u8, unsafe extern \"C\" fn(i32) -&gt; i32&gt;(add_two as *const u8)\n    };\n    let next_answer = unsafe { do_twice(f, 5) };\n\n    println!(\"The next answer is: {}\", next_answer);\n}\n</code></pre>\n<p>Fig. 11. Redirecting control flow using an indirect branch/call to a function\nwith different return and parameter types than the return type expected and\narguments intended/passed in the call/branch site, across the FFI boundary.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make</span>\nmkdir -p target/release\nclang -I. -Isrc -Wall -c src/foo.c -o target/release/libfoo.o\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.o\nRUSTFLAGS=\"-L./target/release -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 0.49s\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/release/rust-cfi-4</span>\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nThe next answer is: 14\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 12. Build and execution of Figs. 10–11 with LLVM CFI disabled.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> make</span>\nmkdir -p target/release\nclang -I. -Isrc -Wall -flto -fsanitize=cfi -fsanitize-cfi-icall-experimental-normalize-integers -fvisibility=hidden -c -emit-llvm src/foo.c -o target/release/libfoo.bc\nllvm-ar rcs target/release/libfoo.a target/release/libfoo.bc\nRUSTFLAGS=\"-L./target/release -Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld -Zsanitizer=cfi -Zsanitizer-cfi-normalize-integers\" cargo build -Zbuild-std -Zbuild-std-features --release --target x86_64-unknown-linux-gnu\n   ...\n   Compiling rust-cfi-4 v0.1.0 (/home/rcvalle/rust-cfi-4)\n    Finished release [optimized] target(s) in 1m 06s\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/x86_64-unknown-linux-gnu/release/rust-cfi-4</span>\nThe answer is: 12\nWith CFI enabled, you should not see the next answer\nIllegal instruction\n<span class=\"hljs-meta\">$</span>\n</code></pre>\n<p>Fig. 13. Build and execution of FIgs. 10–11 with LLVM CFI enabled.</p>\n<p>When LLVM CFI is enabled, if there are any attempts to redirect control flow\nusing an indirect branch/call to a function with different return and parameter\ntypes than the return type expected and arguments intended/passed in the\ncall/branch site, even across the FFI boundary and for extern \"C\" function types\nindirectly called (i.e., callbacks/function pointers) across the FFI boundary,\nthe execution is also terminated (see Fig. 13).</p>\n<h1 id=\"hwaddresssanitizer\"><a class=\"header\" href=\"#hwaddresssanitizer\">HWAddressSanitizer</a></h1>\n<p>HWAddressSanitizer is a newer variant of AddressSanitizer that consumes much\nless memory.</p>\n<p>HWAddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n</ul>\n<p>HWAddressSanitizer requires <code class=\"hljs\">tagged-globals</code> target feature to instrument\nglobals. To enable this target feature compile with <code class=\"hljs\">-C target-feature=+tagged-globals</code></p>\n<p>See the <a href=\"https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\">Clang HWAddressSanitizer documentation</a> for more details.</p>\n<h2 id=\"example\"><a class=\"header\" href=\"#example\">Example</a></h2>\n<p>Heap buffer overflow:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> xs = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> _y = <span class=\"hljs-keyword\">unsafe</span> { *xs.as_ptr().offset(<span class=\"hljs-number\">4</span>) };\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc main.rs -Zsanitizer=hwaddress -C target-feature=+tagged-globals -C</span>\nlinker=aarch64-linux-gnu-gcc -C link-arg=-fuse-ld=lld --target\naarch64-unknown-linux-gnu\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main</span>\n==241==ERROR: HWAddressSanitizer: tag-mismatch on address 0xefdeffff0050 at pc 0xaaaae0ae4a98\nREAD of size 4 at 0xefdeffff0050 tags: 2c/00 (ptr/mem) in thread T0\n    #0 0xaaaae0ae4a94  (/.../main+0x54a94)\n    ...\n\n[0xefdeffff0040,0xefdeffff0060) is a small allocated heap chunk; size: 32 offset: 16\n0xefdeffff0050 is located 0 bytes to the right of 16-byte region [0xefdeffff0040,0xefdeffff0050)\nallocated here:\n    #0 0xaaaae0acb80c  (/.../main+0x3b80c)\n    ...\n\nThread: T0 0xeffe00002000 stack: [0xffffc28ad000,0xffffc30ad000) sz: 8388608 tls: [0xffffaa10a020,0xffffaa10a7d0)\nMemory tags around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffef80: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffef90: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefa0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefb0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefc0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefd0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffefe0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefcefffeff0: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n=&gt;0xfefceffff000: d7  d7  05  00  2c [00] 00  00  00  00  00  00  00  00  00  00\n  0xfefceffff010: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff020: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff030: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff040: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff050: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff060: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff070: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  0xfefceffff080: 00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\nTags for short granules around the buggy address (one tag corresponds to 16 bytes):\n  0xfefcefffeff0: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n=&gt;0xfefceffff000: ..  ..  8c  ..  .. [..] ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\n  0xfefceffff010: ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..  ..\nSee https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html#short-granules for a description of short granule tags\nRegisters where the failure occurred (pc 0xaaaae0ae4a98):\n    x0  2c00efdeffff0050  x1  0000000000000004  x2  0000000000000004  x3  0000000000000000\n    x4  0000fffefc30ac37  x5  000000000000005d  x6  00000ffffc30ac37  x7  0000efff00000000\n    x8  2c00efdeffff0050  x9  0200efff00000000  x10 0000000000000000  x11 0200efff00000000\n    x12 0200effe00000310  x13 0200effe00000310  x14 0000000000000008  x15 5d00ffffc30ac360\n    x16 0000aaaae0ad062c  x17 0000000000000003  x18 0000000000000001  x19 0000ffffc30ac658\n    x20 4e00ffffc30ac6e0  x21 0000aaaae0ac5e10  x22 0000000000000000  x23 0000000000000000\n    x24 0000000000000000  x25 0000000000000000  x26 0000000000000000  x27 0000000000000000\n    x28 0000000000000000  x29 0000ffffc30ac5a0  x30 0000aaaae0ae4a98\nSUMMARY: HWAddressSanitizer: tag-mismatch (/.../main+0x54a94)\n</code></pre>\n<h1 id=\"kernelcontrolflowintegrity\"><a class=\"header\" href=\"#kernelcontrolflowintegrity\">KernelControlFlowIntegrity</a></h1>\n<p>The LLVM Kernel Control Flow Integrity (CFI) support to the Rust compiler\ninitially provides forward-edge control flow protection for operating systems\nkernels for Rust-compiled code only by aggregating function pointers in groups\nidentified by their return and parameter types. (See <a href=\"https://github.com/llvm/llvm-project/commit/cff5bef948c91e4919de8a5fb9765e0edc13f3de\">LLVM commit cff5bef \"KCFI\nsanitizer\"</a>.)</p>\n<p>Forward-edge control flow protection for C or C++ and Rust -compiled code \"mixed\nbinaries\" (i.e., for when C or C++ and Rust -compiled code share the same\nvirtual address space) will be provided in later work by defining and using\ncompatible type identifiers (see Type metadata in the design document in the\ntracking issue <a href=\"https://github.com/rust-lang/rust/issues/89653\">#89653</a>).</p>\n<p>LLVM KCFI can be enabled with <code class=\"hljs\">-Zsanitizer=kcfi</code>.</p>\n<p>LLVM KCFI is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-linux-android</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html#fsanitize-kcfi\">Clang KernelControlFlowIntegrity documentation</a> for more\ndetails.</p>\n<h1 id=\"dataflowsanitizer\"><a class=\"header\" href=\"#dataflowsanitizer\">DataFlowSanitizer</a></h1>\n<p>DataFlowSanitizer is a generalised dynamic data flow analysis.</p>\n<p>Unlike other Sanitizer tools, this tool is not designed to detect a specific\nclass of bugs on its own. Instead, it provides a generic dynamic data flow\nanalysis framework to be used by clients to help detect application-specific\nissues within their own code.</p>\n<p>DataFlowSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/DataFlowSanitizer.html\">Clang DataFlowSanitizer documentation</a> for more details.</p>\n<h1 id=\"kerneladdresssanitizer\"><a class=\"header\" href=\"#kerneladdresssanitizer\">KernelAddressSanitizer</a></h1>\n<p>KernelAddressSanitizer (KASAN) is a freestanding version of AddressSanitizer\nwhich is suitable for detecting memory errors in programs which do not have a\nruntime environment, such as operating system kernels. KernelAddressSanitizer\nrequires manual implementation of the underlying functions used for tracking\nKernelAddressSanitizer state.</p>\n<p>KernelAddressSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-unknown-none</code></li>\n<li><code class=\"hljs\">riscv64gc-unknown-none-elf</code></li>\n<li><code class=\"hljs\">riscv64imac-unknown-none-elf</code></li>\n<li><code class=\"hljs\">x86_64-unknown-none</code></li>\n</ul>\n<p>See the <a href=\"https://www.kernel.org/doc/html/latest/dev-tools/kasan.html\">Linux Kernel's KernelAddressSanitizer documentation</a> for\nmore details.</p>\n<h1 id=\"leaksanitizer\"><a class=\"header\" href=\"#leaksanitizer\">LeakSanitizer</a></h1>\n<p>LeakSanitizer is run-time memory leak detector.</p>\n<p>LeakSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/LeakSanitizer.html\">Clang LeakSanitizer documentation</a> for more details.</p>\n<h1 id=\"memorysanitizer\"><a class=\"header\" href=\"#memorysanitizer\">MemorySanitizer</a></h1>\n<p>MemorySanitizer is detector of uninitialized reads.</p>\n<p>MemorySanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>MemorySanitizer requires all program code to be instrumented. C/C++ dependencies\nneed to be recompiled using Clang with <code class=\"hljs\">-fsanitize=memory</code> option. Failing to\nachieve that will result in false positive reports.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">Clang MemorySanitizer documentation</a> for more details.</p>\n<h2 id=\"example-1\"><a class=\"header\" href=\"#example-1\">Example</a></h2>\n<p>Detecting the use of uninitialized memory. The <code class=\"hljs\">-Zbuild-std</code> flag rebuilds and\ninstruments the standard library, and is strictly necessary for the correct\noperation of the tool. The <code class=\"hljs\">-Zsanitizer-memory-track-origins</code> enables tracking\nof the origins of uninitialized memory:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::mem::MaybeUninit;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-keyword\">let</span> a = MaybeUninit::&lt;[<span class=\"hljs-built_in\">usize</span>; <span class=\"hljs-number\">4</span>]&gt;::uninit();\n        <span class=\"hljs-keyword\">let</span> a = a.assume_init();\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, a[<span class=\"hljs-number\">2</span>]);\n    }\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> \\</span>\n  RUSTFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins' \\\n  RUSTDOCFLAGS='-Zsanitizer=memory -Zsanitizer-memory-track-origins'\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo clean</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==9416==WARNING: MemorySanitizer: use-of-uninitialized-value\n    #0 0x560c04f7488a in core::fmt::num::imp::fmt_u64::haa293b0b098501ca $RUST/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/src/rust/src/libcore/fmt/num.rs:202:16\n...\n  Uninitialized value was stored to memory at\n    #0 0x560c04ae898a in __msan_memcpy.part.0 $RUST/src/llvm-project/compiler-rt/lib/msan/msan_interceptors.cc:1558:3\n    #1 0x560c04b2bf88 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:6:16\n\n  Uninitialized value was created by an allocation of 'a' in the stack frame of function '_ZN6memory4main17hd2333c1899d997f5E'\n    #0 0x560c04b2bc50 in memory::main::hd2333c1899d997f5 $CWD/src/main.rs:3\n</code></pre>\n<h1 id=\"memtagsanitizer\"><a class=\"header\" href=\"#memtagsanitizer\">MemTagSanitizer</a></h1>\n<p>MemTagSanitizer detects a similar class of errors as AddressSanitizer and HardwareAddressSanitizer, but with lower overhead suitable for use as hardening for production binaries.</p>\n<p>MemTagSanitizer is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n</ul>\n<p>MemTagSanitizer requires hardware support and the <code class=\"hljs\">mte</code> target feature.\nTo enable this target feature compile with <code class=\"hljs\">-C target-feature=\"+mte\"</code>.</p>\n<p>See the <a href=\"https://llvm.org/docs/MemTagSanitizer.html\">LLVM MemTagSanitizer documentation</a> for more details.</p>\n<h1 id=\"safestack\"><a class=\"header\" href=\"#safestack\">SafeStack</a></h1>\n<p>SafeStack provides backward edge control flow protection by separating the stack into data which is only accessed safely (the safe stack) and all other data (the unsafe stack).</p>\n<p>SafeStack can be enabled with the <code class=\"hljs\">-Zsanitizer=safestack</code> option and is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>See the <a href=\"https://clang.llvm.org/docs/SafeStack.html\">Clang SafeStack documentation</a> for more details.</p>\n<h1 id=\"shadowcallstack\"><a class=\"header\" href=\"#shadowcallstack\">ShadowCallStack</a></h1>\n<p>ShadowCallStack provides backward edge control flow protection by storing a function's return address in a separately allocated 'shadow call stack' and loading the return address from that shadow call stack.</p>\n<p>ShadowCallStack requires a platform ABI which reserves <code class=\"hljs\">x18</code> as the instrumentation makes use of this register.</p>\n<p>ShadowCallStack can be enabled with <code class=\"hljs\">-Zsanitizer=shadow-call-stack</code> option and is supported on the following targets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-linux-android</code></li>\n</ul>\n<p>A runtime must be provided by the application or operating system.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ShadowCallStack.html\">Clang ShadowCallStack documentation</a> for more details.</p>\n<h1 id=\"threadsanitizer\"><a class=\"header\" href=\"#threadsanitizer\">ThreadSanitizer</a></h1>\n<p>ThreadSanitizer is a data race detection tool. It is supported on the following\ntargets:</p>\n<ul>\n<li><code class=\"hljs\">aarch64-apple-darwin</code></li>\n<li><code class=\"hljs\">aarch64-unknown-linux-gnu</code></li>\n<li><code class=\"hljs\">x86_64-apple-darwin</code></li>\n<li><code class=\"hljs\">x86_64-unknown-freebsd</code></li>\n<li><code class=\"hljs\">x86_64-unknown-linux-gnu</code></li>\n</ul>\n<p>To work correctly ThreadSanitizer needs to be \"aware\" of all synchronization\noperations in a program. It generally achieves that through combination of\nlibrary interception (for example synchronization performed through\n<code class=\"hljs\">pthread_mutex_lock</code> / <code class=\"hljs\">pthread_mutex_unlock</code>) and compile time instrumentation\n(e.g. atomic operations). Using it without instrumenting all the program code\ncan lead to false positive reports.</p>\n<p>ThreadSanitizer does not support atomic fences <code class=\"hljs\">std::sync::atomic::fence</code>,\nnor synchronization performed using inline assembly code.</p>\n<p>See the <a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">Clang ThreadSanitizer documentation</a> for more details.</p>\n<h2 id=\"example-2\"><a class=\"header\" href=\"#example-2\">Example</a></h2>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> A: <span class=\"hljs-built_in\">usize</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> t = std::thread::spawn(|| {\n        <span class=\"hljs-keyword\">unsafe</span> { A += <span class=\"hljs-number\">1</span> };\n    });\n    <span class=\"hljs-keyword\">unsafe</span> { A += <span class=\"hljs-number\">1</span> };\n\n    t.join().unwrap();\n}</code></pre></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-shell hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">export</span> RUSTFLAGS=-Zsanitizer=thread RUSTDOCFLAGS=-Zsanitizer=thread</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -Zbuild-std --target x86_64-unknown-linux-gnu</span>\n==================\nWARNING: ThreadSanitizer: data race (pid=10574)\n  Read of size 8 at 0x5632dfe3d030 by thread T1:\n    #0 example::main::_$u7b$$u7b$closure$u7d$$u7d$::h23f64b0b2f8c9484 ../src/main.rs:5:18 (example+0x86cec)\n    ...\n\n  Previous write of size 8 at 0x5632dfe3d030 by main thread:\n    #0 example::main::h628ffc6626ed85b2 /.../src/main.rs:7:14 (example+0x868c8)\n    ...\n    #11 main &lt;null&gt; (example+0x86a1a)\n\n  Location is global 'example::A::h43ac149ddf992709' of size 8 at 0x5632dfe3d030 (example+0x000000bd9030)\n</code></pre>\n<h1 id=\"instrumentation-of-external-dependencies-and-std\"><a class=\"header\" href=\"#instrumentation-of-external-dependencies-and-std\">Instrumentation of external dependencies and std</a></h1>\n<p>The sanitizers to varying degrees work correctly with partially instrumented\ncode. On the one extreme is LeakSanitizer that doesn't use any compile time\ninstrumentation, on the other is MemorySanitizer that requires that all program\ncode to be instrumented (failing to achieve that will inevitably result in\nfalse positives).</p>\n<p>It is strongly recommended to combine sanitizers with recompiled and\ninstrumented standard library, for example using <a href=\"../../cargo/reference/unstable.html#build-std\">cargo <code class=\"hljs\">-Zbuild-std</code>\nfunctionality</a>.</p>\n<h1 id=\"working-with-other-languages\"><a class=\"header\" href=\"#working-with-other-languages\">Working with other languages</a></h1>\n<p>Sanitizers rely on compiler runtime libraries to function properly. Rust links\nin its own compiler runtime which might conflict with runtimes required by\nlanguages such as C++. Since Rust's runtime doesn't always contain the symbols\nrequired by C++ instrumented code, you might need to skip linking it so another\nruntime can be linked instead.</p>\n<p>A separate unstable option <code class=\"hljs\">-Zexternal-clangrt</code> can be used to make rustc skip\nlinking the compiler runtime for the sanitizer. This will require you to link\nin an external runtime, such as from clang instead.</p>\n<h1 id=\"build-scripts-and-procedural-macros\"><a class=\"header\" href=\"#build-scripts-and-procedural-macros\">Build scripts and procedural macros</a></h1>\n<p>Use of sanitizers together with build scripts and procedural macros is\ntechnically possible, but in almost all cases it would be best avoided.  This\nis especially true for procedural macros which would require an instrumented\nversion of rustc.</p>\n<p>In more practical terms when using cargo always remember to pass <code class=\"hljs\">--target</code>\nflag, so that rustflags will not be applied to build scripts and procedural\nmacros.</p>\n<h1 id=\"symbolizing-the-reports\"><a class=\"header\" href=\"#symbolizing-the-reports\">Symbolizing the Reports</a></h1>\n<p>Sanitizers produce symbolized stacktraces when llvm-symbolizer binary is in <code class=\"hljs\">PATH</code>.</p>\n<h1 id=\"additional-information\"><a class=\"header\" href=\"#additional-information\">Additional Information</a></h1>\n<ul>\n<li><a href=\"https://github.com/google/sanitizers/wiki/\">Sanitizers project page</a></li>\n<li><a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">AddressSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\">ControlFlowIntegrity in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/DataFlowSanitizer.html\">DataFlowSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/HardwareAssistedAddressSanitizerDesign.html\">HWAddressSanitizer in Clang</a></li>\n<li><a href=\"https://www.kernel.org/doc/html/latest/dev-tools/kasan.html\">Linux Kernel's KernelAddressSanitizer documentation</a></li>\n<li><a href=\"https://clang.llvm.org/docs/LeakSanitizer.html\">LeakSanitizer in Clang</a></li>\n<li><a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">MemorySanitizer in Clang</a></li>\n<li><a href=\"https://llvm.org/docs/MemTagSanitizer.html\">MemTagSanitizer in LLVM</a></li>\n<li><a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\">ThreadSanitizer in Clang</a></li>\n</ul>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../compiler-flags/report-time.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../compiler-flags/self-profile.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../compiler-flags/report-time.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../compiler-flags/self-profile.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:15:03.527Z"
}