{
	"title": "CursorMutKey in std::collections::btree_map - Rust",
	"url": "https://doc.rust-lang.org/stable/std/collections/btree_map/struct.CursorMutKey.html",
	"markdown": "# CursorMutKey in std::collections::btree\\_map - Rust\n\n```\npub struct CursorMutKey<'a, K, V, A = Global>where\n    K: 'a,\n    V: 'a,{ /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nExpand description\n\nA cursor over a `BTreeMap` with editing operations, and which allows mutating the key of elements.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the map during iteration. This is because the lifetime of its yielded references is tied to its own lifetime, instead of just the underlying map. This means cursors cannot yield multiple elements at once.\n\nCursors always point to a gap between two elements in the map, and can operate on the two immediately adjacent elements.\n\nA `CursorMutKey` is created from a [`CursorMut`](struct.CursorMut.html \"struct std::collections::btree_map::CursorMut\") with the [`CursorMut::with_mutable_key`](about:blank/struct.CursorMut.html#method.with_mutable_key \"method std::collections::btree_map::CursorMut::with_mutable_key\") method.\n\n## [Â§](#safety)Safety\n\nSince this cursor allows mutating keys, you must ensure that the `BTreeMap` invariants are maintained. Specifically:\n\n-   The key of the newly inserted element must be unique in the tree.\n-   All keys in the tree must remain in sorted order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3010)[Â§](#impl-CursorMutKey%3C'a,+K,+V,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3017)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nAdvances the cursor to the next gap, returning the key and value of the element that it moved over.\n\nIf the cursor is already at the end of the map then `None` is returned and the cursor is not moved.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3042)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nAdvances the cursor to the previous gap, returning the key and value of the element that it moved over.\n\nIf the cursor is already at the start of the map then `None` is returned and the cursor is not moved.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3066)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nReturns a reference to the key and value of the next element without moving the cursor.\n\nIf the cursor is at the end of the map then `None` is returned\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3078)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nReturns a reference to the key and value of the previous element without moving the cursor.\n\nIf the cursor is at the start of the map then `None` is returned.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3092)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nReturns a read-only cursor pointing to the same location as the `CursorMutKey`.\n\nThe lifetime of the returned `Cursor` is bound to that of the `CursorMutKey`, which means it cannot outlive the `CursorMutKey` and that the `CursorMutKey` is frozen for the lifetime of the `Cursor`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3102)[Â§](#impl-CursorMutKey%3C'a,+K,+V,+A%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3117)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nInserts a new key-value pair into the map in the gap that the cursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap before the newly inserted element.\n\n##### [Â§](#safety-1)Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained. Specifically:\n\n-   The key of the newly inserted element must be unique in the tree.\n-   All keys in the tree must remain in sorted order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3160)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nInserts a new key-value pair into the map in the gap that the cursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the newly inserted element.\n\n##### [Â§](#safety-2)Safety\n\nYou must ensure that the `BTreeMap` invariants are maintained. Specifically:\n\n-   The key of the newly inserted element must be unique in the tree.\n-   All keys in the tree must remain in sorted order.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3203)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nInserts a new key-value pair into the map in the gap that the cursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap before the newly inserted element.\n\nIf the inserted key is not greater than the key before the cursor (if any), or if it not less than the key after the cursor (if any), then an [`UnorderedKeyError`](struct.UnorderedKeyError.html \"struct std::collections::btree_map::UnorderedKeyError\") is returned since this would invalidate the [`Ord`](../../cmp/trait.Ord.html \"trait std::cmp::Ord\") invariant between the keys of the map.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3231)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nInserts a new key-value pair into the map in the gap that the cursor is currently pointing to.\n\nAfter the insertion the cursor will be pointing at the gap after the newly inserted element.\n\nIf the inserted key is not greater than the key before the cursor (if any), or if it not less than the key after the cursor (if any), then an [`UnorderedKeyError`](struct.UnorderedKeyError.html \"struct std::collections::btree_map::UnorderedKeyError\") is returned since this would invalidate the [`Ord`](../../cmp/trait.Ord.html \"trait std::cmp::Ord\") invariant between the keys of the map.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3253)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nRemoves the next element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is unchanged (before the removed element).\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3282)\n\nðŸ”¬This is a nightly-only experimental API. (`btree_cursors`Â [#107540](https://github.com/rust-lang/rust/issues/107540))\n\nRemoves the precending element from the `BTreeMap`.\n\nThe element that was removed is returned. The cursor position is unchanged (after the removed element).\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A cursor over a `BTreeMap` with editing operations, and which allows mutating the key of elements.\"><title>CursorMutKey in std::collections::btree_map - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">CursorMutKey</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">CursorMutKey</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_cursor\">as_cursor</a></li><li><a href=\"#method.insert_after\">insert_after</a></li><li><a href=\"#method.insert_after_unchecked\">insert_after_unchecked</a></li><li><a href=\"#method.insert_before\">insert_before</a></li><li><a href=\"#method.insert_before_unchecked\">insert_before_unchecked</a></li><li><a href=\"#method.next\">next</a></li><li><a href=\"#method.peek_next\">peek_next</a></li><li><a href=\"#method.peek_prev\">peek_prev</a></li><li><a href=\"#method.prev\">prev</a></li><li><a href=\"#method.remove_next\">remove_next</a></li><li><a href=\"#method.remove_prev\">remove_prev</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-CursorMutKey%3C'_,+K,+V,+A%3E\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-UnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-CursorMutKey%3C'a,+K,+V,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-CursorMutKey%3C'a,+K,+V,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-CursorMutKey%3C'a,+K,+V,+A%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-CursorMutKey%3C'a,+K,+V,+A%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::collections::btree_map</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BTreeMap.html\">BTreeMap</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.CursorMut.html\">CursorMut</a></li><li><a href=\"struct.CursorMutKey.html\">CursorMutKey</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.IntoKeys.html\">IntoKeys</a></li><li><a href=\"struct.IntoValues.html\">IntoValues</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.Keys.html\">Keys</a></li><li><a href=\"struct.OccupiedEntry.html\">OccupiedEntry</a></li><li><a href=\"struct.OccupiedError.html\">OccupiedError</a></li><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeMut.html\">RangeMut</a></li><li><a href=\"struct.UnorderedKeyError.html\">UnorderedKeyError</a></li><li><a href=\"struct.VacantEntry.html\">VacantEntry</a></li><li><a href=\"struct.Values.html\">Values</a></li><li><a href=\"struct.ValuesMut.html\">ValuesMut</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Entry.html\">Entry</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">collections</a>::<wbr><a href=\"index.html\">btree_map</a>::<wbr><a class=\"struct\" href=\"#\">CursorMutKey</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2858-2863\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct CursorMutKey&lt;'a, K, V, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    K: 'a,\n    V: 'a,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A cursor over a <code>BTreeMap</code> with editing operations, and which allows\nmutating the key of elements.</p>\n<p>A <code>Cursor</code> is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the map during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying map. This means\ncursors cannot yield multiple elements at once.</p>\n<p>Cursors always point to a gap between two elements in the map, and can\noperate on the two immediately adjacent elements.</p>\n<p>A <code>CursorMutKey</code> is created from a <a href=\"struct.CursorMut.html\" title=\"struct std::collections::btree_map::CursorMut\"><code>CursorMut</code></a> with the\n<a href=\"struct.CursorMut.html#method.with_mutable_key\" title=\"method std::collections::btree_map::CursorMut::with_mutable_key\"><code>CursorMut::with_mutable_key</code></a> method.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h2>\n<p>Since this cursor allows mutating keys, you must ensure that the <code>BTreeMap</code>\ninvariants are maintained. Specifically:</p>\n<ul>\n<li>The key of the newly inserted element must be unique in the tree.</li>\n<li>All keys in the tree must remain in sorted order.</li>\n</ul>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3010\">source</a><a href=\"#impl-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3017\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Advances the cursor to the next gap, returning the key and value of the\nelement that it moved over.</p>\n<p>If the cursor is already at the end of the map then <code>None</code> is returned\nand the cursor is not moved.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.prev\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3042\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.prev\" class=\"fn\">prev</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Advances the cursor to the previous gap, returning the key and value of\nthe element that it moved over.</p>\n<p>If the cursor is already at the start of the map then <code>None</code> is returned\nand the cursor is not moved.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek_next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3066\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peek_next\" class=\"fn\">peek_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the key and value of the next element without\nmoving the cursor.</p>\n<p>If the cursor is at the end of the map then <code>None</code> is returned</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peek_prev\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3078\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.peek_prev\" class=\"fn\">peek_prev</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut K</a>, <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the key and value of the previous element\nwithout moving the cursor.</p>\n<p>If the cursor is at the start of the map then <code>None</code> is returned.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_cursor\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3092\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_cursor\" class=\"fn\">as_cursor</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::collections::btree_map::Cursor\">Cursor</a>&lt;'_, K, V&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a read-only cursor pointing to the same location as the\n<code>CursorMutKey</code>.</p>\n<p>The lifetime of the returned <code>Cursor</code> is bound to that of the\n<code>CursorMutKey</code>, which means it cannot outlive the <code>CursorMutKey</code> and that the\n<code>CursorMutKey</code> is frozen for the lifetime of the <code>Cursor</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CursorMutKey%3C'a,+K,+V,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3102\">source</a><a href=\"#impl-CursorMutKey%3C'a,+K,+V,+A%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_after_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3117\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.insert_after_unchecked\" class=\"fn\">insert_after_unchecked</a>(&amp;mut self, key: K, value: V)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.</p>\n<p>After the insertion the cursor will be pointing at the gap before the\nnewly inserted element.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">Â§</a>Safety</h5>\n<p>You must ensure that the <code>BTreeMap</code> invariants are maintained.\nSpecifically:</p>\n<ul>\n<li>The key of the newly inserted element must be unique in the tree.</li>\n<li>All keys in the tree must remain in sorted order.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_before_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3160\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.insert_before_unchecked\" class=\"fn\">insert_before_unchecked</a>(&amp;mut self, key: K, value: V)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.</p>\n<p>After the insertion the cursor will be pointing at the gap after the\nnewly inserted element.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">Â§</a>Safety</h5>\n<p>You must ensure that the <code>BTreeMap</code> invariants are maintained.\nSpecifically:</p>\n<ul>\n<li>The key of the newly inserted element must be unique in the tree.</li>\n<li>All keys in the tree must remain in sorted order.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_after\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3203\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.insert_after\" class=\"fn\">insert_after</a>(\n    &amp;mut self,\n    key: K,\n    value: V,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.UnorderedKeyError.html\" title=\"struct std::collections::btree_map::UnorderedKeyError\">UnorderedKeyError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.</p>\n<p>After the insertion the cursor will be pointing at the gap before the\nnewly inserted element.</p>\n<p>If the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an <a href=\"struct.UnorderedKeyError.html\" title=\"struct std::collections::btree_map::UnorderedKeyError\"><code>UnorderedKeyError</code></a> is returned since this would\ninvalidate the <a href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> invariant between the keys of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert_before\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3231\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.insert_before\" class=\"fn\">insert_before</a>(\n    &amp;mut self,\n    key: K,\n    value: V,\n) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.UnorderedKeyError.html\" title=\"struct std::collections::btree_map::UnorderedKeyError\">UnorderedKeyError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Inserts a new key-value pair into the map in the gap that the\ncursor is currently pointing to.</p>\n<p>After the insertion the cursor will be pointing at the gap after the\nnewly inserted element.</p>\n<p>If the inserted key is not greater than the key before the cursor\n(if any), or if it not less than the key after the cursor (if any),\nthen an <a href=\"struct.UnorderedKeyError.html\" title=\"struct std::collections::btree_map::UnorderedKeyError\"><code>UnorderedKeyError</code></a> is returned since this would\ninvalidate the <a href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> invariant between the keys of the map.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3253\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.remove_next\" class=\"fn\">remove_next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.tuple.html\">(K, V)</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the next element from the <code>BTreeMap</code>.</p>\n<p>The element that was removed is returned. The cursor position is\nunchanged (before the removed element).</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_prev\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#3282\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.remove_prev\" class=\"fn\">remove_prev</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.tuple.html\">(K, V)</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>btree_cursors</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/107540\">#107540</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the precending element from the <code>BTreeMap</code>.</p>\n<p>The element that was removed is returned. The cursor position is\nunchanged (after the removed element).</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-CursorMutKey%3C'_,+K,+V,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2872\">source</a><a href=\"#impl-Debug-for-CursorMutKey%3C'_,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'_, K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2873\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    K: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    V: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    K: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    K: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    V: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;</h3></section><section id=\"impl-UnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-CursorMutKey%3C'a,+K,+V,+A%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, K, V, A = <a class=\"struct\" href=\"../../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt; !<a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.CursorMutKey.html\" title=\"struct std::collections::btree_map::CursorMutKey\">CursorMutKey</a>&lt;'a, K, V, A&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:00.663Z"
}