{
	"title": "StdFloat in std::simd - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/trait.StdFloat.html",
	"markdown": "# StdFloat in std::simd - Rust\n\n```\npub trait StdFloat: Sealed + Sized {\nShow 15 methods    // Required methods\n    fn sin(self) -> Self;\n    fn cos(self) -> Self;\n    fn exp(self) -> Self;\n    fn exp2(self) -> Self;\n    fn ln(self) -> Self;\n    fn log2(self) -> Self;\n    fn log10(self) -> Self;\n    fn fract(self) -> Self;\n\n    // Provided methods\n    fn mul_add(self, a: Self, b: Self) -> Self { ... }\n    fn sqrt(self) -> Self { ... }\n    fn log(self, base: Self) -> Self { ... }\n    fn ceil(self) -> Self { ... }\n    fn floor(self) -> Self { ... }\n    fn round(self) -> Self { ... }\n    fn trunc(self) -> Self { ... }\n}\n```\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nThis trait provides a possibly-temporary implementation of float functions that may, in the absence of hardware support, canonicalize to calling an operating system’s `math.h` dynamically-loaded library (also known as a shared object). As these conditionally require runtime support, they should only appear in binaries built assuming OS support: `std`.\n\nHowever, there is no reason SIMD types, in general, need OS support, as for many architectures an embedded binary may simply configure that support itself. This means these types must be visible in `core` but have these functions available in `std`.\n\n[`f32`](../primitive.f32.html \"primitive f32\") and [`f64`](../primitive.f64.html \"primitive f64\") achieve a similar trick by using “lang items”, but due to compiler limitations, it is harder to implement this approach for abstract data types like [`Simd`](prelude/struct.Simd.html \"struct std::simd::prelude::Simd\"). From that need, this trait is born.\n\nIt is possible this trait will be replaced in some manner in the future, when either the compiler or its supporting runtime functions are improved. For now this trait is available to permit experimentation with SIMD float operations that may lack hardware support, such as `mul_add`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#70)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the sine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#75)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the cosine of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#80)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base e) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#85)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the exponential (base 2) of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#90)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the natural logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#103)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-2 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#108)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the base-10 logarithm of the value in the equivalently-indexed element in `self`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#140)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point’s fractional value, with its integer part removed.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nElementwise fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.\n\nUsing `mul_add` _may_ be more performant than an unfused multiply-add if the target architecture has a dedicated `fma` CPU instruction. However, this is not always true, and will be heavily dependent on designing algorithms with specific target hardware in mind.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the square root value of the equivalently-indexed element in `self`\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nProduces a vector where every element has the logarithm with respect to an arbitrary in the equivalently-indexed elements in `self` and `base`.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the smallest integer greater than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the largest integer value less than or equal to each element.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRounds to the nearest integer value. Ties round toward zero.\n\n[source](about:blank/src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the floating point’s integer value, with its fractional part removed.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"This trait provides a possibly-temporary implementation of float functions that may, in the absence of hardware support, canonicalize to calling an operating system’s `math.h` dynamically-loaded library (also known as a shared object). As these conditionally require runtime support, they should only appear in binaries built assuming OS support: `std`.\"><title>StdFloat in std::simd - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">StdFloat</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">StdFloat</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.cos\">cos</a></li><li><a href=\"#tymethod.exp\">exp</a></li><li><a href=\"#tymethod.exp2\">exp2</a></li><li><a href=\"#tymethod.fract\">fract</a></li><li><a href=\"#tymethod.ln\">ln</a></li><li><a href=\"#tymethod.log10\">log10</a></li><li><a href=\"#tymethod.log2\">log2</a></li><li><a href=\"#tymethod.sin\">sin</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.ceil\">ceil</a></li><li><a href=\"#method.floor\">floor</a></li><li><a href=\"#method.log\">log</a></li><li><a href=\"#method.mul_add\">mul_add</a></li><li><a href=\"#method.round\">round</a></li><li><a href=\"#method.sqrt\">sqrt</a></li><li><a href=\"#method.trunc\">trunc</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::simd</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"ptr/index.html\">ptr</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.LaneCount.html\">LaneCount</a></li><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.MaskElement.html\">MaskElement</a></li><li><a href=\"trait.SimdCast.html\">SimdCast</a></li><li><a href=\"trait.SimdElement.html\">SimdElement</a></li><li><a href=\"trait.StdFloat.html\">StdFloat</a></li><li><a href=\"trait.SupportedLaneCount.html\">SupportedLaneCount</a></li><li><a href=\"trait.Swizzle.html\">Swizzle</a></li><li><a href=\"trait.ToBytes.html\">ToBytes</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">simd</a>::<wbr><a class=\"trait\" href=\"#\">StdFloat</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#45-141\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait StdFloat: Sealed + <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 15 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; Self;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; Self;\n\n    // Provided methods\n    fn <a href=\"#method.mul_add\" class=\"fn\">mul_add</a>(self, a: Self, b: Self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.log\" class=\"fn\">log</a>(self, base: Self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.floor\" class=\"fn\">floor</a>(self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.round\" class=\"fn\">round</a>(self) -&gt; Self { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; Self { ... }\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>This trait provides a possibly-temporary implementation of float functions\nthat may, in the absence of hardware support, canonicalize to calling an\noperating system’s <code>math.h</code> dynamically-loaded library (also known as a\nshared object). As these conditionally require runtime support, they\nshould only appear in binaries built assuming OS support: <code>std</code>.</p>\n<p>However, there is no reason SIMD types, in general, need OS support,\nas for many architectures an embedded binary may simply configure that\nsupport itself. This means these types must be visible in <code>core</code>\nbut have these functions available in <code>std</code>.</p>\n<p><a href=\"../primitive.f32.html\" title=\"primitive f32\"><code>f32</code></a> and <a href=\"../primitive.f64.html\" title=\"primitive f64\"><code>f64</code></a> achieve a similar trick by using “lang items”, but\ndue to compiler limitations, it is harder to implement this approach for\nabstract data types like <a href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\"><code>Simd</code></a>. From that need, this trait is born.</p>\n<p>It is possible this trait will be replaced in some manner in the future,\nwhen either the compiler or its supporting runtime functions are improved.\nFor now this trait is available to permit experimentation with SIMD float\noperations that may lack hardware support, such as <code>mul_add</code>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.sin\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#70\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sin\" class=\"fn\">sin</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the sine of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cos\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#75\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.cos\" class=\"fn\">cos</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the cosine of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.exp\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#80\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.exp\" class=\"fn\">exp</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the exponential (base e) of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.exp2\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#85\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.exp2\" class=\"fn\">exp2</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the exponential (base 2) of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.ln\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#90\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.ln\" class=\"fn\">ln</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the natural logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.log2\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#103\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.log2\" class=\"fn\">log2</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the base-2 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.log10\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#108\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.log10\" class=\"fn\">log10</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the base-10 logarithm of the value\nin the equivalently-indexed element in <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fract\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#140\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fract\" class=\"fn\">fract</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the floating point’s fractional value, with its integer part removed.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.mul_add\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#55-57\">source</a><h4 class=\"code-header\">fn <a href=\"#method.mul_add\" class=\"fn\">mul_add</a>(self, a: Self, b: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Elementwise fused multiply-add. Computes <code>(self * a) + b</code> with only one rounding error,\nyielding a more accurate result than an unfused multiply-add.</p>\n<p>Using <code>mul_add</code> <em>may</em> be more performant than an unfused multiply-add if the target\narchitecture has a dedicated <code>fma</code> CPU instruction.  However, this is not always\ntrue, and will be heavily dependent on designing algorithms with specific target\nhardware in mind.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sqrt\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#63-65\">source</a><h4 class=\"code-header\">fn <a href=\"#method.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the square root value\nof the equivalently-indexed element in <code>self</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.log\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#96-98\">source</a><h4 class=\"code-header\">fn <a href=\"#method.log\" class=\"fn\">log</a>(self, base: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Produces a vector where every element has the logarithm with respect to an arbitrary\nin the equivalently-indexed elements in <code>self</code> and <code>base</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ceil\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#113-115\">source</a><h4 class=\"code-header\">fn <a href=\"#method.ceil\" class=\"fn\">ceil</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest integer greater than or equal to each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.floor\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#120-122\">source</a><h4 class=\"code-header\">fn <a href=\"#method.floor\" class=\"fn\">floor</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the largest integer value less than or equal to each element.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.round\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#127-129\">source</a><h4 class=\"code-header\">fn <a href=\"#method.round\" class=\"fn\">round</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Rounds to the nearest integer value. Ties round toward zero.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trunc\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#134-136\">source</a><h4 class=\"code-header\">fn <a href=\"#method.trunc\" class=\"fn\">trunc</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the floating point’s integer value, with its fractional part removed.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-StdFloat-for-Simd%3Cf32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#impl-StdFloat-for-Simd%3Cf32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.StdFloat.html\" title=\"trait std::simd::StdFloat\">StdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f32.html\">f32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section><section id=\"impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html#199-207\">source</a><a href=\"#impl-StdFloat-for-Simd%3Cf64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.StdFloat.html\" title=\"trait std::simd::StdFloat\">StdFloat</a> for <a class=\"struct\" href=\"prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../primitive.f64.html\">f64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></div><script src=\"../../trait.impl/std/std_float/trait.StdFloat.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:17.162Z"
}