{
	"title": "DerefMut in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.DerefMut.html",
	"markdown": "# DerefMut in std::ops - Rust\n\n## Trait [std](../index.html)::[ops](index.html)::[DerefMut](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#264) ·\n\n```\npub trait DerefMut: Deref {\n    // Required method\n    fn deref_mut(&mut self) -> &mut Self::Target;\n}\n```\n\nExpand description\n\nUsed for mutable dereferencing operations, like in `*v = 1;`.\n\nIn addition to being used for explicit dereferencing operations with the (unary) `*` operator in mutable contexts, `DerefMut` is also used implicitly by the compiler in many circumstances. This mechanism is called [“mutable deref coercion”](#mutable-deref-coercion). In immutable contexts, [`Deref`](trait.Deref.html \"trait std::ops::Deref\") is used.\n\n**Warning:** Deref coercion is a powerful language feature which has far-reaching implications for every type that implements `DerefMut`. The compiler will silently insert calls to `DerefMut::deref_mut`. For this reason, one should be careful about implementing `DerefMut` and only do so when mutable deref coercion is desirable. See [the `Deref` docs](about:blank/trait.Deref.html#when-to-implement-deref-or-derefmut \"trait std::ops::Deref\") for advice on when this is typically desirable or undesirable.\n\nTypes that implement `DerefMut` or `Deref` are often called “smart pointers” and the mechanism of deref coercion has been specifically designed to facilitate the pointer-like behaviour that name suggests. Often, the purpose of a “smart pointer” type is to change the ownership semantics of a contained value (for example, [`Rc`](../../alloc/rc/struct.Rc.html) or [`Cow`](../../alloc/borrow/enum.Cow.html)) or the storage semantics of a contained value (for example, [`Box`](../../alloc/boxed/struct.Box.html)).\n\n## [§](#mutable-deref-coercion)Mutable deref coercion\n\nIf `T` implements `DerefMut<Target = U>`, and `v` is a value of type `T`, then:\n\n-   In mutable contexts, `*v` (where `T` is neither a reference nor a raw pointer) is equivalent to `*DerefMut::deref_mut(&mut v)`.\n-   Values of type `&mut T` are coerced to values of type `&mut U`\n-   `T` implicitly implements all the (mutable) methods of the type `U`.\n\nFor more details, visit [the chapter in _The Rust Programming Language_](../../book/ch15-02-deref.html) as well as the reference sections on [the dereference operator](about:blank/reference/expressions/operator-expr.html#the-dereference-operator), [method resolution](../../reference/expressions/method-call-expr.html) and [type coercions](../../reference/type-coercions.html).\n\n## [§](#fallibility)Fallibility\n\n**This trait’s method should never unexpectedly fail**. Deref coercion means the compiler will often insert calls to `DerefMut::deref_mut` implicitly. Failure during dereferencing can be extremely confusing when `DerefMut` is invoked implicitly. In the majority of uses it should be infallible, though it may be acceptable to panic if the type is misused through programmer error, for example.\n\nHowever, infallibility is not enforced and therefore not guaranteed. As such, `unsafe` code should not rely on infallibility in general for soundness.\n\n## [§](#examples)Examples\n\nA struct with a single field which is modifiable by dereferencing the struct.\n\n```\nuse std::ops::{Deref, DerefMut};\n\nstruct DerefMutExample<T> {\n    value: T\n}\n\nimpl<T> Deref for DerefMutExample<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target {\n        &self.value\n    }\n}\n\nimpl<T> DerefMut for DerefMutExample<T> {\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        &mut self.value\n    }\n}\n\nlet mut x = DerefMutExample { value: 'a' };\n*x = 'b';\nassert_eq!('b', x.value);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BDeref,+DerefMut%7D;%0A++++%0A++++struct+DerefMutExample%3CT%3E+%7B%0A++++++++value:+T%0A++++%7D%0A++++%0A++++impl%3CT%3E+Deref+for+DerefMutExample%3CT%3E+%7B%0A++++++++type+Target+=+T;%0A++++%0A++++++++fn+deref(%26self)+-%3E+%26Self::Target+%7B%0A++++++++++++%26self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl%3CT%3E+DerefMut+for+DerefMutExample%3CT%3E+%7B%0A++++++++fn+deref_mut(%26mut+self)+-%3E+%26mut+Self::Target+%7B%0A++++++++++++%26mut+self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+DerefMutExample+%7B+value:+%27a%27+%7D;%0A++++*x+=+%27b%27;%0A++++assert_eq!(%27b%27,+x.value);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#268)\n\nMutably dereferences the value.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Used for mutable dereferencing operations, like in `*v = 1;`.\"><title>DerefMut in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">DerefMut</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">DerefMut</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.deref_mut\">deref_mut</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">DerefMut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#264\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait DerefMut: <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> {\n    // Required method\n    fn <a href=\"#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Used for mutable dereferencing operations, like in <code>*v = 1;</code>.</p>\n<p>In addition to being used for explicit dereferencing operations with the\n(unary) <code>*</code> operator in mutable contexts, <code>DerefMut</code> is also used implicitly\nby the compiler in many circumstances. This mechanism is called\n<a href=\"#mutable-deref-coercion\">“mutable deref coercion”</a>. In immutable contexts, <a href=\"trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a> is used.</p>\n<p><strong>Warning:</strong> Deref coercion is a powerful language feature which has\nfar-reaching implications for every type that implements <code>DerefMut</code>. The\ncompiler will silently insert calls to <code>DerefMut::deref_mut</code>. For this\nreason, one should be careful about implementing <code>DerefMut</code> and only do so\nwhen mutable deref coercion is desirable. See <a href=\"trait.Deref.html#when-to-implement-deref-or-derefmut\" title=\"trait std::ops::Deref\">the <code>Deref</code> docs</a>\nfor advice on when this is typically desirable or undesirable.</p>\n<p>Types that implement <code>DerefMut</code> or <code>Deref</code> are often called “smart\npointers” and the mechanism of deref coercion has been specifically designed\nto facilitate the pointer-like behaviour that name suggests. Often, the\npurpose of a “smart pointer” type is to change the ownership semantics\nof a contained value (for example, <a href=\"../../alloc/rc/struct.Rc.html\"><code>Rc</code></a> or <a href=\"../../alloc/borrow/enum.Cow.html\"><code>Cow</code></a>) or the\nstorage semantics of a contained value (for example, <a href=\"../../alloc/boxed/struct.Box.html\"><code>Box</code></a>).</p>\n<h2 id=\"mutable-deref-coercion\"><a class=\"doc-anchor\" href=\"#mutable-deref-coercion\">§</a>Mutable deref coercion</h2>\n<p>If <code>T</code> implements <code>DerefMut&lt;Target = U&gt;</code>, and <code>v</code> is a value of type <code>T</code>,\nthen:</p>\n<ul>\n<li>In mutable contexts, <code>*v</code> (where <code>T</code> is neither a reference nor a raw pointer)\nis equivalent to <code>*DerefMut::deref_mut(&amp;mut v)</code>.</li>\n<li>Values of type <code>&amp;mut T</code> are coerced to values of type <code>&amp;mut U</code></li>\n<li><code>T</code> implicitly implements all the (mutable) methods of the type <code>U</code>.</li>\n</ul>\n<p>For more details, visit <a href=\"../../book/ch15-02-deref.html\">the chapter in <em>The Rust Programming Language</em></a>\nas well as the reference sections on <a href=\"../../reference/expressions/operator-expr.html#the-dereference-operator\">the dereference operator</a>,\n<a href=\"../../reference/expressions/method-call-expr.html\">method resolution</a> and <a href=\"../../reference/type-coercions.html\">type coercions</a>.</p>\n<h2 id=\"fallibility\"><a class=\"doc-anchor\" href=\"#fallibility\">§</a>Fallibility</h2>\n<p><strong>This trait’s method should never unexpectedly fail</strong>. Deref coercion means\nthe compiler will often insert calls to <code>DerefMut::deref_mut</code> implicitly.\nFailure during dereferencing can be extremely confusing when <code>DerefMut</code> is\ninvoked implicitly. In the majority of uses it should be infallible, though\nit may be acceptable to panic if the type is misused through programmer\nerror, for example.</p>\n<p>However, infallibility is not enforced and therefore not guaranteed.\nAs such, <code>unsafe</code> code should not rely on infallibility in general for\nsoundness.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>A struct with a single field which is modifiable by dereferencing the\nstruct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::{Deref, DerefMut};\n\n<span class=\"kw\">struct </span>DerefMutExample&lt;T&gt; {\n    value: T\n}\n\n<span class=\"kw\">impl</span>&lt;T&gt; Deref <span class=\"kw\">for </span>DerefMutExample&lt;T&gt; {\n    <span class=\"kw\">type </span>Target = T;\n\n    <span class=\"kw\">fn </span>deref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Target {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.value\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;T&gt; DerefMut <span class=\"kw\">for </span>DerefMutExample&lt;T&gt; {\n    <span class=\"kw\">fn </span>deref_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Target {\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.value\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = DerefMutExample { value: <span class=\"string\">'a' </span>};\n<span class=\"kw-2\">*</span>x = <span class=\"string\">'b'</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">'b'</span>, x.value);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ops::%7BDeref,+DerefMut%7D;%0A++++%0A++++struct+DerefMutExample%3CT%3E+%7B%0A++++++++value:+T%0A++++%7D%0A++++%0A++++impl%3CT%3E+Deref+for+DerefMutExample%3CT%3E+%7B%0A++++++++type+Target+=+T;%0A++++%0A++++++++fn+deref(%26self)+-%3E+%26Self::Target+%7B%0A++++++++++++%26self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl%3CT%3E+DerefMut+for+DerefMutExample%3CT%3E+%7B%0A++++++++fn+deref_mut(%26mut+self)+-%3E+%26mut+Self::Target+%7B%0A++++++++++++%26mut+self.value%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+x+=+DerefMutExample+%7B+value:+'a'+%7D;%0A++++*x+=+'b';%0A++++assert_eq!('b',+x.value);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.deref_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#268\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a></h4></section></summary><div class=\"docblock\"><p>Mutably dereferences the value.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-DerefMut-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#592-597\">source</a></span><a href=\"#impl-DerefMut-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-DerefMut-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.68.0\">1.68.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1797-1802\">source</a></span><a href=\"#impl-DerefMut-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-DerefMut-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2492\">source</a></span><a href=\"#impl-DerefMut-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-DerefMut-for-IoSliceMut%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1348-1353\">source</a></span><a href=\"#impl-DerefMut-for-IoSliceMut%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'a&gt;</h3></section><section id=\"impl-DerefMut-for-VaList%3C'a,+'f%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/mod.rs.html#463\">source</a><a href=\"#impl-DerefMut-for-VaList%3C'a,+'f%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'f&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../ffi/struct.VaList.html\" title=\"struct std::ffi::VaList\">VaList</a>&lt;'a, 'f&gt;<div class=\"where\">where\n    'f: 'a,</div></h3></section><section id=\"impl-DerefMut-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1681\">source</a></span><a href=\"#impl-DerefMut-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-DerefMut-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#161\">source</a></span><a href=\"#impl-DerefMut-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-%26mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/deref.rs.html#272\">source</a></span><a href=\"#impl-DerefMut-for-%26mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-ThinBox%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed/thin.rs.html#154\">source</a><a href=\"#impl-DerefMut-for-ThinBox%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../boxed/struct.ThinBox.html\" title=\"struct std::boxed::ThinBox\">ThinBox</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-RefMut%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1857\">source</a></span><a href=\"#impl-DerefMut-for-RefMut%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../cell/struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-ManuallyDrop%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/manually_drop.rs.html#158\">source</a></span><a href=\"#impl-DerefMut-for-ManuallyDrop%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../mem/struct.ManuallyDrop.html\" title=\"struct std::mem::ManuallyDrop\">ManuallyDrop</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-AssertUnwindSafe%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#260\">source</a></span><a href=\"#impl-DerefMut-for-AssertUnwindSafe%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../panic/struct.AssertUnwindSafe.html\" title=\"struct std::panic::AssertUnwindSafe\">AssertUnwindSafe</a>&lt;T&gt;</h3></section><section id=\"impl-DerefMut-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3629\">source</a><a href=\"#impl-DerefMut-for-UniqueRc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../rc/struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-DerefMut-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1981\">source</a></span><a href=\"#impl-DerefMut-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefMut-for-PeekMut%3C'_,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#337\">source</a></span><a href=\"#impl-DerefMut-for-PeekMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../collections/binary_heap/struct.PeekMut.html\" title=\"struct std::collections::binary_heap::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2820\">source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-DerefMut-for-MappedMutexGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/mutex.rs.html#655-659\">source</a><a href=\"#impl-DerefMut-for-MappedMutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../sync/struct.MappedMutexGuard.html\" title=\"struct std::sync::MappedMutexGuard\">MappedMutexGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-DerefMut-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#703-709\">source</a><a href=\"#impl-DerefMut-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../sync/struct.MappedRwLockWriteGuard.html\" title=\"struct std::sync::MappedRwLockWriteGuard\">MappedRwLockWriteGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-DerefMut-for-MutexGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/mutex.rs.html#539-543\">source</a></span><a href=\"#impl-DerefMut-for-MutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../sync/struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-DerefMut-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#673-678\">source</a></span><a href=\"#impl-DerefMut-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"../sync/struct.RwLockWriteGuard.html\" title=\"struct std::sync::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'_, T&gt;</h3></section></div><script src=\"../../trait.impl/core/ops/deref/trait.DerefMut.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:18.314Z"
}