{
	"title": "FileExt in std::os::wasi::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/wasi/fs/trait.FileExt.html",
	"markdown": "# FileExt in std::os::wasi::fs - Rust\n\n```\npub trait FileExt {\nShow 16 methods    // Required methods\n    fn read_vectored_at(\n        &self,\n        bufs: &mut [IoSliceMut<'_>],\n        offset: u64,\n    ) -> Result<usize>;\n    fn write_vectored_at(\n        &self,\n        bufs: &[IoSlice<'_>],\n        offset: u64,\n    ) -> Result<usize>;\n    fn tell(&self) -> Result<u64>;\n    fn fdstat_set_flags(&self, flags: u16) -> Result<()>;\n    fn fdstat_set_rights(&self, rights: u64, inheriting: u64) -> Result<()>;\n    fn advise(&self, offset: u64, len: u64, advice: u8) -> Result<()>;\n    fn allocate(&self, offset: u64, len: u64) -> Result<()>;\n    fn create_directory<P: AsRef<Path>>(&self, dir: P) -> Result<()>;\n    fn read_link<P: AsRef<Path>>(&self, path: P) -> Result<PathBuf>;\n    fn metadata_at<P: AsRef<Path>>(\n        &self,\n        lookup_flags: u32,\n        path: P,\n    ) -> Result<Metadata>;\n    fn remove_file<P: AsRef<Path>>(&self, path: P) -> Result<()>;\n    fn remove_directory<P: AsRef<Path>>(&self, path: P) -> Result<()>;\n\n    // Provided methods\n    fn read_at(&self, buf: &mut [u8], offset: u64) -> Result<usize> { ... }\n    fn read_exact_at(&self, buf: &mut [u8], offset: u64) -> Result<()> { ... }\n    fn write_at(&self, buf: &[u8], offset: u64) -> Result<usize> { ... }\n    fn write_all_at(&self, buf: &[u8], offset: u64) -> Result<()> { ... }\n}\n```\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAvailable on **WASI** only.\n\nExpand description\n\nWASI-specific extensions to [`File`](../../../fs/struct.File.html \"struct std::fs::File\").\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#46)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReads a number of bytes starting from a given offset.\n\nReturns the number of bytes read.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nNote that similar to [`File::read_vectored`](about:blank/fs/struct.File.html#method.read_vectored \"method std::fs::File::read_vectored\"), it is not an error to return with a short read.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#125)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nWrites a number of bytes starting from a given offset.\n\nReturns the number of bytes written.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nWhen writing beyond the end of the file, the file is appropriately extended and the intermediate bytes are initialized with the value 0.\n\nNote that similar to [`File::write_vectored`](about:blank/fs/struct.File.html#method.write_vectored \"method std::fs::File::write_vectored\"), it is not an error to return a short write.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#170)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the current position within the file.\n\nThis corresponds to the `fd_tell` syscall and is similar to `seek` where you offset 0 bytes from the current position.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#176)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAdjust the flags associated with this file.\n\nThis corresponds to the `fd_fdstat_set_flags` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#182)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAdjust the rights associated with this file.\n\nThis corresponds to the `fd_fdstat_set_rights` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#188)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nProvide file advisory information on a file descriptor.\n\nThis corresponds to the `fd_advise` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#194)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nForce the allocation of space in a file.\n\nThis corresponds to the `fd_allocate` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#200)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nCreate a directory.\n\nThis corresponds to the `path_create_directory` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#206)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nRead the contents of a symbolic link.\n\nThis corresponds to the `path_readlink` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#212)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturn the attributes of a file or directory.\n\nThis corresponds to the `path_filestat_get` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#218)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nUnlink a file.\n\nThis corresponds to the `path_unlink_file` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#224)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nRemove a directory.\n\nThis corresponds to the `path_remove_directory` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#30-33)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReads a number of bytes starting from a given offset.\n\nReturns the number of bytes read.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nNote that similar to [`File::read`](about:blank/fs/struct.File.html#method.read \"method std::fs::File::read\"), it is not an error to return with a short read.\n\n1.33.0 · [source](about:blank/src/std/os/wasi/fs.rs.html#76-90)\n\nReads the exact number of byte required to fill `buf` from the given offset.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nSimilar to [`Read::read_exact`](about:blank/io/trait.Read.html#method.read_exact \"method std::io::Read::read_exact\") but uses [`read_at`](about:blank/trait.FileExt.html#method.read_at \"method std::os::wasi::fs::FileExt::read_at\") instead of `read`.\n\n##### [§](#errors)Errors\n\nIf this function encounters an error of the kind [`io::ErrorKind::Interrupted`](about:blank/io/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") then the error is ignored and the operation will continue.\n\nIf this function encounters an “end of file” before completely filling the buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`](about:blank/io/enum.ErrorKind.html#variant.UnexpectedEof \"variant std::io::ErrorKind::UnexpectedEof\"). The contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately returns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it has read, but it will never read more than would be necessary to completely fill the buffer.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#106-109)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nWrites a number of bytes starting from a given offset.\n\nReturns the number of bytes written.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nWhen writing beyond the end of the file, the file is appropriately extended and the intermediate bytes are initialized with the value 0.\n\nNote that similar to [`File::write`](about:blank/fs/struct.File.html#method.write \"method std::fs::File::write\"), it is not an error to return a short write.\n\n1.33.0 · [source](about:blank/src/std/os/wasi/fs.rs.html#148-163)\n\nAttempts to write an entire buffer starting from a given offset.\n\nThe offset is relative to the start of the file and thus independent from the current cursor.\n\nThe current file cursor is not affected by this function.\n\nThis method will continuously call [`write_at`](about:blank/trait.FileExt.html#method.write_at \"method std::os::wasi::fs::FileExt::write_at\") until there is no more data to be written or an error of non-[`io::ErrorKind::Interrupted`](about:blank/io/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind is returned. This method will not return until the entire buffer has been successfully written or such an error occurs. The first error that is not of [`io::ErrorKind::Interrupted`](about:blank/io/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind generated from this method will be returned.\n\n##### [§](#errors-1)Errors\n\nThis function will return the first error of non-[`io::ErrorKind::Interrupted`](about:blank/io/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind that [`write_at`](about:blank/trait.FileExt.html#method.write_at \"method std::os::wasi::fs::FileExt::write_at\") returns.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#234-298)[§](#impl-FileExt-for-File)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"WASI-specific extensions to `File`.\"><title>FileExt in std::os::wasi::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">FileExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">FileExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.advise\">advise</a></li><li><a href=\"#tymethod.allocate\">allocate</a></li><li><a href=\"#tymethod.create_directory\">create_directory</a></li><li><a href=\"#tymethod.fdstat_set_flags\">fdstat_set_flags</a></li><li><a href=\"#tymethod.fdstat_set_rights\">fdstat_set_rights</a></li><li><a href=\"#tymethod.metadata_at\">metadata_at</a></li><li><a href=\"#tymethod.read_link\">read_link</a></li><li><a href=\"#tymethod.read_vectored_at\">read_vectored_at</a></li><li><a href=\"#tymethod.remove_directory\">remove_directory</a></li><li><a href=\"#tymethod.remove_file\">remove_file</a></li><li><a href=\"#tymethod.tell\">tell</a></li><li><a href=\"#tymethod.write_vectored_at\">write_vectored_at</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.read_at\">read_at</a></li><li><a href=\"#method.read_exact_at\">read_exact_at</a></li><li><a href=\"#method.write_all_at\">write_all_at</a></li><li><a href=\"#method.write_at\">write_at</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::wasi::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DirEntryExt.html\">DirEntryExt</a></li><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.link.html\">link</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.symlink.html\">symlink</a></li><li><a href=\"fn.symlink_path.html\">symlink_path</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">wasi</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">FileExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../../../src/std/os/wasi/fs.rs.html#18-225\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait FileExt {\n<details class=\"toggle type-contents-toggle\"><summary class=\"hideme\"><span>Show 16 methods</span></summary>    // Required methods\n    fn <a href=\"#tymethod.read_vectored_at\" class=\"fn\">read_vectored_at</a>(\n        &amp;self,\n        bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;],\n        offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>,\n    ) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.write_vectored_at\" class=\"fn\">write_vectored_at</a>(\n        &amp;self,\n        bufs: &amp;[<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;],\n        offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>,\n    ) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.tell\" class=\"fn\">tell</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.fdstat_set_flags\" class=\"fn\">fdstat_set_flags</a>(&amp;self, flags: <a class=\"primitive\" href=\"../../../primitive.u16.html\">u16</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.fdstat_set_rights\" class=\"fn\">fdstat_set_rights</a>(&amp;self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, inheriting: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.advise\" class=\"fn\">advise</a>(&amp;self, offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, advice: <a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.allocate\" class=\"fn\">allocate</a>(&amp;self, offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.create_directory\" class=\"fn\">create_directory</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, dir: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.read_link\" class=\"fn\">read_link</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.metadata_at\" class=\"fn\">metadata_at</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(\n        &amp;self,\n        lookup_flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>,\n        path: P,\n    ) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.remove_file\" class=\"fn\">remove_file</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.remove_directory\" class=\"fn\">remove_directory</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.read_at\" class=\"fn\">read_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_exact_at\" class=\"fn\">read_exact_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_at\" class=\"fn\">write_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_all_at\" class=\"fn\">write_all_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt; { ... }\n</details>}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>WASI-specific extensions to <a href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.read_vectored_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#46\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.read_vectored_at\" class=\"fn\">read_vectored_at</a>(\n    &amp;self,\n    bufs: &amp;mut [<a class=\"struct\" href=\"../../../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;],\n    offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads a number of bytes starting from a given offset.</p>\n<p>Returns the number of bytes read.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>Note that similar to <a href=\"../../../fs/struct.File.html#method.read_vectored\" title=\"method std::fs::File::read_vectored\"><code>File::read_vectored</code></a>, it is not an error to\nreturn with a short read.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.write_vectored_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#125\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.write_vectored_at\" class=\"fn\">write_vectored_at</a>(&amp;self, bufs: &amp;[<a class=\"struct\" href=\"../../../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a number of bytes starting from a given offset.</p>\n<p>Returns the number of bytes written.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>When writing beyond the end of the file, the file is appropriately\nextended and the intermediate bytes are initialized with the value 0.</p>\n<p>Note that similar to <a href=\"../../../fs/struct.File.html#method.write_vectored\" title=\"method std::fs::File::write_vectored\"><code>File::write_vectored</code></a>, it is not an error to return a\nshort write.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.tell\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#170\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.tell\" class=\"fn\">tell</a>(&amp;self) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the current position within the file.</p>\n<p>This corresponds to the <code>fd_tell</code> syscall and is similar to\n<code>seek</code> where you offset 0 bytes from the current position.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fdstat_set_flags\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#176\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fdstat_set_flags\" class=\"fn\">fdstat_set_flags</a>(&amp;self, flags: <a class=\"primitive\" href=\"../../../primitive.u16.html\">u16</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Adjust the flags associated with this file.</p>\n<p>This corresponds to the <code>fd_fdstat_set_flags</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fdstat_set_rights\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#182\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fdstat_set_rights\" class=\"fn\">fdstat_set_rights</a>(&amp;self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, inheriting: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Adjust the rights associated with this file.</p>\n<p>This corresponds to the <code>fd_fdstat_set_rights</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.advise\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#188\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.advise\" class=\"fn\">advise</a>(&amp;self, offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, advice: <a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Provide file advisory information on a file descriptor.</p>\n<p>This corresponds to the <code>fd_advise</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.allocate\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#194\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.allocate\" class=\"fn\">allocate</a>(&amp;self, offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Force the allocation of space in a file.</p>\n<p>This corresponds to the <code>fd_allocate</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.create_directory\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#200\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.create_directory\" class=\"fn\">create_directory</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, dir: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a directory.</p>\n<p>This corresponds to the <code>path_create_directory</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.read_link\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#206\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.read_link\" class=\"fn\">read_link</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Read the contents of a symbolic link.</p>\n<p>This corresponds to the <code>path_readlink</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.metadata_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#212\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.metadata_at\" class=\"fn\">metadata_at</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(\n    &amp;self,\n    lookup_flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>,\n    path: P,\n) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../fs/struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Return the attributes of a file or directory.</p>\n<p>This corresponds to the <code>path_filestat_get</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.remove_file\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#218\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.remove_file\" class=\"fn\">remove_file</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Unlink a file.</p>\n<p>This corresponds to the <code>path_unlink_file</code> syscall.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.remove_directory\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#224\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.remove_directory\" class=\"fn\">remove_directory</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Remove a directory.</p>\n<p>This corresponds to the <code>path_remove_directory</code> syscall.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#30-33\">source</a><h4 class=\"code-header\">fn <a href=\"#method.read_at\" class=\"fn\">read_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Reads a number of bytes starting from a given offset.</p>\n<p>Returns the number of bytes read.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>Note that similar to <a href=\"../../../fs/struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>File::read</code></a>, it is not an error to return with a\nshort read.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../../../src/std/os/wasi/fs.rs.html#76-90\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_exact_at\" class=\"fn\">read_exact_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Reads the exact number of byte required to fill <code>buf</code> from the given offset.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>Similar to <a href=\"../../../io/trait.Read.html#method.read_exact\" title=\"method std::io::Read::read_exact\"><code>Read::read_exact</code></a> but uses <a href=\"trait.FileExt.html#method.read_at\" title=\"method std::os::wasi::fs::FileExt::read_at\"><code>read_at</code></a> instead of <code>read</code>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If this function encounters an error of the kind\n<a href=\"../../../io/enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>io::ErrorKind::Interrupted</code></a> then the error is ignored and the operation\nwill continue.</p>\n<p>If this function encounters an “end of file” before completely filling\nthe buffer, it returns an error of the kind <a href=\"../../../io/enum.ErrorKind.html#variant.UnexpectedEof\" title=\"variant std::io::ErrorKind::UnexpectedEof\"><code>io::ErrorKind::UnexpectedEof</code></a>.\nThe contents of <code>buf</code> are unspecified in this case.</p>\n<p>If any other read error is encountered then this function immediately\nreturns. The contents of <code>buf</code> are unspecified in this case.</p>\n<p>If this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#106-109\">source</a><h4 class=\"code-header\">fn <a href=\"#method.write_at\" class=\"fn\">write_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes a number of bytes starting from a given offset.</p>\n<p>Returns the number of bytes written.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>When writing beyond the end of the file, the file is appropriately\nextended and the intermediate bytes are initialized with the value 0.</p>\n<p>Note that similar to <a href=\"../../../fs/struct.File.html#method.write\" title=\"method std::fs::File::write\"><code>File::write</code></a>, it is not an error to return a\nshort write.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../../../src/std/os/wasi/fs.rs.html#148-163\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_all_at\" class=\"fn\">write_all_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../../../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to write an entire buffer starting from a given offset.</p>\n<p>The offset is relative to the start of the file and thus independent\nfrom the current cursor.</p>\n<p>The current file cursor is not affected by this function.</p>\n<p>This method will continuously call <a href=\"trait.FileExt.html#method.write_at\" title=\"method std::os::wasi::fs::FileExt::write_at\"><code>write_at</code></a> until there is no more data\nto be written or an error of non-<a href=\"../../../io/enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>io::ErrorKind::Interrupted</code></a> kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of <a href=\"../../../io/enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>io::ErrorKind::Interrupted</code></a> kind generated from this method will be\nreturned.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return the first error of\nnon-<a href=\"../../../io/enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>io::ErrorKind::Interrupted</code></a> kind that <a href=\"trait.FileExt.html#method.write_at\" title=\"method std::os::wasi::fs::FileExt::write_at\"><code>write_at</code></a> returns.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-FileExt-for-File\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#234-298\">source</a><a href=\"#impl-FileExt-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.FileExt.html\" title=\"trait std::os::wasi::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></div><script src=\"../../../../trait.impl/std/os/wasi/fs/trait.FileExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:26.562Z"
}