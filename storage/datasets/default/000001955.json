{
	"title": "intrinsics.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/intrinsics.rs.html#2816",
	"markdown": "# intrinsics.rs - source\n\n```\n//! Compiler intrinsics.\n//!\n//! The corresponding definitions are in <https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs>.\n//! The corresponding const implementations are in <https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/intrinsics.rs>.\n//!\n//! # Const intrinsics\n//!\n//! Note: any changes to the constness of intrinsics should be discussed with the language team.\n//! This includes changes in the stability of the constness.\n//!\n//! In order to make an intrinsic usable at compile-time, one needs to copy the implementation\n//! from <https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics> to\n//! <https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/intrinsics.rs> and add a\n//! `#[rustc_const_unstable(feature = \"const_such_and_such\", issue = \"01234\")]` to the intrinsic declaration.\n//!\n//! If an intrinsic is supposed to be used from a `const fn` with a `rustc_const_stable` attribute,\n//! the intrinsic's attribute must be `rustc_const_stable`, too. Such a change should not be done\n//! without T-lang consultation, because it bakes a feature into the language that cannot be\n//! replicated in user code without compiler support.\n//!\n//! # Volatiles\n//!\n//! The volatile intrinsics provide operations intended to act on I/O\n//! memory, which are guaranteed to not be reordered by the compiler\n//! across other volatile intrinsics. See the LLVM documentation on\n//! [[volatile]].\n//!\n//! [volatile]: https://llvm.org/docs/LangRef.html#volatile-memory-accesses\n//!\n//! # Atomics\n//!\n//! The atomic intrinsics provide common atomic operations on machine\n//! words, with multiple possible memory orderings. They obey the same\n//! semantics as C++11. See the LLVM documentation on [[atomics]].\n//!\n//! [atomics]: https://llvm.org/docs/Atomics.html\n//!\n//! A quick refresher on memory ordering:\n//!\n//! * Acquire - a barrier for acquiring a lock. Subsequent reads and writes\n//!   take place after the barrier.\n//! * Release - a barrier for releasing a lock. Preceding reads and writes\n//!   take place before the barrier.\n//! * Sequentially consistent - sequentially consistent operations are\n//!   guaranteed to happen in order. This is the standard mode for working\n//!   with atomic types and is equivalent to Java's `volatile`.\n//!\n//! # Unwinding\n//!\n//! Rust intrinsics may, in general, unwind. If an intrinsic can never unwind, add the\n//! `#[rustc_nounwind]` attribute so that the compiler can make use of this fact.\n//!\n//! However, even for intrinsics that may unwind, rustc assumes that a Rust intrinsics will never\n//! initiate a foreign (non-Rust) unwind, and thus for panic=abort we can always assume that these\n//! intrinsics cannot unwind.\n\n#![unstable(\n    feature = \"core_intrinsics\",\n    reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                      they should be used through stabilized interfaces \\\n                      in the rest of the standard library\",\n    issue = \"none\"\n)]\n#![allow(missing_docs)]\n\nuse crate::marker::DiscriminantKind;\nuse crate::marker::Tuple;\nuse crate::ptr;\nuse crate::ub_checks;\n\npub mod mir;\npub mod simd;\n\n// These imports are used for simplifying intra-doc links\n#[allow(unused_imports)]\n#[cfg(all(target_has_atomic = \"8\", target_has_atomic = \"32\", target_has_atomic = \"ptr\"))]\nuse crate::sync::atomic::{self, AtomicBool, AtomicI32, AtomicIsize, AtomicU32, Ordering};\n\n#[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n#[rustc_allowed_through_unstable_modules]\n#[deprecated(note = \"no longer an intrinsic - use `ptr::drop_in_place` directly\", since = \"1.52.0\")]\n#[inline]\npub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n    // SAFETY: see `ptr::drop_in_place`\n    unsafe { crate::ptr::drop_in_place(to_drop) }\n}\n\nextern \"rust-intrinsic\" {\n    // N.B., these intrinsics take raw pointers because they mutate aliased\n    // memory, which is not valid for either `&` or `&mut`.\n\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_relaxed_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_relaxed_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_relaxed_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acquire_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acquire_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acquire_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_release_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_release_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_release_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acqrel_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acqrel_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_acqrel_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_seqcst_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_seqcst_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchg_seqcst_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_relaxed_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_relaxed_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_relaxed_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acquire_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acquire_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acquire_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_release_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_release_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_release_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acqrel_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acqrel_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_acqrel_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_seqcst_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_seqcst_acquire<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n    /// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    #[rustc_nounwind]\n    pub fn atomic_cxchgweak_seqcst_seqcst<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n\n    /// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::load`].\n    #[rustc_nounwind]\n    pub fn atomic_load_seqcst<T: Copy>(src: *const T) -> T;\n    /// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::load`].\n    #[rustc_nounwind]\n    pub fn atomic_load_acquire<T: Copy>(src: *const T) -> T;\n    /// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::load`].\n    #[rustc_nounwind]\n    pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n    /// Do NOT use this intrinsic; \"unordered\" operations do not exist in our memory model!\n    /// In terms of the Rust Abstract Machine, this operation is equivalent to `src.read()`,\n    /// i.e., it performs a non-atomic read.\n    #[rustc_nounwind]\n    pub fn atomic_load_unordered<T: Copy>(src: *const T) -> T;\n\n    /// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::store`].\n    #[rustc_nounwind]\n    pub fn atomic_store_seqcst<T: Copy>(dst: *mut T, val: T);\n    /// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::store`].\n    #[rustc_nounwind]\n    pub fn atomic_store_release<T: Copy>(dst: *mut T, val: T);\n    /// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::store`].\n    #[rustc_nounwind]\n    pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n    /// Do NOT use this intrinsic; \"unordered\" operations do not exist in our memory model!\n    /// In terms of the Rust Abstract Machine, this operation is equivalent to `dst.write(val)`,\n    /// i.e., it performs a non-atomic write.\n    #[rustc_nounwind]\n    pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n\n    /// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::swap`].\n    #[rustc_nounwind]\n    pub fn atomic_xchg_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::swap`].\n    #[rustc_nounwind]\n    pub fn atomic_xchg_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::swap`].\n    #[rustc_nounwind]\n    pub fn atomic_xchg_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::swap`].\n    #[rustc_nounwind]\n    pub fn atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::swap`].\n    #[rustc_nounwind]\n    pub fn atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    #[rustc_nounwind]\n    pub fn atomic_xadd_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    #[rustc_nounwind]\n    pub fn atomic_xadd_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    #[rustc_nounwind]\n    pub fn atomic_xadd_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    #[rustc_nounwind]\n    pub fn atomic_xadd_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    #[rustc_nounwind]\n    pub fn atomic_xadd_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    #[rustc_nounwind]\n    pub fn atomic_xsub_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    #[rustc_nounwind]\n    pub fn atomic_xsub_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    #[rustc_nounwind]\n    pub fn atomic_xsub_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    #[rustc_nounwind]\n    pub fn atomic_xsub_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    #[rustc_nounwind]\n    pub fn atomic_xsub_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    #[rustc_nounwind]\n    pub fn atomic_and_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    #[rustc_nounwind]\n    pub fn atomic_and_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    #[rustc_nounwind]\n    pub fn atomic_and_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    #[rustc_nounwind]\n    pub fn atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    #[rustc_nounwind]\n    pub fn atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    #[rustc_nounwind]\n    pub fn atomic_nand_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    #[rustc_nounwind]\n    pub fn atomic_nand_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    #[rustc_nounwind]\n    pub fn atomic_nand_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    #[rustc_nounwind]\n    pub fn atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    #[rustc_nounwind]\n    pub fn atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    #[rustc_nounwind]\n    pub fn atomic_or_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    #[rustc_nounwind]\n    pub fn atomic_or_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    #[rustc_nounwind]\n    pub fn atomic_or_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    #[rustc_nounwind]\n    pub fn atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    #[rustc_nounwind]\n    pub fn atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    #[rustc_nounwind]\n    pub fn atomic_xor_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    #[rustc_nounwind]\n    pub fn atomic_xor_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    #[rustc_nounwind]\n    pub fn atomic_xor_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    #[rustc_nounwind]\n    pub fn atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    #[rustc_nounwind]\n    pub fn atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_max_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_max_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_max_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_min_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_min_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_min_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_umin_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_umin_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_umin_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_umin_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    #[rustc_nounwind]\n    pub fn atomic_umin_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_umax_seqcst<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_umax_acquire<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_umax_release<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_umax_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n    /// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    #[rustc_nounwind]\n    pub fn atomic_umax_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n\n    /// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::SeqCst`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_fence_seqcst();\n    /// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::Acquire`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_fence_acquire();\n    /// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::Release`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_fence_release();\n    /// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::AcqRel`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_fence_acqrel();\n\n    /// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::SeqCst`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_singlethreadfence_seqcst();\n    /// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::Acquire`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_singlethreadfence_acquire();\n    /// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::Release`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_singlethreadfence_release();\n    /// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::AcqRel`]\n    /// as the `order`.\n    #[rustc_nounwind]\n    pub fn atomic_singlethreadfence_acqrel();\n\n    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn prefetch_read_data<T>(data: *const T, locality: i32);\n    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn prefetch_write_data<T>(data: *const T, locality: i32);\n    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn prefetch_read_instruction<T>(data: *const T, locality: i32);\n    /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn prefetch_write_instruction<T>(data: *const T, locality: i32);\n\n    /// Magic intrinsic that derives its meaning from attributes\n    /// attached to the function.\n    ///\n    /// For example, dataflow uses this to inject static assertions so\n    /// that `rustc_peek(potentially_uninitialized)` would actually\n    /// double-check that dataflow did indeed compute that it is\n    /// uninitialized at that point in the control flow.\n    ///\n    /// This intrinsic should not be used outside of the compiler.\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn rustc_peek<T>(_: T) -> T;\n\n    /// Aborts the execution of the process.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// [`std::process::abort`](../../std/process/fn.abort.html) is to be preferred if possible,\n    /// as its behavior is more user-friendly and more stable.\n    ///\n    /// The current implementation of `intrinsics::abort` is to invoke an invalid instruction,\n    /// on most platforms.\n    /// On Unix, the\n    /// process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or\n    /// `SIGBUS`.  The precise behaviour is not guaranteed and not stable.\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn abort() -> !;\n\n    /// Informs the optimizer that this point in the code is not reachable,\n    /// enabling further optimizations.\n    ///\n    /// N.B., this is very different from the `unreachable!()` macro: Unlike the\n    /// macro, which panics when it is executed, it is *undefined behavior* to\n    /// reach code marked with this function.\n    ///\n    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n    #[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n    #[rustc_nounwind]\n    pub fn unreachable() -> !;\n\n}\n\n/// Informs the optimizer that a condition is always true.\n/// If the condition is false, the behavior is undefined.\n///\n/// No code is generated for this intrinsic, but the optimizer will try\n/// to preserve it (and its condition) between passes, which may interfere\n/// with optimization of surrounding code and reduce performance. It should\n/// not be used if the invariant can be discovered by the optimizer on its\n/// own, or if it does not enable any significant optimizations.\n///\n/// This intrinsic does not have a stable counterpart.\n#[rustc_const_stable(feature = \"const_assume\", since = \"1.77.0\")]\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\npub const unsafe fn assume(b: bool) {\n    if !b {\n        // SAFETY: the caller must guarantee the argument is never `false`\n        unsafe { unreachable() }\n    }\n}\n\n/// Hints to the compiler that branch condition is likely to be true.\n/// Returns the value passed to it.\n///\n/// Any use other than with `if` statements will probably not have an effect.\n///\n/// Note that, unlike most intrinsics, this is safe to call;\n/// it does not require an `unsafe` block.\n/// Therefore, implementations must not require the user to uphold\n/// any safety invariants.\n///\n/// This intrinsic does not have a stable counterpart.\n#[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\npub const fn likely(b: bool) -> bool {\n    b\n}\n\n/// Hints to the compiler that branch condition is likely to be false.\n/// Returns the value passed to it.\n///\n/// Any use other than with `if` statements will probably not have an effect.\n///\n/// Note that, unlike most intrinsics, this is safe to call;\n/// it does not require an `unsafe` block.\n/// Therefore, implementations must not require the user to uphold\n/// any safety invariants.\n///\n/// This intrinsic does not have a stable counterpart.\n#[rustc_const_unstable(feature = \"const_likely\", issue = \"none\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\npub const fn unlikely(b: bool) -> bool {\n    b\n}\n\nextern \"rust-intrinsic\" {\n    /// Executes a breakpoint trap, for inspection by a debugger.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn breakpoint();\n\n    /// The size of a type in bytes.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// More specifically, this is the offset in bytes between successive\n    /// items of the same type, including alignment padding.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n    #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn size_of<T>() -> usize;\n\n    /// The minimum alignment of a type.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n    #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn min_align_of<T>() -> usize;\n    /// The preferred alignment of a type.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    /// It's \"tracking issue\" is [#91971](https://github.com/rust-lang/rust/issues/91971).\n    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"91971\")]\n    #[rustc_nounwind]\n    pub fn pref_align_of<T>() -> usize;\n\n    /// The size of the referenced value in bytes.\n    ///\n    /// The stabilized version of this intrinsic is [`crate::mem::size_of_val`].\n    #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n    #[rustc_nounwind]\n    pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n    /// The required alignment of the referenced value.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`].\n    #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n    #[rustc_nounwind]\n    pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n\n    /// Gets a static string slice containing the name of a type.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::any::type_name`].\n    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn type_name<T: ?Sized>() -> &'static str;\n\n    /// Gets an identifier which is globally unique to the specified type. This\n    /// function will return the same value for a type regardless of whichever\n    /// crate it is invoked in.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"77125\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn type_id<T: ?Sized + 'static>() -> u128;\n\n    /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n    /// This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn assert_inhabited<T>();\n\n    /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n    /// zero-initialization: This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_const_stable(feature = \"const_assert_type2\", since = \"1.75.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn assert_zero_valid<T>();\n\n    /// A guard for `std::mem::uninitialized`. This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_const_stable(feature = \"const_assert_type2\", since = \"1.75.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn assert_mem_uninitialized_valid<T>();\n\n    /// Gets a reference to a static `Location` indicating where it was called.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// Consider using [`core::panic::Location::caller`] instead.\n    #[rustc_const_stable(feature = \"const_caller_location\", since = \"1.79.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn caller_location() -> &'static crate::panic::Location<'static>;\n\n    /// Moves a value out of scope without running drop glue.\n    ///\n    /// This exists solely for [`crate::mem::forget_unsized`]; normal `forget` uses\n    /// `ManuallyDrop` instead.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    #[rustc_const_unstable(feature = \"const_intrinsic_forget\", issue = \"none\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn forget<T: ?Sized>(_: T);\n\n    /// Reinterprets the bits of a value of one type as another type.\n    ///\n    /// Both types must have the same size. Compilation will fail if this is not guaranteed.\n    ///\n    /// `transmute` is semantically equivalent to a bitwise move of one type\n    /// into another. It copies the bits from the source value into the\n    /// destination value, then forgets the original. Note that source and destination\n    /// are passed by-value, which means if `Src` or `Dst` contain padding, that padding\n    /// is *not* guaranteed to be preserved by `transmute`.\n    ///\n    /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n    /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n    /// will generate code *assuming that you, the programmer, ensure that there will never be\n    /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n    /// passed to `transmute` is valid at both types `Src` and `Dst`. Failing to uphold this condition\n    /// may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly\n    /// unsafe**. `transmute` should be the absolute last resort.\n    ///\n    /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n    /// themselves* is not a concern. As with any other function, the compiler already ensures\n    /// both `Src` and `Dst` are properly aligned. However, when transmuting values that *point\n    /// elsewhere* (such as pointers, references, boxes…), the caller has to ensure proper\n    /// alignment of the pointed-to values.\n    ///\n    /// The [nomicon](../../nomicon/transmutes.html) has additional documentation.\n    ///\n    /// [ub]: ../../reference/behavior-considered-undefined.html\n    ///\n    /// # Transmutation between pointers and integers\n    ///\n    /// Special care has to be taken when transmuting between pointers and integers, e.g.\n    /// transmuting between `*const ()` and `usize`.\n    ///\n    /// Transmuting *pointers to integers* in a `const` context is [undefined behavior][ub], unless\n    /// the pointer was originally created *from* an integer. (That includes this function\n    /// specifically, integer-to-pointer casts, and helpers like [`dangling`][crate::ptr::dangling],\n    /// but also semantically-equivalent conversions such as punning through `repr(C)` union\n    /// fields.) Any attempt to use the resulting value for integer operations will abort\n    /// const-evaluation. (And even outside `const`, such transmutation is touching on many\n    /// unspecified aspects of the Rust memory model and should be avoided. See below for\n    /// alternatives.)\n    ///\n    /// Transmuting *integers to pointers* is a largely unspecified operation. It is likely *not*\n    /// equivalent to an `as` cast. Doing non-zero-sized memory accesses with a pointer constructed\n    /// this way is currently considered undefined behavior.\n    ///\n    /// All this also applies when the integer is nested inside an array, tuple, struct, or enum.\n    /// However, `MaybeUninit<usize>` is not considered an integer type for the purpose of this\n    /// section. Transmuting `*const ()` to `MaybeUninit<usize>` is fine---but then calling\n    /// `assume_init()` on that result is considered as completing the pointer-to-integer transmute\n    /// and thus runs into the issues discussed above.\n    ///\n    /// In particular, doing a pointer-to-integer-to-pointer roundtrip via `transmute` is *not* a\n    /// lossless process. If you want to round-trip a pointer through an integer in a way that you\n    /// can get back the original pointer, you need to use `as` casts, or replace the integer type\n    /// by `MaybeUninit<$int>` (and never call `assume_init()`). If you are looking for a way to\n    /// store data of arbitrary type, also use `MaybeUninit<T>` (that will also handle uninitialized\n    /// memory due to padding). If you specifically need to store something that is \"either an\n    /// integer or a pointer\", use `*mut ()`: integers can be converted to pointers and back without\n    /// any loss (via `as` casts or via `transmute`).\n    ///\n    /// # Examples\n    ///\n    /// There are a few things that `transmute` is really useful for.\n    ///\n    /// Turning a pointer into a function pointer. This is *not* portable to\n    /// machines where function pointers and data pointers have different sizes.\n    ///\n    /// ```\n    /// fn foo() -> i32 {\n    ///     0\n    /// }\n    /// // Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n    /// // This avoids an integer-to-pointer `transmute`, which can be problematic.\n    /// // Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n    /// let pointer = foo as *const ();\n    /// let function = unsafe {\n    ///     std::mem::transmute::<*const (), fn() -> i32>(pointer)\n    /// };\n    /// assert_eq!(function(), 0);\n    /// ```\n    ///\n    /// Extending a lifetime, or shortening an invariant lifetime. This is\n    /// advanced, very unsafe Rust!\n    ///\n    /// ```\n    /// struct R<'a>(&'a i32);\n    /// unsafe fn extend_lifetime<'b>(r: R<'b>) -> R<'static> {\n    ///     std::mem::transmute::<R<'b>, R<'static>>(r)\n    /// }\n    ///\n    /// unsafe fn shorten_invariant_lifetime<'b, 'c>(r: &'b mut R<'static>)\n    ///                                              -> &'b mut R<'c> {\n    ///     std::mem::transmute::<&'b mut R<'static>, &'b mut R<'c>>(r)\n    /// }\n    /// ```\n    ///\n    /// # Alternatives\n    ///\n    /// Don't despair: many uses of `transmute` can be achieved through other means.\n    /// Below are common applications of `transmute` which can be replaced with safer\n    /// constructs.\n    ///\n    /// Turning raw bytes (`[u8; SZ]`) into `u32`, `f64`, etc.:\n    ///\n    /// ```\n    /// let raw_bytes = [0x78, 0x56, 0x34, 0x12];\n    ///\n    /// let num = unsafe {\n    ///     std::mem::transmute::<[u8; 4], u32>(raw_bytes)\n    /// };\n    ///\n    /// // use `u32::from_ne_bytes` instead\n    /// let num = u32::from_ne_bytes(raw_bytes);\n    /// // or use `u32::from_le_bytes` or `u32::from_be_bytes` to specify the endianness\n    /// let num = u32::from_le_bytes(raw_bytes);\n    /// assert_eq!(num, 0x12345678);\n    /// let num = u32::from_be_bytes(raw_bytes);\n    /// assert_eq!(num, 0x78563412);\n    /// ```\n    ///\n    /// Turning a pointer into a `usize`:\n    ///\n    /// ```no_run\n    /// let ptr = &0;\n    /// let ptr_num_transmute = unsafe {\n    ///     std::mem::transmute::<&i32, usize>(ptr)\n    /// };\n    ///\n    /// // Use an `as` cast instead\n    /// let ptr_num_cast = ptr as *const i32 as usize;\n    /// ```\n    ///\n    /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n    /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n    /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n    /// Depending on what the code is doing, the following alternatives are preferable to\n    /// pointer-to-integer transmutation:\n    /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n    ///   type for that buffer, it can use [`MaybeUninit`][crate::mem::MaybeUninit].\n    /// - If the code actually wants to work on the address the pointer points to, it can use `as`\n    ///   casts or [`ptr.addr()`][pointer::addr].\n    ///\n    /// Turning a `*mut T` into an `&mut T`:\n    ///\n    /// ```\n    /// let ptr: *mut i32 = &mut 0;\n    /// let ref_transmuted = unsafe {\n    ///     std::mem::transmute::<*mut i32, &mut i32>(ptr)\n    /// };\n    ///\n    /// // Use a reborrow instead\n    /// let ref_casted = unsafe { &mut *ptr };\n    /// ```\n    ///\n    /// Turning an `&mut T` into an `&mut U`:\n    ///\n    /// ```\n    /// let ptr = &mut 0;\n    /// let val_transmuted = unsafe {\n    ///     std::mem::transmute::<&mut i32, &mut u32>(ptr)\n    /// };\n    ///\n    /// // Now, put together `as` and reborrowing - note the chaining of `as`\n    /// // `as` is not transitive\n    /// let val_casts = unsafe { &mut *(ptr as *mut i32 as *mut u32) };\n    /// ```\n    ///\n    /// Turning an `&str` into a `&[u8]`:\n    ///\n    /// ```\n    /// // this is not a good way to do this.\n    /// let slice = unsafe { std::mem::transmute::<&str, &[u8]>(\"Rust\") };\n    /// assert_eq!(slice, &[82, 117, 115, 116]);\n    ///\n    /// // You could use `str::as_bytes`\n    /// let slice = \"Rust\".as_bytes();\n    /// assert_eq!(slice, &[82, 117, 115, 116]);\n    ///\n    /// // Or, just use a byte string, if you have control over the string\n    /// // literal\n    /// assert_eq!(b\"Rust\", &[82, 117, 115, 116]);\n    /// ```\n    ///\n    /// Turning a `Vec<&T>` into a `Vec<Option<&T>>`.\n    ///\n    /// To transmute the inner type of the contents of a container, you must make sure to not\n    /// violate any of the container's invariants. For `Vec`, this means that both the size\n    /// *and alignment* of the inner types have to match. Other containers might rely on the\n    /// size of the type, alignment, or even the `TypeId`, in which case transmuting wouldn't\n    /// be possible at all without violating the container invariants.\n    ///\n    /// ```\n    /// let store = [0, 1, 2, 3];\n    /// let v_orig = store.iter().collect::<Vec<&i32>>();\n    ///\n    /// // clone the vector as we will reuse them later\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // Using transmute: this relies on the unspecified data layout of `Vec`, which is a\n    /// // bad idea and could cause Undefined Behavior.\n    /// // However, it is no-copy.\n    /// let v_transmuted = unsafe {\n    ///     std::mem::transmute::<Vec<&i32>, Vec<Option<&i32>>>(v_clone)\n    /// };\n    ///\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // This is the suggested, safe way.\n    /// // It may copy the entire vector into a new one though, but also may not.\n    /// let v_collected = v_clone.into_iter()\n    ///                          .map(Some)\n    ///                          .collect::<Vec<Option<&i32>>>();\n    ///\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // This is the proper no-copy, unsafe way of \"transmuting\" a `Vec`, without relying on the\n    /// // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but\n    /// // in terms of converting the original inner type (`&i32`) to the new one (`Option<&i32>`),\n    /// // this has all the same caveats. Besides the information provided above, also consult the\n    /// // [`from_raw_parts`] documentation.\n    /// let v_from_raw = unsafe {\n    // FIXME Update this when vec_into_raw_parts is stabilized\n    ///     // Ensure the original vector is not dropped.\n    ///     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\n    ///     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option<&i32>,\n    ///                         v_clone.len(),\n    ///                         v_clone.capacity())\n    /// };\n    /// ```\n    ///\n    /// [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts\n    ///\n    /// Implementing `split_at_mut`:\n    ///\n    /// ```\n    /// use std::{slice, mem};\n    ///\n    /// // There are multiple ways to do this, and there are multiple problems\n    /// // with the following (transmute) way.\n    /// fn split_at_mut_transmute<T>(slice: &mut [T], mid: usize)\n    ///                              -> (&mut [T], &mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid <= len);\n    ///     unsafe {\n    ///         let slice2 = mem::transmute::<&mut [T], &mut [T]>(slice);\n    ///         // first: transmute is not type safe; all it checks is that T and\n    ///         // U are of the same size. Second, right here, you have two\n    ///         // mutable references pointing to the same memory.\n    ///         (&mut slice[0..mid], &mut slice2[mid..len])\n    ///     }\n    /// }\n    ///\n    /// // This gets rid of the type safety problems; `&mut *` will *only* give\n    /// // you an `&mut T` from an `&mut T` or `*mut T`.\n    /// fn split_at_mut_casts<T>(slice: &mut [T], mid: usize)\n    ///                          -> (&mut [T], &mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid <= len);\n    ///     unsafe {\n    ///         let slice2 = &mut *(slice as *mut [T]);\n    ///         // however, you still have two mutable references pointing to\n    ///         // the same memory.\n    ///         (&mut slice[0..mid], &mut slice2[mid..len])\n    ///     }\n    /// }\n    ///\n    /// // This is how the standard library does it. This is the best method, if\n    /// // you need to do something like this\n    /// fn split_at_stdlib<T>(slice: &mut [T], mid: usize)\n    ///                       -> (&mut [T], &mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid <= len);\n    ///     unsafe {\n    ///         let ptr = slice.as_mut_ptr();\n    ///         // This now has three mutable references pointing at the same\n    ///         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.\n    ///         // `slice` is never used after `let ptr = ...`, and so one can\n    ///         // treat it as \"dead\", and therefore, you only have two real\n    ///         // mutable slices.\n    ///         (slice::from_raw_parts_mut(ptr, mid),\n    ///          slice::from_raw_parts_mut(ptr.add(mid), len - mid))\n    ///     }\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[rustc_allowed_through_unstable_modules]\n    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n    #[rustc_diagnostic_item = \"transmute\"]\n    #[rustc_nounwind]\n    pub fn transmute<Src, Dst>(src: Src) -> Dst;\n\n    /// Like [`transmute`], but even less checked at compile-time: rather than\n    /// giving an error for `size_of::<Src>() != size_of::<Dst>()`, it's\n    /// **Undefined Behaviour** at runtime.\n    ///\n    /// Prefer normal `transmute` where possible, for the extra checking, since\n    /// both do exactly the same thing at runtime, if they both compile.\n    ///\n    /// This is not expected to ever be exposed directly to users, rather it\n    /// may eventually be exposed through some more-constrained API.\n    #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n    #[rustc_nounwind]\n    pub fn transmute_unchecked<Src, Dst>(src: Src) -> Dst;\n\n    /// Returns `true` if the actual type given as `T` requires drop\n    /// glue; returns `false` if the actual type provided for `T`\n    /// implements `Copy`.\n    ///\n    /// If the actual type neither requires drop glue nor implements\n    /// `Copy`, then the return value of this function is unspecified.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n    #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn needs_drop<T: ?Sized>() -> bool;\n\n    /// Calculates the offset from a pointer.\n    ///\n    /// This is implemented as an intrinsic to avoid converting to and from an\n    /// integer, since the conversion would throw away aliasing information.\n    ///\n    /// This can only be used with `Ptr` as a raw pointer type (`*mut` or `*const`)\n    /// to a `Sized` pointee and with `Delta` as `usize` or `isize`.  Any other\n    /// instantiations may arbitrarily misbehave, and that's *not* a compiler bug.\n    ///\n    /// # Safety\n    ///\n    /// If the computed offset is non-zero, then both the starting and resulting pointer must be\n    /// either in bounds or at the end of an allocated object. If either pointer is out\n    /// of bounds or arithmetic overflow occurs then any further use of the returned value will\n    /// result in undefined behavior.\n    ///\n    /// The stabilized version of this intrinsic is [`pointer::offset`].\n    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n    #[rustc_nounwind]\n    pub fn offset<Ptr, Delta>(dst: Ptr, offset: Delta) -> Ptr;\n\n    /// Calculates the offset from a pointer, potentially wrapping.\n    ///\n    /// This is implemented as an intrinsic to avoid converting to and from an\n    /// integer, since the conversion inhibits certain optimizations.\n    ///\n    /// # Safety\n    ///\n    /// Unlike the `offset` intrinsic, this intrinsic does not restrict the\n    /// resulting pointer to point into or at the end of an allocated\n    /// object, and it wraps with two's complement arithmetic. The resulting\n    /// value is not necessarily valid to be used to actually access memory.\n    ///\n    /// The stabilized version of this intrinsic is [`pointer::wrapping_offset`].\n    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n    #[rustc_nounwind]\n    pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n\n    /// Masks out bits of the pointer according to a mask.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// Consider using [`pointer::mask`] instead.\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn ptr_mask<T>(ptr: *const T, mask: usize) -> *const T;\n\n    /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n    /// a size of `count` * `size_of::<T>()` and an alignment of\n    /// `min_align_of::<T>()`\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn volatile_copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: usize);\n    /// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n    /// a size of `count * size_of::<T>()` and an alignment of\n    /// `min_align_of::<T>()`\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn volatile_copy_memory<T>(dst: *mut T, src: *const T, count: usize);\n    /// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n    /// size of `count * size_of::<T>()` and an alignment of\n    /// `min_align_of::<T>()`.\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n\n    /// Performs a volatile load from the `src` pointer.\n    ///\n    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`].\n    #[rustc_nounwind]\n    pub fn volatile_load<T>(src: *const T) -> T;\n    /// Performs a volatile store to the `dst` pointer.\n    ///\n    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`].\n    #[rustc_nounwind]\n    pub fn volatile_store<T>(dst: *mut T, val: T);\n\n    /// Performs a volatile load from the `src` pointer\n    /// The pointer is not required to be aligned.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_diagnostic_item = \"intrinsics_unaligned_volatile_load\"]\n    pub fn unaligned_volatile_load<T>(src: *const T) -> T;\n    /// Performs a volatile store to the `dst` pointer.\n    /// The pointer is not required to be aligned.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_diagnostic_item = \"intrinsics_unaligned_volatile_store\"]\n    pub fn unaligned_volatile_store<T>(dst: *mut T, val: T);\n\n    /// Returns the square root of an `f32`\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n    #[rustc_nounwind]\n    pub fn sqrtf32(x: f32) -> f32;\n    /// Returns the square root of an `f64`\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n    #[rustc_nounwind]\n    pub fn sqrtf64(x: f64) -> f64;\n\n    /// Raises an `f16` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f16::powi`](../../std/primitive.f16.html#method.powi)\n    #[rustc_nounwind]\n    pub fn powif16(a: f16, x: i32) -> f16;\n    /// Raises an `f32` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::powi`](../../std/primitive.f32.html#method.powi)\n    #[rustc_nounwind]\n    pub fn powif32(a: f32, x: i32) -> f32;\n    /// Raises an `f64` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::powi`](../../std/primitive.f64.html#method.powi)\n    #[rustc_nounwind]\n    pub fn powif64(a: f64, x: i32) -> f64;\n    /// Raises an `f128` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f128::powi`](../../std/primitive.f128.html#method.powi)\n    #[rustc_nounwind]\n    pub fn powif128(a: f128, x: i32) -> f128;\n\n    /// Returns the sine of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::sin`](../../std/primitive.f32.html#method.sin)\n    #[rustc_nounwind]\n    pub fn sinf32(x: f32) -> f32;\n    /// Returns the sine of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::sin`](../../std/primitive.f64.html#method.sin)\n    #[rustc_nounwind]\n    pub fn sinf64(x: f64) -> f64;\n\n    /// Returns the cosine of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::cos`](../../std/primitive.f32.html#method.cos)\n    #[rustc_nounwind]\n    pub fn cosf32(x: f32) -> f32;\n    /// Returns the cosine of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::cos`](../../std/primitive.f64.html#method.cos)\n    #[rustc_nounwind]\n    pub fn cosf64(x: f64) -> f64;\n\n    /// Raises an `f32` to an `f32` power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::powf`](../../std/primitive.f32.html#method.powf)\n    #[rustc_nounwind]\n    pub fn powf32(a: f32, x: f32) -> f32;\n    /// Raises an `f64` to an `f64` power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::powf`](../../std/primitive.f64.html#method.powf)\n    #[rustc_nounwind]\n    pub fn powf64(a: f64, x: f64) -> f64;\n\n    /// Returns the exponential of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::exp`](../../std/primitive.f32.html#method.exp)\n    #[rustc_nounwind]\n    pub fn expf32(x: f32) -> f32;\n    /// Returns the exponential of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::exp`](../../std/primitive.f64.html#method.exp)\n    #[rustc_nounwind]\n    pub fn expf64(x: f64) -> f64;\n\n    /// Returns 2 raised to the power of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::exp2`](../../std/primitive.f32.html#method.exp2)\n    #[rustc_nounwind]\n    pub fn exp2f32(x: f32) -> f32;\n    /// Returns 2 raised to the power of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::exp2`](../../std/primitive.f64.html#method.exp2)\n    #[rustc_nounwind]\n    pub fn exp2f64(x: f64) -> f64;\n\n    /// Returns the natural logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::ln`](../../std/primitive.f32.html#method.ln)\n    #[rustc_nounwind]\n    pub fn logf32(x: f32) -> f32;\n    /// Returns the natural logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::ln`](../../std/primitive.f64.html#method.ln)\n    #[rustc_nounwind]\n    pub fn logf64(x: f64) -> f64;\n\n    /// Returns the base 10 logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::log10`](../../std/primitive.f32.html#method.log10)\n    #[rustc_nounwind]\n    pub fn log10f32(x: f32) -> f32;\n    /// Returns the base 10 logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::log10`](../../std/primitive.f64.html#method.log10)\n    #[rustc_nounwind]\n    pub fn log10f64(x: f64) -> f64;\n\n    /// Returns the base 2 logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::log2`](../../std/primitive.f32.html#method.log2)\n    #[rustc_nounwind]\n    pub fn log2f32(x: f32) -> f32;\n    /// Returns the base 2 logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::log2`](../../std/primitive.f64.html#method.log2)\n    #[rustc_nounwind]\n    pub fn log2f64(x: f64) -> f64;\n\n    /// Returns `a * b + c` for `f32` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n    #[rustc_nounwind]\n    pub fn fmaf32(a: f32, b: f32, c: f32) -> f32;\n    /// Returns `a * b + c` for `f64` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n    #[rustc_nounwind]\n    pub fn fmaf64(a: f64, b: f64, c: f64) -> f64;\n\n    /// Returns the absolute value of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::abs`](../../std/primitive.f32.html#method.abs)\n    #[rustc_nounwind]\n    pub fn fabsf32(x: f32) -> f32;\n    /// Returns the absolute value of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::abs`](../../std/primitive.f64.html#method.abs)\n    #[rustc_nounwind]\n    pub fn fabsf64(x: f64) -> f64;\n\n    /// Returns the minimum of two `f32` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::min`]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn minnumf32(x: f32, y: f32) -> f32;\n    /// Returns the minimum of two `f64` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::min`]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn minnumf64(x: f64, y: f64) -> f64;\n    /// Returns the maximum of two `f32` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::max`]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn maxnumf32(x: f32, y: f32) -> f32;\n    /// Returns the maximum of two `f64` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::max`]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn maxnumf64(x: f64, y: f64) -> f64;\n\n    /// Copies the sign from `y` to `x` for `f32` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::copysign`](../../std/primitive.f32.html#method.copysign)\n    #[rustc_nounwind]\n    pub fn copysignf32(x: f32, y: f32) -> f32;\n    /// Copies the sign from `y` to `x` for `f64` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::copysign`](../../std/primitive.f64.html#method.copysign)\n    #[rustc_nounwind]\n    pub fn copysignf64(x: f64, y: f64) -> f64;\n\n    /// Returns the largest integer less than or equal to an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::floor`](../../std/primitive.f32.html#method.floor)\n    #[rustc_nounwind]\n    pub fn floorf32(x: f32) -> f32;\n    /// Returns the largest integer less than or equal to an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::floor`](../../std/primitive.f64.html#method.floor)\n    #[rustc_nounwind]\n    pub fn floorf64(x: f64) -> f64;\n\n    /// Returns the smallest integer greater than or equal to an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::ceil`](../../std/primitive.f32.html#method.ceil)\n    #[rustc_nounwind]\n    pub fn ceilf32(x: f32) -> f32;\n    /// Returns the smallest integer greater than or equal to an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::ceil`](../../std/primitive.f64.html#method.ceil)\n    #[rustc_nounwind]\n    pub fn ceilf64(x: f64) -> f64;\n\n    /// Returns the integer part of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::trunc`](../../std/primitive.f32.html#method.trunc)\n    #[rustc_nounwind]\n    pub fn truncf32(x: f32) -> f32;\n    /// Returns the integer part of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::trunc`](../../std/primitive.f64.html#method.trunc)\n    #[rustc_nounwind]\n    pub fn truncf64(x: f64) -> f64;\n\n    /// Returns the nearest integer to an `f32`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// May raise an inexact floating-point exception if the argument is not an integer.\n    /// However, Rust assumes floating-point exceptions cannot be observed, so these exceptions\n    /// cannot actually be utilized from Rust code.\n    /// In other words, this intrinsic is equivalent in behavior to `nearbyintf32` and `roundevenf32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::round_ties_even`](../../std/primitive.f32.html#method.round_ties_even)\n    #[rustc_nounwind]\n    pub fn rintf32(x: f32) -> f32;\n    /// Returns the nearest integer to an `f64`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// May raise an inexact floating-point exception if the argument is not an integer.\n    /// However, Rust assumes floating-point exceptions cannot be observed, so these exceptions\n    /// cannot actually be utilized from Rust code.\n    /// In other words, this intrinsic is equivalent in behavior to `nearbyintf64` and `roundevenf64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::round_ties_even`](../../std/primitive.f64.html#method.round_ties_even)\n    #[rustc_nounwind]\n    pub fn rintf64(x: f64) -> f64;\n\n    /// Returns the nearest integer to an `f32`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn nearbyintf32(x: f32) -> f32;\n    /// Returns the nearest integer to an `f64`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn nearbyintf64(x: f64) -> f64;\n\n    /// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::round`](../../std/primitive.f32.html#method.round)\n    #[rustc_nounwind]\n    pub fn roundf32(x: f32) -> f32;\n    /// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::round`](../../std/primitive.f64.html#method.round)\n    #[rustc_nounwind]\n    pub fn roundf64(x: f64) -> f64;\n\n    /// Returns the nearest integer to an `f32`. Rounds half-way cases to the number\n    /// with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn roundevenf32(x: f32) -> f32;\n    /// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n    /// with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn roundevenf64(x: f64) -> f64;\n\n    /// Float addition that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn fadd_fast<T: Copy>(a: T, b: T) -> T;\n\n    /// Float subtraction that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn fsub_fast<T: Copy>(a: T, b: T) -> T;\n\n    /// Float multiplication that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn fmul_fast<T: Copy>(a: T, b: T) -> T;\n\n    /// Float division that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn fdiv_fast<T: Copy>(a: T, b: T) -> T;\n\n    /// Float remainder that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    pub fn frem_fast<T: Copy>(a: T, b: T) -> T;\n\n    /// Float addition that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    pub fn fadd_algebraic<T: Copy>(a: T, b: T) -> T;\n\n    /// Float subtraction that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    pub fn fsub_algebraic<T: Copy>(a: T, b: T) -> T;\n\n    /// Float multiplication that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    pub fn fmul_algebraic<T: Copy>(a: T, b: T) -> T;\n\n    /// Float division that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    pub fn fdiv_algebraic<T: Copy>(a: T, b: T) -> T;\n\n    /// Float remainder that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    pub fn frem_algebraic<T: Copy>(a: T, b: T) -> T;\n\n    /// Convert with LLVM’s fptoui/fptosi, which may return undef for values out of range\n    /// (<https://github.com/rust-lang/rust/issues/10184>)\n    ///\n    /// Stabilized as [`f32::to_int_unchecked`] and [`f64::to_int_unchecked`].\n    #[rustc_nounwind]\n    pub fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n\n    /// Returns the number of bits set in an integer type `T`\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `count_ones` method. For example,\n    /// [`u32::count_ones`]\n    #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn ctpop<T: Copy>(x: T) -> u32;\n\n    /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `leading_zeros` method. For example,\n    /// [`u32::leading_zeros`]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz;\n    ///\n    /// let x = 0b0001_1100_u8;\n    /// let num_leading = ctlz(x);\n    /// assert_eq!(num_leading, 3);\n    /// ```\n    ///\n    /// An `x` with value `0` will return the bit width of `T`.\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz;\n    ///\n    /// let x = 0u16;\n    /// let num_leading = ctlz(x);\n    /// assert_eq!(num_leading, 16);\n    /// ```\n    #[rustc_const_stable(feature = \"const_ctlz\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn ctlz<T: Copy>(x: T) -> u32;\n\n    /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n    /// given an `x` with value `0`.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz_nonzero;\n    ///\n    /// let x = 0b0001_1100_u8;\n    /// let num_leading = unsafe { ctlz_nonzero(x) };\n    /// assert_eq!(num_leading, 3);\n    /// ```\n    #[rustc_const_stable(feature = \"constctlz\", since = \"1.50.0\")]\n    #[rustc_nounwind]\n    pub fn ctlz_nonzero<T: Copy>(x: T) -> u32;\n\n    /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `trailing_zeros` method. For example,\n    /// [`u32::trailing_zeros`]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz;\n    ///\n    /// let x = 0b0011_1000_u8;\n    /// let num_trailing = cttz(x);\n    /// assert_eq!(num_trailing, 3);\n    /// ```\n    ///\n    /// An `x` with value `0` will return the bit width of `T`:\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz;\n    ///\n    /// let x = 0u16;\n    /// let num_trailing = cttz(x);\n    /// assert_eq!(num_trailing, 16);\n    /// ```\n    #[rustc_const_stable(feature = \"const_cttz\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn cttz<T: Copy>(x: T) -> u32;\n\n    /// Like `cttz`, but extra-unsafe as it returns `undef` when\n    /// given an `x` with value `0`.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz_nonzero;\n    ///\n    /// let x = 0b0011_1000_u8;\n    /// let num_trailing = unsafe { cttz_nonzero(x) };\n    /// assert_eq!(num_trailing, 3);\n    /// ```\n    #[rustc_const_stable(feature = \"const_cttz_nonzero\", since = \"1.53.0\")]\n    #[rustc_nounwind]\n    pub fn cttz_nonzero<T: Copy>(x: T) -> u32;\n\n    /// Reverses the bytes in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `swap_bytes` method. For example,\n    /// [`u32::swap_bytes`]\n    #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn bswap<T: Copy>(x: T) -> T;\n\n    /// Reverses the bits in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `reverse_bits` method. For example,\n    /// [`u32::reverse_bits`]\n    #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn bitreverse<T: Copy>(x: T) -> T;\n\n    /// Does a three-way comparison between the two integer arguments.\n    ///\n    /// This is included as an intrinsic as it's useful to let it be one thing\n    /// in MIR, rather than the multiple checks and switches that make its IR\n    /// large and difficult to optimize.\n    ///\n    /// The stabilized version of this intrinsic is [`Ord::cmp`].\n    #[rustc_const_unstable(feature = \"const_three_way_compare\", issue = \"none\")]\n    #[rustc_safe_intrinsic]\n    pub fn three_way_compare<T: Copy>(lhs: T, rhs: T) -> crate::cmp::Ordering;\n\n    /// Performs checked integer addition.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_add` method. For example,\n    /// [`u32::overflowing_add`]\n    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n\n    /// Performs checked integer subtraction\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_sub` method. For example,\n    /// [`u32::overflowing_sub`]\n    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n\n    /// Performs checked integer multiplication\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_mul` method. For example,\n    /// [`u32::overflowing_mul`]\n    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n\n    /// Performs an exact division, resulting in undefined behavior where\n    /// `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    #[rustc_const_unstable(feature = \"const_exact_div\", issue = \"none\")]\n    #[rustc_nounwind]\n    pub fn exact_div<T: Copy>(x: T, y: T) -> T;\n\n    /// Performs an unchecked division, resulting in undefined behavior\n    /// where `y == 0` or `x == T::MIN && y == -1`\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_div` method. For example,\n    /// [`u32::checked_div`]\n    #[rustc_const_stable(feature = \"const_int_unchecked_div\", since = \"1.52.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n    /// Returns the remainder of an unchecked division, resulting in\n    /// undefined behavior when `y == 0` or `x == T::MIN && y == -1`\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_rem` method. For example,\n    /// [`u32::checked_rem`]\n    #[rustc_const_stable(feature = \"const_int_unchecked_rem\", since = \"1.52.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n\n    /// Performs an unchecked left shift, resulting in undefined behavior when\n    /// `y < 0` or `y >= N`, where N is the width of T in bits.\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_shl` method. For example,\n    /// [`u32::checked_shl`]\n    #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_shl<T: Copy, U: Copy>(x: T, y: U) -> T;\n    /// Performs an unchecked right shift, resulting in undefined behavior when\n    /// `y < 0` or `y >= N`, where N is the width of T in bits.\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_shr` method. For example,\n    /// [`u32::checked_shr`]\n    #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_shr<T: Copy, U: Copy>(x: T, y: U) -> T;\n\n    /// Returns the result of an unchecked addition, resulting in\n    /// undefined behavior when `x + y > T::MAX` or `x + y < T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_add` on the various\n    /// integer types, such as [`u16::unchecked_add`] and [`i64::unchecked_add`].\n    #[rustc_const_stable(feature = \"unchecked_math\", since = \"1.79.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_add<T: Copy>(x: T, y: T) -> T;\n\n    /// Returns the result of an unchecked subtraction, resulting in\n    /// undefined behavior when `x - y > T::MAX` or `x - y < T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_sub` on the various\n    /// integer types, such as [`u16::unchecked_sub`] and [`i64::unchecked_sub`].\n    #[rustc_const_stable(feature = \"unchecked_math\", since = \"1.79.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_sub<T: Copy>(x: T, y: T) -> T;\n\n    /// Returns the result of an unchecked multiplication, resulting in\n    /// undefined behavior when `x * y > T::MAX` or `x * y < T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_mul` on the various\n    /// integer types, such as [`u16::unchecked_mul`] and [`i64::unchecked_mul`].\n    #[rustc_const_stable(feature = \"unchecked_math\", since = \"1.79.0\")]\n    #[rustc_nounwind]\n    pub fn unchecked_mul<T: Copy>(x: T, y: T) -> T;\n\n    /// Performs rotate left.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `rotate_left` method. For example,\n    /// [`u32::rotate_left`]\n    #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn rotate_left<T: Copy>(x: T, shift: u32) -> T;\n\n    /// Performs rotate right.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `rotate_right` method. For example,\n    /// [`u32::rotate_right`]\n    #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn rotate_right<T: Copy>(x: T, shift: u32) -> T;\n\n    /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_add` method. For example,\n    /// [`u32::wrapping_add`]\n    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n    /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_sub` method. For example,\n    /// [`u32::wrapping_sub`]\n    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n    /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_mul` method. For example,\n    /// [`u32::wrapping_mul`]\n    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n\n    /// Computes `a + b`, saturating at numeric bounds.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `saturating_add` method. For example,\n    /// [`u32::saturating_add`]\n    #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n    /// Computes `a - b`, saturating at numeric bounds.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `saturating_sub` method. For example,\n    /// [`u32::saturating_sub`]\n    #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n\n    /// This is an implementation detail of [`crate::ptr::read`] and should\n    /// not be used anywhere else.  See its comments for why this exists.\n    ///\n    /// This intrinsic can *only* be called where the pointer is a local without\n    /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n    /// trivially obeys runtime-MIR rules about derefs in operands.\n    #[rustc_const_stable(feature = \"const_ptr_read\", since = \"1.71.0\")]\n    #[rustc_nounwind]\n    pub fn read_via_copy<T>(ptr: *const T) -> T;\n\n    /// This is an implementation detail of [`crate::ptr::write`] and should\n    /// not be used anywhere else.  See its comments for why this exists.\n    ///\n    /// This intrinsic can *only* be called where the pointer is a local without\n    /// projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so\n    /// that it trivially obeys runtime-MIR rules about derefs in operands.\n    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n    #[rustc_nounwind]\n    pub fn write_via_move<T>(ptr: *mut T, value: T);\n\n    /// Returns the value of the discriminant for the variant in 'v';\n    /// if `T` has no discriminant, returns `0`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n    #[rustc_const_stable(feature = \"const_discriminant\", since = \"1.75.0\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n\n    /// Returns the number of variants of the type `T` cast to a `usize`;\n    /// if `T` has no variants, returns `0`. Uninhabited variants will be counted.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The to-be-stabilized version of this intrinsic is [`crate::mem::variant_count`].\n    #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn variant_count<T>() -> usize;\n\n    /// Rust's \"try catch\" construct for unwinding. Invokes the function pointer `try_fn` with the\n    /// data pointer `data`, and calls `catch_fn` if unwinding occurs while `try_fn` runs.\n    ///\n    /// `catch_fn` must not unwind.\n    ///\n    /// The third argument is a function called if an unwind occurs (both Rust unwinds and foreign\n    /// unwinds). This function takes the data pointer and a pointer to the target-specific\n    /// exception object that was caught. For more information, see the compiler's source as well as\n    /// std's `catch_unwind` implementation.\n    ///\n    /// The stable version of this intrinsic is `std::panic::catch_unwind`.\n    #[rustc_nounwind]\n    pub fn catch_unwind(try_fn: fn(*mut u8), data: *mut u8, catch_fn: fn(*mut u8, *mut u8)) -> i32;\n\n    /// Emits a `!nontemporal` store according to LLVM (see their docs).\n    /// Probably will never become stable.\n    ///\n    /// Do NOT use this intrinsic; \"nontemporal\" operations do not exist in our memory model!\n    /// It exists to support current stdarch, but the plan is to change stdarch and remove this intrinsic.\n    /// See <https://github.com/rust-lang/rust/issues/114582> for some more discussion.\n    #[rustc_nounwind]\n    pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n\n    /// See documentation of `<*const T>::offset_from` for details.\n    #[rustc_const_stable(feature = \"const_ptr_offset_from\", since = \"1.65.0\")]\n    #[rustc_nounwind]\n    pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n\n    /// See documentation of `<*const T>::sub_ptr` for details.\n    #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n    #[rustc_nounwind]\n    pub fn ptr_offset_from_unsigned<T>(ptr: *const T, base: *const T) -> usize;\n}\n\n/// See documentation of `<*const T>::guaranteed_eq` for details.\n/// Returns `2` if the result is unknown.\n/// Returns `1` if the pointers are guaranteed equal\n/// Returns `0` if the pointers are guaranteed inequal\n#[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[rustc_do_not_const_check]\n#[inline]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\npub const fn ptr_guaranteed_cmp<T>(ptr: *const T, other: *const T) -> u8 {\n    (ptr == other) as u8\n}\n\nextern \"rust-intrinsic\" {\n    /// Determines whether the raw bytes of the two values are equal.\n    ///\n    /// This is particularly handy for arrays, since it allows things like just\n    /// comparing `i96`s instead of forcing `alloca`s for `[6 x i16]`.\n    ///\n    /// Above some backend-decided threshold this will emit calls to `memcmp`,\n    /// like slice equality does, instead of causing massive code size.\n    ///\n    /// Since this works by comparing the underlying bytes, the actual `T` is\n    /// not particularly important.  It will be used for its size and alignment,\n    /// but any validity restrictions will be ignored, not enforced.\n    ///\n    /// # Safety\n    ///\n    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized or carry a\n    /// pointer value.\n    /// Note that this is a stricter criterion than just the *values* being\n    /// fully-initialized: if `T` has padding, it's UB to call this intrinsic.\n    ///\n    /// (The implementation is allowed to branch on the results of comparisons,\n    /// which is UB if any of their inputs are `undef`.)\n    #[rustc_const_unstable(feature = \"const_intrinsic_raw_eq\", issue = \"none\")]\n    #[rustc_nounwind]\n    pub fn raw_eq<T>(a: &T, b: &T) -> bool;\n\n    /// Lexicographically compare `[left, left + bytes)` and `[right, right + bytes)`\n    /// as unsigned bytes, returning negative if `left` is less, zero if all the\n    /// bytes match, or positive if `right` is greater.\n    ///\n    /// This underlies things like `<[u8]>::cmp`, and will usually lower to `memcmp`.\n    ///\n    /// # Safety\n    ///\n    /// `left` and `right` must each be [valid] for reads of `bytes` bytes.\n    ///\n    /// Note that this applies to the whole range, not just until the first byte\n    /// that differs.  That allows optimizations that can read in large chunks.\n    ///\n    /// [valid]: crate::ptr#safety\n    #[rustc_const_unstable(feature = \"const_intrinsic_compare_bytes\", issue = \"none\")]\n    #[rustc_nounwind]\n    pub fn compare_bytes(left: *const u8, right: *const u8, bytes: usize) -> i32;\n\n    /// See documentation of [`std::hint::black_box`] for details.\n    ///\n    /// [`std::hint::black_box`]: crate::hint::black_box\n    #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    pub fn black_box<T>(dummy: T) -> T;\n}\n\n/// Selects which function to call depending on the context.\n///\n/// If this function is evaluated at compile-time, then a call to this\n/// intrinsic will be replaced with a call to `called_in_const`. It gets\n/// replaced with a call to `called_at_rt` otherwise.\n///\n/// This function is safe to call, but note the stability concerns below.\n///\n/// # Type Requirements\n///\n/// The two functions must be both function items. They cannot be function\n/// pointers or closures. The first function must be a `const fn`.\n///\n/// `arg` will be the tupled arguments that will be passed to either one of\n/// the two functions, therefore, both functions must accept the same type of\n/// arguments. Both functions must return RET.\n///\n/// # Stability concerns\n///\n/// Rust has not yet decided that `const fn` are allowed to tell whether\n/// they run at compile-time or at runtime. Therefore, when using this\n/// intrinsic anywhere that can be reached from stable, it is crucial that\n/// the end-to-end behavior of the stable `const fn` is the same for both\n/// modes of execution. (Here, Undefined Behavior is considered \"the same\"\n/// as any other behavior, so if the function exhibits UB at runtime then\n/// it may do whatever it wants at compile-time.)\n///\n/// Here is an example of how this could cause a problem:\n/// ```no_run\n/// #![feature(const_eval_select)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::intrinsics::const_eval_select;\n///\n/// // Standard library\n/// pub const fn inconsistent() -> i32 {\n///     fn runtime() -> i32 { 1 }\n///     const fn compiletime() -> i32 { 2 }\n///\n//      // ⚠ This code violates the required equivalence of `compiletime`\n///     // and `runtime`.\n///     const_eval_select((), compiletime, runtime)\n/// }\n///\n/// // User Crate\n/// const X: i32 = inconsistent();\n/// let x = inconsistent();\n/// assert_eq!(x, X);\n/// ```\n///\n/// Currently such an assertion would always succeed; until Rust decides\n/// otherwise, that principle should not be violated.\n#[rustc_const_unstable(feature = \"const_eval_select\", issue = \"124625\")]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\npub const fn const_eval_select<ARG: Tuple, F, G, RET>(\n    _arg: ARG,\n    _called_in_const: F,\n    _called_at_rt: G,\n) -> RET\nwhere\n    G: FnOnce<ARG, Output = RET>,\n    F: FnOnce<ARG, Output = RET>,\n{\n    unreachable!()\n}\n\n/// Returns whether the argument's value is statically known at\n/// compile-time.\n///\n/// This is useful when there is a way of writing the code that will\n/// be *faster* when some variables have known values, but *slower*\n/// in the general case: an `if is_val_statically_known(var)` can be used\n/// to select between these two variants. The `if` will be optimized away\n/// and only the desired branch remains.\n///\n/// Formally speaking, this function non-deterministically returns `true`\n/// or `false`, and the caller has to ensure sound behavior for both cases.\n/// In other words, the following code has *Undefined Behavior*:\n///\n/// ```no_run\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::hint::unreachable_unchecked;\n/// use std::intrinsics::is_val_statically_known;\n///\n/// if !is_val_statically_known(0) { unsafe { unreachable_unchecked(); } }\n/// ```\n///\n/// This also means that the following code's behavior is unspecified; it\n/// may panic, or it may not:\n///\n/// ```no_run\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::intrinsics::is_val_statically_known;\n///\n/// assert_eq!(is_val_statically_known(0), is_val_statically_known(0));\n/// ```\n///\n/// Unsafe code may not rely on `is_val_statically_known` returning any\n/// particular value, ever. However, the compiler will generally make it\n/// return `true` only if the value of the argument is actually known.\n///\n/// # Stability concerns\n///\n/// While it is safe to call, this intrinsic may behave differently in\n/// a `const` context than otherwise. See the [`const_eval_select`]\n/// documentation for an explanation of the issues this can cause. Unlike\n/// `const_eval_select`, this intrinsic isn't guaranteed to behave\n/// deterministically even in a `const` context.\n///\n/// # Type Requirements\n///\n/// `T` must be either a `bool`, a `char`, a primitive numeric type (e.g. `f32`,\n/// but not `NonZeroISize`), or any thin pointer (e.g. `*mut String`).\n/// Any other argument types *may* cause a compiler error.\n///\n/// ## Pointers\n///\n/// When the input is a pointer, only the pointer itself is\n/// ever considered. The pointee has no effect. Currently, these functions\n/// behave identically:\n///\n/// ```\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// #![feature(strict_provenance)]\n/// use std::intrinsics::is_val_statically_known;\n///\n/// fn foo(x: &i32) -> bool {\n///     is_val_statically_known(x)\n/// }\n///\n/// fn bar(x: &i32) -> bool {\n///     is_val_statically_known(\n///         (x as *const i32).addr()\n///     )\n/// }\n/// # _ = foo(&5_i32);\n/// # _ = bar(&5_i32);\n/// ```\n#[rustc_const_unstable(feature = \"is_val_statically_known\", issue = \"none\")]\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\npub const fn is_val_statically_known<T: Copy>(_arg: T) -> bool {\n    false\n}\n\n/// Non-overlapping *typed* swap of a single value.\n///\n/// The codegen backends will replace this with a better implementation when\n/// `T` is a simple type that can be loaded and stored as an immediate.\n///\n/// The stabilized form of this intrinsic is [`crate::mem::swap`].\n///\n/// # Safety\n///\n/// `x` and `y` are readable and writable as `T`, and non-overlapping.\n#[rustc_nounwind]\n#[inline]\n#[rustc_intrinsic]\n// This has fallback `const fn` MIR, so shouldn't need stability, see #122652\n#[rustc_const_unstable(feature = \"const_typed_swap\", issue = \"none\")]\npub const unsafe fn typed_swap<T>(x: *mut T, y: *mut T) {\n    // SAFETY: The caller provided single non-overlapping items behind\n    // pointers, so swapping them with `count: 1` is fine.\n    unsafe { ptr::swap_nonoverlapping(x, y, 1) };\n}\n\n/// Returns whether we should perform some UB-checking at runtime. This eventually evaluates to\n/// `cfg!(ub_checks)`, but behaves different from `cfg!` when mixing crates built with different\n/// flags: if the crate has UB checks enabled or carries the `#[rustc_preserve_ub_checks]`\n/// attribute, evaluation is delayed until monomorphization (or until the call gets inlined into\n/// a crate that does not delay evaluation further); otherwise it can happen any time.\n///\n/// The common case here is a user program built with ub_checks linked against the distributed\n/// sysroot which is built without ub_checks but with `#[rustc_preserve_ub_checks]`.\n/// For code that gets monomorphized in the user crate (i.e., generic functions and functions with\n/// `#[inline]`), gating assertions on `ub_checks()` rather than `cfg!(ub_checks)` means that\n/// assertions are enabled whenever the *user crate* has UB checks enabled. However if the\n/// user has UB checks disabled, the checks will still get optimized out. This intrinsic is\n/// primarily used by [`ub_checks::assert_unsafe_precondition`].\n#[rustc_const_unstable(feature = \"const_ub_checks\", issue = \"none\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[inline(always)]\n#[rustc_intrinsic]\npub const fn ub_checks() -> bool {\n    cfg!(debug_assertions)\n}\n\n/// Allocates a block of memory at compile time.\n/// At runtime, just returns a null pointer.\n///\n/// # Safety\n///\n/// - The `align` argument must be a power of two.\n///    - At compile time, a compile error occurs if this constraint is violated.\n///    - At runtime, it is not checked.\n#[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_nounwind]\n#[rustc_intrinsic]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\npub const unsafe fn const_allocate(_size: usize, _align: usize) -> *mut u8 {\n    // const eval overrides this function, but runtime code for now just returns null pointers.\n    // See <https://github.com/rust-lang/rust/issues/93935>.\n    crate::ptr::null_mut()\n}\n\n/// Deallocates a memory which allocated by `intrinsics::const_allocate` at compile time.\n/// At runtime, does nothing.\n///\n/// # Safety\n///\n/// - The `align` argument must be a power of two.\n///    - At compile time, a compile error occurs if this constraint is violated.\n///    - At runtime, it is not checked.\n/// - If the `ptr` is created in an another const, this intrinsic doesn't deallocate it.\n/// - If the `ptr` is pointing to a local variable, this intrinsic doesn't deallocate it.\n#[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_nounwind]\n#[rustc_intrinsic]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\npub const unsafe fn const_deallocate(_ptr: *mut u8, _size: usize, _align: usize) {\n    // Runtime NOP\n}\n\n/// `ptr` must point to a vtable.\n/// The intrinsic will return the size stored in that vtable.\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\npub unsafe fn vtable_size(_ptr: *const ()) -> usize {\n    unreachable!()\n}\n\n/// `ptr` must point to a vtable.\n/// The intrinsic will return the alignment stored in that vtable.\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\npub unsafe fn vtable_align(_ptr: *const ()) -> usize {\n    unreachable!()\n}\n\n/// Lowers in MIR to `Rvalue::Aggregate` with `AggregateKind::RawPtr`.\n///\n/// This is used to implement functions like `slice::from_raw_parts_mut` and\n/// `ptr::from_raw_parts` in a way compatible with the compiler being able to\n/// change the possible layouts of pointers.\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\npub const fn aggregate_raw_ptr<P: AggregateRawPtr<D, Metadata = M>, D, M>(_data: D, _meta: M) -> P {\n    // To implement a fallback we'd have to assume the layout of the pointer,\n    // but the whole point of this intrinsic is that we shouldn't do that.\n    unreachable!()\n}\n\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\npub trait AggregateRawPtr<D> {\n    type Metadata: Copy;\n}\nimpl<P: ?Sized, T: ptr::Thin> AggregateRawPtr<*const T> for *const P {\n    type Metadata = <P as ptr::Pointee>::Metadata;\n}\nimpl<P: ?Sized, T: ptr::Thin> AggregateRawPtr<*mut T> for *mut P {\n    type Metadata = <P as ptr::Pointee>::Metadata;\n}\n\n/// Lowers in MIR to `Rvalue::UnaryOp` with `UnOp::PtrMetadata`.\n///\n/// This is used to implement functions like `ptr::metadata`.\n#[rustc_nounwind]\n#[unstable(feature = \"core_intrinsics\", issue = \"none\")]\n#[rustc_const_unstable(feature = \"ptr_metadata\", issue = \"81513\")]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n#[cfg(not(bootstrap))]\npub const fn ptr_metadata<P: ptr::Pointee<Metadata = M> + ?Sized, M>(_ptr: *const P) -> M {\n    // To implement a fallback we'd have to assume the layout of the pointer,\n    // but the whole point of this intrinsic is that we shouldn't do that.\n    unreachable!()\n}\n\n// Some functions are defined here because they accidentally got made\n// available in this module on stable. See <https://github.com/rust-lang/rust/issues/15702>.\n// (`transmute` also falls into this category, but it cannot be wrapped due to the\n// check that `T` and `U` have the same size.)\n\n/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n/// and destination must *not* overlap.\n///\n/// For regions of memory which might overlap, use [`copy`] instead.\n///\n/// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n/// with the argument order swapped.\n///\n/// The copy is \"untyped\" in the sense that data may be uninitialized or otherwise violate the\n/// requirements of `T`. The initialization state is preserved exactly.\n///\n/// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes.\n///\n/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n///\n/// * Both `src` and `dst` must be properly aligned.\n///\n/// * The region of memory beginning at `src` with a size of `count *\n///   size_of::<T>()` bytes must *not* overlap with the region of memory\n///   beginning at `dst` with the same size.\n///\n/// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n/// in the region beginning at `*src` and the region beginning at `*dst` can\n/// [violate memory safety][read-ownership].\n///\n/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n/// `0`, the pointers must be non-null and properly aligned.\n///\n/// [`read`]: crate::ptr::read\n/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Manually implement [`Vec::append`]:\n///\n/// ```\n/// use std::ptr;\n///\n/// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n/// fn append<T>(dst: &mut Vec<T>, src: &mut Vec<T>) {\n///     let src_len = src.len();\n///     let dst_len = dst.len();\n///\n///     // Ensure that `dst` has enough capacity to hold all of `src`.\n///     dst.reserve(src_len);\n///\n///     unsafe {\n///         // The call to add is always safe because `Vec` will never\n///         // allocate more than `isize::MAX` bytes.\n///         let dst_ptr = dst.as_mut_ptr().add(dst_len);\n///         let src_ptr = src.as_ptr();\n///\n///         // Truncate `src` without dropping its contents. We do this first,\n///         // to avoid problems in case something further down panics.\n///         src.set_len(0);\n///\n///         // The two regions cannot overlap because mutable references do\n///         // not alias, and two different vectors cannot own the same\n///         // memory.\n///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n///\n///         // Notify `dst` that it now holds the contents of `src`.\n///         dst.set_len(dst_len + src_len);\n///     }\n/// }\n///\n/// let mut a = vec!['r'];\n/// let mut b = vec!['u', 's', 't'];\n///\n/// append(&mut a, &mut b);\n///\n/// assert_eq!(a, &['r', 'u', 's', 't']);\n/// assert!(b.is_empty());\n/// ```\n///\n/// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n#[doc(alias = \"memcpy\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n#[rustc_diagnostic_item = \"ptr_copy_nonoverlapping\"]\npub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n    extern \"rust-intrinsic\" {\n        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n        #[rustc_nounwind]\n        pub fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n    }\n\n    ub_checks::assert_unsafe_precondition!(\n        check_language_ub,\n        \"ptr::copy_nonoverlapping requires that both pointer arguments are aligned and non-null \\\n        and the specified memory ranges do not overlap\",\n        (\n            src: *const () = src as *const (),\n            dst: *mut () = dst as *mut (),\n            size: usize = size_of::<T>(),\n            align: usize = align_of::<T>(),\n            count: usize = count,\n        ) =>\n        ub_checks::is_aligned_and_not_null(src, align)\n            && ub_checks::is_aligned_and_not_null(dst, align)\n            && ub_checks::is_nonoverlapping(src, dst, size, count)\n    );\n\n    // SAFETY: the safety contract for `copy_nonoverlapping` must be\n    // upheld by the caller.\n    unsafe { copy_nonoverlapping(src, dst, count) }\n}\n\n/// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source\n/// and destination may overlap.\n///\n/// If the source and destination will *never* overlap,\n/// [`copy_nonoverlapping`] can be used instead.\n///\n/// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n/// order swapped. Copying takes place as if the bytes were copied from `src`\n/// to a temporary array and then copied from the array to `dst`.\n///\n/// The copy is \"untyped\" in the sense that data may be uninitialized or otherwise violate the\n/// requirements of `T`. The initialization state is preserved exactly.\n///\n/// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `src` must be [valid] for reads of `count * size_of::<T>()` bytes, and must remain valid even\n///   when `dst` is written for `count * size_of::<T>()` bytes. (This means if the memory ranges\n///   overlap, the two pointers must not be subject to aliasing restrictions relative to each\n///   other.)\n///\n/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes, and must remain valid even\n///   when `src` is read for `count * size_of::<T>()` bytes.\n///\n/// * Both `src` and `dst` must be properly aligned.\n///\n/// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n/// in the region beginning at `*src` and the region beginning at `*dst` can\n/// [violate memory safety][read-ownership].\n///\n/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n/// `0`, the pointers must be non-null and properly aligned.\n///\n/// [`read`]: crate::ptr::read\n/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Efficiently create a Rust vector from an unsafe buffer:\n///\n/// ```\n/// use std::ptr;\n///\n/// /// # Safety\n/// ///\n/// /// * `ptr` must be correctly aligned for its type and non-zero.\n/// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n/// /// * Those elements must not be used after calling this function unless `T: Copy`.\n/// # #[allow(dead_code)]\n/// unsafe fn from_buf_raw<T>(ptr: *const T, elts: usize) -> Vec<T> {\n///     let mut dst = Vec::with_capacity(elts);\n///\n///     // SAFETY: Our precondition ensures the source is aligned and valid,\n///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n///\n///     // SAFETY: We created it with this much capacity earlier,\n///     // and the previous `copy` has initialized these elements.\n///     dst.set_len(elts);\n///     dst\n/// }\n/// ```\n#[doc(alias = \"memmove\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n#[rustc_diagnostic_item = \"ptr_copy\"]\npub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n    extern \"rust-intrinsic\" {\n        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n        #[rustc_nounwind]\n        fn copy<T>(src: *const T, dst: *mut T, count: usize);\n    }\n\n    // SAFETY: the safety contract for `copy` must be upheld by the caller.\n    unsafe {\n        ub_checks::assert_unsafe_precondition!(\n            check_language_ub,\n            \"ptr::copy_nonoverlapping requires that both pointer arguments are aligned and non-null \\\n            and the specified memory ranges do not overlap\",\n            (\n                src: *const () = src as *const (),\n                dst: *mut () = dst as *mut (),\n                align: usize = align_of::<T>(),\n            ) =>\n            ub_checks::is_aligned_and_not_null(src, align)\n                && ub_checks::is_aligned_and_not_null(dst, align)\n        );\n        copy(src, dst, count)\n    }\n}\n\n/// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n/// `val`.\n///\n/// `write_bytes` is similar to C's [`memset`], but sets `count *\n/// size_of::<T>()` bytes to `val`.\n///\n/// [`memset`]: https://en.cppreference.com/w/c/string/byte/memset\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `dst` must be [valid] for writes of `count * size_of::<T>()` bytes.\n///\n/// * `dst` must be properly aligned.\n///\n/// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n/// `0`, the pointer must be non-null and properly aligned.\n///\n/// Additionally, note that changing `*dst` in this way can easily lead to undefined behavior (UB)\n/// later if the written bytes are not a valid representation of some `T`. For instance, the\n/// following is an **incorrect** use of this function:\n///\n/// ```rust,no_run\n/// unsafe {\n///     let mut value: u8 = 0;\n///     let ptr: *mut bool = &mut value as *mut u8 as *mut bool;\n///     let _bool = ptr.read(); // This is fine, `ptr` points to a valid `bool`.\n///     ptr.write_bytes(42u8, 1); // This function itself does not cause UB...\n///     let _bool = ptr.read(); // ...but it makes this operation UB! ⚠️\n/// }\n/// ```\n///\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// use std::ptr;\n///\n/// let mut vec = vec![0u32; 4];\n/// unsafe {\n///     let vec_ptr = vec.as_mut_ptr();\n///     ptr::write_bytes(vec_ptr, 0xfe, 2);\n/// }\n/// assert_eq!(vec, [0xfefefefe, 0xfefefefe, 0, 0]);\n/// ```\n#[doc(alias = \"memset\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n#[rustc_diagnostic_item = \"ptr_write_bytes\"]\npub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n    extern \"rust-intrinsic\" {\n        #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n        #[rustc_nounwind]\n        fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n    }\n\n    // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n    unsafe {\n        ub_checks::assert_unsafe_precondition!(\n            check_language_ub,\n            \"ptr::write_bytes requires that the destination pointer is aligned and non-null\",\n            (\n                addr: *const () = dst as *const (),\n                align: usize = align_of::<T>(),\n            ) => ub_checks::is_aligned_and_not_null(addr, align)\n        );\n        write_bytes(dst, val, count)\n    }\n}\n\n/// Inform Miri that a given pointer definitely has a certain alignment.\n#[cfg(miri)]\npub(crate) const fn miri_promise_symbolic_alignment(ptr: *const (), align: usize) {\n    extern \"Rust\" {\n        /// Miri-provided extern function to promise that a given pointer is properly aligned for\n        /// \"symbolic\" alignment checks. Will fail if the pointer is not actually aligned or `align` is\n        /// not a power of two. Has no effect when alignment checks are concrete (which is the default).\n        fn miri_promise_symbolic_alignment(ptr: *const (), align: usize);\n    }\n\n    fn runtime(ptr: *const (), align: usize) {\n        // SAFETY: this call is always safe.\n        unsafe {\n            miri_promise_symbolic_alignment(ptr, align);\n        }\n    }\n\n    const fn compiletime(_ptr: *const (), _align: usize) {}\n\n    const_eval_select((ptr, align), compiletime, runtime);\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/intrinsics.rs`.\"><title>intrinsics.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/any.rs.html\">any.rs</a><a href=\"../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/default.rs.html\">default.rs</a><a href=\"../../src/core/error.rs.html\">error.rs</a><a href=\"../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../src/core/intrinsics.rs.html\" class=\"selected\">intrinsics.rs</a><a href=\"../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../src/core/option.rs.html\">option.rs</a><a href=\"../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../src/core/result.rs.html\">result.rs</a><a href=\"../../src/core/time.rs.html\">time.rs</a><a href=\"../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/env.rs.html\">env.rs</a><a href=\"../../src/std/error.rs.html\">error.rs</a><a href=\"../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../src/std/num.rs.html\">num.rs</a><a href=\"../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../src/std/path.rs.html\">path.rs</a><a href=\"../../src/std/process.rs.html\">process.rs</a><a href=\"../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../src/test/console.rs.html\">console.rs</a><a href=\"../../src/test/event.rs.html\">event.rs</a><a href=\"../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../src/test/options.rs.html\">options.rs</a><a href=\"../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../src/test/term.rs.html\">term.rs</a><a href=\"../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../src/test/time.rs.html\">time.rs</a><a href=\"../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n<a href=\"#1939\" id=\"1939\">1939</a>\n<a href=\"#1940\" id=\"1940\">1940</a>\n<a href=\"#1941\" id=\"1941\">1941</a>\n<a href=\"#1942\" id=\"1942\">1942</a>\n<a href=\"#1943\" id=\"1943\">1943</a>\n<a href=\"#1944\" id=\"1944\">1944</a>\n<a href=\"#1945\" id=\"1945\">1945</a>\n<a href=\"#1946\" id=\"1946\">1946</a>\n<a href=\"#1947\" id=\"1947\">1947</a>\n<a href=\"#1948\" id=\"1948\">1948</a>\n<a href=\"#1949\" id=\"1949\">1949</a>\n<a href=\"#1950\" id=\"1950\">1950</a>\n<a href=\"#1951\" id=\"1951\">1951</a>\n<a href=\"#1952\" id=\"1952\">1952</a>\n<a href=\"#1953\" id=\"1953\">1953</a>\n<a href=\"#1954\" id=\"1954\">1954</a>\n<a href=\"#1955\" id=\"1955\">1955</a>\n<a href=\"#1956\" id=\"1956\">1956</a>\n<a href=\"#1957\" id=\"1957\">1957</a>\n<a href=\"#1958\" id=\"1958\">1958</a>\n<a href=\"#1959\" id=\"1959\">1959</a>\n<a href=\"#1960\" id=\"1960\">1960</a>\n<a href=\"#1961\" id=\"1961\">1961</a>\n<a href=\"#1962\" id=\"1962\">1962</a>\n<a href=\"#1963\" id=\"1963\">1963</a>\n<a href=\"#1964\" id=\"1964\">1964</a>\n<a href=\"#1965\" id=\"1965\">1965</a>\n<a href=\"#1966\" id=\"1966\">1966</a>\n<a href=\"#1967\" id=\"1967\">1967</a>\n<a href=\"#1968\" id=\"1968\">1968</a>\n<a href=\"#1969\" id=\"1969\">1969</a>\n<a href=\"#1970\" id=\"1970\">1970</a>\n<a href=\"#1971\" id=\"1971\">1971</a>\n<a href=\"#1972\" id=\"1972\">1972</a>\n<a href=\"#1973\" id=\"1973\">1973</a>\n<a href=\"#1974\" id=\"1974\">1974</a>\n<a href=\"#1975\" id=\"1975\">1975</a>\n<a href=\"#1976\" id=\"1976\">1976</a>\n<a href=\"#1977\" id=\"1977\">1977</a>\n<a href=\"#1978\" id=\"1978\">1978</a>\n<a href=\"#1979\" id=\"1979\">1979</a>\n<a href=\"#1980\" id=\"1980\">1980</a>\n<a href=\"#1981\" id=\"1981\">1981</a>\n<a href=\"#1982\" id=\"1982\">1982</a>\n<a href=\"#1983\" id=\"1983\">1983</a>\n<a href=\"#1984\" id=\"1984\">1984</a>\n<a href=\"#1985\" id=\"1985\">1985</a>\n<a href=\"#1986\" id=\"1986\">1986</a>\n<a href=\"#1987\" id=\"1987\">1987</a>\n<a href=\"#1988\" id=\"1988\">1988</a>\n<a href=\"#1989\" id=\"1989\">1989</a>\n<a href=\"#1990\" id=\"1990\">1990</a>\n<a href=\"#1991\" id=\"1991\">1991</a>\n<a href=\"#1992\" id=\"1992\">1992</a>\n<a href=\"#1993\" id=\"1993\">1993</a>\n<a href=\"#1994\" id=\"1994\">1994</a>\n<a href=\"#1995\" id=\"1995\">1995</a>\n<a href=\"#1996\" id=\"1996\">1996</a>\n<a href=\"#1997\" id=\"1997\">1997</a>\n<a href=\"#1998\" id=\"1998\">1998</a>\n<a href=\"#1999\" id=\"1999\">1999</a>\n<a href=\"#2000\" id=\"2000\">2000</a>\n<a href=\"#2001\" id=\"2001\">2001</a>\n<a href=\"#2002\" id=\"2002\">2002</a>\n<a href=\"#2003\" id=\"2003\">2003</a>\n<a href=\"#2004\" id=\"2004\">2004</a>\n<a href=\"#2005\" id=\"2005\">2005</a>\n<a href=\"#2006\" id=\"2006\">2006</a>\n<a href=\"#2007\" id=\"2007\">2007</a>\n<a href=\"#2008\" id=\"2008\">2008</a>\n<a href=\"#2009\" id=\"2009\">2009</a>\n<a href=\"#2010\" id=\"2010\">2010</a>\n<a href=\"#2011\" id=\"2011\">2011</a>\n<a href=\"#2012\" id=\"2012\">2012</a>\n<a href=\"#2013\" id=\"2013\">2013</a>\n<a href=\"#2014\" id=\"2014\">2014</a>\n<a href=\"#2015\" id=\"2015\">2015</a>\n<a href=\"#2016\" id=\"2016\">2016</a>\n<a href=\"#2017\" id=\"2017\">2017</a>\n<a href=\"#2018\" id=\"2018\">2018</a>\n<a href=\"#2019\" id=\"2019\">2019</a>\n<a href=\"#2020\" id=\"2020\">2020</a>\n<a href=\"#2021\" id=\"2021\">2021</a>\n<a href=\"#2022\" id=\"2022\">2022</a>\n<a href=\"#2023\" id=\"2023\">2023</a>\n<a href=\"#2024\" id=\"2024\">2024</a>\n<a href=\"#2025\" id=\"2025\">2025</a>\n<a href=\"#2026\" id=\"2026\">2026</a>\n<a href=\"#2027\" id=\"2027\">2027</a>\n<a href=\"#2028\" id=\"2028\">2028</a>\n<a href=\"#2029\" id=\"2029\">2029</a>\n<a href=\"#2030\" id=\"2030\">2030</a>\n<a href=\"#2031\" id=\"2031\">2031</a>\n<a href=\"#2032\" id=\"2032\">2032</a>\n<a href=\"#2033\" id=\"2033\">2033</a>\n<a href=\"#2034\" id=\"2034\">2034</a>\n<a href=\"#2035\" id=\"2035\">2035</a>\n<a href=\"#2036\" id=\"2036\">2036</a>\n<a href=\"#2037\" id=\"2037\">2037</a>\n<a href=\"#2038\" id=\"2038\">2038</a>\n<a href=\"#2039\" id=\"2039\">2039</a>\n<a href=\"#2040\" id=\"2040\">2040</a>\n<a href=\"#2041\" id=\"2041\">2041</a>\n<a href=\"#2042\" id=\"2042\">2042</a>\n<a href=\"#2043\" id=\"2043\">2043</a>\n<a href=\"#2044\" id=\"2044\">2044</a>\n<a href=\"#2045\" id=\"2045\">2045</a>\n<a href=\"#2046\" id=\"2046\">2046</a>\n<a href=\"#2047\" id=\"2047\">2047</a>\n<a href=\"#2048\" id=\"2048\">2048</a>\n<a href=\"#2049\" id=\"2049\">2049</a>\n<a href=\"#2050\" id=\"2050\">2050</a>\n<a href=\"#2051\" id=\"2051\">2051</a>\n<a href=\"#2052\" id=\"2052\">2052</a>\n<a href=\"#2053\" id=\"2053\">2053</a>\n<a href=\"#2054\" id=\"2054\">2054</a>\n<a href=\"#2055\" id=\"2055\">2055</a>\n<a href=\"#2056\" id=\"2056\">2056</a>\n<a href=\"#2057\" id=\"2057\">2057</a>\n<a href=\"#2058\" id=\"2058\">2058</a>\n<a href=\"#2059\" id=\"2059\">2059</a>\n<a href=\"#2060\" id=\"2060\">2060</a>\n<a href=\"#2061\" id=\"2061\">2061</a>\n<a href=\"#2062\" id=\"2062\">2062</a>\n<a href=\"#2063\" id=\"2063\">2063</a>\n<a href=\"#2064\" id=\"2064\">2064</a>\n<a href=\"#2065\" id=\"2065\">2065</a>\n<a href=\"#2066\" id=\"2066\">2066</a>\n<a href=\"#2067\" id=\"2067\">2067</a>\n<a href=\"#2068\" id=\"2068\">2068</a>\n<a href=\"#2069\" id=\"2069\">2069</a>\n<a href=\"#2070\" id=\"2070\">2070</a>\n<a href=\"#2071\" id=\"2071\">2071</a>\n<a href=\"#2072\" id=\"2072\">2072</a>\n<a href=\"#2073\" id=\"2073\">2073</a>\n<a href=\"#2074\" id=\"2074\">2074</a>\n<a href=\"#2075\" id=\"2075\">2075</a>\n<a href=\"#2076\" id=\"2076\">2076</a>\n<a href=\"#2077\" id=\"2077\">2077</a>\n<a href=\"#2078\" id=\"2078\">2078</a>\n<a href=\"#2079\" id=\"2079\">2079</a>\n<a href=\"#2080\" id=\"2080\">2080</a>\n<a href=\"#2081\" id=\"2081\">2081</a>\n<a href=\"#2082\" id=\"2082\">2082</a>\n<a href=\"#2083\" id=\"2083\">2083</a>\n<a href=\"#2084\" id=\"2084\">2084</a>\n<a href=\"#2085\" id=\"2085\">2085</a>\n<a href=\"#2086\" id=\"2086\">2086</a>\n<a href=\"#2087\" id=\"2087\">2087</a>\n<a href=\"#2088\" id=\"2088\">2088</a>\n<a href=\"#2089\" id=\"2089\">2089</a>\n<a href=\"#2090\" id=\"2090\">2090</a>\n<a href=\"#2091\" id=\"2091\">2091</a>\n<a href=\"#2092\" id=\"2092\">2092</a>\n<a href=\"#2093\" id=\"2093\">2093</a>\n<a href=\"#2094\" id=\"2094\">2094</a>\n<a href=\"#2095\" id=\"2095\">2095</a>\n<a href=\"#2096\" id=\"2096\">2096</a>\n<a href=\"#2097\" id=\"2097\">2097</a>\n<a href=\"#2098\" id=\"2098\">2098</a>\n<a href=\"#2099\" id=\"2099\">2099</a>\n<a href=\"#2100\" id=\"2100\">2100</a>\n<a href=\"#2101\" id=\"2101\">2101</a>\n<a href=\"#2102\" id=\"2102\">2102</a>\n<a href=\"#2103\" id=\"2103\">2103</a>\n<a href=\"#2104\" id=\"2104\">2104</a>\n<a href=\"#2105\" id=\"2105\">2105</a>\n<a href=\"#2106\" id=\"2106\">2106</a>\n<a href=\"#2107\" id=\"2107\">2107</a>\n<a href=\"#2108\" id=\"2108\">2108</a>\n<a href=\"#2109\" id=\"2109\">2109</a>\n<a href=\"#2110\" id=\"2110\">2110</a>\n<a href=\"#2111\" id=\"2111\">2111</a>\n<a href=\"#2112\" id=\"2112\">2112</a>\n<a href=\"#2113\" id=\"2113\">2113</a>\n<a href=\"#2114\" id=\"2114\">2114</a>\n<a href=\"#2115\" id=\"2115\">2115</a>\n<a href=\"#2116\" id=\"2116\">2116</a>\n<a href=\"#2117\" id=\"2117\">2117</a>\n<a href=\"#2118\" id=\"2118\">2118</a>\n<a href=\"#2119\" id=\"2119\">2119</a>\n<a href=\"#2120\" id=\"2120\">2120</a>\n<a href=\"#2121\" id=\"2121\">2121</a>\n<a href=\"#2122\" id=\"2122\">2122</a>\n<a href=\"#2123\" id=\"2123\">2123</a>\n<a href=\"#2124\" id=\"2124\">2124</a>\n<a href=\"#2125\" id=\"2125\">2125</a>\n<a href=\"#2126\" id=\"2126\">2126</a>\n<a href=\"#2127\" id=\"2127\">2127</a>\n<a href=\"#2128\" id=\"2128\">2128</a>\n<a href=\"#2129\" id=\"2129\">2129</a>\n<a href=\"#2130\" id=\"2130\">2130</a>\n<a href=\"#2131\" id=\"2131\">2131</a>\n<a href=\"#2132\" id=\"2132\">2132</a>\n<a href=\"#2133\" id=\"2133\">2133</a>\n<a href=\"#2134\" id=\"2134\">2134</a>\n<a href=\"#2135\" id=\"2135\">2135</a>\n<a href=\"#2136\" id=\"2136\">2136</a>\n<a href=\"#2137\" id=\"2137\">2137</a>\n<a href=\"#2138\" id=\"2138\">2138</a>\n<a href=\"#2139\" id=\"2139\">2139</a>\n<a href=\"#2140\" id=\"2140\">2140</a>\n<a href=\"#2141\" id=\"2141\">2141</a>\n<a href=\"#2142\" id=\"2142\">2142</a>\n<a href=\"#2143\" id=\"2143\">2143</a>\n<a href=\"#2144\" id=\"2144\">2144</a>\n<a href=\"#2145\" id=\"2145\">2145</a>\n<a href=\"#2146\" id=\"2146\">2146</a>\n<a href=\"#2147\" id=\"2147\">2147</a>\n<a href=\"#2148\" id=\"2148\">2148</a>\n<a href=\"#2149\" id=\"2149\">2149</a>\n<a href=\"#2150\" id=\"2150\">2150</a>\n<a href=\"#2151\" id=\"2151\">2151</a>\n<a href=\"#2152\" id=\"2152\">2152</a>\n<a href=\"#2153\" id=\"2153\">2153</a>\n<a href=\"#2154\" id=\"2154\">2154</a>\n<a href=\"#2155\" id=\"2155\">2155</a>\n<a href=\"#2156\" id=\"2156\">2156</a>\n<a href=\"#2157\" id=\"2157\">2157</a>\n<a href=\"#2158\" id=\"2158\">2158</a>\n<a href=\"#2159\" id=\"2159\">2159</a>\n<a href=\"#2160\" id=\"2160\">2160</a>\n<a href=\"#2161\" id=\"2161\">2161</a>\n<a href=\"#2162\" id=\"2162\">2162</a>\n<a href=\"#2163\" id=\"2163\">2163</a>\n<a href=\"#2164\" id=\"2164\">2164</a>\n<a href=\"#2165\" id=\"2165\">2165</a>\n<a href=\"#2166\" id=\"2166\">2166</a>\n<a href=\"#2167\" id=\"2167\">2167</a>\n<a href=\"#2168\" id=\"2168\">2168</a>\n<a href=\"#2169\" id=\"2169\">2169</a>\n<a href=\"#2170\" id=\"2170\">2170</a>\n<a href=\"#2171\" id=\"2171\">2171</a>\n<a href=\"#2172\" id=\"2172\">2172</a>\n<a href=\"#2173\" id=\"2173\">2173</a>\n<a href=\"#2174\" id=\"2174\">2174</a>\n<a href=\"#2175\" id=\"2175\">2175</a>\n<a href=\"#2176\" id=\"2176\">2176</a>\n<a href=\"#2177\" id=\"2177\">2177</a>\n<a href=\"#2178\" id=\"2178\">2178</a>\n<a href=\"#2179\" id=\"2179\">2179</a>\n<a href=\"#2180\" id=\"2180\">2180</a>\n<a href=\"#2181\" id=\"2181\">2181</a>\n<a href=\"#2182\" id=\"2182\">2182</a>\n<a href=\"#2183\" id=\"2183\">2183</a>\n<a href=\"#2184\" id=\"2184\">2184</a>\n<a href=\"#2185\" id=\"2185\">2185</a>\n<a href=\"#2186\" id=\"2186\">2186</a>\n<a href=\"#2187\" id=\"2187\">2187</a>\n<a href=\"#2188\" id=\"2188\">2188</a>\n<a href=\"#2189\" id=\"2189\">2189</a>\n<a href=\"#2190\" id=\"2190\">2190</a>\n<a href=\"#2191\" id=\"2191\">2191</a>\n<a href=\"#2192\" id=\"2192\">2192</a>\n<a href=\"#2193\" id=\"2193\">2193</a>\n<a href=\"#2194\" id=\"2194\">2194</a>\n<a href=\"#2195\" id=\"2195\">2195</a>\n<a href=\"#2196\" id=\"2196\">2196</a>\n<a href=\"#2197\" id=\"2197\">2197</a>\n<a href=\"#2198\" id=\"2198\">2198</a>\n<a href=\"#2199\" id=\"2199\">2199</a>\n<a href=\"#2200\" id=\"2200\">2200</a>\n<a href=\"#2201\" id=\"2201\">2201</a>\n<a href=\"#2202\" id=\"2202\">2202</a>\n<a href=\"#2203\" id=\"2203\">2203</a>\n<a href=\"#2204\" id=\"2204\">2204</a>\n<a href=\"#2205\" id=\"2205\">2205</a>\n<a href=\"#2206\" id=\"2206\">2206</a>\n<a href=\"#2207\" id=\"2207\">2207</a>\n<a href=\"#2208\" id=\"2208\">2208</a>\n<a href=\"#2209\" id=\"2209\">2209</a>\n<a href=\"#2210\" id=\"2210\">2210</a>\n<a href=\"#2211\" id=\"2211\">2211</a>\n<a href=\"#2212\" id=\"2212\">2212</a>\n<a href=\"#2213\" id=\"2213\">2213</a>\n<a href=\"#2214\" id=\"2214\">2214</a>\n<a href=\"#2215\" id=\"2215\">2215</a>\n<a href=\"#2216\" id=\"2216\">2216</a>\n<a href=\"#2217\" id=\"2217\">2217</a>\n<a href=\"#2218\" id=\"2218\">2218</a>\n<a href=\"#2219\" id=\"2219\">2219</a>\n<a href=\"#2220\" id=\"2220\">2220</a>\n<a href=\"#2221\" id=\"2221\">2221</a>\n<a href=\"#2222\" id=\"2222\">2222</a>\n<a href=\"#2223\" id=\"2223\">2223</a>\n<a href=\"#2224\" id=\"2224\">2224</a>\n<a href=\"#2225\" id=\"2225\">2225</a>\n<a href=\"#2226\" id=\"2226\">2226</a>\n<a href=\"#2227\" id=\"2227\">2227</a>\n<a href=\"#2228\" id=\"2228\">2228</a>\n<a href=\"#2229\" id=\"2229\">2229</a>\n<a href=\"#2230\" id=\"2230\">2230</a>\n<a href=\"#2231\" id=\"2231\">2231</a>\n<a href=\"#2232\" id=\"2232\">2232</a>\n<a href=\"#2233\" id=\"2233\">2233</a>\n<a href=\"#2234\" id=\"2234\">2234</a>\n<a href=\"#2235\" id=\"2235\">2235</a>\n<a href=\"#2236\" id=\"2236\">2236</a>\n<a href=\"#2237\" id=\"2237\">2237</a>\n<a href=\"#2238\" id=\"2238\">2238</a>\n<a href=\"#2239\" id=\"2239\">2239</a>\n<a href=\"#2240\" id=\"2240\">2240</a>\n<a href=\"#2241\" id=\"2241\">2241</a>\n<a href=\"#2242\" id=\"2242\">2242</a>\n<a href=\"#2243\" id=\"2243\">2243</a>\n<a href=\"#2244\" id=\"2244\">2244</a>\n<a href=\"#2245\" id=\"2245\">2245</a>\n<a href=\"#2246\" id=\"2246\">2246</a>\n<a href=\"#2247\" id=\"2247\">2247</a>\n<a href=\"#2248\" id=\"2248\">2248</a>\n<a href=\"#2249\" id=\"2249\">2249</a>\n<a href=\"#2250\" id=\"2250\">2250</a>\n<a href=\"#2251\" id=\"2251\">2251</a>\n<a href=\"#2252\" id=\"2252\">2252</a>\n<a href=\"#2253\" id=\"2253\">2253</a>\n<a href=\"#2254\" id=\"2254\">2254</a>\n<a href=\"#2255\" id=\"2255\">2255</a>\n<a href=\"#2256\" id=\"2256\">2256</a>\n<a href=\"#2257\" id=\"2257\">2257</a>\n<a href=\"#2258\" id=\"2258\">2258</a>\n<a href=\"#2259\" id=\"2259\">2259</a>\n<a href=\"#2260\" id=\"2260\">2260</a>\n<a href=\"#2261\" id=\"2261\">2261</a>\n<a href=\"#2262\" id=\"2262\">2262</a>\n<a href=\"#2263\" id=\"2263\">2263</a>\n<a href=\"#2264\" id=\"2264\">2264</a>\n<a href=\"#2265\" id=\"2265\">2265</a>\n<a href=\"#2266\" id=\"2266\">2266</a>\n<a href=\"#2267\" id=\"2267\">2267</a>\n<a href=\"#2268\" id=\"2268\">2268</a>\n<a href=\"#2269\" id=\"2269\">2269</a>\n<a href=\"#2270\" id=\"2270\">2270</a>\n<a href=\"#2271\" id=\"2271\">2271</a>\n<a href=\"#2272\" id=\"2272\">2272</a>\n<a href=\"#2273\" id=\"2273\">2273</a>\n<a href=\"#2274\" id=\"2274\">2274</a>\n<a href=\"#2275\" id=\"2275\">2275</a>\n<a href=\"#2276\" id=\"2276\">2276</a>\n<a href=\"#2277\" id=\"2277\">2277</a>\n<a href=\"#2278\" id=\"2278\">2278</a>\n<a href=\"#2279\" id=\"2279\">2279</a>\n<a href=\"#2280\" id=\"2280\">2280</a>\n<a href=\"#2281\" id=\"2281\">2281</a>\n<a href=\"#2282\" id=\"2282\">2282</a>\n<a href=\"#2283\" id=\"2283\">2283</a>\n<a href=\"#2284\" id=\"2284\">2284</a>\n<a href=\"#2285\" id=\"2285\">2285</a>\n<a href=\"#2286\" id=\"2286\">2286</a>\n<a href=\"#2287\" id=\"2287\">2287</a>\n<a href=\"#2288\" id=\"2288\">2288</a>\n<a href=\"#2289\" id=\"2289\">2289</a>\n<a href=\"#2290\" id=\"2290\">2290</a>\n<a href=\"#2291\" id=\"2291\">2291</a>\n<a href=\"#2292\" id=\"2292\">2292</a>\n<a href=\"#2293\" id=\"2293\">2293</a>\n<a href=\"#2294\" id=\"2294\">2294</a>\n<a href=\"#2295\" id=\"2295\">2295</a>\n<a href=\"#2296\" id=\"2296\">2296</a>\n<a href=\"#2297\" id=\"2297\">2297</a>\n<a href=\"#2298\" id=\"2298\">2298</a>\n<a href=\"#2299\" id=\"2299\">2299</a>\n<a href=\"#2300\" id=\"2300\">2300</a>\n<a href=\"#2301\" id=\"2301\">2301</a>\n<a href=\"#2302\" id=\"2302\">2302</a>\n<a href=\"#2303\" id=\"2303\">2303</a>\n<a href=\"#2304\" id=\"2304\">2304</a>\n<a href=\"#2305\" id=\"2305\">2305</a>\n<a href=\"#2306\" id=\"2306\">2306</a>\n<a href=\"#2307\" id=\"2307\">2307</a>\n<a href=\"#2308\" id=\"2308\">2308</a>\n<a href=\"#2309\" id=\"2309\">2309</a>\n<a href=\"#2310\" id=\"2310\">2310</a>\n<a href=\"#2311\" id=\"2311\">2311</a>\n<a href=\"#2312\" id=\"2312\">2312</a>\n<a href=\"#2313\" id=\"2313\">2313</a>\n<a href=\"#2314\" id=\"2314\">2314</a>\n<a href=\"#2315\" id=\"2315\">2315</a>\n<a href=\"#2316\" id=\"2316\">2316</a>\n<a href=\"#2317\" id=\"2317\">2317</a>\n<a href=\"#2318\" id=\"2318\">2318</a>\n<a href=\"#2319\" id=\"2319\">2319</a>\n<a href=\"#2320\" id=\"2320\">2320</a>\n<a href=\"#2321\" id=\"2321\">2321</a>\n<a href=\"#2322\" id=\"2322\">2322</a>\n<a href=\"#2323\" id=\"2323\">2323</a>\n<a href=\"#2324\" id=\"2324\">2324</a>\n<a href=\"#2325\" id=\"2325\">2325</a>\n<a href=\"#2326\" id=\"2326\">2326</a>\n<a href=\"#2327\" id=\"2327\">2327</a>\n<a href=\"#2328\" id=\"2328\">2328</a>\n<a href=\"#2329\" id=\"2329\">2329</a>\n<a href=\"#2330\" id=\"2330\">2330</a>\n<a href=\"#2331\" id=\"2331\">2331</a>\n<a href=\"#2332\" id=\"2332\">2332</a>\n<a href=\"#2333\" id=\"2333\">2333</a>\n<a href=\"#2334\" id=\"2334\">2334</a>\n<a href=\"#2335\" id=\"2335\">2335</a>\n<a href=\"#2336\" id=\"2336\">2336</a>\n<a href=\"#2337\" id=\"2337\">2337</a>\n<a href=\"#2338\" id=\"2338\">2338</a>\n<a href=\"#2339\" id=\"2339\">2339</a>\n<a href=\"#2340\" id=\"2340\">2340</a>\n<a href=\"#2341\" id=\"2341\">2341</a>\n<a href=\"#2342\" id=\"2342\">2342</a>\n<a href=\"#2343\" id=\"2343\">2343</a>\n<a href=\"#2344\" id=\"2344\">2344</a>\n<a href=\"#2345\" id=\"2345\">2345</a>\n<a href=\"#2346\" id=\"2346\">2346</a>\n<a href=\"#2347\" id=\"2347\">2347</a>\n<a href=\"#2348\" id=\"2348\">2348</a>\n<a href=\"#2349\" id=\"2349\">2349</a>\n<a href=\"#2350\" id=\"2350\">2350</a>\n<a href=\"#2351\" id=\"2351\">2351</a>\n<a href=\"#2352\" id=\"2352\">2352</a>\n<a href=\"#2353\" id=\"2353\">2353</a>\n<a href=\"#2354\" id=\"2354\">2354</a>\n<a href=\"#2355\" id=\"2355\">2355</a>\n<a href=\"#2356\" id=\"2356\">2356</a>\n<a href=\"#2357\" id=\"2357\">2357</a>\n<a href=\"#2358\" id=\"2358\">2358</a>\n<a href=\"#2359\" id=\"2359\">2359</a>\n<a href=\"#2360\" id=\"2360\">2360</a>\n<a href=\"#2361\" id=\"2361\">2361</a>\n<a href=\"#2362\" id=\"2362\">2362</a>\n<a href=\"#2363\" id=\"2363\">2363</a>\n<a href=\"#2364\" id=\"2364\">2364</a>\n<a href=\"#2365\" id=\"2365\">2365</a>\n<a href=\"#2366\" id=\"2366\">2366</a>\n<a href=\"#2367\" id=\"2367\">2367</a>\n<a href=\"#2368\" id=\"2368\">2368</a>\n<a href=\"#2369\" id=\"2369\">2369</a>\n<a href=\"#2370\" id=\"2370\">2370</a>\n<a href=\"#2371\" id=\"2371\">2371</a>\n<a href=\"#2372\" id=\"2372\">2372</a>\n<a href=\"#2373\" id=\"2373\">2373</a>\n<a href=\"#2374\" id=\"2374\">2374</a>\n<a href=\"#2375\" id=\"2375\">2375</a>\n<a href=\"#2376\" id=\"2376\">2376</a>\n<a href=\"#2377\" id=\"2377\">2377</a>\n<a href=\"#2378\" id=\"2378\">2378</a>\n<a href=\"#2379\" id=\"2379\">2379</a>\n<a href=\"#2380\" id=\"2380\">2380</a>\n<a href=\"#2381\" id=\"2381\">2381</a>\n<a href=\"#2382\" id=\"2382\">2382</a>\n<a href=\"#2383\" id=\"2383\">2383</a>\n<a href=\"#2384\" id=\"2384\">2384</a>\n<a href=\"#2385\" id=\"2385\">2385</a>\n<a href=\"#2386\" id=\"2386\">2386</a>\n<a href=\"#2387\" id=\"2387\">2387</a>\n<a href=\"#2388\" id=\"2388\">2388</a>\n<a href=\"#2389\" id=\"2389\">2389</a>\n<a href=\"#2390\" id=\"2390\">2390</a>\n<a href=\"#2391\" id=\"2391\">2391</a>\n<a href=\"#2392\" id=\"2392\">2392</a>\n<a href=\"#2393\" id=\"2393\">2393</a>\n<a href=\"#2394\" id=\"2394\">2394</a>\n<a href=\"#2395\" id=\"2395\">2395</a>\n<a href=\"#2396\" id=\"2396\">2396</a>\n<a href=\"#2397\" id=\"2397\">2397</a>\n<a href=\"#2398\" id=\"2398\">2398</a>\n<a href=\"#2399\" id=\"2399\">2399</a>\n<a href=\"#2400\" id=\"2400\">2400</a>\n<a href=\"#2401\" id=\"2401\">2401</a>\n<a href=\"#2402\" id=\"2402\">2402</a>\n<a href=\"#2403\" id=\"2403\">2403</a>\n<a href=\"#2404\" id=\"2404\">2404</a>\n<a href=\"#2405\" id=\"2405\">2405</a>\n<a href=\"#2406\" id=\"2406\">2406</a>\n<a href=\"#2407\" id=\"2407\">2407</a>\n<a href=\"#2408\" id=\"2408\">2408</a>\n<a href=\"#2409\" id=\"2409\">2409</a>\n<a href=\"#2410\" id=\"2410\">2410</a>\n<a href=\"#2411\" id=\"2411\">2411</a>\n<a href=\"#2412\" id=\"2412\">2412</a>\n<a href=\"#2413\" id=\"2413\">2413</a>\n<a href=\"#2414\" id=\"2414\">2414</a>\n<a href=\"#2415\" id=\"2415\">2415</a>\n<a href=\"#2416\" id=\"2416\">2416</a>\n<a href=\"#2417\" id=\"2417\">2417</a>\n<a href=\"#2418\" id=\"2418\">2418</a>\n<a href=\"#2419\" id=\"2419\">2419</a>\n<a href=\"#2420\" id=\"2420\">2420</a>\n<a href=\"#2421\" id=\"2421\">2421</a>\n<a href=\"#2422\" id=\"2422\">2422</a>\n<a href=\"#2423\" id=\"2423\">2423</a>\n<a href=\"#2424\" id=\"2424\">2424</a>\n<a href=\"#2425\" id=\"2425\">2425</a>\n<a href=\"#2426\" id=\"2426\">2426</a>\n<a href=\"#2427\" id=\"2427\">2427</a>\n<a href=\"#2428\" id=\"2428\">2428</a>\n<a href=\"#2429\" id=\"2429\">2429</a>\n<a href=\"#2430\" id=\"2430\">2430</a>\n<a href=\"#2431\" id=\"2431\">2431</a>\n<a href=\"#2432\" id=\"2432\">2432</a>\n<a href=\"#2433\" id=\"2433\">2433</a>\n<a href=\"#2434\" id=\"2434\">2434</a>\n<a href=\"#2435\" id=\"2435\">2435</a>\n<a href=\"#2436\" id=\"2436\">2436</a>\n<a href=\"#2437\" id=\"2437\">2437</a>\n<a href=\"#2438\" id=\"2438\">2438</a>\n<a href=\"#2439\" id=\"2439\">2439</a>\n<a href=\"#2440\" id=\"2440\">2440</a>\n<a href=\"#2441\" id=\"2441\">2441</a>\n<a href=\"#2442\" id=\"2442\">2442</a>\n<a href=\"#2443\" id=\"2443\">2443</a>\n<a href=\"#2444\" id=\"2444\">2444</a>\n<a href=\"#2445\" id=\"2445\">2445</a>\n<a href=\"#2446\" id=\"2446\">2446</a>\n<a href=\"#2447\" id=\"2447\">2447</a>\n<a href=\"#2448\" id=\"2448\">2448</a>\n<a href=\"#2449\" id=\"2449\">2449</a>\n<a href=\"#2450\" id=\"2450\">2450</a>\n<a href=\"#2451\" id=\"2451\">2451</a>\n<a href=\"#2452\" id=\"2452\">2452</a>\n<a href=\"#2453\" id=\"2453\">2453</a>\n<a href=\"#2454\" id=\"2454\">2454</a>\n<a href=\"#2455\" id=\"2455\">2455</a>\n<a href=\"#2456\" id=\"2456\">2456</a>\n<a href=\"#2457\" id=\"2457\">2457</a>\n<a href=\"#2458\" id=\"2458\">2458</a>\n<a href=\"#2459\" id=\"2459\">2459</a>\n<a href=\"#2460\" id=\"2460\">2460</a>\n<a href=\"#2461\" id=\"2461\">2461</a>\n<a href=\"#2462\" id=\"2462\">2462</a>\n<a href=\"#2463\" id=\"2463\">2463</a>\n<a href=\"#2464\" id=\"2464\">2464</a>\n<a href=\"#2465\" id=\"2465\">2465</a>\n<a href=\"#2466\" id=\"2466\">2466</a>\n<a href=\"#2467\" id=\"2467\">2467</a>\n<a href=\"#2468\" id=\"2468\">2468</a>\n<a href=\"#2469\" id=\"2469\">2469</a>\n<a href=\"#2470\" id=\"2470\">2470</a>\n<a href=\"#2471\" id=\"2471\">2471</a>\n<a href=\"#2472\" id=\"2472\">2472</a>\n<a href=\"#2473\" id=\"2473\">2473</a>\n<a href=\"#2474\" id=\"2474\">2474</a>\n<a href=\"#2475\" id=\"2475\">2475</a>\n<a href=\"#2476\" id=\"2476\">2476</a>\n<a href=\"#2477\" id=\"2477\">2477</a>\n<a href=\"#2478\" id=\"2478\">2478</a>\n<a href=\"#2479\" id=\"2479\">2479</a>\n<a href=\"#2480\" id=\"2480\">2480</a>\n<a href=\"#2481\" id=\"2481\">2481</a>\n<a href=\"#2482\" id=\"2482\">2482</a>\n<a href=\"#2483\" id=\"2483\">2483</a>\n<a href=\"#2484\" id=\"2484\">2484</a>\n<a href=\"#2485\" id=\"2485\">2485</a>\n<a href=\"#2486\" id=\"2486\">2486</a>\n<a href=\"#2487\" id=\"2487\">2487</a>\n<a href=\"#2488\" id=\"2488\">2488</a>\n<a href=\"#2489\" id=\"2489\">2489</a>\n<a href=\"#2490\" id=\"2490\">2490</a>\n<a href=\"#2491\" id=\"2491\">2491</a>\n<a href=\"#2492\" id=\"2492\">2492</a>\n<a href=\"#2493\" id=\"2493\">2493</a>\n<a href=\"#2494\" id=\"2494\">2494</a>\n<a href=\"#2495\" id=\"2495\">2495</a>\n<a href=\"#2496\" id=\"2496\">2496</a>\n<a href=\"#2497\" id=\"2497\">2497</a>\n<a href=\"#2498\" id=\"2498\">2498</a>\n<a href=\"#2499\" id=\"2499\">2499</a>\n<a href=\"#2500\" id=\"2500\">2500</a>\n<a href=\"#2501\" id=\"2501\">2501</a>\n<a href=\"#2502\" id=\"2502\">2502</a>\n<a href=\"#2503\" id=\"2503\">2503</a>\n<a href=\"#2504\" id=\"2504\">2504</a>\n<a href=\"#2505\" id=\"2505\">2505</a>\n<a href=\"#2506\" id=\"2506\">2506</a>\n<a href=\"#2507\" id=\"2507\">2507</a>\n<a href=\"#2508\" id=\"2508\">2508</a>\n<a href=\"#2509\" id=\"2509\">2509</a>\n<a href=\"#2510\" id=\"2510\">2510</a>\n<a href=\"#2511\" id=\"2511\">2511</a>\n<a href=\"#2512\" id=\"2512\">2512</a>\n<a href=\"#2513\" id=\"2513\">2513</a>\n<a href=\"#2514\" id=\"2514\">2514</a>\n<a href=\"#2515\" id=\"2515\">2515</a>\n<a href=\"#2516\" id=\"2516\">2516</a>\n<a href=\"#2517\" id=\"2517\">2517</a>\n<a href=\"#2518\" id=\"2518\">2518</a>\n<a href=\"#2519\" id=\"2519\">2519</a>\n<a href=\"#2520\" id=\"2520\">2520</a>\n<a href=\"#2521\" id=\"2521\">2521</a>\n<a href=\"#2522\" id=\"2522\">2522</a>\n<a href=\"#2523\" id=\"2523\">2523</a>\n<a href=\"#2524\" id=\"2524\">2524</a>\n<a href=\"#2525\" id=\"2525\">2525</a>\n<a href=\"#2526\" id=\"2526\">2526</a>\n<a href=\"#2527\" id=\"2527\">2527</a>\n<a href=\"#2528\" id=\"2528\">2528</a>\n<a href=\"#2529\" id=\"2529\">2529</a>\n<a href=\"#2530\" id=\"2530\">2530</a>\n<a href=\"#2531\" id=\"2531\">2531</a>\n<a href=\"#2532\" id=\"2532\">2532</a>\n<a href=\"#2533\" id=\"2533\">2533</a>\n<a href=\"#2534\" id=\"2534\">2534</a>\n<a href=\"#2535\" id=\"2535\">2535</a>\n<a href=\"#2536\" id=\"2536\">2536</a>\n<a href=\"#2537\" id=\"2537\">2537</a>\n<a href=\"#2538\" id=\"2538\">2538</a>\n<a href=\"#2539\" id=\"2539\">2539</a>\n<a href=\"#2540\" id=\"2540\">2540</a>\n<a href=\"#2541\" id=\"2541\">2541</a>\n<a href=\"#2542\" id=\"2542\">2542</a>\n<a href=\"#2543\" id=\"2543\">2543</a>\n<a href=\"#2544\" id=\"2544\">2544</a>\n<a href=\"#2545\" id=\"2545\">2545</a>\n<a href=\"#2546\" id=\"2546\">2546</a>\n<a href=\"#2547\" id=\"2547\">2547</a>\n<a href=\"#2548\" id=\"2548\">2548</a>\n<a href=\"#2549\" id=\"2549\">2549</a>\n<a href=\"#2550\" id=\"2550\">2550</a>\n<a href=\"#2551\" id=\"2551\">2551</a>\n<a href=\"#2552\" id=\"2552\">2552</a>\n<a href=\"#2553\" id=\"2553\">2553</a>\n<a href=\"#2554\" id=\"2554\">2554</a>\n<a href=\"#2555\" id=\"2555\">2555</a>\n<a href=\"#2556\" id=\"2556\">2556</a>\n<a href=\"#2557\" id=\"2557\">2557</a>\n<a href=\"#2558\" id=\"2558\">2558</a>\n<a href=\"#2559\" id=\"2559\">2559</a>\n<a href=\"#2560\" id=\"2560\">2560</a>\n<a href=\"#2561\" id=\"2561\">2561</a>\n<a href=\"#2562\" id=\"2562\">2562</a>\n<a href=\"#2563\" id=\"2563\">2563</a>\n<a href=\"#2564\" id=\"2564\">2564</a>\n<a href=\"#2565\" id=\"2565\">2565</a>\n<a href=\"#2566\" id=\"2566\">2566</a>\n<a href=\"#2567\" id=\"2567\">2567</a>\n<a href=\"#2568\" id=\"2568\">2568</a>\n<a href=\"#2569\" id=\"2569\">2569</a>\n<a href=\"#2570\" id=\"2570\">2570</a>\n<a href=\"#2571\" id=\"2571\">2571</a>\n<a href=\"#2572\" id=\"2572\">2572</a>\n<a href=\"#2573\" id=\"2573\">2573</a>\n<a href=\"#2574\" id=\"2574\">2574</a>\n<a href=\"#2575\" id=\"2575\">2575</a>\n<a href=\"#2576\" id=\"2576\">2576</a>\n<a href=\"#2577\" id=\"2577\">2577</a>\n<a href=\"#2578\" id=\"2578\">2578</a>\n<a href=\"#2579\" id=\"2579\">2579</a>\n<a href=\"#2580\" id=\"2580\">2580</a>\n<a href=\"#2581\" id=\"2581\">2581</a>\n<a href=\"#2582\" id=\"2582\">2582</a>\n<a href=\"#2583\" id=\"2583\">2583</a>\n<a href=\"#2584\" id=\"2584\">2584</a>\n<a href=\"#2585\" id=\"2585\">2585</a>\n<a href=\"#2586\" id=\"2586\">2586</a>\n<a href=\"#2587\" id=\"2587\">2587</a>\n<a href=\"#2588\" id=\"2588\">2588</a>\n<a href=\"#2589\" id=\"2589\">2589</a>\n<a href=\"#2590\" id=\"2590\">2590</a>\n<a href=\"#2591\" id=\"2591\">2591</a>\n<a href=\"#2592\" id=\"2592\">2592</a>\n<a href=\"#2593\" id=\"2593\">2593</a>\n<a href=\"#2594\" id=\"2594\">2594</a>\n<a href=\"#2595\" id=\"2595\">2595</a>\n<a href=\"#2596\" id=\"2596\">2596</a>\n<a href=\"#2597\" id=\"2597\">2597</a>\n<a href=\"#2598\" id=\"2598\">2598</a>\n<a href=\"#2599\" id=\"2599\">2599</a>\n<a href=\"#2600\" id=\"2600\">2600</a>\n<a href=\"#2601\" id=\"2601\">2601</a>\n<a href=\"#2602\" id=\"2602\">2602</a>\n<a href=\"#2603\" id=\"2603\">2603</a>\n<a href=\"#2604\" id=\"2604\">2604</a>\n<a href=\"#2605\" id=\"2605\">2605</a>\n<a href=\"#2606\" id=\"2606\">2606</a>\n<a href=\"#2607\" id=\"2607\">2607</a>\n<a href=\"#2608\" id=\"2608\">2608</a>\n<a href=\"#2609\" id=\"2609\">2609</a>\n<a href=\"#2610\" id=\"2610\">2610</a>\n<a href=\"#2611\" id=\"2611\">2611</a>\n<a href=\"#2612\" id=\"2612\">2612</a>\n<a href=\"#2613\" id=\"2613\">2613</a>\n<a href=\"#2614\" id=\"2614\">2614</a>\n<a href=\"#2615\" id=\"2615\">2615</a>\n<a href=\"#2616\" id=\"2616\">2616</a>\n<a href=\"#2617\" id=\"2617\">2617</a>\n<a href=\"#2618\" id=\"2618\">2618</a>\n<a href=\"#2619\" id=\"2619\">2619</a>\n<a href=\"#2620\" id=\"2620\">2620</a>\n<a href=\"#2621\" id=\"2621\">2621</a>\n<a href=\"#2622\" id=\"2622\">2622</a>\n<a href=\"#2623\" id=\"2623\">2623</a>\n<a href=\"#2624\" id=\"2624\">2624</a>\n<a href=\"#2625\" id=\"2625\">2625</a>\n<a href=\"#2626\" id=\"2626\">2626</a>\n<a href=\"#2627\" id=\"2627\">2627</a>\n<a href=\"#2628\" id=\"2628\">2628</a>\n<a href=\"#2629\" id=\"2629\">2629</a>\n<a href=\"#2630\" id=\"2630\">2630</a>\n<a href=\"#2631\" id=\"2631\">2631</a>\n<a href=\"#2632\" id=\"2632\">2632</a>\n<a href=\"#2633\" id=\"2633\">2633</a>\n<a href=\"#2634\" id=\"2634\">2634</a>\n<a href=\"#2635\" id=\"2635\">2635</a>\n<a href=\"#2636\" id=\"2636\">2636</a>\n<a href=\"#2637\" id=\"2637\">2637</a>\n<a href=\"#2638\" id=\"2638\">2638</a>\n<a href=\"#2639\" id=\"2639\">2639</a>\n<a href=\"#2640\" id=\"2640\">2640</a>\n<a href=\"#2641\" id=\"2641\">2641</a>\n<a href=\"#2642\" id=\"2642\">2642</a>\n<a href=\"#2643\" id=\"2643\">2643</a>\n<a href=\"#2644\" id=\"2644\">2644</a>\n<a href=\"#2645\" id=\"2645\">2645</a>\n<a href=\"#2646\" id=\"2646\">2646</a>\n<a href=\"#2647\" id=\"2647\">2647</a>\n<a href=\"#2648\" id=\"2648\">2648</a>\n<a href=\"#2649\" id=\"2649\">2649</a>\n<a href=\"#2650\" id=\"2650\">2650</a>\n<a href=\"#2651\" id=\"2651\">2651</a>\n<a href=\"#2652\" id=\"2652\">2652</a>\n<a href=\"#2653\" id=\"2653\">2653</a>\n<a href=\"#2654\" id=\"2654\">2654</a>\n<a href=\"#2655\" id=\"2655\">2655</a>\n<a href=\"#2656\" id=\"2656\">2656</a>\n<a href=\"#2657\" id=\"2657\">2657</a>\n<a href=\"#2658\" id=\"2658\">2658</a>\n<a href=\"#2659\" id=\"2659\">2659</a>\n<a href=\"#2660\" id=\"2660\">2660</a>\n<a href=\"#2661\" id=\"2661\">2661</a>\n<a href=\"#2662\" id=\"2662\">2662</a>\n<a href=\"#2663\" id=\"2663\">2663</a>\n<a href=\"#2664\" id=\"2664\">2664</a>\n<a href=\"#2665\" id=\"2665\">2665</a>\n<a href=\"#2666\" id=\"2666\">2666</a>\n<a href=\"#2667\" id=\"2667\">2667</a>\n<a href=\"#2668\" id=\"2668\">2668</a>\n<a href=\"#2669\" id=\"2669\">2669</a>\n<a href=\"#2670\" id=\"2670\">2670</a>\n<a href=\"#2671\" id=\"2671\">2671</a>\n<a href=\"#2672\" id=\"2672\">2672</a>\n<a href=\"#2673\" id=\"2673\">2673</a>\n<a href=\"#2674\" id=\"2674\">2674</a>\n<a href=\"#2675\" id=\"2675\">2675</a>\n<a href=\"#2676\" id=\"2676\">2676</a>\n<a href=\"#2677\" id=\"2677\">2677</a>\n<a href=\"#2678\" id=\"2678\">2678</a>\n<a href=\"#2679\" id=\"2679\">2679</a>\n<a href=\"#2680\" id=\"2680\">2680</a>\n<a href=\"#2681\" id=\"2681\">2681</a>\n<a href=\"#2682\" id=\"2682\">2682</a>\n<a href=\"#2683\" id=\"2683\">2683</a>\n<a href=\"#2684\" id=\"2684\">2684</a>\n<a href=\"#2685\" id=\"2685\">2685</a>\n<a href=\"#2686\" id=\"2686\">2686</a>\n<a href=\"#2687\" id=\"2687\">2687</a>\n<a href=\"#2688\" id=\"2688\">2688</a>\n<a href=\"#2689\" id=\"2689\">2689</a>\n<a href=\"#2690\" id=\"2690\">2690</a>\n<a href=\"#2691\" id=\"2691\">2691</a>\n<a href=\"#2692\" id=\"2692\">2692</a>\n<a href=\"#2693\" id=\"2693\">2693</a>\n<a href=\"#2694\" id=\"2694\">2694</a>\n<a href=\"#2695\" id=\"2695\">2695</a>\n<a href=\"#2696\" id=\"2696\">2696</a>\n<a href=\"#2697\" id=\"2697\">2697</a>\n<a href=\"#2698\" id=\"2698\">2698</a>\n<a href=\"#2699\" id=\"2699\">2699</a>\n<a href=\"#2700\" id=\"2700\">2700</a>\n<a href=\"#2701\" id=\"2701\">2701</a>\n<a href=\"#2702\" id=\"2702\">2702</a>\n<a href=\"#2703\" id=\"2703\">2703</a>\n<a href=\"#2704\" id=\"2704\">2704</a>\n<a href=\"#2705\" id=\"2705\">2705</a>\n<a href=\"#2706\" id=\"2706\">2706</a>\n<a href=\"#2707\" id=\"2707\">2707</a>\n<a href=\"#2708\" id=\"2708\">2708</a>\n<a href=\"#2709\" id=\"2709\">2709</a>\n<a href=\"#2710\" id=\"2710\">2710</a>\n<a href=\"#2711\" id=\"2711\">2711</a>\n<a href=\"#2712\" id=\"2712\">2712</a>\n<a href=\"#2713\" id=\"2713\">2713</a>\n<a href=\"#2714\" id=\"2714\">2714</a>\n<a href=\"#2715\" id=\"2715\">2715</a>\n<a href=\"#2716\" id=\"2716\">2716</a>\n<a href=\"#2717\" id=\"2717\">2717</a>\n<a href=\"#2718\" id=\"2718\">2718</a>\n<a href=\"#2719\" id=\"2719\">2719</a>\n<a href=\"#2720\" id=\"2720\">2720</a>\n<a href=\"#2721\" id=\"2721\">2721</a>\n<a href=\"#2722\" id=\"2722\">2722</a>\n<a href=\"#2723\" id=\"2723\">2723</a>\n<a href=\"#2724\" id=\"2724\">2724</a>\n<a href=\"#2725\" id=\"2725\">2725</a>\n<a href=\"#2726\" id=\"2726\">2726</a>\n<a href=\"#2727\" id=\"2727\">2727</a>\n<a href=\"#2728\" id=\"2728\">2728</a>\n<a href=\"#2729\" id=\"2729\">2729</a>\n<a href=\"#2730\" id=\"2730\">2730</a>\n<a href=\"#2731\" id=\"2731\">2731</a>\n<a href=\"#2732\" id=\"2732\">2732</a>\n<a href=\"#2733\" id=\"2733\">2733</a>\n<a href=\"#2734\" id=\"2734\">2734</a>\n<a href=\"#2735\" id=\"2735\">2735</a>\n<a href=\"#2736\" id=\"2736\">2736</a>\n<a href=\"#2737\" id=\"2737\">2737</a>\n<a href=\"#2738\" id=\"2738\">2738</a>\n<a href=\"#2739\" id=\"2739\">2739</a>\n<a href=\"#2740\" id=\"2740\">2740</a>\n<a href=\"#2741\" id=\"2741\">2741</a>\n<a href=\"#2742\" id=\"2742\">2742</a>\n<a href=\"#2743\" id=\"2743\">2743</a>\n<a href=\"#2744\" id=\"2744\">2744</a>\n<a href=\"#2745\" id=\"2745\">2745</a>\n<a href=\"#2746\" id=\"2746\">2746</a>\n<a href=\"#2747\" id=\"2747\">2747</a>\n<a href=\"#2748\" id=\"2748\">2748</a>\n<a href=\"#2749\" id=\"2749\">2749</a>\n<a href=\"#2750\" id=\"2750\">2750</a>\n<a href=\"#2751\" id=\"2751\">2751</a>\n<a href=\"#2752\" id=\"2752\">2752</a>\n<a href=\"#2753\" id=\"2753\">2753</a>\n<a href=\"#2754\" id=\"2754\">2754</a>\n<a href=\"#2755\" id=\"2755\">2755</a>\n<a href=\"#2756\" id=\"2756\">2756</a>\n<a href=\"#2757\" id=\"2757\">2757</a>\n<a href=\"#2758\" id=\"2758\">2758</a>\n<a href=\"#2759\" id=\"2759\">2759</a>\n<a href=\"#2760\" id=\"2760\">2760</a>\n<a href=\"#2761\" id=\"2761\">2761</a>\n<a href=\"#2762\" id=\"2762\">2762</a>\n<a href=\"#2763\" id=\"2763\">2763</a>\n<a href=\"#2764\" id=\"2764\">2764</a>\n<a href=\"#2765\" id=\"2765\">2765</a>\n<a href=\"#2766\" id=\"2766\">2766</a>\n<a href=\"#2767\" id=\"2767\">2767</a>\n<a href=\"#2768\" id=\"2768\">2768</a>\n<a href=\"#2769\" id=\"2769\">2769</a>\n<a href=\"#2770\" id=\"2770\">2770</a>\n<a href=\"#2771\" id=\"2771\">2771</a>\n<a href=\"#2772\" id=\"2772\">2772</a>\n<a href=\"#2773\" id=\"2773\">2773</a>\n<a href=\"#2774\" id=\"2774\">2774</a>\n<a href=\"#2775\" id=\"2775\">2775</a>\n<a href=\"#2776\" id=\"2776\">2776</a>\n<a href=\"#2777\" id=\"2777\">2777</a>\n<a href=\"#2778\" id=\"2778\">2778</a>\n<a href=\"#2779\" id=\"2779\">2779</a>\n<a href=\"#2780\" id=\"2780\">2780</a>\n<a href=\"#2781\" id=\"2781\">2781</a>\n<a href=\"#2782\" id=\"2782\">2782</a>\n<a href=\"#2783\" id=\"2783\">2783</a>\n<a href=\"#2784\" id=\"2784\">2784</a>\n<a href=\"#2785\" id=\"2785\">2785</a>\n<a href=\"#2786\" id=\"2786\">2786</a>\n<a href=\"#2787\" id=\"2787\">2787</a>\n<a href=\"#2788\" id=\"2788\">2788</a>\n<a href=\"#2789\" id=\"2789\">2789</a>\n<a href=\"#2790\" id=\"2790\">2790</a>\n<a href=\"#2791\" id=\"2791\">2791</a>\n<a href=\"#2792\" id=\"2792\">2792</a>\n<a href=\"#2793\" id=\"2793\">2793</a>\n<a href=\"#2794\" id=\"2794\">2794</a>\n<a href=\"#2795\" id=\"2795\">2795</a>\n<a href=\"#2796\" id=\"2796\">2796</a>\n<a href=\"#2797\" id=\"2797\">2797</a>\n<a href=\"#2798\" id=\"2798\">2798</a>\n<a href=\"#2799\" id=\"2799\">2799</a>\n<a href=\"#2800\" id=\"2800\">2800</a>\n<a href=\"#2801\" id=\"2801\">2801</a>\n<a href=\"#2802\" id=\"2802\">2802</a>\n<a href=\"#2803\" id=\"2803\">2803</a>\n<a href=\"#2804\" id=\"2804\">2804</a>\n<a href=\"#2805\" id=\"2805\">2805</a>\n<a href=\"#2806\" id=\"2806\">2806</a>\n<a href=\"#2807\" id=\"2807\">2807</a>\n<a href=\"#2808\" id=\"2808\">2808</a>\n<a href=\"#2809\" id=\"2809\">2809</a>\n<a href=\"#2810\" id=\"2810\">2810</a>\n<a href=\"#2811\" id=\"2811\">2811</a>\n<a href=\"#2812\" id=\"2812\">2812</a>\n<a href=\"#2813\" id=\"2813\">2813</a>\n<a href=\"#2814\" id=\"2814\">2814</a>\n<a href=\"#2815\" id=\"2815\">2815</a>\n<a href=\"#2816\" id=\"2816\" class=\"line-highlighted\">2816</a>\n<a href=\"#2817\" id=\"2817\">2817</a>\n<a href=\"#2818\" id=\"2818\">2818</a>\n<a href=\"#2819\" id=\"2819\">2819</a>\n<a href=\"#2820\" id=\"2820\">2820</a>\n<a href=\"#2821\" id=\"2821\">2821</a>\n<a href=\"#2822\" id=\"2822\">2822</a>\n<a href=\"#2823\" id=\"2823\">2823</a>\n<a href=\"#2824\" id=\"2824\">2824</a>\n<a href=\"#2825\" id=\"2825\">2825</a>\n<a href=\"#2826\" id=\"2826\">2826</a>\n<a href=\"#2827\" id=\"2827\">2827</a>\n<a href=\"#2828\" id=\"2828\">2828</a>\n<a href=\"#2829\" id=\"2829\">2829</a>\n<a href=\"#2830\" id=\"2830\">2830</a>\n<a href=\"#2831\" id=\"2831\">2831</a>\n<a href=\"#2832\" id=\"2832\">2832</a>\n<a href=\"#2833\" id=\"2833\">2833</a>\n<a href=\"#2834\" id=\"2834\">2834</a>\n<a href=\"#2835\" id=\"2835\">2835</a>\n<a href=\"#2836\" id=\"2836\">2836</a>\n<a href=\"#2837\" id=\"2837\">2837</a>\n<a href=\"#2838\" id=\"2838\">2838</a>\n<a href=\"#2839\" id=\"2839\">2839</a>\n<a href=\"#2840\" id=\"2840\">2840</a>\n<a href=\"#2841\" id=\"2841\">2841</a>\n<a href=\"#2842\" id=\"2842\">2842</a>\n<a href=\"#2843\" id=\"2843\">2843</a>\n<a href=\"#2844\" id=\"2844\">2844</a>\n<a href=\"#2845\" id=\"2845\">2845</a>\n<a href=\"#2846\" id=\"2846\">2846</a>\n<a href=\"#2847\" id=\"2847\">2847</a>\n<a href=\"#2848\" id=\"2848\">2848</a>\n<a href=\"#2849\" id=\"2849\">2849</a>\n<a href=\"#2850\" id=\"2850\">2850</a>\n<a href=\"#2851\" id=\"2851\">2851</a>\n<a href=\"#2852\" id=\"2852\">2852</a>\n<a href=\"#2853\" id=\"2853\">2853</a>\n<a href=\"#2854\" id=\"2854\">2854</a>\n<a href=\"#2855\" id=\"2855\">2855</a>\n<a href=\"#2856\" id=\"2856\">2856</a>\n<a href=\"#2857\" id=\"2857\">2857</a>\n<a href=\"#2858\" id=\"2858\">2858</a>\n<a href=\"#2859\" id=\"2859\">2859</a>\n<a href=\"#2860\" id=\"2860\">2860</a>\n<a href=\"#2861\" id=\"2861\">2861</a>\n<a href=\"#2862\" id=\"2862\">2862</a>\n<a href=\"#2863\" id=\"2863\">2863</a>\n<a href=\"#2864\" id=\"2864\">2864</a>\n<a href=\"#2865\" id=\"2865\">2865</a>\n<a href=\"#2866\" id=\"2866\">2866</a>\n<a href=\"#2867\" id=\"2867\">2867</a>\n<a href=\"#2868\" id=\"2868\">2868</a>\n<a href=\"#2869\" id=\"2869\">2869</a>\n<a href=\"#2870\" id=\"2870\">2870</a>\n<a href=\"#2871\" id=\"2871\">2871</a>\n<a href=\"#2872\" id=\"2872\">2872</a>\n<a href=\"#2873\" id=\"2873\">2873</a>\n<a href=\"#2874\" id=\"2874\">2874</a>\n<a href=\"#2875\" id=\"2875\">2875</a>\n<a href=\"#2876\" id=\"2876\">2876</a>\n<a href=\"#2877\" id=\"2877\">2877</a>\n<a href=\"#2878\" id=\"2878\">2878</a>\n<a href=\"#2879\" id=\"2879\">2879</a>\n<a href=\"#2880\" id=\"2880\">2880</a>\n<a href=\"#2881\" id=\"2881\">2881</a>\n<a href=\"#2882\" id=\"2882\">2882</a>\n<a href=\"#2883\" id=\"2883\">2883</a>\n<a href=\"#2884\" id=\"2884\">2884</a>\n<a href=\"#2885\" id=\"2885\">2885</a>\n<a href=\"#2886\" id=\"2886\">2886</a>\n<a href=\"#2887\" id=\"2887\">2887</a>\n<a href=\"#2888\" id=\"2888\">2888</a>\n<a href=\"#2889\" id=\"2889\">2889</a>\n<a href=\"#2890\" id=\"2890\">2890</a>\n<a href=\"#2891\" id=\"2891\">2891</a>\n<a href=\"#2892\" id=\"2892\">2892</a>\n<a href=\"#2893\" id=\"2893\">2893</a>\n<a href=\"#2894\" id=\"2894\">2894</a>\n<a href=\"#2895\" id=\"2895\">2895</a>\n<a href=\"#2896\" id=\"2896\">2896</a>\n<a href=\"#2897\" id=\"2897\">2897</a>\n<a href=\"#2898\" id=\"2898\">2898</a>\n<a href=\"#2899\" id=\"2899\">2899</a>\n<a href=\"#2900\" id=\"2900\">2900</a>\n<a href=\"#2901\" id=\"2901\">2901</a>\n<a href=\"#2902\" id=\"2902\">2902</a>\n<a href=\"#2903\" id=\"2903\">2903</a>\n<a href=\"#2904\" id=\"2904\">2904</a>\n<a href=\"#2905\" id=\"2905\">2905</a>\n<a href=\"#2906\" id=\"2906\">2906</a>\n<a href=\"#2907\" id=\"2907\">2907</a>\n<a href=\"#2908\" id=\"2908\">2908</a>\n<a href=\"#2909\" id=\"2909\">2909</a>\n<a href=\"#2910\" id=\"2910\">2910</a>\n<a href=\"#2911\" id=\"2911\">2911</a>\n<a href=\"#2912\" id=\"2912\">2912</a>\n<a href=\"#2913\" id=\"2913\">2913</a>\n<a href=\"#2914\" id=\"2914\">2914</a>\n<a href=\"#2915\" id=\"2915\">2915</a>\n<a href=\"#2916\" id=\"2916\">2916</a>\n<a href=\"#2917\" id=\"2917\">2917</a>\n<a href=\"#2918\" id=\"2918\">2918</a>\n<a href=\"#2919\" id=\"2919\">2919</a>\n<a href=\"#2920\" id=\"2920\">2920</a>\n<a href=\"#2921\" id=\"2921\">2921</a>\n<a href=\"#2922\" id=\"2922\">2922</a>\n<a href=\"#2923\" id=\"2923\">2923</a>\n<a href=\"#2924\" id=\"2924\">2924</a>\n<a href=\"#2925\" id=\"2925\">2925</a>\n<a href=\"#2926\" id=\"2926\">2926</a>\n<a href=\"#2927\" id=\"2927\">2927</a>\n<a href=\"#2928\" id=\"2928\">2928</a>\n<a href=\"#2929\" id=\"2929\">2929</a>\n<a href=\"#2930\" id=\"2930\">2930</a>\n<a href=\"#2931\" id=\"2931\">2931</a>\n<a href=\"#2932\" id=\"2932\">2932</a>\n<a href=\"#2933\" id=\"2933\">2933</a>\n<a href=\"#2934\" id=\"2934\">2934</a>\n<a href=\"#2935\" id=\"2935\">2935</a>\n<a href=\"#2936\" id=\"2936\">2936</a>\n<a href=\"#2937\" id=\"2937\">2937</a>\n<a href=\"#2938\" id=\"2938\">2938</a>\n<a href=\"#2939\" id=\"2939\">2939</a>\n<a href=\"#2940\" id=\"2940\">2940</a>\n<a href=\"#2941\" id=\"2941\">2941</a>\n<a href=\"#2942\" id=\"2942\">2942</a>\n<a href=\"#2943\" id=\"2943\">2943</a>\n<a href=\"#2944\" id=\"2944\">2944</a>\n<a href=\"#2945\" id=\"2945\">2945</a>\n<a href=\"#2946\" id=\"2946\">2946</a>\n<a href=\"#2947\" id=\"2947\">2947</a>\n<a href=\"#2948\" id=\"2948\">2948</a>\n<a href=\"#2949\" id=\"2949\">2949</a>\n<a href=\"#2950\" id=\"2950\">2950</a>\n<a href=\"#2951\" id=\"2951\">2951</a>\n<a href=\"#2952\" id=\"2952\">2952</a>\n<a href=\"#2953\" id=\"2953\">2953</a>\n<a href=\"#2954\" id=\"2954\">2954</a>\n<a href=\"#2955\" id=\"2955\">2955</a>\n<a href=\"#2956\" id=\"2956\">2956</a>\n<a href=\"#2957\" id=\"2957\">2957</a>\n<a href=\"#2958\" id=\"2958\">2958</a>\n<a href=\"#2959\" id=\"2959\">2959</a>\n<a href=\"#2960\" id=\"2960\">2960</a>\n<a href=\"#2961\" id=\"2961\">2961</a>\n<a href=\"#2962\" id=\"2962\">2962</a>\n<a href=\"#2963\" id=\"2963\">2963</a>\n<a href=\"#2964\" id=\"2964\">2964</a>\n<a href=\"#2965\" id=\"2965\">2965</a>\n<a href=\"#2966\" id=\"2966\">2966</a>\n<a href=\"#2967\" id=\"2967\">2967</a>\n<a href=\"#2968\" id=\"2968\">2968</a>\n<a href=\"#2969\" id=\"2969\">2969</a>\n<a href=\"#2970\" id=\"2970\">2970</a>\n<a href=\"#2971\" id=\"2971\">2971</a>\n<a href=\"#2972\" id=\"2972\">2972</a>\n<a href=\"#2973\" id=\"2973\">2973</a>\n<a href=\"#2974\" id=\"2974\">2974</a>\n<a href=\"#2975\" id=\"2975\">2975</a>\n<a href=\"#2976\" id=\"2976\">2976</a>\n<a href=\"#2977\" id=\"2977\">2977</a>\n<a href=\"#2978\" id=\"2978\">2978</a>\n<a href=\"#2979\" id=\"2979\">2979</a>\n<a href=\"#2980\" id=\"2980\">2980</a>\n<a href=\"#2981\" id=\"2981\">2981</a>\n<a href=\"#2982\" id=\"2982\">2982</a>\n<a href=\"#2983\" id=\"2983\">2983</a>\n<a href=\"#2984\" id=\"2984\">2984</a>\n<a href=\"#2985\" id=\"2985\">2985</a>\n<a href=\"#2986\" id=\"2986\">2986</a>\n<a href=\"#2987\" id=\"2987\">2987</a>\n<a href=\"#2988\" id=\"2988\">2988</a>\n<a href=\"#2989\" id=\"2989\">2989</a>\n<a href=\"#2990\" id=\"2990\">2990</a>\n<a href=\"#2991\" id=\"2991\">2991</a>\n<a href=\"#2992\" id=\"2992\">2992</a>\n<a href=\"#2993\" id=\"2993\">2993</a>\n<a href=\"#2994\" id=\"2994\">2994</a>\n<a href=\"#2995\" id=\"2995\">2995</a>\n<a href=\"#2996\" id=\"2996\">2996</a>\n<a href=\"#2997\" id=\"2997\">2997</a>\n<a href=\"#2998\" id=\"2998\">2998</a>\n<a href=\"#2999\" id=\"2999\">2999</a>\n<a href=\"#3000\" id=\"3000\">3000</a>\n<a href=\"#3001\" id=\"3001\">3001</a>\n<a href=\"#3002\" id=\"3002\">3002</a>\n<a href=\"#3003\" id=\"3003\">3003</a>\n<a href=\"#3004\" id=\"3004\">3004</a>\n<a href=\"#3005\" id=\"3005\">3005</a>\n<a href=\"#3006\" id=\"3006\">3006</a>\n<a href=\"#3007\" id=\"3007\">3007</a>\n<a href=\"#3008\" id=\"3008\">3008</a>\n<a href=\"#3009\" id=\"3009\">3009</a>\n<a href=\"#3010\" id=\"3010\">3010</a>\n<a href=\"#3011\" id=\"3011\">3011</a>\n<a href=\"#3012\" id=\"3012\">3012</a>\n<a href=\"#3013\" id=\"3013\">3013</a>\n<a href=\"#3014\" id=\"3014\">3014</a>\n<a href=\"#3015\" id=\"3015\">3015</a>\n<a href=\"#3016\" id=\"3016\">3016</a>\n<a href=\"#3017\" id=\"3017\">3017</a>\n<a href=\"#3018\" id=\"3018\">3018</a>\n<a href=\"#3019\" id=\"3019\">3019</a>\n<a href=\"#3020\" id=\"3020\">3020</a>\n<a href=\"#3021\" id=\"3021\">3021</a>\n<a href=\"#3022\" id=\"3022\">3022</a>\n<a href=\"#3023\" id=\"3023\">3023</a>\n<a href=\"#3024\" id=\"3024\">3024</a>\n<a href=\"#3025\" id=\"3025\">3025</a>\n<a href=\"#3026\" id=\"3026\">3026</a>\n<a href=\"#3027\" id=\"3027\">3027</a>\n<a href=\"#3028\" id=\"3028\">3028</a>\n<a href=\"#3029\" id=\"3029\">3029</a>\n<a href=\"#3030\" id=\"3030\">3030</a>\n<a href=\"#3031\" id=\"3031\">3031</a>\n<a href=\"#3032\" id=\"3032\">3032</a>\n<a href=\"#3033\" id=\"3033\">3033</a>\n<a href=\"#3034\" id=\"3034\">3034</a>\n<a href=\"#3035\" id=\"3035\">3035</a>\n<a href=\"#3036\" id=\"3036\">3036</a>\n<a href=\"#3037\" id=\"3037\">3037</a>\n<a href=\"#3038\" id=\"3038\">3038</a>\n<a href=\"#3039\" id=\"3039\">3039</a>\n<a href=\"#3040\" id=\"3040\">3040</a>\n<a href=\"#3041\" id=\"3041\">3041</a>\n<a href=\"#3042\" id=\"3042\">3042</a>\n<a href=\"#3043\" id=\"3043\">3043</a>\n<a href=\"#3044\" id=\"3044\">3044</a>\n<a href=\"#3045\" id=\"3045\">3045</a>\n<a href=\"#3046\" id=\"3046\">3046</a>\n<a href=\"#3047\" id=\"3047\">3047</a>\n<a href=\"#3048\" id=\"3048\">3048</a>\n<a href=\"#3049\" id=\"3049\">3049</a>\n<a href=\"#3050\" id=\"3050\">3050</a>\n<a href=\"#3051\" id=\"3051\">3051</a>\n<a href=\"#3052\" id=\"3052\">3052</a>\n<a href=\"#3053\" id=\"3053\">3053</a>\n<a href=\"#3054\" id=\"3054\">3054</a>\n<a href=\"#3055\" id=\"3055\">3055</a>\n<a href=\"#3056\" id=\"3056\">3056</a>\n<a href=\"#3057\" id=\"3057\">3057</a>\n<a href=\"#3058\" id=\"3058\">3058</a>\n<a href=\"#3059\" id=\"3059\">3059</a>\n<a href=\"#3060\" id=\"3060\">3060</a>\n<a href=\"#3061\" id=\"3061\">3061</a>\n<a href=\"#3062\" id=\"3062\">3062</a>\n<a href=\"#3063\" id=\"3063\">3063</a>\n<a href=\"#3064\" id=\"3064\">3064</a>\n<a href=\"#3065\" id=\"3065\">3065</a>\n<a href=\"#3066\" id=\"3066\">3066</a>\n<a href=\"#3067\" id=\"3067\">3067</a>\n<a href=\"#3068\" id=\"3068\">3068</a>\n<a href=\"#3069\" id=\"3069\">3069</a>\n<a href=\"#3070\" id=\"3070\">3070</a>\n<a href=\"#3071\" id=\"3071\">3071</a>\n<a href=\"#3072\" id=\"3072\">3072</a>\n<a href=\"#3073\" id=\"3073\">3073</a>\n<a href=\"#3074\" id=\"3074\">3074</a>\n<a href=\"#3075\" id=\"3075\">3075</a>\n<a href=\"#3076\" id=\"3076\">3076</a>\n<a href=\"#3077\" id=\"3077\">3077</a>\n<a href=\"#3078\" id=\"3078\">3078</a>\n<a href=\"#3079\" id=\"3079\">3079</a>\n<a href=\"#3080\" id=\"3080\">3080</a>\n<a href=\"#3081\" id=\"3081\">3081</a>\n<a href=\"#3082\" id=\"3082\">3082</a>\n<a href=\"#3083\" id=\"3083\">3083</a>\n<a href=\"#3084\" id=\"3084\">3084</a>\n<a href=\"#3085\" id=\"3085\">3085</a>\n<a href=\"#3086\" id=\"3086\">3086</a>\n<a href=\"#3087\" id=\"3087\">3087</a>\n<a href=\"#3088\" id=\"3088\">3088</a>\n<a href=\"#3089\" id=\"3089\">3089</a>\n<a href=\"#3090\" id=\"3090\">3090</a>\n<a href=\"#3091\" id=\"3091\">3091</a>\n<a href=\"#3092\" id=\"3092\">3092</a>\n<a href=\"#3093\" id=\"3093\">3093</a>\n<a href=\"#3094\" id=\"3094\">3094</a>\n<a href=\"#3095\" id=\"3095\">3095</a>\n<a href=\"#3096\" id=\"3096\">3096</a>\n<a href=\"#3097\" id=\"3097\">3097</a>\n<a href=\"#3098\" id=\"3098\">3098</a>\n<a href=\"#3099\" id=\"3099\">3099</a>\n<a href=\"#3100\" id=\"3100\">3100</a>\n<a href=\"#3101\" id=\"3101\">3101</a>\n<a href=\"#3102\" id=\"3102\">3102</a>\n<a href=\"#3103\" id=\"3103\">3103</a>\n<a href=\"#3104\" id=\"3104\">3104</a>\n<a href=\"#3105\" id=\"3105\">3105</a>\n<a href=\"#3106\" id=\"3106\">3106</a>\n<a href=\"#3107\" id=\"3107\">3107</a>\n<a href=\"#3108\" id=\"3108\">3108</a>\n<a href=\"#3109\" id=\"3109\">3109</a>\n<a href=\"#3110\" id=\"3110\">3110</a>\n<a href=\"#3111\" id=\"3111\">3111</a>\n<a href=\"#3112\" id=\"3112\">3112</a>\n<a href=\"#3113\" id=\"3113\">3113</a>\n<a href=\"#3114\" id=\"3114\">3114</a>\n<a href=\"#3115\" id=\"3115\">3115</a>\n<a href=\"#3116\" id=\"3116\">3116</a>\n<a href=\"#3117\" id=\"3117\">3117</a>\n<a href=\"#3118\" id=\"3118\">3118</a>\n<a href=\"#3119\" id=\"3119\">3119</a>\n<a href=\"#3120\" id=\"3120\">3120</a>\n<a href=\"#3121\" id=\"3121\">3121</a>\n<a href=\"#3122\" id=\"3122\">3122</a>\n<a href=\"#3123\" id=\"3123\">3123</a>\n<a href=\"#3124\" id=\"3124\">3124</a>\n<a href=\"#3125\" id=\"3125\">3125</a>\n<a href=\"#3126\" id=\"3126\">3126</a>\n<a href=\"#3127\" id=\"3127\">3127</a>\n<a href=\"#3128\" id=\"3128\">3128</a>\n<a href=\"#3129\" id=\"3129\">3129</a>\n<a href=\"#3130\" id=\"3130\">3130</a>\n<a href=\"#3131\" id=\"3131\">3131</a>\n<a href=\"#3132\" id=\"3132\">3132</a>\n<a href=\"#3133\" id=\"3133\">3133</a>\n<a href=\"#3134\" id=\"3134\">3134</a>\n<a href=\"#3135\" id=\"3135\">3135</a>\n<a href=\"#3136\" id=\"3136\">3136</a>\n<a href=\"#3137\" id=\"3137\">3137</a>\n<a href=\"#3138\" id=\"3138\">3138</a>\n<a href=\"#3139\" id=\"3139\">3139</a>\n<a href=\"#3140\" id=\"3140\">3140</a>\n<a href=\"#3141\" id=\"3141\">3141</a>\n<a href=\"#3142\" id=\"3142\">3142</a>\n<a href=\"#3143\" id=\"3143\">3143</a>\n<a href=\"#3144\" id=\"3144\">3144</a>\n<a href=\"#3145\" id=\"3145\">3145</a>\n<a href=\"#3146\" id=\"3146\">3146</a>\n<a href=\"#3147\" id=\"3147\">3147</a>\n<a href=\"#3148\" id=\"3148\">3148</a>\n<a href=\"#3149\" id=\"3149\">3149</a>\n<a href=\"#3150\" id=\"3150\">3150</a>\n<a href=\"#3151\" id=\"3151\">3151</a>\n<a href=\"#3152\" id=\"3152\">3152</a>\n<a href=\"#3153\" id=\"3153\">3153</a>\n<a href=\"#3154\" id=\"3154\">3154</a>\n<a href=\"#3155\" id=\"3155\">3155</a>\n<a href=\"#3156\" id=\"3156\">3156</a>\n<a href=\"#3157\" id=\"3157\">3157</a>\n<a href=\"#3158\" id=\"3158\">3158</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Compiler intrinsics.\n//!\n//! The corresponding definitions are in &lt;https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_llvm/src/intrinsic.rs&gt;.\n//! The corresponding const implementations are in &lt;https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/intrinsics.rs&gt;.\n//!\n//! # Const intrinsics\n//!\n//! Note: any changes to the constness of intrinsics should be discussed with the language team.\n//! This includes changes in the stability of the constness.\n//!\n//! In order to make an intrinsic usable at compile-time, one needs to copy the implementation\n//! from &lt;https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics&gt; to\n//! &lt;https://github.com/rust-lang/rust/blob/master/compiler/rustc_const_eval/src/interpret/intrinsics.rs&gt; and add a\n//! `#[rustc_const_unstable(feature = \"const_such_and_such\", issue = \"01234\")]` to the intrinsic declaration.\n//!\n//! If an intrinsic is supposed to be used from a `const fn` with a `rustc_const_stable` attribute,\n//! the intrinsic's attribute must be `rustc_const_stable`, too. Such a change should not be done\n//! without T-lang consultation, because it bakes a feature into the language that cannot be\n//! replicated in user code without compiler support.\n//!\n//! # Volatiles\n//!\n//! The volatile intrinsics provide operations intended to act on I/O\n//! memory, which are guaranteed to not be reordered by the compiler\n//! across other volatile intrinsics. See the LLVM documentation on\n//! [[volatile]].\n//!\n//! [volatile]: https://llvm.org/docs/LangRef.html#volatile-memory-accesses\n//!\n//! # Atomics\n//!\n//! The atomic intrinsics provide common atomic operations on machine\n//! words, with multiple possible memory orderings. They obey the same\n//! semantics as C++11. See the LLVM documentation on [[atomics]].\n//!\n//! [atomics]: https://llvm.org/docs/Atomics.html\n//!\n//! A quick refresher on memory ordering:\n//!\n//! * Acquire - a barrier for acquiring a lock. Subsequent reads and writes\n//!   take place after the barrier.\n//! * Release - a barrier for releasing a lock. Preceding reads and writes\n//!   take place before the barrier.\n//! * Sequentially consistent - sequentially consistent operations are\n//!   guaranteed to happen in order. This is the standard mode for working\n//!   with atomic types and is equivalent to Java's `volatile`.\n//!\n//! # Unwinding\n//!\n//! Rust intrinsics may, in general, unwind. If an intrinsic can never unwind, add the\n//! `#[rustc_nounwind]` attribute so that the compiler can make use of this fact.\n//!\n//! However, even for intrinsics that may unwind, rustc assumes that a Rust intrinsics will never\n//! initiate a foreign (non-Rust) unwind, and thus for panic=abort we can always assume that these\n//! intrinsics cannot unwind.\n\n</span><span class=\"attr\">#![unstable(\n    feature = <span class=\"string\">\"core_intrinsics\"</span>,\n    reason = <span class=\"string\">\"intrinsics are unlikely to ever be stabilized, instead \\\n                      they should be used through stabilized interfaces \\\n                      in the rest of the standard library\"</span>,\n    issue = <span class=\"string\">\"none\"\n</span>)]\n#![allow(missing_docs)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::marker::DiscriminantKind;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::marker::Tuple;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ptr;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ub_checks;\n\n<span class=\"kw\">pub mod </span>mir;\n<span class=\"kw\">pub mod </span>simd;\n\n<span class=\"comment\">// These imports are used for simplifying intra-doc links\n</span><span class=\"attr\">#[allow(unused_imports)]\n#[cfg(all(target_has_atomic = <span class=\"string\">\"8\"</span>, target_has_atomic = <span class=\"string\">\"32\"</span>, target_has_atomic = <span class=\"string\">\"ptr\"</span>))]\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::sync::atomic::{<span class=\"self\">self</span>, AtomicBool, AtomicI32, AtomicIsize, AtomicU32, Ordering};\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"drop_in_place\"</span>, since = <span class=\"string\">\"1.8.0\"</span>)]\n#[rustc_allowed_through_unstable_modules]\n#[deprecated(note = <span class=\"string\">\"no longer an intrinsic - use `ptr::drop_in_place` directly\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n#[inline]\n</span><span class=\"kw\">pub unsafe fn </span>drop_in_place&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(to_drop: <span class=\"kw-2\">*mut </span>T) {\n    <span class=\"comment\">// SAFETY: see `ptr::drop_in_place`\n    </span><span class=\"kw\">unsafe </span>{ <span class=\"kw\">crate</span>::ptr::drop_in_place(to_drop) }\n}\n\n<span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n    <span class=\"comment\">// N.B., these intrinsics take raw pointers because they mutate aliased\n    // memory, which is not valid for either `&amp;` or `&amp;mut`.\n\n    </span><span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_relaxed_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_relaxed_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_relaxed_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acquire_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acquire_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acquire_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_release_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_release_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::Release`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_release_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acqrel_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acqrel_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_acqrel_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_seqcst_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_seqcst_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange` method by passing\n    /// [`Ordering::SeqCst`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchg_seqcst_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_relaxed_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_relaxed_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Relaxed`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_relaxed_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acquire_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acquire_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Acquire`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acquire_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_release_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_release_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::Release`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_release_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acqrel_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acqrel_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::AcqRel`] and [`Ordering::SeqCst`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_acqrel_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Relaxed`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_seqcst_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] and [`Ordering::Acquire`] as the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_seqcst_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n    <span class=\"doccomment\">/// Stores a value if the current value is the same as the `old` value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n    /// [`Ordering::SeqCst`] as both the success and failure parameters.\n    /// For example, [`AtomicBool::compare_exchange_weak`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_cxchgweak_seqcst_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, old: T, src: T) -&gt; (T, bool);\n\n    <span class=\"doccomment\">/// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::load`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_load_seqcst&lt;T: Copy&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n    <span class=\"doccomment\">/// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::load`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_load_acquire&lt;T: Copy&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n    <span class=\"doccomment\">/// Loads the current value of the pointer.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `load` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::load`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_load_relaxed&lt;T: Copy&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n    <span class=\"doccomment\">/// Do NOT use this intrinsic; \"unordered\" operations do not exist in our memory model!\n    /// In terms of the Rust Abstract Machine, this operation is equivalent to `src.read()`,\n    /// i.e., it performs a non-atomic read.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_load_unordered&lt;T: Copy&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n\n    <span class=\"doccomment\">/// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::store`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_store_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n    <span class=\"doccomment\">/// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::store`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_store_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n    <span class=\"doccomment\">/// Stores the value at the specified memory location.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `store` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::store`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_store_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n    <span class=\"doccomment\">/// Do NOT use this intrinsic; \"unordered\" operations do not exist in our memory model!\n    /// In terms of the Rust Abstract Machine, this operation is equivalent to `dst.write(val)`,\n    /// i.e., it performs a non-atomic write.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_store_unordered&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n\n    <span class=\"doccomment\">/// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::swap`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xchg_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::swap`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xchg_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::swap`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xchg_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::swap`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xchg_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Stores the value at the specified memory location, returning the old value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `swap` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::swap`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xchg_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xadd_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xadd_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xadd_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xadd_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Adds to the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_add` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xadd_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xsub_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xsub_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xsub_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xsub_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Subtract from the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_sub` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xsub_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_and_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_and_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_and_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_and_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise and with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_and` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_and`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_and_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_nand_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_nand_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_nand_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_nand_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise nand with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_nand_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_or_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_or_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_or_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_or_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise or with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_or` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_or`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_or_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xor_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xor_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xor_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xor_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Bitwise xor with the current value, returning the previous value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] types via the `fetch_xor` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_xor_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_max_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_max_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_max_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_max_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_max_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_min_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_min_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_min_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_min_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using a signed comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_min_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umin_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umin_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umin_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umin_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Minimum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_min`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umin_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umax_seqcst&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umax_acquire&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umax_release&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umax_acqrel&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n    <span class=\"doccomment\">/// Maximum with the current value using an unsigned comparison.\n    ///\n    /// The stabilized version of this intrinsic is available on the\n    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_max`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_umax_relaxed&lt;T: Copy&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: T) -&gt; T;\n\n    <span class=\"doccomment\">/// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::SeqCst`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_fence_seqcst();\n    <span class=\"doccomment\">/// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::Acquire`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_fence_acquire();\n    <span class=\"doccomment\">/// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::Release`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_fence_release();\n    <span class=\"doccomment\">/// An atomic fence.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::fence`] by passing [`Ordering::AcqRel`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_fence_acqrel();\n\n    <span class=\"doccomment\">/// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::SeqCst`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_singlethreadfence_seqcst();\n    <span class=\"doccomment\">/// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::Acquire`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_singlethreadfence_acquire();\n    <span class=\"doccomment\">/// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::Release`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_singlethreadfence_release();\n    <span class=\"doccomment\">/// A compiler-only memory barrier.\n    ///\n    /// Memory accesses will never be reordered across this barrier by the\n    /// compiler, but no instructions will be emitted for it. This is\n    /// appropriate for operations on the same thread that may be preempted,\n    /// such as when interacting with signal handlers.\n    ///\n    /// The stabilized version of this intrinsic is available in\n    /// [`atomic::compiler_fence`] by passing [`Ordering::AcqRel`]\n    /// as the `order`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>atomic_singlethreadfence_acqrel();\n\n    <span class=\"doccomment\">/// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>prefetch_read_data&lt;T&gt;(data: <span class=\"kw-2\">*const </span>T, locality: i32);\n    <span class=\"doccomment\">/// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>prefetch_write_data&lt;T&gt;(data: <span class=\"kw-2\">*const </span>T, locality: i32);\n    <span class=\"doccomment\">/// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>prefetch_read_instruction&lt;T&gt;(data: <span class=\"kw-2\">*const </span>T, locality: i32);\n    <span class=\"doccomment\">/// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n    /// if supported; otherwise, it is a no-op.\n    /// Prefetches have no effect on the behavior of the program but can change its performance\n    /// characteristics.\n    ///\n    /// The `locality` argument must be a constant integer and is a temporal locality specifier\n    /// ranging from (0) - no locality, to (3) - extremely local keep in cache.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>prefetch_write_instruction&lt;T&gt;(data: <span class=\"kw-2\">*const </span>T, locality: i32);\n\n    <span class=\"doccomment\">/// Magic intrinsic that derives its meaning from attributes\n    /// attached to the function.\n    ///\n    /// For example, dataflow uses this to inject static assertions so\n    /// that `rustc_peek(potentially_uninitialized)` would actually\n    /// double-check that dataflow did indeed compute that it is\n    /// uninitialized at that point in the control flow.\n    ///\n    /// This intrinsic should not be used outside of the compiler.\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>rustc_peek&lt;T&gt;(<span class=\"kw\">_</span>: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Aborts the execution of the process.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// [`std::process::abort`](../../std/process/fn.abort.html) is to be preferred if possible,\n    /// as its behavior is more user-friendly and more stable.\n    ///\n    /// The current implementation of `intrinsics::abort` is to invoke an invalid instruction,\n    /// on most platforms.\n    /// On Unix, the\n    /// process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or\n    /// `SIGBUS`.  The precise behaviour is not guaranteed and not stable.\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>abort() -&gt; !;\n\n    <span class=\"doccomment\">/// Informs the optimizer that this point in the code is not reachable,\n    /// enabling further optimizations.\n    ///\n    /// N.B., this is very different from the `unreachable!()` macro: Unlike the\n    /// macro, which panics when it is executed, it is *undefined behavior* to\n    /// reach code marked with this function.\n    ///\n    /// The stabilized version of this intrinsic is [`core::hint::unreachable_unchecked`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_unreachable_unchecked\"</span>, since = <span class=\"string\">\"1.57.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unreachable() -&gt; !;\n\n}\n\n<span class=\"doccomment\">/// Informs the optimizer that a condition is always true.\n/// If the condition is false, the behavior is undefined.\n///\n/// No code is generated for this intrinsic, but the optimizer will try\n/// to preserve it (and its condition) between passes, which may interfere\n/// with optimization of surrounding code and reduce performance. It should\n/// not be used if the invariant can be discovered by the optimizer on its\n/// own, or if it does not enable any significant optimizations.\n///\n/// This intrinsic does not have a stable counterpart.\n</span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_assume\"</span>, since = <span class=\"string\">\"1.77.0\"</span>)]\n#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n</span><span class=\"kw\">pub const unsafe fn </span>assume(b: bool) {\n    <span class=\"kw\">if </span>!b {\n        <span class=\"comment\">// SAFETY: the caller must guarantee the argument is never `false`\n        </span><span class=\"kw\">unsafe </span>{ unreachable() }\n    }\n}\n\n<span class=\"doccomment\">/// Hints to the compiler that branch condition is likely to be true.\n/// Returns the value passed to it.\n///\n/// Any use other than with `if` statements will probably not have an effect.\n///\n/// Note that, unlike most intrinsics, this is safe to call;\n/// it does not require an `unsafe` block.\n/// Therefore, implementations must not require the user to uphold\n/// any safety invariants.\n///\n/// This intrinsic does not have a stable counterpart.\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_likely\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\n</span><span class=\"kw\">pub const fn </span>likely(b: bool) -&gt; bool {\n    b\n}\n\n<span class=\"doccomment\">/// Hints to the compiler that branch condition is likely to be false.\n/// Returns the value passed to it.\n///\n/// Any use other than with `if` statements will probably not have an effect.\n///\n/// Note that, unlike most intrinsics, this is safe to call;\n/// it does not require an `unsafe` block.\n/// Therefore, implementations must not require the user to uphold\n/// any safety invariants.\n///\n/// This intrinsic does not have a stable counterpart.\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_likely\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\n</span><span class=\"kw\">pub const fn </span>unlikely(b: bool) -&gt; bool {\n    b\n}\n\n<span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n    <span class=\"doccomment\">/// Executes a breakpoint trap, for inspection by a debugger.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>breakpoint();\n\n    <span class=\"doccomment\">/// The size of a type in bytes.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// More specifically, this is the offset in bytes between successive\n    /// items of the same type, including alignment padding.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::size_of`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_size_of\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>size_of&lt;T&gt;() -&gt; usize;\n\n    <span class=\"doccomment\">/// The minimum alignment of a type.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::align_of`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_min_align_of\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>min_align_of&lt;T&gt;() -&gt; usize;\n    <span class=\"doccomment\">/// The preferred alignment of a type.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    /// It's \"tracking issue\" is [#91971](https://github.com/rust-lang/rust/issues/91971).\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_pref_align_of\"</span>, issue = <span class=\"string\">\"91971\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>pref_align_of&lt;T&gt;() -&gt; usize;\n\n    <span class=\"doccomment\">/// The size of the referenced value in bytes.\n    ///\n    /// The stabilized version of this intrinsic is [`crate::mem::size_of_val`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_size_of_val\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>size_of_val&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(<span class=\"kw\">_</span>: <span class=\"kw-2\">*const </span>T) -&gt; usize;\n    <span class=\"doccomment\">/// The required alignment of the referenced value.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::align_of_val`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_align_of_val\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>min_align_of_val&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(<span class=\"kw\">_</span>: <span class=\"kw-2\">*const </span>T) -&gt; usize;\n\n    <span class=\"doccomment\">/// Gets a static string slice containing the name of a type.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::any::type_name`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_type_name\"</span>, issue = <span class=\"string\">\"63084\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>type_name&lt;T: <span class=\"question-mark\">?</span>Sized&gt;() -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str;\n\n    <span class=\"doccomment\">/// Gets an identifier which is globally unique to the specified type. This\n    /// function will return the same value for a type regardless of whichever\n    /// crate it is invoked in.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::any::TypeId::of`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_type_id\"</span>, issue = <span class=\"string\">\"77125\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>type_id&lt;T: <span class=\"question-mark\">?</span>Sized + <span class=\"lifetime\">'static</span>&gt;() -&gt; u128;\n\n    <span class=\"doccomment\">/// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n    /// This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_assert_type\"</span>, since = <span class=\"string\">\"1.59.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>assert_inhabited&lt;T&gt;();\n\n    <span class=\"doccomment\">/// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n    /// zero-initialization: This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_assert_type2\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>assert_zero_valid&lt;T&gt;();\n\n    <span class=\"doccomment\">/// A guard for `std::mem::uninitialized`. This will statically either panic, or do nothing.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_assert_type2\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>assert_mem_uninitialized_valid&lt;T&gt;();\n\n    <span class=\"doccomment\">/// Gets a reference to a static `Location` indicating where it was called.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// Consider using [`core::panic::Location::caller`] instead.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_caller_location\"</span>, since = <span class=\"string\">\"1.79.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>caller_location() -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw\">crate</span>::panic::Location&lt;<span class=\"lifetime\">'static</span>&gt;;\n\n    <span class=\"doccomment\">/// Moves a value out of scope without running drop glue.\n    ///\n    /// This exists solely for [`crate::mem::forget_unsized`]; normal `forget` uses\n    /// `ManuallyDrop` instead.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_forget\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>forget&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(<span class=\"kw\">_</span>: T);\n\n    <span class=\"doccomment\">/// Reinterprets the bits of a value of one type as another type.\n    ///\n    /// Both types must have the same size. Compilation will fail if this is not guaranteed.\n    ///\n    /// `transmute` is semantically equivalent to a bitwise move of one type\n    /// into another. It copies the bits from the source value into the\n    /// destination value, then forgets the original. Note that source and destination\n    /// are passed by-value, which means if `Src` or `Dst` contain padding, that padding\n    /// is *not* guaranteed to be preserved by `transmute`.\n    ///\n    /// Both the argument and the result must be [valid](../../nomicon/what-unsafe-does.html) at\n    /// their given type. Violating this condition leads to [undefined behavior][ub]. The compiler\n    /// will generate code *assuming that you, the programmer, ensure that there will never be\n    /// undefined behavior*. It is therefore your responsibility to guarantee that every value\n    /// passed to `transmute` is valid at both types `Src` and `Dst`. Failing to uphold this condition\n    /// may lead to unexpected and unstable compilation results. This makes `transmute` **incredibly\n    /// unsafe**. `transmute` should be the absolute last resort.\n    ///\n    /// Because `transmute` is a by-value operation, alignment of the *transmuted values\n    /// themselves* is not a concern. As with any other function, the compiler already ensures\n    /// both `Src` and `Dst` are properly aligned. However, when transmuting values that *point\n    /// elsewhere* (such as pointers, references, boxes…), the caller has to ensure proper\n    /// alignment of the pointed-to values.\n    ///\n    /// The [nomicon](../../nomicon/transmutes.html) has additional documentation.\n    ///\n    /// [ub]: ../../reference/behavior-considered-undefined.html\n    ///\n    /// # Transmutation between pointers and integers\n    ///\n    /// Special care has to be taken when transmuting between pointers and integers, e.g.\n    /// transmuting between `*const ()` and `usize`.\n    ///\n    /// Transmuting *pointers to integers* in a `const` context is [undefined behavior][ub], unless\n    /// the pointer was originally created *from* an integer. (That includes this function\n    /// specifically, integer-to-pointer casts, and helpers like [`dangling`][crate::ptr::dangling],\n    /// but also semantically-equivalent conversions such as punning through `repr(C)` union\n    /// fields.) Any attempt to use the resulting value for integer operations will abort\n    /// const-evaluation. (And even outside `const`, such transmutation is touching on many\n    /// unspecified aspects of the Rust memory model and should be avoided. See below for\n    /// alternatives.)\n    ///\n    /// Transmuting *integers to pointers* is a largely unspecified operation. It is likely *not*\n    /// equivalent to an `as` cast. Doing non-zero-sized memory accesses with a pointer constructed\n    /// this way is currently considered undefined behavior.\n    ///\n    /// All this also applies when the integer is nested inside an array, tuple, struct, or enum.\n    /// However, `MaybeUninit&lt;usize&gt;` is not considered an integer type for the purpose of this\n    /// section. Transmuting `*const ()` to `MaybeUninit&lt;usize&gt;` is fine---but then calling\n    /// `assume_init()` on that result is considered as completing the pointer-to-integer transmute\n    /// and thus runs into the issues discussed above.\n    ///\n    /// In particular, doing a pointer-to-integer-to-pointer roundtrip via `transmute` is *not* a\n    /// lossless process. If you want to round-trip a pointer through an integer in a way that you\n    /// can get back the original pointer, you need to use `as` casts, or replace the integer type\n    /// by `MaybeUninit&lt;$int&gt;` (and never call `assume_init()`). If you are looking for a way to\n    /// store data of arbitrary type, also use `MaybeUninit&lt;T&gt;` (that will also handle uninitialized\n    /// memory due to padding). If you specifically need to store something that is \"either an\n    /// integer or a pointer\", use `*mut ()`: integers can be converted to pointers and back without\n    /// any loss (via `as` casts or via `transmute`).\n    ///\n    /// # Examples\n    ///\n    /// There are a few things that `transmute` is really useful for.\n    ///\n    /// Turning a pointer into a function pointer. This is *not* portable to\n    /// machines where function pointers and data pointers have different sizes.\n    ///\n    /// ```\n    /// fn foo() -&gt; i32 {\n    ///     0\n    /// }\n    /// // Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer.\n    /// // This avoids an integer-to-pointer `transmute`, which can be problematic.\n    /// // Transmuting between raw pointers and function pointers (i.e., two pointer types) is fine.\n    /// let pointer = foo as *const ();\n    /// let function = unsafe {\n    ///     std::mem::transmute::&lt;*const (), fn() -&gt; i32&gt;(pointer)\n    /// };\n    /// assert_eq!(function(), 0);\n    /// ```\n    ///\n    /// Extending a lifetime, or shortening an invariant lifetime. This is\n    /// advanced, very unsafe Rust!\n    ///\n    /// ```\n    /// struct R&lt;'a&gt;(&amp;'a i32);\n    /// unsafe fn extend_lifetime&lt;'b&gt;(r: R&lt;'b&gt;) -&gt; R&lt;'static&gt; {\n    ///     std::mem::transmute::&lt;R&lt;'b&gt;, R&lt;'static&gt;&gt;(r)\n    /// }\n    ///\n    /// unsafe fn shorten_invariant_lifetime&lt;'b, 'c&gt;(r: &amp;'b mut R&lt;'static&gt;)\n    ///                                              -&gt; &amp;'b mut R&lt;'c&gt; {\n    ///     std::mem::transmute::&lt;&amp;'b mut R&lt;'static&gt;, &amp;'b mut R&lt;'c&gt;&gt;(r)\n    /// }\n    /// ```\n    ///\n    /// # Alternatives\n    ///\n    /// Don't despair: many uses of `transmute` can be achieved through other means.\n    /// Below are common applications of `transmute` which can be replaced with safer\n    /// constructs.\n    ///\n    /// Turning raw bytes (`[u8; SZ]`) into `u32`, `f64`, etc.:\n    ///\n    /// ```\n    /// let raw_bytes = [0x78, 0x56, 0x34, 0x12];\n    ///\n    /// let num = unsafe {\n    ///     std::mem::transmute::&lt;[u8; 4], u32&gt;(raw_bytes)\n    /// };\n    ///\n    /// // use `u32::from_ne_bytes` instead\n    /// let num = u32::from_ne_bytes(raw_bytes);\n    /// // or use `u32::from_le_bytes` or `u32::from_be_bytes` to specify the endianness\n    /// let num = u32::from_le_bytes(raw_bytes);\n    /// assert_eq!(num, 0x12345678);\n    /// let num = u32::from_be_bytes(raw_bytes);\n    /// assert_eq!(num, 0x78563412);\n    /// ```\n    ///\n    /// Turning a pointer into a `usize`:\n    ///\n    /// ```no_run\n    /// let ptr = &amp;0;\n    /// let ptr_num_transmute = unsafe {\n    ///     std::mem::transmute::&lt;&amp;i32, usize&gt;(ptr)\n    /// };\n    ///\n    /// // Use an `as` cast instead\n    /// let ptr_num_cast = ptr as *const i32 as usize;\n    /// ```\n    ///\n    /// Note that using `transmute` to turn a pointer to a `usize` is (as noted above) [undefined\n    /// behavior][ub] in `const` contexts. Also outside of consts, this operation might not behave\n    /// as expected -- this is touching on many unspecified aspects of the Rust memory model.\n    /// Depending on what the code is doing, the following alternatives are preferable to\n    /// pointer-to-integer transmutation:\n    /// - If the code just wants to store data of arbitrary type in some buffer and needs to pick a\n    ///   type for that buffer, it can use [`MaybeUninit`][crate::mem::MaybeUninit].\n    /// - If the code actually wants to work on the address the pointer points to, it can use `as`\n    ///   casts or [`ptr.addr()`][pointer::addr].\n    ///\n    /// Turning a `*mut T` into an `&amp;mut T`:\n    ///\n    /// ```\n    /// let ptr: *mut i32 = &amp;mut 0;\n    /// let ref_transmuted = unsafe {\n    ///     std::mem::transmute::&lt;*mut i32, &amp;mut i32&gt;(ptr)\n    /// };\n    ///\n    /// // Use a reborrow instead\n    /// let ref_casted = unsafe { &amp;mut *ptr };\n    /// ```\n    ///\n    /// Turning an `&amp;mut T` into an `&amp;mut U`:\n    ///\n    /// ```\n    /// let ptr = &amp;mut 0;\n    /// let val_transmuted = unsafe {\n    ///     std::mem::transmute::&lt;&amp;mut i32, &amp;mut u32&gt;(ptr)\n    /// };\n    ///\n    /// // Now, put together `as` and reborrowing - note the chaining of `as`\n    /// // `as` is not transitive\n    /// let val_casts = unsafe { &amp;mut *(ptr as *mut i32 as *mut u32) };\n    /// ```\n    ///\n    /// Turning an `&amp;str` into a `&amp;[u8]`:\n    ///\n    /// ```\n    /// // this is not a good way to do this.\n    /// let slice = unsafe { std::mem::transmute::&lt;&amp;str, &amp;[u8]&gt;(\"Rust\") };\n    /// assert_eq!(slice, &amp;[82, 117, 115, 116]);\n    ///\n    /// // You could use `str::as_bytes`\n    /// let slice = \"Rust\".as_bytes();\n    /// assert_eq!(slice, &amp;[82, 117, 115, 116]);\n    ///\n    /// // Or, just use a byte string, if you have control over the string\n    /// // literal\n    /// assert_eq!(b\"Rust\", &amp;[82, 117, 115, 116]);\n    /// ```\n    ///\n    /// Turning a `Vec&lt;&amp;T&gt;` into a `Vec&lt;Option&lt;&amp;T&gt;&gt;`.\n    ///\n    /// To transmute the inner type of the contents of a container, you must make sure to not\n    /// violate any of the container's invariants. For `Vec`, this means that both the size\n    /// *and alignment* of the inner types have to match. Other containers might rely on the\n    /// size of the type, alignment, or even the `TypeId`, in which case transmuting wouldn't\n    /// be possible at all without violating the container invariants.\n    ///\n    /// ```\n    /// let store = [0, 1, 2, 3];\n    /// let v_orig = store.iter().collect::&lt;Vec&lt;&amp;i32&gt;&gt;();\n    ///\n    /// // clone the vector as we will reuse them later\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // Using transmute: this relies on the unspecified data layout of `Vec`, which is a\n    /// // bad idea and could cause Undefined Behavior.\n    /// // However, it is no-copy.\n    /// let v_transmuted = unsafe {\n    ///     std::mem::transmute::&lt;Vec&lt;&amp;i32&gt;, Vec&lt;Option&lt;&amp;i32&gt;&gt;&gt;(v_clone)\n    /// };\n    ///\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // This is the suggested, safe way.\n    /// // It may copy the entire vector into a new one though, but also may not.\n    /// let v_collected = v_clone.into_iter()\n    ///                          .map(Some)\n    ///                          .collect::&lt;Vec&lt;Option&lt;&amp;i32&gt;&gt;&gt;();\n    ///\n    /// let v_clone = v_orig.clone();\n    ///\n    /// // This is the proper no-copy, unsafe way of \"transmuting\" a `Vec`, without relying on the\n    /// // data layout. Instead of literally calling `transmute`, we perform a pointer cast, but\n    /// // in terms of converting the original inner type (`&amp;i32`) to the new one (`Option&lt;&amp;i32&gt;`),\n    /// // this has all the same caveats. Besides the information provided above, also consult the\n    /// // [`from_raw_parts`] documentation.\n    /// let v_from_raw = unsafe {\n    </span><span class=\"comment\">// FIXME Update this when vec_into_raw_parts is stabilized\n    </span><span class=\"doccomment\">///     // Ensure the original vector is not dropped.\n    ///     let mut v_clone = std::mem::ManuallyDrop::new(v_clone);\n    ///     Vec::from_raw_parts(v_clone.as_mut_ptr() as *mut Option&lt;&amp;i32&gt;,\n    ///                         v_clone.len(),\n    ///                         v_clone.capacity())\n    /// };\n    /// ```\n    ///\n    /// [`from_raw_parts`]: ../../std/vec/struct.Vec.html#method.from_raw_parts\n    ///\n    /// Implementing `split_at_mut`:\n    ///\n    /// ```\n    /// use std::{slice, mem};\n    ///\n    /// // There are multiple ways to do this, and there are multiple problems\n    /// // with the following (transmute) way.\n    /// fn split_at_mut_transmute&lt;T&gt;(slice: &amp;mut [T], mid: usize)\n    ///                              -&gt; (&amp;mut [T], &amp;mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid &lt;= len);\n    ///     unsafe {\n    ///         let slice2 = mem::transmute::&lt;&amp;mut [T], &amp;mut [T]&gt;(slice);\n    ///         // first: transmute is not type safe; all it checks is that T and\n    ///         // U are of the same size. Second, right here, you have two\n    ///         // mutable references pointing to the same memory.\n    ///         (&amp;mut slice[0..mid], &amp;mut slice2[mid..len])\n    ///     }\n    /// }\n    ///\n    /// // This gets rid of the type safety problems; `&amp;mut *` will *only* give\n    /// // you an `&amp;mut T` from an `&amp;mut T` or `*mut T`.\n    /// fn split_at_mut_casts&lt;T&gt;(slice: &amp;mut [T], mid: usize)\n    ///                          -&gt; (&amp;mut [T], &amp;mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid &lt;= len);\n    ///     unsafe {\n    ///         let slice2 = &amp;mut *(slice as *mut [T]);\n    ///         // however, you still have two mutable references pointing to\n    ///         // the same memory.\n    ///         (&amp;mut slice[0..mid], &amp;mut slice2[mid..len])\n    ///     }\n    /// }\n    ///\n    /// // This is how the standard library does it. This is the best method, if\n    /// // you need to do something like this\n    /// fn split_at_stdlib&lt;T&gt;(slice: &amp;mut [T], mid: usize)\n    ///                       -&gt; (&amp;mut [T], &amp;mut [T]) {\n    ///     let len = slice.len();\n    ///     assert!(mid &lt;= len);\n    ///     unsafe {\n    ///         let ptr = slice.as_mut_ptr();\n    ///         // This now has three mutable references pointing at the same\n    ///         // memory. `slice`, the rvalue ret.0, and the rvalue ret.1.\n    ///         // `slice` is never used after `let ptr = ...`, and so one can\n    ///         // treat it as \"dead\", and therefore, you only have two real\n    ///         // mutable slices.\n    ///         (slice::from_raw_parts_mut(ptr, mid),\n    ///          slice::from_raw_parts_mut(ptr.add(mid), len - mid))\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[rustc_allowed_through_unstable_modules]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_transmute\"</span>, since = <span class=\"string\">\"1.56.0\"</span>)]\n    #[rustc_diagnostic_item = <span class=\"string\">\"transmute\"</span>]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>transmute&lt;Src, Dst&gt;(src: Src) -&gt; Dst;\n\n    <span class=\"doccomment\">/// Like [`transmute`], but even less checked at compile-time: rather than\n    /// giving an error for `size_of::&lt;Src&gt;() != size_of::&lt;Dst&gt;()`, it's\n    /// **Undefined Behaviour** at runtime.\n    ///\n    /// Prefer normal `transmute` where possible, for the extra checking, since\n    /// both do exactly the same thing at runtime, if they both compile.\n    ///\n    /// This is not expected to ever be exposed directly to users, rather it\n    /// may eventually be exposed through some more-constrained API.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_transmute\"</span>, since = <span class=\"string\">\"1.56.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>transmute_unchecked&lt;Src, Dst&gt;(src: Src) -&gt; Dst;\n\n    <span class=\"doccomment\">/// Returns `true` if the actual type given as `T` requires drop\n    /// glue; returns `false` if the actual type provided for `T`\n    /// implements `Copy`.\n    ///\n    /// If the actual type neither requires drop glue nor implements\n    /// `Copy`, then the return value of this function is unspecified.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_needs_drop\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>needs_drop&lt;T: <span class=\"question-mark\">?</span>Sized&gt;() -&gt; bool;\n\n    <span class=\"doccomment\">/// Calculates the offset from a pointer.\n    ///\n    /// This is implemented as an intrinsic to avoid converting to and from an\n    /// integer, since the conversion would throw away aliasing information.\n    ///\n    /// This can only be used with `Ptr` as a raw pointer type (`*mut` or `*const`)\n    /// to a `Sized` pointee and with `Delta` as `usize` or `isize`.  Any other\n    /// instantiations may arbitrarily misbehave, and that's *not* a compiler bug.\n    ///\n    /// # Safety\n    ///\n    /// If the computed offset is non-zero, then both the starting and resulting pointer must be\n    /// either in bounds or at the end of an allocated object. If either pointer is out\n    /// of bounds or arithmetic overflow occurs then any further use of the returned value will\n    /// result in undefined behavior.\n    ///\n    /// The stabilized version of this intrinsic is [`pointer::offset`].\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"returns a new pointer rather than modifying its argument\"</span>]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ptr_offset\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>offset&lt;Ptr, Delta&gt;(dst: Ptr, offset: Delta) -&gt; Ptr;\n\n    <span class=\"doccomment\">/// Calculates the offset from a pointer, potentially wrapping.\n    ///\n    /// This is implemented as an intrinsic to avoid converting to and from an\n    /// integer, since the conversion inhibits certain optimizations.\n    ///\n    /// # Safety\n    ///\n    /// Unlike the `offset` intrinsic, this intrinsic does not restrict the\n    /// resulting pointer to point into or at the end of an allocated\n    /// object, and it wraps with two's complement arithmetic. The resulting\n    /// value is not necessarily valid to be used to actually access memory.\n    ///\n    /// The stabilized version of this intrinsic is [`pointer::wrapping_offset`].\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"returns a new pointer rather than modifying its argument\"</span>]\n    #[rustc_const_stable(feature = <span class=\"string\">\"const_ptr_offset\"</span>, since = <span class=\"string\">\"1.61.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>arith_offset&lt;T&gt;(dst: <span class=\"kw-2\">*const </span>T, offset: isize) -&gt; <span class=\"kw-2\">*const </span>T;\n\n    <span class=\"doccomment\">/// Masks out bits of the pointer according to a mask.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// Consider using [`pointer::mask`] instead.\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ptr_mask&lt;T&gt;(ptr: <span class=\"kw-2\">*const </span>T, mask: usize) -&gt; <span class=\"kw-2\">*const </span>T;\n\n    <span class=\"doccomment\">/// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n    /// a size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n    /// `min_align_of::&lt;T&gt;()`\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>volatile_copy_nonoverlapping_memory&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: <span class=\"kw-2\">*const </span>T, count: usize);\n    <span class=\"doccomment\">/// Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n    /// a size of `count * size_of::&lt;T&gt;()` and an alignment of\n    /// `min_align_of::&lt;T&gt;()`\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>volatile_copy_memory&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, src: <span class=\"kw-2\">*const </span>T, count: usize);\n    <span class=\"doccomment\">/// Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n    /// size of `count * size_of::&lt;T&gt;()` and an alignment of\n    /// `min_align_of::&lt;T&gt;()`.\n    ///\n    /// The volatile parameter is set to `true`, so it will not be optimized out\n    /// unless size is equal to zero.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>volatile_set_memory&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: u8, count: usize);\n\n    <span class=\"doccomment\">/// Performs a volatile load from the `src` pointer.\n    ///\n    /// The stabilized version of this intrinsic is [`core::ptr::read_volatile`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>volatile_load&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n    <span class=\"doccomment\">/// Performs a volatile store to the `dst` pointer.\n    ///\n    /// The stabilized version of this intrinsic is [`core::ptr::write_volatile`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>volatile_store&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n\n    <span class=\"doccomment\">/// Performs a volatile load from the `src` pointer\n    /// The pointer is not required to be aligned.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_diagnostic_item = <span class=\"string\">\"intrinsics_unaligned_volatile_load\"</span>]\n    </span><span class=\"kw\">pub fn </span>unaligned_volatile_load&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T) -&gt; T;\n    <span class=\"doccomment\">/// Performs a volatile store to the `dst` pointer.\n    /// The pointer is not required to be aligned.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_diagnostic_item = <span class=\"string\">\"intrinsics_unaligned_volatile_store\"</span>]\n    </span><span class=\"kw\">pub fn </span>unaligned_volatile_store&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: T);\n\n    <span class=\"doccomment\">/// Returns the square root of an `f32`\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::sqrt`](../../std/primitive.f32.html#method.sqrt)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>sqrtf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the square root of an `f64`\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::sqrt`](../../std/primitive.f64.html#method.sqrt)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>sqrtf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Raises an `f16` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f16::powi`](../../std/primitive.f16.html#method.powi)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powif16(a: f16, x: i32) -&gt; f16;\n    <span class=\"doccomment\">/// Raises an `f32` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::powi`](../../std/primitive.f32.html#method.powi)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powif32(a: f32, x: i32) -&gt; f32;\n    <span class=\"doccomment\">/// Raises an `f64` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::powi`](../../std/primitive.f64.html#method.powi)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powif64(a: f64, x: i32) -&gt; f64;\n    <span class=\"doccomment\">/// Raises an `f128` to an integer power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f128::powi`](../../std/primitive.f128.html#method.powi)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powif128(a: f128, x: i32) -&gt; f128;\n\n    <span class=\"doccomment\">/// Returns the sine of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::sin`](../../std/primitive.f32.html#method.sin)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>sinf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the sine of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::sin`](../../std/primitive.f64.html#method.sin)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>sinf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the cosine of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::cos`](../../std/primitive.f32.html#method.cos)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>cosf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the cosine of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::cos`](../../std/primitive.f64.html#method.cos)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>cosf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Raises an `f32` to an `f32` power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::powf`](../../std/primitive.f32.html#method.powf)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powf32(a: f32, x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Raises an `f64` to an `f64` power.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::powf`](../../std/primitive.f64.html#method.powf)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>powf64(a: f64, x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the exponential of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::exp`](../../std/primitive.f32.html#method.exp)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>expf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the exponential of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::exp`](../../std/primitive.f64.html#method.exp)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>expf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns 2 raised to the power of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::exp2`](../../std/primitive.f32.html#method.exp2)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>exp2f32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns 2 raised to the power of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::exp2`](../../std/primitive.f64.html#method.exp2)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>exp2f64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the natural logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::ln`](../../std/primitive.f32.html#method.ln)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>logf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the natural logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::ln`](../../std/primitive.f64.html#method.ln)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>logf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the base 10 logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::log10`](../../std/primitive.f32.html#method.log10)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>log10f32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the base 10 logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::log10`](../../std/primitive.f64.html#method.log10)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>log10f64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the base 2 logarithm of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::log2`](../../std/primitive.f32.html#method.log2)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>log2f32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the base 2 logarithm of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::log2`](../../std/primitive.f64.html#method.log2)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>log2f64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns `a * b + c` for `f32` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::mul_add`](../../std/primitive.f32.html#method.mul_add)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fmaf32(a: f32, b: f32, c: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns `a * b + c` for `f64` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::mul_add`](../../std/primitive.f64.html#method.mul_add)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fmaf64(a: f64, b: f64, c: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the absolute value of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::abs`](../../std/primitive.f32.html#method.abs)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fabsf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the absolute value of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::abs`](../../std/primitive.f64.html#method.abs)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fabsf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the minimum of two `f32` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::min`]\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>minnumf32(x: f32, y: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the minimum of two `f64` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::min`]\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>minnumf64(x: f64, y: f64) -&gt; f64;\n    <span class=\"doccomment\">/// Returns the maximum of two `f32` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::max`]\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>maxnumf32(x: f32, y: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the maximum of two `f64` values.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::max`]\n    </span><span class=\"attr\">#[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>maxnumf64(x: f64, y: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Copies the sign from `y` to `x` for `f32` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::copysign`](../../std/primitive.f32.html#method.copysign)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>copysignf32(x: f32, y: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Copies the sign from `y` to `x` for `f64` values.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::copysign`](../../std/primitive.f64.html#method.copysign)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>copysignf64(x: f64, y: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the largest integer less than or equal to an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::floor`](../../std/primitive.f32.html#method.floor)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>floorf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the largest integer less than or equal to an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::floor`](../../std/primitive.f64.html#method.floor)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>floorf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the smallest integer greater than or equal to an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::ceil`](../../std/primitive.f32.html#method.ceil)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ceilf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the smallest integer greater than or equal to an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::ceil`](../../std/primitive.f64.html#method.ceil)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ceilf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the integer part of an `f32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::trunc`](../../std/primitive.f32.html#method.trunc)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>truncf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the integer part of an `f64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::trunc`](../../std/primitive.f64.html#method.trunc)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>truncf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f32`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// May raise an inexact floating-point exception if the argument is not an integer.\n    /// However, Rust assumes floating-point exceptions cannot be observed, so these exceptions\n    /// cannot actually be utilized from Rust code.\n    /// In other words, this intrinsic is equivalent in behavior to `nearbyintf32` and `roundevenf32`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::round_ties_even`](../../std/primitive.f32.html#method.round_ties_even)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>rintf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f64`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// May raise an inexact floating-point exception if the argument is not an integer.\n    /// However, Rust assumes floating-point exceptions cannot be observed, so these exceptions\n    /// cannot actually be utilized from Rust code.\n    /// In other words, this intrinsic is equivalent in behavior to `nearbyintf64` and `roundevenf64`.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::round_ties_even`](../../std/primitive.f64.html#method.round_ties_even)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>rintf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f32`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>nearbyintf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f64`. Changing the rounding mode is not possible in Rust,\n    /// so this rounds half-way cases to the number with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>nearbyintf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f32::round`](../../std/primitive.f32.html#method.round)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>roundf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n    ///\n    /// The stabilized version of this intrinsic is\n    /// [`f64::round`](../../std/primitive.f64.html#method.round)\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>roundf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f32`. Rounds half-way cases to the number\n    /// with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>roundevenf32(x: f32) -&gt; f32;\n    <span class=\"doccomment\">/// Returns the nearest integer to an `f64`. Rounds half-way cases to the number\n    /// with an even least significant digit.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>roundevenf64(x: f64) -&gt; f64;\n\n    <span class=\"doccomment\">/// Float addition that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fadd_fast&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float subtraction that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fsub_fast&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float multiplication that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fmul_fast&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float division that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>fdiv_fast&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float remainder that allows optimizations based on algebraic rules.\n    /// May assume inputs are finite.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>frem_fast&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float addition that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>fadd_algebraic&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float subtraction that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>fsub_algebraic&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float multiplication that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>fmul_algebraic&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float division that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>fdiv_algebraic&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Float remainder that allows optimizations based on algebraic rules.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>frem_algebraic&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Convert with LLVM’s fptoui/fptosi, which may return undef for values out of range\n    /// (&lt;https://github.com/rust-lang/rust/issues/10184&gt;)\n    ///\n    /// Stabilized as [`f32::to_int_unchecked`] and [`f64::to_int_unchecked`].\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>float_to_int_unchecked&lt;Float: Copy, Int: Copy&gt;(value: Float) -&gt; Int;\n\n    <span class=\"doccomment\">/// Returns the number of bits set in an integer type `T`\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `count_ones` method. For example,\n    /// [`u32::count_ones`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_ctpop\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ctpop&lt;T: Copy&gt;(x: T) -&gt; u32;\n\n    <span class=\"doccomment\">/// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `leading_zeros` method. For example,\n    /// [`u32::leading_zeros`]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz;\n    ///\n    /// let x = 0b0001_1100_u8;\n    /// let num_leading = ctlz(x);\n    /// assert_eq!(num_leading, 3);\n    /// ```\n    ///\n    /// An `x` with value `0` will return the bit width of `T`.\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz;\n    ///\n    /// let x = 0u16;\n    /// let num_leading = ctlz(x);\n    /// assert_eq!(num_leading, 16);\n    /// ```\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_ctlz\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ctlz&lt;T: Copy&gt;(x: T) -&gt; u32;\n\n    <span class=\"doccomment\">/// Like `ctlz`, but extra-unsafe as it returns `undef` when\n    /// given an `x` with value `0`.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::ctlz_nonzero;\n    ///\n    /// let x = 0b0001_1100_u8;\n    /// let num_leading = unsafe { ctlz_nonzero(x) };\n    /// assert_eq!(num_leading, 3);\n    /// ```\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"constctlz\"</span>, since = <span class=\"string\">\"1.50.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ctlz_nonzero&lt;T: Copy&gt;(x: T) -&gt; u32;\n\n    <span class=\"doccomment\">/// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `trailing_zeros` method. For example,\n    /// [`u32::trailing_zeros`]\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz;\n    ///\n    /// let x = 0b0011_1000_u8;\n    /// let num_trailing = cttz(x);\n    /// assert_eq!(num_trailing, 3);\n    /// ```\n    ///\n    /// An `x` with value `0` will return the bit width of `T`:\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz;\n    ///\n    /// let x = 0u16;\n    /// let num_trailing = cttz(x);\n    /// assert_eq!(num_trailing, 16);\n    /// ```\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_cttz\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>cttz&lt;T: Copy&gt;(x: T) -&gt; u32;\n\n    <span class=\"doccomment\">/// Like `cttz`, but extra-unsafe as it returns `undef` when\n    /// given an `x` with value `0`.\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(core_intrinsics)]\n    /// # #![allow(internal_features)]\n    ///\n    /// use std::intrinsics::cttz_nonzero;\n    ///\n    /// let x = 0b0011_1000_u8;\n    /// let num_trailing = unsafe { cttz_nonzero(x) };\n    /// assert_eq!(num_trailing, 3);\n    /// ```\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_cttz_nonzero\"</span>, since = <span class=\"string\">\"1.53.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>cttz_nonzero&lt;T: Copy&gt;(x: T) -&gt; u32;\n\n    <span class=\"doccomment\">/// Reverses the bytes in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `swap_bytes` method. For example,\n    /// [`u32::swap_bytes`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_bswap\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>bswap&lt;T: Copy&gt;(x: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Reverses the bits in an integer type `T`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `reverse_bits` method. For example,\n    /// [`u32::reverse_bits`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_bitreverse\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>bitreverse&lt;T: Copy&gt;(x: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Does a three-way comparison between the two integer arguments.\n    ///\n    /// This is included as an intrinsic as it's useful to let it be one thing\n    /// in MIR, rather than the multiple checks and switches that make its IR\n    /// large and difficult to optimize.\n    ///\n    /// The stabilized version of this intrinsic is [`Ord::cmp`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_three_way_compare\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_safe_intrinsic]\n    </span><span class=\"kw\">pub fn </span>three_way_compare&lt;T: Copy&gt;(lhs: T, rhs: T) -&gt; <span class=\"kw\">crate</span>::cmp::Ordering;\n\n    <span class=\"doccomment\">/// Performs checked integer addition.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_add` method. For example,\n    /// [`u32::overflowing_add`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_overflow\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>add_with_overflow&lt;T: Copy&gt;(x: T, y: T) -&gt; (T, bool);\n\n    <span class=\"doccomment\">/// Performs checked integer subtraction\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_sub` method. For example,\n    /// [`u32::overflowing_sub`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_overflow\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>sub_with_overflow&lt;T: Copy&gt;(x: T, y: T) -&gt; (T, bool);\n\n    <span class=\"doccomment\">/// Performs checked integer multiplication\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `overflowing_mul` method. For example,\n    /// [`u32::overflowing_mul`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_overflow\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>mul_with_overflow&lt;T: Copy&gt;(x: T, y: T) -&gt; (T, bool);\n\n    <span class=\"doccomment\">/// Performs an exact division, resulting in undefined behavior where\n    /// `x % y != 0` or `y == 0` or `x == T::MIN &amp;&amp; y == -1`\n    ///\n    /// This intrinsic does not have a stable counterpart.\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_exact_div\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>exact_div&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Performs an unchecked division, resulting in undefined behavior\n    /// where `y == 0` or `x == T::MIN &amp;&amp; y == -1`\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_div` method. For example,\n    /// [`u32::checked_div`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_unchecked_div\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_div&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n    <span class=\"doccomment\">/// Returns the remainder of an unchecked division, resulting in\n    /// undefined behavior when `y == 0` or `x == T::MIN &amp;&amp; y == -1`\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_rem` method. For example,\n    /// [`u32::checked_rem`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_unchecked_rem\"</span>, since = <span class=\"string\">\"1.52.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_rem&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Performs an unchecked left shift, resulting in undefined behavior when\n    /// `y &lt; 0` or `y &gt;= N`, where N is the width of T in bits.\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_shl` method. For example,\n    /// [`u32::checked_shl`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_unchecked\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_shl&lt;T: Copy, U: Copy&gt;(x: T, y: U) -&gt; T;\n    <span class=\"doccomment\">/// Performs an unchecked right shift, resulting in undefined behavior when\n    /// `y &lt; 0` or `y &gt;= N`, where N is the width of T in bits.\n    ///\n    /// Safe wrappers for this intrinsic are available on the integer\n    /// primitives via the `checked_shr` method. For example,\n    /// [`u32::checked_shr`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_unchecked\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_shr&lt;T: Copy, U: Copy&gt;(x: T, y: U) -&gt; T;\n\n    <span class=\"doccomment\">/// Returns the result of an unchecked addition, resulting in\n    /// undefined behavior when `x + y &gt; T::MAX` or `x + y &lt; T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_add` on the various\n    /// integer types, such as [`u16::unchecked_add`] and [`i64::unchecked_add`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"unchecked_math\"</span>, since = <span class=\"string\">\"1.79.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_add&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Returns the result of an unchecked subtraction, resulting in\n    /// undefined behavior when `x - y &gt; T::MAX` or `x - y &lt; T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_sub` on the various\n    /// integer types, such as [`u16::unchecked_sub`] and [`i64::unchecked_sub`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"unchecked_math\"</span>, since = <span class=\"string\">\"1.79.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_sub&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Returns the result of an unchecked multiplication, resulting in\n    /// undefined behavior when `x * y &gt; T::MAX` or `x * y &lt; T::MIN`.\n    ///\n    /// The stable counterpart of this intrinsic is `unchecked_mul` on the various\n    /// integer types, such as [`u16::unchecked_mul`] and [`i64::unchecked_mul`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"unchecked_math\"</span>, since = <span class=\"string\">\"1.79.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>unchecked_mul&lt;T: Copy&gt;(x: T, y: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Performs rotate left.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `rotate_left` method. For example,\n    /// [`u32::rotate_left`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_rotate\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>rotate_left&lt;T: Copy&gt;(x: T, shift: u32) -&gt; T;\n\n    <span class=\"doccomment\">/// Performs rotate right.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `rotate_right` method. For example,\n    /// [`u32::rotate_right`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_rotate\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>rotate_right&lt;T: Copy&gt;(x: T, shift: u32) -&gt; T;\n\n    <span class=\"doccomment\">/// Returns (a + b) mod 2&lt;sup&gt;N&lt;/sup&gt;, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_add` method. For example,\n    /// [`u32::wrapping_add`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_wrapping\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>wrapping_add&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n    <span class=\"doccomment\">/// Returns (a - b) mod 2&lt;sup&gt;N&lt;/sup&gt;, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_sub` method. For example,\n    /// [`u32::wrapping_sub`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_wrapping\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>wrapping_sub&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n    <span class=\"doccomment\">/// Returns (a * b) mod 2&lt;sup&gt;N&lt;/sup&gt;, where N is the width of T in bits.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `wrapping_mul` method. For example,\n    /// [`u32::wrapping_mul`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_wrapping\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>wrapping_mul&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// Computes `a + b`, saturating at numeric bounds.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `saturating_add` method. For example,\n    /// [`u32::saturating_add`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_saturating\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>saturating_add&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n    <span class=\"doccomment\">/// Computes `a - b`, saturating at numeric bounds.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized versions of this intrinsic are available on the integer\n    /// primitives via the `saturating_sub` method. For example,\n    /// [`u32::saturating_sub`]\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_int_saturating\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>saturating_sub&lt;T: Copy&gt;(a: T, b: T) -&gt; T;\n\n    <span class=\"doccomment\">/// This is an implementation detail of [`crate::ptr::read`] and should\n    /// not be used anywhere else.  See its comments for why this exists.\n    ///\n    /// This intrinsic can *only* be called where the pointer is a local without\n    /// projections (`read_via_copy(ptr)`, not `read_via_copy(*ptr)`) so that it\n    /// trivially obeys runtime-MIR rules about derefs in operands.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_ptr_read\"</span>, since = <span class=\"string\">\"1.71.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>read_via_copy&lt;T&gt;(ptr: <span class=\"kw-2\">*const </span>T) -&gt; T;\n\n    <span class=\"doccomment\">/// This is an implementation detail of [`crate::ptr::write`] and should\n    /// not be used anywhere else.  See its comments for why this exists.\n    ///\n    /// This intrinsic can *only* be called where the pointer is a local without\n    /// projections (`write_via_move(ptr, x)`, not `write_via_move(*ptr, x)`) so\n    /// that it trivially obeys runtime-MIR rules about derefs in operands.\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_ptr_write\"</span>, issue = <span class=\"string\">\"86302\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>write_via_move&lt;T&gt;(ptr: <span class=\"kw-2\">*mut </span>T, value: T);\n\n    <span class=\"doccomment\">/// Returns the value of the discriminant for the variant in 'v';\n    /// if `T` has no discriminant, returns `0`.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The stabilized version of this intrinsic is [`core::mem::discriminant`].\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_discriminant\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>discriminant_value&lt;T&gt;(v: <span class=\"kw-2\">&amp;</span>T) -&gt; &lt;T <span class=\"kw\">as </span>DiscriminantKind&gt;::Discriminant;\n\n    <span class=\"doccomment\">/// Returns the number of variants of the type `T` cast to a `usize`;\n    /// if `T` has no variants, returns `0`. Uninhabited variants will be counted.\n    ///\n    /// Note that, unlike most intrinsics, this is safe to call;\n    /// it does not require an `unsafe` block.\n    /// Therefore, implementations must not require the user to uphold\n    /// any safety invariants.\n    ///\n    /// The to-be-stabilized version of this intrinsic is [`crate::mem::variant_count`].\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"variant_count\"</span>, issue = <span class=\"string\">\"73662\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>variant_count&lt;T&gt;() -&gt; usize;\n\n    <span class=\"doccomment\">/// Rust's \"try catch\" construct for unwinding. Invokes the function pointer `try_fn` with the\n    /// data pointer `data`, and calls `catch_fn` if unwinding occurs while `try_fn` runs.\n    ///\n    /// `catch_fn` must not unwind.\n    ///\n    /// The third argument is a function called if an unwind occurs (both Rust unwinds and foreign\n    /// unwinds). This function takes the data pointer and a pointer to the target-specific\n    /// exception object that was caught. For more information, see the compiler's source as well as\n    /// std's `catch_unwind` implementation.\n    ///\n    /// The stable version of this intrinsic is `std::panic::catch_unwind`.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>catch_unwind(try_fn: <span class=\"kw\">fn</span>(<span class=\"kw-2\">*mut </span>u8), data: <span class=\"kw-2\">*mut </span>u8, catch_fn: <span class=\"kw\">fn</span>(<span class=\"kw-2\">*mut </span>u8, <span class=\"kw-2\">*mut </span>u8)) -&gt; i32;\n\n    <span class=\"doccomment\">/// Emits a `!nontemporal` store according to LLVM (see their docs).\n    /// Probably will never become stable.\n    ///\n    /// Do NOT use this intrinsic; \"nontemporal\" operations do not exist in our memory model!\n    /// It exists to support current stdarch, but the plan is to change stdarch and remove this intrinsic.\n    /// See &lt;https://github.com/rust-lang/rust/issues/114582&gt; for some more discussion.\n    </span><span class=\"attr\">#[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>nontemporal_store&lt;T&gt;(ptr: <span class=\"kw-2\">*mut </span>T, val: T);\n\n    <span class=\"doccomment\">/// See documentation of `&lt;*const T&gt;::offset_from` for details.\n    </span><span class=\"attr\">#[rustc_const_stable(feature = <span class=\"string\">\"const_ptr_offset_from\"</span>, since = <span class=\"string\">\"1.65.0\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ptr_offset_from&lt;T&gt;(ptr: <span class=\"kw-2\">*const </span>T, base: <span class=\"kw-2\">*const </span>T) -&gt; isize;\n\n    <span class=\"doccomment\">/// See documentation of `&lt;*const T&gt;::sub_ptr` for details.\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_ptr_sub_ptr\"</span>, issue = <span class=\"string\">\"95892\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>ptr_offset_from_unsigned&lt;T&gt;(ptr: <span class=\"kw-2\">*const </span>T, base: <span class=\"kw-2\">*const </span>T) -&gt; usize;\n}\n\n<span class=\"doccomment\">/// See documentation of `&lt;*const T&gt;::guaranteed_eq` for details.\n/// Returns `2` if the result is unknown.\n/// Returns `1` if the pointers are guaranteed equal\n/// Returns `0` if the pointers are guaranteed inequal\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_raw_ptr_comparison\"</span>, issue = <span class=\"string\">\"53020\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n#[rustc_nounwind]\n#[rustc_do_not_const_check]\n#[inline]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\n</span><span class=\"kw\">pub const fn </span>ptr_guaranteed_cmp&lt;T&gt;(ptr: <span class=\"kw-2\">*const </span>T, other: <span class=\"kw-2\">*const </span>T) -&gt; u8 {\n    (ptr == other) <span class=\"kw\">as </span>u8\n}\n\n<span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n    <span class=\"doccomment\">/// Determines whether the raw bytes of the two values are equal.\n    ///\n    /// This is particularly handy for arrays, since it allows things like just\n    /// comparing `i96`s instead of forcing `alloca`s for `[6 x i16]`.\n    ///\n    /// Above some backend-decided threshold this will emit calls to `memcmp`,\n    /// like slice equality does, instead of causing massive code size.\n    ///\n    /// Since this works by comparing the underlying bytes, the actual `T` is\n    /// not particularly important.  It will be used for its size and alignment,\n    /// but any validity restrictions will be ignored, not enforced.\n    ///\n    /// # Safety\n    ///\n    /// It's UB to call this if any of the *bytes* in `*a` or `*b` are uninitialized or carry a\n    /// pointer value.\n    /// Note that this is a stricter criterion than just the *values* being\n    /// fully-initialized: if `T` has padding, it's UB to call this intrinsic.\n    ///\n    /// (The implementation is allowed to branch on the results of comparisons,\n    /// which is UB if any of their inputs are `undef`.)\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_raw_eq\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>raw_eq&lt;T&gt;(a: <span class=\"kw-2\">&amp;</span>T, b: <span class=\"kw-2\">&amp;</span>T) -&gt; bool;\n\n    <span class=\"doccomment\">/// Lexicographically compare `[left, left + bytes)` and `[right, right + bytes)`\n    /// as unsigned bytes, returning negative if `left` is less, zero if all the\n    /// bytes match, or positive if `right` is greater.\n    ///\n    /// This underlies things like `&lt;[u8]&gt;::cmp`, and will usually lower to `memcmp`.\n    ///\n    /// # Safety\n    ///\n    /// `left` and `right` must each be [valid] for reads of `bytes` bytes.\n    ///\n    /// Note that this applies to the whole range, not just until the first byte\n    /// that differs.  That allows optimizations that can read in large chunks.\n    ///\n    /// [valid]: crate::ptr#safety\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_compare_bytes\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>compare_bytes(left: <span class=\"kw-2\">*const </span>u8, right: <span class=\"kw-2\">*const </span>u8, bytes: usize) -&gt; i32;\n\n    <span class=\"doccomment\">/// See documentation of [`std::hint::black_box`] for details.\n    ///\n    /// [`std::hint::black_box`]: crate::hint::black_box\n    </span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_black_box\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    #[rustc_safe_intrinsic]\n    #[rustc_nounwind]\n    </span><span class=\"kw\">pub fn </span>black_box&lt;T&gt;(dummy: T) -&gt; T;\n}\n\n<span class=\"doccomment\">/// Selects which function to call depending on the context.\n///\n/// If this function is evaluated at compile-time, then a call to this\n/// intrinsic will be replaced with a call to `called_in_const`. It gets\n/// replaced with a call to `called_at_rt` otherwise.\n///\n/// This function is safe to call, but note the stability concerns below.\n///\n/// # Type Requirements\n///\n/// The two functions must be both function items. They cannot be function\n/// pointers or closures. The first function must be a `const fn`.\n///\n/// `arg` will be the tupled arguments that will be passed to either one of\n/// the two functions, therefore, both functions must accept the same type of\n/// arguments. Both functions must return RET.\n///\n/// # Stability concerns\n///\n/// Rust has not yet decided that `const fn` are allowed to tell whether\n/// they run at compile-time or at runtime. Therefore, when using this\n/// intrinsic anywhere that can be reached from stable, it is crucial that\n/// the end-to-end behavior of the stable `const fn` is the same for both\n/// modes of execution. (Here, Undefined Behavior is considered \"the same\"\n/// as any other behavior, so if the function exhibits UB at runtime then\n/// it may do whatever it wants at compile-time.)\n///\n/// Here is an example of how this could cause a problem:\n/// ```no_run\n/// #![feature(const_eval_select)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::intrinsics::const_eval_select;\n///\n/// // Standard library\n/// pub const fn inconsistent() -&gt; i32 {\n///     fn runtime() -&gt; i32 { 1 }\n///     const fn compiletime() -&gt; i32 { 2 }\n///\n</span><span class=\"comment\">//      // ⚠ This code violates the required equivalence of `compiletime`\n</span><span class=\"doccomment\">///     // and `runtime`.\n///     const_eval_select((), compiletime, runtime)\n/// }\n///\n/// // User Crate\n/// const X: i32 = inconsistent();\n/// let x = inconsistent();\n/// assert_eq!(x, X);\n/// ```\n///\n/// Currently such an assertion would always succeed; until Rust decides\n/// otherwise, that principle should not be violated.\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_eval_select\"</span>, issue = <span class=\"string\">\"124625\"</span>)]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n</span><span class=\"kw\">pub const fn </span>const_eval_select&lt;ARG: Tuple, F, G, RET&gt;(\n    _arg: ARG,\n    _called_in_const: F,\n    _called_at_rt: G,\n) -&gt; RET\n<span class=\"kw\">where\n    </span>G: FnOnce&lt;ARG, Output = RET&gt;,\n    F: FnOnce&lt;ARG, Output = RET&gt;,\n{\n    <span class=\"macro\">unreachable!</span>()\n}\n\n<span class=\"doccomment\">/// Returns whether the argument's value is statically known at\n/// compile-time.\n///\n/// This is useful when there is a way of writing the code that will\n/// be *faster* when some variables have known values, but *slower*\n/// in the general case: an `if is_val_statically_known(var)` can be used\n/// to select between these two variants. The `if` will be optimized away\n/// and only the desired branch remains.\n///\n/// Formally speaking, this function non-deterministically returns `true`\n/// or `false`, and the caller has to ensure sound behavior for both cases.\n/// In other words, the following code has *Undefined Behavior*:\n///\n/// ```no_run\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::hint::unreachable_unchecked;\n/// use std::intrinsics::is_val_statically_known;\n///\n/// if !is_val_statically_known(0) { unsafe { unreachable_unchecked(); } }\n/// ```\n///\n/// This also means that the following code's behavior is unspecified; it\n/// may panic, or it may not:\n///\n/// ```no_run\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// use std::intrinsics::is_val_statically_known;\n///\n/// assert_eq!(is_val_statically_known(0), is_val_statically_known(0));\n/// ```\n///\n/// Unsafe code may not rely on `is_val_statically_known` returning any\n/// particular value, ever. However, the compiler will generally make it\n/// return `true` only if the value of the argument is actually known.\n///\n/// # Stability concerns\n///\n/// While it is safe to call, this intrinsic may behave differently in\n/// a `const` context than otherwise. See the [`const_eval_select`]\n/// documentation for an explanation of the issues this can cause. Unlike\n/// `const_eval_select`, this intrinsic isn't guaranteed to behave\n/// deterministically even in a `const` context.\n///\n/// # Type Requirements\n///\n/// `T` must be either a `bool`, a `char`, a primitive numeric type (e.g. `f32`,\n/// but not `NonZeroISize`), or any thin pointer (e.g. `*mut String`).\n/// Any other argument types *may* cause a compiler error.\n///\n/// ## Pointers\n///\n/// When the input is a pointer, only the pointer itself is\n/// ever considered. The pointee has no effect. Currently, these functions\n/// behave identically:\n///\n/// ```\n/// #![feature(is_val_statically_known)]\n/// #![feature(core_intrinsics)]\n/// # #![allow(internal_features)]\n/// #![feature(strict_provenance)]\n/// use std::intrinsics::is_val_statically_known;\n///\n/// fn foo(x: &amp;i32) -&gt; bool {\n///     is_val_statically_known(x)\n/// }\n///\n/// fn bar(x: &amp;i32) -&gt; bool {\n///     is_val_statically_known(\n///         (x as *const i32).addr()\n///     )\n/// }\n/// # _ = foo(&amp;5_i32);\n/// # _ = bar(&amp;5_i32);\n/// ```\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"is_val_statically_known\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n</span><span class=\"kw\">pub const fn </span>is_val_statically_known&lt;T: Copy&gt;(_arg: T) -&gt; bool {\n    <span class=\"bool-val\">false\n</span>}\n\n<span class=\"doccomment\">/// Non-overlapping *typed* swap of a single value.\n///\n/// The codegen backends will replace this with a better implementation when\n/// `T` is a simple type that can be loaded and stored as an immediate.\n///\n/// The stabilized form of this intrinsic is [`crate::mem::swap`].\n///\n/// # Safety\n///\n/// `x` and `y` are readable and writable as `T`, and non-overlapping.\n</span><span class=\"attr\">#[rustc_nounwind]\n#[inline]\n#[rustc_intrinsic]\n</span><span class=\"comment\">// This has fallback `const fn` MIR, so shouldn't need stability, see #122652\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_typed_swap\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">pub const unsafe fn </span>typed_swap&lt;T&gt;(x: <span class=\"kw-2\">*mut </span>T, y: <span class=\"kw-2\">*mut </span>T) {\n    <span class=\"comment\">// SAFETY: The caller provided single non-overlapping items behind\n    // pointers, so swapping them with `count: 1` is fine.\n    </span><span class=\"kw\">unsafe </span>{ ptr::swap_nonoverlapping(x, y, <span class=\"number\">1</span>) };\n}\n\n<span class=\"doccomment\">/// Returns whether we should perform some UB-checking at runtime. This eventually evaluates to\n/// `cfg!(ub_checks)`, but behaves different from `cfg!` when mixing crates built with different\n/// flags: if the crate has UB checks enabled or carries the `#[rustc_preserve_ub_checks]`\n/// attribute, evaluation is delayed until monomorphization (or until the call gets inlined into\n/// a crate that does not delay evaluation further); otherwise it can happen any time.\n///\n/// The common case here is a user program built with ub_checks linked against the distributed\n/// sysroot which is built without ub_checks but with `#[rustc_preserve_ub_checks]`.\n/// For code that gets monomorphized in the user crate (i.e., generic functions and functions with\n/// `#[inline]`), gating assertions on `ub_checks()` rather than `cfg!(ub_checks)` means that\n/// assertions are enabled whenever the *user crate* has UB checks enabled. However if the\n/// user has UB checks disabled, the checks will still get optimized out. This intrinsic is\n/// primarily used by [`ub_checks::assert_unsafe_precondition`].\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_ub_checks\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[inline(always)]\n#[rustc_intrinsic]\n</span><span class=\"kw\">pub const fn </span>ub_checks() -&gt; bool {\n    <span class=\"macro\">cfg!</span>(debug_assertions)\n}\n\n<span class=\"doccomment\">/// Allocates a block of memory at compile time.\n/// At runtime, just returns a null pointer.\n///\n/// # Safety\n///\n/// - The `align` argument must be a power of two.\n///    - At compile time, a compile error occurs if this constraint is violated.\n///    - At runtime, it is not checked.\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_heap\"</span>, issue = <span class=\"string\">\"79597\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_nounwind]\n#[rustc_intrinsic]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\n</span><span class=\"kw\">pub const unsafe fn </span>const_allocate(_size: usize, _align: usize) -&gt; <span class=\"kw-2\">*mut </span>u8 {\n    <span class=\"comment\">// const eval overrides this function, but runtime code for now just returns null pointers.\n    // See &lt;https://github.com/rust-lang/rust/issues/93935&gt;.\n    </span><span class=\"kw\">crate</span>::ptr::null_mut()\n}\n\n<span class=\"doccomment\">/// Deallocates a memory which allocated by `intrinsics::const_allocate` at compile time.\n/// At runtime, does nothing.\n///\n/// # Safety\n///\n/// - The `align` argument must be a power of two.\n///    - At compile time, a compile error occurs if this constraint is violated.\n///    - At runtime, it is not checked.\n/// - If the `ptr` is created in an another const, this intrinsic doesn't deallocate it.\n/// - If the `ptr` is pointing to a local variable, this intrinsic doesn't deallocate it.\n</span><span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_heap\"</span>, issue = <span class=\"string\">\"79597\"</span>)]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_nounwind]\n#[rustc_intrinsic]\n#[cfg_attr(not(bootstrap), miri::intrinsic_fallback_is_spec)]\n</span><span class=\"kw\">pub const unsafe fn </span>const_deallocate(_ptr: <span class=\"kw-2\">*mut </span>u8, _size: usize, _align: usize) {\n    <span class=\"comment\">// Runtime NOP\n</span>}\n\n<span class=\"doccomment\">/// `ptr` must point to a vtable.\n/// The intrinsic will return the size stored in that vtable.\n</span><span class=\"attr\">#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n</span><span class=\"kw\">pub unsafe fn </span>vtable_size(_ptr: <span class=\"kw-2\">*const </span>()) -&gt; usize {\n    <span class=\"macro\">unreachable!</span>()\n}\n\n<span class=\"doccomment\">/// `ptr` must point to a vtable.\n/// The intrinsic will return the alignment stored in that vtable.\n</span><span class=\"attr\">#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n</span><span class=\"kw\">pub unsafe fn </span>vtable_align(_ptr: <span class=\"kw-2\">*const </span>()) -&gt; usize {\n    <span class=\"macro\">unreachable!</span>()\n}\n\n<span class=\"doccomment\">/// Lowers in MIR to `Rvalue::Aggregate` with `AggregateKind::RawPtr`.\n///\n/// This is used to implement functions like `slice::from_raw_parts_mut` and\n/// `ptr::from_raw_parts` in a way compatible with the compiler being able to\n/// change the possible layouts of pointers.\n</span><span class=\"attr\">#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"ptr_metadata\"</span>, issue = <span class=\"string\">\"81513\"</span>)]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n</span><span class=\"kw\">pub const fn </span>aggregate_raw_ptr&lt;P: AggregateRawPtr&lt;D, Metadata = M&gt;, D, M&gt;(_data: D, _meta: M) -&gt; P {\n    <span class=\"comment\">// To implement a fallback we'd have to assume the layout of the pointer,\n    // but the whole point of this intrinsic is that we shouldn't do that.\n    </span><span class=\"macro\">unreachable!</span>()\n}\n\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">pub trait </span>AggregateRawPtr&lt;D&gt; {\n    <span class=\"kw\">type </span>Metadata: Copy;\n}\n<span class=\"kw\">impl</span>&lt;P: <span class=\"question-mark\">?</span>Sized, T: ptr::Thin&gt; AggregateRawPtr&lt;<span class=\"kw-2\">*const </span>T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">*const </span>P {\n    <span class=\"kw\">type </span>Metadata = &lt;P <span class=\"kw\">as </span>ptr::Pointee&gt;::Metadata;\n}\n<span class=\"kw\">impl</span>&lt;P: <span class=\"question-mark\">?</span>Sized, T: ptr::Thin&gt; AggregateRawPtr&lt;<span class=\"kw-2\">*mut </span>T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">*mut </span>P {\n    <span class=\"kw\">type </span>Metadata = &lt;P <span class=\"kw\">as </span>ptr::Pointee&gt;::Metadata;\n}\n\n<span class=\"doccomment\">/// Lowers in MIR to `Rvalue::UnaryOp` with `UnOp::PtrMetadata`.\n///\n/// This is used to implement functions like `ptr::metadata`.\n</span><span class=\"attr\">#[rustc_nounwind]\n#[unstable(feature = <span class=\"string\">\"core_intrinsics\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"ptr_metadata\"</span>, issue = <span class=\"string\">\"81513\"</span>)]\n#[rustc_intrinsic]\n#[rustc_intrinsic_must_be_overridden]\n#[cfg(not(bootstrap))]\n</span><span class=\"kw\">pub const fn </span>ptr_metadata&lt;P: ptr::Pointee&lt;Metadata = M&gt; + <span class=\"question-mark\">?</span>Sized, M&gt;(_ptr: <span class=\"kw-2\">*const </span>P) -&gt; M {\n    <span class=\"comment\">// To implement a fallback we'd have to assume the layout of the pointer,\n    // but the whole point of this intrinsic is that we shouldn't do that.\n    </span><span class=\"macro\">unreachable!</span>()\n}\n\n<span class=\"comment\">// Some functions are defined here because they accidentally got made\n// available in this module on stable. See &lt;https://github.com/rust-lang/rust/issues/15702&gt;.\n// (`transmute` also falls into this category, but it cannot be wrapped due to the\n// check that `T` and `U` have the same size.)\n\n</span><span class=\"doccomment\">/// Copies `count * size_of::&lt;T&gt;()` bytes from `src` to `dst`. The source\n/// and destination must *not* overlap.\n///\n/// For regions of memory which might overlap, use [`copy`] instead.\n///\n/// `copy_nonoverlapping` is semantically equivalent to C's [`memcpy`], but\n/// with the argument order swapped.\n///\n/// The copy is \"untyped\" in the sense that data may be uninitialized or otherwise violate the\n/// requirements of `T`. The initialization state is preserved exactly.\n///\n/// [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `src` must be [valid] for reads of `count * size_of::&lt;T&gt;()` bytes.\n///\n/// * `dst` must be [valid] for writes of `count * size_of::&lt;T&gt;()` bytes.\n///\n/// * Both `src` and `dst` must be properly aligned.\n///\n/// * The region of memory beginning at `src` with a size of `count *\n///   size_of::&lt;T&gt;()` bytes must *not* overlap with the region of memory\n///   beginning at `dst` with the same size.\n///\n/// Like [`read`], `copy_nonoverlapping` creates a bitwise copy of `T`, regardless of\n/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using *both* the values\n/// in the region beginning at `*src` and the region beginning at `*dst` can\n/// [violate memory safety][read-ownership].\n///\n/// Note that even if the effectively copied size (`count * size_of::&lt;T&gt;()`) is\n/// `0`, the pointers must be non-null and properly aligned.\n///\n/// [`read`]: crate::ptr::read\n/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Manually implement [`Vec::append`]:\n///\n/// ```\n/// use std::ptr;\n///\n/// /// Moves all the elements of `src` into `dst`, leaving `src` empty.\n/// fn append&lt;T&gt;(dst: &amp;mut Vec&lt;T&gt;, src: &amp;mut Vec&lt;T&gt;) {\n///     let src_len = src.len();\n///     let dst_len = dst.len();\n///\n///     // Ensure that `dst` has enough capacity to hold all of `src`.\n///     dst.reserve(src_len);\n///\n///     unsafe {\n///         // The call to add is always safe because `Vec` will never\n///         // allocate more than `isize::MAX` bytes.\n///         let dst_ptr = dst.as_mut_ptr().add(dst_len);\n///         let src_ptr = src.as_ptr();\n///\n///         // Truncate `src` without dropping its contents. We do this first,\n///         // to avoid problems in case something further down panics.\n///         src.set_len(0);\n///\n///         // The two regions cannot overlap because mutable references do\n///         // not alias, and two different vectors cannot own the same\n///         // memory.\n///         ptr::copy_nonoverlapping(src_ptr, dst_ptr, src_len);\n///\n///         // Notify `dst` that it now holds the contents of `src`.\n///         dst.set_len(dst_len + src_len);\n///     }\n/// }\n///\n/// let mut a = vec!['r'];\n/// let mut b = vec!['u', 's', 't'];\n///\n/// append(&amp;mut a, &amp;mut b);\n///\n/// assert_eq!(a, &amp;['r', 'u', 's', 't']);\n/// assert!(b.is_empty());\n/// ```\n///\n/// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"memcpy\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_copy\"</span>, issue = <span class=\"string\">\"80697\"</span>)]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] </span><span class=\"comment\">// even without panics, this helps for Miri backtraces\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"ptr_copy_nonoverlapping\"</span>]\n</span><span class=\"kw\">pub const unsafe fn </span>copy_nonoverlapping&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T, dst: <span class=\"kw-2\">*mut </span>T, count: usize) {\n    <span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n        <span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_copy\"</span>, issue = <span class=\"string\">\"80697\"</span>)]\n        #[rustc_nounwind]\n        </span><span class=\"kw\">pub fn </span>copy_nonoverlapping&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T, dst: <span class=\"kw-2\">*mut </span>T, count: usize);\n    }\n\n    <span class=\"macro\">ub_checks::assert_unsafe_precondition!</span>(\n        check_language_ub,\n        <span class=\"string\">\"ptr::copy_nonoverlapping requires that both pointer arguments are aligned and non-null \\\n        and the specified memory ranges do not overlap\"</span>,\n        (\n            src: <span class=\"kw-2\">*const </span>() = src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>(),\n            dst: <span class=\"kw-2\">*mut </span>() = dst <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>(),\n            size: usize = size_of::&lt;T&gt;(),\n            align: usize = align_of::&lt;T&gt;(),\n            count: usize = count,\n        ) =&gt;\n        ub_checks::is_aligned_and_not_null(src, align)\n            &amp;&amp; ub_checks::is_aligned_and_not_null(dst, align)\n            &amp;&amp; ub_checks::is_nonoverlapping(src, dst, size, count)\n    );\n\n    <span class=\"comment\">// SAFETY: the safety contract for `copy_nonoverlapping` must be\n    // upheld by the caller.\n    </span><span class=\"kw\">unsafe </span>{ copy_nonoverlapping(src, dst, count) }\n}\n\n<span class=\"doccomment\">/// Copies `count * size_of::&lt;T&gt;()` bytes from `src` to `dst`. The source\n/// and destination may overlap.\n///\n/// If the source and destination will *never* overlap,\n/// [`copy_nonoverlapping`] can be used instead.\n///\n/// `copy` is semantically equivalent to C's [`memmove`], but with the argument\n/// order swapped. Copying takes place as if the bytes were copied from `src`\n/// to a temporary array and then copied from the array to `dst`.\n///\n/// The copy is \"untyped\" in the sense that data may be uninitialized or otherwise violate the\n/// requirements of `T`. The initialization state is preserved exactly.\n///\n/// [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `src` must be [valid] for reads of `count * size_of::&lt;T&gt;()` bytes, and must remain valid even\n///   when `dst` is written for `count * size_of::&lt;T&gt;()` bytes. (This means if the memory ranges\n///   overlap, the two pointers must not be subject to aliasing restrictions relative to each\n///   other.)\n///\n/// * `dst` must be [valid] for writes of `count * size_of::&lt;T&gt;()` bytes, and must remain valid even\n///   when `src` is read for `count * size_of::&lt;T&gt;()` bytes.\n///\n/// * Both `src` and `dst` must be properly aligned.\n///\n/// Like [`read`], `copy` creates a bitwise copy of `T`, regardless of\n/// whether `T` is [`Copy`]. If `T` is not [`Copy`], using both the values\n/// in the region beginning at `*src` and the region beginning at `*dst` can\n/// [violate memory safety][read-ownership].\n///\n/// Note that even if the effectively copied size (`count * size_of::&lt;T&gt;()`) is\n/// `0`, the pointers must be non-null and properly aligned.\n///\n/// [`read`]: crate::ptr::read\n/// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Efficiently create a Rust vector from an unsafe buffer:\n///\n/// ```\n/// use std::ptr;\n///\n/// /// # Safety\n/// ///\n/// /// * `ptr` must be correctly aligned for its type and non-zero.\n/// /// * `ptr` must be valid for reads of `elts` contiguous elements of type `T`.\n/// /// * Those elements must not be used after calling this function unless `T: Copy`.\n/// # #[allow(dead_code)]\n/// unsafe fn from_buf_raw&lt;T&gt;(ptr: *const T, elts: usize) -&gt; Vec&lt;T&gt; {\n///     let mut dst = Vec::with_capacity(elts);\n///\n///     // SAFETY: Our precondition ensures the source is aligned and valid,\n///     // and `Vec::with_capacity` ensures that we have usable space to write them.\n///     ptr::copy(ptr, dst.as_mut_ptr(), elts);\n///\n///     // SAFETY: We created it with this much capacity earlier,\n///     // and the previous `copy` has initialized these elements.\n///     dst.set_len(elts);\n///     dst\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"memmove\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_copy\"</span>, issue = <span class=\"string\">\"80697\"</span>)]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] </span><span class=\"comment\">// even without panics, this helps for Miri backtraces\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"ptr_copy\"</span>]\n</span><span class=\"kw\">pub const unsafe fn </span>copy&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T, dst: <span class=\"kw-2\">*mut </span>T, count: usize) {\n    <span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n        <span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_intrinsic_copy\"</span>, issue = <span class=\"string\">\"80697\"</span>)]\n        #[rustc_nounwind]\n        </span><span class=\"kw\">fn </span>copy&lt;T&gt;(src: <span class=\"kw-2\">*const </span>T, dst: <span class=\"kw-2\">*mut </span>T, count: usize);\n    }\n\n    <span class=\"comment\">// SAFETY: the safety contract for `copy` must be upheld by the caller.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">ub_checks::assert_unsafe_precondition!</span>(\n            check_language_ub,\n            <span class=\"string\">\"ptr::copy_nonoverlapping requires that both pointer arguments are aligned and non-null \\\n            and the specified memory ranges do not overlap\"</span>,\n            (\n                src: <span class=\"kw-2\">*const </span>() = src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>(),\n                dst: <span class=\"kw-2\">*mut </span>() = dst <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>(),\n                align: usize = align_of::&lt;T&gt;(),\n            ) =&gt;\n            ub_checks::is_aligned_and_not_null(src, align)\n                &amp;&amp; ub_checks::is_aligned_and_not_null(dst, align)\n        );\n        copy(src, dst, count)\n    }\n}\n\n<span class=\"doccomment\">/// Sets `count * size_of::&lt;T&gt;()` bytes of memory starting at `dst` to\n/// `val`.\n///\n/// `write_bytes` is similar to C's [`memset`], but sets `count *\n/// size_of::&lt;T&gt;()` bytes to `val`.\n///\n/// [`memset`]: https://en.cppreference.com/w/c/string/byte/memset\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * `dst` must be [valid] for writes of `count * size_of::&lt;T&gt;()` bytes.\n///\n/// * `dst` must be properly aligned.\n///\n/// Note that even if the effectively copied size (`count * size_of::&lt;T&gt;()`) is\n/// `0`, the pointer must be non-null and properly aligned.\n///\n/// Additionally, note that changing `*dst` in this way can easily lead to undefined behavior (UB)\n/// later if the written bytes are not a valid representation of some `T`. For instance, the\n/// following is an **incorrect** use of this function:\n///\n/// ```rust,no_run\n/// unsafe {\n///     let mut value: u8 = 0;\n///     let ptr: *mut bool = &amp;mut value as *mut u8 as *mut bool;\n///     let _bool = ptr.read(); // This is fine, `ptr` points to a valid `bool`.\n///     ptr.write_bytes(42u8, 1); // This function itself does not cause UB...\n///     let _bool = ptr.read(); // ...but it makes this operation UB! ⚠️\n/// }\n/// ```\n///\n/// [valid]: crate::ptr#safety\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// use std::ptr;\n///\n/// let mut vec = vec![0u32; 4];\n/// unsafe {\n///     let vec_ptr = vec.as_mut_ptr();\n///     ptr::write_bytes(vec_ptr, 0xfe, 2);\n/// }\n/// assert_eq!(vec, [0xfefefefe, 0xfefefefe, 0, 0]);\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"memset\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_allowed_through_unstable_modules]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_ptr_write\"</span>, issue = <span class=\"string\">\"86302\"</span>)]\n#[inline(always)]\n#[cfg_attr(miri, track_caller)] </span><span class=\"comment\">// even without panics, this helps for Miri backtraces\n</span><span class=\"attr\">#[rustc_diagnostic_item = <span class=\"string\">\"ptr_write_bytes\"</span>]\n</span><span class=\"kw\">pub const unsafe fn </span>write_bytes&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: u8, count: usize) {\n    <span class=\"kw\">extern </span><span class=\"string\">\"rust-intrinsic\" </span>{\n        <span class=\"attr\">#[rustc_const_unstable(feature = <span class=\"string\">\"const_ptr_write\"</span>, issue = <span class=\"string\">\"86302\"</span>)]\n        #[rustc_nounwind]\n        </span><span class=\"kw\">fn </span>write_bytes&lt;T&gt;(dst: <span class=\"kw-2\">*mut </span>T, val: u8, count: usize);\n    }\n\n    <span class=\"comment\">// SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"macro\">ub_checks::assert_unsafe_precondition!</span>(\n            check_language_ub,\n            <span class=\"string\">\"ptr::write_bytes requires that the destination pointer is aligned and non-null\"</span>,\n            (\n                addr: <span class=\"kw-2\">*const </span>() = dst <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>(),\n                align: usize = align_of::&lt;T&gt;(),\n            ) =&gt; ub_checks::is_aligned_and_not_null(addr, align)\n        );\n        write_bytes(dst, val, count)\n    }\n}\n\n<span class=\"doccomment\">/// Inform Miri that a given pointer definitely has a certain alignment.\n</span><span class=\"attr\">#[cfg(miri)]\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">crate</span>) <span class=\"kw\">const fn </span>miri_promise_symbolic_alignment(ptr: <span class=\"kw-2\">*const </span>(), align: usize) {\n    <span class=\"kw\">extern </span><span class=\"string\">\"Rust\" </span>{\n        <span class=\"doccomment\">/// Miri-provided extern function to promise that a given pointer is properly aligned for\n        /// \"symbolic\" alignment checks. Will fail if the pointer is not actually aligned or `align` is\n        /// not a power of two. Has no effect when alignment checks are concrete (which is the default).\n        </span><span class=\"kw\">fn </span>miri_promise_symbolic_alignment(ptr: <span class=\"kw-2\">*const </span>(), align: usize);\n    }\n\n    <span class=\"kw\">fn </span>runtime(ptr: <span class=\"kw-2\">*const </span>(), align: usize) {\n        <span class=\"comment\">// SAFETY: this call is always safe.\n        </span><span class=\"kw\">unsafe </span>{\n            miri_promise_symbolic_alignment(ptr, align);\n        }\n    }\n\n    <span class=\"kw\">const fn </span>compiletime(_ptr: <span class=\"kw-2\">*const </span>(), _align: usize) {}\n\n    const_eval_select((ptr, align), compiletime, runtime);\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:21:34.551Z"
}