{
	"title": "Validating References with Lifetimes - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch10-03-lifetime-syntax.html",
	"markdown": "# Validating References with Lifetimes - The Rust Programming Language\n\nLifetimes are another kind of generic that we’ve already been using. Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.\n\nOne detail we didn’t discuss in the [“References and Borrowing”](about:blank/ch04-02-references-and-borrowing.html#references-and-borrowing) section in Chapter 4 is that every reference in Rust has a _lifetime_, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must annotate types only when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways. Rust requires us to annotate the relationships using generic lifetime parameters to ensure the actual references used at runtime will definitely be valid.\n\nAnnotating lifetimes is not a concept most other programming languages have, so this is going to feel unfamiliar. Although we won’t cover lifetimes in their entirety in this chapter, we’ll discuss common ways you might encounter lifetime syntax so you can get comfortable with the concept.\n\n### [Preventing Dangling References with Lifetimes](#preventing-dangling-references-with-lifetimes)\n\nThe main aim of lifetimes is to prevent _dangling references_, which cause a program to reference data other than the data it’s intended to reference. Consider the program in Listing 10-16, which has an outer scope and an inner scope.\n\n```rust\nfn main() {\n    let r;\n\n    {\n        let x = 5;\n        r = &x;\n    }\n\n    println!(\"r: {r}\");\n}\n```\n\nListing 10-16: An attempt to use a reference whose value has gone out of scope\n\nNote: The examples in Listing 10-16, 10-17, and 10-23 declare variables without giving them an initial value, so the variable name exists in the outer scope. At first glance, this might appear to be in conflict with Rust’s having no null values. However, if we try to use a variable before giving it a value, we’ll get a compile-time error, which shows that Rust indeed does not allow null values.\n\nThe outer scope declares a variable named `r` with no initial value, and the inner scope declares a variable named `x` with the initial value of `5`. Inside the inner scope, we attempt to set the value of `r` as a reference to `x`. Then the inner scope ends, and we attempt to print the value in `r`. This code won’t compile because the value that `r` is referring to has gone out of scope before we try to use it. Here is the error message:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `x` does not live long enough\n --> src/main.rs:6:13\n  |\n5 |         let x = 5;\n  |             - binding `x` declared here\n6 |         r = &x;\n  |             ^^ borrowed value does not live long enough\n7 |     }\n  |     - `x` dropped here while still borrowed\n8 |\n9 |     println!(\"r: {r}\");\n  |                  --- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe error message says that the variable `x` “does not live long enough.” The reason is that `x` will be out of scope when the inner scope ends on line 7. But `r` is still valid for the outer scope; because its scope is larger, we say that it “lives longer.” If Rust allowed this code to work, `r` would be referencing memory that was deallocated when `x` went out of scope, and anything we tried to do with `r` wouldn’t work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.\n\n### [The Borrow Checker](#the-borrow-checker)\n\nThe Rust compiler has a _borrow checker_ that compares scopes to determine whether all borrows are valid. Listing 10-17 shows the same code as Listing 10-16 but with annotations showing the lifetimes of the variables.\n\n```rust\nfn main() {\n    let r;                // ---------+-- 'a\n                          //          |\n    {                     //          |\n        let x = 5;        // -+-- 'b  |\n        r = &x;           //  |       |\n    }                     // -+       |\n                          //          |\n    println!(\"r: {r}\");   //          |\n}                         // ---------+\n```\n\nListing 10-17: Annotations of the lifetimes of `r` and `x`, named `'a` and `'b`, respectively\n\nHere, we’ve annotated the lifetime of `r` with `'a` and the lifetime of `x` with `'b`. As you can see, the inner `'b` block is much smaller than the outer `'a` lifetime block. At compile time, Rust compares the size of the two lifetimes and sees that `r` has a lifetime of `'a` but that it refers to memory with a lifetime of `'b`. The program is rejected because `'b` is shorter than `'a`: the subject of the reference doesn’t live as long as the reference.\n\nListing 10-18 fixes the code so it doesn’t have a dangling reference and it compiles without any errors.\n\n```rust\nfn main() {\n    let x = 5;            // ----------+-- 'b\n                          //           |\n    let r = &x;           // --+-- 'a  |\n                          //   |       |\n    println!(\"r: {r}\");   //   |       |\n                          // --+       |\n}                         // ----------+\n```\n\nListing 10-18: A valid reference because the data has a longer lifetime than the reference\n\nHere, `x` has the lifetime `'b`, which in this case is larger than `'a`. This means `r` can reference `x` because Rust knows that the reference in `r` will always be valid while `x` is valid.\n\nNow that you know what the lifetimes of references are and how Rust analyzes lifetimes to ensure references will always be valid, let’s explore generic lifetimes of parameters and return values in the context of functions.\n\n### [Generic Lifetimes in Functions](#generic-lifetimes-in-functions)\n\nWe’ll write a function that returns the longer of two string slices. This function will take two string slices and return a single string slice. After we’ve implemented the `longest` function, the code in Listing 10-19 should print `The longest string is abcd`.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n```\n\nListing 10-19: A `main` function that calls the `longest` function to find the longer of two string slices\n\nNote that we want the function to take string slices, which are references, rather than strings, because we don’t want the `longest` function to take ownership of its parameters. Refer to the [“String Slices as Parameters”](about:blank/ch04-03-slices.html#string-slices-as-parameters) section in Chapter 4 for more discussion about why the parameters we use in Listing 10-19 are the ones we want.\n\nIf we try to implement the `longest` function as shown in Listing 10-20, it won’t compile.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-20: An implementation of the `longest` function that returns the longer of two string slices but does not yet compile\n\nInstead, we get the following error that talks about lifetimes:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:9:33\n  |\n9 | fn longest(x: &str, y: &str) -> &str {\n  |               ----     ----     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\nhelp: consider introducing a named lifetime parameter\n  |\n9 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n  |           ++++     ++          ++          ++\n\nerror: lifetime may not live long enough\n  --> src/main.rs:11:9\n   |\n9  | fn longest(x: &str, y: &str) -> &str {\n   |               - let's call the lifetime of this reference `'1`\n10 |     if x.len() > y.len() {\n11 |         x\n   |         ^ returning this value requires that `'1` must outlive `'static`\n\nerror: lifetime may not live long enough\n  --> src/main.rs:13:9\n   |\n9  | fn longest(x: &str, y: &str) -> &str {\n   |                        - let's call the lifetime of this reference `'2`\n...\n13 |         y\n   |         ^ returning this value requires that `'2` must outlive `'static`\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 3 previous errors\n\n```\n\nThe help text reveals that the return type needs a generic lifetime parameter on it because Rust can’t tell whether the reference being returned refers to `x` or `y`. Actually, we don’t know either, because the `if` block in the body of this function returns a reference to `x` and the `else` block returns a reference to `y`!\n\nWhen we’re defining this function, we don’t know the concrete values that will be passed into this function, so we don’t know whether the `if` case or the `else` case will execute. We also don’t know the concrete lifetimes of the references that will be passed in, so we can’t look at the scopes as we did in Listings 10-17 and 10-18 to determine whether the reference we return will always be valid. The borrow checker can’t determine this either, because it doesn’t know how the lifetimes of `x` and `y` relate to the lifetime of the return value. To fix this error, we’ll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.\n\n### [Lifetime Annotation Syntax](#lifetime-annotation-syntax)\n\nLifetime annotations don’t change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.\n\nLifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (`'`) and are usually all lowercase and very short, like generic types. Most people use the name `'a` for the first lifetime annotation. We place lifetime parameter annotations after the `&` of a reference, using a space to separate the annotation from the reference’s type.\n\nHere are some examples: a reference to an `i32` without a lifetime parameter, a reference to an `i32` that has a lifetime parameter named `'a`, and a mutable reference to an `i32` that also has the lifetime `'a`.\n\n```rust\n&i32        // a reference\n&'a i32     // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime\n```\n\nOne lifetime annotation by itself doesn’t have much meaning because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other. Let’s examine how the lifetime annotations relate to each other in the context of the `longest` function.\n\n### [Lifetime Annotations in Function Signatures](#lifetime-annotations-in-function-signatures)\n\nTo use lifetime annotations in function signatures, we need to declare the generic _lifetime_ parameters inside angle brackets between the function name and the parameter list, just as we did with generic _type_ parameters.\n\nWe want the signature to express the following constraint: the returned reference will be valid as long as both the parameters are valid. This is the relationship between lifetimes of the parameters and the return value. We’ll name the lifetime `'a` and then add it to each reference, as shown in Listing 10-21.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-21: The `longest` function definition specifying that all the references in the signature must have the same lifetime `'a`\n\nThis code should compile and produce the result we want when we use it with the `main` function in Listing 10-19.\n\nThe function signature now tells Rust that for some lifetime `'a`, the function takes two parameters, both of which are string slices that live at least as long as lifetime `'a`. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime `'a`. In practice, it means that the lifetime of the reference returned by the `longest` function is the same as the smaller of the lifetimes of the values referred to by the function arguments. These relationships are what we want Rust to use when analyzing this code.\n\nRemember, when we specify the lifetime parameters in this function signature, we’re not changing the lifetimes of any values passed in or returned. Rather, we’re specifying that the borrow checker should reject any values that don’t adhere to these constraints. Note that the `longest` function doesn’t need to know exactly how long `x` and `y` will live, only that some scope can be substituted for `'a` that will satisfy this signature.\n\nWhen annotating lifetimes in functions, the annotations go in the function signature, not in the function body. The lifetime annotations become part of the contract of the function, much like the types in the signature. Having function signatures contain the lifetime contract means the analysis the Rust compiler does can be simpler. If there’s a problem with the way a function is annotated or the way it is called, the compiler errors can point to the part of our code and the constraints more precisely. If, instead, the Rust compiler made more inferences about what we intended the relationships of the lifetimes to be, the compiler might only be able to point to a use of our code many steps away from the cause of the problem.\n\nWhen we pass concrete references to `longest`, the concrete lifetime that is substituted for `'a` is the part of the scope of `x` that overlaps with the scope of `y`. In other words, the generic lifetime `'a` will get the concrete lifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because we’ve annotated the returned reference with the same lifetime parameter `'a`, the returned reference will also be valid for the length of the smaller of the lifetimes of `x` and `y`.\n\nLet’s look at how the lifetime annotations restrict the `longest` function by passing in references that have different concrete lifetimes. Listing 10-22 is a straightforward example.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"long string is long\");\n\n    {\n        let string2 = String::from(\"xyz\");\n        let result = longest(string1.as_str(), string2.as_str());\n        println!(\"The longest string is {result}\");\n    }\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-22: Using the `longest` function with references to `String` values that have different concrete lifetimes\n\nIn this example, `string1` is valid until the end of the outer scope, `string2` is valid until the end of the inner scope, and `result` references something that is valid until the end of the inner scope. Run this code and you’ll see that the borrow checker approves; it will compile and print `The longest string is long string is long`.\n\nNext, let’s try an example that shows that the lifetime of the reference in `result` must be the smaller lifetime of the two arguments. We’ll move the declaration of the `result` variable outside the inner scope but leave the assignment of the value to the `result` variable inside the scope with `string2`. Then we’ll move the `println!` that uses `result` to outside the inner scope, after the inner scope has ended. The code in Listing 10-23 will not compile.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"long string is long\");\n    let result;\n    {\n        let string2 = String::from(\"xyz\");\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-23: Attempting to use `result` after `string2` has gone out of scope\n\nWhen we try to compile this code, we get this error:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `string2` does not live long enough\n --> src/main.rs:6:44\n  |\n5 |         let string2 = String::from(\"xyz\");\n  |             ------- binding `string2` declared here\n6 |         result = longest(string1.as_str(), string2.as_str());\n  |                                            ^^^^^^^ borrowed value does not live long enough\n7 |     }\n  |     - `string2` dropped here while still borrowed\n8 |     println!(\"The longest string is {result}\");\n  |                                     -------- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe error shows that for `result` to be valid for the `println!` statement, `string2` would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter `'a`.\n\nAs humans, we can look at this code and see that `string1` is longer than `string2`, and therefore, `result` will contain a reference to `string1`. Because `string1` has not gone out of scope yet, a reference to `string1` will still be valid for the `println!` statement. However, the compiler can’t see that the reference is valid in this case. We’ve told Rust that the lifetime of the reference returned by the `longest` function is the same as the smaller of the lifetimes of the references passed in. Therefore, the borrow checker disallows the code in Listing 10-23 as possibly having an invalid reference.\n\nTry designing more experiments that vary the values and lifetimes of the references passed in to the `longest` function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you’re right!\n\n### [Thinking in Terms of Lifetimes](#thinking-in-terms-of-lifetimes)\n\nThe way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the `longest` function to always return the first parameter rather than the longest string slice, we wouldn’t need to specify a lifetime on the `y` parameter. The following code will compile:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"efghijklmnopqrstuvwxyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &str) -> &'a str {\n    x\n}\n```\n\nWe’ve specified a lifetime parameter `'a` for the parameter `x` and the return type, but not for the parameter `y`, because the lifetime of `y` does not have any relationship with the lifetime of `x` or the return value.\n\nWhen returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does _not_ refer to one of the parameters, it must refer to a value created within this function. However, this would be a dangling reference because the value will go out of scope at the end of the function. Consider this attempted implementation of the `longest` function that won’t compile:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &str, y: &str) -> &'a str {\n    let result = String::from(\"really long string\");\n    result.as_str()\n}\n```\n\nHere, even though we’ve specified a lifetime parameter `'a` for the return type, this implementation will fail to compile because the return value lifetime is not related to the lifetime of the parameters at all. Here is the error message we get:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0515]: cannot return value referencing local variable `result`\n  --> src/main.rs:11:5\n   |\n11 |     result.as_str()\n   |     ------^^^^^^^^^\n   |     |\n   |     returns a value referencing data owned by the current function\n   |     `result` is borrowed here\n\nFor more information about this error, try `rustc --explain E0515`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe problem is that `result` goes out of scope and gets cleaned up at the end of the `longest` function. We’re also trying to return a reference to `result` from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won’t let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.\n\nUltimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they’re connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.\n\n### [Lifetime Annotations in Struct Definitions](#lifetime-annotations-in-struct-definitions)\n\nSo far, the structs we’ve defined all hold owned types. We can define structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct’s definition. Listing 10-24 has a struct named `ImportantExcerpt` that holds a string slice.\n\nFilename: src/main.rs\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nListing 10-24: A struct that holds a reference, requiring a lifetime annotation\n\nThis struct has the single field `part` that holds a string slice, which is a reference. As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition. This annotation means an instance of `ImportantExcerpt` can’t outlive the reference it holds in its `part` field.\n\nThe `main` function here creates an instance of the `ImportantExcerpt` struct that holds a reference to the first sentence of the `String` owned by the variable `novel`. The data in `novel` exists before the `ImportantExcerpt` instance is created. In addition, `novel` doesn’t go out of scope until after the `ImportantExcerpt` goes out of scope, so the reference in the `ImportantExcerpt` instance is valid.\n\n### [Lifetime Elision](#lifetime-elision)\n\nYou’ve learned that every reference has a lifetime and that you need to specify lifetime parameters for functions or structs that use references. However, we had a function in Listing 4-9, shown again in Listing 10-25, that compiled without lifetime annotations.\n\nFilename: src/lib.rs\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from(\"hello world\");\n\n    // first_word works on slices of `String`s\n    let word = first_word(&my_string[..]);\n\n    let my_string_literal = \"hello world\";\n\n    // first_word works on slices of string literals\n    let word = first_word(&my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n```\n\nListing 10-25: A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references\n\nThe reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn’t have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nAfter writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler’s code so the borrow checker could infer the lifetimes in these situations and wouldn’t need explicit annotations.\n\nThis piece of Rust history is relevant because it’s possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.\n\nThe patterns programmed into Rust’s analysis of references are called the _lifetime elision rules_. These aren’t rules for programmers to follow; they’re a set of particular cases that the compiler will consider, and if your code fits these cases, you don’t need to write the lifetimes explicitly.\n\nThe elision rules don’t provide full inference. If there is still ambiguity as to what lifetimes the references have after Rust applies the rules, the compiler won’t guess what the lifetime of the remaining references should be. Instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations.\n\nLifetimes on function or method parameters are called _input lifetimes_, and lifetimes on return values are called _output lifetimes_.\n\nThe compiler uses three rules to figure out the lifetimes of the references when there aren’t explicit annotations. The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can’t figure out lifetimes, the compiler will stop with an error. These rules apply to `fn` definitions as well as `impl` blocks.\n\nThe first rule is that the compiler assigns a lifetime parameter to each parameter that’s a reference. In other words, a function with one parameter gets one lifetime parameter: `fn foo<'a>(x: &'a i32)`; a function with two parameters gets two separate lifetime parameters: `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`; and so on.\n\nThe second rule is that, if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: `fn foo<'a>(x: &'a i32) -> &'a i32`.\n\nThe third rule is that, if there are multiple input lifetime parameters, but one of them is `&self` or `&mut self` because this is a method, the lifetime of `self` is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.\n\nLet’s pretend we’re the compiler. We’ll apply these rules to figure out the lifetimes of the references in the signature of the `first_word` function in Listing 10-25. The signature starts without any lifetimes associated with the references:\n\n```rust\nfn first_word(s: &str) -> &str {\n```\n\nThen the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We’ll call it `'a` as usual, so now the signature is this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &str {\n```\n\nThe second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nNow all the references in this function signature have lifetimes, and the compiler can continue its analysis without needing the programmer to annotate the lifetimes in this function signature.\n\nLet’s look at another example, this time using the `longest` function that had no lifetime parameters when we started working with it in Listing 10-20:\n\n```rust\nfn longest(x: &str, y: &str) -> &str {\n```\n\nLet’s apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:\n\n```rust\nfn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {\n```\n\nYou can see that the second rule doesn’t apply because there is more than one input lifetime. The third rule doesn’t apply either, because `longest` is a function rather than a method, so none of the parameters are `self`. After working through all three rules, we still haven’t figured out what the return type’s lifetime is. This is why we got an error trying to compile the code in Listing 10-20: the compiler worked through the lifetime elision rules but still couldn’t figure out all the lifetimes of the references in the signature.\n\nBecause the third rule really only applies in method signatures, we’ll look at lifetimes in that context next to see why the third rule means we don’t have to annotate lifetimes in method signatures very often.\n\n### [Lifetime Annotations in Method Definitions](#lifetime-annotations-in-method-definitions)\n\nWhen we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing 10-11. Where we declare and use the lifetime parameters depends on whether they’re related to the struct fields or the method parameters and return values.\n\nLifetime names for struct fields always need to be declared after the `impl` keyword and then used after the struct’s name because those lifetimes are part of the struct’s type.\n\nIn method signatures inside the `impl` block, references might be tied to the lifetime of references in the struct’s fields, or they might be independent. In addition, the lifetime elision rules often make it so that lifetime annotations aren’t necessary in method signatures. Let’s look at some examples using the struct named `ImportantExcerpt` that we defined in Listing 10-24.\n\nFirst we’ll use a method named `level` whose only parameter is a reference to `self` and whose return value is an `i32`, which is not a reference to anything:\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn level(&self) -> i32 {\n        3\n    }\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {announcement}\");\n        self.part\n    }\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nThe lifetime parameter declaration after `impl` and its use after the type name are required, but we’re not required to annotate the lifetime of the reference to `self` because of the first elision rule.\n\nHere is an example where the third lifetime elision rule applies:\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn level(&self) -> i32 {\n        3\n    }\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {announcement}\");\n        self.part\n    }\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nThere are two input lifetimes, so Rust applies the first lifetime elision rule and gives both `&self` and `announcement` their own lifetimes. Then, because one of the parameters is `&self`, the return type gets the lifetime of `&self`, and all lifetimes have been accounted for.\n\n### [The Static Lifetime](#the-static-lifetime)\n\nOne special lifetime we need to discuss is `'static`, which denotes that the affected reference _can_ live for the entire duration of the program. All string literals have the `'static` lifetime, which we can annotate as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s: &'static str = \"I have a static lifetime.\";\n}\n```\n\nThe text of this string is stored directly in the program’s binary, which is always available. Therefore, the lifetime of all string literals is `'static`.\n\nYou might see suggestions to use the `'static` lifetime in error messages. But before specifying `'static` as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the `'static` lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is to fix those problems, not to specify the `'static` lifetime.\n\n## [Generic Type Parameters, Trait Bounds, and Lifetimes Together](#generic-type-parameters-trait-bounds-and-lifetimes-together)\n\nLet’s briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest_with_an_announcement(\n        string1.as_str(),\n        string2,\n        \"Today is someone's birthday!\",\n    );\n    println!(\"The longest string is {result}\");\n}\n\nuse std::fmt::Display;\n\nfn longest_with_an_announcement<'a, T>(\n    x: &'a str,\n    y: &'a str,\n    ann: T,\n) -> &'a str\nwhere\n    T: Display,\n{\n    println!(\"Announcement! {ann}\");\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nThis is the `longest` function from Listing 10-21 that returns the longer of two string slices. But now it has an extra parameter named `ann` of the generic type `T`, which can be filled in by any type that implements the `Display` trait as specified by the `where` clause. This extra parameter will be printed using `{}`, which is why the `Display` trait bound is necessary. Because lifetimes are a type of generic, the declarations of the lifetime parameter `'a` and the generic type parameter `T` go in the same list inside the angle brackets after the function name.\n\n## [Summary](#summary)\n\nWe covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you’re ready to write code without repetition that works in many different situations. Generic type parameters let you apply the code to different types. Traits and trait bounds ensure that even though the types are generic, they’ll have the behavior the code needs. You learned how to use lifetime annotations to ensure that this flexible code won’t have any dangling references. And all of this analysis happens at compile time, which doesn’t affect runtime performance!\n\nBelieve it or not, there is much more to learn on the topics we discussed in this chapter: Chapter 17 discusses trait objects, which are another way to use traits. There are also more complex scenarios involving lifetime annotations that you will only need in very advanced scenarios; for those, you should read the [Rust Reference](../reference/index.html). But next, you’ll learn how to write tests in Rust so you can make sure your code is working the way it should.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Validating References with Lifetimes - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"validating-references-with-lifetimes\"><a class=\"header\" href=\"#validating-references-with-lifetimes\">Validating References with Lifetimes</a></h2>\n<p>Lifetimes are another kind of generic that we’ve already been using. Rather\nthan ensuring that a type has the behavior we want, lifetimes ensure that\nreferences are valid as long as we need them to be.</p>\n<p>One detail we didn’t discuss in the <a href=\"ch04-02-references-and-borrowing.html#references-and-borrowing\">“References and\nBorrowing”</a><!-- ignore --> section in Chapter 4 is\nthat every reference in Rust has a <em>lifetime</em>, which is the scope for which\nthat reference is valid. Most of the time, lifetimes are implicit and inferred,\njust like most of the time, types are inferred. We must annotate types only\nwhen multiple types are possible. In a similar way, we must annotate lifetimes\nwhen the lifetimes of references could be related in a few different ways. Rust\nrequires us to annotate the relationships using generic lifetime parameters to\nensure the actual references used at runtime will definitely be valid.</p>\n<p>Annotating lifetimes is not a concept most other programming languages have, so\nthis is going to feel unfamiliar. Although we won’t cover lifetimes in their\nentirety in this chapter, we’ll discuss common ways you might encounter\nlifetime syntax so you can get comfortable with the concept.</p>\n<h3 id=\"preventing-dangling-references-with-lifetimes\"><a class=\"header\" href=\"#preventing-dangling-references-with-lifetimes\">Preventing Dangling References with Lifetimes</a></h3>\n<p>The main aim of lifetimes is to prevent <em>dangling references</em>, which cause a\nprogram to reference data other than the data it’s intended to reference.\nConsider the program in Listing 10-16, which has an outer scope and an inner\nscope.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> r;\n\n    {\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n        r = &amp;x;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 10-16: An attempt to use a reference whose value\nhas gone out of scope</span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The examples in Listing 10-16, 10-17, and 10-23 declare variables\nwithout giving them an initial value, so the variable name exists in the outer\nscope. At first glance, this might appear to be in conflict with Rust’s having\nno null values. However, if we try to use a variable before giving it a value,\nwe’ll get a compile-time error, which shows that Rust indeed does not allow\nnull values.</p>\n</section>\n<p>The outer scope declares a variable named <code class=\"hljs\">r</code> with no initial value, and the\ninner scope declares a variable named <code class=\"hljs\">x</code> with the initial value of <code class=\"hljs\">5</code>. Inside\nthe inner scope, we attempt to set the value of <code class=\"hljs\">r</code> as a reference to <code class=\"hljs\">x</code>. Then\nthe inner scope ends, and we attempt to print the value in <code class=\"hljs\">r</code>. This code won’t\ncompile because the value that <code class=\"hljs\">r</code> is referring to has gone out of scope before\nwe try to use it. Here is the error message:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `x` does not live long enough\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:13</span>\n  |\n5 |         let x = 5;\n  |             - binding `x` declared here\n6 |         r = &amp;x;\n  |             ^^ borrowed value does not live long enough\n7 |     }\n  |     - `x` dropped here while still borrowed\n8 |\n9 |     println!(\"r: {r}\");\n  |                  --- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The error message says that the variable <code class=\"hljs\">x</code> “does not live long enough.” The\nreason is that <code class=\"hljs\">x</code> will be out of scope when the inner scope ends on line 7.\nBut <code class=\"hljs\">r</code> is still valid for the outer scope; because its scope is larger, we say\nthat it “lives longer.” If Rust allowed this code to work, <code class=\"hljs\">r</code> would be\nreferencing memory that was deallocated when <code class=\"hljs\">x</code> went out of scope, and\nanything we tried to do with <code class=\"hljs\">r</code> wouldn’t work correctly. So how does Rust\ndetermine that this code is invalid? It uses a borrow checker.</p>\n<h3 id=\"the-borrow-checker\"><a class=\"header\" href=\"#the-borrow-checker\">The Borrow Checker</a></h3>\n<p>The Rust compiler has a <em>borrow checker</em> that compares scopes to determine\nwhether all borrows are valid. Listing 10-17 shows the same code as Listing\n10-16 but with annotations showing the lifetimes of the variables.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> r;                <span class=\"hljs-comment\">// ---------+-- 'a</span>\n                          <span class=\"hljs-comment\">//          |</span>\n    {                     <span class=\"hljs-comment\">//          |</span>\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;        <span class=\"hljs-comment\">// -+-- 'b  |</span>\n        r = &amp;x;           <span class=\"hljs-comment\">//  |       |</span>\n    }                     <span class=\"hljs-comment\">// -+       |</span>\n                          <span class=\"hljs-comment\">//          |</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);   <span class=\"hljs-comment\">//          |</span>\n}                         <span class=\"hljs-comment\">// ---------+</span></code></pre>\n<p><span class=\"caption\">Listing 10-17: Annotations of the lifetimes of <code class=\"hljs\">r</code> and\n<code class=\"hljs\">x</code>, named <code class=\"hljs\">'a</code> and <code class=\"hljs\">'b</code>, respectively</span></p>\n<p>Here, we’ve annotated the lifetime of <code class=\"hljs\">r</code> with <code class=\"hljs\">'a</code> and the lifetime of <code class=\"hljs\">x</code>\nwith <code class=\"hljs\">'b</code>. As you can see, the inner <code class=\"hljs\">'b</code> block is much smaller than the outer\n<code class=\"hljs\">'a</code> lifetime block. At compile time, Rust compares the size of the two\nlifetimes and sees that <code class=\"hljs\">r</code> has a lifetime of <code class=\"hljs\">'a</code> but that it refers to memory\nwith a lifetime of <code class=\"hljs\">'b</code>. The program is rejected because <code class=\"hljs\">'b</code> is shorter than\n<code class=\"hljs\">'a</code>: the subject of the reference doesn’t live as long as the reference.</p>\n<p>Listing 10-18 fixes the code so it doesn’t have a dangling reference and it\ncompiles without any errors.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;            <span class=\"hljs-comment\">// ----------+-- 'b</span>\n                          <span class=\"hljs-comment\">//           |</span>\n    <span class=\"hljs-keyword\">let</span> r = &amp;x;           <span class=\"hljs-comment\">// --+-- 'a  |</span>\n                          <span class=\"hljs-comment\">//   |       |</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);   <span class=\"hljs-comment\">//   |       |</span>\n                          <span class=\"hljs-comment\">// --+       |</span>\n}                         <span class=\"hljs-comment\">// ----------+</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-18: A valid reference because the data has a\nlonger lifetime than the reference</span></p>\n<p>Here, <code class=\"hljs\">x</code> has the lifetime <code class=\"hljs\">'b</code>, which in this case is larger than <code class=\"hljs\">'a</code>. This\nmeans <code class=\"hljs\">r</code> can reference <code class=\"hljs\">x</code> because Rust knows that the reference in <code class=\"hljs\">r</code> will\nalways be valid while <code class=\"hljs\">x</code> is valid.</p>\n<p>Now that you know what the lifetimes of references are and how Rust analyzes\nlifetimes to ensure references will always be valid, let’s explore generic\nlifetimes of parameters and return values in the context of functions.</p>\n<h3 id=\"generic-lifetimes-in-functions\"><a class=\"header\" href=\"#generic-lifetimes-in-functions\">Generic Lifetimes in Functions</a></h3>\n<p>We’ll write a function that returns the longer of two string slices. This\nfunction will take two string slices and return a single string slice. After\nwe’ve implemented the <code class=\"hljs\">longest</code> function, the code in Listing 10-19 should\nprint <code class=\"hljs\">The longest string is abcd</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n\n    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 10-19: A <code class=\"hljs\">main</code> function that calls the <code class=\"hljs\">longest</code>\nfunction to find the longer of two string slices</span></p>\n<p>Note that we want the function to take string slices, which are references,\nrather than strings, because we don’t want the <code class=\"hljs\">longest</code> function to take\nownership of its parameters. Refer to the <a href=\"ch04-03-slices.html#string-slices-as-parameters\">“String Slices as\nParameters”</a><!-- ignore --> section in Chapter 4\nfor more discussion about why the parameters we use in Listing 10-19 are the\nones we want.</p>\n<p>If we try to implement the <code class=\"hljs\">longest</code> function as shown in Listing 10-20, it\nwon’t compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-20: An implementation of the <code class=\"hljs\">longest</code>\nfunction that returns the longer of two string slices but does not yet\ncompile</span></p>\n<p>Instead, we get the following error that talks about lifetimes:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:9:33</span>\n  |\n9 | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n  |               ----     ----     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\nhelp: consider introducing a named lifetime parameter\n  |\n9 | fn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {\n  |           ++++     ++          ++          ++\n\nerror: lifetime may not live long enough\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:9</span>\n   |\n9  | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n   |               - let's call the lifetime of this reference `'1`\n10 |     if x.len() &gt; y.len() {\n11 |         x\n   |         ^ returning this value requires that `'1` must outlive `'static`\n\nerror: lifetime may not live long enough\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:13:9</span>\n   |\n9  | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n   |                        - let's call the lifetime of this reference `'2`\n...\n13 |         y\n   |         ^ returning this value requires that `'2` must outlive `'static`\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 3 previous errors\n</code></pre>\n<p>The help text reveals that the return type needs a generic lifetime parameter\non it because Rust can’t tell whether the reference being returned refers to\n<code class=\"hljs\">x</code> or <code class=\"hljs\">y</code>. Actually, we don’t know either, because the <code class=\"hljs\">if</code> block in the body\nof this function returns a reference to <code class=\"hljs\">x</code> and the <code class=\"hljs\">else</code> block returns a\nreference to <code class=\"hljs\">y</code>!</p>\n<p>When we’re defining this function, we don’t know the concrete values that will\nbe passed into this function, so we don’t know whether the <code class=\"hljs\">if</code> case or the\n<code class=\"hljs\">else</code> case will execute. We also don’t know the concrete lifetimes of the\nreferences that will be passed in, so we can’t look at the scopes as we did in\nListings 10-17 and 10-18 to determine whether the reference we return will\nalways be valid. The borrow checker can’t determine this either, because it\ndoesn’t know how the lifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> relate to the lifetime of the\nreturn value. To fix this error, we’ll add generic lifetime parameters that\ndefine the relationship between the references so the borrow checker can\nperform its analysis.</p>\n<h3 id=\"lifetime-annotation-syntax\"><a class=\"header\" href=\"#lifetime-annotation-syntax\">Lifetime Annotation Syntax</a></h3>\n<p>Lifetime annotations don’t change how long any of the references live. Rather,\nthey describe the relationships of the lifetimes of multiple references to each\nother without affecting the lifetimes. Just as functions can accept any type\nwhen the signature specifies a generic type parameter, functions can accept\nreferences with any lifetime by specifying a generic lifetime parameter.</p>\n<p>Lifetime annotations have a slightly unusual syntax: the names of lifetime\nparameters must start with an apostrophe (<code class=\"hljs\">'</code>) and are usually all lowercase\nand very short, like generic types. Most people use the name <code class=\"hljs\">'a</code> for the first\nlifetime annotation. We place lifetime parameter annotations after the <code class=\"hljs\">&amp;</code> of a\nreference, using a space to separate the annotation from the reference’s type.</p>\n<p>Here are some examples: a reference to an <code class=\"hljs\">i32</code> without a lifetime parameter, a\nreference to an <code class=\"hljs\">i32</code> that has a lifetime parameter named <code class=\"hljs\">'a</code>, and a mutable\nreference to an <code class=\"hljs\">i32</code> that also has the lifetime <code class=\"hljs\">'a</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">&amp;<span class=\"hljs-built_in\">i32</span>        <span class=\"hljs-comment\">// a reference</span>\n&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>     <span class=\"hljs-comment\">// a reference with an explicit lifetime</span>\n&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span> <span class=\"hljs-comment\">// a mutable reference with an explicit lifetime</span></code></pre>\n<p>One lifetime annotation by itself doesn’t have much meaning because the\nannotations are meant to tell Rust how generic lifetime parameters of multiple\nreferences relate to each other. Let’s examine how the lifetime annotations\nrelate to each other in the context of the <code class=\"hljs\">longest</code> function.</p>\n<h3 id=\"lifetime-annotations-in-function-signatures\"><a class=\"header\" href=\"#lifetime-annotations-in-function-signatures\">Lifetime Annotations in Function Signatures</a></h3>\n<p>To use lifetime annotations in function signatures, we need to declare the\ngeneric <em>lifetime</em> parameters inside angle brackets between the function name\nand the parameter list, just as we did with generic <em>type</em> parameters.</p>\n<p>We want the signature to express the following constraint: the returned\nreference will be valid as long as both the parameters are valid. This is the\nrelationship between lifetimes of the parameters and the return value. We’ll\nname the lifetime <code class=\"hljs\">'a</code> and then add it to each reference, as shown in Listing\n10-21.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-21: The <code class=\"hljs\">longest</code> function definition\nspecifying that all the references in the signature must have the same lifetime\n<code class=\"hljs\">'a</code></span></p>\n<p>This code should compile and produce the result we want when we use it with the\n<code class=\"hljs\">main</code> function in Listing 10-19.</p>\n<p>The function signature now tells Rust that for some lifetime <code class=\"hljs\">'a</code>, the function\ntakes two parameters, both of which are string slices that live at least as\nlong as lifetime <code class=\"hljs\">'a</code>. The function signature also tells Rust that the string\nslice returned from the function will live at least as long as lifetime <code class=\"hljs\">'a</code>.\nIn practice, it means that the lifetime of the reference returned by the\n<code class=\"hljs\">longest</code> function is the same as the smaller of the lifetimes of the values\nreferred to by the function arguments. These relationships are what we want\nRust to use when analyzing this code.</p>\n<p>Remember, when we specify the lifetime parameters in this function signature,\nwe’re not changing the lifetimes of any values passed in or returned. Rather,\nwe’re specifying that the borrow checker should reject any values that don’t\nadhere to these constraints. Note that the <code class=\"hljs\">longest</code> function doesn’t need to\nknow exactly how long <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> will live, only that some scope can be\nsubstituted for <code class=\"hljs\">'a</code> that will satisfy this signature.</p>\n<p>When annotating lifetimes in functions, the annotations go in the function\nsignature, not in the function body. The lifetime annotations become part of\nthe contract of the function, much like the types in the signature. Having\nfunction signatures contain the lifetime contract means the analysis the Rust\ncompiler does can be simpler. If there’s a problem with the way a function is\nannotated or the way it is called, the compiler errors can point to the part of\nour code and the constraints more precisely. If, instead, the Rust compiler\nmade more inferences about what we intended the relationships of the lifetimes\nto be, the compiler might only be able to point to a use of our code many steps\naway from the cause of the problem.</p>\n<p>When we pass concrete references to <code class=\"hljs\">longest</code>, the concrete lifetime that is\nsubstituted for <code class=\"hljs\">'a</code> is the part of the scope of <code class=\"hljs\">x</code> that overlaps with the\nscope of <code class=\"hljs\">y</code>. In other words, the generic lifetime <code class=\"hljs\">'a</code> will get the concrete\nlifetime that is equal to the smaller of the lifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>. Because\nwe’ve annotated the returned reference with the same lifetime parameter <code class=\"hljs\">'a</code>,\nthe returned reference will also be valid for the length of the smaller of the\nlifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>.</p>\n<p>Let’s look at how the lifetime annotations restrict the <code class=\"hljs\">longest</code> function by\npassing in references that have different concrete lifetimes. Listing 10-22 is\na straightforward example.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"long string is long\"</span>);\n\n    {\n        <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"xyz\"</span>);\n        <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2.as_str());\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n</span><span class=\"boring\">        x\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        y\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-22: Using the <code class=\"hljs\">longest</code> function with\nreferences to <code class=\"hljs\">String</code> values that have different concrete lifetimes</span></p>\n<p>In this example, <code class=\"hljs\">string1</code> is valid until the end of the outer scope, <code class=\"hljs\">string2</code>\nis valid until the end of the inner scope, and <code class=\"hljs\">result</code> references something\nthat is valid until the end of the inner scope. Run this code and you’ll see\nthat the borrow checker approves; it will compile and print <code class=\"hljs\">The longest string is long string is long</code>.</p>\n<p>Next, let’s try an example that shows that the lifetime of the reference in\n<code class=\"hljs\">result</code> must be the smaller lifetime of the two arguments. We’ll move the\ndeclaration of the <code class=\"hljs\">result</code> variable outside the inner scope but leave the\nassignment of the value to the <code class=\"hljs\">result</code> variable inside the scope with\n<code class=\"hljs\">string2</code>. Then we’ll move the <code class=\"hljs\">println!</code> that uses <code class=\"hljs\">result</code> to outside the\ninner scope, after the inner scope has ended. The code in Listing 10-23 will\nnot compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"long string is long\"</span>);\n    <span class=\"hljs-keyword\">let</span> result;\n    {\n        <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"xyz\"</span>);\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n</span><span class=\"boring\">        x\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        y\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 10-23: Attempting to use <code class=\"hljs\">result</code> after <code class=\"hljs\">string2</code>\nhas gone out of scope</span></p>\n<p>When we try to compile this code, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `string2` does not live long enough\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:44</span>\n  |\n5 |         let string2 = String::from(\"xyz\");\n  |             ------- binding `string2` declared here\n6 |         result = longest(string1.as_str(), string2.as_str());\n  |                                            ^^^^^^^ borrowed value does not live long enough\n7 |     }\n  |     - `string2` dropped here while still borrowed\n8 |     println!(\"The longest string is {result}\");\n  |                                     -------- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The error shows that for <code class=\"hljs\">result</code> to be valid for the <code class=\"hljs\">println!</code> statement,\n<code class=\"hljs\">string2</code> would need to be valid until the end of the outer scope. Rust knows\nthis because we annotated the lifetimes of the function parameters and return\nvalues using the same lifetime parameter <code class=\"hljs\">'a</code>.</p>\n<p>As humans, we can look at this code and see that <code class=\"hljs\">string1</code> is longer than\n<code class=\"hljs\">string2</code>, and therefore, <code class=\"hljs\">result</code> will contain a reference to <code class=\"hljs\">string1</code>.\nBecause <code class=\"hljs\">string1</code> has not gone out of scope yet, a reference to <code class=\"hljs\">string1</code> will\nstill be valid for the <code class=\"hljs\">println!</code> statement. However, the compiler can’t see\nthat the reference is valid in this case. We’ve told Rust that the lifetime of\nthe reference returned by the <code class=\"hljs\">longest</code> function is the same as the smaller of\nthe lifetimes of the references passed in. Therefore, the borrow checker\ndisallows the code in Listing 10-23 as possibly having an invalid reference.</p>\n<p>Try designing more experiments that vary the values and lifetimes of the\nreferences passed in to the <code class=\"hljs\">longest</code> function and how the returned reference\nis used. Make hypotheses about whether or not your experiments will pass the\nborrow checker before you compile; then check to see if you’re right!</p>\n<h3 id=\"thinking-in-terms-of-lifetimes\"><a class=\"header\" href=\"#thinking-in-terms-of-lifetimes\">Thinking in Terms of Lifetimes</a></h3>\n<p>The way in which you need to specify lifetime parameters depends on what your\nfunction is doing. For example, if we changed the implementation of the\n<code class=\"hljs\">longest</code> function to always return the first parameter rather than the longest\nstring slice, we wouldn’t need to specify a lifetime on the <code class=\"hljs\">y</code> parameter. The\nfollowing code will compile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"efghijklmnopqrstuvwxyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    x\n}</code></pre></pre>\n<p>We’ve specified a lifetime parameter <code class=\"hljs\">'a</code> for the parameter <code class=\"hljs\">x</code> and the return\ntype, but not for the parameter <code class=\"hljs\">y</code>, because the lifetime of <code class=\"hljs\">y</code> does not have\nany relationship with the lifetime of <code class=\"hljs\">x</code> or the return value.</p>\n<p>When returning a reference from a function, the lifetime parameter for the\nreturn type needs to match the lifetime parameter for one of the parameters. If\nthe reference returned does <em>not</em> refer to one of the parameters, it must refer\nto a value created within this function. However, this would be a dangling\nreference because the value will go out of scope at the end of the function.\nConsider this attempted implementation of the <code class=\"hljs\">longest</code> function that won’t\ncompile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"really long string\"</span>);\n    result.as_str()\n}</code></pre>\n<p>Here, even though we’ve specified a lifetime parameter <code class=\"hljs\">'a</code> for the return\ntype, this implementation will fail to compile because the return value\nlifetime is not related to the lifetime of the parameters at all. Here is the\nerror message we get:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0515]: cannot return value referencing local variable `result`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:5</span>\n   |\n11 |     result.as_str()\n   |     ------^^^^^^^^^\n   |     |\n   |     returns a value referencing data owned by the current function\n   |     `result` is borrowed here\n\nFor more information about this error, try `rustc --explain E0515`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The problem is that <code class=\"hljs\">result</code> goes out of scope and gets cleaned up at the end\nof the <code class=\"hljs\">longest</code> function. We’re also trying to return a reference to <code class=\"hljs\">result</code>\nfrom the function. There is no way we can specify lifetime parameters that\nwould change the dangling reference, and Rust won’t let us create a dangling\nreference. In this case, the best fix would be to return an owned data type\nrather than a reference so the calling function is then responsible for\ncleaning up the value.</p>\n<p>Ultimately, lifetime syntax is about connecting the lifetimes of various\nparameters and return values of functions. Once they’re connected, Rust has\nenough information to allow memory-safe operations and disallow operations that\nwould create dangling pointers or otherwise violate memory safety.</p>\n<h3 id=\"lifetime-annotations-in-struct-definitions\"><a class=\"header\" href=\"#lifetime-annotations-in-struct-definitions\">Lifetime Annotations in Struct Definitions</a></h3>\n<p>So far, the structs we’ve defined all hold owned types. We can define structs\nto hold references, but in that case we would need to add a lifetime annotation\non every reference in the struct’s definition. Listing 10-24 has a struct named\n<code class=\"hljs\">ImportantExcerpt</code> that holds a string slice.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-24: A struct that holds a reference, requiring\na lifetime annotation</span></p>\n<p>This struct has the single field <code class=\"hljs\">part</code> that holds a string slice, which is a\nreference. As with generic data types, we declare the name of the generic\nlifetime parameter inside angle brackets after the name of the struct so we can\nuse the lifetime parameter in the body of the struct definition. This\nannotation means an instance of <code class=\"hljs\">ImportantExcerpt</code> can’t outlive the reference\nit holds in its <code class=\"hljs\">part</code> field.</p>\n<p>The <code class=\"hljs\">main</code> function here creates an instance of the <code class=\"hljs\">ImportantExcerpt</code> struct\nthat holds a reference to the first sentence of the <code class=\"hljs\">String</code> owned by the\nvariable <code class=\"hljs\">novel</code>. The data in <code class=\"hljs\">novel</code> exists before the <code class=\"hljs\">ImportantExcerpt</code>\ninstance is created. In addition, <code class=\"hljs\">novel</code> doesn’t go out of scope until after\nthe <code class=\"hljs\">ImportantExcerpt</code> goes out of scope, so the reference in the\n<code class=\"hljs\">ImportantExcerpt</code> instance is valid.</p>\n<h3 id=\"lifetime-elision\"><a class=\"header\" href=\"#lifetime-elision\">Lifetime Elision</a></h3>\n<p>You’ve learned that every reference has a lifetime and that you need to specify\nlifetime parameters for functions or structs that use references. However, we\nhad a function in Listing 4-9, shown again in Listing 10-25, that compiled\nwithout lifetime annotations.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n\n    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n        }\n    }\n\n    &amp;s[..]\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// first_word works on slices of `String`s</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[..]);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string_literal = <span class=\"hljs-string\">\"hello world\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// first_word works on slices of string literals</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[..]);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// Because string literals *are* string slices already,</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// this works too, without the slice syntax!</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(my_string_literal);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-25: A function we defined in Listing 4-9 that\ncompiled without lifetime annotations, even though the parameter and return\ntype are references</span></p>\n<p>The reason this function compiles without lifetime annotations is historical:\nin early versions (pre-1.0) of Rust, this code wouldn’t have compiled because\nevery reference needed an explicit lifetime. At that time, the function\nsignature would have been written like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>After writing a lot of Rust code, the Rust team found that Rust programmers\nwere entering the same lifetime annotations over and over in particular\nsituations. These situations were predictable and followed a few deterministic\npatterns. The developers programmed these patterns into the compiler’s code so\nthe borrow checker could infer the lifetimes in these situations and wouldn’t\nneed explicit annotations.</p>\n<p>This piece of Rust history is relevant because it’s possible that more\ndeterministic patterns will emerge and be added to the compiler. In the future,\neven fewer lifetime annotations might be required.</p>\n<p>The patterns programmed into Rust’s analysis of references are called the\n<em>lifetime elision rules</em>. These aren’t rules for programmers to follow; they’re\na set of particular cases that the compiler will consider, and if your code\nfits these cases, you don’t need to write the lifetimes explicitly.</p>\n<p>The elision rules don’t provide full inference. If there is still ambiguity as\nto what lifetimes the references have after Rust applies the rules, the\ncompiler won’t guess what the lifetime of the remaining references should be.\nInstead of guessing, the compiler will give you an error that you can resolve\nby adding the lifetime annotations.</p>\n<p>Lifetimes on function or method parameters are called <em>input lifetimes</em>, and\nlifetimes on return values are called <em>output lifetimes</em>.</p>\n<p>The compiler uses three rules to figure out the lifetimes of the references\nwhen there aren’t explicit annotations. The first rule applies to input\nlifetimes, and the second and third rules apply to output lifetimes. If the\ncompiler gets to the end of the three rules and there are still references for\nwhich it can’t figure out lifetimes, the compiler will stop with an error.\nThese rules apply to <code class=\"hljs\">fn</code> definitions as well as <code class=\"hljs\">impl</code> blocks.</p>\n<p>The first rule is that the compiler assigns a lifetime parameter to each\nparameter that’s a reference. In other words, a function with one parameter\ngets one lifetime parameter: <code class=\"hljs\">fn foo&lt;'a&gt;(x: &amp;'a i32)</code>; a function with two\nparameters gets two separate lifetime parameters: <code class=\"hljs\">fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32)</code>; and so on.</p>\n<p>The second rule is that, if there is exactly one input lifetime parameter, that\nlifetime is assigned to all output lifetime parameters: <code class=\"hljs\">fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; &amp;'a i32</code>.</p>\n<p>The third rule is that, if there are multiple input lifetime parameters, but\none of them is <code class=\"hljs\">&amp;self</code> or <code class=\"hljs\">&amp;mut self</code> because this is a method, the lifetime of\n<code class=\"hljs\">self</code> is assigned to all output lifetime parameters. This third rule makes\nmethods much nicer to read and write because fewer symbols are necessary.</p>\n<p>Let’s pretend we’re the compiler. We’ll apply these rules to figure out the\nlifetimes of the references in the signature of the <code class=\"hljs\">first_word</code> function in\nListing 10-25. The signature starts without any lifetimes associated with the\nreferences:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Then the compiler applies the first rule, which specifies that each parameter\ngets its own lifetime. We’ll call it <code class=\"hljs\">'a</code> as usual, so now the signature is\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>The second rule applies because there is exactly one input lifetime. The second\nrule specifies that the lifetime of the one input parameter gets assigned to\nthe output lifetime, so the signature is now this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Now all the references in this function signature have lifetimes, and the\ncompiler can continue its analysis without needing the programmer to annotate\nthe lifetimes in this function signature.</p>\n<p>Let’s look at another example, this time using the <code class=\"hljs\">longest</code> function that had\nno lifetime parameters when we started working with it in Listing 10-20:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Let’s apply the first rule: each parameter gets its own lifetime. This time we\nhave two parameters instead of one, so we have two lifetimes:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>You can see that the second rule doesn’t apply because there is more than one\ninput lifetime. The third rule doesn’t apply either, because <code class=\"hljs\">longest</code> is a\nfunction rather than a method, so none of the parameters are <code class=\"hljs\">self</code>. After\nworking through all three rules, we still haven’t figured out what the return\ntype’s lifetime is. This is why we got an error trying to compile the code in\nListing 10-20: the compiler worked through the lifetime elision rules but still\ncouldn’t figure out all the lifetimes of the references in the signature.</p>\n<p>Because the third rule really only applies in method signatures, we’ll look at\nlifetimes in that context next to see why the third rule means we don’t have to\nannotate lifetimes in method signatures very often.</p>\n<h3 id=\"lifetime-annotations-in-method-definitions\"><a class=\"header\" href=\"#lifetime-annotations-in-method-definitions\">Lifetime Annotations in Method Definitions</a></h3>\n<p>When we implement methods on a struct with lifetimes, we use the same syntax as\nthat of generic type parameters shown in Listing 10-11. Where we declare and\nuse the lifetime parameters depends on whether they’re related to the struct\nfields or the method parameters and return values.</p>\n<p>Lifetime names for struct fields always need to be declared after the <code class=\"hljs\">impl</code>\nkeyword and then used after the struct’s name because those lifetimes are part\nof the struct’s type.</p>\n<p>In method signatures inside the <code class=\"hljs\">impl</code> block, references might be tied to the\nlifetime of references in the struct’s fields, or they might be independent. In\naddition, the lifetime elision rules often make it so that lifetime annotations\naren’t necessary in method signatures. Let’s look at some examples using the\nstruct named <code class=\"hljs\">ImportantExcerpt</code> that we defined in Listing 10-24.</p>\n<p>First we’ll use a method named <code class=\"hljs\">level</code> whose only parameter is a reference to\n<code class=\"hljs\">self</code> and whose return value is an <code class=\"hljs\">i32</code>, which is not a reference to anything:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">level</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n        <span class=\"hljs-number\">3</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">announce_and_return_part</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, announcement: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Attention please: {announcement}\"</span>);\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.part\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n</span><span class=\"boring\">        part: first_sentence,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The lifetime parameter declaration after <code class=\"hljs\">impl</code> and its use after the type name\nare required, but we’re not required to annotate the lifetime of the reference\nto <code class=\"hljs\">self</code> because of the first elision rule.</p>\n<p>Here is an example where the third lifetime elision rule applies:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">level</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n</span><span class=\"boring\">        <span class=\"hljs-number\">3</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">announce_and_return_part</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, announcement: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Attention please: {announcement}\"</span>);\n        <span class=\"hljs-keyword\">self</span>.part\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n</span><span class=\"boring\">        part: first_sentence,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>There are two input lifetimes, so Rust applies the first lifetime elision rule\nand gives both <code class=\"hljs\">&amp;self</code> and <code class=\"hljs\">announcement</code> their own lifetimes. Then, because\none of the parameters is <code class=\"hljs\">&amp;self</code>, the return type gets the lifetime of <code class=\"hljs\">&amp;self</code>,\nand all lifetimes have been accounted for.</p>\n<h3 id=\"the-static-lifetime\"><a class=\"header\" href=\"#the-static-lifetime\">The Static Lifetime</a></h3>\n<p>One special lifetime we need to discuss is <code class=\"hljs\">'static</code>, which denotes that the\naffected reference <em>can</em> live for the entire duration of the program. All\nstring literals have the <code class=\"hljs\">'static</code> lifetime, which we can annotate as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"I have a static lifetime.\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The text of this string is stored directly in the program’s binary, which is\nalways available. Therefore, the lifetime of all string literals is <code class=\"hljs\">'static</code>.</p>\n<p>You might see suggestions to use the <code class=\"hljs\">'static</code> lifetime in error messages. But\nbefore specifying <code class=\"hljs\">'static</code> as the lifetime for a reference, think about\nwhether the reference you have actually lives the entire lifetime of your\nprogram or not, and whether you want it to. Most of the time, an error message\nsuggesting the <code class=\"hljs\">'static</code> lifetime results from attempting to create a dangling\nreference or a mismatch of the available lifetimes. In such cases, the solution\nis to fix those problems, not to specify the <code class=\"hljs\">'static</code> lifetime.</p>\n<h2 id=\"generic-type-parameters-trait-bounds-and-lifetimes-together\"><a class=\"header\" href=\"#generic-type-parameters-trait-bounds-and-lifetimes-together\">Generic Type Parameters, Trait Bounds, and Lifetimes Together</a></h2>\n<p>Let’s briefly look at the syntax of specifying generic type parameters, trait\nbounds, and lifetimes all in one function!</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest_with_an_announcement(\n</span><span class=\"boring\">        string1.as_str(),\n</span><span class=\"boring\">        string2,\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"Today is someone's birthday!\"</span>,\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest_with_an_announcement</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(\n    x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n    y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n    ann: T,\n) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>\n<span class=\"hljs-keyword\">where</span>\n    T: Display,\n{\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Announcement! {ann}\"</span>);\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre></pre>\n<p>This is the <code class=\"hljs\">longest</code> function from Listing 10-21 that returns the longer of\ntwo string slices. But now it has an extra parameter named <code class=\"hljs\">ann</code> of the generic\ntype <code class=\"hljs\">T</code>, which can be filled in by any type that implements the <code class=\"hljs\">Display</code>\ntrait as specified by the <code class=\"hljs\">where</code> clause. This extra parameter will be printed\nusing <code class=\"hljs\">{}</code>, which is why the <code class=\"hljs\">Display</code> trait bound is necessary. Because\nlifetimes are a type of generic, the declarations of the lifetime parameter\n<code class=\"hljs\">'a</code> and the generic type parameter <code class=\"hljs\">T</code> go in the same list inside the angle\nbrackets after the function name.</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>We covered a lot in this chapter! Now that you know about generic type\nparameters, traits and trait bounds, and generic lifetime parameters, you’re\nready to write code without repetition that works in many different situations.\nGeneric type parameters let you apply the code to different types. Traits and\ntrait bounds ensure that even though the types are generic, they’ll have the\nbehavior the code needs. You learned how to use lifetime annotations to ensure\nthat this flexible code won’t have any dangling references. And all of this\nanalysis happens at compile time, which doesn’t affect runtime performance!</p>\n<p>Believe it or not, there is much more to learn on the topics we discussed in\nthis chapter: Chapter 17 discusses trait objects, which are another way to use\ntraits. There are also more complex scenarios involving lifetime annotations\nthat you will only need in very advanced scenarios; for those, you should read\nthe <a href=\"../reference/index.html\">Rust Reference</a>. But next, you’ll learn how to write tests in\nRust so you can make sure your code is working the way it should.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch10-02-traits.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch11-00-testing.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch10-02-traits.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch11-00-testing.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:22.583Z"
}