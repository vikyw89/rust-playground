{
	"title": "num.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/fmt/num.rs.html#183",
	"markdown": "# num.rs - source\n\n```\n//! Integer and floating-point number formatting\n\nuse crate::fmt;\nuse crate::mem::MaybeUninit;\nuse crate::num::fmt as numfmt;\nuse crate::ops::{Div, Rem, Sub};\nuse crate::ptr;\nuse crate::slice;\nuse crate::str;\n\n#[doc(hidden)]\ntrait DisplayInt:\n    PartialEq + PartialOrd + Div<Output = Self> + Rem<Output = Self> + Sub<Output = Self> + Copy\n{\n    fn zero() -> Self;\n    fn from_u8(u: u8) -> Self;\n    fn to_u8(&self) -> u8;\n    #[cfg(not(any(target_pointer_width = \"64\", target_arch = \"wasm32\")))]\n    fn to_u32(&self) -> u32;\n    fn to_u64(&self) -> u64;\n    fn to_u128(&self) -> u128;\n}\n\nmacro_rules! impl_int {\n    ($($t:ident)*) => (\n      $(impl DisplayInt for $t {\n          fn zero() -> Self { 0 }\n          fn from_u8(u: u8) -> Self { u as Self }\n          fn to_u8(&self) -> u8 { *self as u8 }\n          #[cfg(not(any(target_pointer_width = \"64\", target_arch = \"wasm32\")))]\n          fn to_u32(&self) -> u32 { *self as u32 }\n          fn to_u64(&self) -> u64 { *self as u64 }\n          fn to_u128(&self) -> u128 { *self as u128 }\n      })*\n    )\n}\nmacro_rules! impl_uint {\n    ($($t:ident)*) => (\n      $(impl DisplayInt for $t {\n          fn zero() -> Self { 0 }\n          fn from_u8(u: u8) -> Self { u as Self }\n          fn to_u8(&self) -> u8 { *self as u8 }\n          #[cfg(not(any(target_pointer_width = \"64\", target_arch = \"wasm32\")))]\n          fn to_u32(&self) -> u32 { *self as u32 }\n          fn to_u64(&self) -> u64 { *self as u64 }\n          fn to_u128(&self) -> u128 { *self as u128 }\n      })*\n    )\n}\n\nimpl_int! { i8 i16 i32 i64 i128 isize }\nimpl_uint! { u8 u16 u32 u64 u128 usize }\n\n/// A type that represents a specific radix\n///\n/// # Safety\n///\n/// `digit` must return an ASCII character.\n#[doc(hidden)]\nunsafe trait GenericRadix: Sized {\n    /// The number of digits.\n    const BASE: u8;\n\n    /// A radix-specific prefix string.\n    const PREFIX: &'static str;\n\n    /// Converts an integer to corresponding radix digit.\n    fn digit(x: u8) -> u8;\n\n    /// Format an integer using the radix using a formatter.\n    fn fmt_int<T: DisplayInt>(&self, mut x: T, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        // The radix can be as low as 2, so we need a buffer of at least 128\n        // characters for a base 2 number.\n        let zero = T::zero();\n        let is_nonnegative = x >= zero;\n        let mut buf = [MaybeUninit::<u8>::uninit(); 128];\n        let mut curr = buf.len();\n        let base = T::from_u8(Self::BASE);\n        if is_nonnegative {\n            // Accumulate each digit of the number from the least significant\n            // to the most significant figure.\n            for byte in buf.iter_mut().rev() {\n                let n = x % base; // Get the current place value.\n                x = x / base; // Deaccumulate the number.\n                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                curr -= 1;\n                if x == zero {\n                    // No more digits left to accumulate.\n                    break;\n                };\n            }\n        } else {\n            // Do the same as above, but accounting for two's complement.\n            for byte in buf.iter_mut().rev() {\n                let n = zero - (x % base); // Get the current place value.\n                x = x / base; // Deaccumulate the number.\n                byte.write(Self::digit(n.to_u8())); // Store the digit in the buffer.\n                curr -= 1;\n                if x == zero {\n                    // No more digits left to accumulate.\n                    break;\n                };\n            }\n        }\n        let buf = &buf[curr..];\n        // SAFETY: The only chars in `buf` are created by `Self::digit` which are assumed to be\n        // valid UTF-8\n        let buf = unsafe {\n            str::from_utf8_unchecked(slice::from_raw_parts(\n                MaybeUninit::slice_as_ptr(buf),\n                buf.len(),\n            ))\n        };\n        f.pad_integral(is_nonnegative, Self::PREFIX, buf)\n    }\n}\n\n/// A binary (base 2) radix\n#[derive(Clone, PartialEq)]\nstruct Binary;\n\n/// An octal (base 8) radix\n#[derive(Clone, PartialEq)]\nstruct Octal;\n\n/// A hexadecimal (base 16) radix, formatted with lower-case characters\n#[derive(Clone, PartialEq)]\nstruct LowerHex;\n\n/// A hexadecimal (base 16) radix, formatted with upper-case characters\n#[derive(Clone, PartialEq)]\nstruct UpperHex;\n\nmacro_rules! radix {\n    ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {\n        unsafe impl GenericRadix for $T {\n            const BASE: u8 = $base;\n            const PREFIX: &'static str = $prefix;\n            fn digit(x: u8) -> u8 {\n                match x {\n                    $($x => $conv,)+\n                    x => panic!(\"number not in the range 0..={}: {}\", Self::BASE - 1, x),\n                }\n            }\n        }\n    }\n}\n\nradix! { Binary,    2, \"0b\", x @  0 ..=  1 => b'0' + x }\nradix! { Octal,     8, \"0o\", x @  0 ..=  7 => b'0' + x }\nradix! { LowerHex, 16, \"0x\", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'a' + (x - 10) }\nradix! { UpperHex, 16, \"0x\", x @  0 ..=  9 => b'0' + x, x @ 10 ..= 15 => b'A' + (x - 10) }\n\nmacro_rules! int_base {\n    (fmt::$Trait:ident for $T:ident as $U:ident -> $Radix:ident) => {\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::$Trait for $T {\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                $Radix.fmt_int(*self as $U, f)\n            }\n        }\n    };\n}\n\nmacro_rules! integer {\n    ($Int:ident, $Uint:ident) => {\n        int_base! { fmt::Binary   for $Int as $Uint  -> Binary }\n        int_base! { fmt::Octal    for $Int as $Uint  -> Octal }\n        int_base! { fmt::LowerHex for $Int as $Uint  -> LowerHex }\n        int_base! { fmt::UpperHex for $Int as $Uint  -> UpperHex }\n\n        int_base! { fmt::Binary   for $Uint as $Uint -> Binary }\n        int_base! { fmt::Octal    for $Uint as $Uint -> Octal }\n        int_base! { fmt::LowerHex for $Uint as $Uint -> LowerHex }\n        int_base! { fmt::UpperHex for $Uint as $Uint -> UpperHex }\n    };\n}\ninteger! { isize, usize }\ninteger! { i8, u8 }\ninteger! { i16, u16 }\ninteger! { i32, u32 }\ninteger! { i64, u64 }\ninteger! { i128, u128 }\nmacro_rules! debug {\n    ($($T:ident)*) => {$(\n        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::Debug for $T {\n            #[inline]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                if f.debug_lower_hex() {\n                    fmt::LowerHex::fmt(self, f)\n                } else if f.debug_upper_hex() {\n                    fmt::UpperHex::fmt(self, f)\n                } else {\n                    fmt::Display::fmt(self, f)\n                }\n            }\n        }\n    )*};\n}\ndebug! {\n  i8 i16 i32 i64 i128 isize\n  u8 u16 u32 u64 u128 usize\n}\n\n// 2 digit decimal look up table\nstatic DEC_DIGITS_LUT: &[u8; 200] = b\"0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\";\n\nmacro_rules! impl_Display {\n    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n        #[cfg(not(feature = \"optimize_for_size\"))]\n        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n            // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n            let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n            let mut curr = buf.len();\n            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n            let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n\n            // SAFETY: Since `d1` and `d2` are always less than or equal to `198`, we\n            // can copy from `lut_ptr[d1..d1 + 1]` and `lut_ptr[d2..d2 + 1]`. To show\n            // that it's OK to copy into `buf_ptr`, notice that at the beginning\n            // `curr == buf.len() == 39 > log(n)` since `n < 2^128 < 10^39`, and at\n            // each step this is kept the same as `n` is divided. Since `n` is always\n            // non-negative, this means that `curr > 0` so `buf_ptr[curr..curr + 1]`\n            // is safe to access.\n            unsafe {\n                // need at least 16 bits for the 4-characters-at-a-time to work.\n                assert!(crate::mem::size_of::<$u>() >= 2);\n\n                // eagerly decode 4 characters at a time\n                while n >= 10000 {\n                    let rem = (n % 10000) as usize;\n                    n /= 10000;\n\n                    let d1 = (rem / 100) << 1;\n                    let d2 = (rem % 100) << 1;\n                    curr -= 4;\n\n                    // We are allowed to copy to `buf_ptr[curr..curr + 3]` here since\n                    // otherwise `curr < 0`. But then `n` was originally at least `10000^10`\n                    // which is `10^40 > 2^128 > n`.\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);\n                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + 2), 2);\n                }\n\n                // if we reach here numbers are <= 9999, so at most 4 chars long\n                let mut n = n as usize; // possibly reduce 64bit math\n\n                // decode 2 more chars, if > 2 chars\n                if n >= 100 {\n                    let d1 = (n % 100) << 1;\n                    n /= 100;\n                    curr -= 2;\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);\n                }\n\n                // decode last 1 or 2 chars\n                if n < 10 {\n                    curr -= 1;\n                    *buf_ptr.add(curr) = (n as u8) + b'0';\n                } else {\n                    let d1 = n << 1;\n                    curr -= 2;\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);\n                }\n            }\n\n            // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid\n            // UTF-8 since `DEC_DIGITS_LUT` is\n            let buf_slice = unsafe {\n                str::from_utf8_unchecked(\n                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))\n            };\n            f.pad_integral(is_nonnegative, \"\", buf_slice)\n        }\n\n        #[cfg(feature = \"optimize_for_size\")]\n        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n            // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n            let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n            let mut curr = buf.len();\n            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n\n            // SAFETY: To show that it's OK to copy into `buf_ptr`, notice that at the beginning\n            // `curr == buf.len() == 39 > log(n)` since `n < 2^128 < 10^39`, and at\n            // each step this is kept the same as `n` is divided. Since `n` is always\n            // non-negative, this means that `curr > 0` so `buf_ptr[curr..curr + 1]`\n            // is safe to access.\n            unsafe {\n                loop {\n                    curr -= 1;\n                    buf_ptr.add(curr).write((n % 10) as u8 + b'0');\n                    n /= 10;\n\n                    if n == 0 {\n                        break;\n                    }\n                }\n            }\n\n            // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid UTF-8\n            let buf_slice = unsafe {\n                str::from_utf8_unchecked(\n                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))\n            };\n            f.pad_integral(is_nonnegative, \"\", buf_slice)\n        }\n\n        $(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n        impl fmt::Display for $t {\n            #[allow(unused_comparisons)]\n            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                let is_nonnegative = *self >= 0;\n                let n = if is_nonnegative {\n                    self.$conv_fn()\n                } else {\n                    // convert the negative num to positive by summing 1 to it's 2 complement\n                    (!self.$conv_fn()).wrapping_add(1)\n                };\n                $name(n, is_nonnegative, f)\n            }\n        })*\n    };\n}\n\nmacro_rules! impl_Exp {\n    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n        fn $name(\n            mut n: $u,\n            is_nonnegative: bool,\n            upper: bool,\n            f: &mut fmt::Formatter<'_>\n        ) -> fmt::Result {\n            let (mut n, mut exponent, trailing_zeros, added_precision) = {\n                let mut exponent = 0;\n                // count and remove trailing decimal zeroes\n                while n % 10 == 0 && n >= 10 {\n                    n /= 10;\n                    exponent += 1;\n                }\n                let (added_precision, subtracted_precision) = match f.precision() {\n                    Some(fmt_prec) => {\n                        // number of decimal digits minus 1\n                        let mut tmp = n;\n                        let mut prec = 0;\n                        while tmp >= 10 {\n                            tmp /= 10;\n                            prec += 1;\n                        }\n                        (fmt_prec.saturating_sub(prec), prec.saturating_sub(fmt_prec))\n                    }\n                    None => (0, 0)\n                };\n                for _ in 1..subtracted_precision {\n                    n /= 10;\n                    exponent += 1;\n                }\n                if subtracted_precision != 0 {\n                    let rem = n % 10;\n                    n /= 10;\n                    exponent += 1;\n                    // round up last digit, round to even on a tie\n                    if rem > 5 || (rem == 5 && (n % 2 != 0 || subtracted_precision > 1 )) {\n                        n += 1;\n                        // if the digit is rounded to the next power\n                        // instead adjust the exponent\n                        if n.ilog10() > (n - 1).ilog10() {\n                            n /= 10;\n                            exponent += 1;\n                        }\n                    }\n                }\n                (n, exponent, exponent, added_precision)\n            };\n\n            // 39 digits (worst case u128) + . = 40\n            // Since `curr` always decreases by the number of digits copied, this means\n            // that `curr >= 0`.\n            let mut buf = [MaybeUninit::<u8>::uninit(); 40];\n            let mut curr = buf.len(); //index for buf\n            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n            let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n\n            // decode 2 chars at a time\n            while n >= 100 {\n                let d1 = ((n % 100) as usize) << 1;\n                curr -= 2;\n                // SAFETY: `d1 <= 198`, so we can copy from `lut_ptr[d1..d1 + 2]` since\n                // `DEC_DIGITS_LUT` has a length of 200.\n                unsafe {\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), 2);\n                }\n                n /= 100;\n                exponent += 2;\n            }\n            // n is <= 99, so at most 2 chars long\n            let mut n = n as isize; // possibly reduce 64bit math\n            // decode second-to-last character\n            if n >= 10 {\n                curr -= 1;\n                // SAFETY: Safe since `40 > curr >= 0` (see comment)\n                unsafe {\n                    *buf_ptr.add(curr) = (n as u8 % 10_u8) + b'0';\n                }\n                n /= 10;\n                exponent += 1;\n            }\n            // add decimal point iff >1 mantissa digit will be printed\n            if exponent != trailing_zeros || added_precision != 0 {\n                curr -= 1;\n                // SAFETY: Safe since `40 > curr >= 0`\n                unsafe {\n                    *buf_ptr.add(curr) = b'.';\n                }\n            }\n\n            // SAFETY: Safe since `40 > curr >= 0`\n            let buf_slice = unsafe {\n                // decode last character\n                curr -= 1;\n                *buf_ptr.add(curr) = (n as u8) + b'0';\n\n                let len = buf.len() - curr as usize;\n                slice::from_raw_parts(buf_ptr.add(curr), len)\n            };\n\n            // stores 'e' (or 'E') and the up to 2-digit exponent\n            let mut exp_buf = [MaybeUninit::<u8>::uninit(); 3];\n            let exp_ptr = MaybeUninit::slice_as_mut_ptr(&mut exp_buf);\n            // SAFETY: In either case, `exp_buf` is written within bounds and `exp_ptr[..len]`\n            // is contained within `exp_buf` since `len <= 3`.\n            let exp_slice = unsafe {\n                *exp_ptr.add(0) = if upper { b'E' } else { b'e' };\n                let len = if exponent < 10 {\n                    *exp_ptr.add(1) = (exponent as u8) + b'0';\n                    2\n                } else {\n                    let off = exponent << 1;\n                    ptr::copy_nonoverlapping(lut_ptr.add(off), exp_ptr.add(1), 2);\n                    3\n                };\n                slice::from_raw_parts(exp_ptr, len)\n            };\n\n            let parts = &[\n                numfmt::Part::Copy(buf_slice),\n                numfmt::Part::Zero(added_precision),\n                numfmt::Part::Copy(exp_slice),\n            ];\n            let sign = if !is_nonnegative {\n                \"-\"\n            } else if f.sign_plus() {\n                \"+\"\n            } else {\n                \"\"\n            };\n            let formatted = numfmt::Formatted { sign, parts };\n            // SAFETY: `buf_slice` and `exp_slice` contain only ASCII characters.\n            unsafe { f.pad_formatted_parts(&formatted) }\n        }\n\n        $(\n            #[stable(feature = \"integer_exp_format\", since = \"1.42.0\")]\n            impl fmt::LowerExp for $t {\n                #[allow(unused_comparisons)]\n                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                    let is_nonnegative = *self >= 0;\n                    let n = if is_nonnegative {\n                        self.$conv_fn()\n                    } else {\n                        // convert the negative num to positive by summing 1 to it's 2 complement\n                        (!self.$conv_fn()).wrapping_add(1)\n                    };\n                    $name(n, is_nonnegative, false, f)\n                }\n            })*\n        $(\n            #[stable(feature = \"integer_exp_format\", since = \"1.42.0\")]\n            impl fmt::UpperExp for $t {\n                #[allow(unused_comparisons)]\n                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                    let is_nonnegative = *self >= 0;\n                    let n = if is_nonnegative {\n                        self.$conv_fn()\n                    } else {\n                        // convert the negative num to positive by summing 1 to it's 2 complement\n                        (!self.$conv_fn()).wrapping_add(1)\n                    };\n                    $name(n, is_nonnegative, true, f)\n                }\n            })*\n    };\n}\n\n// Include wasm32 in here since it doesn't reflect the native pointer size, and\n// often cares strongly about getting a smaller code size.\n#[cfg(any(target_pointer_width = \"64\", target_arch = \"wasm32\"))]\nmod imp {\n    use super::*;\n    impl_Display!(\n        i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n            as u64 via to_u64 named fmt_u64\n    );\n    impl_Exp!(\n        i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n            as u64 via to_u64 named exp_u64\n    );\n}\n\n#[cfg(not(any(target_pointer_width = \"64\", target_arch = \"wasm32\")))]\nmod imp {\n    use super::*;\n    impl_Display!(i8, u8, i16, u16, i32, u32, isize, usize as u32 via to_u32 named fmt_u32);\n    impl_Display!(i64, u64 as u64 via to_u64 named fmt_u64);\n    impl_Exp!(i8, u8, i16, u16, i32, u32, isize, usize as u32 via to_u32 named exp_u32);\n    impl_Exp!(i64, u64 as u64 via to_u64 named exp_u64);\n}\nimpl_Exp!(i128, u128 as u128 via to_u128 named exp_u128);\n\n/// Helper function for writing a u64 into `buf` going from last to first, with `curr`.\nfn parse_u64_into<const N: usize>(mut n: u64, buf: &mut [MaybeUninit<u8>; N], curr: &mut usize) {\n    let buf_ptr = MaybeUninit::slice_as_mut_ptr(buf);\n    let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n    assert!(*curr > 19);\n\n    // SAFETY:\n    // Writes at most 19 characters into the buffer. Guaranteed that any ptr into LUT is at most\n    // 198, so will never OOB. There is a check above that there are at least 19 characters\n    // remaining.\n    unsafe {\n        if n >= 1e16 as u64 {\n            let to_parse = n % 1e16 as u64;\n            n /= 1e16 as u64;\n\n            // Some of these are nops but it looks more elegant this way.\n            let d1 = ((to_parse / 1e14 as u64) % 100) << 1;\n            let d2 = ((to_parse / 1e12 as u64) % 100) << 1;\n            let d3 = ((to_parse / 1e10 as u64) % 100) << 1;\n            let d4 = ((to_parse / 1e8 as u64) % 100) << 1;\n            let d5 = ((to_parse / 1e6 as u64) % 100) << 1;\n            let d6 = ((to_parse / 1e4 as u64) % 100) << 1;\n            let d7 = ((to_parse / 1e2 as u64) % 100) << 1;\n            let d8 = ((to_parse / 1e0 as u64) % 100) << 1;\n\n            *curr -= 16;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 as usize), buf_ptr.add(*curr + 0), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 as usize), buf_ptr.add(*curr + 2), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d3 as usize), buf_ptr.add(*curr + 4), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d4 as usize), buf_ptr.add(*curr + 6), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d5 as usize), buf_ptr.add(*curr + 8), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d6 as usize), buf_ptr.add(*curr + 10), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d7 as usize), buf_ptr.add(*curr + 12), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d8 as usize), buf_ptr.add(*curr + 14), 2);\n        }\n        if n >= 1e8 as u64 {\n            let to_parse = n % 1e8 as u64;\n            n /= 1e8 as u64;\n\n            // Some of these are nops but it looks more elegant this way.\n            let d1 = ((to_parse / 1e6 as u64) % 100) << 1;\n            let d2 = ((to_parse / 1e4 as u64) % 100) << 1;\n            let d3 = ((to_parse / 1e2 as u64) % 100) << 1;\n            let d4 = ((to_parse / 1e0 as u64) % 100) << 1;\n            *curr -= 8;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 as usize), buf_ptr.add(*curr + 0), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 as usize), buf_ptr.add(*curr + 2), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d3 as usize), buf_ptr.add(*curr + 4), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d4 as usize), buf_ptr.add(*curr + 6), 2);\n        }\n        // `n` < 1e8 < (1 << 32)\n        let mut n = n as u32;\n        if n >= 1e4 as u32 {\n            let to_parse = n % 1e4 as u32;\n            n /= 1e4 as u32;\n\n            let d1 = (to_parse / 100) << 1;\n            let d2 = (to_parse % 100) << 1;\n            *curr -= 4;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 as usize), buf_ptr.add(*curr + 0), 2);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 as usize), buf_ptr.add(*curr + 2), 2);\n        }\n\n        // `n` < 1e4 < (1 << 16)\n        let mut n = n as u16;\n        if n >= 100 {\n            let d1 = (n % 100) << 1;\n            n /= 100;\n            *curr -= 2;\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 as usize), buf_ptr.add(*curr), 2);\n        }\n\n        // decode last 1 or 2 chars\n        if n < 10 {\n            *curr -= 1;\n            *buf_ptr.add(*curr) = (n as u8) + b'0';\n        } else {\n            let d1 = n << 1;\n            *curr -= 2;\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 as usize), buf_ptr.add(*curr), 2);\n        }\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl fmt::Display for u128 {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt_u128(*self, true, f)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl fmt::Display for i128 {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let is_nonnegative = *self >= 0;\n        let n = if is_nonnegative {\n            self.to_u128()\n        } else {\n            // convert the negative num to positive by summing 1 to it's 2 complement\n            (!self.to_u128()).wrapping_add(1)\n        };\n        fmt_u128(n, is_nonnegative, f)\n    }\n}\n\n/// Specialized optimization for u128. Instead of taking two items at a time, it splits\n/// into at most 2 u64s, and then chunks by 10e16, 10e8, 10e4, 10e2, and then 10e1.\n/// It also has to handle 1 last item, as 10^40 > 2^128 > 10^39, whereas\n/// 10^20 > 2^64 > 10^19.\nfn fmt_u128(n: u128, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n    // 2^128 is about 3*10^38, so 39 gives an extra byte of space\n    let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n    let mut curr = buf.len();\n\n    let (n, rem) = udiv_1e19(n);\n    parse_u64_into(rem, &mut buf, &mut curr);\n\n    if n != 0 {\n        // 0 pad up to point\n        let target = buf.len() - 19;\n        // SAFETY: Guaranteed that we wrote at most 19 bytes, and there must be space\n        // remaining since it has length 39\n        unsafe {\n            ptr::write_bytes(\n                MaybeUninit::slice_as_mut_ptr(&mut buf).add(target),\n                b'0',\n                curr - target,\n            );\n        }\n        curr = target;\n\n        let (n, rem) = udiv_1e19(n);\n        parse_u64_into(rem, &mut buf, &mut curr);\n        // Should this following branch be annotated with unlikely?\n        if n != 0 {\n            let target = buf.len() - 38;\n            // The raw `buf_ptr` pointer is only valid until `buf` is used the next time,\n            // buf `buf` is not used in this scope so we are good.\n            let buf_ptr = MaybeUninit::slice_as_mut_ptr(&mut buf);\n            // SAFETY: At this point we wrote at most 38 bytes, pad up to that point,\n            // There can only be at most 1 digit remaining.\n            unsafe {\n                ptr::write_bytes(buf_ptr.add(target), b'0', curr - target);\n                curr = target - 1;\n                *buf_ptr.add(curr) = (n as u8) + b'0';\n            }\n        }\n    }\n\n    // SAFETY: `curr` > 0 (since we made `buf` large enough), and all the chars are valid\n    // UTF-8 since `DEC_DIGITS_LUT` is\n    let buf_slice = unsafe {\n        str::from_utf8_unchecked(slice::from_raw_parts(\n            MaybeUninit::slice_as_mut_ptr(&mut buf).add(curr),\n            buf.len() - curr,\n        ))\n    };\n    f.pad_integral(is_nonnegative, \"\", buf_slice)\n}\n\n/// Partition of `n` into n > 1e19 and rem <= 1e19\n///\n/// Integer division algorithm is based on the following paper:\n///\n///   T. Granlund and P. Montgomery, “Division by Invariant Integers Using Multiplication”\n///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n///   Implementation, 1994, pp. 61–72\n///\nfn udiv_1e19(n: u128) -> (u128, u64) {\n    const DIV: u64 = 1e19 as u64;\n    const FACTOR: u128 = 156927543384667019095894735580191660403;\n\n    let quot = if n < 1 << 83 {\n        ((n >> 19) as u64 / (DIV >> 19)) as u128\n    } else {\n        u128_mulhi(n, FACTOR) >> 62\n    };\n\n    let rem = (n - quot * DIV as u128) as u64;\n    (quot, rem)\n}\n\n/// Multiply unsigned 128 bit integers, return upper 128 bits of the result\n#[inline]\nfn u128_mulhi(x: u128, y: u128) -> u128 {\n    let x_lo = x as u64;\n    let x_hi = (x >> 64) as u64;\n    let y_lo = y as u64;\n    let y_hi = (y >> 64) as u64;\n\n    // handle possibility of overflow\n    let carry = (x_lo as u128 * y_lo as u128) >> 64;\n    let m = x_lo as u128 * y_hi as u128 + carry;\n    let high1 = m >> 64;\n\n    let m_lo = m as u64;\n    let high2 = (x_hi as u128 * y_lo as u128 + m_lo as u128) >> 64;\n\n    x_hi as u128 * y_hi as u128 + high1 + high2\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/fmt/num.rs`.\"><title>num.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\" class=\"selected\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\" class=\"line-highlighted\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Integer and floating-point number formatting\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::mem::MaybeUninit;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::num::fmt <span class=\"kw\">as </span>numfmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ops::{Div, Rem, Sub};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ptr;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::slice;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::str;\n\n<span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">trait </span>DisplayInt:\n    PartialEq + PartialOrd + Div&lt;Output = <span class=\"self\">Self</span>&gt; + Rem&lt;Output = <span class=\"self\">Self</span>&gt; + Sub&lt;Output = <span class=\"self\">Self</span>&gt; + Copy\n{\n    <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self</span>;\n    <span class=\"kw\">fn </span>from_u8(u: u8) -&gt; <span class=\"self\">Self</span>;\n    <span class=\"kw\">fn </span>to_u8(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8;\n    <span class=\"attr\">#[cfg(not(any(target_pointer_width = <span class=\"string\">\"64\"</span>, target_arch = <span class=\"string\">\"wasm32\"</span>)))]\n    </span><span class=\"kw\">fn </span>to_u32(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u32;\n    <span class=\"kw\">fn </span>to_u64(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u64;\n    <span class=\"kw\">fn </span>to_u128(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u128;\n}\n\n<span class=\"macro\">macro_rules!</span> impl_int {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ident)<span class=\"kw-2\">*</span>) =&gt; (\n      $(<span class=\"kw\">impl </span>DisplayInt <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n          <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{ <span class=\"number\">0 </span>}\n          <span class=\"kw\">fn </span>from_u8(u: u8) -&gt; <span class=\"self\">Self </span>{ u <span class=\"kw\">as </span><span class=\"self\">Self </span>}\n          <span class=\"kw\">fn </span>to_u8(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u8 }\n          <span class=\"attr\">#[cfg(not(any(target_pointer_width = <span class=\"string\">\"64\"</span>, target_arch = <span class=\"string\">\"wasm32\"</span>)))]\n          </span><span class=\"kw\">fn </span>to_u32(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u32 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u32 }\n          <span class=\"kw\">fn </span>to_u64(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u64 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u64 }\n          <span class=\"kw\">fn </span>to_u128(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u128 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u128 }\n      })*\n    )\n}\n<span class=\"macro\">macro_rules!</span> impl_uint {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ident)<span class=\"kw-2\">*</span>) =&gt; (\n      $(<span class=\"kw\">impl </span>DisplayInt <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n          <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{ <span class=\"number\">0 </span>}\n          <span class=\"kw\">fn </span>from_u8(u: u8) -&gt; <span class=\"self\">Self </span>{ u <span class=\"kw\">as </span><span class=\"self\">Self </span>}\n          <span class=\"kw\">fn </span>to_u8(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u8 }\n          <span class=\"attr\">#[cfg(not(any(target_pointer_width = <span class=\"string\">\"64\"</span>, target_arch = <span class=\"string\">\"wasm32\"</span>)))]\n          </span><span class=\"kw\">fn </span>to_u32(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u32 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u32 }\n          <span class=\"kw\">fn </span>to_u64(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u64 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u64 }\n          <span class=\"kw\">fn </span>to_u128(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u128 { <span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span>u128 }\n      })*\n    )\n}\n\n<span class=\"macro\">impl_int!</span> { i8 i16 i32 i64 i128 isize }\n<span class=\"macro\">impl_uint!</span> { u8 u16 u32 u64 u128 usize }\n\n<span class=\"doccomment\">/// A type that represents a specific radix\n///\n/// # Safety\n///\n/// `digit` must return an ASCII character.\n</span><span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">unsafe trait </span>GenericRadix: Sized {\n    <span class=\"doccomment\">/// The number of digits.\n    </span><span class=\"kw\">const </span>BASE: u8;\n\n    <span class=\"doccomment\">/// A radix-specific prefix string.\n    </span><span class=\"kw\">const </span>PREFIX: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str;\n\n    <span class=\"doccomment\">/// Converts an integer to corresponding radix digit.\n    </span><span class=\"kw\">fn </span>digit(x: u8) -&gt; u8;\n\n    <span class=\"doccomment\">/// Format an integer using the radix using a formatter.\n    </span><span class=\"kw\">fn </span>fmt_int&lt;T: DisplayInt&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>x: T, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"comment\">// The radix can be as low as 2, so we need a buffer of at least 128\n        // characters for a base 2 number.\n        </span><span class=\"kw\">let </span>zero = T::zero();\n        <span class=\"kw\">let </span>is_nonnegative = x &gt;= zero;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">128</span>];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>curr = buf.len();\n        <span class=\"kw\">let </span>base = T::from_u8(<span class=\"self\">Self</span>::BASE);\n        <span class=\"kw\">if </span>is_nonnegative {\n            <span class=\"comment\">// Accumulate each digit of the number from the least significant\n            // to the most significant figure.\n            </span><span class=\"kw\">for </span>byte <span class=\"kw\">in </span>buf.iter_mut().rev() {\n                <span class=\"kw\">let </span>n = x % base; <span class=\"comment\">// Get the current place value.\n                </span>x = x / base; <span class=\"comment\">// Deaccumulate the number.\n                </span>byte.write(<span class=\"self\">Self</span>::digit(n.to_u8())); <span class=\"comment\">// Store the digit in the buffer.\n                </span>curr -= <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>x == zero {\n                    <span class=\"comment\">// No more digits left to accumulate.\n                    </span><span class=\"kw\">break</span>;\n                };\n            }\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// Do the same as above, but accounting for two's complement.\n            </span><span class=\"kw\">for </span>byte <span class=\"kw\">in </span>buf.iter_mut().rev() {\n                <span class=\"kw\">let </span>n = zero - (x % base); <span class=\"comment\">// Get the current place value.\n                </span>x = x / base; <span class=\"comment\">// Deaccumulate the number.\n                </span>byte.write(<span class=\"self\">Self</span>::digit(n.to_u8())); <span class=\"comment\">// Store the digit in the buffer.\n                </span>curr -= <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>x == zero {\n                    <span class=\"comment\">// No more digits left to accumulate.\n                    </span><span class=\"kw\">break</span>;\n                };\n            }\n        }\n        <span class=\"kw\">let </span>buf = <span class=\"kw-2\">&amp;</span>buf[curr..];\n        <span class=\"comment\">// SAFETY: The only chars in `buf` are created by `Self::digit` which are assumed to be\n        // valid UTF-8\n        </span><span class=\"kw\">let </span>buf = <span class=\"kw\">unsafe </span>{\n            str::from_utf8_unchecked(slice::from_raw_parts(\n                MaybeUninit::slice_as_ptr(buf),\n                buf.len(),\n            ))\n        };\n        f.pad_integral(is_nonnegative, <span class=\"self\">Self</span>::PREFIX, buf)\n    }\n}\n\n<span class=\"doccomment\">/// A binary (base 2) radix\n</span><span class=\"attr\">#[derive(Clone, PartialEq)]\n</span><span class=\"kw\">struct </span>Binary;\n\n<span class=\"doccomment\">/// An octal (base 8) radix\n</span><span class=\"attr\">#[derive(Clone, PartialEq)]\n</span><span class=\"kw\">struct </span>Octal;\n\n<span class=\"doccomment\">/// A hexadecimal (base 16) radix, formatted with lower-case characters\n</span><span class=\"attr\">#[derive(Clone, PartialEq)]\n</span><span class=\"kw\">struct </span>LowerHex;\n\n<span class=\"doccomment\">/// A hexadecimal (base 16) radix, formatted with upper-case characters\n</span><span class=\"attr\">#[derive(Clone, PartialEq)]\n</span><span class=\"kw\">struct </span>UpperHex;\n\n<span class=\"macro\">macro_rules!</span> radix {\n    (<span class=\"macro-nonterminal\">$T</span>:ident, <span class=\"macro-nonterminal\">$base</span>:expr, <span class=\"macro-nonterminal\">$prefix</span>:expr, $(<span class=\"macro-nonterminal\">$x</span>:pat =&gt; <span class=\"macro-nonterminal\">$conv</span>:expr),+) =&gt; {\n        <span class=\"kw\">unsafe impl </span>GenericRadix <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T </span>{\n            <span class=\"kw\">const </span>BASE: u8 = <span class=\"macro-nonterminal\">$base</span>;\n            <span class=\"kw\">const </span>PREFIX: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str = <span class=\"macro-nonterminal\">$prefix</span>;\n            <span class=\"kw\">fn </span>digit(x: u8) -&gt; u8 {\n                <span class=\"kw\">match </span>x {\n                    $(<span class=\"macro-nonterminal\">$x </span>=&gt; <span class=\"macro-nonterminal\">$conv</span>,)+\n                    x =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"number not in the range 0..={}: {}\"</span>, <span class=\"self\">Self</span>::BASE - <span class=\"number\">1</span>, x),\n                }\n            }\n        }\n    }\n}\n\n<span class=\"macro\">radix!</span> { Binary,    <span class=\"number\">2</span>, <span class=\"string\">\"0b\"</span>, x @  <span class=\"number\">0 </span>..=  <span class=\"number\">1 </span>=&gt; <span class=\"string\">b'0' </span>+ x }\n<span class=\"macro\">radix!</span> { Octal,     <span class=\"number\">8</span>, <span class=\"string\">\"0o\"</span>, x @  <span class=\"number\">0 </span>..=  <span class=\"number\">7 </span>=&gt; <span class=\"string\">b'0' </span>+ x }\n<span class=\"macro\">radix!</span> { LowerHex, <span class=\"number\">16</span>, <span class=\"string\">\"0x\"</span>, x @  <span class=\"number\">0 </span>..=  <span class=\"number\">9 </span>=&gt; <span class=\"string\">b'0' </span>+ x, x @ <span class=\"number\">10 </span>..= <span class=\"number\">15 </span>=&gt; <span class=\"string\">b'a' </span>+ (x - <span class=\"number\">10</span>) }\n<span class=\"macro\">radix!</span> { UpperHex, <span class=\"number\">16</span>, <span class=\"string\">\"0x\"</span>, x @  <span class=\"number\">0 </span>..=  <span class=\"number\">9 </span>=&gt; <span class=\"string\">b'0' </span>+ x, x @ <span class=\"number\">10 </span>..= <span class=\"number\">15 </span>=&gt; <span class=\"string\">b'A' </span>+ (x - <span class=\"number\">10</span>) }\n\n<span class=\"macro\">macro_rules!</span> int_base {\n    (fmt::<span class=\"macro-nonterminal\">$Trait</span>:ident <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T</span>:ident <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$U</span>:ident -&gt; <span class=\"macro-nonterminal\">$Radix</span>:ident) =&gt; {\n        <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl </span>fmt::<span class=\"macro-nonterminal\">$Trait </span><span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T </span>{\n            <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n                <span class=\"macro-nonterminal\">$Radix</span>.fmt_int(<span class=\"kw-2\">*</span><span class=\"self\">self </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$U</span>, f)\n            }\n        }\n    };\n}\n\n<span class=\"macro\">macro_rules!</span> integer {\n    (<span class=\"macro-nonterminal\">$Int</span>:ident, <span class=\"macro-nonterminal\">$Uint</span>:ident) =&gt; {\n        <span class=\"macro\">int_base!</span> { fmt::Binary   <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Int </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint  </span>-&gt; Binary }\n        <span class=\"macro\">int_base!</span> { fmt::Octal    <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Int </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint  </span>-&gt; Octal }\n        <span class=\"macro\">int_base!</span> { fmt::LowerHex <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Int </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint  </span>-&gt; LowerHex }\n        <span class=\"macro\">int_base!</span> { fmt::UpperHex <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Int </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint  </span>-&gt; UpperHex }\n\n        <span class=\"macro\">int_base!</span> { fmt::Binary   <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Uint </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint </span>-&gt; Binary }\n        <span class=\"macro\">int_base!</span> { fmt::Octal    <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Uint </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint </span>-&gt; Octal }\n        <span class=\"macro\">int_base!</span> { fmt::LowerHex <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Uint </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint </span>-&gt; LowerHex }\n        <span class=\"macro\">int_base!</span> { fmt::UpperHex <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$Uint </span><span class=\"kw\">as </span><span class=\"macro-nonterminal\">$Uint </span>-&gt; UpperHex }\n    };\n}\n<span class=\"macro\">integer!</span> { isize, usize }\n<span class=\"macro\">integer!</span> { i8, u8 }\n<span class=\"macro\">integer!</span> { i16, u16 }\n<span class=\"macro\">integer!</span> { i32, u32 }\n<span class=\"macro\">integer!</span> { i64, u64 }\n<span class=\"macro\">integer!</span> { i128, u128 }\n<span class=\"macro\">macro_rules!</span> debug {\n    ($(<span class=\"macro-nonterminal\">$T</span>:ident)<span class=\"kw-2\">*</span>) =&gt; {$(\n        <span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$T </span>{\n            <span class=\"attr\">#[inline]\n            </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n                <span class=\"kw\">if </span>f.debug_lower_hex() {\n                    fmt::LowerHex::fmt(<span class=\"self\">self</span>, f)\n                } <span class=\"kw\">else if </span>f.debug_upper_hex() {\n                    fmt::UpperHex::fmt(<span class=\"self\">self</span>, f)\n                } <span class=\"kw\">else </span>{\n                    fmt::Display::fmt(<span class=\"self\">self</span>, f)\n                }\n            }\n        }\n    )<span class=\"kw-2\">*</span>};\n}\n<span class=\"macro\">debug!</span> {\n  i8 i16 i32 i64 i128 isize\n  u8 u16 u32 u64 u128 usize\n}\n\n<span class=\"comment\">// 2 digit decimal look up table\n</span><span class=\"kw\">static </span>DEC_DIGITS_LUT: <span class=\"kw-2\">&amp;</span>[u8; <span class=\"number\">200</span>] = <span class=\"string\">b\"0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\"</span>;\n\n<span class=\"macro\">macro_rules!</span> impl_Display {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ident),* <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$u</span>:ident via <span class=\"macro-nonterminal\">$conv_fn</span>:ident named <span class=\"macro-nonterminal\">$name</span>:ident) =&gt; {\n        <span class=\"attr\">#[cfg(not(feature = <span class=\"string\">\"optimize_for_size\"</span>))]\n        </span><span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$name</span>(<span class=\"kw-2\">mut </span>n: <span class=\"macro-nonterminal\">$u</span>, is_nonnegative: bool, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n            <span class=\"comment\">// 2^128 is about 3*10^38, so 39 gives an extra byte of space\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">39</span>];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>curr = buf.len();\n            <span class=\"kw\">let </span>buf_ptr = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf);\n            <span class=\"kw\">let </span>lut_ptr = DEC_DIGITS_LUT.as_ptr();\n\n            <span class=\"comment\">// SAFETY: Since `d1` and `d2` are always less than or equal to `198`, we\n            // can copy from `lut_ptr[d1..d1 + 1]` and `lut_ptr[d2..d2 + 1]`. To show\n            // that it's OK to copy into `buf_ptr`, notice that at the beginning\n            // `curr == buf.len() == 39 &gt; log(n)` since `n &lt; 2^128 &lt; 10^39`, and at\n            // each step this is kept the same as `n` is divided. Since `n` is always\n            // non-negative, this means that `curr &gt; 0` so `buf_ptr[curr..curr + 1]`\n            // is safe to access.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"comment\">// need at least 16 bits for the 4-characters-at-a-time to work.\n                </span><span class=\"macro\">assert!</span>(<span class=\"kw\">crate</span>::mem::size_of::&lt;<span class=\"macro-nonterminal\">$u</span>&gt;() &gt;= <span class=\"number\">2</span>);\n\n                <span class=\"comment\">// eagerly decode 4 characters at a time\n                </span><span class=\"kw\">while </span>n &gt;= <span class=\"number\">10000 </span>{\n                    <span class=\"kw\">let </span>rem = (n % <span class=\"number\">10000</span>) <span class=\"kw\">as </span>usize;\n                    n /= <span class=\"number\">10000</span>;\n\n                    <span class=\"kw\">let </span>d1 = (rem / <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n                    <span class=\"kw\">let </span>d2 = (rem % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n                    curr -= <span class=\"number\">4</span>;\n\n                    <span class=\"comment\">// We are allowed to copy to `buf_ptr[curr..curr + 3]` here since\n                    // otherwise `curr &lt; 0`. But then `n` was originally at least `10000^10`\n                    // which is `10^40 &gt; 2^128 &gt; n`.\n                    </span>ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), <span class=\"number\">2</span>);\n                    ptr::copy_nonoverlapping(lut_ptr.add(d2), buf_ptr.add(curr + <span class=\"number\">2</span>), <span class=\"number\">2</span>);\n                }\n\n                <span class=\"comment\">// if we reach here numbers are &lt;= 9999, so at most 4 chars long\n                </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>n = n <span class=\"kw\">as </span>usize; <span class=\"comment\">// possibly reduce 64bit math\n\n                // decode 2 more chars, if &gt; 2 chars\n                </span><span class=\"kw\">if </span>n &gt;= <span class=\"number\">100 </span>{\n                    <span class=\"kw\">let </span>d1 = (n % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n                    n /= <span class=\"number\">100</span>;\n                    curr -= <span class=\"number\">2</span>;\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), <span class=\"number\">2</span>);\n                }\n\n                <span class=\"comment\">// decode last 1 or 2 chars\n                </span><span class=\"kw\">if </span>n &lt; <span class=\"number\">10 </span>{\n                    curr -= <span class=\"number\">1</span>;\n                    <span class=\"kw-2\">*</span>buf_ptr.add(curr) = (n <span class=\"kw\">as </span>u8) + <span class=\"string\">b'0'</span>;\n                } <span class=\"kw\">else </span>{\n                    <span class=\"kw\">let </span>d1 = n &lt;&lt; <span class=\"number\">1</span>;\n                    curr -= <span class=\"number\">2</span>;\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), <span class=\"number\">2</span>);\n                }\n            }\n\n            <span class=\"comment\">// SAFETY: `curr` &gt; 0 (since we made `buf` large enough), and all the chars are valid\n            // UTF-8 since `DEC_DIGITS_LUT` is\n            </span><span class=\"kw\">let </span>buf_slice = <span class=\"kw\">unsafe </span>{\n                str::from_utf8_unchecked(\n                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))\n            };\n            f.pad_integral(is_nonnegative, <span class=\"string\">\"\"</span>, buf_slice)\n        }\n\n        <span class=\"attr\">#[cfg(feature = <span class=\"string\">\"optimize_for_size\"</span>)]\n        </span><span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$name</span>(<span class=\"kw-2\">mut </span>n: <span class=\"macro-nonterminal\">$u</span>, is_nonnegative: bool, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n            <span class=\"comment\">// 2^128 is about 3*10^38, so 39 gives an extra byte of space\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">39</span>];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>curr = buf.len();\n            <span class=\"kw\">let </span>buf_ptr = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf);\n\n            <span class=\"comment\">// SAFETY: To show that it's OK to copy into `buf_ptr`, notice that at the beginning\n            // `curr == buf.len() == 39 &gt; log(n)` since `n &lt; 2^128 &lt; 10^39`, and at\n            // each step this is kept the same as `n` is divided. Since `n` is always\n            // non-negative, this means that `curr &gt; 0` so `buf_ptr[curr..curr + 1]`\n            // is safe to access.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">loop </span>{\n                    curr -= <span class=\"number\">1</span>;\n                    buf_ptr.add(curr).write((n % <span class=\"number\">10</span>) <span class=\"kw\">as </span>u8 + <span class=\"string\">b'0'</span>);\n                    n /= <span class=\"number\">10</span>;\n\n                    <span class=\"kw\">if </span>n == <span class=\"number\">0 </span>{\n                        <span class=\"kw\">break</span>;\n                    }\n                }\n            }\n\n            <span class=\"comment\">// SAFETY: `curr` &gt; 0 (since we made `buf` large enough), and all the chars are valid UTF-8\n            </span><span class=\"kw\">let </span>buf_slice = <span class=\"kw\">unsafe </span>{\n                str::from_utf8_unchecked(\n                    slice::from_raw_parts(buf_ptr.add(curr), buf.len() - curr))\n            };\n            f.pad_integral(is_nonnegative, <span class=\"string\">\"\"</span>, buf_slice)\n        }\n\n        $(<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n        </span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n            <span class=\"attr\">#[allow(unused_comparisons)]\n            </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n                <span class=\"kw\">let </span>is_nonnegative = <span class=\"kw-2\">*</span><span class=\"self\">self </span>&gt;= <span class=\"number\">0</span>;\n                <span class=\"kw\">let </span>n = <span class=\"kw\">if </span>is_nonnegative {\n                    <span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()\n                } <span class=\"kw\">else </span>{\n                    <span class=\"comment\">// convert the negative num to positive by summing 1 to it's 2 complement\n                    </span>(!<span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()).wrapping_add(<span class=\"number\">1</span>)\n                };\n                <span class=\"macro-nonterminal\">$name</span>(n, is_nonnegative, f)\n            }\n        })*\n    };\n}\n\n<span class=\"macro\">macro_rules!</span> impl_Exp {\n    ($(<span class=\"macro-nonterminal\">$t</span>:ident),* <span class=\"kw\">as </span><span class=\"macro-nonterminal\">$u</span>:ident via <span class=\"macro-nonterminal\">$conv_fn</span>:ident named <span class=\"macro-nonterminal\">$name</span>:ident) =&gt; {\n        <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$name</span>(\n            <span class=\"kw-2\">mut </span>n: <span class=\"macro-nonterminal\">$u</span>,\n            is_nonnegative: bool,\n            upper: bool,\n            f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;\n        ) -&gt; fmt::Result {\n            <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>n, <span class=\"kw-2\">mut </span>exponent, trailing_zeros, added_precision) = {\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>exponent = <span class=\"number\">0</span>;\n                <span class=\"comment\">// count and remove trailing decimal zeroes\n                </span><span class=\"kw\">while </span>n % <span class=\"number\">10 </span>== <span class=\"number\">0 </span>&amp;&amp; n &gt;= <span class=\"number\">10 </span>{\n                    n /= <span class=\"number\">10</span>;\n                    exponent += <span class=\"number\">1</span>;\n                }\n                <span class=\"kw\">let </span>(added_precision, subtracted_precision) = <span class=\"kw\">match </span>f.precision() {\n                    <span class=\"prelude-val\">Some</span>(fmt_prec) =&gt; {\n                        <span class=\"comment\">// number of decimal digits minus 1\n                        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tmp = n;\n                        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>prec = <span class=\"number\">0</span>;\n                        <span class=\"kw\">while </span>tmp &gt;= <span class=\"number\">10 </span>{\n                            tmp /= <span class=\"number\">10</span>;\n                            prec += <span class=\"number\">1</span>;\n                        }\n                        (fmt_prec.saturating_sub(prec), prec.saturating_sub(fmt_prec))\n                    }\n                    <span class=\"prelude-val\">None </span>=&gt; (<span class=\"number\">0</span>, <span class=\"number\">0</span>)\n                };\n                <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..subtracted_precision {\n                    n /= <span class=\"number\">10</span>;\n                    exponent += <span class=\"number\">1</span>;\n                }\n                <span class=\"kw\">if </span>subtracted_precision != <span class=\"number\">0 </span>{\n                    <span class=\"kw\">let </span>rem = n % <span class=\"number\">10</span>;\n                    n /= <span class=\"number\">10</span>;\n                    exponent += <span class=\"number\">1</span>;\n                    <span class=\"comment\">// round up last digit, round to even on a tie\n                    </span><span class=\"kw\">if </span>rem &gt; <span class=\"number\">5 </span>|| (rem == <span class=\"number\">5 </span>&amp;&amp; (n % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>|| subtracted_precision &gt; <span class=\"number\">1 </span>)) {\n                        n += <span class=\"number\">1</span>;\n                        <span class=\"comment\">// if the digit is rounded to the next power\n                        // instead adjust the exponent\n                        </span><span class=\"kw\">if </span>n.ilog10() &gt; (n - <span class=\"number\">1</span>).ilog10() {\n                            n /= <span class=\"number\">10</span>;\n                            exponent += <span class=\"number\">1</span>;\n                        }\n                    }\n                }\n                (n, exponent, exponent, added_precision)\n            };\n\n            <span class=\"comment\">// 39 digits (worst case u128) + . = 40\n            // Since `curr` always decreases by the number of digits copied, this means\n            // that `curr &gt;= 0`.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">40</span>];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>curr = buf.len(); <span class=\"comment\">//index for buf\n            </span><span class=\"kw\">let </span>buf_ptr = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf);\n            <span class=\"kw\">let </span>lut_ptr = DEC_DIGITS_LUT.as_ptr();\n\n            <span class=\"comment\">// decode 2 chars at a time\n            </span><span class=\"kw\">while </span>n &gt;= <span class=\"number\">100 </span>{\n                <span class=\"kw\">let </span>d1 = ((n % <span class=\"number\">100</span>) <span class=\"kw\">as </span>usize) &lt;&lt; <span class=\"number\">1</span>;\n                curr -= <span class=\"number\">2</span>;\n                <span class=\"comment\">// SAFETY: `d1 &lt;= 198`, so we can copy from `lut_ptr[d1..d1 + 2]` since\n                // `DEC_DIGITS_LUT` has a length of 200.\n                </span><span class=\"kw\">unsafe </span>{\n                    ptr::copy_nonoverlapping(lut_ptr.add(d1), buf_ptr.add(curr), <span class=\"number\">2</span>);\n                }\n                n /= <span class=\"number\">100</span>;\n                exponent += <span class=\"number\">2</span>;\n            }\n            <span class=\"comment\">// n is &lt;= 99, so at most 2 chars long\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>n = n <span class=\"kw\">as </span>isize; <span class=\"comment\">// possibly reduce 64bit math\n            // decode second-to-last character\n            </span><span class=\"kw\">if </span>n &gt;= <span class=\"number\">10 </span>{\n                curr -= <span class=\"number\">1</span>;\n                <span class=\"comment\">// SAFETY: Safe since `40 &gt; curr &gt;= 0` (see comment)\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"kw-2\">*</span>buf_ptr.add(curr) = (n <span class=\"kw\">as </span>u8 % <span class=\"number\">10_u8</span>) + <span class=\"string\">b'0'</span>;\n                }\n                n /= <span class=\"number\">10</span>;\n                exponent += <span class=\"number\">1</span>;\n            }\n            <span class=\"comment\">// add decimal point iff &gt;1 mantissa digit will be printed\n            </span><span class=\"kw\">if </span>exponent != trailing_zeros || added_precision != <span class=\"number\">0 </span>{\n                curr -= <span class=\"number\">1</span>;\n                <span class=\"comment\">// SAFETY: Safe since `40 &gt; curr &gt;= 0`\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"kw-2\">*</span>buf_ptr.add(curr) = <span class=\"string\">b'.'</span>;\n                }\n            }\n\n            <span class=\"comment\">// SAFETY: Safe since `40 &gt; curr &gt;= 0`\n            </span><span class=\"kw\">let </span>buf_slice = <span class=\"kw\">unsafe </span>{\n                <span class=\"comment\">// decode last character\n                </span>curr -= <span class=\"number\">1</span>;\n                <span class=\"kw-2\">*</span>buf_ptr.add(curr) = (n <span class=\"kw\">as </span>u8) + <span class=\"string\">b'0'</span>;\n\n                <span class=\"kw\">let </span>len = buf.len() - curr <span class=\"kw\">as </span>usize;\n                slice::from_raw_parts(buf_ptr.add(curr), len)\n            };\n\n            <span class=\"comment\">// stores 'e' (or 'E') and the up to 2-digit exponent\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>exp_buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">3</span>];\n            <span class=\"kw\">let </span>exp_ptr = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>exp_buf);\n            <span class=\"comment\">// SAFETY: In either case, `exp_buf` is written within bounds and `exp_ptr[..len]`\n            // is contained within `exp_buf` since `len &lt;= 3`.\n            </span><span class=\"kw\">let </span>exp_slice = <span class=\"kw\">unsafe </span>{\n                <span class=\"kw-2\">*</span>exp_ptr.add(<span class=\"number\">0</span>) = <span class=\"kw\">if </span>upper { <span class=\"string\">b'E' </span>} <span class=\"kw\">else </span>{ <span class=\"string\">b'e' </span>};\n                <span class=\"kw\">let </span>len = <span class=\"kw\">if </span>exponent &lt; <span class=\"number\">10 </span>{\n                    <span class=\"kw-2\">*</span>exp_ptr.add(<span class=\"number\">1</span>) = (exponent <span class=\"kw\">as </span>u8) + <span class=\"string\">b'0'</span>;\n                    <span class=\"number\">2\n                </span>} <span class=\"kw\">else </span>{\n                    <span class=\"kw\">let </span>off = exponent &lt;&lt; <span class=\"number\">1</span>;\n                    ptr::copy_nonoverlapping(lut_ptr.add(off), exp_ptr.add(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n                    <span class=\"number\">3\n                </span>};\n                slice::from_raw_parts(exp_ptr, len)\n            };\n\n            <span class=\"kw\">let </span>parts = <span class=\"kw-2\">&amp;</span>[\n                numfmt::Part::Copy(buf_slice),\n                numfmt::Part::Zero(added_precision),\n                numfmt::Part::Copy(exp_slice),\n            ];\n            <span class=\"kw\">let </span>sign = <span class=\"kw\">if </span>!is_nonnegative {\n                <span class=\"string\">\"-\"\n            </span>} <span class=\"kw\">else if </span>f.sign_plus() {\n                <span class=\"string\">\"+\"\n            </span>} <span class=\"kw\">else </span>{\n                <span class=\"string\">\"\"\n            </span>};\n            <span class=\"kw\">let </span>formatted = numfmt::Formatted { sign, parts };\n            <span class=\"comment\">// SAFETY: `buf_slice` and `exp_slice` contain only ASCII characters.\n            </span><span class=\"kw\">unsafe </span>{ f.pad_formatted_parts(<span class=\"kw-2\">&amp;</span>formatted) }\n        }\n\n        $(\n            <span class=\"attr\">#[stable(feature = <span class=\"string\">\"integer_exp_format\"</span>, since = <span class=\"string\">\"1.42.0\"</span>)]\n            </span><span class=\"kw\">impl </span>fmt::LowerExp <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n                <span class=\"attr\">#[allow(unused_comparisons)]\n                </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n                    <span class=\"kw\">let </span>is_nonnegative = <span class=\"kw-2\">*</span><span class=\"self\">self </span>&gt;= <span class=\"number\">0</span>;\n                    <span class=\"kw\">let </span>n = <span class=\"kw\">if </span>is_nonnegative {\n                        <span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()\n                    } <span class=\"kw\">else </span>{\n                        <span class=\"comment\">// convert the negative num to positive by summing 1 to it's 2 complement\n                        </span>(!<span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()).wrapping_add(<span class=\"number\">1</span>)\n                    };\n                    <span class=\"macro-nonterminal\">$name</span>(n, is_nonnegative, <span class=\"bool-val\">false</span>, f)\n                }\n            })*\n        $(\n            <span class=\"attr\">#[stable(feature = <span class=\"string\">\"integer_exp_format\"</span>, since = <span class=\"string\">\"1.42.0\"</span>)]\n            </span><span class=\"kw\">impl </span>fmt::UpperExp <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t </span>{\n                <span class=\"attr\">#[allow(unused_comparisons)]\n                </span><span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n                    <span class=\"kw\">let </span>is_nonnegative = <span class=\"kw-2\">*</span><span class=\"self\">self </span>&gt;= <span class=\"number\">0</span>;\n                    <span class=\"kw\">let </span>n = <span class=\"kw\">if </span>is_nonnegative {\n                        <span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()\n                    } <span class=\"kw\">else </span>{\n                        <span class=\"comment\">// convert the negative num to positive by summing 1 to it's 2 complement\n                        </span>(!<span class=\"self\">self</span>.<span class=\"macro-nonterminal\">$conv_fn</span>()).wrapping_add(<span class=\"number\">1</span>)\n                    };\n                    <span class=\"macro-nonterminal\">$name</span>(n, is_nonnegative, <span class=\"bool-val\">true</span>, f)\n                }\n            })*\n    };\n}\n\n<span class=\"comment\">// Include wasm32 in here since it doesn't reflect the native pointer size, and\n// often cares strongly about getting a smaller code size.\n</span><span class=\"attr\">#[cfg(any(target_pointer_width = <span class=\"string\">\"64\"</span>, target_arch = <span class=\"string\">\"wasm32\"</span>))]\n</span><span class=\"kw\">mod </span>imp {\n    <span class=\"kw\">use super</span>::<span class=\"kw-2\">*</span>;\n    <span class=\"macro\">impl_Display!</span>(\n        i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n            <span class=\"kw\">as </span>u64 via to_u64 named fmt_u64\n    );\n    <span class=\"macro\">impl_Exp!</span>(\n        i8, u8, i16, u16, i32, u32, i64, u64, usize, isize\n            <span class=\"kw\">as </span>u64 via to_u64 named exp_u64\n    );\n}\n\n<span class=\"attr\">#[cfg(not(any(target_pointer_width = <span class=\"string\">\"64\"</span>, target_arch = <span class=\"string\">\"wasm32\"</span>)))]\n</span><span class=\"kw\">mod </span>imp {\n    <span class=\"kw\">use super</span>::<span class=\"kw-2\">*</span>;\n    <span class=\"macro\">impl_Display!</span>(i8, u8, i16, u16, i32, u32, isize, usize <span class=\"kw\">as </span>u32 via to_u32 named fmt_u32);\n    <span class=\"macro\">impl_Display!</span>(i64, u64 <span class=\"kw\">as </span>u64 via to_u64 named fmt_u64);\n    <span class=\"macro\">impl_Exp!</span>(i8, u8, i16, u16, i32, u32, isize, usize <span class=\"kw\">as </span>u32 via to_u32 named exp_u32);\n    <span class=\"macro\">impl_Exp!</span>(i64, u64 <span class=\"kw\">as </span>u64 via to_u64 named exp_u64);\n}\n<span class=\"macro\">impl_Exp!</span>(i128, u128 <span class=\"kw\">as </span>u128 via to_u128 named exp_u128);\n\n<span class=\"doccomment\">/// Helper function for writing a u64 into `buf` going from last to first, with `curr`.\n</span><span class=\"kw\">fn </span>parse_u64_into&lt;<span class=\"kw\">const </span>N: usize&gt;(<span class=\"kw-2\">mut </span>n: u64, buf: <span class=\"kw-2\">&amp;mut </span>[MaybeUninit&lt;u8&gt;; N], curr: <span class=\"kw-2\">&amp;mut </span>usize) {\n    <span class=\"kw\">let </span>buf_ptr = MaybeUninit::slice_as_mut_ptr(buf);\n    <span class=\"kw\">let </span>lut_ptr = DEC_DIGITS_LUT.as_ptr();\n    <span class=\"macro\">assert!</span>(<span class=\"kw-2\">*</span>curr &gt; <span class=\"number\">19</span>);\n\n    <span class=\"comment\">// SAFETY:\n    // Writes at most 19 characters into the buffer. Guaranteed that any ptr into LUT is at most\n    // 198, so will never OOB. There is a check above that there are at least 19 characters\n    // remaining.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">if </span>n &gt;= <span class=\"number\">1e16 </span><span class=\"kw\">as </span>u64 {\n            <span class=\"kw\">let </span>to_parse = n % <span class=\"number\">1e16 </span><span class=\"kw\">as </span>u64;\n            n /= <span class=\"number\">1e16 </span><span class=\"kw\">as </span>u64;\n\n            <span class=\"comment\">// Some of these are nops but it looks more elegant this way.\n            </span><span class=\"kw\">let </span>d1 = ((to_parse / <span class=\"number\">1e14 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d2 = ((to_parse / <span class=\"number\">1e12 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d3 = ((to_parse / <span class=\"number\">1e10 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d4 = ((to_parse / <span class=\"number\">1e8 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d5 = ((to_parse / <span class=\"number\">1e6 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d6 = ((to_parse / <span class=\"number\">1e4 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d7 = ((to_parse / <span class=\"number\">1e2 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d8 = ((to_parse / <span class=\"number\">1e0 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">16</span>;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">0</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">2</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d3 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">4</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d4 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">6</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d5 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">8</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d6 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">10</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d7 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">12</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d8 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">14</span>), <span class=\"number\">2</span>);\n        }\n        <span class=\"kw\">if </span>n &gt;= <span class=\"number\">1e8 </span><span class=\"kw\">as </span>u64 {\n            <span class=\"kw\">let </span>to_parse = n % <span class=\"number\">1e8 </span><span class=\"kw\">as </span>u64;\n            n /= <span class=\"number\">1e8 </span><span class=\"kw\">as </span>u64;\n\n            <span class=\"comment\">// Some of these are nops but it looks more elegant this way.\n            </span><span class=\"kw\">let </span>d1 = ((to_parse / <span class=\"number\">1e6 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d2 = ((to_parse / <span class=\"number\">1e4 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d3 = ((to_parse / <span class=\"number\">1e2 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d4 = ((to_parse / <span class=\"number\">1e0 </span><span class=\"kw\">as </span>u64) % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">8</span>;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">0</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">2</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d3 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">4</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d4 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">6</span>), <span class=\"number\">2</span>);\n        }\n        <span class=\"comment\">// `n` &lt; 1e8 &lt; (1 &lt;&lt; 32)\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>n = n <span class=\"kw\">as </span>u32;\n        <span class=\"kw\">if </span>n &gt;= <span class=\"number\">1e4 </span><span class=\"kw\">as </span>u32 {\n            <span class=\"kw\">let </span>to_parse = n % <span class=\"number\">1e4 </span><span class=\"kw\">as </span>u32;\n            n /= <span class=\"number\">1e4 </span><span class=\"kw\">as </span>u32;\n\n            <span class=\"kw\">let </span>d1 = (to_parse / <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw\">let </span>d2 = (to_parse % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">4</span>;\n\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">0</span>), <span class=\"number\">2</span>);\n            ptr::copy_nonoverlapping(lut_ptr.add(d2 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr + <span class=\"number\">2</span>), <span class=\"number\">2</span>);\n        }\n\n        <span class=\"comment\">// `n` &lt; 1e4 &lt; (1 &lt;&lt; 16)\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>n = n <span class=\"kw\">as </span>u16;\n        <span class=\"kw\">if </span>n &gt;= <span class=\"number\">100 </span>{\n            <span class=\"kw\">let </span>d1 = (n % <span class=\"number\">100</span>) &lt;&lt; <span class=\"number\">1</span>;\n            n /= <span class=\"number\">100</span>;\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">2</span>;\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr), <span class=\"number\">2</span>);\n        }\n\n        <span class=\"comment\">// decode last 1 or 2 chars\n        </span><span class=\"kw\">if </span>n &lt; <span class=\"number\">10 </span>{\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">1</span>;\n            <span class=\"kw-2\">*</span>buf_ptr.add(<span class=\"kw-2\">*</span>curr) = (n <span class=\"kw\">as </span>u8) + <span class=\"string\">b'0'</span>;\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw\">let </span>d1 = n &lt;&lt; <span class=\"number\">1</span>;\n            <span class=\"kw-2\">*</span>curr -= <span class=\"number\">2</span>;\n            ptr::copy_nonoverlapping(lut_ptr.add(d1 <span class=\"kw\">as </span>usize), buf_ptr.add(<span class=\"kw-2\">*</span>curr), <span class=\"number\">2</span>);\n        }\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>u128 {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt_u128(<span class=\"kw-2\">*</span><span class=\"self\">self</span>, <span class=\"bool-val\">true</span>, f)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>i128 {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span>is_nonnegative = <span class=\"kw-2\">*</span><span class=\"self\">self </span>&gt;= <span class=\"number\">0</span>;\n        <span class=\"kw\">let </span>n = <span class=\"kw\">if </span>is_nonnegative {\n            <span class=\"self\">self</span>.to_u128()\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// convert the negative num to positive by summing 1 to it's 2 complement\n            </span>(!<span class=\"self\">self</span>.to_u128()).wrapping_add(<span class=\"number\">1</span>)\n        };\n        fmt_u128(n, is_nonnegative, f)\n    }\n}\n\n<span class=\"doccomment\">/// Specialized optimization for u128. Instead of taking two items at a time, it splits\n/// into at most 2 u64s, and then chunks by 10e16, 10e8, 10e4, 10e2, and then 10e1.\n/// It also has to handle 1 last item, as 10^40 &gt; 2^128 &gt; 10^39, whereas\n/// 10^20 &gt; 2^64 &gt; 10^19.\n</span><span class=\"kw\">fn </span>fmt_u128(n: u128, is_nonnegative: bool, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n    <span class=\"comment\">// 2^128 is about 3*10^38, so 39 gives an extra byte of space\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = [MaybeUninit::&lt;u8&gt;::uninit(); <span class=\"number\">39</span>];\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>curr = buf.len();\n\n    <span class=\"kw\">let </span>(n, rem) = udiv_1e19(n);\n    parse_u64_into(rem, <span class=\"kw-2\">&amp;mut </span>buf, <span class=\"kw-2\">&amp;mut </span>curr);\n\n    <span class=\"kw\">if </span>n != <span class=\"number\">0 </span>{\n        <span class=\"comment\">// 0 pad up to point\n        </span><span class=\"kw\">let </span>target = buf.len() - <span class=\"number\">19</span>;\n        <span class=\"comment\">// SAFETY: Guaranteed that we wrote at most 19 bytes, and there must be space\n        // remaining since it has length 39\n        </span><span class=\"kw\">unsafe </span>{\n            ptr::write_bytes(\n                MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf).add(target),\n                <span class=\"string\">b'0'</span>,\n                curr - target,\n            );\n        }\n        curr = target;\n\n        <span class=\"kw\">let </span>(n, rem) = udiv_1e19(n);\n        parse_u64_into(rem, <span class=\"kw-2\">&amp;mut </span>buf, <span class=\"kw-2\">&amp;mut </span>curr);\n        <span class=\"comment\">// Should this following branch be annotated with unlikely?\n        </span><span class=\"kw\">if </span>n != <span class=\"number\">0 </span>{\n            <span class=\"kw\">let </span>target = buf.len() - <span class=\"number\">38</span>;\n            <span class=\"comment\">// The raw `buf_ptr` pointer is only valid until `buf` is used the next time,\n            // buf `buf` is not used in this scope so we are good.\n            </span><span class=\"kw\">let </span>buf_ptr = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf);\n            <span class=\"comment\">// SAFETY: At this point we wrote at most 38 bytes, pad up to that point,\n            // There can only be at most 1 digit remaining.\n            </span><span class=\"kw\">unsafe </span>{\n                ptr::write_bytes(buf_ptr.add(target), <span class=\"string\">b'0'</span>, curr - target);\n                curr = target - <span class=\"number\">1</span>;\n                <span class=\"kw-2\">*</span>buf_ptr.add(curr) = (n <span class=\"kw\">as </span>u8) + <span class=\"string\">b'0'</span>;\n            }\n        }\n    }\n\n    <span class=\"comment\">// SAFETY: `curr` &gt; 0 (since we made `buf` large enough), and all the chars are valid\n    // UTF-8 since `DEC_DIGITS_LUT` is\n    </span><span class=\"kw\">let </span>buf_slice = <span class=\"kw\">unsafe </span>{\n        str::from_utf8_unchecked(slice::from_raw_parts(\n            MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>buf).add(curr),\n            buf.len() - curr,\n        ))\n    };\n    f.pad_integral(is_nonnegative, <span class=\"string\">\"\"</span>, buf_slice)\n}\n\n<span class=\"doccomment\">/// Partition of `n` into n &gt; 1e19 and rem &lt;= 1e19\n///\n/// Integer division algorithm is based on the following paper:\n///\n///   T. Granlund and P. Montgomery, “Division by Invariant Integers Using Multiplication”\n///   in Proc. of the SIGPLAN94 Conference on Programming Language Design and\n///   Implementation, 1994, pp. 61–72\n///\n</span><span class=\"kw\">fn </span>udiv_1e19(n: u128) -&gt; (u128, u64) {\n    <span class=\"kw\">const </span>DIV: u64 = <span class=\"number\">1e19 </span><span class=\"kw\">as </span>u64;\n    <span class=\"kw\">const </span>FACTOR: u128 = <span class=\"number\">156927543384667019095894735580191660403</span>;\n\n    <span class=\"kw\">let </span>quot = <span class=\"kw\">if </span>n &lt; <span class=\"number\">1 </span>&lt;&lt; <span class=\"number\">83 </span>{\n        ((n &gt;&gt; <span class=\"number\">19</span>) <span class=\"kw\">as </span>u64 / (DIV &gt;&gt; <span class=\"number\">19</span>)) <span class=\"kw\">as </span>u128\n    } <span class=\"kw\">else </span>{\n        u128_mulhi(n, FACTOR) &gt;&gt; <span class=\"number\">62\n    </span>};\n\n    <span class=\"kw\">let </span>rem = (n - quot * DIV <span class=\"kw\">as </span>u128) <span class=\"kw\">as </span>u64;\n    (quot, rem)\n}\n\n<span class=\"doccomment\">/// Multiply unsigned 128 bit integers, return upper 128 bits of the result\n</span><span class=\"attr\">#[inline]\n</span><span class=\"kw\">fn </span>u128_mulhi(x: u128, y: u128) -&gt; u128 {\n    <span class=\"kw\">let </span>x_lo = x <span class=\"kw\">as </span>u64;\n    <span class=\"kw\">let </span>x_hi = (x &gt;&gt; <span class=\"number\">64</span>) <span class=\"kw\">as </span>u64;\n    <span class=\"kw\">let </span>y_lo = y <span class=\"kw\">as </span>u64;\n    <span class=\"kw\">let </span>y_hi = (y &gt;&gt; <span class=\"number\">64</span>) <span class=\"kw\">as </span>u64;\n\n    <span class=\"comment\">// handle possibility of overflow\n    </span><span class=\"kw\">let </span>carry = (x_lo <span class=\"kw\">as </span>u128 * y_lo <span class=\"kw\">as </span>u128) &gt;&gt; <span class=\"number\">64</span>;\n    <span class=\"kw\">let </span>m = x_lo <span class=\"kw\">as </span>u128 * y_hi <span class=\"kw\">as </span>u128 + carry;\n    <span class=\"kw\">let </span>high1 = m &gt;&gt; <span class=\"number\">64</span>;\n\n    <span class=\"kw\">let </span>m_lo = m <span class=\"kw\">as </span>u64;\n    <span class=\"kw\">let </span>high2 = (x_hi <span class=\"kw\">as </span>u128 * y_lo <span class=\"kw\">as </span>u128 + m_lo <span class=\"kw\">as </span>u128) &gt;&gt; <span class=\"number\">64</span>;\n\n    x_hi <span class=\"kw\">as </span>u128 * y_hi <span class=\"kw\">as </span>u128 + high1 + high2\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:21:12.563Z"
}