{
	"title": "Write in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/trait.Write.html",
	"markdown": "# Write in std::io - Rust\n\n## Trait [std](../index.html)::[io](index.html)::[Write](#)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1541-1880) ·\n\n```\npub trait Write {\n    // Required methods\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    // Provided methods\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> { ... }\n    fn is_write_vectored(&self) -> bool { ... }\n    fn write_all(&mut self, buf: &[u8]) -> Result<()> { ... }\n    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> Result<()> { ... }\n    fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result<()> { ... }\n    fn by_ref(&mut self) -> &mut Self\n       where Self: Sized { ... }\n}\n```\n\nExpand description\n\nA trait for objects which are byte-oriented sinks.\n\nImplementors of the `Write` trait are sometimes called ‘writers’.\n\nWriters are defined by two required methods, [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") and [`flush`](about:blank/trait.Write.html#tymethod.flush \"method std::io::Write::flush\"):\n\n-   The [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") method will attempt to write some data into the object, returning how many bytes were successfully written.\n    \n-   The [`flush`](about:blank/trait.Write.html#tymethod.flush \"method std::io::Write::flush\") method is useful for adapters and explicit buffers themselves for ensuring that all buffered data has been pushed out to the ‘true sink’.\n    \n\nWriters are intended to be composable with one another. Many implementors throughout [`std::io`](index.html \"mod std::io\") take and provide types which implement the `Write` trait.\n\n## [§](#examples)Examples\n\n```\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let data = b\"some bytes\";\n\n    let mut pos = 0;\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    while pos < data.len() {\n        let bytes_written = buffer.write(&data[pos..])?;\n        pos += bytes_written;\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+data+=+b%22some+bytes%22;%0A%0A++++let+mut+pos+=+0;%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++while+pos+%3C+data.len()+%7B%0A++++++++let+bytes_written+=+buffer.write(%26data%5Bpos..%5D)?;%0A++++++++pos+%2B=+bytes_written;%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\nThe trait also provides convenience methods like [`write_all`](about:blank/trait.Write.html#method.write_all \"method std::io::Write::write_all\"), which calls `write` in a loop until its entire input has been written.\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1588)\n\nWrite a buffer into this writer, returning how many bytes were written.\n\nThis function will attempt to write the entire contents of `buf`, but the entire write might not succeed, or the write may also generate an error. Typically, a call to `write` represents one attempt to write to any wrapped object.\n\nCalls to `write` are not guaranteed to block waiting for data to be written, and a write which would otherwise block can be indicated through an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") variant.\n\nIf this method consumed `n > 0` bytes of `buf` it must return [`Ok(n)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\"). If the return value is `Ok(n)` then `n` must satisfy `n <= buf.len()`. A return value of `Ok(0)` typically means that the underlying object is no longer able to accept bytes and will likely not be able to in the future as well, or that the buffer provided is empty.\n\n##### [§](#errors)Errors\n\nEach call to `write` may generate an I/O error indicating that the operation could not be completed. If an error is returned then no bytes in the buffer were written to this writer.\n\nIt is **not** considered an error if the entire buffer could not be written to this writer.\n\nAn error of the [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind is non-fatal and the write operation should be retried if there is nothing else to do.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write(b\"some bytes\")?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Writes+some+prefix+of+the+byte+string,+not+necessarily+all+of+it.%0A++++buffer.write(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1665)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination.\n\n##### [§](#errors-1)Errors\n\nIt is considered an error if not all bytes could be written due to I/O errors or EOF being reached.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::io::prelude::*;\nuse std::io::BufWriter;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = BufWriter::new(File::create(\"foo.txt\")?);\n\n    buffer.write_all(b\"some bytes\")?;\n    buffer.flush()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::io::BufWriter;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+BufWriter::new(File::create(%22foo.txt%22)?);%0A%0A++++buffer.write_all(b%22some+bytes%22)?;%0A++++buffer.flush()?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.36.0 · [source](about:blank/src/std/io/mod.rs.html#1622-1624)\n\nLike [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer read from possibly being only partially consumed. This method must behave as a call to [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") with the buffers concatenated would.\n\nThe default implementation calls [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") with either the first nonempty buffer provided, or an empty one if none exists.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::io::IoSlice;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let data1 = [1; 8];\n    let data2 = [15; 8];\n    let io_slice1 = IoSlice::new(&data1);\n    let io_slice2 = IoSlice::new(&data2);\n\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // Writes some prefix of the byte string, not necessarily all of it.\n    buffer.write_vectored(&[io_slice1, io_slice2])?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::IoSlice;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+data1+=+%5B1;+8%5D;%0A++++let+data2+=+%5B15;+8%5D;%0A++++let+io_slice1+=+IoSlice::new(%26data1);%0A++++let+io_slice2+=+IoSlice::new(%26data2);%0A%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Writes+some+prefix+of+the+byte+string,+not+necessarily+all+of+it.%0A++++buffer.write_vectored(%26%5Bio_slice1,+io_slice2%5D)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/mod.rs.html#1637-1639)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Write`r has an efficient [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\") implementation.\n\nIf a `Write`r does not override the default [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\") implementation, code using it may want to avoid the method all together and coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)\n\nAttempts to write an entire buffer into this writer.\n\nThis method will continuously call [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") until there is no more data to be written or an error of non-[`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind is returned. This method will not return until the entire buffer has been successfully written or such an error occurs. The first error that is not of [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind generated from this method will be returned.\n\nIf the buffer contains no data, this will never call [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\").\n\n##### [§](#errors-2)Errors\n\nThis function will return the first error of non-[`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind that [`write`](about:blank/trait.Write.html#tymethod.write \"method std::io::Write::write\") returns.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    buffer.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++buffer.write_all(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer.\n\nThis method will continuously call [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\") until there is no more data to be written or an error of non-[`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind is returned. This method will not return until all buffers have been successfully written or such an error occurs. The first error that is not of [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind generated from this method will be returned.\n\nIf the buffer contains no data, this will never call [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\").\n\n##### [§](#notes)Notes\n\nUnlike [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\"), this takes a _mutable_ reference to a slice of [`IoSlice`](struct.IoSlice.html \"struct std::io::IoSlice\")s, not an immutable one. That’s because we need to modify the slice to keep track of the bytes already written.\n\nOnce this function returns, the contents of `bufs` are unspecified, as this depends on how many calls to [`write_vectored`](about:blank/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\") were necessary. It is best to understand this function as taking ownership of `bufs` and to not use `bufs` afterwards. The underlying buffers, to which the [`IoSlice`](struct.IoSlice.html \"struct std::io::IoSlice\")s point (but not the [`IoSlice`](struct.IoSlice.html \"struct std::io::IoSlice\")s themselves), are unchanged and can be reused.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(write_all_vectored)]\n\nuse std::io::{Write, IoSlice};\n\nlet mut writer = Vec::new();\nlet bufs = &mut [\n    IoSlice::new(&[1]),\n    IoSlice::new(&[2, 3]),\n    IoSlice::new(&[4, 5, 6]),\n];\n\nwriter.write_all_vectored(bufs)?;\n// Note: the contents of `bufs` is now undefined, see the Notes section.\n\nassert_eq!(writer, &[1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(write_all_vectored)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A%0Ause+std::io::%7BWrite,+IoSlice%7D;%0A%0Alet+mut+writer+=+Vec::new();%0Alet+bufs+=+%26mut+%5B%0A++++IoSlice::new(%26%5B1%5D),%0A++++IoSlice::new(%26%5B2,+3%5D),%0A++++IoSlice::new(%26%5B4,+5,+6%5D),%0A%5D;%0A%0Awriter.write_all_vectored(bufs)?;%0A//+Note:+the+contents+of+%60bufs%60+is+now+undefined,+see+the+Notes+section.%0A%0Aassert_eq!(writer,+%26%5B1,+2,+3,+4,+5,+6%5D);%0AOk(())+%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)\n\nWrites a formatted string into this writer, returning any error encountered.\n\nThis method is primarily used to interface with the [`format_args!()`](../macro.format_args.html \"macro std::format_args\") macro, and it is rare that this should explicitly be called. The [`write!()`](../macro.write.html \"macro std::write\") macro should be favored to invoke this method instead.\n\nThis function internally uses the [`write_all`](about:blank/trait.Write.html#method.write_all \"method std::io::Write::write_all\") method on this trait and hence will continuously write data so long as no errors are received. This also means that partial writes are not indicated in this signature.\n\n##### [§](#errors-3)Errors\n\nThis function will return any I/O error reported while formatting.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    // this call\n    write!(buffer, \"{:.*}\", 2, 1.234567)?;\n    // turns into this:\n    buffer.write_fmt(format_args!(\"{:.*}\", 2, 1.234567))?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+this+call%0A++++write!(buffer,+%22%7B:.*%7D%22,+2,+1.234567)?;%0A++++//+turns+into+this:%0A++++buffer.write_fmt(format_args!(%22%7B:.*%7D%22,+2,+1.234567))?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)\n\nCreates a “by reference” adapter for this instance of `Write`.\n\nThe returned adapter also implements `Write` and will simply borrow this current writer.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::io::Write;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut buffer = File::create(\"foo.txt\")?;\n\n    let reference = buffer.by_ref();\n\n    // we can use reference just like our original buffer\n    reference.write_all(b\"some bytes\")?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::Write;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++let+reference+=+buffer.by_ref();%0A%0A++++//+we+can+use+reference+just+like+our+original+buffer%0A++++reference.write_all(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#837-899)[§](#impl-Write-for-%26File)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#675-693)[§](#impl-Write-for-%26TcpStream)\n\n1.48.0 · [source](about:blank/src/std/process.rs.html#336-353)[§](#impl-Write-for-%26ChildStdin)\n\n1.73.0 · [source](about:blank/src/std/io/util.rs.html#128-149)[§](#impl-Write-for-%26Empty)\n\n1.48.0 · [source](about:blank/src/std/io/util.rs.html#309-330)[§](#impl-Write-for-%26Sink)\n\n1.48.0 · [source](about:blank/src/std/io/stdio.rs.html#998-1021)[§](#impl-Write-for-%26Stderr)\n\n1.48.0 · [source](about:blank/src/std/io/stdio.rs.html#766-789)[§](#impl-Write-for-%26Stdout)\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#369-406)[§](#impl-Write-for-%26mut+%5Bu8%5D)\n\nWrite is implemented for `&mut [u8]` by copying into the slice, overwriting its data.\n\nNote that writing updates the slice to point to the yet unwritten part. The slice will be empty when it has been completely overwritten.\n\nIf the number of bytes to be written exceeds the size of the slice, write operations will return short writes: ultimately, `Ok(0)`; in this situation, `write_all` returns an error of kind `ErrorKind::WriteZero`.\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#930-945)[§](#impl-Write-for-File)\n\n1.0.0 · [source](about:blank/src/std/net/tcp.rs.html#636-654)[§](#impl-Write-for-TcpStream)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#612-629)[§](#impl-Write-for-UnixStream)\n\nAvailable on **Unix** only.\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#316-333)[§](#impl-Write-for-ChildStdin)\n\n1.73.0 · [source](about:blank/src/std/fs.rs.html#976-991)[§](#impl-Write-for-Arc%3CFile%3E)\n\n1.0.0 · [source](about:blank/src/std/io/cursor.rs.html#560-580)[§](#impl-Write-for-Cursor%3C%26mut+%5Bu8%5D%3E)\n\n1.73.0 · [source](about:blank/src/std/io/util.rs.html#104-125)[§](#impl-Write-for-Empty)\n\n1.0.0 · [source](about:blank/src/std/io/util.rs.html#285-306)[§](#impl-Write-for-Sink)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#972-995)[§](#impl-Write-for-Stderr)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#1030-1050)[§](#impl-Write-for-StderrLock%3C'_%3E)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#740-763)[§](#impl-Write-for-Stdout)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#798-818)[§](#impl-Write-for-StdoutLock%3C'_%3E)\n\n1.10.0 · [source](about:blank/src/std/os/unix/net/stream.rs.html#632-650)[§](#impl-Write-for-%26UnixStream)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/io/impls.rs.html#543-554)[§](#impl-Write-for-BorrowedCursor%3C'a%3E)\n\n1.25.0 · [source](about:blank/src/std/io/cursor.rs.html#583-604)[§](#impl-Write-for-Cursor%3C%26mut+Vec%3Cu8,+A%3E%3E)\n\n1.5.0 · [source](about:blank/src/std/io/cursor.rs.html#631-654)[§](#impl-Write-for-Cursor%3CBox%3C%5Bu8%5D,+A%3E%3E)\n\n1.0.0 · [source](about:blank/src/std/io/cursor.rs.html#607-628)[§](#impl-Write-for-Cursor%3CVec%3Cu8,+A%3E%3E)\n\n1.63.0 · [source](about:blank/src/std/io/impls.rs.html#508-540)[§](#impl-Write-for-VecDeque%3Cu8,+A%3E)\n\nWrite is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#411-443)[§](#impl-Write-for-Vec%3Cu8,+A%3E)\n\nWrite is implemented for `Vec<u8>` by appending to the vector. The vector will grow as needed.\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#57-87)[§](#impl-Write-for-%26mut+W)\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#165-195)[§](#impl-Write-for-Box%3CW%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufwriter.rs.html#515-644)[§](#impl-Write-for-BufWriter%3CW%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/linewriter.rs.html#190-218)[§](#impl-Write-for-LineWriter%3CW%3E)\n\n1.61.0 · [source](about:blank/src/std/io/cursor.rs.html#657-677)[§](#impl-Write-for-Cursor%3C%5Bu8;+N%5D%3E)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for objects which are byte-oriented sinks.\"><title>Write in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Write</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Write</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.flush\">flush</a></li><li><a href=\"#tymethod.write\">write</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.by_ref\">by_ref</a></li><li><a href=\"#method.is_write_vectored\">is_write_vectored</a></li><li><a href=\"#method.write_all\">write_all</a></li><li><a href=\"#method.write_all_vectored\">write_all_vectored</a></li><li><a href=\"#method.write_fmt\">write_fmt</a></li><li><a href=\"#method.write_vectored\">write_vectored</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"trait\" href=\"#\">Write</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1541-1880\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Write {\n    // Required methods\n    fn <a href=\"#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for objects which are byte-oriented sinks.</p>\n<p>Implementors of the <code>Write</code> trait are sometimes called ‘writers’.</p>\n<p>Writers are defined by two required methods, <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> and <a href=\"trait.Write.html#tymethod.flush\" title=\"method std::io::Write::flush\"><code>flush</code></a>:</p>\n<ul>\n<li>\n<p>The <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> method will attempt to write some data into the object,\nreturning how many bytes were successfully written.</p>\n</li>\n<li>\n<p>The <a href=\"trait.Write.html#tymethod.flush\" title=\"method std::io::Write::flush\"><code>flush</code></a> method is useful for adapters and explicit buffers\nthemselves for ensuring that all buffered data has been pushed out to the\n‘true sink’.</p>\n</li>\n</ul>\n<p>Writers are intended to be composable with one another. Many implementors\nthroughout <a href=\"index.html\" title=\"mod std::io\"><code>std::io</code></a> take and provide types which implement the <code>Write</code>\ntrait.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>data = <span class=\"string\">b\"some bytes\"</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pos = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">while </span>pos &lt; data.len() {\n        <span class=\"kw\">let </span>bytes_written = buffer.write(<span class=\"kw-2\">&amp;</span>data[pos..])<span class=\"question-mark\">?</span>;\n        pos += bytes_written;\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+data+=+b%22some+bytes%22;%0A%0A++++let+mut+pos+=+0;%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++while+pos+%3C+data.len()+%7B%0A++++++++let+bytes_written+=+buffer.write(%26data%5Bpos..%5D)?;%0A++++++++pos+%2B=+bytes_written;%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The trait also provides convenience methods like <a href=\"trait.Write.html#method.write_all\" title=\"method std::io::Write::write_all\"><code>write_all</code></a>, which calls\n<code>write</code> in a loop until its entire input has been written.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1588\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Write a buffer into this writer, returning how many bytes were written.</p>\n<p>This function will attempt to write the entire contents of <code>buf</code>, but\nthe entire write might not succeed, or the write may also generate an\nerror. Typically, a call to <code>write</code> represents one attempt to write to\nany wrapped object.</p>\n<p>Calls to <code>write</code> are not guaranteed to block waiting for data to be\nwritten, and a write which would otherwise block can be indicated through\nan <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> variant.</p>\n<p>If this method consumed <code>n &gt; 0</code> bytes of <code>buf</code> it must return <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(n)</code></a>.\nIf the return value is <code>Ok(n)</code> then <code>n</code> must satisfy <code>n &lt;= buf.len()</code>.\nA return value of <code>Ok(0)</code> typically means that the underlying object is\nno longer able to accept bytes and will likely not be able to in the\nfuture as well, or that the buffer provided is empty.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Each call to <code>write</code> may generate an I/O error indicating that the\noperation could not be completed. If an error is returned then no bytes\nin the buffer were written to this writer.</p>\n<p>It is <strong>not</strong> considered an error if the entire buffer could not be\nwritten to this writer.</p>\n<p>An error of the <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind is non-fatal and the\nwrite operation should be retried if there is nothing else to do.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Writes some prefix of the byte string, not necessarily all of it.\n    </span>buffer.write(<span class=\"string\">b\"some bytes\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Writes+some+prefix+of+the+byte+string,+not+necessarily+all+of+it.%0A++++buffer.write(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.flush\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1665\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>It is considered an error if not all bytes could be written due to\nI/O errors or EOF being reached.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::io::BufWriter;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = BufWriter::new(File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>);\n\n    buffer.write_all(<span class=\"string\">b\"some bytes\"</span>)<span class=\"question-mark\">?</span>;\n    buffer.flush()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::io::BufWriter;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+BufWriter::new(File::create(%22foo.txt%22)?);%0A%0A++++buffer.write_all(b%22some+bytes%22)?;%0A++++buffer.flush()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1622-1624\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Like <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers.</p>\n<p>Data is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> with the buffers concatenated would.</p>\n<p>The default implementation calls <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> with either the first nonempty\nbuffer provided, or an empty one if none exists.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::IoSlice;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>data1 = [<span class=\"number\">1</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span>data2 = [<span class=\"number\">15</span>; <span class=\"number\">8</span>];\n    <span class=\"kw\">let </span>io_slice1 = IoSlice::new(<span class=\"kw-2\">&amp;</span>data1);\n    <span class=\"kw\">let </span>io_slice2 = IoSlice::new(<span class=\"kw-2\">&amp;</span>data2);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Writes some prefix of the byte string, not necessarily all of it.\n    </span>buffer.write_vectored(<span class=\"kw-2\">&amp;</span>[io_slice1, io_slice2])<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::IoSlice;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+data1+=+%5B1;+8%5D;%0A++++let+data2+=+%5B15;+8%5D;%0A++++let+io_slice1+=+IoSlice::new(%26data1);%0A++++let+io_slice2+=+IoSlice::new(%26data2);%0A%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+Writes+some+prefix+of+the+byte+string,+not+necessarily+all+of+it.%0A++++buffer.write_vectored(%26%5Bio_slice1,+io_slice2%5D)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1637-1639\">source</a><h4 class=\"code-header\">fn <a href=\"#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span></summary><div class=\"docblock\"><p>Determines if this <code>Write</code>r has an efficient <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation.</p>\n<p>If a <code>Write</code>r does not override the default <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.</p>\n<p>The default implementation returns <code>false</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1699-1711\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to write an entire buffer into this writer.</p>\n<p>This method will continuously call <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> until there is no more data\nto be written or an error of non-<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind is\nreturned. This method will not return until the entire buffer has been\nsuccessfully written or such an error occurs. The first error that is\nnot of <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind generated from this method will be\nreturned.</p>\n<p>If the buffer contains no data, this will never call <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This function will return the first error of\nnon-<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind that <a href=\"trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a> returns.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    buffer.write_all(<span class=\"string\">b\"some bytes\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++buffer.write_all(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><h4 class=\"code-header\">fn <a href=\"#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span></summary><div class=\"docblock\"><p>Attempts to write multiple buffers into this writer.</p>\n<p>This method will continuously call <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a> until there is no\nmore data to be written or an error of non-<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a>\nkind is returned. This method will not return until all buffers have\nbeen successfully written or such an error occurs. The first error that\nis not of <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind generated from this method\nwill be returned.</p>\n<p>If the buffer contains no data, this will never call <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>Unlike <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>, this takes a <em>mutable</em> reference to\na slice of <a href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\"><code>IoSlice</code></a>s, not an immutable one. That’s because we need to\nmodify the slice to keep track of the bytes already written.</p>\n<p>Once this function returns, the contents of <code>bufs</code> are unspecified, as\nthis depends on how many calls to <a href=\"trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a> were necessary. It is\nbest to understand this function as taking ownership of <code>bufs</code> and to\nnot use <code>bufs</code> afterwards. The underlying buffers, to which the\n<a href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\"><code>IoSlice</code></a>s point (but not the <a href=\"struct.IoSlice.html\" title=\"struct std::io::IoSlice\"><code>IoSlice</code></a>s themselves), are unchanged and\ncan be reused.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(write_all_vectored)]\n\n</span><span class=\"kw\">use </span>std::io::{Write, IoSlice};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>writer = Vec::new();\n<span class=\"kw\">let </span>bufs = <span class=\"kw-2\">&amp;mut </span>[\n    IoSlice::new(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]),\n    IoSlice::new(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]),\n    IoSlice::new(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]),\n];\n\nwriter.write_all_vectored(bufs)<span class=\"question-mark\">?</span>;\n<span class=\"comment\">// Note: the contents of `bufs` is now undefined, see the Notes section.\n\n</span><span class=\"macro\">assert_eq!</span>(writer, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(write_all_vectored)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A%0Ause+std::io::%7BWrite,+IoSlice%7D;%0A%0Alet+mut+writer+=+Vec::new();%0Alet+bufs+=+%26mut+%5B%0A++++IoSlice::new(%26%5B1%5D),%0A++++IoSlice::new(%26%5B2,+3%5D),%0A++++IoSlice::new(%26%5B4,+5,+6%5D),%0A%5D;%0A%0Awriter.write_all_vectored(bufs)?;%0A//+Note:+the+contents+of+%60bufs%60+is+now+undefined,+see+the+Notes+section.%0A%0Aassert_eq!(writer,+%26%5B1,+2,+3,+4,+5,+6%5D);%0AOk(())+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Writes a formatted string into this writer, returning any error\nencountered.</p>\n<p>This method is primarily used to interface with the\n<a href=\"../macro.format_args.html\" title=\"macro std::format_args\"><code>format_args!()</code></a> macro, and it is rare that this should\nexplicitly be called. The <a href=\"../macro.write.html\" title=\"macro std::write\"><code>write!()</code></a> macro should be favored to\ninvoke this method instead.</p>\n<p>This function internally uses the <a href=\"trait.Write.html#method.write_all\" title=\"method std::io::Write::write_all\"><code>write_all</code></a> method on\nthis trait and hence will continuously write data so long as no errors\nare received. This also means that partial writes are not indicated in\nthis signature.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>This function will return any I/O error reported while formatting.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// this call\n    </span><span class=\"macro\">write!</span>(buffer, <span class=\"string\">\"{:.*}\"</span>, <span class=\"number\">2</span>, <span class=\"number\">1.234567</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"comment\">// turns into this:\n    </span>buffer.write_fmt(<span class=\"macro\">format_args!</span>(<span class=\"string\">\"{:.*}\"</span>, <span class=\"number\">2</span>, <span class=\"number\">1.234567</span>))<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++//+this+call%0A++++write!(buffer,+%22%7B:.*%7D%22,+2,+1.234567)?;%0A++++//+turns+into+this:%0A++++buffer.write_fmt(format_args!(%22%7B:.*%7D%22,+2,+1.234567))?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a “by reference” adapter for this instance of <code>Write</code>.</p>\n<p>The returned adapter also implements <code>Write</code> and will simply borrow this\ncurrent writer.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Write;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>reference = buffer.by_ref();\n\n    <span class=\"comment\">// we can use reference just like our original buffer\n    </span>reference.write_all(<span class=\"string\">b\"some bytes\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::Write;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+File::create(%22foo.txt%22)?;%0A%0A++++let+reference+=+buffer.by_ref();%0A%0A++++//+we+can+use+reference+just+like+our+original+buffer%0A++++reference.write_all(b%22some+bytes%22)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Write-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#837-899\">source</a></span><a href=\"#impl-Write-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Write-for-%26TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#675-693\">source</a></span><a href=\"#impl-Write-for-%26TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Write-for-%26ChildStdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#336-353\">source</a></span><a href=\"#impl-Write-for-%26ChildStdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"../process/struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a></h3></section><section id=\"impl-Write-for-%26Empty\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#128-149\">source</a></span><a href=\"#impl-Write-for-%26Empty\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::io::Empty\">Empty</a></h3></section><section id=\"impl-Write-for-%26Sink\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#309-330\">source</a></span><a href=\"#impl-Write-for-%26Sink\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.Sink.html\" title=\"struct std::io::Sink\">Sink</a></h3></section><section id=\"impl-Write-for-%26Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#998-1021\">source</a></span><a href=\"#impl-Write-for-%26Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-Write-for-%26Stdout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#766-789\">source</a></span><a href=\"#impl-Write-for-%26Stdout\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.Stdout.html\" title=\"struct std::io::Stdout\">Stdout</a></h3></section><section id=\"impl-Write-for-%26mut+%5Bu8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#369-406\">source</a></span><a href=\"#impl-Write-for-%26mut+%5Bu8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h3></section><div class=\"docblock\"><p>Write is implemented for <code>&amp;mut [u8]</code> by copying into the slice, overwriting\nits data.</p>\n<p>Note that writing updates the slice to point to the yet unwritten part.\nThe slice will be empty when it has been completely overwritten.</p>\n<p>If the number of bytes to be written exceeds the size of the slice, write operations will\nreturn short writes: ultimately, <code>Ok(0)</code>; in this situation, <code>write_all</code> returns an error of\nkind <code>ErrorKind::WriteZero</code>.</p>\n</div><section id=\"impl-Write-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#930-945\">source</a></span><a href=\"#impl-Write-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Write-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#636-654\">source</a></span><a href=\"#impl-Write-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Write-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/net/stream.rs.html#612-629\">source</a></span><a href=\"#impl-Write-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../os/unix/net/struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section><section id=\"impl-Write-for-ChildStdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#316-333\">source</a></span><a href=\"#impl-Write-for-ChildStdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../process/struct.ChildStdin.html\" title=\"struct std::process::ChildStdin\">ChildStdin</a></h3></section><section id=\"impl-Write-for-Arc%3CFile%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#976-991\">source</a></span><a href=\"#impl-Write-for-Arc%3CFile%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h3></section><section id=\"impl-Write-for-Cursor%3C%26mut+%5Bu8%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#560-580\">source</a></span><a href=\"#impl-Write-for-Cursor%3C%26mut+%5Bu8%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;&amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;</h3></section><section id=\"impl-Write-for-Empty\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#104-125\">source</a></span><a href=\"#impl-Write-for-Empty\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::io::Empty\">Empty</a></h3></section><section id=\"impl-Write-for-Sink\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#285-306\">source</a></span><a href=\"#impl-Write-for-Sink\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Sink.html\" title=\"struct std::io::Sink\">Sink</a></h3></section><section id=\"impl-Write-for-Stderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#972-995\">source</a></span><a href=\"#impl-Write-for-Stderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Stderr.html\" title=\"struct std::io::Stderr\">Stderr</a></h3></section><section id=\"impl-Write-for-StderrLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1030-1050\">source</a></span><a href=\"#impl-Write-for-StderrLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.StderrLock.html\" title=\"struct std::io::StderrLock\">StderrLock</a>&lt;'_&gt;</h3></section><section id=\"impl-Write-for-Stdout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#740-763\">source</a></span><a href=\"#impl-Write-for-Stdout\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Stdout.html\" title=\"struct std::io::Stdout\">Stdout</a></h3></section><section id=\"impl-Write-for-StdoutLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#798-818\">source</a></span><a href=\"#impl-Write-for-StdoutLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.StdoutLock.html\" title=\"struct std::io::StdoutLock\">StdoutLock</a>&lt;'_&gt;</h3></section><section id=\"impl-Write-for-%26UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/net/stream.rs.html#632-650\">source</a></span><a href=\"#impl-Write-for-%26UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;'a <a class=\"struct\" href=\"../os/unix/net/struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section><section id=\"impl-Write-for-BorrowedCursor%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#543-554\">source</a><a href=\"#impl-Write-for-BorrowedCursor%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'a&gt;</h3></section><section id=\"impl-Write-for-Cursor%3C%26mut+Vec%3Cu8,+A%3E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#583-604\">source</a></span><a href=\"#impl-Write-for-Cursor%3C%26mut+Vec%3Cu8,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;&amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Write-for-Cursor%3CBox%3C%5Bu8%5D,+A%3E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#631-654\">source</a></span><a href=\"#impl-Write-for-Cursor%3CBox%3C%5Bu8%5D,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Write-for-Cursor%3CVec%3Cu8,+A%3E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#607-628\">source</a></span><a href=\"#impl-Write-for-Cursor%3CVec%3Cu8,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Write-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#508-540\">source</a></span><a href=\"#impl-Write-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;</h3></section><div class=\"docblock\"><p>Write is implemented for <code>VecDeque&lt;u8&gt;</code> by appending to the <code>VecDeque</code>, growing it as needed.</p>\n</div><section id=\"impl-Write-for-Vec%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#411-443\">source</a></span><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;</h3></section><div class=\"docblock\"><p>Write is implemented for <code>Vec&lt;u8&gt;</code> by appending to the vector.\nThe vector will grow as needed.</p>\n</div><section id=\"impl-Write-for-%26mut+W\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#57-87\">source</a></span><a href=\"#impl-Write-for-%26mut+W\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut W</a></h3></section><section id=\"impl-Write-for-Box%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#165-195\">source</a></span><a href=\"#impl-Write-for-Box%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;W&gt;</h3></section><section id=\"impl-Write-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#515-644\">source</a></span><a href=\"#impl-Write-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section><section id=\"impl-Write-for-LineWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/linewriter.rs.html#190-218\">source</a></span><a href=\"#impl-Write-for-LineWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.LineWriter.html\" title=\"struct std::io::LineWriter\">LineWriter</a>&lt;W&gt;</h3></section><section id=\"impl-Write-for-Cursor%3C%5Bu8;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#657-677\">source</a></span><a href=\"#impl-Write-for-Cursor%3C%5Bu8;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]&gt;</h3></section></div><script src=\"../../trait.impl/std/io/trait.Write.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:32.093Z"
}