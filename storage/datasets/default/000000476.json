{
	"title": "Box in std::boxed - Rust",
	"url": "https://doc.rust-lang.org/stable/std/boxed/struct.Box.html",
	"markdown": "# Box in std::boxed - Rust\n\n## Struct [std](../index.html)::[boxed](index.html)::[Box](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#237-240) ·\n\n```\npub struct Box<T, A = Global>(/* private fields */)\nwhere\n    A: Allocator,\n    T: ?Sized;\n```\n\nExpand description\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#242)[§](#impl-Box%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#257)\n\nAllocates memory on the heap and then places `x` into it.\n\nThis doesn’t actually allocate if `T` is zero-sized.\n\n##### [§](#examples)Examples\n\n```\nlet five = Box::new(5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five+=+Box::new(5);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#284)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConstructs a new box with uninitialized contents.\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::new_uninit();%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#310)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConstructs a new `Box` with uninitialized contents, with the memory being filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-2)Examples\n\n```\n#![feature(new_uninit)]\n\nlet zero = Box::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+zero+=+Box::%3Cu32%3E::new_zeroed();%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0)%0A%7D&version=nightly&edition=2021)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#325)\n\nConstructs a new `Pin<Box<T>>`. If `T` does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then `x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin(x)` does the same as `[Box::into_pin](about:blank/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\")([Box::new](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\")(x))`. Consider using [`into_pin`](about:blank/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\") if you already have a `Box<T>`, or if you want to construct a (pinned) `Box` in a different way than with [`Box::new`](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#344)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAllocates memory on the heap then places `x` into it, returning an error if the allocation fails\n\nThis doesn’t actually allocate if `T` is zero-sized.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(allocator_api)]\n\nlet five = Box::try_new(5)?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+five+=+Box::try_new(5)?;%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#371)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new box with uninitialized contents on the heap, returning an error if the allocation fails\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut five = Box::<u32>::try_new_uninit()?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::try_new_uninit()?;%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#397)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new `Box` with uninitialized contents, with the memory being filled with `0` bytes on the heap\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet zero = Box::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+zero+=+Box::%3Cu32%3E::try_new_zeroed()?;%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#402)[§](#impl-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#420-422)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAllocates memory in the given allocator then places `x` into it.\n\nThis doesn’t actually allocate if `T` is zero-sized.\n\n##### [§](#examples-6)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::new_in(5, System);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+five+=+Box::new_in(5,+System);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#448-450)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nAllocates memory in the given allocator then places `x` into it, returning an error if the allocation fails\n\nThis doesn’t actually allocate if `T` is zero-sized.\n\n##### [§](#examples-7)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::try_new_in(5, System)?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+five+=+Box::try_new_in(5,+System)?;%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#483-485)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new box with uninitialized contents in the provided allocator.\n\n##### [§](#examples-8)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::new_uninit_in(System);\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+five+=+Box::%3Cu32,+_%3E::new_uninit_in(System);%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#520-522)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new box with uninitialized contents in the provided allocator, returning an error if the allocation fails\n\n##### [§](#examples-9)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::try_new_uninit_in(System)?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+five+=+Box::%3Cu32,+_%3E::try_new_uninit_in(System)?;%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#557-559)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new `Box` with uninitialized contents, with the memory being filled with `0` bytes in the provided allocator.\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-10)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::new_zeroed_in(System);\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+zero+=+Box::%3Cu32,+_%3E::new_zeroed_in(System);%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#594-596)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new `Box` with uninitialized contents, with the memory being filled with `0` bytes in the provided allocator, returning an error if the allocation fails,\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-11)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::try_new_zeroed_in(System)?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+zero+=+Box::%3Cu32,+_%3E::try_new_zeroed_in(System)?;%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#618-620)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new `Pin<Box<T, A>>`. If `T` does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then `x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin_in(x, alloc)` does the same as `[Box::into_pin](about:blank/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\")([Box::new_in](about:blank/struct.Box.html#method.new_in \"associated function std::boxed::Box::new_in\")(x, alloc))`. Consider using [`into_pin`](about:blank/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\") if you already have a `Box<T, A>`, or if you want to construct a (pinned) `Box` in a different way than with [`Box::new_in`](about:blank/struct.Box.html#method.new_in \"associated function std::boxed::Box::new_in\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#629)\n\n🔬This is a nightly-only experimental API. (`box_into_boxed_slice` [#71582](https://github.com/rust-lang/rust/issues/71582))\n\nConverts a `Box<T>` into a `Box<[T]>`\n\nThis conversion does not allocate on the heap and happens in place.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#647)\n\n🔬This is a nightly-only experimental API. (`box_into_inner` [#80437](https://github.com/rust-lang/rust/issues/80437))\n\nConsumes the `Box`, returning the wrapped value.\n\n##### [§](#examples-12)Examples\n\n```\n#![feature(box_into_inner)]\n\nlet c = Box::new(5);\n\nassert_eq!(Box::into_inner(c), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(box_into_inner)%5D%0A%0Afn+main()+%7B%0A++++let+c+=+Box::new(5);%0A++++%0A++++assert_eq!(Box::into_inner(c),+5);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#652)[§](#impl-Box%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#676)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConstructs a new boxed slice with uninitialized contents.\n\n##### [§](#examples-13)Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::new_uninit_slice(3);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#701)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConstructs a new boxed slice with uninitialized contents, with the memory being filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-14)Examples\n\n```\n#![feature(new_uninit)]\n\nlet values = Box::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+values+=+Box::%3C%5Bu32%5D%3E::new_zeroed_slice(3);%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#727)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new boxed slice with uninitialized contents. Returns an error if the allocation fails\n\n##### [§](#examples-15)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut values = Box::<[u32]>::try_new_uninit_slice(3)?;\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::try_new_uninit_slice(3)?;%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#761)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new boxed slice with uninitialized contents, with the memory being filled with `0` bytes. Returns an error if the allocation fails\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-16)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet values = Box::<[u32]>::try_new_zeroed_slice(3)?;\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+values+=+Box::%3C%5Bu32%5D%3E::try_new_zeroed_slice(3)?;%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#775)[§](#impl-Box%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#802)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new boxed slice with uninitialized contents in the provided allocator.\n\n##### [§](#examples-17)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut values = Box::<[u32], _>::new_uninit_slice_in(3, System);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+values+=+Box::%3C%5Bu32%5D,+_%3E::new_uninit_slice_in(3,+System);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#830)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new boxed slice with uninitialized contents in the provided allocator, with the memory being filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`](about:blank/mem/union.MaybeUninit.html#method.zeroed \"associated function std::mem::MaybeUninit::zeroed\") for examples of correct and incorrect usage of this method.\n\n##### [§](#examples-18)Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet values = Box::<[u32], _>::new_zeroed_slice_in(3, System);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+values+=+Box::%3C%5Bu32%5D,+_%3E::new_zeroed_slice_in(3,+System);%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#835)[§](#impl-Box%3CMaybeUninit%3CT%3E,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#866)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConverts to `Box<T, A>`.\n\n##### [§](#safety)Safety\n\nAs with [`MaybeUninit::assume_init`](about:blank/mem/union.MaybeUninit.html#method.assume_init \"method std::mem::MaybeUninit::assume_init\"), it is up to the caller to guarantee that the value really is in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior.\n\n##### [§](#examples-19)Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five: Box<u32> = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::new_uninit();%0A++++%0A++++let+five:+Box%3Cu32%3E+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#900)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nWrites the value and converts to `Box<T, A>`.\n\nThis method converts the box similarly to [`Box::assume_init`](about:blank/struct.Box.html#method.assume_init \"method std::boxed::Box::assume_init\") but writes `value` into it before conversion thus guaranteeing safety. In some scenarios use of this method may improve performance because the compiler may be able to optimize copying from stack.\n\n##### [§](#examples-20)Examples\n\n```\n#![feature(new_uninit)]\n\nlet big_box = Box::<[usize; 1024]>::new_uninit();\n\nlet mut array = [0; 1024];\nfor (i, place) in array.iter_mut().enumerate() {\n    *place = i;\n}\n\n// The optimizer may be able to elide this copy, so previous code writes\n// to heap directly.\nlet big_box = Box::write(big_box, array);\n\nfor (i, x) in big_box.iter().enumerate() {\n    assert_eq!(*x, i);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+big_box+=+Box::%3C%5Busize;+1024%5D%3E::new_uninit();%0A++++%0A++++let+mut+array+=+%5B0;+1024%5D;%0A++++for+(i,+place)+in+array.iter_mut().enumerate()+%7B%0A++++++++*place+=+i;%0A++++%7D%0A++++%0A++++//+The+optimizer+may+be+able+to+elide+this+copy,+so+previous+code+writes%0A++++//+to+heap+directly.%0A++++let+big_box+=+Box::write(big_box,+array);%0A++++%0A++++for+(i,+x)+in+big_box.iter().enumerate()+%7B%0A++++++++assert_eq!(*x,+i);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#908)[§](#impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#941)\n\n🔬This is a nightly-only experimental API. (`new_uninit` [#63291](https://github.com/rust-lang/rust/issues/63291))\n\nConverts to `Box<[T], A>`.\n\n##### [§](#safety-1)Safety\n\nAs with [`MaybeUninit::assume_init`](about:blank/mem/union.MaybeUninit.html#method.assume_init \"method std::mem::MaybeUninit::assume_init\"), it is up to the caller to guarantee that the values really are in an initialized state. Calling this when the content is not yet fully initialized causes immediate undefined behavior.\n\n##### [§](#examples-21)Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::new_uninit_slice(3);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#947)[§](#impl-Box%3CT%3E-1)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#992)\n\nConstructs a box from a raw pointer.\n\nAfter calling this function, the raw pointer is owned by the resulting `Box`. Specifically, the `Box` destructor will call the destructor of `T` and free the allocated memory. For this to be safe, the memory must have been allocated in accordance with the [memory layout](about:blank/index.html#memory-layout \"mod std::boxed\") used by `Box` .\n\n##### [§](#safety-2)Safety\n\nThis function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer.\n\nThe safety conditions are described in the [memory layout](about:blank/index.html#memory-layout \"mod std::boxed\") section.\n\n##### [§](#examples-22)Examples\n\nRecreate a `Box` which was previously converted to a raw pointer using [`Box::into_raw`](about:blank/struct.Box.html#method.into_raw \"associated function std::boxed::Box::into_raw\"):\n\n```\nlet x = Box::new(5);\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+ptr+=+Box::into_raw(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw(ptr)+%7D;%0A%7D&edition=2021)\n\nManually create a `Box` from scratch by using the global allocator:\n\n```\nuse std::alloc::{alloc, Layout};\n\nunsafe {\n    let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw(ptr);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Balloc,+Layout%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+ptr+=+alloc(Layout::new::%3Ci32%3E())+as+*mut+i32;%0A++++++++//+In+general+.write+is+required+to+avoid+attempting+to+destruct%0A++++++++//+the+(uninitialized)+previous+contents+of+%60ptr%60,+though+for+this%0A++++++++//+simple+example+%60*ptr+=+5%60+would+have+worked+as+well.%0A++++++++ptr.write(5);%0A++++++++let+x+=+Box::from_raw(ptr);%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#997)[§](#impl-Box%3CT,+A%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1048)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a box from a raw pointer in the given allocator.\n\nAfter calling this function, the raw pointer is owned by the resulting `Box`. Specifically, the `Box` destructor will call the destructor of `T` and free the allocated memory. For this to be safe, the memory must have been allocated in accordance with the [memory layout](about:blank/index.html#memory-layout \"mod std::boxed\") used by `Box` .\n\n##### [§](#safety-3)Safety\n\nThis function is unsafe because improper use may lead to memory problems. For example, a double-free may occur if the function is called twice on the same raw pointer.\n\n##### [§](#examples-23)Examples\n\nRecreate a `Box` which was previously converted to a raw pointer using [`Box::into_raw_with_allocator`](about:blank/struct.Box.html#method.into_raw_with_allocator \"associated function std::boxed::Box::into_raw_with_allocator\"):\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(5, System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+x+=+Box::new_in(5,+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw_in(ptr,+alloc)+%7D;%0A%7D&version=nightly&edition=2021)\n\nManually create a `Box` from scratch by using the system allocator:\n\n```\n#![feature(allocator_api, slice_ptr_get)]\n\nuse std::alloc::{Allocator, Layout, System};\n\nunsafe {\n    let ptr = System.allocate(Layout::new::<i32>())?.as_mut_ptr() as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw_in(ptr, System);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+slice_ptr_get)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+System%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+ptr+=+System.allocate(Layout::new::%3Ci32%3E())?.as_mut_ptr()+as+*mut+i32;%0A++++++++//+In+general+.write+is+required+to+avoid+attempting+to+destruct%0A++++++++//+the+(uninitialized)+previous+contents+of+%60ptr%60,+though+for+this%0A++++++++//+simple+example+%60*ptr+=+5%60+would+have+worked+as+well.%0A++++++++ptr.write(5);%0A++++++++let+x+=+Box::from_raw_in(ptr,+System);%0A++++%7D%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&version=nightly&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1101)\n\nConsumes the `Box`, returning a wrapped raw pointer.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the memory previously managed by the `Box`. In particular, the caller should properly destroy `T` and release the memory, taking into account the [memory layout](about:blank/index.html#memory-layout \"mod std::boxed\") used by `Box`. The easiest way to do this is to convert the raw pointer back into a `Box` with the [`Box::from_raw`](about:blank/struct.Box.html#method.from_raw \"associated function std::boxed::Box::from_raw\") function, allowing the `Box` destructor to perform the cleanup.\n\nNote: this is an associated function, which means that you have to call it as `Box::into_raw(b)` instead of `b.into_raw()`. This is so that there is no conflict with a method on the inner type.\n\n##### [§](#examples-24)Examples\n\nConverting the raw pointer back into a `Box` with [`Box::from_raw`](about:blank/struct.Box.html#method.from_raw \"associated function std::boxed::Box::from_raw\") for automatic cleanup:\n\n```\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw(ptr)+%7D;%0A%7D&edition=2021)\n\nManual cleanup by explicitly running the destructor and deallocating the memory:\n\n```\nuse std::alloc::{dealloc, Layout};\nuse std::ptr;\n\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nunsafe {\n    ptr::drop_in_place(ptr);\n    dealloc(ptr as *mut u8, Layout::new::<String>());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Bdealloc,+Layout%7D;%0A++++use+std::ptr;%0A++++%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++unsafe+%7B%0A++++++++ptr::drop_in_place(ptr);%0A++++++++dealloc(ptr+as+*mut+u8,+Layout::new::%3CString%3E());%0A++++%7D%0A%7D&edition=2021)\n\nNote: This is equivalent to the following:\n\n```\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nunsafe {\n    drop(Box::from_raw(ptr));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++unsafe+%7B%0A++++++++drop(Box::from_raw(ptr));%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1154)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConsumes the `Box`, returning a wrapped raw pointer and the allocator.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the memory previously managed by the `Box`. In particular, the caller should properly destroy `T` and release the memory, taking into account the [memory layout](about:blank/index.html#memory-layout \"mod std::boxed\") used by `Box`. The easiest way to do this is to convert the raw pointer back into a `Box` with the [`Box::from_raw_in`](about:blank/struct.Box.html#method.from_raw_in \"associated function std::boxed::Box::from_raw_in\") function, allowing the `Box` destructor to perform the cleanup.\n\nNote: this is an associated function, which means that you have to call it as `Box::into_raw_with_allocator(b)` instead of `b.into_raw_with_allocator()`. This is so that there is no conflict with a method on the inner type.\n\n##### [§](#examples-25)Examples\n\nConverting the raw pointer back into a `Box` with [`Box::from_raw_in`](about:blank/struct.Box.html#method.from_raw_in \"associated function std::boxed::Box::from_raw_in\") for automatic cleanup:\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+x+=+Box::new_in(String::from(%22Hello%22),+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw_in(ptr,+alloc)+%7D;%0A%7D&version=nightly&edition=2021)\n\nManual cleanup by explicitly running the destructor and deallocating the memory:\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::{Allocator, Layout, System};\nuse std::ptr::{self, NonNull};\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nunsafe {\n    ptr::drop_in_place(ptr);\n    let non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::<String>());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+System%7D;%0A++++use+std::ptr::%7Bself,+NonNull%7D;%0A++++%0A++++let+x+=+Box::new_in(String::from(%22Hello%22),+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++unsafe+%7B%0A++++++++ptr::drop_in_place(ptr);%0A++++++++let+non_null+=+NonNull::new_unchecked(ptr);%0A++++++++alloc.deallocate(non_null.cast(),+Layout::new::%3CString%3E());%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1186)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nReturns a reference to the underlying allocator.\n\nNote: this is an associated function, which means that you have to call it as `Box::allocator(&b)` instead of `b.allocator()`. This is so that there is no conflict with a method on the inner type.\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1227-1229)\n\nConsumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.\n\nThis function is mainly useful for data that lives for the remainder of the program’s life. Dropping the returned reference will cause a memory leak. If this is not acceptable, the reference should first be wrapped with the [`Box::from_raw`](about:blank/struct.Box.html#method.from_raw \"associated function std::boxed::Box::from_raw\") function producing a `Box`. This `Box` can then be dropped which will properly destroy `T` and release the allocated memory.\n\nNote: this is an associated function, which means that you have to call it as `Box::leak(b)` instead of `b.leak()`. This is so that there is no conflict with a method on the inner type.\n\n##### [§](#examples-26)Examples\n\nSimple usage:\n\n```\nlet x = Box::new(41);\nlet static_ref: &'static mut usize = Box::leak(x);\n*static_ref += 1;\nassert_eq!(*static_ref, 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(41);%0A++++let+static_ref:+%26%27static+mut+usize+=+Box::leak(x);%0A++++*static_ref+%2B=+1;%0A++++assert_eq!(*static_ref,+42);%0A%7D&edition=2021)\n\nUnsized data:\n\n```\nlet x = vec![1, 2, 3].into_boxed_slice();\nlet static_ref = Box::leak(x);\nstatic_ref[0] = 4;\nassert_eq!(*static_ref, [4, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++let+static_ref+=+Box::leak(x);%0A++++static_ref%5B0%5D+=+4;%0A++++assert_eq!(*static_ref,+%5B4,+2,+3%5D);%0A%7D&edition=2021)\n\n1.63.0 (const: [unstable](https://github.com/rust-lang/rust/issues/92521 \"Tracking issue for const_box\")) · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1266-1268)\n\nConverts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then `*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`From`](../convert/trait.From.html \"trait std::convert::From\").\n\nConstructing and pinning a `Box` with `Box::into_pin([Box::new](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\")(x))` can also be written more concisely using `[Box::pin](about:blank/struct.Box.html#method.pin \"associated function std::boxed::Box::pin\")(x)`. This `into_pin` method is useful if you already have a `Box<T>`, or you are constructing a (pinned) `Box` in a different way than with [`Box::new`](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\").\n\n##### [§](#notes)Notes\n\nIt’s not recommended that crates add an impl like `From<Box<T>> for Pin<T>`, as it’ll introduce an ambiguity when calling `Pin::from`. A demonstration of such a poor impl is shown below.\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nstruct Foo; // A type defined in this crate.\nimpl From<Box<()>> for Pin<Foo> {\n    fn from(_: Box<()>) -> Pin<Foo> {\n        Pin::new(Foo)\n    }\n}\n\nlet foo = Box::new(());\nlet bar = Pin::from(foo);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++struct+Foo;+//+A+type+defined+in+this+crate.%0A++++impl+From%3CBox%3C()%3E%3E+for+Pin%3CFoo%3E+%7B%0A++++++++fn+from(_:+Box%3C()%3E)+-%3E+Pin%3CFoo%3E+%7B%0A++++++++++++Pin::new(Foo)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+foo+=+Box::new(());%0A++++let+bar+=+Pin::from(foo);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1769)[§](#impl-Box%3Cdyn+Any,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1789)\n\nAttempt to downcast the box to a concrete type.\n\n##### [§](#examples-27)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1819)\n\n🔬This is a nightly-only experimental API. (`downcast_unchecked` [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [§](#examples-28)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [§](#safety-4)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1828)[§](#impl-Box%3Cdyn+Any+%2B+Send,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1848)\n\nAttempt to downcast the box to a concrete type.\n\n##### [§](#examples-29)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1878)\n\n🔬This is a nightly-only experimental API. (`downcast_unchecked` [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [§](#examples-30)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [§](#safety-5)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1887)[§](#impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1907)\n\nAttempt to downcast the box to a concrete type.\n\n##### [§](#examples-31)Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1937)\n\n🔬This is a nightly-only experimental API. (`downcast_unchecked` [#90850](https://github.com/rust-lang/rust/issues/90850))\n\nDowncasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`](about:blank/struct.Box.html#method.downcast \"method std::boxed::Box::downcast\").\n\n##### [§](#examples-32)Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send + Sync> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n##### [§](#safety-6)Safety\n\nThe contained value must be of type `T`. Calling this method with the incorrect type is _undefined behavior_.\n\n1.64.0 · [source](about:blank/src/std/os/fd/owned.rs.html#423-428)[§](#impl-AsFd-for-Box%3CT%3E)\n\n1.71.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#495-500)[§](#impl-AsHandle-for-Box%3CT%3E)\n\nAvailable on **Windows** only.\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2274)[§](#impl-AsMut%3CT%3E-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2275)[§](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.63.0 · [source](about:blank/src/std/os/fd/raw.rs.html#269-274)[§](#impl-AsRawFd-for-Box%3CT%3E)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2267)[§](#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2268)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.71.0 · [source](about:blank/src/std/os/windows/io/socket.rs.html#286-291)[§](#impl-AsSocket-for-Box%3CT%3E)\n\nAvailable on **Windows** only.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2101)[§](#impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2102)[§](#method.async_call)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\nCall the [`AsyncFn`](../ops/trait.AsyncFn.html \"trait std::ops::AsyncFn\"), returning a future which may borrow from the called closure.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2092)[§](#impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[§](#associatedtype.CallRefFuture)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2095)[§](#method.async_call_mut)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\nCall the [`AsyncFnMut`](../ops/trait.AsyncFnMut.html \"trait std::ops::AsyncFnMut\"), returning a future which may borrow from the called closure.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2082)[§](#impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[§](#associatedtype.Output-1)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\nOutput type of the called closure’s future.\n\n[§](#associatedtype.CallOnceFuture)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2086)[§](#method.async_call_once)\n\n🔬This is a nightly-only experimental API. (`async_fn_traits`)\n\nCall the [`AsyncFnOnce`](../ops/trait.AsyncFnOnce.html \"trait std::ops::AsyncFnOnce\"), returning a future which may move out of the called closure.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2338)[§](#impl-AsyncIterator-for-Box%3CS%3E)\n\n[§](#associatedtype.Item-4)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of items yielded by the async iterator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2341)[§](#method.poll_next)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nAttempt to pull out the next value of this async iterator, registering the current task for wakeup if the value is not yet available, and returning `None` if the async iterator is exhausted. [Read more](about:blank/async_iter/trait.AsyncIterator.html#tymethod.poll_next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2345)[§](#method.size_hint-4)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nReturns the bounds on the remaining length of the async iterator. [Read more](about:blank/async_iter/trait.AsyncIterator.html#method.size_hint)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2253)[§](#impl-Borrow%3CT%3E-for-Box%3CT,+A%3E)\n\n1.1.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2260)[§](#impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#209-229)[§](#impl-BufRead-for-Box%3CB%3E)\n\n[source](about:blank/src/std/io/impls.rs.html#211-213)[§](#method.fill_buf)\n\nReturns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. [Read more](about:blank/io/trait.BufRead.html#tymethod.fill_buf)\n\n[source](about:blank/src/std/io/impls.rs.html#216-218)[§](#method.consume)\n\nTells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`. [Read more](about:blank/io/trait.BufRead.html#tymethod.consume)\n\n[source](about:blank/src/std/io/impls.rs.html#221-223)[§](#method.read_until)\n\nRead all bytes into `buf` until the delimiter `byte` or EOF is reached. [Read more](about:blank/io/trait.BufRead.html#method.read_until)\n\n[source](about:blank/src/std/io/impls.rs.html#226-228)[§](#method.read_line)\n\nRead all bytes until a newline (the `0xA` byte) is reached, and append them to the provided `String` buffer. [Read more](about:blank/io/trait.BufRead.html#method.read_line)\n\n[source](about:blank/src/std/io/mod.rs.html#2285-2287)[§](#method.has_data_left)\n\n🔬This is a nightly-only experimental API. (`buf_read_has_data_left` [#86423](https://github.com/rust-lang/rust/issues/86423))\n\nCheck if the underlying `Read` has any data left to be read. [Read more](about:blank/io/trait.BufRead.html#method.has_data_left)\n\n[source](about:blank/src/std/io/mod.rs.html#2406-2408)[§](#method.skip_until)\n\n🔬This is a nightly-only experimental API. (`bufread_skip_until` [#111735](https://github.com/rust-lang/rust/issues/111735))\n\nSkip all bytes until the delimiter `byte` or EOF is reached. [Read more](about:blank/io/trait.BufRead.html#method.skip_until)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#2512-2517)[§](#method.split)\n\nReturns an iterator over the contents of this reader split on the byte `byte`. [Read more](about:blank/io/trait.BufRead.html#method.split)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#2549-2554)[§](#method.lines)\n\nReturns an iterator over the lines of this reader. [Read more](about:blank/io/trait.BufRead.html#method.lines)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2219)[§](#impl-Clone-for-Box%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2243)[§](#method.clone_from-2)\n\nCopies `source`’s contents into `self` without creating a new allocation, so long as the two are of the same length.\n\n##### [§](#examples-35)Examples\n\n```\nlet x = Box::new([5, 6, 7]);\nlet mut y = Box::new([8, 9, 10]);\nlet yp: *const [i32] = &*y;\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no allocation occurred\nassert_eq!(yp, &*y);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(%5B5,+6,+7%5D);%0A++++let+mut+y+=+Box::new(%5B8,+9,+10%5D);%0A++++let+yp:+*const+%5Bi32%5D+=+%26*y;%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+allocation+occurred%0A++++assert_eq!(yp,+%26*y);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2220)[§](#method.clone-2)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.29.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#824)[§](#impl-Clone-for-Box%3CCStr%3E)\n\n1.29.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1233-1238)[§](#impl-Clone-for-Box%3COsStr%3E)\n\n1.29.0 · [source](about:blank/src/std/path.rs.html#1698-1703)[§](#impl-Clone-for-Box%3CPath%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1330)[§](#impl-Clone-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1346)[§](#method.clone-1)\n\nReturns a new box with a `clone()` of this box’s contents.\n\n##### [§](#examples-33)Examples\n\n```\nlet x = Box::new(5);\nlet y = x.clone();\n\n// The value is the same\nassert_eq!(x, y);\n\n// But they are unique objects\nassert_ne!(&*x as *const i32, &*y as *const i32);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+y+=+x.clone();%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+But+they+are+unique+objects%0A++++assert_ne!(%26*x+as+*const+i32,+%26*y+as+*const+i32);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1373)[§](#method.clone_from-1)\n\nCopies `source`’s contents into `self` without creating a new allocation.\n\n##### [§](#examples-34)Examples\n\n```\nlet x = Box::new(5);\nlet mut y = Box::new(10);\nlet yp: *const i32 = &*y;\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no allocation occurred\nassert_eq!(yp, &*y);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+mut+y+=+Box::new(10);%0A++++let+yp:+*const+i32+=+%26*y;%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+allocation+occurred%0A++++assert_eq!(yp,+%26*y);%0A%7D&edition=2021)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1380)[§](#impl-Clone-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2306)[§](#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E)\n\n[§](#associatedtype.Yield-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Yield)\n\n[§](#associatedtype.Return-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Return)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2310)[§](#method.resume-1)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine. [Read more](about:blank/ops/trait.Coroutine.html#tymethod.resume)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2316-2318)[§](#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E)\n\n[§](#associatedtype.Yield)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine yields. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Yield)\n\n[§](#associatedtype.Return)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nThe type of value this coroutine returns. [Read more](about:blank/ops/trait.Coroutine.html#associatedtype.Return)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2323)[§](#method.resume)\n\n🔬This is a nightly-only experimental API. (`coroutine_trait` [#43122](https://github.com/rust-lang/rust/issues/43122))\n\nResumes the execution of this coroutine. [Read more](about:blank/ops/trait.Coroutine.html#tymethod.resume)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1955)[§](#impl-Debug-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1306)[§](#impl-Default-for-Box%3C%5BT%5D%3E)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#928)[§](#impl-Default-for-Box%3CCStr%3E)\n\n1.17.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1338-1344)[§](#impl-Default-for-Box%3COsStr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1296)[§](#impl-Default-for-Box%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1299)[§](#method.default)\n\nCreates a `Box<T>`, with the `Default` value for T.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1316)[§](#impl-Default-for-Box%3Cstr%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1972)[§](#impl-Deref-for-Box%3CT,+A%3E)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1975)[§](#method.deref)\n\nDereferences the value.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1981)[§](#impl-DerefMut-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1982)[§](#method.deref_mut)\n\nMutably dereferences the value.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1948)[§](#impl-Display-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2037)[§](#impl-DoubleEndedIterator-for-Box%3CI,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2038)[§](#method.next_back)\n\nRemoves and returns an element from the end of the iterator. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#tymethod.next_back)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2041)[§](#method.nth_back)\n\nReturns the `n`th element from the end of the iterator. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#method.nth_back)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#138)[§](#method.advance_back_by)\n\n🔬This is a nightly-only experimental API. (`iter_advance_by` [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator from the back by `n` elements. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#method.advance_back_by)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#230-234)[§](#method.try_rfold)\n\nThis is the reverse version of [`Iterator::try_fold()`](about:blank/iter/trait.Iterator.html#method.try_fold \"method std::iter::Iterator::try_fold\"): it takes elements starting from the back of the iterator. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#method.try_rfold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#301-304)[§](#method.rfold)\n\nAn iterator method that reduces the iterator’s elements to a single, final value, starting from the back. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#method.rfold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#356-359)[§](#method.rfind)\n\nSearches for an element of an iterator from the back that satisfies a predicate. [Read more](about:blank/iter/trait.DoubleEndedIterator.html#method.rfind)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1278)[§](#impl-Drop-for-Box%3CT,+A%3E)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2623)[§](#impl-Error-for-Box%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2625)[§](#method.description)\n\n👎Deprecated since 1.42.0: use the Display impl or to\\_string()\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2630)[§](#method.cause)\n\n👎Deprecated since 1.33.0: replaced by Error::source, which can support downcasting\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2634)[§](#method.source)\n\nThe lower-level source of this error, if any. [Read more](about:blank/error/trait.Error.html#method.source)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2638)[§](#method.provide)\n\n🔬This is a nightly-only experimental API. (`error_generic_member_access` [#99301](https://github.com/rust-lang/rust/issues/99301))\n\nProvides type based access to context intended for error reports. [Read more](about:blank/error/trait.Error.html#method.provide)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2046)[§](#impl-ExactSizeIterator-for-Box%3CI,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2047)[§](#method.len)\n\nReturns the exact remaining length of the iterator. [Read more](about:blank/iter/trait.ExactSizeIterator.html#method.len)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2050)[§](#method.is_empty)\n\n🔬This is a nightly-only experimental API. (`exact_size_is_empty` [#35428](https://github.com/rust-lang/rust/issues/35428))\n\nReturns `true` if the iterator is empty. [Read more](about:blank/iter/trait.ExactSizeIterator.html#method.is_empty)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2244)[§](#impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2245)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2075)[§](#impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2076)[§](#method.call)\n\n🔬This is a nightly-only experimental API. (`fn_traits` [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2068)[§](#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2069)[§](#method.call_mut)\n\n🔬This is a nightly-only experimental API. (`fn_traits` [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2059)[§](#impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E)\n\n[§](#associatedtype.Output-2)\n\nThe returned type after the call operator is used.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2062)[§](#method.call_once)\n\n🔬This is a nightly-only experimental API. (`fn_traits` [#29625](https://github.com/rust-lang/rust/issues/29625))\n\nPerforms the call operation.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1562)[§](#impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1577)[§](#method.from-17)\n\nConverts a `&[T]` into a `Box<[T]>`\n\nThis conversion allocates on the heap and performs a copy of `slice` and its contents.\n\n##### [§](#examples-50)Examples\n\n```\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice: Box<[u8]> = Box::from(slice);\n\nprintln!(\"{boxed_slice:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+create+a+%26%5Bu8%5D+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0Afn+main()+%7B%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B104,+101,+108,+108,+111%5D;%0A++++let+boxed_slice:+Box%3C%5Bu8%5D%3E+=+Box::from(slice);%0A++++%0A++++println!(%22%7Bboxed_slice:?%7D%22);%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#768)[§](#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#771)[§](#method.from-3)\n\nConverts a `&CStr` into a `Box<CStr>`, by copying the contents into a newly allocated [`Box`](struct.Box.html \"struct std::boxed::Box\").\n\n1.17.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1191-1198)[§](#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E)\n\n1.17.0 · [source](about:blank/src/std/path.rs.html#1649-1658)[§](#impl-From%3C%26Path%3E-for-Box%3CPath%3E)\n\n[source](about:blank/src/std/path.rs.html#1653-1657)[§](#method.from-33)\n\nCreates a boxed [`Path`](../path/struct.Path.html \"struct std::path::Path\") from a reference.\n\nThis will allocate and clone `path` to it.\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2559)[§](#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2574)[§](#method.from-6)\n\nConverts a [`str`](../primitive.str.html \"primitive str\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\").\n\n##### [§](#examples-41)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error>::from(a_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2535)[§](#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2552)[§](#method.from-20)\n\nConverts a [`str`](../primitive.str.html \"primitive str\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\") + [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\").\n\n##### [§](#examples-52)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1602)[§](#impl-From%3C%26str%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1615)[§](#method.from-23)\n\nConverts a `&str` into a `Box<str>`\n\nThis conversion allocates on the heap and performs a copy of `s`.\n\n##### [§](#examples-53)Examples\n\n```\nlet boxed: Box<str> = Box::from(\"hello\");\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1682)[§](#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1693)[§](#method.from-24)\n\nConverts a `[T; N]` into a `Box<[T]>`\n\nThis conversion moves the array to newly heap-allocated memory.\n\n##### [§](#examples-54)Examples\n\n```\nlet boxed: Box<[u8]> = Box::from([4, 2]);\nprintln!(\"{boxed:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3C%5Bu8%5D%3E+=+Box::from(%5B4,+2%5D);%0A++++println!(%22%7Bboxed:?%7D%22);%0A%7D&edition=2021)\n\n1.18.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3450)[§](#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3460)[§](#method.from-5)\n\nConvert a boxed slice into a vector by transferring ownership of the existing heap allocation.\n\n##### [§](#examples-40)Examples\n\n```\nlet b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\nassert_eq!(Vec::from(b), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+b:+Box%3C%5Bi32%5D%3E+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++assert_eq!(Vec::from(b),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.18.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#791)[§](#impl-From%3CBox%3CCStr%3E%3E-for-CString)\n\n1.18.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1214-1221)[§](#impl-From%3CBox%3COsStr%3E%3E-for-OsString)\n\n1.18.0 · [source](about:blank/src/std/path.rs.html#1675-1683)[§](#impl-From%3CBox%3CPath%3E%3E-for-PathBuf)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3577)[§](#impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3589)[§](#method.from-13)\n\nMove a boxed object to a new, reference-counted allocation.\n\n##### [§](#example)Example\n\n```\nlet unique: Box<str> = Box::from(\"eggplant\");\nlet shared: Arc<str> = Arc::from(unique);\nassert_eq!(\"eggplant\", &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+unique:+Box%3Cstr%3E+=+Box::from(%22eggplant%22);%0A++++let+shared:+Arc%3Cstr%3E+=+Arc::from(unique);%0A++++assert_eq!(%22eggplant%22,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1513-1515)[§](#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1528)[§](#method.from-22)\n\nConverts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`](../marker/trait.Unpin.html \"trait std::marker::Unpin\"), then `*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`Box::into_pin`](about:blank/struct.Box.html#method.into_pin \"associated function std::boxed::Box::into_pin\").\n\nConstructing and pinning a `Box` with `<Pin<Box<T>>>::from([Box::new](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\")(x))` can also be written more concisely using `[Box::pin](about:blank/struct.Box.html#method.pin \"associated function std::boxed::Box::pin\")(x)`. This `From` implementation is useful if you already have a `Box<T>`, or you are constructing a (pinned) `Box` in a different way than with [`Box::new`](about:blank/struct.Box.html#method.new \"associated function std::boxed::Box::new\").\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2618)[§](#impl-From%3CBox%3CT,+A%3E%3E-for-Rc%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2630)[§](#method.from-21)\n\nMove a boxed object to a new, reference counted, allocation.\n\n##### [§](#example-1)Example\n\n```\nlet original: Box<i32> = Box::new(1);\nlet shared: Rc<i32> = Rc::from(original);\nassert_eq!(1, *shared);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+original:+Box%3Ci32%3E+=+Box::new(1);%0A++++let+shared:+Rc%3Ci32%3E+=+Rc::from(original);%0A++++assert_eq!(1,+*shared);%0A%7D&edition=2021)\n\n1.18.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2746)[§](#impl-From%3CBox%3Cstr%3E%3E-for-String)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2759)[§](#method.from-15)\n\nConverts the given boxed `str` slice to a [`String`](../string/struct.String.html \"struct std::string::String\"). It is notable that the `str` slice is owned.\n\n##### [§](#examples-48)Examples\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = s1.into_boxed_str();\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+s1.into_boxed_str();%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&edition=2021)\n\n1.19.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1656)[§](#impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1674)[§](#method.from-10)\n\nConverts a `Box<str>` into a `Box<[u8]>`\n\nThis conversion does not allocate on the heap and happens in place.\n\n##### [§](#examples-45)Examples\n\n```\n// create a Box<str> which will be used to create a Box<[u8]>\nlet boxed: Box<str> = Box::from(\"hello\");\nlet boxed_str: Box<[u8]> = Box::from(boxed);\n\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice = Box::from(slice);\n\nassert_eq!(boxed_slice, boxed_str);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+create+a+Box%3Cstr%3E+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++let+boxed_str:+Box%3C%5Bu8%5D%3E+=+Box::from(boxed);%0A++++%0A++++//+create+a+%26%5Bu8%5D+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B104,+101,+108,+108,+111%5D;%0A++++let+boxed_slice+=+Box::from(slice);%0A++++%0A++++assert_eq!(boxed_slice,+boxed_str);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832)[§](#impl-From%3CCString%3E-for-Box%3CCStr%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1584)[§](#impl-From%3CCow%3C'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1592)[§](#method.from-12)\n\nConverts a `Cow<'_, [T]>` into a `Box<[T]>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this conversion allocates on the heap and copies the underlying slice. Otherwise, it will try to reuse the owned `Vec`’s allocation.\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#778)[§](#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#782)[§](#method.from-18)\n\nConverts a `Cow<'a, CStr>` into a `Box<CStr>`, by copying the contents if they are borrowed.\n\n1.45.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1201-1211)[§](#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1205-1210)[§](#method.from-32)\n\nConverts a `Cow<'a, OsStr>` into a `[Box](struct.Box.html \"struct std::boxed::Box\")<[OsStr](../ffi/struct.OsStr.html \"struct std::ffi::OsStr\")>`, by copying the contents if they are borrowed.\n\n1.45.0 · [source](about:blank/src/std/path.rs.html#1661-1672)[§](#impl-From%3CCow%3C'_,+Path%3E%3E-for-Box%3CPath%3E)\n\n[source](about:blank/src/std/path.rs.html#1666-1671)[§](#method.from-29)\n\nCreates a boxed [`Path`](../path/struct.Path.html \"struct std::path::Path\") from a clone-on-write pointer.\n\nConverting from a `Cow::Owned` does not clone or allocate.\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1622)[§](#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1647)[§](#method.from-2)\n\nConverts a `Cow<'_, str>` into a `Box<str>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this conversion allocates on the heap and copies the underlying `str`. Otherwise, it will try to reuse the owned `String`’s allocation.\n\n##### [§](#examples-38)Examples\n\n```\nuse std::borrow::Cow;\n\nlet unboxed = Cow::Borrowed(\"hello\");\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++let+unboxed+=+Cow::Borrowed(%22hello%22);%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n```\nlet unboxed = Cow::Owned(\"hello\".to_string());\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+unboxed+=+Cow::Owned(%22hello%22.to_string());%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&edition=2021)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2603)[§](#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2617)[§](#method.from-4)\n\nConverts a [`Cow`](../borrow/enum.Cow.html \"enum std::borrow::Cow\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\").\n\n##### [§](#examples-39)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++use+std::borrow::Cow;%0A++++%0A++++let+a_cow_str_error+=+Cow::from(%22a+str+error%22);%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_cow_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2581)[§](#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2596)[§](#method.from)\n\nConverts a [`Cow`](../borrow/enum.Cow.html \"enum std::borrow::Cow\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\") + [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\").\n\n##### [§](#examples-37)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++use+std::borrow::Cow;%0A++++%0A++++let+a_cow_str_error+=+Cow::from(%22a+str+error%22);%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_cow_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2397)[§](#impl-From%3CE%3E-for-Box%3Cdyn+Error%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2423)[§](#method.from-9)\n\nConverts a type of [`Error`](../error/trait.Error.html \"trait std::error::Error\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\").\n\n##### [§](#examples-44)Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error>::from(an_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::mem;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+AnError;%0A++++%0A++++impl+fmt::Display+for+AnError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22An+error%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+AnError+%7B%7D%0A++++%0A++++let+an_error+=+AnError;%0A++++assert!(0+==+mem::size_of_val(%26an_error));%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(an_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2430)[§](#impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2462)[§](#method.from-11)\n\nConverts a type of [`Error`](../error/trait.Error.html \"trait std::error::Error\") + [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\") + [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\").\n\n##### [§](#examples-46)Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nunsafe impl Send for AnError {}\n\nunsafe impl Sync for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::mem;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+AnError;%0A++++%0A++++impl+fmt::Display+for+AnError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22An+error%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+AnError+%7B%7D%0A++++%0A++++unsafe+impl+Send+for+AnError+%7B%7D%0A++++%0A++++unsafe+impl+Sync+for+AnError+%7B%7D%0A++++%0A++++let+an_error+=+AnError;%0A++++assert!(0+==+mem::size_of_val(%26an_error));%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(an_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1224-1230)[§](#impl-From%3COsString%3E-for-Box%3COsStr%3E)\n\n1.20.0 · [source](about:blank/src/std/path.rs.html#1686-1695)[§](#impl-From%3CPathBuf%3E-for-Box%3CPath%3E)\n\n[source](about:blank/src/std/path.rs.html#1692-1694)[§](#method.from-31)\n\nConverts a [`PathBuf`](../path/struct.PathBuf.html \"struct std::path::PathBuf\") into a `[Box](struct.Box.html \"struct std::boxed::Box\")<[Path](../path/struct.Path.html \"struct std::path::Path\")>`.\n\nThis conversion currently should not allocate memory, but this behavior is not guaranteed on all platforms or in all future versions.\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2513)[§](#impl-From%3CString%3E-for-Box%3Cdyn+Error%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2526)[§](#method.from-19)\n\nConverts a [`String`](../string/struct.String.html \"struct std::string::String\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\").\n\n##### [§](#examples-51)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error>::from(a_string_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_string_error+=+%22a+string+error%22.to_string();%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_string_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2469)[§](#impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2484)[§](#method.from-16)\n\nConverts a [`String`](../string/struct.String.html \"struct std::string::String\") into a box of dyn [`Error`](../error/trait.Error.html \"trait std::error::Error\") + [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") + [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\").\n\n##### [§](#examples-49)Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_string_error+=+%22a+string+error%22.to_string();%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_string_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2766)[§](#impl-From%3CString%3E-for-Box%3Cstr%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2778)[§](#method.from-7)\n\nConverts the given [`String`](../string/struct.String.html \"struct std::string::String\") to a boxed `str` slice that is owned.\n\n##### [§](#examples-42)Examples\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = Box::from(s1);\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+Box::from(s1);%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&edition=2021)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1493)[§](#impl-From%3CT%3E-for-Box%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1507)[§](#method.from-8)\n\nConverts a `T` into a `Box<T>`\n\nThe conversion allocates on the heap and moves `t` from the stack into it.\n\n##### [§](#examples-43)Examples\n\n```\nlet x = 5;\nlet boxed = Box::new(5);\n\nassert_eq!(Box::from(x), boxed);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+5;%0A++++let+boxed+=+Box::new(5);%0A++++%0A++++assert_eq!(Box::from(x),+boxed);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3469)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3490)[§](#method.from-14)\n\nConvert a vector into a boxed slice.\n\nBefore doing the conversion, this method discards excess capacity like [`Vec::shrink_to_fit`](about:blank/vec/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\").\n\n##### [§](#examples-47)Examples\n\n```\nassert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Box::from(vec!%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&edition=2021)\n\nAny excess capacity is removed:\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(Box::from(vec),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179)[§](#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187)[§](#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203)[§](#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E)\n\n1.45.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2162)[§](#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211)[§](#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E)\n\n1.32.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2118)[§](#impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195)[§](#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171)[§](#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2329)[§](#impl-Future-for-Box%3CF,+A%3E)\n\n[§](#associatedtype.Output)\n\nThe type of value produced on completion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2332)[§](#method.poll)\n\nAttempt to resolve the future to a final value, registering the current task for wakeup if the value is not yet available. [Read more](about:blank/future/trait.Future.html#tymethod.poll)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1433)[§](#impl-Hash-for-Box%3CT,+A%3E)\n\n1.22.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1440)[§](#impl-Hasher-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1441)[§](#method.finish)\n\nReturns the hash value for the values written so far. [Read more](about:blank/hash/trait.Hasher.html#tymethod.finish)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1444)[§](#method.write-1)\n\nWrites some data into this `Hasher`. [Read more](about:blank/hash/trait.Hasher.html#tymethod.write)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1447)[§](#method.write_u8)\n\nWrites a single `u8` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1450)[§](#method.write_u16)\n\nWrites a single `u16` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1453)[§](#method.write_u32)\n\nWrites a single `u32` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1456)[§](#method.write_u64)\n\nWrites a single `u64` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1459)[§](#method.write_u128)\n\nWrites a single `u128` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1462)[§](#method.write_usize)\n\nWrites a single `usize` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1465)[§](#method.write_i8)\n\nWrites a single `i8` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1468)[§](#method.write_i16)\n\nWrites a single `i16` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1471)[§](#method.write_i32)\n\nWrites a single `i32` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1474)[§](#method.write_i64)\n\nWrites a single `i64` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1477)[§](#method.write_i128)\n\nWrites a single `i128` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1480)[§](#method.write_isize)\n\nWrites a single `isize` into this hasher.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1483)[§](#method.write_length_prefix)\n\n🔬This is a nightly-only experimental API. (`hasher_prefixfree_extras` [#96762](https://github.com/rust-lang/rust/issues/96762))\n\nWrites a length prefix into this hasher, as part of being prefix-free. [Read more](about:blank/hash/trait.Hasher.html#method.write_length_prefix)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1486)[§](#method.write_str)\n\n🔬This is a nightly-only experimental API. (`hasher_prefixfree_extras` [#96762](https://github.com/rust-lang/rust/issues/96762))\n\nWrites a single `str` into this hasher. [Read more](about:blank/hash/trait.Hasher.html#method.write_str)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2152)[§](#impl-IntoIterator-for-%26Box%3C%5BI%5D,+A%3E)\n\n[§](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[§](#associatedtype.Item-7)\n\nThe type of the elements being iterated over.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2155)[§](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2161)[§](#impl-IntoIterator-for-%26mut+Box%3C%5BI%5D,+A%3E)\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[§](#associatedtype.Item-6)\n\nThe type of the elements being iterated over.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2164)[§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2143)[§](#impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E)\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n[§](#associatedtype.Item-5)\n\nThe type of the elements being iterated over.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2146)[§](#method.into_iter)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2132)[§](#impl-Iterator-for-%26Box%3C%5BI%5D,+A%3E)\n\nThis implementation is required to make sure that the `&Box<[I]>: IntoIterator` implementation doesn’t overlap with `IntoIterator for T where T: Iterator` blanket.\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80)[§](#tymethod.next)\n\nAdvances the iterator and returns the next value. [Read more](about:blank/iter/trait.Iterator.html#tymethod.next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119)[§](#method.next_chunk)\n\n🔬This is a nightly-only experimental API. (`iter_next_chunk` [#98326](https://github.com/rust-lang/rust/issues/98326))\n\nAdvances the iterator and returns an array containing the next `N` values. [Read more](about:blank/iter/trait.Iterator.html#method.next_chunk)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193)[§](#method.size_hint)\n\nReturns the bounds on the remaining length of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.size_hint)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231)[§](#method.count)\n\nConsumes the iterator, counting the number of iterations and returning it. [Read more](about:blank/iter/trait.Iterator.html#method.count)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260)[§](#method.last)\n\nConsumes the iterator, returning the last element. [Read more](about:blank/iter/trait.Iterator.html#method.last)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306)[§](#method.advance_by)\n\n🔬This is a nightly-only experimental API. (`iter_advance_by` [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator by `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.advance_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358)[§](#method.nth)\n\nReturns the `n`th element of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.nth)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411)[§](#method.step_by)\n\nCreates an iterator starting at the same point, but stepping by the given amount at each iteration. [Read more](about:blank/iter/trait.Iterator.html#method.step_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484)[§](#method.chain)\n\nTakes two iterators and creates a new iterator over both in sequence. [Read more](about:blank/iter/trait.Iterator.html#method.chain)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603)[§](#method.zip)\n\n‘Zips up’ two iterators into a single iterator of pairs. [Read more](about:blank/iter/trait.Iterator.html#method.zip)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705)[§](#method.intersperse_with)\n\n🔬This is a nightly-only experimental API. (`iter_intersperse` [#79524](https://github.com/rust-lang/rust/issues/79524))\n\nCreates a new iterator which places an item generated by `separator` between adjacent items of the original iterator. [Read more](about:blank/iter/trait.Iterator.html#method.intersperse_with)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765)[§](#method.map)\n\nTakes a closure and creates an iterator which calls that closure on each element. [Read more](about:blank/iter/trait.Iterator.html#method.map)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811)[§](#method.for_each)\n\nCalls a closure on each element of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887)[§](#method.filter)\n\nCreates an iterator which uses a closure to determine if an element should be yielded. [Read more](about:blank/iter/trait.Iterator.html#method.filter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933)[§](#method.filter_map)\n\nCreates an iterator that both filters and maps. [Read more](about:blank/iter/trait.Iterator.html#method.filter_map)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980)[§](#method.enumerate)\n\nCreates an iterator which gives the current iteration count as well as the next value. [Read more](about:blank/iter/trait.Iterator.html#method.enumerate)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052)[§](#method.peekable)\n\nCreates an iterator which can use the [`peek`](about:blank/iter/struct.Peekable.html#method.peek \"method std::iter::Peekable::peek\") and [`peek_mut`](about:blank/iter/struct.Peekable.html#method.peek_mut \"method std::iter::Peekable::peek_mut\") methods to look at the next element of the iterator without consuming it. See their documentation for more information. [Read more](about:blank/iter/trait.Iterator.html#method.peekable)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119)[§](#method.skip_while)\n\nCreates an iterator that [`skip`](about:blank/iter/trait.Iterator.html#method.skip \"method std::iter::Iterator::skip\")s elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.skip_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201)[§](#method.take_while)\n\nCreates an iterator that yields elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.take_while)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290)[§](#method.map_while)\n\nCreates an iterator that both yields elements based on a predicate and maps. [Read more](about:blank/iter/trait.Iterator.html#method.map_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319)[§](#method.skip)\n\nCreates an iterator that skips the first `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.skip)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373)[§](#method.take)\n\nCreates an iterator that yields the first `n` elements, or fewer if the underlying iterator ends sooner. [Read more](about:blank/iter/trait.Iterator.html#method.take)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422)[§](#method.scan)\n\nAn iterator adapter which, like [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), holds internal state, but unlike [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), produces a new iterator. [Read more](about:blank/iter/trait.Iterator.html#method.scan)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462)[§](#method.flat_map)\n\nCreates an iterator that works like map, but flattens nested structure. [Read more](about:blank/iter/trait.Iterator.html#method.flat_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703)[§](#method.map_windows)\n\n🔬This is a nightly-only experimental API. (`iter_map_windows` [#87155](https://github.com/rust-lang/rust/issues/87155))\n\nCalls the given function `f` for each contiguous window of size `N` over `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`](about:blank/primitive.slice.html#method.windows \"method slice::windows\"), the windows during mapping overlap as well. [Read more](about:blank/iter/trait.Iterator.html#method.map_windows)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769)[§](#method.fuse)\n\nCreates an iterator which ends after the first [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"). [Read more](about:blank/iter/trait.Iterator.html#method.fuse)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855)[§](#method.inspect)\n\nDoes something with each element of an iterator, passing the value on. [Read more](about:blank/iter/trait.Iterator.html#method.inspect)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883)[§](#method.by_ref)\n\nBorrows an iterator, rather than consuming it. [Read more](about:blank/iter/trait.Iterator.html#method.by_ref)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003)[§](#method.collect)\n\nTransforms an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156)[§](#method.collect_into)\n\n🔬This is a nightly-only experimental API. (`iter_collect_into` [#94780](https://github.com/rust-lang/rust/issues/94780))\n\nCollects all the items from an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect_into)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191)[§](#method.partition)\n\nConsumes an iterator, creating two collections from it. [Read more](about:blank/iter/trait.Iterator.html#method.partition)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311)[§](#method.is_partitioned)\n\n🔬This is a nightly-only experimental API. (`iter_is_partitioned` [#62544](https://github.com/rust-lang/rust/issues/62544))\n\nChecks if the elements of this iterator are partitioned according to the given predicate, such that all those that return `true` precede all those that return `false`. [Read more](about:blank/iter/trait.Iterator.html#method.is_partitioned)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407)[§](#method.try_fold)\n\nAn iterator method that applies a function as long as it returns successfully, producing a single, final value. [Read more](about:blank/iter/trait.Iterator.html#method.try_fold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466)[§](#method.try_for_each)\n\nAn iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. [Read more](about:blank/iter/trait.Iterator.html#method.try_for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585)[§](#method.fold)\n\nFolds every element into an accumulator by applying an operation, returning the final result. [Read more](about:blank/iter/trait.Iterator.html#method.fold)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623)[§](#method.reduce)\n\nReduces the elements to a single one, by repeatedly applying a reducing operation. [Read more](about:blank/iter/trait.Iterator.html#method.reduce)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697)[§](#method.try_reduce)\n\n🔬This is a nightly-only experimental API. (`iterator_try_reduce` [#87053](https://github.com/rust-lang/rust/issues/87053))\n\nReduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. [Read more](about:blank/iter/trait.Iterator.html#method.try_reduce)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753)[§](#method.all)\n\nTests if every element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.all)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807)[§](#method.any)\n\nTests if any element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.any)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871)[§](#method.find)\n\nSearches for an element of an iterator that satisfies a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.find)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903)[§](#method.find_map)\n\nApplies function to the elements of iterator and returns the first non-none result. [Read more](about:blank/iter/trait.Iterator.html#method.find_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964)[§](#method.try_find)\n\n🔬This is a nightly-only experimental API. (`try_find` [#63178](https://github.com/rust-lang/rust/issues/63178))\n\nApplies function to the elements of iterator and returns the first true result or the first error. [Read more](about:blank/iter/trait.Iterator.html#method.try_find)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045)[§](#method.position)\n\nSearches for an element in an iterator, returning its index. [Read more](about:blank/iter/trait.Iterator.html#method.position)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220)[§](#method.max_by_key)\n\nReturns the element that gives the maximum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254)[§](#method.max_by)\n\nReturns the element that gives the maximum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282)[§](#method.min_by_key)\n\nReturns the element that gives the minimum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316)[§](#method.min_by)\n\nReturns the element that gives the minimum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3500-3502)[§](#method.cycle)\n\nRepeats an iterator endlessly. [Read more](about:blank/iter/trait.Iterator.html#method.cycle)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546)[§](#method.array_chunks)\n\n🔬This is a nightly-only experimental API. (`iter_array_chunks` [#100450](https://github.com/rust-lang/rust/issues/100450))\n\nReturns an iterator over `N` elements of the iterator at a time. [Read more](about:blank/iter/trait.Iterator.html#method.array_chunks)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579)[§](#method.sum)\n\nSums the elements of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.sum)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612)[§](#method.product)\n\nIterates over the entire iterator, multiplying all the elements [Read more](about:blank/iter/trait.Iterator.html#method.product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663)[§](#method.cmp_by)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720)[§](#method.partial_cmp-1)\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the [`PartialOrd`](../cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\") elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757)[§](#method.partial_cmp_by)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791)[§](#method.eq-1)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.eq)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815)[§](#method.eq_by)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another with respect to the specified equality function. [Read more](about:blank/iter/trait.Iterator.html#method.eq_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848)[§](#method.ne-1)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are not equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.ne)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870)[§](#method.lt-1)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892)[§](#method.le-1)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914)[§](#method.gt-1)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936)[§](#method.ge-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996)[§](#method.is_sorted_by)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given comparator function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044)[§](#method.is_sorted_by_key)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given key extraction function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by_key)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2137)[§](#impl-Iterator-for-%26mut+Box%3C%5BI%5D,+A%3E)\n\nThis implementation is required to make sure that the `&mut Box<[I]>: IntoIterator` implementation doesn’t overlap with `IntoIterator for T where T: Iterator` blanket.\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80)[§](#tymethod.next-1)\n\nAdvances the iterator and returns the next value. [Read more](about:blank/iter/trait.Iterator.html#tymethod.next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119)[§](#method.next_chunk-1)\n\n🔬This is a nightly-only experimental API. (`iter_next_chunk` [#98326](https://github.com/rust-lang/rust/issues/98326))\n\nAdvances the iterator and returns an array containing the next `N` values. [Read more](about:blank/iter/trait.Iterator.html#method.next_chunk)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193)[§](#method.size_hint-1)\n\nReturns the bounds on the remaining length of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.size_hint)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231)[§](#method.count-1)\n\nConsumes the iterator, counting the number of iterations and returning it. [Read more](about:blank/iter/trait.Iterator.html#method.count)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260)[§](#method.last-1)\n\nConsumes the iterator, returning the last element. [Read more](about:blank/iter/trait.Iterator.html#method.last)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306)[§](#method.advance_by-1)\n\n🔬This is a nightly-only experimental API. (`iter_advance_by` [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator by `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.advance_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358)[§](#method.nth-1)\n\nReturns the `n`th element of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.nth)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411)[§](#method.step_by-1)\n\nCreates an iterator starting at the same point, but stepping by the given amount at each iteration. [Read more](about:blank/iter/trait.Iterator.html#method.step_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484)[§](#method.chain-1)\n\nTakes two iterators and creates a new iterator over both in sequence. [Read more](about:blank/iter/trait.Iterator.html#method.chain)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603)[§](#method.zip-1)\n\n‘Zips up’ two iterators into a single iterator of pairs. [Read more](about:blank/iter/trait.Iterator.html#method.zip)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705)[§](#method.intersperse_with-1)\n\n🔬This is a nightly-only experimental API. (`iter_intersperse` [#79524](https://github.com/rust-lang/rust/issues/79524))\n\nCreates a new iterator which places an item generated by `separator` between adjacent items of the original iterator. [Read more](about:blank/iter/trait.Iterator.html#method.intersperse_with)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765)[§](#method.map-1)\n\nTakes a closure and creates an iterator which calls that closure on each element. [Read more](about:blank/iter/trait.Iterator.html#method.map)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811)[§](#method.for_each-1)\n\nCalls a closure on each element of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887)[§](#method.filter-1)\n\nCreates an iterator which uses a closure to determine if an element should be yielded. [Read more](about:blank/iter/trait.Iterator.html#method.filter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933)[§](#method.filter_map-1)\n\nCreates an iterator that both filters and maps. [Read more](about:blank/iter/trait.Iterator.html#method.filter_map)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980)[§](#method.enumerate-1)\n\nCreates an iterator which gives the current iteration count as well as the next value. [Read more](about:blank/iter/trait.Iterator.html#method.enumerate)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052)[§](#method.peekable-1)\n\nCreates an iterator which can use the [`peek`](about:blank/iter/struct.Peekable.html#method.peek \"method std::iter::Peekable::peek\") and [`peek_mut`](about:blank/iter/struct.Peekable.html#method.peek_mut \"method std::iter::Peekable::peek_mut\") methods to look at the next element of the iterator without consuming it. See their documentation for more information. [Read more](about:blank/iter/trait.Iterator.html#method.peekable)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119)[§](#method.skip_while-1)\n\nCreates an iterator that [`skip`](about:blank/iter/trait.Iterator.html#method.skip \"method std::iter::Iterator::skip\")s elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.skip_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201)[§](#method.take_while-1)\n\nCreates an iterator that yields elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.take_while)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290)[§](#method.map_while-1)\n\nCreates an iterator that both yields elements based on a predicate and maps. [Read more](about:blank/iter/trait.Iterator.html#method.map_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319)[§](#method.skip-1)\n\nCreates an iterator that skips the first `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.skip)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373)[§](#method.take-1)\n\nCreates an iterator that yields the first `n` elements, or fewer if the underlying iterator ends sooner. [Read more](about:blank/iter/trait.Iterator.html#method.take)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422)[§](#method.scan-1)\n\nAn iterator adapter which, like [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), holds internal state, but unlike [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), produces a new iterator. [Read more](about:blank/iter/trait.Iterator.html#method.scan)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462)[§](#method.flat_map-1)\n\nCreates an iterator that works like map, but flattens nested structure. [Read more](about:blank/iter/trait.Iterator.html#method.flat_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703)[§](#method.map_windows-1)\n\n🔬This is a nightly-only experimental API. (`iter_map_windows` [#87155](https://github.com/rust-lang/rust/issues/87155))\n\nCalls the given function `f` for each contiguous window of size `N` over `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`](about:blank/primitive.slice.html#method.windows \"method slice::windows\"), the windows during mapping overlap as well. [Read more](about:blank/iter/trait.Iterator.html#method.map_windows)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769)[§](#method.fuse-1)\n\nCreates an iterator which ends after the first [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"). [Read more](about:blank/iter/trait.Iterator.html#method.fuse)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855)[§](#method.inspect-1)\n\nDoes something with each element of an iterator, passing the value on. [Read more](about:blank/iter/trait.Iterator.html#method.inspect)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883)[§](#method.by_ref-1)\n\nBorrows an iterator, rather than consuming it. [Read more](about:blank/iter/trait.Iterator.html#method.by_ref)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003)[§](#method.collect-1)\n\nTransforms an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156)[§](#method.collect_into-1)\n\n🔬This is a nightly-only experimental API. (`iter_collect_into` [#94780](https://github.com/rust-lang/rust/issues/94780))\n\nCollects all the items from an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect_into)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191)[§](#method.partition-1)\n\nConsumes an iterator, creating two collections from it. [Read more](about:blank/iter/trait.Iterator.html#method.partition)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311)[§](#method.is_partitioned-1)\n\n🔬This is a nightly-only experimental API. (`iter_is_partitioned` [#62544](https://github.com/rust-lang/rust/issues/62544))\n\nChecks if the elements of this iterator are partitioned according to the given predicate, such that all those that return `true` precede all those that return `false`. [Read more](about:blank/iter/trait.Iterator.html#method.is_partitioned)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407)[§](#method.try_fold-1)\n\nAn iterator method that applies a function as long as it returns successfully, producing a single, final value. [Read more](about:blank/iter/trait.Iterator.html#method.try_fold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466)[§](#method.try_for_each-1)\n\nAn iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. [Read more](about:blank/iter/trait.Iterator.html#method.try_for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585)[§](#method.fold-1)\n\nFolds every element into an accumulator by applying an operation, returning the final result. [Read more](about:blank/iter/trait.Iterator.html#method.fold)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623)[§](#method.reduce-1)\n\nReduces the elements to a single one, by repeatedly applying a reducing operation. [Read more](about:blank/iter/trait.Iterator.html#method.reduce)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697)[§](#method.try_reduce-1)\n\n🔬This is a nightly-only experimental API. (`iterator_try_reduce` [#87053](https://github.com/rust-lang/rust/issues/87053))\n\nReduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. [Read more](about:blank/iter/trait.Iterator.html#method.try_reduce)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753)[§](#method.all-1)\n\nTests if every element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.all)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807)[§](#method.any-1)\n\nTests if any element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.any)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871)[§](#method.find-1)\n\nSearches for an element of an iterator that satisfies a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.find)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903)[§](#method.find_map-1)\n\nApplies function to the elements of iterator and returns the first non-none result. [Read more](about:blank/iter/trait.Iterator.html#method.find_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964)[§](#method.try_find-1)\n\n🔬This is a nightly-only experimental API. (`try_find` [#63178](https://github.com/rust-lang/rust/issues/63178))\n\nApplies function to the elements of iterator and returns the first true result or the first error. [Read more](about:blank/iter/trait.Iterator.html#method.try_find)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045)[§](#method.position-1)\n\nSearches for an element in an iterator, returning its index. [Read more](about:blank/iter/trait.Iterator.html#method.position)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220)[§](#method.max_by_key-1)\n\nReturns the element that gives the maximum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254)[§](#method.max_by-1)\n\nReturns the element that gives the maximum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282)[§](#method.min_by_key-1)\n\nReturns the element that gives the minimum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316)[§](#method.min_by-1)\n\nReturns the element that gives the minimum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546)[§](#method.array_chunks-1)\n\n🔬This is a nightly-only experimental API. (`iter_array_chunks` [#100450](https://github.com/rust-lang/rust/issues/100450))\n\nReturns an iterator over `N` elements of the iterator at a time. [Read more](about:blank/iter/trait.Iterator.html#method.array_chunks)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579)[§](#method.sum-1)\n\nSums the elements of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.sum)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612)[§](#method.product-1)\n\nIterates over the entire iterator, multiplying all the elements [Read more](about:blank/iter/trait.Iterator.html#method.product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663)[§](#method.cmp_by-1)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720)[§](#method.partial_cmp-2)\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the [`PartialOrd`](../cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\") elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757)[§](#method.partial_cmp_by-1)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791)[§](#method.eq-2)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.eq)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815)[§](#method.eq_by-1)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another with respect to the specified equality function. [Read more](about:blank/iter/trait.Iterator.html#method.eq_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848)[§](#method.ne-2)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are not equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.ne)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870)[§](#method.lt-2)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892)[§](#method.le-2)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914)[§](#method.gt-2)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936)[§](#method.ge-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996)[§](#method.is_sorted_by-1)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given comparator function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044)[§](#method.is_sorted_by_key-1)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given key extraction function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by_key)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2127)[§](#impl-Iterator-for-Box%3C%5BI%5D,+A%3E)\n\nThis implementation is required to make sure that the `Box<[I]>: IntoIterator` implementation doesn’t overlap with `IntoIterator for T where T: Iterator` blanket.\n\n[§](#associatedtype.Item-3)\n\nThe type of the elements being iterated over.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80)[§](#tymethod.next-2)\n\nAdvances the iterator and returns the next value. [Read more](about:blank/iter/trait.Iterator.html#tymethod.next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119)[§](#method.next_chunk-3)\n\n🔬This is a nightly-only experimental API. (`iter_next_chunk` [#98326](https://github.com/rust-lang/rust/issues/98326))\n\nAdvances the iterator and returns an array containing the next `N` values. [Read more](about:blank/iter/trait.Iterator.html#method.next_chunk)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193)[§](#method.size_hint-3)\n\nReturns the bounds on the remaining length of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.size_hint)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231)[§](#method.count-3)\n\nConsumes the iterator, counting the number of iterations and returning it. [Read more](about:blank/iter/trait.Iterator.html#method.count)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260)[§](#method.last-3)\n\nConsumes the iterator, returning the last element. [Read more](about:blank/iter/trait.Iterator.html#method.last)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306)[§](#method.advance_by-3)\n\n🔬This is a nightly-only experimental API. (`iter_advance_by` [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator by `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.advance_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358)[§](#method.nth-3)\n\nReturns the `n`th element of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.nth)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411)[§](#method.step_by-3)\n\nCreates an iterator starting at the same point, but stepping by the given amount at each iteration. [Read more](about:blank/iter/trait.Iterator.html#method.step_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484)[§](#method.chain-3)\n\nTakes two iterators and creates a new iterator over both in sequence. [Read more](about:blank/iter/trait.Iterator.html#method.chain)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603)[§](#method.zip-3)\n\n‘Zips up’ two iterators into a single iterator of pairs. [Read more](about:blank/iter/trait.Iterator.html#method.zip)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705)[§](#method.intersperse_with-3)\n\n🔬This is a nightly-only experimental API. (`iter_intersperse` [#79524](https://github.com/rust-lang/rust/issues/79524))\n\nCreates a new iterator which places an item generated by `separator` between adjacent items of the original iterator. [Read more](about:blank/iter/trait.Iterator.html#method.intersperse_with)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765)[§](#method.map-3)\n\nTakes a closure and creates an iterator which calls that closure on each element. [Read more](about:blank/iter/trait.Iterator.html#method.map)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811)[§](#method.for_each-3)\n\nCalls a closure on each element of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887)[§](#method.filter-3)\n\nCreates an iterator which uses a closure to determine if an element should be yielded. [Read more](about:blank/iter/trait.Iterator.html#method.filter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933)[§](#method.filter_map-3)\n\nCreates an iterator that both filters and maps. [Read more](about:blank/iter/trait.Iterator.html#method.filter_map)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980)[§](#method.enumerate-3)\n\nCreates an iterator which gives the current iteration count as well as the next value. [Read more](about:blank/iter/trait.Iterator.html#method.enumerate)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052)[§](#method.peekable-3)\n\nCreates an iterator which can use the [`peek`](about:blank/iter/struct.Peekable.html#method.peek \"method std::iter::Peekable::peek\") and [`peek_mut`](about:blank/iter/struct.Peekable.html#method.peek_mut \"method std::iter::Peekable::peek_mut\") methods to look at the next element of the iterator without consuming it. See their documentation for more information. [Read more](about:blank/iter/trait.Iterator.html#method.peekable)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119)[§](#method.skip_while-3)\n\nCreates an iterator that [`skip`](about:blank/iter/trait.Iterator.html#method.skip \"method std::iter::Iterator::skip\")s elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.skip_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201)[§](#method.take_while-3)\n\nCreates an iterator that yields elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.take_while)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290)[§](#method.map_while-3)\n\nCreates an iterator that both yields elements based on a predicate and maps. [Read more](about:blank/iter/trait.Iterator.html#method.map_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319)[§](#method.skip-3)\n\nCreates an iterator that skips the first `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.skip)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373)[§](#method.take-3)\n\nCreates an iterator that yields the first `n` elements, or fewer if the underlying iterator ends sooner. [Read more](about:blank/iter/trait.Iterator.html#method.take)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422)[§](#method.scan-3)\n\nAn iterator adapter which, like [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), holds internal state, but unlike [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), produces a new iterator. [Read more](about:blank/iter/trait.Iterator.html#method.scan)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462)[§](#method.flat_map-3)\n\nCreates an iterator that works like map, but flattens nested structure. [Read more](about:blank/iter/trait.Iterator.html#method.flat_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703)[§](#method.map_windows-3)\n\n🔬This is a nightly-only experimental API. (`iter_map_windows` [#87155](https://github.com/rust-lang/rust/issues/87155))\n\nCalls the given function `f` for each contiguous window of size `N` over `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`](about:blank/primitive.slice.html#method.windows \"method slice::windows\"), the windows during mapping overlap as well. [Read more](about:blank/iter/trait.Iterator.html#method.map_windows)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769)[§](#method.fuse-3)\n\nCreates an iterator which ends after the first [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"). [Read more](about:blank/iter/trait.Iterator.html#method.fuse)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855)[§](#method.inspect-3)\n\nDoes something with each element of an iterator, passing the value on. [Read more](about:blank/iter/trait.Iterator.html#method.inspect)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883)[§](#method.by_ref-3)\n\nBorrows an iterator, rather than consuming it. [Read more](about:blank/iter/trait.Iterator.html#method.by_ref)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003)[§](#method.collect-3)\n\nTransforms an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156)[§](#method.collect_into-3)\n\n🔬This is a nightly-only experimental API. (`iter_collect_into` [#94780](https://github.com/rust-lang/rust/issues/94780))\n\nCollects all the items from an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect_into)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191)[§](#method.partition-3)\n\nConsumes an iterator, creating two collections from it. [Read more](about:blank/iter/trait.Iterator.html#method.partition)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311)[§](#method.is_partitioned-3)\n\n🔬This is a nightly-only experimental API. (`iter_is_partitioned` [#62544](https://github.com/rust-lang/rust/issues/62544))\n\nChecks if the elements of this iterator are partitioned according to the given predicate, such that all those that return `true` precede all those that return `false`. [Read more](about:blank/iter/trait.Iterator.html#method.is_partitioned)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407)[§](#method.try_fold-3)\n\nAn iterator method that applies a function as long as it returns successfully, producing a single, final value. [Read more](about:blank/iter/trait.Iterator.html#method.try_fold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466)[§](#method.try_for_each-3)\n\nAn iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. [Read more](about:blank/iter/trait.Iterator.html#method.try_for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585)[§](#method.fold-3)\n\nFolds every element into an accumulator by applying an operation, returning the final result. [Read more](about:blank/iter/trait.Iterator.html#method.fold)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623)[§](#method.reduce-3)\n\nReduces the elements to a single one, by repeatedly applying a reducing operation. [Read more](about:blank/iter/trait.Iterator.html#method.reduce)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697)[§](#method.try_reduce-3)\n\n🔬This is a nightly-only experimental API. (`iterator_try_reduce` [#87053](https://github.com/rust-lang/rust/issues/87053))\n\nReduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. [Read more](about:blank/iter/trait.Iterator.html#method.try_reduce)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753)[§](#method.all-3)\n\nTests if every element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.all)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807)[§](#method.any-3)\n\nTests if any element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.any)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871)[§](#method.find-3)\n\nSearches for an element of an iterator that satisfies a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.find)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903)[§](#method.find_map-3)\n\nApplies function to the elements of iterator and returns the first non-none result. [Read more](about:blank/iter/trait.Iterator.html#method.find_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964)[§](#method.try_find-3)\n\n🔬This is a nightly-only experimental API. (`try_find` [#63178](https://github.com/rust-lang/rust/issues/63178))\n\nApplies function to the elements of iterator and returns the first true result or the first error. [Read more](about:blank/iter/trait.Iterator.html#method.try_find)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045)[§](#method.position-3)\n\nSearches for an element in an iterator, returning its index. [Read more](about:blank/iter/trait.Iterator.html#method.position)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220)[§](#method.max_by_key-3)\n\nReturns the element that gives the maximum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254)[§](#method.max_by-3)\n\nReturns the element that gives the maximum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282)[§](#method.min_by_key-3)\n\nReturns the element that gives the minimum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316)[§](#method.min_by-3)\n\nReturns the element that gives the minimum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546)[§](#method.array_chunks-3)\n\n🔬This is a nightly-only experimental API. (`iter_array_chunks` [#100450](https://github.com/rust-lang/rust/issues/100450))\n\nReturns an iterator over `N` elements of the iterator at a time. [Read more](about:blank/iter/trait.Iterator.html#method.array_chunks)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579)[§](#method.sum-3)\n\nSums the elements of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.sum)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612)[§](#method.product-3)\n\nIterates over the entire iterator, multiplying all the elements [Read more](about:blank/iter/trait.Iterator.html#method.product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663)[§](#method.cmp_by-3)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720)[§](#method.partial_cmp-4)\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the [`PartialOrd`](../cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\") elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757)[§](#method.partial_cmp_by-3)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791)[§](#method.eq-4)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.eq)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815)[§](#method.eq_by-3)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another with respect to the specified equality function. [Read more](about:blank/iter/trait.Iterator.html#method.eq_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848)[§](#method.ne-4)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are not equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.ne)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870)[§](#method.lt-4)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892)[§](#method.le-4)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914)[§](#method.gt-4)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936)[§](#method.ge-4)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996)[§](#method.is_sorted_by-3)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given comparator function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044)[§](#method.is_sorted_by_key-3)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given key extraction function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by_key)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1994)[§](#impl-Iterator-for-Box%3CI,+A%3E)\n\n[§](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1996)[§](#method.next)\n\nAdvances the iterator and returns the next value. [Read more](about:blank/iter/trait.Iterator.html#tymethod.next)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1999)[§](#method.size_hint-2)\n\nReturns the bounds on the remaining length of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.size_hint)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2002)[§](#method.nth-2)\n\nReturns the `n`th element of the iterator. [Read more](about:blank/iter/trait.Iterator.html#method.nth)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2005)[§](#method.last-2)\n\nConsumes the iterator, returning the last element. [Read more](about:blank/iter/trait.Iterator.html#method.last)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119)[§](#method.next_chunk-2)\n\n🔬This is a nightly-only experimental API. (`iter_next_chunk` [#98326](https://github.com/rust-lang/rust/issues/98326))\n\nAdvances the iterator and returns an array containing the next `N` values. [Read more](about:blank/iter/trait.Iterator.html#method.next_chunk)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231)[§](#method.count-2)\n\nConsumes the iterator, counting the number of iterations and returning it. [Read more](about:blank/iter/trait.Iterator.html#method.count)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306)[§](#method.advance_by-2)\n\n🔬This is a nightly-only experimental API. (`iter_advance_by` [#77404](https://github.com/rust-lang/rust/issues/77404))\n\nAdvances the iterator by `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.advance_by)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411)[§](#method.step_by-2)\n\nCreates an iterator starting at the same point, but stepping by the given amount at each iteration. [Read more](about:blank/iter/trait.Iterator.html#method.step_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484)[§](#method.chain-2)\n\nTakes two iterators and creates a new iterator over both in sequence. [Read more](about:blank/iter/trait.Iterator.html#method.chain)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603)[§](#method.zip-2)\n\n‘Zips up’ two iterators into a single iterator of pairs. [Read more](about:blank/iter/trait.Iterator.html#method.zip)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705)[§](#method.intersperse_with-2)\n\n🔬This is a nightly-only experimental API. (`iter_intersperse` [#79524](https://github.com/rust-lang/rust/issues/79524))\n\nCreates a new iterator which places an item generated by `separator` between adjacent items of the original iterator. [Read more](about:blank/iter/trait.Iterator.html#method.intersperse_with)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765)[§](#method.map-2)\n\nTakes a closure and creates an iterator which calls that closure on each element. [Read more](about:blank/iter/trait.Iterator.html#method.map)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811)[§](#method.for_each-2)\n\nCalls a closure on each element of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887)[§](#method.filter-2)\n\nCreates an iterator which uses a closure to determine if an element should be yielded. [Read more](about:blank/iter/trait.Iterator.html#method.filter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933)[§](#method.filter_map-2)\n\nCreates an iterator that both filters and maps. [Read more](about:blank/iter/trait.Iterator.html#method.filter_map)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980)[§](#method.enumerate-2)\n\nCreates an iterator which gives the current iteration count as well as the next value. [Read more](about:blank/iter/trait.Iterator.html#method.enumerate)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052)[§](#method.peekable-2)\n\nCreates an iterator which can use the [`peek`](about:blank/iter/struct.Peekable.html#method.peek \"method std::iter::Peekable::peek\") and [`peek_mut`](about:blank/iter/struct.Peekable.html#method.peek_mut \"method std::iter::Peekable::peek_mut\") methods to look at the next element of the iterator without consuming it. See their documentation for more information. [Read more](about:blank/iter/trait.Iterator.html#method.peekable)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119)[§](#method.skip_while-2)\n\nCreates an iterator that [`skip`](about:blank/iter/trait.Iterator.html#method.skip \"method std::iter::Iterator::skip\")s elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.skip_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201)[§](#method.take_while-2)\n\nCreates an iterator that yields elements based on a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.take_while)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290)[§](#method.map_while-2)\n\nCreates an iterator that both yields elements based on a predicate and maps. [Read more](about:blank/iter/trait.Iterator.html#method.map_while)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319)[§](#method.skip-2)\n\nCreates an iterator that skips the first `n` elements. [Read more](about:blank/iter/trait.Iterator.html#method.skip)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373)[§](#method.take-2)\n\nCreates an iterator that yields the first `n` elements, or fewer if the underlying iterator ends sooner. [Read more](about:blank/iter/trait.Iterator.html#method.take)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422)[§](#method.scan-2)\n\nAn iterator adapter which, like [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), holds internal state, but unlike [`fold`](about:blank/iter/trait.Iterator.html#method.fold \"method std::iter::Iterator::fold\"), produces a new iterator. [Read more](about:blank/iter/trait.Iterator.html#method.scan)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462)[§](#method.flat_map-2)\n\nCreates an iterator that works like map, but flattens nested structure. [Read more](about:blank/iter/trait.Iterator.html#method.flat_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703)[§](#method.map_windows-2)\n\n🔬This is a nightly-only experimental API. (`iter_map_windows` [#87155](https://github.com/rust-lang/rust/issues/87155))\n\nCalls the given function `f` for each contiguous window of size `N` over `self` and returns an iterator over the outputs of `f`. Like [`slice::windows()`](about:blank/primitive.slice.html#method.windows \"method slice::windows\"), the windows during mapping overlap as well. [Read more](about:blank/iter/trait.Iterator.html#method.map_windows)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769)[§](#method.fuse-2)\n\nCreates an iterator which ends after the first [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\"). [Read more](about:blank/iter/trait.Iterator.html#method.fuse)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855)[§](#method.inspect-2)\n\nDoes something with each element of an iterator, passing the value on. [Read more](about:blank/iter/trait.Iterator.html#method.inspect)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883)[§](#method.by_ref-2)\n\nBorrows an iterator, rather than consuming it. [Read more](about:blank/iter/trait.Iterator.html#method.by_ref)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003)[§](#method.collect-2)\n\nTransforms an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156)[§](#method.collect_into-2)\n\n🔬This is a nightly-only experimental API. (`iter_collect_into` [#94780](https://github.com/rust-lang/rust/issues/94780))\n\nCollects all the items from an iterator into a collection. [Read more](about:blank/iter/trait.Iterator.html#method.collect_into)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191)[§](#method.partition-2)\n\nConsumes an iterator, creating two collections from it. [Read more](about:blank/iter/trait.Iterator.html#method.partition)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311)[§](#method.is_partitioned-2)\n\n🔬This is a nightly-only experimental API. (`iter_is_partitioned` [#62544](https://github.com/rust-lang/rust/issues/62544))\n\nChecks if the elements of this iterator are partitioned according to the given predicate, such that all those that return `true` precede all those that return `false`. [Read more](about:blank/iter/trait.Iterator.html#method.is_partitioned)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407)[§](#method.try_fold-2)\n\nAn iterator method that applies a function as long as it returns successfully, producing a single, final value. [Read more](about:blank/iter/trait.Iterator.html#method.try_fold)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466)[§](#method.try_for_each-2)\n\nAn iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error. [Read more](about:blank/iter/trait.Iterator.html#method.try_for_each)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585)[§](#method.fold-2)\n\nFolds every element into an accumulator by applying an operation, returning the final result. [Read more](about:blank/iter/trait.Iterator.html#method.fold)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623)[§](#method.reduce-2)\n\nReduces the elements to a single one, by repeatedly applying a reducing operation. [Read more](about:blank/iter/trait.Iterator.html#method.reduce)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697)[§](#method.try_reduce-2)\n\n🔬This is a nightly-only experimental API. (`iterator_try_reduce` [#87053](https://github.com/rust-lang/rust/issues/87053))\n\nReduces the elements to a single one by repeatedly applying a reducing operation. If the closure returns a failure, the failure is propagated back to the caller immediately. [Read more](about:blank/iter/trait.Iterator.html#method.try_reduce)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753)[§](#method.all-2)\n\nTests if every element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.all)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807)[§](#method.any-2)\n\nTests if any element of the iterator matches a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.any)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871)[§](#method.find-2)\n\nSearches for an element of an iterator that satisfies a predicate. [Read more](about:blank/iter/trait.Iterator.html#method.find)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903)[§](#method.find_map-2)\n\nApplies function to the elements of iterator and returns the first non-none result. [Read more](about:blank/iter/trait.Iterator.html#method.find_map)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964)[§](#method.try_find-2)\n\n🔬This is a nightly-only experimental API. (`try_find` [#63178](https://github.com/rust-lang/rust/issues/63178))\n\nApplies function to the elements of iterator and returns the first true result or the first error. [Read more](about:blank/iter/trait.Iterator.html#method.try_find)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045)[§](#method.position-2)\n\nSearches for an element in an iterator, returning its index. [Read more](about:blank/iter/trait.Iterator.html#method.position)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220)[§](#method.max_by_key-2)\n\nReturns the element that gives the maximum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254)[§](#method.max_by-2)\n\nReturns the element that gives the maximum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.max_by)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282)[§](#method.min_by_key-2)\n\nReturns the element that gives the minimum value from the specified function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by_key)\n\n1.15.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316)[§](#method.min_by-2)\n\nReturns the element that gives the minimum value with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.min_by)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3388-3392)[§](#method.unzip)\n\nConverts an iterator of pairs into a pair of containers. [Read more](about:blank/iter/trait.Iterator.html#method.unzip)\n\n1.36.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3419-3422)[§](#method.copied)\n\nCreates an iterator which copies all of its elements. [Read more](about:blank/iter/trait.Iterator.html#method.copied)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3467-3470)[§](#method.cloned)\n\nCreates an iterator which [`clone`](about:blank/clone/trait.Clone.html#tymethod.clone \"method std::clone::Clone::clone\")s all of its elements. [Read more](about:blank/iter/trait.Iterator.html#method.cloned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546)[§](#method.array_chunks-2)\n\n🔬This is a nightly-only experimental API. (`iter_array_chunks` [#100450](https://github.com/rust-lang/rust/issues/100450))\n\nReturns an iterator over `N` elements of the iterator at a time. [Read more](about:blank/iter/trait.Iterator.html#method.array_chunks)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579)[§](#method.sum-2)\n\nSums the elements of an iterator. [Read more](about:blank/iter/trait.Iterator.html#method.sum)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612)[§](#method.product-2)\n\nIterates over the entire iterator, multiplying all the elements [Read more](about:blank/iter/trait.Iterator.html#method.product)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663)[§](#method.cmp_by-2)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720)[§](#method.partial_cmp-3)\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the [`PartialOrd`](../cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\") elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another. The comparison works like short-circuit evaluation, returning a result without comparing the remaining elements. As soon as an order can be determined, the evaluation stops and a result is returned. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757)[§](#method.partial_cmp_by-2)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\n[Lexicographically](about:blank/cmp/trait.Ord.html#lexicographical-comparison \"trait std::cmp::Ord\") compares the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") with those of another with respect to the specified comparison function. [Read more](about:blank/iter/trait.Iterator.html#method.partial_cmp_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791)[§](#method.eq-3)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.eq)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815)[§](#method.eq_by-2)\n\n🔬This is a nightly-only experimental API. (`iter_order_by` [#64295](https://github.com/rust-lang/rust/issues/64295))\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are equal to those of another with respect to the specified equality function. [Read more](about:blank/iter/trait.Iterator.html#method.eq_by)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848)[§](#method.ne-3)\n\nDetermines if the elements of this [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") are not equal to those of another. [Read more](about:blank/iter/trait.Iterator.html#method.ne)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870)[§](#method.lt-3)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892)[§](#method.le-3)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914)[§](#method.gt-3)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936)[§](#method.ge-3)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996)[§](#method.is_sorted_by-2)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given comparator function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044)[§](#method.is_sorted_by_key-2)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this iterator are sorted using the given key extraction function. [Read more](about:blank/iter/trait.Iterator.html#method.is_sorted_by_key)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1423)[§](#impl-Ord-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1389)[§](#impl-PartialEq-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1391)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1395)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1400)[§](#impl-PartialOrd-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1402)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1406)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1410)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1414)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1418)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1962)[§](#impl-Pointer-for-Box%3CT,+A%3E)\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#124-163)[§](#impl-Read-for-Box%3CR%3E)\n\n[source](about:blank/src/std/io/impls.rs.html#126-128)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/io/impls.rs.html#131-133)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/io/impls.rs.html#136-138)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/io/impls.rs.html#141-143)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n[source](about:blank/src/std/io/impls.rs.html#146-148)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/io/impls.rs.html#151-153)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n[source](about:blank/src/std/io/impls.rs.html#156-158)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/impls.rs.html#160-162)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref-5)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain-4)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take-4)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#197-207)[§](#impl-Seek-for-Box%3CS%3E)\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1715)[§](#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1727)[§](#method.try_from-1)\n\nAttempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n\nThe conversion occurs in-place and does not require a new memory allocation.\n\n##### [§](#errors-1)Errors\n\nReturns the old `Box<[T]>` in the `Err` variant if `boxed_slice.len()` does not equal `N`.\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n1.66.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738)[§](#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759)[§](#method.try_from)\n\nAttempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n\nLike [`Vec::into_boxed_slice`](about:blank/vec/struct.Vec.html#method.into_boxed_slice \"method std::vec::Vec::into_boxed_slice\"), this is in-place if `vec.capacity() == N`, but will require a reallocation otherwise.\n\n##### [§](#errors)Errors\n\nReturns the original `Vec<T>` in the `Err` variant if `boxed_slice.len()` does not equal `N`.\n\n##### [§](#examples-36)Examples\n\nThis can be used with [`vec!`](../macro.vec.html \"macro std::vec\") to create an array on the heap:\n\n```\nlet state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\nassert_eq!(state.len(), 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#165-195)[§](#impl-Write-for-Box%3CW%3E)\n\n[source](about:blank/src/std/io/impls.rs.html#167-169)[§](#method.write-2)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/impls.rs.html#172-174)[§](#method.write_vectored)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/impls.rs.html#177-179)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/impls.rs.html#182-184)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/impls.rs.html#187-189)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/impls.rs.html#192-194)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-4)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2108)[§](#impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1988)[§](#impl-DerefPure-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2114)[§](#impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1430)[§](#impl-Eq-for-Box%3CT,+A%3E)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2056)[§](#impl-FusedIterator-for-Box%3CI,+A%3E)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2303)[§](#impl-Unpin-for-Box%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[§](#method.from-34)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-35)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#156)[§](#impl-IntoAsyncIterator-for-I)\n\n[§](#associatedtype.Item-9)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of the item yielded by the iterator\n\n[§](#associatedtype.IntoAsyncIter)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nThe type of the resulting iterator\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#160)[§](#method.into_async_iter)\n\n🔬This is a nightly-only experimental API. (`async_iterator` [#79024](https://github.com/rust-lang/rust/issues/79024))\n\nConverts `self` into an async iterator\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138)[§](#impl-IntoFuture-for-F)\n\n[§](#associatedtype.Output-3)\n\nThe output that the future will produce on completion.\n\n[§](#associatedtype.IntoFuture)\n\nWhich kind of future are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142)[§](#method.into_future)\n\nCreates a future from a value. [Read more](about:blank/future/trait.IntoFuture.html#tymethod.into_future)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#350)[§](#impl-IntoIterator-for-I)\n\n[§](#associatedtype.Item-8)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-3)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#355)[§](#method.into_iter-3)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924)[§](#impl-Pattern%3C'a%3E-for-F)\n\n[§](#associatedtype.Searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nAssociated searcher for this pattern\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.into_searcher)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nConstructs the associated searcher from `self` and the `haystack` to search in.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_contained_in)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches anywhere in the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the front of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.strip_prefix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the front of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.is_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nChecks whether the pattern matches at the back of the haystack\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926)[§](#method.strip_suffix_of)\n\n🔬This is a nightly-only experimental API. (`pattern` [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nRemoves the pattern from the back of haystack, if it matches.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552)[§](#impl-ToString-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-3)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from-2)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A pointer type that uniquely owns a heap allocation of type `T`.\"><title>Box in std::boxed - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Box</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Box</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.allocator\">allocator</a></li><li><a href=\"#method.assume_init\">assume_init</a></li><li><a href=\"#method.assume_init-1\">assume_init</a></li><li><a href=\"#method.downcast\">downcast</a></li><li><a href=\"#method.downcast-1\">downcast</a></li><li><a href=\"#method.downcast-2\">downcast</a></li><li><a href=\"#method.downcast_unchecked\">downcast_unchecked</a></li><li><a href=\"#method.downcast_unchecked-1\">downcast_unchecked</a></li><li><a href=\"#method.downcast_unchecked-2\">downcast_unchecked</a></li><li><a href=\"#method.from_raw\">from_raw</a></li><li><a href=\"#method.from_raw_in\">from_raw_in</a></li><li><a href=\"#method.into_boxed_slice\">into_boxed_slice</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.into_pin\">into_pin</a></li><li><a href=\"#method.into_raw\">into_raw</a></li><li><a href=\"#method.into_raw_with_allocator\">into_raw_with_allocator</a></li><li><a href=\"#method.leak\">leak</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.new_uninit\">new_uninit</a></li><li><a href=\"#method.new_uninit_in\">new_uninit_in</a></li><li><a href=\"#method.new_uninit_slice\">new_uninit_slice</a></li><li><a href=\"#method.new_uninit_slice_in\">new_uninit_slice_in</a></li><li><a href=\"#method.new_zeroed\">new_zeroed</a></li><li><a href=\"#method.new_zeroed_in\">new_zeroed_in</a></li><li><a href=\"#method.new_zeroed_slice\">new_zeroed_slice</a></li><li><a href=\"#method.new_zeroed_slice_in\">new_zeroed_slice_in</a></li><li><a href=\"#method.pin\">pin</a></li><li><a href=\"#method.pin_in\">pin_in</a></li><li><a href=\"#method.try_new\">try_new</a></li><li><a href=\"#method.try_new_in\">try_new_in</a></li><li><a href=\"#method.try_new_uninit\">try_new_uninit</a></li><li><a href=\"#method.try_new_uninit_in\">try_new_uninit_in</a></li><li><a href=\"#method.try_new_uninit_slice\">try_new_uninit_slice</a></li><li><a href=\"#method.try_new_zeroed\">try_new_zeroed</a></li><li><a href=\"#method.try_new_zeroed_in\">try_new_zeroed_in</a></li><li><a href=\"#method.try_new_zeroed_slice\">try_new_zeroed_slice</a></li><li><a href=\"#method.write\">write</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Iterator-for-%26Box%3C%5BI%5D,+A%3E\">!Iterator</a></li><li><a href=\"#impl-Iterator-for-%26mut+Box%3C%5BI%5D,+A%3E\">!Iterator</a></li><li><a href=\"#impl-Iterator-for-Box%3C%5BI%5D,+A%3E\">!Iterator</a></li><li><a href=\"#impl-AsFd-for-Box%3CT%3E\">AsFd</a></li><li><a href=\"#impl-AsHandle-for-Box%3CT%3E\">AsHandle</a></li><li><a href=\"#impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\">AsMut&lt;T&gt;</a></li><li><a href=\"#impl-AsRawFd-for-Box%3CT%3E\">AsRawFd</a></li><li><a href=\"#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\">AsRef&lt;T&gt;</a></li><li><a href=\"#impl-AsSocket-for-Box%3CT%3E\">AsSocket</a></li><li><a href=\"#impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E\">AsyncFn&lt;Args&gt;</a></li><li><a href=\"#impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E\">AsyncFnMut&lt;Args&gt;</a></li><li><a href=\"#impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\">AsyncFnOnce&lt;Args&gt;</a></li><li><a href=\"#impl-AsyncIterator-for-Box%3CS%3E\">AsyncIterator</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-BufRead-for-Box%3CB%3E\">BufRead</a></li><li><a href=\"#impl-Clone-for-Box%3C%5BT%5D,+A%3E\">Clone</a></li><li><a href=\"#impl-Clone-for-Box%3CCStr%3E\">Clone</a></li><li><a href=\"#impl-Clone-for-Box%3COsStr%3E\">Clone</a></li><li><a href=\"#impl-Clone-for-Box%3CPath%3E\">Clone</a></li><li><a href=\"#impl-Clone-for-Box%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-Clone-for-Box%3Cstr%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\">CoerceUnsized&lt;Box&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\">Coroutine&lt;R&gt;</a></li><li><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\">Coroutine&lt;R&gt;</a></li><li><a href=\"#impl-Debug-for-Box%3CT,+A%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Box%3C%5BT%5D%3E\">Default</a></li><li><a href=\"#impl-Default-for-Box%3CCStr%3E\">Default</a></li><li><a href=\"#impl-Default-for-Box%3COsStr%3E\">Default</a></li><li><a href=\"#impl-Default-for-Box%3CT%3E\">Default</a></li><li><a href=\"#impl-Default-for-Box%3Cstr%3E\">Default</a></li><li><a href=\"#impl-Deref-for-Box%3CT,+A%3E\">Deref</a></li><li><a href=\"#impl-DerefMut-for-Box%3CT,+A%3E\">DerefMut</a></li><li><a href=\"#impl-DerefPure-for-Box%3CT,+A%3E\">DerefPure</a></li><li><a href=\"#impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\">DispatchFromDyn&lt;Box&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Display-for-Box%3CT,+A%3E\">Display</a></li><li><a href=\"#impl-DoubleEndedIterator-for-Box%3CI,+A%3E\">DoubleEndedIterator</a></li><li><a href=\"#impl-Drop-for-Box%3CT,+A%3E\">Drop</a></li><li><a href=\"#impl-Eq-for-Box%3CT,+A%3E\">Eq</a></li><li><a href=\"#impl-Error-for-Box%3CT%3E\">Error</a></li><li><a href=\"#impl-ExactSizeIterator-for-Box%3CI,+A%3E\">ExactSizeIterator</a></li><li><a href=\"#impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String\">Extend&lt;Box&lt;str, A&gt;&gt;</a></li><li><a href=\"#impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\">Fn&lt;Args&gt;</a></li><li><a href=\"#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\">FnMut&lt;Args&gt;</a></li><li><a href=\"#impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\">FnOnce&lt;Args&gt;</a></li><li><a href=\"#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\">From&lt;&amp;CStr&gt;</a></li><li><a href=\"#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\">From&lt;&amp;OsStr&gt;</a></li><li><a href=\"#impl-From%3C%26Path%3E-for-Box%3CPath%3E\">From&lt;&amp;Path&gt;</a></li><li><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E\">From&lt;&amp;[T]&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Box%3Cstr%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3CBox%3CCStr%3E%3E-for-CString\">From&lt;Box&lt;CStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3COsStr%3E%3E-for-OsString\">From&lt;Box&lt;OsStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3CPath%3E%3E-for-PathBuf\">From&lt;Box&lt;Path&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E\">From&lt;Box&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\">From&lt;Box&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Rc%3CT,+A%3E\">From&lt;Box&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\">From&lt;Box&lt;[T], A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E\">From&lt;Box&lt;str, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3Cstr%3E%3E-for-String\">From&lt;Box&lt;str&gt;&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\">From&lt;Cow&lt;'_, CStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\">From&lt;Cow&lt;'_, OsStr&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+Path%3E%3E-for-Box%3CPath%3E\">From&lt;Cow&lt;'_, Path&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E\">From&lt;Cow&lt;'_, [T]&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\">From&lt;Cow&lt;'_, str&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error%3E\">From&lt;Cow&lt;'b, str&gt;&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\">From&lt;Cow&lt;'b, str&gt;&gt;</a></li><li><a href=\"#impl-From%3CE%3E-for-Box%3Cdyn+Error%3E\">From&lt;E&gt;</a></li><li><a href=\"#impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\">From&lt;E&gt;</a></li><li><a href=\"#impl-From%3COsString%3E-for-Box%3COsStr%3E\">From&lt;OsString&gt;</a></li><li><a href=\"#impl-From%3CPathBuf%3E-for-Box%3CPath%3E\">From&lt;PathBuf&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-Box%3Cdyn+Error%3E\">From&lt;String&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\">From&lt;String&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-Box%3Cstr%3E\">From&lt;String&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-Box%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\">FromIterator&lt;&amp;'a char&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\">FromIterator&lt;&amp;'a str&gt;</a></li><li><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\">FromIterator&lt;Box&lt;str, A&gt;&gt;</a></li><li><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\">FromIterator&lt;Box&lt;str, A&gt;&gt;</a></li><li><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\">FromIterator&lt;Cow&lt;'a, str&gt;&gt;</a></li><li><a href=\"#impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E\">FromIterator&lt;I&gt;</a></li><li><a href=\"#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\">FromIterator&lt;String&gt;</a></li><li><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\">FromIterator&lt;char&gt;</a></li><li><a href=\"#impl-FusedIterator-for-Box%3CI,+A%3E\">FusedIterator</a></li><li><a href=\"#impl-Future-for-Box%3CF,+A%3E\">Future</a></li><li><a href=\"#impl-Hash-for-Box%3CT,+A%3E\">Hash</a></li><li><a href=\"#impl-Hasher-for-Box%3CT,+A%3E\">Hasher</a></li><li><a href=\"#impl-IntoIterator-for-%26Box%3C%5BI%5D,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+Box%3C%5BI%5D,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-Iterator-for-Box%3CI,+A%3E\">Iterator</a></li><li><a href=\"#impl-Ord-for-Box%3CT,+A%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-Box%3CT,+A%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Box%3CT,+A%3E\">PartialOrd</a></li><li><a href=\"#impl-Pointer-for-Box%3CT,+A%3E\">Pointer</a></li><li><a href=\"#impl-Read-for-Box%3CR%3E\">Read</a></li><li><a href=\"#impl-Seek-for-Box%3CS%3E\">Seek</a></li><li><a href=\"#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\">TryFrom&lt;Box&lt;[T]&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\">TryFrom&lt;Vec&lt;T&gt;&gt;</a></li><li><a href=\"#impl-Unpin-for-Box%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-Write-for-Box%3CW%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Box%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Box%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Box%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Box%3CT,+A%3E\">Sync</a></li><li><a href=\"#impl-UnwindSafe-for-Box%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-IntoAsyncIterator-for-I\">IntoAsyncIterator</a></li><li><a href=\"#impl-IntoFuture-for-F\">IntoFuture</a></li><li><a href=\"#impl-IntoIterator-for-I\">IntoIterator</a></li><li><a href=\"#impl-Pattern%3C'a%3E-for-F\">Pattern&lt;'a&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::boxed</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Box.html\">Box</a></li><li><a href=\"struct.ThinBox.html\">ThinBox</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">boxed</a>::<wbr><a class=\"struct\" href=\"#\">Box</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#237-240\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Box&lt;T, A = <a class=\"struct\" href=\"../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;(<span class=\"comment\">/* private fields */</span>)\n<span class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span>;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A pointer type that uniquely owns a heap allocation of type <code>T</code>.</p>\n<p>See the <a href=\"../../std/boxed/index.html\">module-level documentation</a> for more.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#242\">source</a><a href=\"#impl-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#257\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(x: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocates memory on the heap and then places <code>x</code> into it.</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>five = Box::new(<span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+five+=+Box::new(5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_uninit\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#284\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_uninit\" class=\"fn\">new_uninit</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::new_uninit();\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::new_uninit();%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_zeroed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#310\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_zeroed\" class=\"fn\">new_zeroed</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes.</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span>zero = Box::&lt;u32&gt;::new_zeroed();\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+zero+=+Box::%3Cu32%3E::new_zeroed();%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#325\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pin\" class=\"fn\">pin</a>(x: T) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then\n<code>x</code> will be pinned in memory and unable to be moved.</p>\n<p>Constructing and pinning of the <code>Box</code> can also be done in two steps: <code>Box::pin(x)</code>\ndoes the same as <code><a href=\"struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\">Box::into_pin</a>(<a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\">Box::new</a>(x))</code>. Consider using\n<a href=\"struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\"><code>into_pin</code></a> if you already have a <code>Box&lt;T&gt;</code>, or if you want to\nconstruct a (pinned) <code>Box</code> in a different way than with <a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\"><code>Box::new</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#344\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new\" class=\"fn\">try_new</a>(x: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Allocates memory on the heap then places <code>x</code> into it,\nreturning an error if the allocation fails</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">let </span>five = Box::try_new(<span class=\"number\">5</span>)<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+five+=+Box::try_new(5)?;%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_uninit\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#371\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_uninit\" class=\"fn\">try_new_uninit</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents on the heap,\nreturning an error if the allocation fails</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::try_new_uninit()<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::try_new_uninit()?;%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_zeroed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#397\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_zeroed\" class=\"fn\">try_new_zeroed</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes on the heap</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">let </span>zero = Box::&lt;u32&gt;::try_new_zeroed()<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+zero+=+Box::%3Cu32%3E::try_new_zeroed()?;%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#402\">source</a><a href=\"#impl-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#420-422\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(x: T, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it.</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::new_in(<span class=\"number\">5</span>, System);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+five+=+Box::new_in(5,+System);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#448-450\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_in\" class=\"fn\">try_new_in</a>(x: T, alloc: A) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Allocates memory in the given allocator then places <code>x</code> into it,\nreturning an error if the allocation fails</p>\n<p>This doesn’t actually allocate if <code>T</code> is zero-sized.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>five = Box::try_new_in(<span class=\"number\">5</span>, System)<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+five+=+Box::try_new_in(5,+System)?;%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_uninit_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#483-485\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_uninit_in\" class=\"fn\">new_uninit_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_uninit_in(System);\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+five+=+Box::%3Cu32,+_%3E::new_uninit_in(System);%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_uninit_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#520-522\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_uninit_in\" class=\"fn\">try_new_uninit_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new box with uninitialized contents in the provided allocator,\nreturning an error if the allocation fails</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_uninit_in(System)<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">let </span>five = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+five+=+Box::%3Cu32,+_%3E::try_new_uninit_in(System)?;%0A++++%0A++++let+five+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_zeroed_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#557-559\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_zeroed_in\" class=\"fn\">new_zeroed_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator.</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::new_zeroed_in(System);\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+zero+=+Box::%3Cu32,+_%3E::new_zeroed_in(System);%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_zeroed_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#594-596\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_zeroed_in\" class=\"fn\">try_new_zeroed_in</a>(alloc: A) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Box</code> with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes in the provided allocator,\nreturning an error if the allocation fails,</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>zero = Box::&lt;u32, <span class=\"kw\">_</span>&gt;::try_new_zeroed_in(System)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>zero = <span class=\"kw\">unsafe </span>{ zero.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>zero, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+zero+=+Box::%3Cu32,+_%3E::try_new_zeroed_in(System)?;%0A++++let+zero+=+unsafe+%7B+zero.assume_init()+%7D;%0A++++%0A++++assert_eq!(*zero,+0);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pin_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#618-620\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.pin_in\" class=\"fn\">pin_in</a>(x: T, alloc: A) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static + <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then\n<code>x</code> will be pinned in memory and unable to be moved.</p>\n<p>Constructing and pinning of the <code>Box</code> can also be done in two steps: <code>Box::pin_in(x, alloc)</code>\ndoes the same as <code><a href=\"struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\">Box::into_pin</a>(<a href=\"struct.Box.html#method.new_in\" title=\"associated function std::boxed::Box::new_in\">Box::new_in</a>(x, alloc))</code>. Consider using\n<a href=\"struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\"><code>into_pin</code></a> if you already have a <code>Box&lt;T, A&gt;</code>, or if you want to\nconstruct a (pinned) <code>Box</code> in a different way than with <a href=\"struct.Box.html#method.new_in\" title=\"associated function std::boxed::Box::new_in\"><code>Box::new_in</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_boxed_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#629\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_into_boxed_slice</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71582\">#71582</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#647\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>box_into_inner</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/80437\">#80437</a>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning the wrapped value.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(box_into_inner)]\n\n</span><span class=\"kw\">let </span>c = Box::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Box::into_inner(c), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(box_into_inner)%5D%0A%0Afn+main()+%7B%0A++++let+c+=+Box::new(5);%0A++++%0A++++assert_eq!(Box::into_inner(c),+5);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3C%5BT%5D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#652\">source</a><a href=\"#impl-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_uninit_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#676\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_uninit_slice\" class=\"fn\">new_uninit_slice</a>(len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32]&gt;::new_uninit_slice(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::new_uninit_slice(3);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_zeroed_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#701\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_zeroed_slice\" class=\"fn\">new_zeroed_slice</a>(len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes.</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span>values = Box::&lt;[u32]&gt;::new_zeroed_slice(<span class=\"number\">3</span>);\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{ values.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+values+=+Box::%3C%5Bu32%5D%3E::new_zeroed_slice(3);%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_uninit_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#727\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_uninit_slice\" class=\"fn\">try_new_uninit_slice</a>(\n    len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents. Returns an error if\nthe allocation fails</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32]&gt;::try_new_uninit_slice(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::try_new_uninit_slice(3)?;%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_new_zeroed_slice\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#761\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_new_zeroed_slice\" class=\"fn\">try_new_zeroed_slice</a>(\n    len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]&gt;, <a class=\"struct\" href=\"../alloc/struct.AllocError.html\" title=\"struct std::alloc::AllocError\">AllocError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with <code>0</code> bytes. Returns an error if the allocation fails</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">let </span>values = Box::&lt;[u32]&gt;::try_new_zeroed_slice(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{ values.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++let+values+=+Box::%3C%5Bu32%5D%3E::try_new_zeroed_slice(3)?;%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D);%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#775\">source</a><a href=\"#impl-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_uninit_slice_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#802\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_uninit_slice_in\" class=\"fn\">new_uninit_slice_in</a>(len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents in the provided allocator.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32], <span class=\"kw\">_</span>&gt;::new_uninit_slice_in(<span class=\"number\">3</span>, System);\n\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+values+=+Box::%3C%5Bu32%5D,+_%3E::new_uninit_slice_in(3,+System);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_zeroed_slice_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#830\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new_zeroed_slice_in\" class=\"fn\">new_zeroed_slice_in</a>(len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new boxed slice with uninitialized contents in the provided allocator,\nwith the memory being filled with <code>0</code> bytes.</p>\n<p>See <a href=\"../mem/union.MaybeUninit.html#method.zeroed\" title=\"associated function std::mem::MaybeUninit::zeroed\"><code>MaybeUninit::zeroed</code></a> for examples of correct and incorrect usage\nof this method.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, new_uninit)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>values = Box::&lt;[u32], <span class=\"kw\">_</span>&gt;::new_zeroed_slice_in(<span class=\"number\">3</span>, System);\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{ values.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>])</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+new_uninit)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+values+=+Box::%3C%5Bu32%5D,+_%3E::new_zeroed_slice_in(3,+System);%0A++++let+values+=+unsafe+%7B+values.assume_init()+%7D;%0A++++%0A++++assert_eq!(*values,+%5B0,+0,+0%5D)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3CMaybeUninit%3CT%3E,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#835\">source</a><a href=\"#impl-Box%3CMaybeUninit%3CT%3E,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.assume_init\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#866\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.assume_init\" class=\"fn\">assume_init</a>(self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts to <code>Box&lt;T, A&gt;</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>As with <a href=\"../mem/union.MaybeUninit.html#method.assume_init\" title=\"method std::mem::MaybeUninit::assume_init\"><code>MaybeUninit::assume_init</code></a>,\nit is up to the caller to guarantee that the value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>five = Box::&lt;u32&gt;::new_uninit();\n\n<span class=\"kw\">let </span>five: Box&lt;u32&gt; = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>five.as_mut_ptr().write(<span class=\"number\">5</span>);\n\n    five.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>five, <span class=\"number\">5</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+five+=+Box::%3Cu32%3E::new_uninit();%0A++++%0A++++let+five:+Box%3Cu32%3E+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++five.as_mut_ptr().write(5);%0A++++%0A++++++++five.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*five,+5)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#900\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.write\" class=\"fn\">write</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;, A&gt;, value: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Writes the value and converts to <code>Box&lt;T, A&gt;</code>.</p>\n<p>This method converts the box similarly to <a href=\"struct.Box.html#method.assume_init\" title=\"method std::boxed::Box::assume_init\"><code>Box::assume_init</code></a> but\nwrites <code>value</code> into it before conversion thus guaranteeing safety.\nIn some scenarios use of this method may improve performance because\nthe compiler may be able to optimize copying from stack.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span>big_box = Box::&lt;[usize; <span class=\"number\">1024</span>]&gt;::new_uninit();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = [<span class=\"number\">0</span>; <span class=\"number\">1024</span>];\n<span class=\"kw\">for </span>(i, place) <span class=\"kw\">in </span>array.iter_mut().enumerate() {\n    <span class=\"kw-2\">*</span>place = i;\n}\n\n<span class=\"comment\">// The optimizer may be able to elide this copy, so previous code writes\n// to heap directly.\n</span><span class=\"kw\">let </span>big_box = Box::write(big_box, array);\n\n<span class=\"kw\">for </span>(i, x) <span class=\"kw\">in </span>big_box.iter().enumerate() {\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x, i);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+big_box+=+Box::%3C%5Busize;+1024%5D%3E::new_uninit();%0A++++%0A++++let+mut+array+=+%5B0;+1024%5D;%0A++++for+(i,+place)+in+array.iter_mut().enumerate()+%7B%0A++++++++*place+=+i;%0A++++%7D%0A++++%0A++++//+The+optimizer+may+be+able+to+elide+this+copy,+so+previous+code+writes%0A++++//+to+heap+directly.%0A++++let+big_box+=+Box::write(big_box,+array);%0A++++%0A++++for+(i,+x)+in+big_box.iter().enumerate()+%7B%0A++++++++assert_eq!(*x,+i);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#908\">source</a><a href=\"#impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.assume_init-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#941\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.assume_init-1\" class=\"fn\">assume_init</a>(self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>new_uninit</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63291\">#63291</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts to <code>Box&lt;[T], A&gt;</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>As with <a href=\"../mem/union.MaybeUninit.html#method.assume_init\" title=\"method std::mem::MaybeUninit::assume_init\"><code>MaybeUninit::assume_init</code></a>,\nit is up to the caller to guarantee that the values\nreally are in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(new_uninit)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>values = Box::&lt;[u32]&gt;::new_uninit_slice(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>values = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Deferred initialization:\n    </span>values[<span class=\"number\">0</span>].as_mut_ptr().write(<span class=\"number\">1</span>);\n    values[<span class=\"number\">1</span>].as_mut_ptr().write(<span class=\"number\">2</span>);\n    values[<span class=\"number\">2</span>].as_mut_ptr().write(<span class=\"number\">3</span>);\n\n    values.assume_init()\n};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>values, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(new_uninit)%5D%0A%0Afn+main()+%7B%0A++++let+mut+values+=+Box::%3C%5Bu32%5D%3E::new_uninit_slice(3);%0A++++%0A++++let+values+=+unsafe+%7B%0A++++++++//+Deferred+initialization:%0A++++++++values%5B0%5D.as_mut_ptr().write(1);%0A++++++++values%5B1%5D.as_mut_ptr().write(2);%0A++++++++values%5B2%5D.as_mut_ptr().write(3);%0A++++%0A++++++++values.assume_init()%0A++++%7D;%0A++++%0A++++assert_eq!(*values,+%5B1,+2,+3%5D)%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#947\">source</a><a href=\"#impl-Box%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#992\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a box from a raw pointer.</p>\n<p>After calling this function, the raw pointer is owned by the\nresulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"index.html#memory-layout\" title=\"mod std::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<p>The safety conditions are described in the <a href=\"index.html#memory-layout\" title=\"mod std::boxed\">memory layout</a> section.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a raw pointer\nusing <a href=\"struct.Box.html#method.into_raw\" title=\"associated function std::boxed::Box::into_raw\"><code>Box::into_raw</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+ptr+=+Box::into_raw(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw(ptr)+%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Manually create a <code>Box</code> from scratch by using the global allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = alloc(Layout::new::&lt;i32&gt;()) <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    </span>ptr.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_raw(ptr);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Balloc,+Layout%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+ptr+=+alloc(Layout::new::%3Ci32%3E())+as+*mut+i32;%0A++++++++//+In+general+.write+is+required+to+avoid+attempting+to+destruct%0A++++++++//+the+(uninitialized)+previous+contents+of+%60ptr%60,+though+for+this%0A++++++++//+simple+example+%60*ptr+=+5%60+would+have+worked+as+well.%0A++++++++ptr.write(5);%0A++++++++let+x+=+Box::from_raw(ptr);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3CT,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#997\">source</a><a href=\"#impl-Box%3CT,+A%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1048\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.from_raw_in\" class=\"fn\">from_raw_in</a>(raw: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a box from a raw pointer in the given allocator.</p>\n<p>After calling this function, the raw pointer is owned by the\nresulting <code>Box</code>. Specifically, the <code>Box</code> destructor will call\nthe destructor of <code>T</code> and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the <a href=\"index.html#memory-layout\" title=\"mod std::boxed\">memory layout</a> used by <code>Box</code> .</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Recreate a <code>Box</code> which was previously converted to a raw pointer\nusing <a href=\"struct.Box.html#method.into_raw_with_allocator\" title=\"associated function std::boxed::Box::into_raw_with_allocator\"><code>Box::into_raw_with_allocator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(<span class=\"number\">5</span>, System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+x+=+Box::new_in(5,+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw_in(ptr,+alloc)+%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Manually create a <code>Box</code> from scratch by using the system allocator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, slice_ptr_get)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>ptr = System.allocate(Layout::new::&lt;i32&gt;())<span class=\"question-mark\">?</span>.as_mut_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>i32;\n    <span class=\"comment\">// In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    </span>ptr.write(<span class=\"number\">5</span>);\n    <span class=\"kw\">let </span>x = Box::from_raw_in(ptr, System);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+slice_ptr_get)%5D%0A%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+System%7D;%0A++++%0A++++unsafe+%7B%0A++++++++let+ptr+=+System.allocate(Layout::new::%3Ci32%3E())?.as_mut_ptr()+as+*mut+i32;%0A++++++++//+In+general+.write+is+required+to+avoid+attempting+to+destruct%0A++++++++//+the+(uninitialized)+previous+contents+of+%60ptr%60,+though+for+this%0A++++++++//+simple+example+%60*ptr+=+5%60+would+have+worked+as+well.%0A++++++++ptr.write(5);%0A++++++++let+x+=+Box::from_raw_in(ptr,+System);%0A++++%7D%0A++++Ok::%3C(),+std::alloc::AllocError%3E(())%0A%7D+_inner().unwrap()+%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1101\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw\" class=\"fn\">into_raw</a>(b: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"index.html#memory-layout\" title=\"mod std::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n<a href=\"struct.Box.html#method.from_raw\" title=\"associated function std::boxed::Box::from_raw\"><code>Box::from_raw</code></a> function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw(b)</code> instead of <code>b.into_raw()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<p>Converting the raw pointer back into a <code>Box</code> with <a href=\"struct.Box.html#method.from_raw\" title=\"associated function std::boxed::Box::from_raw\"><code>Box::from_raw</code></a>\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw(ptr) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw(ptr)+%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{dealloc, Layout};\n<span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    dealloc(ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8, Layout::new::&lt;String&gt;());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::alloc::%7Bdealloc,+Layout%7D;%0A++++use+std::ptr;%0A++++%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++unsafe+%7B%0A++++++++ptr::drop_in_place(ptr);%0A++++++++dealloc(ptr+as+*mut+u8,+Layout::new::%3CString%3E());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note: This is equivalent to the following:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(String::from(<span class=\"string\">\"Hello\"</span>));\n<span class=\"kw\">let </span>ptr = Box::into_raw(x);\n<span class=\"kw\">unsafe </span>{\n    drop(Box::from_raw(ptr));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(String::from(%22Hello%22));%0A++++let+ptr+=+Box::into_raw(x);%0A++++unsafe+%7B%0A++++++++drop(Box::from_raw(ptr));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_with_allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1154\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw_with_allocator\" class=\"fn\">into_raw_with_allocator</a>(b: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; (<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Consumes the <code>Box</code>, returning a wrapped raw pointer and the allocator.</p>\n<p>The pointer will be properly aligned and non-null.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Box</code>. In particular, the\ncaller should properly destroy <code>T</code> and release the memory, taking\ninto account the <a href=\"index.html#memory-layout\" title=\"mod std::boxed\">memory layout</a> used by <code>Box</code>. The easiest way to\ndo this is to convert the raw pointer back into a <code>Box</code> with the\n<a href=\"struct.Box.html#method.from_raw_in\" title=\"associated function std::boxed::Box::from_raw_in\"><code>Box::from_raw_in</code></a> function, allowing the <code>Box</code> destructor to perform\nthe cleanup.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::into_raw_with_allocator(b)</code> instead of <code>b.into_raw_with_allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<p>Converting the raw pointer back into a <code>Box</code> with <a href=\"struct.Box.html#method.from_raw_in\" title=\"associated function std::boxed::Box::from_raw_in\"><code>Box::from_raw_in</code></a>\nfor automatic cleanup:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">let </span>x = <span class=\"kw\">unsafe </span>{ Box::from_raw_in(ptr, alloc) };</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+x+=+Box::new_in(String::from(%22Hello%22),+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++let+x+=+unsafe+%7B+Box::from_raw_in(ptr,+alloc)+%7D;%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Manual cleanup by explicitly running the destructor and deallocating\nthe memory:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{Allocator, Layout, System};\n<span class=\"kw\">use </span>std::ptr::{<span class=\"self\">self</span>, NonNull};\n\n<span class=\"kw\">let </span>x = Box::new_in(String::from(<span class=\"string\">\"Hello\"</span>), System);\n<span class=\"kw\">let </span>(ptr, alloc) = Box::into_raw_with_allocator(x);\n<span class=\"kw\">unsafe </span>{\n    ptr::drop_in_place(ptr);\n    <span class=\"kw\">let </span>non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::&lt;String&gt;());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::%7BAllocator,+Layout,+System%7D;%0A++++use+std::ptr::%7Bself,+NonNull%7D;%0A++++%0A++++let+x+=+Box::new_in(String::from(%22Hello%22),+System);%0A++++let+(ptr,+alloc)+=+Box::into_raw_with_allocator(x);%0A++++unsafe+%7B%0A++++++++ptr::drop_in_place(ptr);%0A++++++++let+non_null+=+NonNull::new_unchecked(ptr);%0A++++++++alloc.deallocate(non_null.cast(),+Layout::new::%3CString%3E());%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1186\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.allocator\" class=\"fn\">allocator</a>(b: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::allocator(&amp;b)</code> instead of <code>b.allocator()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1227-1229\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.leak\" class=\"fn\">leak</a>&lt;'a&gt;(b: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Box</code>, returning a mutable reference,\n<code>&amp;'a mut T</code>. Note that the type <code>T</code> must outlive the chosen lifetime\n<code>'a</code>. If the type has only static references, or none at all, then this\nmay be chosen to be <code>'static</code>.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak. If this is not acceptable, the reference should first be wrapped\nwith the <a href=\"struct.Box.html#method.from_raw\" title=\"associated function std::boxed::Box::from_raw\"><code>Box::from_raw</code></a> function producing a <code>Box</code>. This <code>Box</code> can\nthen be dropped which will properly destroy <code>T</code> and release the\nallocated memory.</p>\n<p>Note: this is an associated function, which means that you have\nto call it as <code>Box::leak(b)</code> instead of <code>b.leak()</code>. This\nis so that there is no conflict with a method on the inner type.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">41</span>);\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>usize = Box::leak(x);\n<span class=\"kw-2\">*</span>static_ref += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(41);%0A++++let+static_ref:+%26'static+mut+usize+=+Box::leak(x);%0A++++*static_ref+%2B=+1;%0A++++assert_eq!(*static_ref,+42);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Unsized data:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"kw\">let </span>static_ref = Box::leak(x);\nstatic_ref[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>static_ref, [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++let+static_ref+=+Box::leak(x);%0A++++static_ref%5B0%5D+=+4;%0A++++assert_eq!(*static_ref,+%5B4,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_pin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0, const unstable\">1.63.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92521\" title=\"Tracking issue for const_box\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1266-1268\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_pin\" class=\"fn\">into_pin</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via <a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\"><code>From</code></a>.</p>\n<p>Constructing and pinning a <code>Box</code> with <code>Box::into_pin(<a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\">Box::new</a>(x))</code>\ncan also be written more concisely using <code><a href=\"struct.Box.html#method.pin\" title=\"associated function std::boxed::Box::pin\">Box::pin</a>(x)</code>.\nThis <code>into_pin</code> method is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with <a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\"><code>Box::new</code></a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>It’s not recommended that crates add an impl like <code>From&lt;Box&lt;T&gt;&gt; for Pin&lt;T&gt;</code>,\nas it’ll introduce an ambiguity when calling <code>Pin::from</code>.\nA demonstration of such a poor impl is shown below.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo; <span class=\"comment\">// A type defined in this crate.\n</span><span class=\"kw\">impl </span>From&lt;Box&lt;()&gt;&gt; <span class=\"kw\">for </span>Pin&lt;Foo&gt; {\n    <span class=\"kw\">fn </span>from(<span class=\"kw\">_</span>: Box&lt;()&gt;) -&gt; Pin&lt;Foo&gt; {\n        Pin::new(Foo)\n    }\n}\n\n<span class=\"kw\">let </span>foo = Box::new(());\n<span class=\"kw\">let </span>bar = Pin::from(foo);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::pin::Pin;%0A++++struct+Foo;+//+A+type+defined+in+this+crate.%0A++++impl+From%3CBox%3C()%3E%3E+for+Pin%3CFoo%3E+%7B%0A++++++++fn+from(_:+Box%3C()%3E)+-%3E+Pin%3CFoo%3E+%7B%0A++++++++++++Pin::new(Foo)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+foo+=+Box::new(());%0A++++let+bar+=+Pin::from(foo);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1769\">source</a><a href=\"#impl-Box%3Cdyn+Any,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1789\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1819\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1828\">source</a><a href=\"#impl-Box%3Cdyn+Any+%2B+Send,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1848\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast-1\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1878\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked-1\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1887\">source</a><a href=\"#impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast-2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1907\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.downcast-2\" class=\"fn\">downcast</a>&lt;T&gt;(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;, <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, A&gt;&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the box to a concrete type.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">fn </span>print_if_string(value: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt;) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(string) = value.downcast::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"String ({}): {}\"</span>, string.len(), string);\n    }\n}\n\n<span class=\"kw\">let </span>my_string = <span class=\"string\">\"Hello World\"</span>.to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(<span class=\"number\">0i8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++fn+print_if_string(value:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E)+%7B%0A++++++++if+let+Ok(string)+=+value.downcast::%3CString%3E()+%7B%0A++++++++++++println!(%22String+(%7B%7D):+%7B%7D%22,+string.len(),+string);%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+my_string+=+%22Hello+World%22.to_string();%0A++++print_if_string(Box::new(my_string));%0A++++print_if_string(Box::new(0i8));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downcast_unchecked-2\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1937\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.downcast_unchecked-2\" class=\"fn\">downcast_unchecked</a>&lt;T&gt;(self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>downcast_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90850\">#90850</a>)</span></div></span></summary><div class=\"docblock\"><p>Downcasts the box to a concrete type.</p>\n<p>For a safe alternative see <a href=\"struct.Box.html#method.downcast\" title=\"method std::boxed::Box::downcast\"><code>downcast</code></a>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(downcast_unchecked)]\n\n</span><span class=\"kw\">use </span>std::any::Any;\n\n<span class=\"kw\">let </span>x: Box&lt;<span class=\"kw\">dyn </span>Any + Send + Sync&gt; = Box::new(<span class=\"number\">1_usize</span>);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x.downcast_unchecked::&lt;usize&gt;(), <span class=\"number\">1</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(downcast_unchecked)%5D%0A%0Afn+main()+%7B%0A++++use+std::any::Any;%0A++++%0A++++let+x:+Box%3Cdyn+Any+%2B+Send+%2B+Sync%3E+=+Box::new(1_usize);%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(*x.downcast_unchecked::%3Cusize%3E(),+1);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>The contained value must be of type <code>T</code>. Calling this method\nwith the incorrect type is <em>undefined behavior</em>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#423-428\">source</a></span><a href=\"#impl-AsFd-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#425-427\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#495-500\">source</a></span><a href=\"#impl-AsHandle-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#497-499\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2274\">source</a></span><a href=\"#impl-AsMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2275\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#269-274\">source</a></span><a href=\"#impl-AsRawFd-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a>&gt; <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#271-273\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2267\">source</a></span><a href=\"#impl-AsRef%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2268\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsSocket-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.71.0\">1.71.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#286-291\">source</a></span><a href=\"#impl-AsSocket-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../os/windows/io/trait.AsSocket.html\" title=\"trait std::os::windows::io::AsSocket\">AsSocket</a>&gt; <a class=\"trait\" href=\"../os/windows/io/trait.AsSocket.html\" title=\"trait std::os::windows::io::AsSocket\">AsSocket</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_socket\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/socket.rs.html#288-290\">source</a><a href=\"#method.as_socket\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsSocket.html#tymethod.as_socket\" class=\"fn\">as_socket</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedSocket.html\" title=\"struct std::os::windows::io::BorrowedSocket\">BorrowedSocket</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the socket.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2101\">source</a><a href=\"#impl-AsyncFn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.AsyncFn.html\" title=\"trait std::ops::AsyncFn\">AsyncFn</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.AsyncFn.html\" title=\"trait std::ops::AsyncFn\">AsyncFn</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.async_call\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2102\">source</a><a href=\"#method.async_call\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.AsyncFn.html#tymethod.async_call\" class=\"fn\">async_call</a>(\n    &amp;self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type std::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'_&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Call the <a href=\"../ops/trait.AsyncFn.html\" title=\"trait std::ops::AsyncFn\"><code>AsyncFn</code></a>, returning a future which may borrow from the called closure.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2092\">source</a><a href=\"#impl-AsyncFnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CallRefFuture\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CallRefFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" class=\"associatedtype\">CallRefFuture</a>&lt;'a&gt; = &lt;F as <a class=\"trait\" href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type std::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'a&gt;\n<span class=\"where\">where\n    <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;: 'a</span></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Future returned by <a href=\"../ops/trait.AsyncFnMut.html#tymethod.async_call_mut\" title=\"method std::ops::AsyncFnMut::async_call_mut\"><code>AsyncFnMut::async_call_mut</code></a> and <a href=\"../ops/trait.AsyncFn.html#tymethod.async_call\" title=\"method std::ops::AsyncFn::async_call\"><code>AsyncFn::async_call</code></a>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.async_call_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2095\">source</a><a href=\"#method.async_call_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.AsyncFnMut.html#tymethod.async_call_mut\" class=\"fn\">async_call_mut</a>(\n    &amp;mut self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\">AsyncFnMut</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnMut.html#associatedtype.CallRefFuture\" title=\"type std::ops::AsyncFnMut::CallRefFuture\">CallRefFuture</a>&lt;'_&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Call the <a href=\"../ops/trait.AsyncFnMut.html\" title=\"trait std::ops::AsyncFnMut\"><code>AsyncFnMut</code></a>, returning a future which may borrow from the called closure.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2082\">source</a><a href=\"#impl-AsyncFnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.AsyncFnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnOnce.html#associatedtype.Output\" title=\"type std::ops::AsyncFnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Output type of the called closure’s future.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.CallOnceFuture\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CallOnceFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" class=\"associatedtype\">CallOnceFuture</a> = &lt;F as <a class=\"trait\" href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type std::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Future returned by <a href=\"../ops/trait.AsyncFnOnce.html#tymethod.async_call_once\" title=\"method std::ops::AsyncFnOnce::async_call_once\"><code>AsyncFnOnce::async_call_once</code></a>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.async_call_once\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2086\">source</a><a href=\"#method.async_call_once\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.AsyncFnOnce.html#tymethod.async_call_once\" class=\"fn\">async_call_once</a>(\n    self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\">AsyncFnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.AsyncFnOnce.html#associatedtype.CallOnceFuture\" title=\"type std::ops::AsyncFnOnce::CallOnceFuture\">CallOnceFuture</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_fn_traits</code>)</span></div></span><div class=\"docblock\">Call the <a href=\"../ops/trait.AsyncFnOnce.html\" title=\"trait std::ops::AsyncFnOnce\"><code>AsyncFnOnce</code></a>, returning a future which may move out of the called closure.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsyncIterator-for-Box%3CS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2338\">source</a><a href=\"#impl-AsyncIterator-for-Box%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;S as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of items yielded by the async iterator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2341\">source</a><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.AsyncIterator.html#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt; as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the async iterator is exhausted. <a href=\"../async_iter/trait.AsyncIterator.html#tymethod.poll_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2345\">source</a><a href=\"#method.size_hint-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.AsyncIterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Returns the bounds on the remaining length of the async iterator. <a href=\"../async_iter/trait.AsyncIterator.html#method.size_hint\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2253\">source</a></span><a href=\"#impl-Borrow%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2254\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2260\">source</a></span><a href=\"#impl-BorrowMut%3CT%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2261\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufRead-for-Box%3CB%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#209-229\">source</a></span><a href=\"#impl-BufRead-for-Box%3CB%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B: <a class=\"trait\" href=\"../io/trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../io/trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#211-213\">source</a><a href=\"#method.fill_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\">Returns the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty. <a href=\"../io/trait.BufRead.html#tymethod.fill_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.consume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#216-218\">source</a><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\">Tells this buffer that <code>amt</code> bytes have been consumed from the buffer,\nso they should no longer be returned in calls to <code>read</code>. <a href=\"../io/trait.BufRead.html#tymethod.consume\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#221-223\">source</a><a href=\"#method.read_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is reached. <a href=\"../io/trait.BufRead.html#method.read_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_line\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#226-228\">source</a><a href=\"#method.read_line\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until a newline (the <code>0xA</code> byte) is reached, and append\nthem to the provided <code>String</code> buffer. <a href=\"../io/trait.BufRead.html#method.read_line\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.has_data_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2285-2287\">source</a><a href=\"#method.has_data_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>buf_read_has_data_left</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86423\">#86423</a>)</span></div></span><div class=\"docblock\">Check if the underlying <code>Read</code> has any data left to be read. <a href=\"../io/trait.BufRead.html#method.has_data_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2406-2408\">source</a><a href=\"#method.skip_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bufread_skip_until</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111735\">#111735</a>)</span></div></span><div class=\"docblock\">Skip all bytes until the delimiter <code>byte</code> or EOF is reached. <a href=\"../io/trait.BufRead.html#method.skip_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2512-2517\">source</a></span><a href=\"#method.split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.split\" class=\"fn\">split</a>(self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Split.html\" title=\"struct std::io::Split\">Split</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns an iterator over the contents of this reader split on the byte\n<code>byte</code>. <a href=\"../io/trait.BufRead.html#method.split\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2549-2554\">source</a></span><a href=\"#method.lines\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.BufRead.html#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Returns an iterator over the lines of this reader. <a href=\"../io/trait.BufRead.html#method.lines\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2219\">source</a></span><a href=\"#impl-Clone-for-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2243\">source</a><a href=\"#method.clone_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Copies <code>source</code>’s contents into <code>self</code> without creating a new allocation,\nso long as the two are of the same length.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = Box::new([<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]);\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>[i32] = <span class=\"kw-2\">&amp;*</span>y;\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no allocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, <span class=\"kw-2\">&amp;*</span>y);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(%5B5,+6,+7%5D);%0A++++let+mut+y+=+Box::new(%5B8,+9,+10%5D);%0A++++let+yp:+*const+%5Bi32%5D+=+%26*y;%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+allocation+occurred%0A++++assert_eq!(yp,+%26*y);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2220\">source</a><a href=\"#method.clone-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#824\">source</a></span><a href=\"#impl-Clone-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#826\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1233-1238\">source</a></span><a href=\"#impl-Clone-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1235-1237\">source</a><a href=\"#method.clone-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1698-1703\">source</a></span><a href=\"#impl-Clone-for-Box%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1700-1702\">source</a><a href=\"#method.clone-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1330\">source</a></span><a href=\"#impl-Clone-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1346\">source</a><a href=\"#method.clone-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a new box with a <code>clone()</code> of this box’s contents.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>y = x.clone();\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// But they are unique objects\n</span><span class=\"macro\">assert_ne!</span>(<span class=\"kw-2\">&amp;*</span>x <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32, <span class=\"kw-2\">&amp;*</span>y <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>i32);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+y+=+x.clone();%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+But+they+are+unique+objects%0A++++assert_ne!(%26*x+as+*const+i32,+%26*y+as+*const+i32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1373\">source</a><a href=\"#method.clone_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Copies <code>source</code>’s contents into <code>self</code> without creating a new allocation.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = Box::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = Box::new(<span class=\"number\">10</span>);\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = <span class=\"kw-2\">&amp;*</span>y;\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no allocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, <span class=\"kw-2\">&amp;*</span>y);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+Box::new(5);%0A++++let+mut+y+=+Box::new(10);%0A++++let+yp:+*const+i32+=+%26*y;%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+allocation+occurred%0A++++assert_eq!(yp,+%26*y);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1380\">source</a></span><a href=\"#impl-Clone-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1381\">source</a><a href=\"#method.clone-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2306\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Box%3CG,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine yields. <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine returns. <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resume-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2310\">source</a><a href=\"#method.resume-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">Resumes the execution of this coroutine. <a href=\"../ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2316-2318\">source</a><a href=\"#impl-Coroutine%3CR%3E-for-Pin%3CBox%3CG,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;G, R, A&gt; <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Yield\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Yield\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" class=\"associatedtype\">Yield</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine yields. <a href=\"../ops/trait.Coroutine.html#associatedtype.Yield\">Read more</a></div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Return\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Return\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\" class=\"associatedtype\">Return</a> = &lt;G as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">The type of value this coroutine returns. <a href=\"../ops/trait.Coroutine.html#associatedtype.Return\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2323\">source</a><a href=\"#method.resume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Coroutine.html#tymethod.resume\" class=\"fn\">resume</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt;&gt;,\n    arg: R,\n) -&gt; <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;&lt;<a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Yield\" title=\"type std::ops::Coroutine::Yield\">Yield</a>, &lt;<a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;G, A&gt;&gt; as <a class=\"trait\" href=\"../ops/trait.Coroutine.html\" title=\"trait std::ops::Coroutine\">Coroutine</a>&lt;R&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Coroutine.html#associatedtype.Return\" title=\"type std::ops::Coroutine::Return\">Return</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>coroutine_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43122\">#43122</a>)</span></div></span><div class=\"docblock\">Resumes the execution of this coroutine. <a href=\"../ops/trait.Coroutine.html#tymethod.resume\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1955\">source</a></span><a href=\"#impl-Debug-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1956\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1306\">source</a></span><a href=\"#impl-Default-for-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1308\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#928\">source</a></span><a href=\"#impl-Default-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#929\">source</a><a href=\"#method.default-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1338-1344\">source</a></span><a href=\"#impl-Default-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1340-1343\">source</a><a href=\"#method.default-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1296\">source</a></span><a href=\"#impl-Default-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1299\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1316\">source</a></span><a href=\"#impl-Default-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1318\">source</a><a href=\"#method.default-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1972\">source</a></span><a href=\"#impl-Deref-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1975\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1981\">source</a></span><a href=\"#impl-DerefMut-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1982\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1948\">source</a></span><a href=\"#impl-Display-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1949\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2037\">source</a></span><a href=\"#impl-DoubleEndedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"../iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2038\">source</a><a href=\"#method.next_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Removes and returns an element from the end of the iterator. <a href=\"../iter/trait.DoubleEndedIterator.html#tymethod.next_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth_back\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2041\">source</a><a href=\"#method.nth_back\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#method.nth_back\" class=\"fn\">nth_back</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the <code>n</code>th element from the end of the iterator. <a href=\"../iter/trait.DoubleEndedIterator.html#method.nth_back\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_back_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#138\">source</a><a href=\"#method.advance_back_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#method.advance_back_by\" class=\"fn\">advance_back_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span><div class=\"docblock\">Advances the iterator from the back by <code>n</code> elements. <a href=\"../iter/trait.DoubleEndedIterator.html#method.advance_back_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_rfold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#230-234\">source</a></span><a href=\"#method.try_rfold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#method.try_rfold\" class=\"fn\">try_rfold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\">This is the reverse version of <a href=\"../iter/trait.Iterator.html#method.try_fold\" title=\"method std::iter::Iterator::try_fold\"><code>Iterator::try_fold()</code></a>: it takes\nelements starting from the back of the iterator. <a href=\"../iter/trait.DoubleEndedIterator.html#method.try_rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rfold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#301-304\">source</a></span><a href=\"#method.rfold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#method.rfold\" class=\"fn\">rfold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">An iterator method that reduces the iterator’s elements to a single,\nfinal value, starting from the back. <a href=\"../iter/trait.DoubleEndedIterator.html#method.rfold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rfind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/double_ended.rs.html#356-359\">source</a></span><a href=\"#method.rfind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.DoubleEndedIterator.html#method.rfind\" class=\"fn\">rfind</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element of an iterator from the back that satisfies a predicate. <a href=\"../iter/trait.DoubleEndedIterator.html#method.rfind\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1278\">source</a></span><a href=\"#impl-Drop-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1280\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Error-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2623\">source</a></span><a href=\"#impl-Error-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.description\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2625\">source</a><a href=\"#method.description\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class=\"docblock\"> <a href=\"../error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cause\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2630\">source</a><a href=\"#method.cause\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.source\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2634\">source</a><a href=\"#method.source\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\">The lower-level source of this error, if any. <a href=\"../error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2638\">source</a><a href=\"#method.provide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'b&gt;(&amp;'b self, request: &amp;mut <a class=\"struct\" href=\"../error/struct.Request.html\" title=\"struct std::error::Request\">Request</a>&lt;'b&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/99301\">#99301</a>)</span></div></span><div class=\"docblock\">Provides type based access to context intended for error reports. <a href=\"../error/trait.Error.html#method.provide\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2046\">source</a></span><a href=\"#impl-ExactSizeIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"../iter/trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2047\">source</a><a href=\"#method.len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.ExactSizeIterator.html#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\">Returns the exact remaining length of the iterator. <a href=\"../iter/trait.ExactSizeIterator.html#method.len\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2050\">source</a><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.ExactSizeIterator.html#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exact_size_is_empty</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/35428\">#35428</a>)</span></div></span><div class=\"docblock\">Returns <code>true</code> if the iterator is empty. <a href=\"../iter/trait.ExactSizeIterator.html#method.is_empty\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2244\">source</a></span><a href=\"#impl-Extend%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2245\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2075\">source</a></span><a href=\"#impl-Fn%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2076\">source</a><a href=\"#method.call\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.Fn.html#tymethod.call\" class=\"fn\">call</a>(\n    &amp;self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span><div class=\"docblock\">Performs the call operation.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2068\">source</a></span><a href=\"#impl-FnMut%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2069\">source</a><a href=\"#method.call_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.FnMut.html#tymethod.call_mut\" class=\"fn\">call_mut</a>(\n    &amp;mut self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span><div class=\"docblock\">Performs the call operation.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2059\">source</a></span><a href=\"#impl-FnOnce%3CArgs%3E-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Args, F, A&gt; <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    Args: <a class=\"trait\" href=\"../marker/trait.Tuple.html\" title=\"trait std::marker::Tuple\">Tuple</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.FnOnce.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after the call operator is used.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_once\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2062\">source</a><a href=\"#method.call_once\" class=\"anchor\">§</a><h4 class=\"code-header\">extern \"rust-call\" fn <a href=\"../ops/trait.FnOnce.html#tymethod.call_once\" class=\"fn\">call_once</a>(\n    self,\n    args: Args,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>&lt;Args&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.FnOnce.html#associatedtype.Output\" title=\"type std::ops::FnOnce::Output\">Output</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>fn_traits</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</span></div></span><div class=\"docblock\">Performs the call operation.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1562\">source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1577\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion allocates on the heap\nand performs a copy of <code>slice</code> and its contents.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// create a &amp;[u8] which will be used to create a Box&lt;[u8]&gt;\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>];\n<span class=\"kw\">let </span>boxed_slice: Box&lt;[u8]&gt; = Box::from(slice);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed_slice:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+create+a+%26%5Bu8%5D+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0Afn+main()+%7B%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B104,+101,+108,+108,+111%5D;%0A++++let+boxed_slice:+Box%3C%5Bu8%5D%3E+=+Box::from(slice);%0A++++%0A++++println!(%22%7Bboxed_slice:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#768\">source</a></span><a href=\"#impl-From%3C%26CStr%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#771\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>,\nby copying the contents into a newly allocated <a href=\"struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1191-1198\">source</a></span><a href=\"#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-27\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1194-1197\">source</a><a href=\"#method.from-27\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Copies the string into a newly allocated <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26Path%3E-for-Box%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1649-1658\">source</a></span><a href=\"#impl-From%3C%26Path%3E-for-Box%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-33\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1653-1657\">source</a><a href=\"#method.from-33\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(path: &amp;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a boxed <a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> from a reference.</p>\n<p>This will allocate and clone <code>path</code> to it.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2559\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2574\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">\"a str error\"</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2535\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2552\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../primitive.str.html\" title=\"primitive str\"><code>str</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_str_error = <span class=\"string\">\"a str error\"</span>;\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(a_str_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_str_error+=+%22a+str+error%22;%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1602\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1615\">source</a><a href=\"#method.from-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code></p>\n<p>This conversion allocates on the heap\nand performs a copy of <code>s</code>.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1682\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1693\">source</a><a href=\"#method.from-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>This conversion moves the array to newly heap-allocated memory.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>boxed: Box&lt;[u8]&gt; = Box::from([<span class=\"number\">4</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+boxed:+Box%3C%5Bu8%5D%3E+=+Box::from(%5B4,+2%5D);%0A++++println!(%22%7Bboxed:?%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3450\">source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3460\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+b:+Box%3C%5Bi32%5D%3E+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++assert_eq!(Vec::from(b),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CCStr%3E%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#791\">source</a></span><a href=\"#impl-From%3CBox%3CCStr%3E%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-25\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#794\">source</a><a href=\"#method.from-25\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> into a <a href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3COsStr%3E%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1214-1221\">source</a></span><a href=\"#impl-From%3CBox%3COsStr%3E%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-28\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1218-1220\">source</a><a href=\"#method.from-28\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code> into an <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> without copying or\nallocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CPath%3E%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1675-1683\">source</a></span><a href=\"#impl-From%3CBox%3CPath%3E%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-26\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1680-1682\">source</a><a href=\"#method.from-26\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code> into a <a href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a>.</p>\n<p>This conversion does not allocate or copy memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3577\">source</a></span><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3589\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Move a boxed object to a new, reference-counted allocation.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unique: Box&lt;str&gt; = Box::from(<span class=\"string\">\"eggplant\"</span>);\n<span class=\"kw\">let </span>shared: Arc&lt;str&gt; = Arc::from(unique);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"eggplant\"</span>, <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+unique:+Box%3Cstr%3E+=+Box::from(%22eggplant%22);%0A++++let+shared:+Arc%3Cstr%3E+=+Arc::from(unique);%0A++++assert_eq!(%22eggplant%22,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1513-1515\">source</a></span><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Pin%3CBox%3CT,+A%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + 'static,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1528\">source</a><a href=\"#method.from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(boxed: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\"><code>Unpin</code></a>, then\n<code>*boxed</code> will be pinned in memory and unable to be moved.</p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<p>This is also available via <a href=\"struct.Box.html#method.into_pin\" title=\"associated function std::boxed::Box::into_pin\"><code>Box::into_pin</code></a>.</p>\n<p>Constructing and pinning a <code>Box</code> with <code>&lt;Pin&lt;Box&lt;T&gt;&gt;&gt;::from(<a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\">Box::new</a>(x))</code>\ncan also be written more concisely using <code><a href=\"struct.Box.html#method.pin\" title=\"associated function std::boxed::Box::pin\">Box::pin</a>(x)</code>.\nThis <code>From</code> implementation is useful if you already have a <code>Box&lt;T&gt;</code>, or you are\nconstructing a (pinned) <code>Box</code> in a different way than with <a href=\"struct.Box.html#method.new\" title=\"associated function std::boxed::Box::new\"><code>Box::new</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3CT,+A%3E%3E-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2618\">source</a></span><a href=\"#impl-From%3CBox%3CT,+A%3E%3E-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2630\">source</a><a href=\"#method.from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Move a boxed object to a new, reference counted, allocation.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>original: Box&lt;i32&gt; = Box::new(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>shared: Rc&lt;i32&gt; = Rc::from(original);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, <span class=\"kw-2\">*</span>shared);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+original:+Box%3Ci32%3E+=+Box::new(1);%0A++++let+shared:+Rc%3Ci32%3E+=+Rc::from(original);%0A++++assert_eq!(1,+*shared);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3Cstr%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2746\">source</a></span><a href=\"#impl-From%3CBox%3Cstr%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2759\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts the given boxed <code>str</code> slice to a <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>.\nIt is notable that the <code>str</code> slice is owned.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1: String = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>s2: Box&lt;str&gt; = s1.into_boxed_str();\n<span class=\"kw\">let </span>s3: String = String::from(s2);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, s3)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+s1.into_boxed_str();%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1656\">source</a></span><a href=\"#impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1674\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code></p>\n<p>This conversion does not allocate on the heap and happens in place.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// create a Box&lt;str&gt; which will be used to create a Box&lt;[u8]&gt;\n</span><span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>boxed_str: Box&lt;[u8]&gt; = Box::from(boxed);\n\n<span class=\"comment\">// create a &amp;[u8] which will be used to create a Box&lt;[u8]&gt;\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">104</span>, <span class=\"number\">101</span>, <span class=\"number\">108</span>, <span class=\"number\">108</span>, <span class=\"number\">111</span>];\n<span class=\"kw\">let </span>boxed_slice = Box::from(slice);\n\n<span class=\"macro\">assert_eq!</span>(boxed_slice, boxed_str);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+create+a+Box%3Cstr%3E+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0Afn+main()+%7B%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(%22hello%22);%0A++++let+boxed_str:+Box%3C%5Bu8%5D%3E+=+Box::from(boxed);%0A++++%0A++++//+create+a+%26%5Bu8%5D+which+will+be+used+to+create+a+Box%3C%5Bu8%5D%3E%0A++++let+slice:+%26%5Bu8%5D+=+%26%5B104,+101,+108,+108,+111%5D;%0A++++let+boxed_slice+=+Box::from(slice);%0A++++%0A++++assert_eq!(boxed_slice,+boxed_str);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#832\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#835\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</code> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1584\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1592\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code></p>\n<p>When <code>cow</code> is the <code>Cow::Borrowed</code> variant, this\nconversion allocates on the heap and copies the\nunderlying slice. Otherwise, it will try to reuse the owned\n<code>Vec</code>’s allocation.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#778\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+CStr%3E%3E-for-Box%3CCStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#782\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>,\nby copying the contents if they are borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1201-1211\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1205-1210\">source</a><a href=\"#method.from-32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'a, OsStr&gt;</code> into a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>,\nby copying the contents if they are borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+Path%3E%3E-for-Box%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1661-1672\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+Path%3E%3E-for-Box%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-29\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1666-1671\">source</a><a href=\"#method.from-29\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a boxed <a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\"><code>Path</code></a> from a clone-on-write pointer.</p>\n<p>Converting from a <code>Cow::Owned</code> does not clone or allocate.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1622\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1647\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'_, str&gt;</code> into a <code>Box&lt;str&gt;</code></p>\n<p>When <code>cow</code> is the <code>Cow::Borrowed</code> variant, this\nconversion allocates on the heap and copies the\nunderlying <code>str</code>. Otherwise, it will try to reuse the owned\n<code>String</code>’s allocation.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>unboxed = Cow::Borrowed(<span class=\"string\">\"hello\"</span>);\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++%0A++++let+unboxed+=+Cow::Borrowed(%22hello%22);%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unboxed = Cow::Owned(<span class=\"string\">\"hello\"</span>.to_string());\n<span class=\"kw\">let </span>boxed: Box&lt;str&gt; = Box::from(unboxed);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{boxed}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+unboxed+=+Cow::Owned(%22hello%22.to_string());%0A++++let+boxed:+Box%3Cstr%3E+=+Box::from(unboxed);%0A++++println!(%22%7Bboxed%7D%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2603\">source</a></span><a href=\"#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'b, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2617\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'b, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n<span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>a_cow_str_error = Cow::from(<span class=\"string\">\"a str error\"</span>);\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(a_cow_str_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++use+std::borrow::Cow;%0A++++%0A++++let+a_cow_str_error+=+Cow::from(%22a+str+error%22);%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_cow_str_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2581\">source</a></span><a href=\"#impl-From%3CCow%3C'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'b, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2596\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'b, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n<span class=\"kw\">use </span>std::borrow::Cow;\n\n<span class=\"kw\">let </span>a_cow_str_error = Cow::from(<span class=\"string\">\"a str error\"</span>);\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(a_cow_str_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++use+std::borrow::Cow;%0A++++%0A++++let+a_cow_str_error+=+Cow::from(%22a+str+error%22);%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_cow_str_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CE%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2397\">source</a></span><a href=\"#impl-From%3CE%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, E&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2423\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: E) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a type of <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::fmt;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>AnError;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>AnError {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"An error\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>AnError {}\n\n<span class=\"kw\">let </span>an_error = AnError;\n<span class=\"macro\">assert!</span>(<span class=\"number\">0 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>an_error));\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(an_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::mem;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+AnError;%0A++++%0A++++impl+fmt::Display+for+AnError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22An+error%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+AnError+%7B%7D%0A++++%0A++++let+an_error+=+AnError;%0A++++assert!(0+==+mem::size_of_val(%26an_error));%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(an_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2430\">source</a></span><a href=\"#impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, E&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2462\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: E) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a type of <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a> into a box of\ndyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::fmt;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>AnError;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>AnError {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"An error\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>AnError {}\n\n<span class=\"kw\">unsafe impl </span>Send <span class=\"kw\">for </span>AnError {}\n\n<span class=\"kw\">unsafe impl </span>Sync <span class=\"kw\">for </span>AnError {}\n\n<span class=\"kw\">let </span>an_error = AnError;\n<span class=\"macro\">assert!</span>(<span class=\"number\">0 </span>== mem::size_of_val(<span class=\"kw-2\">&amp;</span>an_error));\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(an_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::mem;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+AnError;%0A++++%0A++++impl+fmt::Display+for+AnError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22An+error%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+AnError+%7B%7D%0A++++%0A++++unsafe+impl+Send+for+AnError+%7B%7D%0A++++%0A++++unsafe+impl+Sync+for+AnError+%7B%7D%0A++++%0A++++let+an_error+=+AnError;%0A++++assert!(0+==+mem::size_of_val(%26an_error));%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(an_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COsString%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1224-1230\">source</a></span><a href=\"#impl-From%3COsString%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-30\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/ffi/os_str.rs.html#1227-1229\">source</a><a href=\"#method.from-30\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <a href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> into a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CPathBuf%3E-for-Box%3CPath%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1686-1695\">source</a></span><a href=\"#impl-From%3CPathBuf%3E-for-Box%3CPath%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-31\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/path.rs.html#1692-1694\">source</a><a href=\"#method.from-31\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\"><code>PathBuf</code></a> into a <code><a href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</code>.</p>\n<p>This conversion currently should not allocate memory,\nbut this behavior is not guaranteed on all platforms or in all future versions.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-Box%3Cdyn+Error%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2513\">source</a></span><a href=\"#impl-From%3CString%3E-for-Box%3Cdyn+Error%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2526\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(str_err: <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_string_error = <span class=\"string\">\"a string error\"</span>.to_string();\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error&gt;::from(a_string_error);\n<span class=\"macro\">assert!</span>(mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_string_error+=+%22a+string+error%22.to_string();%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error%3E::from(a_string_error);%0A++++assert!(mem::size_of::%3CBox%3Cdyn+Error%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2469\">source</a></span><a href=\"#impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2484\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"../error/trait.Error.html\" title=\"trait std::error::Error\">Error</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + 'a&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> into a box of dyn <a href=\"../error/trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a> + <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> + <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::error::Error;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>a_string_error = <span class=\"string\">\"a string error\"</span>.to_string();\n<span class=\"kw\">let </span>a_boxed_error = Box::&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;::from(a_string_error);\n<span class=\"macro\">assert!</span>(\n    mem::size_of::&lt;Box&lt;<span class=\"kw\">dyn </span>Error + Send + Sync&gt;&gt;() == mem::size_of_val(<span class=\"kw-2\">&amp;</span>a_boxed_error))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::mem;%0A++++%0A++++let+a_string_error+=+%22a+string+error%22.to_string();%0A++++let+a_boxed_error+=+Box::%3Cdyn+Error+%2B+Send+%2B+Sync%3E::from(a_string_error);%0A++++assert!(%0A++++++++mem::size_of::%3CBox%3Cdyn+Error+%2B+Send+%2B+Sync%3E%3E()+==+mem::size_of_val(%26a_boxed_error))%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2766\">source</a></span><a href=\"#impl-From%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2778\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> to a boxed <code>str</code> slice that is owned.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1: String = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>s2: Box&lt;str&gt; = Box::from(s1);\n<span class=\"kw\">let </span>s3: String = String::from(s2);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"hello world\"</span>, s3)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1:+String+=+String::from(%22hello+world%22);%0A++++let+s2:+Box%3Cstr%3E+=+Box::from(s1);%0A++++let+s3:+String+=+String::from(s2);%0A++++%0A++++assert_eq!(%22hello+world%22,+s3)%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-Box%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1493\">source</a></span><a href=\"#impl-From%3CT%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1507\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>T</code> into a <code>Box&lt;T&gt;</code></p>\n<p>The conversion allocates on the heap and moves <code>t</code>\nfrom the stack into it.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"number\">5</span>;\n<span class=\"kw\">let </span>boxed = Box::new(<span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(Box::from(x), boxed);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+5;%0A++++let+boxed+=+Box::new(5);%0A++++%0A++++assert_eq!(Box::from(x),+boxed);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3469\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3490\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a vector into a boxed slice.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"../vec/struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Box::from(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Box::from(vec!%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(Box::from(vec), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(Box::from(vec),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2179\">source</a></span><a href=\"#impl-FromIterator%3C%26char%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2180\">source</a><a href=\"#method.from_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2187\">source</a></span><a href=\"#impl-FromIterator%3C%26str%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2188\">source</a><a href=\"#method.from_iter-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2203\">source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2204\">source</a><a href=\"#method.from_iter-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2162\">source</a></span><a href=\"#impl-FromIterator%3CBox%3Cstr,+A%3E%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt; for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2163\">source</a><a href=\"#method.from_iter-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, A&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2211\">source</a></span><a href=\"#impl-FromIterator%3CCow%3C'a,+str%3E%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2212\">source</a><a href=\"#method.from_iter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0\">1.32.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2118\">source</a></span><a href=\"#impl-FromIterator%3CI%3E-for-Box%3C%5BI%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;I&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2119\">source</a><a href=\"#method.from_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = I&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2195\">source</a></span><a href=\"#impl-FromIterator%3CString%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2196\">source</a><a href=\"#method.from_iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2171\">source</a></span><a href=\"#impl-FromIterator%3Cchar%3E-for-Box%3Cstr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2172\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.char.html\">char</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Future-for-Box%3CF,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2329\">source</a></span><a href=\"#impl-Future-for-Box%3CF,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, A&gt; <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a> + <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.Future.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The type of value produced on completion.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.poll\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2332\">source</a><a href=\"#method.poll\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.Future.html#tymethod.poll\" class=\"fn\">poll</a>(\n    self: <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;&amp;mut <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt;&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"../task/struct.Context.html\" title=\"struct std::task::Context\">Context</a>&lt;'_&gt;,\n) -&gt; <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;F, A&gt; as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\">Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available. <a href=\"../future/trait.Future.html#tymethod.poll\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1433\">source</a></span><a href=\"#impl-Hash-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1434\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hasher-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1440\">source</a></span><a href=\"#impl-Hasher-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.finish\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1441\">source</a><a href=\"#method.finish\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#tymethod.finish\" class=\"fn\">finish</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\">Returns the hash value for the values written so far. <a href=\"../hash/trait.Hasher.html#tymethod.finish\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1444\">source</a><a href=\"#method.write-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, bytes: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>])</h4></section></summary><div class=\"docblock\">Writes some data into this <code>Hasher</code>. <a href=\"../hash/trait.Hasher.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1447\">source</a><a href=\"#method.write_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_u8\" class=\"fn\">write_u8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>u8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1450\">source</a><a href=\"#method.write_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_u16\" class=\"fn\">write_u16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>u16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1453\">source</a><a href=\"#method.write_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_u32\" class=\"fn\">write_u32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>u32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1456\">source</a><a href=\"#method.write_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_u64\" class=\"fn\">write_u64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>u64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1459\">source</a><a href=\"#method.write_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_u128\" class=\"fn\">write_u128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>u128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1462\">source</a><a href=\"#method.write_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_usize\" class=\"fn\">write_usize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>usize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1465\">source</a><a href=\"#method.write_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_i8\" class=\"fn\">write_i8</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>i8</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1468\">source</a><a href=\"#method.write_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_i16\" class=\"fn\">write_i16</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>i16</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1471\">source</a><a href=\"#method.write_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_i32\" class=\"fn\">write_i32</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>i32</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1474\">source</a><a href=\"#method.write_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_i64\" class=\"fn\">write_i64</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>i64</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1477\">source</a><a href=\"#method.write_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_i128\" class=\"fn\">write_i128</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>i128</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1480\">source</a><a href=\"#method.write_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_isize\" class=\"fn\">write_isize</a>(&amp;mut self, i: <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a>)</h4></section></summary><div class=\"docblock\">Writes a single <code>isize</code> into this hasher.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_length_prefix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1483\">source</a><a href=\"#method.write_length_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_length_prefix\" class=\"fn\">write_length_prefix</a>(&amp;mut self, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96762\">#96762</a>)</span></div></span><div class=\"docblock\">Writes a length prefix into this hasher, as part of being prefix-free. <a href=\"../hash/trait.Hasher.html#method.write_length_prefix\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1486\">source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hasher.html#method.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>hasher_prefixfree_extras</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96762\">#96762</a>)</span></div></span><div class=\"docblock\">Writes a single <code>str</code> into this hasher. <a href=\"../hash/trait.Hasher.html#method.write_str\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2152\">source</a></span><a href=\"#impl-IntoIterator-for-%26Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, I&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a I</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2155\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, I&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'a, I>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2161\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, I&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut I</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2164\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, I&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'a, I>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2143\">source</a></span><a href=\"#impl-IntoIterator-for-Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;I, A&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = I</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2146\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;I, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntoIter<I, A>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Iterator-for-%26Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2132\">source</a></span><a href=\"#impl-Iterator-for-%26Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, A&gt; !<a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> for &amp;'a <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>This implementation is required to make sure that the <code>&amp;Box&lt;[I]&gt;: IntoIterator</code>\nimplementation doesn’t overlap with <code>IntoIterator for T where T: Iterator</code> blanket.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next\" class=\"tymethod trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80\">source</a></span><a href=\"#tymethod.next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Advances the iterator and returns the next value. <a href=\"../iter/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_chunk\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119\">source</a><a href=\"#method.next_chunk\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>], <a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, N&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98326\">#98326</a>)</span></div></span><div class=\"docblock\">Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"../iter/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193\">source</a></span><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\">Returns the bounds on the remaining length of the iterator. <a href=\"../iter/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231\">source</a></span><a href=\"#method.count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, counting the number of iterations and returning it. <a href=\"../iter/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260\">source</a></span><a href=\"#method.last\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, returning the last element. <a href=\"../iter/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306\">source</a><a href=\"#method.advance_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span><div class=\"docblock\">Advances the iterator by <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358\">source</a></span><a href=\"#method.nth\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the <code>n</code>th element of the iterator. <a href=\"../iter/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.step_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411\">source</a></span><a href=\"#method.step_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.StepBy.html\" title=\"struct std::iter::StepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"../iter/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Chain.html\" title=\"struct std::iter::Chain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Takes two iterators and creates a new iterator over both in sequence. <a href=\"../iter/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603\">source</a></span><a href=\"#method.zip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Zip.html\" title=\"struct std::iter::Zip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,</div></h4></section></summary><div class=\"docblock\">‘Zips up’ two iterators into a single iterator of pairs. <a href=\"../iter/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersperse_with\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705\">source</a><a href=\"#method.intersperse_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"../iter/struct.IntersperseWith.html\" title=\"struct std::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith<Self, G>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79524\">#79524</a>)</span></div></span><div class=\"docblock\">Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"../iter/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765\">source</a></span><a href=\"#method.map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Map.html\" title=\"struct std::iter::Map\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"../iter/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_each\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811\">source</a></span><a href=\"#method.for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Calls a closure on each element of an iterator. <a href=\"../iter/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887\">source</a></span><a href=\"#method.filter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.Filter.html\" title=\"struct std::iter::Filter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"../iter/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933\">source</a></span><a href=\"#method.filter_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FilterMap.html\" title=\"struct std::iter::FilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both filters and maps. <a href=\"../iter/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.enumerate\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980\">source</a></span><a href=\"#method.enumerate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Enumerate.html\" title=\"struct std::iter::Enumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"../iter/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peekable\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052\">source</a></span><a href=\"#method.peekable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Peekable.html\" title=\"struct std::iter::Peekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which can use the <a href=\"../iter/struct.Peekable.html#method.peek\" title=\"method std::iter::Peekable::peek\"><code>peek</code></a> and <a href=\"../iter/struct.Peekable.html#method.peek_mut\" title=\"method std::iter::Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"../iter/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119\">source</a></span><a href=\"#method.skip_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.SkipWhile.html\" title=\"struct std::iter::SkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that <a href=\"../iter/trait.Iterator.html#method.skip\" title=\"method std::iter::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201\">source</a></span><a href=\"#method.take_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.TakeWhile.html\" title=\"struct std::iter::TakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_while\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290\">source</a></span><a href=\"#method.map_while\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWhile.html\" title=\"struct std::iter::MapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both yields elements based on a predicate and maps. <a href=\"../iter/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319\">source</a></span><a href=\"#method.skip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Skip.html\" title=\"struct std::iter::Skip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that skips the first <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Take.html\" title=\"struct std::iter::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"../iter/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scan\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422\">source</a></span><a href=\"#method.scan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Scan.html\" title=\"struct std::iter::Scan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan<Self, St, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut St</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator adapter which, like <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"../iter/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flat_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462\">source</a></span><a href=\"#method.flat_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FlatMap.html\" title=\"struct std::iter::FlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap<Self, U, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that works like map, but flattens nested structure. <a href=\"../iter/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_windows\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703\">source</a><a href=\"#method.map_windows\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWindows.html\" title=\"struct std::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows<Self, F, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87155\">#87155</a>)</span></div></span><div class=\"docblock\">Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"../primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"../iter/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fuse\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769\">source</a></span><a href=\"#method.fuse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Fuse.html\" title=\"struct std::iter::Fuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which ends after the first <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>. <a href=\"../iter/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inspect\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855\">source</a></span><a href=\"#method.inspect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Inspect.html\" title=\"struct std::iter::Inspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Does something with each element of an iterator, passing the value on. <a href=\"../iter/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Borrows an iterator, rather than consuming it. <a href=\"../iter/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003\">source</a></span><a href=\"#method.collect\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156\">source</a><a href=\"#method.collect_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/94780\">#94780</a>)</span></div></span><div class=\"docblock\">Collects all the items from an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191\">source</a></span><a href=\"#method.partition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.tuple.html\">(B, B)</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Consumes an iterator, creating two collections from it. <a href=\"../iter/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_partitioned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311\">source</a><a href=\"#method.is_partitioned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62544\">#62544</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"../iter/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_fold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407\">source</a></span><a href=\"#method.try_fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"../iter/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_for_each\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466\">source</a></span><a href=\"#method.try_for_each\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"../iter/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fold\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585\">source</a></span><a href=\"#method.fold\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"../iter/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623\">source</a></span><a href=\"#method.reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><div class=\"docblock\">Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"../iter/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reduce\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697\">source</a><a href=\"#method.try_reduce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87053\">#87053</a>)</span></div></span><div class=\"docblock\">Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"../iter/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753\">source</a></span><a href=\"#method.all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if every element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.any\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807\">source</a></span><a href=\"#method.any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if any element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871\">source</a></span><a href=\"#method.find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element of an iterator that satisfies a predicate. <a href=\"../iter/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find_map\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903\">source</a></span><a href=\"#method.find_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"../iter/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_find\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964\">source</a><a href=\"#method.try_find\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63178\">#63178</a>)</span></div></span><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"../iter/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.position\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045\">source</a></span><a href=\"#method.position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element in an iterator, returning its index. <a href=\"../iter/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by_key\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220\">source</a></span><a href=\"#method.max_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254\">source</a></span><a href=\"#method.max_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by_key\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282\">source</a></span><a href=\"#method.min_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316\">source</a></span><a href=\"#method.min_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cycle\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3500-3502\">source</a></span><a href=\"#method.cycle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cycle\" class=\"fn\">cycle</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Cycle.html\" title=\"struct std::iter::Cycle\">Cycle</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Cycle<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\">Repeats an iterator endlessly. <a href=\"../iter/trait.Iterator.html#method.cycle\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546\">source</a><a href=\"#method.array_chunks\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.ArrayChunks.html\" title=\"struct std::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks<Self, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/100450\">#100450</a>)</span></div></span><div class=\"docblock\">Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"../iter/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579\">source</a></span><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Sums the elements of an iterator. <a href=\"../iter/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612\">source</a></span><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Iterates over the entire iterator, multiplying all the elements <a href=\"../iter/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663\">source</a><a href=\"#method.cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720\">source</a></span><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the <a href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"../iter/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757\">source</a><a href=\"#method.partial_cmp_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791\">source</a></span><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815\">source</a><a href=\"#method.eq_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"../iter/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870\">source</a></span><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless than those of another. <a href=\"../iter/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892\">source</a></span><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914\">source</a></span><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"../iter/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936\">source</a></span><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996\">source</a><a href=\"#method.is_sorted_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by_key\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044\">source</a><a href=\"#method.is_sorted_by_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Iterator-for-%26mut+Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2137\">source</a></span><a href=\"#impl-Iterator-for-%26mut+Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, I, A&gt; !<a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> for &amp;'a mut <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>This implementation is required to make sure that the <code>&amp;mut Box&lt;[I]&gt;: IntoIterator</code>\nimplementation doesn’t overlap with <code>IntoIterator for T where T: Iterator</code> blanket.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next-1\" class=\"tymethod trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80\">source</a></span><a href=\"#tymethod.next-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Advances the iterator and returns the next value. <a href=\"../iter/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_chunk-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119\">source</a><a href=\"#method.next_chunk-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>], <a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, N&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98326\">#98326</a>)</span></div></span><div class=\"docblock\">Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"../iter/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193\">source</a></span><a href=\"#method.size_hint-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\">Returns the bounds on the remaining length of the iterator. <a href=\"../iter/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231\">source</a></span><a href=\"#method.count-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, counting the number of iterations and returning it. <a href=\"../iter/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260\">source</a></span><a href=\"#method.last-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, returning the last element. <a href=\"../iter/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_by-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306\">source</a><a href=\"#method.advance_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span><div class=\"docblock\">Advances the iterator by <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358\">source</a></span><a href=\"#method.nth-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the <code>n</code>th element of the iterator. <a href=\"../iter/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.step_by-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411\">source</a></span><a href=\"#method.step_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.StepBy.html\" title=\"struct std::iter::StepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"../iter/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484\">source</a></span><a href=\"#method.chain-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Chain.html\" title=\"struct std::iter::Chain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Takes two iterators and creates a new iterator over both in sequence. <a href=\"../iter/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603\">source</a></span><a href=\"#method.zip-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Zip.html\" title=\"struct std::iter::Zip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,</div></h4></section></summary><div class=\"docblock\">‘Zips up’ two iterators into a single iterator of pairs. <a href=\"../iter/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersperse_with-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705\">source</a><a href=\"#method.intersperse_with-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"../iter/struct.IntersperseWith.html\" title=\"struct std::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith<Self, G>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79524\">#79524</a>)</span></div></span><div class=\"docblock\">Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"../iter/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765\">source</a></span><a href=\"#method.map-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Map.html\" title=\"struct std::iter::Map\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"../iter/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_each-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811\">source</a></span><a href=\"#method.for_each-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Calls a closure on each element of an iterator. <a href=\"../iter/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887\">source</a></span><a href=\"#method.filter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.Filter.html\" title=\"struct std::iter::Filter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"../iter/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter_map-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933\">source</a></span><a href=\"#method.filter_map-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FilterMap.html\" title=\"struct std::iter::FilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both filters and maps. <a href=\"../iter/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.enumerate-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980\">source</a></span><a href=\"#method.enumerate-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Enumerate.html\" title=\"struct std::iter::Enumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"../iter/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peekable-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052\">source</a></span><a href=\"#method.peekable-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Peekable.html\" title=\"struct std::iter::Peekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which can use the <a href=\"../iter/struct.Peekable.html#method.peek\" title=\"method std::iter::Peekable::peek\"><code>peek</code></a> and <a href=\"../iter/struct.Peekable.html#method.peek_mut\" title=\"method std::iter::Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"../iter/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_while-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119\">source</a></span><a href=\"#method.skip_while-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.SkipWhile.html\" title=\"struct std::iter::SkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that <a href=\"../iter/trait.Iterator.html#method.skip\" title=\"method std::iter::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_while-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201\">source</a></span><a href=\"#method.take_while-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.TakeWhile.html\" title=\"struct std::iter::TakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_while-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290\">source</a></span><a href=\"#method.map_while-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWhile.html\" title=\"struct std::iter::MapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both yields elements based on a predicate and maps. <a href=\"../iter/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319\">source</a></span><a href=\"#method.skip-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Skip.html\" title=\"struct std::iter::Skip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that skips the first <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373\">source</a></span><a href=\"#method.take-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Take.html\" title=\"struct std::iter::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"../iter/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scan-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422\">source</a></span><a href=\"#method.scan-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Scan.html\" title=\"struct std::iter::Scan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan<Self, St, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut St</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator adapter which, like <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"../iter/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flat_map-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462\">source</a></span><a href=\"#method.flat_map-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FlatMap.html\" title=\"struct std::iter::FlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap<Self, U, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that works like map, but flattens nested structure. <a href=\"../iter/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_windows-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703\">source</a><a href=\"#method.map_windows-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWindows.html\" title=\"struct std::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows<Self, F, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87155\">#87155</a>)</span></div></span><div class=\"docblock\">Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"../primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"../iter/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fuse-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769\">source</a></span><a href=\"#method.fuse-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Fuse.html\" title=\"struct std::iter::Fuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which ends after the first <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>. <a href=\"../iter/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inspect-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855\">source</a></span><a href=\"#method.inspect-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Inspect.html\" title=\"struct std::iter::Inspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Does something with each element of an iterator, passing the value on. <a href=\"../iter/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Borrows an iterator, rather than consuming it. <a href=\"../iter/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003\">source</a></span><a href=\"#method.collect-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect_into-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156\">source</a><a href=\"#method.collect_into-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/94780\">#94780</a>)</span></div></span><div class=\"docblock\">Collects all the items from an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191\">source</a></span><a href=\"#method.partition-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.tuple.html\">(B, B)</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Consumes an iterator, creating two collections from it. <a href=\"../iter/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_partitioned-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311\">source</a><a href=\"#method.is_partitioned-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62544\">#62544</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"../iter/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_fold-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407\">source</a></span><a href=\"#method.try_fold-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"../iter/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_for_each-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466\">source</a></span><a href=\"#method.try_for_each-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"../iter/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fold-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585\">source</a></span><a href=\"#method.fold-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"../iter/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623\">source</a></span><a href=\"#method.reduce-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><div class=\"docblock\">Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"../iter/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reduce-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697\">source</a><a href=\"#method.try_reduce-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87053\">#87053</a>)</span></div></span><div class=\"docblock\">Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"../iter/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.all-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753\">source</a></span><a href=\"#method.all-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if every element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.any-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807\">source</a></span><a href=\"#method.any-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if any element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871\">source</a></span><a href=\"#method.find-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element of an iterator that satisfies a predicate. <a href=\"../iter/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find_map-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903\">source</a></span><a href=\"#method.find_map-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"../iter/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_find-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964\">source</a><a href=\"#method.try_find-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63178\">#63178</a>)</span></div></span><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"../iter/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.position-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045\">source</a></span><a href=\"#method.position-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element in an iterator, returning its index. <a href=\"../iter/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by_key-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220\">source</a></span><a href=\"#method.max_by_key-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254\">source</a></span><a href=\"#method.max_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by_key-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282\">source</a></span><a href=\"#method.min_by_key-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316\">source</a></span><a href=\"#method.min_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546\">source</a><a href=\"#method.array_chunks-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.ArrayChunks.html\" title=\"struct std::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks<Self, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/100450\">#100450</a>)</span></div></span><div class=\"docblock\">Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"../iter/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579\">source</a></span><a href=\"#method.sum-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Sums the elements of an iterator. <a href=\"../iter/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612\">source</a></span><a href=\"#method.product-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Iterates over the entire iterator, multiplying all the elements <a href=\"../iter/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp_by-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663\">source</a><a href=\"#method.cmp_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720\">source</a></span><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the <a href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"../iter/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp_by-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757\">source</a><a href=\"#method.partial_cmp_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791\">source</a></span><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_by-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815\">source</a><a href=\"#method.eq_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"../iter/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870\">source</a></span><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless than those of another. <a href=\"../iter/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892\">source</a></span><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914\">source</a></span><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"../iter/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936\">source</a></span><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996\">source</a><a href=\"#method.is_sorted_by-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by_key-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044\">source</a><a href=\"#method.is_sorted_by_key-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Iterator-for-Box%3C%5BI%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2127\">source</a></span><a href=\"#impl-Iterator-for-Box%3C%5BI%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; !<a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[I]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>This implementation is required to make sure that the <code>Box&lt;[I]&gt;: IntoIterator</code>\nimplementation doesn’t overlap with <code>IntoIterator for T where T: Iterator</code> blanket.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next-2\" class=\"tymethod trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#80\">source</a></span><a href=\"#tymethod.next-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Advances the iterator and returns the next value. <a href=\"../iter/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_chunk-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119\">source</a><a href=\"#method.next_chunk-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>], <a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, N&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98326\">#98326</a>)</span></div></span><div class=\"docblock\">Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"../iter/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#193\">source</a></span><a href=\"#method.size_hint-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\">Returns the bounds on the remaining length of the iterator. <a href=\"../iter/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231\">source</a></span><a href=\"#method.count-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, counting the number of iterations and returning it. <a href=\"../iter/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#258-260\">source</a></span><a href=\"#method.last-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, returning the last element. <a href=\"../iter/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_by-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306\">source</a><a href=\"#method.advance_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span><div class=\"docblock\">Advances the iterator by <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#358\">source</a></span><a href=\"#method.nth-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the <code>n</code>th element of the iterator. <a href=\"../iter/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.step_by-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411\">source</a></span><a href=\"#method.step_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.StepBy.html\" title=\"struct std::iter::StepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"../iter/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484\">source</a></span><a href=\"#method.chain-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Chain.html\" title=\"struct std::iter::Chain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Takes two iterators and creates a new iterator over both in sequence. <a href=\"../iter/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603\">source</a></span><a href=\"#method.zip-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Zip.html\" title=\"struct std::iter::Zip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,</div></h4></section></summary><div class=\"docblock\">‘Zips up’ two iterators into a single iterator of pairs. <a href=\"../iter/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersperse_with-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705\">source</a><a href=\"#method.intersperse_with-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"../iter/struct.IntersperseWith.html\" title=\"struct std::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith<Self, G>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79524\">#79524</a>)</span></div></span><div class=\"docblock\">Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"../iter/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765\">source</a></span><a href=\"#method.map-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Map.html\" title=\"struct std::iter::Map\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"../iter/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_each-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811\">source</a></span><a href=\"#method.for_each-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Calls a closure on each element of an iterator. <a href=\"../iter/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887\">source</a></span><a href=\"#method.filter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.Filter.html\" title=\"struct std::iter::Filter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"../iter/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter_map-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933\">source</a></span><a href=\"#method.filter_map-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FilterMap.html\" title=\"struct std::iter::FilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both filters and maps. <a href=\"../iter/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.enumerate-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980\">source</a></span><a href=\"#method.enumerate-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Enumerate.html\" title=\"struct std::iter::Enumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"../iter/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peekable-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052\">source</a></span><a href=\"#method.peekable-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Peekable.html\" title=\"struct std::iter::Peekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which can use the <a href=\"../iter/struct.Peekable.html#method.peek\" title=\"method std::iter::Peekable::peek\"><code>peek</code></a> and <a href=\"../iter/struct.Peekable.html#method.peek_mut\" title=\"method std::iter::Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"../iter/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_while-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119\">source</a></span><a href=\"#method.skip_while-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.SkipWhile.html\" title=\"struct std::iter::SkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that <a href=\"../iter/trait.Iterator.html#method.skip\" title=\"method std::iter::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_while-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201\">source</a></span><a href=\"#method.take_while-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.TakeWhile.html\" title=\"struct std::iter::TakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_while-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290\">source</a></span><a href=\"#method.map_while-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWhile.html\" title=\"struct std::iter::MapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both yields elements based on a predicate and maps. <a href=\"../iter/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319\">source</a></span><a href=\"#method.skip-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Skip.html\" title=\"struct std::iter::Skip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that skips the first <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373\">source</a></span><a href=\"#method.take-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Take.html\" title=\"struct std::iter::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"../iter/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scan-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422\">source</a></span><a href=\"#method.scan-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Scan.html\" title=\"struct std::iter::Scan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan<Self, St, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut St</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator adapter which, like <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"../iter/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flat_map-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462\">source</a></span><a href=\"#method.flat_map-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FlatMap.html\" title=\"struct std::iter::FlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap<Self, U, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that works like map, but flattens nested structure. <a href=\"../iter/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_windows-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703\">source</a><a href=\"#method.map_windows-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWindows.html\" title=\"struct std::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows<Self, F, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87155\">#87155</a>)</span></div></span><div class=\"docblock\">Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"../primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"../iter/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fuse-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769\">source</a></span><a href=\"#method.fuse-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Fuse.html\" title=\"struct std::iter::Fuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which ends after the first <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>. <a href=\"../iter/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inspect-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855\">source</a></span><a href=\"#method.inspect-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Inspect.html\" title=\"struct std::iter::Inspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Does something with each element of an iterator, passing the value on. <a href=\"../iter/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883\">source</a></span><a href=\"#method.by_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Borrows an iterator, rather than consuming it. <a href=\"../iter/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003\">source</a></span><a href=\"#method.collect-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect_into-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156\">source</a><a href=\"#method.collect_into-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/94780\">#94780</a>)</span></div></span><div class=\"docblock\">Collects all the items from an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191\">source</a></span><a href=\"#method.partition-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.tuple.html\">(B, B)</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Consumes an iterator, creating two collections from it. <a href=\"../iter/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_partitioned-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311\">source</a><a href=\"#method.is_partitioned-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62544\">#62544</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"../iter/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_fold-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407\">source</a></span><a href=\"#method.try_fold-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"../iter/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_for_each-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466\">source</a></span><a href=\"#method.try_for_each-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"../iter/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fold-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585\">source</a></span><a href=\"#method.fold-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"../iter/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623\">source</a></span><a href=\"#method.reduce-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><div class=\"docblock\">Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"../iter/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reduce-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697\">source</a><a href=\"#method.try_reduce-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87053\">#87053</a>)</span></div></span><div class=\"docblock\">Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"../iter/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.all-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753\">source</a></span><a href=\"#method.all-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if every element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.any-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807\">source</a></span><a href=\"#method.any-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if any element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871\">source</a></span><a href=\"#method.find-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element of an iterator that satisfies a predicate. <a href=\"../iter/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find_map-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903\">source</a></span><a href=\"#method.find_map-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"../iter/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_find-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964\">source</a><a href=\"#method.try_find-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63178\">#63178</a>)</span></div></span><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"../iter/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.position-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045\">source</a></span><a href=\"#method.position-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element in an iterator, returning its index. <a href=\"../iter/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by_key-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220\">source</a></span><a href=\"#method.max_by_key-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254\">source</a></span><a href=\"#method.max_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by_key-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282\">source</a></span><a href=\"#method.min_by_key-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316\">source</a></span><a href=\"#method.min_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546\">source</a><a href=\"#method.array_chunks-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.ArrayChunks.html\" title=\"struct std::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks<Self, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/100450\">#100450</a>)</span></div></span><div class=\"docblock\">Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"../iter/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579\">source</a></span><a href=\"#method.sum-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Sums the elements of an iterator. <a href=\"../iter/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612\">source</a></span><a href=\"#method.product-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Iterates over the entire iterator, multiplying all the elements <a href=\"../iter/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp_by-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663\">source</a><a href=\"#method.cmp_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720\">source</a></span><a href=\"#method.partial_cmp-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the <a href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"../iter/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp_by-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757\">source</a><a href=\"#method.partial_cmp_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791\">source</a></span><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_by-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815\">source</a><a href=\"#method.eq_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"../iter/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848\">source</a></span><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870\">source</a></span><a href=\"#method.lt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless than those of another. <a href=\"../iter/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892\">source</a></span><a href=\"#method.le-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914\">source</a></span><a href=\"#method.gt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"../iter/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936\">source</a></span><a href=\"#method.ge-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996\">source</a><a href=\"#method.is_sorted_by-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by_key-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044\">source</a><a href=\"#method.is_sorted_by_key-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Iterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1994\">source</a></span><a href=\"#impl-Iterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.Iterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1996\">source</a><a href=\"#method.next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Advances the iterator and returns the next value. <a href=\"../iter/trait.Iterator.html#tymethod.next\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.size_hint-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1999\">source</a><a href=\"#method.size_hint-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\">Returns the bounds on the remaining length of the iterator. <a href=\"../iter/trait.Iterator.html#method.size_hint\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.nth-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2002\">source</a><a href=\"#method.nth-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.nth\" class=\"fn\">nth</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the <code>n</code>th element of the iterator. <a href=\"../iter/trait.Iterator.html#method.nth\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2005\">source</a><a href=\"#method.last-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.last\" class=\"fn\">last</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;</h4></section></summary><div class=\"docblock\">Consumes the iterator, returning the last element. <a href=\"../iter/trait.Iterator.html#method.last\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_chunk-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#115-119\">source</a><a href=\"#method.next_chunk-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.next_chunk\" class=\"fn\">next_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>], <a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, N&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_next_chunk</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98326\">#98326</a>)</span></div></span><div class=\"docblock\">Advances the iterator and returns an array containing the next <code>N</code> values. <a href=\"../iter/trait.Iterator.html#method.next_chunk\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.count-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#229-231\">source</a></span><a href=\"#method.count-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.count\" class=\"fn\">count</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Consumes the iterator, counting the number of iterations and returning it. <a href=\"../iter/trait.Iterator.html#method.count\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advance_by-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#306\">source</a><a href=\"#method.advance_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.advance_by\" class=\"fn\">advance_by</a>(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_advance_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/77404\">#77404</a>)</span></div></span><div class=\"docblock\">Advances the iterator by <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.advance_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.step_by-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#409-411\">source</a></span><a href=\"#method.step_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.step_by\" class=\"fn\">step_by</a>(self, step: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.StepBy.html\" title=\"struct std::iter::StepBy\">StepBy</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StepBy<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration. <a href=\"../iter/trait.Iterator.html#method.step_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#481-484\">source</a></span><a href=\"#method.chain-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.chain\" class=\"fn\">chain</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Chain.html\" title=\"struct std::iter::Chain\">Chain</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Takes two iterators and creates a new iterator over both in sequence. <a href=\"../iter/trait.Iterator.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.zip-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#600-603\">source</a></span><a href=\"#method.zip-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.zip\" class=\"fn\">zip</a>&lt;U&gt;(self, other: U) -&gt; <a class=\"struct\" href=\"../iter/struct.Zip.html\" title=\"struct std::iter::Zip\">Zip</a>&lt;Self, &lt;U as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Zip<Self, <U as IntoIterator>::IntoIter>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,</div></h4></section></summary><div class=\"docblock\">‘Zips up’ two iterators into a single iterator of pairs. <a href=\"../iter/trait.Iterator.html#method.zip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.intersperse_with-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#702-705\">source</a><a href=\"#method.intersperse_with-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.intersperse_with\" class=\"fn\">intersperse_with</a>&lt;G&gt;(self, separator: G) -&gt; <a class=\"struct\" href=\"../iter/struct.IntersperseWith.html\" title=\"struct std::iter::IntersperseWith\">IntersperseWith</a>&lt;Self, G&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IntersperseWith<Self, G>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    G: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_intersperse</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79524\">#79524</a>)</span></div></span><div class=\"docblock\">Creates a new iterator which places an item generated by <code>separator</code>\nbetween adjacent items of the original iterator. <a href=\"../iter/trait.Iterator.html#method.intersperse_with\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#762-765\">source</a></span><a href=\"#method.map-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map\" class=\"fn\">map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Map.html\" title=\"struct std::iter::Map\">Map</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Map<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Takes a closure and creates an iterator which calls that closure on each\nelement. <a href=\"../iter/trait.Iterator.html#method.map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.for_each-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#808-811\">source</a></span><a href=\"#method.for_each-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.for_each\" class=\"fn\">for_each</a>&lt;F&gt;(self, f: F)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Calls a closure on each element of an iterator. <a href=\"../iter/trait.Iterator.html#method.for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#884-887\">source</a></span><a href=\"#method.filter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter\" class=\"fn\">filter</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.Filter.html\" title=\"struct std::iter::Filter\">Filter</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Filter<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which uses a closure to determine if an element\nshould be yielded. <a href=\"../iter/trait.Iterator.html#method.filter\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.filter_map-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#930-933\">source</a></span><a href=\"#method.filter_map-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.filter_map\" class=\"fn\">filter_map</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FilterMap.html\" title=\"struct std::iter::FilterMap\">FilterMap</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FilterMap<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both filters and maps. <a href=\"../iter/trait.Iterator.html#method.filter_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.enumerate-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#978-980\">source</a></span><a href=\"#method.enumerate-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.enumerate\" class=\"fn\">enumerate</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Enumerate.html\" title=\"struct std::iter::Enumerate\">Enumerate</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Enumerate<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which gives the current iteration count as well as\nthe next value. <a href=\"../iter/trait.Iterator.html#method.enumerate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.peekable-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1050-1052\">source</a></span><a href=\"#method.peekable-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.peekable\" class=\"fn\">peekable</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Peekable.html\" title=\"struct std::iter::Peekable\">Peekable</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Peekable<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which can use the <a href=\"../iter/struct.Peekable.html#method.peek\" title=\"method std::iter::Peekable::peek\"><code>peek</code></a> and <a href=\"../iter/struct.Peekable.html#method.peek_mut\" title=\"method std::iter::Peekable::peek_mut\"><code>peek_mut</code></a> methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information. <a href=\"../iter/trait.Iterator.html#method.peekable\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_while-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1116-1119\">source</a></span><a href=\"#method.skip_while-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip_while\" class=\"fn\">skip_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.SkipWhile.html\" title=\"struct std::iter::SkipWhile\">SkipWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SkipWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that <a href=\"../iter/trait.Iterator.html#method.skip\" title=\"method std::iter::Iterator::skip\"><code>skip</code></a>s elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.skip_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_while-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1198-1201\">source</a></span><a href=\"#method.take_while-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take_while\" class=\"fn\">take_while</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.TakeWhile.html\" title=\"struct std::iter::TakeWhile\">TakeWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"TakeWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields elements based on a predicate. <a href=\"../iter/trait.Iterator.html#method.take_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_while-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1287-1290\">source</a></span><a href=\"#method.map_while-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_while\" class=\"fn\">map_while</a>&lt;B, P&gt;(self, predicate: P) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWhile.html\" title=\"struct std::iter::MapWhile\">MapWhile</a>&lt;Self, P&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWhile<Self, P>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that both yields elements based on a predicate and maps. <a href=\"../iter/trait.Iterator.html#method.map_while\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1317-1319\">source</a></span><a href=\"#method.skip-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.skip\" class=\"fn\">skip</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Skip.html\" title=\"struct std::iter::Skip\">Skip</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Skip<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that skips the first <code>n</code> elements. <a href=\"../iter/trait.Iterator.html#method.skip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1371-1373\">source</a></span><a href=\"#method.take-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.take\" class=\"fn\">take</a>(self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../iter/struct.Take.html\" title=\"struct std::iter::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that yields the first <code>n</code> elements, or fewer\nif the underlying iterator ends sooner. <a href=\"../iter/trait.Iterator.html#method.take\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.scan-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1419-1422\">source</a></span><a href=\"#method.scan-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.scan\" class=\"fn\">scan</a>&lt;St, B, F&gt;(self, initial_state: St, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Scan.html\" title=\"struct std::iter::Scan\">Scan</a>&lt;Self, St, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Scan<Self, St, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut St</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator adapter which, like <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, holds internal state, but\nunlike <a href=\"../iter/trait.Iterator.html#method.fold\" title=\"method std::iter::Iterator::fold\"><code>fold</code></a>, produces a new iterator. <a href=\"../iter/trait.Iterator.html#method.scan\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flat_map-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1458-1462\">source</a></span><a href=\"#method.flat_map-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.flat_map\" class=\"fn\">flat_map</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.FlatMap.html\" title=\"struct std::iter::FlatMap\">FlatMap</a>&lt;Self, U, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FlatMap<Self, U, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; U,</div></h4></section></summary><div class=\"docblock\">Creates an iterator that works like map, but flattens nested structure. <a href=\"../iter/trait.Iterator.html#method.flat_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.map_windows-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1700-1703\">source</a><a href=\"#method.map_windows-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.map_windows\" class=\"fn\">map_windows</a>&lt;F, R, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.MapWindows.html\" title=\"struct std::iter::MapWindows\">MapWindows</a>&lt;Self, F, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"MapWindows<Self, F, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;[Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]) -&gt; R,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_map_windows</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87155\">#87155</a>)</span></div></span><div class=\"docblock\">Calls the given function <code>f</code> for each contiguous window of size <code>N</code> over\n<code>self</code> and returns an iterator over the outputs of <code>f</code>. Like <a href=\"../primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>slice::windows()</code></a>,\nthe windows during mapping overlap as well. <a href=\"../iter/trait.Iterator.html#method.map_windows\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fuse-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1767-1769\">source</a></span><a href=\"#method.fuse-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fuse\" class=\"fn\">fuse</a>(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Fuse.html\" title=\"struct std::iter::Fuse\">Fuse</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Fuse<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which ends after the first <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>. <a href=\"../iter/trait.Iterator.html#method.fuse\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.inspect-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1852-1855\">source</a></span><a href=\"#method.inspect-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.inspect\" class=\"fn\">inspect</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"../iter/struct.Inspect.html\" title=\"struct std::iter::Inspect\">Inspect</a>&lt;Self, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Inspect<Self, F>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>),</div></h4></section></summary><div class=\"docblock\">Does something with each element of an iterator, passing the value on. <a href=\"../iter/trait.Iterator.html#method.inspect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#1881-1883\">source</a></span><a href=\"#method.by_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Borrows an iterator, rather than consuming it. <a href=\"../iter/trait.Iterator.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2001-2003\">source</a></span><a href=\"#method.collect-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect\" class=\"fn\">collect</a>&lt;B&gt;(self) -&gt; B<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.collect_into-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2154-2156\">source</a><a href=\"#method.collect_into-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.collect_into\" class=\"fn\">collect_into</a>&lt;E&gt;(self, collection: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut E</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_collect_into</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/94780\">#94780</a>)</span></div></span><div class=\"docblock\">Collects all the items from an iterator into a collection. <a href=\"../iter/trait.Iterator.html#method.collect_into\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2187-2191\">source</a></span><a href=\"#method.partition-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partition\" class=\"fn\">partition</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.tuple.html\">(B, B)</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    B: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Consumes an iterator, creating two collections from it. <a href=\"../iter/trait.Iterator.html#method.partition\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_partitioned-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2308-2311\">source</a><a href=\"#method.is_partitioned-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_partitioned\" class=\"fn\">is_partitioned</a>&lt;P&gt;(self, predicate: P) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_is_partitioned</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62544\">#62544</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return <code>true</code> precede all those that return <code>false</code>. <a href=\"../iter/trait.Iterator.html#method.is_partitioned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_fold-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2403-2407\">source</a></span><a href=\"#method.try_fold-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_fold\" class=\"fn\">try_fold</a>&lt;B, F, R&gt;(&amp;mut self, init: B, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = B&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value. <a href=\"../iter/trait.Iterator.html#method.try_fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_for_each-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2462-2466\">source</a></span><a href=\"#method.try_for_each-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_for_each\" class=\"fn\">try_for_each</a>&lt;F, R&gt;(&amp;mut self, f: F) -&gt; R<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\">An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error. <a href=\"../iter/trait.Iterator.html#method.try_for_each\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fold-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2582-2585\">source</a></span><a href=\"#method.fold-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.fold\" class=\"fn\">fold</a>&lt;B, F&gt;(self, init: B, f: F) -&gt; B<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(B, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Folds every element into an accumulator by applying an operation,\nreturning the final result. <a href=\"../iter/trait.Iterator.html#method.fold\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reduce-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2620-2623\">source</a></span><a href=\"#method.reduce-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.reduce\" class=\"fn\">reduce</a>&lt;F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>,</div></h4></section></summary><div class=\"docblock\">Reduces the elements to a single one, by repeatedly applying a reducing\noperation. <a href=\"../iter/trait.Iterator.html#method.reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reduce-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2692-2697\">source</a><a href=\"#method.try_reduce-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_reduce\" class=\"fn\">try_reduce</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Output\" title=\"type std::ops::Try::Output\">Output</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iterator_try_reduce</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/87053\">#87053</a>)</span></div></span><div class=\"docblock\">Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately. <a href=\"../iter/trait.Iterator.html#method.try_reduce\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.all-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2750-2753\">source</a></span><a href=\"#method.all-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.all\" class=\"fn\">all</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if every element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.any-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2804-2807\">source</a></span><a href=\"#method.any-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.any\" class=\"fn\">any</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Tests if any element of the iterator matches a predicate. <a href=\"../iter/trait.Iterator.html#method.any\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2868-2871\">source</a></span><a href=\"#method.find-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find\" class=\"fn\">find</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element of an iterator that satisfies a predicate. <a href=\"../iter/trait.Iterator.html#method.find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.find_map-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2900-2903\">source</a></span><a href=\"#method.find_map-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.find_map\" class=\"fn\">find_map</a>&lt;B, F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;B&gt;,</div></h4></section></summary><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first non-none result. <a href=\"../iter/trait.Iterator.html#method.find_map\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_find-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#2959-2964\">source</a><a href=\"#method.try_find-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.try_find\" class=\"fn\">try_find</a>&lt;F, R&gt;(\n    &amp;mut self,\n    f: F,\n) -&gt; &lt;&lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a> as <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Residual.html#associatedtype.TryType\" title=\"type std::ops::Residual::TryType\">TryType</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; R,\n    R: <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&lt;Output = <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;,\n    &lt;R as <a class=\"trait\" href=\"../ops/trait.Try.html\" title=\"trait std::ops::Try\">Try</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Try.html#associatedtype.Residual\" title=\"type std::ops::Try::Residual\">Residual</a>: <a class=\"trait\" href=\"../ops/trait.Residual.html\" title=\"trait std::ops::Residual\">Residual</a>&lt;<a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_find</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/63178\">#63178</a>)</span></div></span><div class=\"docblock\">Applies function to the elements of iterator and returns\nthe first true result or the first error. <a href=\"../iter/trait.Iterator.html#method.try_find\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.position-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3042-3045\">source</a></span><a href=\"#method.position-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;mut self, predicate: P) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\">Searches for an element in an iterator, returning its index. <a href=\"../iter/trait.Iterator.html#method.position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by_key-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3217-3220\">source</a></span><a href=\"#method.max_by_key-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by_key\" class=\"fn\">max_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.max_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max_by-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3251-3254\">source</a></span><a href=\"#method.max_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.max_by\" class=\"fn\">max_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the maximum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.max_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by_key-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3279-3282\">source</a></span><a href=\"#method.min_by_key-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by_key\" class=\"fn\">min_by_key</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; B,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value from the\nspecified function. <a href=\"../iter/trait.Iterator.html#method.min_by_key\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min_by-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3313-3316\">source</a></span><a href=\"#method.min_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.min_by\" class=\"fn\">min_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\">Returns the element that gives the minimum value with respect to the\nspecified comparison function. <a href=\"../iter/trait.Iterator.html#method.min_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.unzip\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3388-3392\">source</a></span><a href=\"#method.unzip\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.unzip\" class=\"fn\">unzip</a>&lt;A, B, FromA, FromB&gt;(self) -&gt; <a class=\"primitive\" href=\"../primitive.tuple.html\">(FromA, FromB)</a><div class=\"where\">where\n    FromA: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;A&gt;,\n    FromB: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> + <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;B&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.tuple.html\">(A, B)</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Converts an iterator of pairs into a pair of containers. <a href=\"../iter/trait.Iterator.html#method.unzip\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copied\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3419-3422\">source</a></span><a href=\"#method.copied\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.copied\" class=\"fn\">copied</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Copied.html\" title=\"struct std::iter::Copied\">Copied</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Copied<Self>\">ⓘ</a><div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which copies all of its elements. <a href=\"../iter/trait.Iterator.html#method.copied\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cloned\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3467-3470\">source</a></span><a href=\"#method.cloned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cloned\" class=\"fn\">cloned</a>&lt;'a, T&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.Cloned.html\" title=\"struct std::iter::Cloned\">Cloned</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Cloned<Self>\">ⓘ</a><div class=\"where\">where\n    T: 'a + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Creates an iterator which <a href=\"../clone/trait.Clone.html#tymethod.clone\" title=\"method std::clone::Clone::clone\"><code>clone</code></a>s all of its elements. <a href=\"../iter/trait.Iterator.html#method.cloned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3544-3546\">source</a><a href=\"#method.array_chunks-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(self) -&gt; <a class=\"struct\" href=\"../iter/struct.ArrayChunks.html\" title=\"struct std::iter::ArrayChunks\">ArrayChunks</a>&lt;Self, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks<Self, N>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/100450\">#100450</a>)</span></div></span><div class=\"docblock\">Returns an iterator over <code>N</code> elements of the iterator at a time. <a href=\"../iter/trait.Iterator.html#method.array_chunks\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sum-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3576-3579\">source</a></span><a href=\"#method.sum-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.sum\" class=\"fn\">sum</a>&lt;S&gt;(self) -&gt; S<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"../iter/trait.Sum.html\" title=\"trait std::iter::Sum\">Sum</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Sums the elements of an iterator. <a href=\"../iter/trait.Iterator.html#method.sum\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.product-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3609-3612\">source</a></span><a href=\"#method.product-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.product\" class=\"fn\">product</a>&lt;P&gt;(self) -&gt; P<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    P: <a class=\"trait\" href=\"../iter/trait.Product.html\" title=\"trait std::iter::Product\">Product</a>&lt;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Iterates over the entire iterator, multiplying all the elements <a href=\"../iter/trait.Iterator.html#method.product\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp_by-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3659-3663\">source</a><a href=\"#method.cmp_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.cmp_by\" class=\"fn\">cmp_by</a>&lt;I, F&gt;(self, other: I, cmp: F) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3716-3720\">source</a></span><a href=\"#method.partial_cmp-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp\" class=\"fn\">partial_cmp</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the <a href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> elements of\nthis <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those of another. The comparison works like short-circuit\nevaluation, returning a result without comparing the remaining elements.\nAs soon as an order can be determined, the evaluation stops and a result is returned. <a href=\"../iter/trait.Iterator.html#method.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp_by-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3753-3757\">source</a><a href=\"#method.partial_cmp_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\" class=\"fn\">partial_cmp_by</a>&lt;I, F&gt;(self, other: I, partial_cmp: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\"><a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">Lexicographically</a> compares the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> with those\nof another with respect to the specified comparison function. <a href=\"../iter/trait.Iterator.html#method.partial_cmp_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3787-3791\">source</a></span><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq\" class=\"fn\">eq</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_by-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3811-3815\">source</a><a href=\"#method.eq_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.eq_by\" class=\"fn\">eq_by</a>&lt;I, F&gt;(self, other: I, eq: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>iter_order_by</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/64295\">#64295</a>)</span></div></span><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are equal to those of\nanother with respect to the specified equality function. <a href=\"../iter/trait.Iterator.html#method.eq_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3844-3848\">source</a></span><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ne\" class=\"fn\">ne</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are not equal to those of\nanother. <a href=\"../iter/trait.Iterator.html#method.ne\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3866-3870\">source</a></span><a href=\"#method.lt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.lt\" class=\"fn\">lt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless than those of another. <a href=\"../iter/trait.Iterator.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3888-3892\">source</a></span><a href=\"#method.le-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.le\" class=\"fn\">le</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\nless or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3910-3914\">source</a></span><a href=\"#method.gt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.gt\" class=\"fn\">gt</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than those of another. <a href=\"../iter/trait.Iterator.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3932-3936\">source</a></span><a href=\"#method.ge-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.ge\" class=\"fn\">ge</a>&lt;I&gt;(self, other: I) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>,\n    Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" title=\"type std::iter::IntoIterator::Item\">Item</a>&gt;,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Determines if the elements of this <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> are <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>\ngreater than or equal to those of another. <a href=\"../iter/trait.Iterator.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#3993-3996\">source</a><a href=\"#method.is_sorted_by-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;F&gt;(self, compare: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(&amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>, &amp;Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given comparator function. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by_key-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/iterator.rs.html#4040-4044\">source</a><a href=\"#method.is_sorted_by_key-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;F, K&gt;(self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(Self::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span><div class=\"docblock\">Checks if the elements of this iterator are sorted using the given key extraction\nfunction. <a href=\"../iter/trait.Iterator.html#method.is_sorted_by_key\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1423\">source</a></span><a href=\"#impl-Ord-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1425\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1389\">source</a></span><a href=\"#impl-PartialEq-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1391\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1395\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1400\">source</a></span><a href=\"#impl-PartialOrd-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1402\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1406\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1410\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1414\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1418\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Pointer-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1962\">source</a></span><a href=\"#impl-Pointer-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../fmt/trait.Pointer.html\" title=\"trait std::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1963\">source</a><a href=\"#method.fmt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-Box%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#124-163\">source</a></span><a href=\"#impl-Read-for-Box%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#126-128\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#131-133\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#136-138\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#141-143\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#146-148\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#151-153\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#156-158\">source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#160-162\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Seek-for-Box%3CS%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#197-207\">source</a></span><a href=\"#impl-Seek-for-Box%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"../io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#199-201\">source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"../io/enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Seek to an offset, in bytes, in a stream. <a href=\"../io/trait.Seek.html#tymethod.seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#204-206\">source</a><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the current seek position from the start of the stream. <a href=\"../io/trait.Seek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Rewind to the beginning of a stream. <a href=\"../io/trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span><div class=\"docblock\">Returns the length of this stream (in bytes). <a href=\"../io/trait.Seek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2062-2065\">source</a></span><a href=\"#method.seek_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks relative to the current position. <a href=\"../io/trait.Seek.html#method.seek_relative\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1715\">source</a></span><a href=\"#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1727\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    boxed_slice: <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;, &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.</p>\n<p>The conversion occurs in-place and does not require a\nnew memory allocation.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns the old <code>Box&lt;[T]&gt;</code> in the <code>Err</code> variant if\n<code>boxed_slice.len()</code> does not equal <code>N</code>.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738\">source</a></span><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;, &lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.</p>\n<p>Like <a href=\"../vec/struct.Vec.html#method.into_boxed_slice\" title=\"method std::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a>, this is in-place if <code>vec.capacity() == N</code>,\nbut will require a reallocation otherwise.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns the original <code>Vec&lt;T&gt;</code> in the <code>Err</code> variant if\n<code>boxed_slice.len()</code> does not equal <code>N</code>.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<p>This can be used with <a href=\"../macro.vec.html\" title=\"macro std::vec\"><code>vec!</code></a> to create an array on the heap:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>state: Box&lt;[f32; <span class=\"number\">100</span>]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1.0</span>; <span class=\"number\">100</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(state.len(), <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-Box%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#165-195\">source</a></span><a href=\"#impl-Write-for-Box%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;W&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#167-169\">source</a><a href=\"#method.write-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#172-174\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#177-179\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#182-184\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#187-189\">source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#192-194\">source</a><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><section id=\"impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2108\">source</a><a href=\"#impl-CoerceUnsized%3CBox%3CU,+A%3E%3E-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DerefPure-for-Box%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1988\">source</a><a href=\"#impl-DerefPure-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2114\">source</a><a href=\"#impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Eq-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1430\">source</a></span><a href=\"#impl-Eq-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2056\">source</a></span><a href=\"#impl-FusedIterator-for-Box%3CI,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"../iter/trait.FusedIterator.html\" title=\"trait std::iter::FusedIterator\">FusedIterator</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.FusedIterator.html\" title=\"trait std::iter::FusedIterator\">FusedIterator</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Unpin-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2303\">source</a></span><a href=\"#impl-Unpin-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Box%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-34\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-34\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-35\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-35\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoAsyncIterator-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#156\">source</a><a href=\"#impl-IntoAsyncIterator-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"../async_iter/trait.IntoAsyncIterator.html\" title=\"trait std::async_iter::IntoAsyncIterator\">IntoAsyncIterator</a> for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"../async_iter/trait.AsyncIterator.html\" title=\"trait std::async_iter::AsyncIterator\">AsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.AsyncIterator.html#associatedtype.Item\" title=\"type std::async_iter::AsyncIterator::Item\">Item</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of the item yielded by the iterator</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoAsyncIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoAsyncIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.IntoAsyncIter\" class=\"associatedtype\">IntoAsyncIter</a> = I</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">The type of the resulting iterator</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_async_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/async_iter/async_iter.rs.html#160\">source</a><a href=\"#method.into_async_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../async_iter/trait.IntoAsyncIterator.html#tymethod.into_async_iter\" class=\"fn\">into_async_iter</a>(self) -&gt; &lt;I as <a class=\"trait\" href=\"../async_iter/trait.IntoAsyncIterator.html\" title=\"trait std::async_iter::IntoAsyncIterator\">IntoAsyncIterator</a>&gt;::<a class=\"associatedtype\" href=\"../async_iter/trait.IntoAsyncIterator.html#associatedtype.IntoAsyncIter\" title=\"type std::async_iter::IntoAsyncIterator::IntoAsyncIter\">IntoAsyncIter</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>async_iterator</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/79024\">#79024</a>)</span></div></span><div class=\"docblock\">Converts <code>self</code> into an async iterator</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoFuture-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#138\">source</a><a href=\"#impl-IntoFuture-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;F as <a class=\"trait\" href=\"../future/trait.Future.html\" title=\"trait std::future::Future\">Future</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.Future.html#associatedtype.Output\" title=\"type std::future::Future::Output\">Output</a></h4></section></summary><div class=\"docblock\">The output that the future will produce on completion.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoFuture\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoFuture\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" class=\"associatedtype\">IntoFuture</a> = F</h4></section></summary><div class=\"docblock\">Which kind of future are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_future\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/future/into_future.rs.html#142\">source</a><a href=\"#method.into_future\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\" class=\"fn\">into_future</a>(self) -&gt; &lt;F as <a class=\"trait\" href=\"../future/trait.IntoFuture.html\" title=\"trait std::future::IntoFuture\">IntoFuture</a>&gt;::<a class=\"associatedtype\" href=\"../future/trait.IntoFuture.html#associatedtype.IntoFuture\" title=\"type std::future::IntoFuture::IntoFuture\">IntoFuture</a></h4></section></summary><div class=\"docblock\">Creates a future from a value. <a href=\"../future/trait.IntoFuture.html#tymethod.into_future\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-IntoIterator-for-I\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#350\">source</a><a href=\"#impl-IntoIterator-for-I\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for I<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;I as <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"type std::iter::Iterator::Item\">Item</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = I</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#355\">source</a><a href=\"#method.into_iter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; I</h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Pattern%3C'a%3E-for-F\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#922-924\">source</a><a href=\"#impl-Pattern%3C'a%3E-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"../str/pattern/trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\">Pattern</a>&lt;'a&gt; for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Searcher\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../str/pattern/trait.Pattern.html#associatedtype.Searcher\" class=\"associatedtype\">Searcher</a> = <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Associated searcher for this pattern</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_searcher\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.into_searcher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#tymethod.into_searcher\" class=\"fn\">into_searcher</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Constructs the associated searcher from\n<code>self</code> and the <code>haystack</code> to search in.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_contained_in\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_contained_in\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_contained_in\" class=\"fn\">is_contained_in</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches anywhere in the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_prefix_of\" class=\"fn\">is_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the front of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.strip_prefix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.strip_prefix_of\" class=\"fn\">strip_prefix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the front of haystack, if it matches.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.is_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.is_suffix_of\" class=\"fn\">is_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;: <a class=\"trait\" href=\"../str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Checks whether the pattern matches at the back of the haystack</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#926\">source</a><a href=\"#method.strip_suffix_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../str/pattern/trait.Pattern.html#method.strip_suffix_of\" class=\"fn\">strip_suffix_of</a>(self, haystack: &amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../str/pattern/struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;: <a class=\"trait\" href=\"../str/pattern/trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt;,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><div class=\"docblock\">Removes the pattern from the back of haystack, if it matches.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"ArrayChunks<Self, N>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.ArrayChunks.html\\\" title=\\\"struct std::iter::ArrayChunks\\\">ArrayChunks</a>&lt;I, N&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, const N: <a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.ArrayChunks.html\\\" title=\\\"struct std::iter::ArrayChunks\\\">ArrayChunks</a>&lt;I, N&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = [&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>; <a class=\\\"primitive\\\" href=\\\"../primitive.array.html\\\">N</a>];</div>\",\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, <U as IntoIterator>::IntoIter>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Chain.html\\\" title=\\\"struct std::iter::Chain\\\">Chain</a>&lt;A, B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A, B&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Chain.html\\\" title=\\\"struct std::iter::Chain\\\">Chain</a>&lt;A, B&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    B: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&lt;Item = &lt;A as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;A as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Cloned<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Cloned.html\\\" title=\\\"struct std::iter::Cloned\\\">Cloned</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, I, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Cloned.html\\\" title=\\\"struct std::iter::Cloned\\\">Cloned</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    T: 'a + <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a>,\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&lt;Item = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Copied<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Copied.html\\\" title=\\\"struct std::iter::Copied\\\">Copied</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, I, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Copied.html\\\" title=\\\"struct std::iter::Copied\\\">Copied</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    T: 'a + <a class=\\\"trait\\\" href=\\\"../marker/trait.Copy.html\\\" title=\\\"trait std::marker::Copy\\\">Copy</a>,\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&lt;Item = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Cycle<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Cycle.html\\\" title=\\\"struct std::iter::Cycle\\\">Cycle</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Cycle.html\\\" title=\\\"struct std::iter::Cycle\\\">Cycle</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../clone/trait.Clone.html\\\" title=\\\"trait std::clone::Clone\\\">Clone</a> + <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Enumerate<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Enumerate.html\\\" title=\\\"struct std::iter::Enumerate\\\">Enumerate</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Enumerate.html\\\" title=\\\"struct std::iter::Enumerate\\\">Enumerate</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (<a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>, &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>);</div>\",\"Filter<Self, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Filter.html\\\" title=\\\"struct std::iter::Filter\\\">Filter</a>&lt;I, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Filter.html\\\" title=\\\"struct std::iter::Filter\\\">Filter</a>&lt;I, P&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"FilterMap<Self, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.FilterMap.html\\\" title=\\\"struct std::iter::FilterMap\\\">FilterMap</a>&lt;I, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B, I, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.FilterMap.html\\\" title=\\\"struct std::iter::FilterMap\\\">FilterMap</a>&lt;I, F&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"enum\\\" href=\\\"../option/enum.Option.html\\\" title=\\\"enum std::option::Option\\\">Option</a>&lt;B&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = B;</div>\",\"FlatMap<Self, U, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.FlatMap.html\\\" title=\\\"struct std::iter::FlatMap\\\">FlatMap</a>&lt;I, U, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, U, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.FlatMap.html\\\" title=\\\"struct std::iter::FlatMap\\\">FlatMap</a>&lt;I, U, F&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    U: <a class=\\\"trait\\\" href=\\\"../iter/trait.IntoIterator.html\\\" title=\\\"trait std::iter::IntoIterator\\\">IntoIterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; U,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;U as <a class=\\\"trait\\\" href=\\\"../iter/trait.IntoIterator.html\\\" title=\\\"trait std::iter::IntoIterator\\\">IntoIterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.IntoIterator.html#associatedtype.Item\\\" title=\\\"type std::iter::IntoIterator::Item\\\">Item</a>;</div>\",\"Fuse<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Fuse.html\\\" title=\\\"struct std::iter::Fuse\\\">Fuse</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Fuse.html\\\" title=\\\"struct std::iter::Fuse\\\">Fuse</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Inspect<Self, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Inspect.html\\\" title=\\\"struct std::iter::Inspect\\\">Inspect</a>&lt;I, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Inspect.html\\\" title=\\\"struct std::iter::Inspect\\\">Inspect</a>&lt;I, F&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>),</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"IntersperseWith<Self, G>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.IntersperseWith.html\\\" title=\\\"struct std::iter::IntersperseWith\\\">IntersperseWith</a>&lt;I, G&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, G&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.IntersperseWith.html\\\" title=\\\"struct std::iter::IntersperseWith\\\">IntersperseWith</a>&lt;I, G&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    G: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>() -&gt; &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"IntoIter<I, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../vec/struct.IntoIter.html\\\" title=\\\"struct std::vec::IntoIter\\\">IntoIter</a>&lt;T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../vec/struct.IntoIter.html\\\" title=\\\"struct std::vec::IntoIter\\\">IntoIter</a>&lt;T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Iter<'a, I>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IterMut<'a, I>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\",\"Lines<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"../io/trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../string/struct.String.html\\\" title=\\\"struct std::string::String\\\">String</a>&gt;;</div>\",\"Map<Self, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Map.html\\\" title=\\\"struct std::iter::Map\\\">Map</a>&lt;I, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B, I, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Map.html\\\" title=\\\"struct std::iter::Map\\\">Map</a>&lt;I, F&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; B,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = B;</div>\",\"MapWhile<Self, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.MapWhile.html\\\" title=\\\"struct std::iter::MapWhile\\\">MapWhile</a>&lt;I, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B, I, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.MapWhile.html\\\" title=\\\"struct std::iter::MapWhile\\\">MapWhile</a>&lt;I, P&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"enum\\\" href=\\\"../option/enum.Option.html\\\" title=\\\"enum std::option::Option\\\">Option</a>&lt;B&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = B;</div>\",\"MapWindows<Self, F, N>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.MapWindows.html\\\" title=\\\"struct std::iter::MapWindows\\\">MapWindows</a>&lt;I, F, N&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, F, R, const N: <a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.MapWindows.html\\\" title=\\\"struct std::iter::MapWindows\\\">MapWindows</a>&lt;I, F, N&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;[&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>; <a class=\\\"primitive\\\" href=\\\"../primitive.array.html\\\">N</a>]) -&gt; R,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = R;</div>\",\"Peekable<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Peekable.html\\\" title=\\\"struct std::iter::Peekable\\\">Peekable</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Peekable.html\\\" title=\\\"struct std::iter::Peekable\\\">Peekable</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Scan<Self, St, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Scan.html\\\" title=\\\"struct std::iter::Scan\\\">Scan</a>&lt;I, St, F&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B, I, St, F&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Scan.html\\\" title=\\\"struct std::iter::Scan\\\">Scan</a>&lt;I, St, F&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;mut St</a>, &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"enum\\\" href=\\\"../option/enum.Option.html\\\" title=\\\"enum std::option::Option\\\">Option</a>&lt;B&gt;,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = B;</div>\",\"Skip<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Skip.html\\\" title=\\\"struct std::iter::Skip\\\">Skip</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Skip.html\\\" title=\\\"struct std::iter::Skip\\\">Skip</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"SkipWhile<Self, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.SkipWhile.html\\\" title=\\\"struct std::iter::SkipWhile\\\">SkipWhile</a>&lt;I, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.SkipWhile.html\\\" title=\\\"struct std::iter::SkipWhile\\\">SkipWhile</a>&lt;I, P&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Split<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"../io/trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;&gt;;</div>\",\"StepBy<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.StepBy.html\\\" title=\\\"struct std::iter::StepBy\\\">StepBy</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.StepBy.html\\\" title=\\\"struct std::iter::StepBy\\\">StepBy</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Take.html\\\" title=\\\"struct std::iter::Take\\\">Take</a>&lt;I&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Take.html\\\" title=\\\"struct std::iter::Take\\\">Take</a>&lt;I&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"TakeWhile<Self, P>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.TakeWhile.html\\\" title=\\\"struct std::iter::TakeWhile\\\">TakeWhile</a>&lt;I, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.TakeWhile.html\\\" title=\\\"struct std::iter::TakeWhile\\\">TakeWhile</a>&lt;I, P&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(&amp;&lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Zip<Self, <U as IntoIterator>::IntoIter>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../iter/struct.Zip.html\\\" title=\\\"struct std::iter::Zip\\\">Zip</a>&lt;A, B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A, B&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../iter/struct.Zip.html\\\" title=\\\"struct std::iter::Zip\\\">Zip</a>&lt;A, B&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    B: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (&lt;A as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>, &lt;B as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>);</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:45.228Z"
}