{
	"title": "escape_default in std::ascii - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ascii/fn.escape_default.html",
	"markdown": "# escape\\_default in std::ascii - Rust\n\n```\npub fn escape_default(c: u8) -> EscapeDefault ⓘ\n```\n\nExpand description\n\nReturns an iterator that produces an escaped version of a `u8`.\n\nThe default is chosen with a bias toward producing literals that are legal in a variety of languages, including C++11 and similar C-family languages. The exact rules are:\n\n-   Tab is escaped as `\\t`.\n-   Carriage return is escaped as `\\r`.\n-   Line feed is escaped as `\\n`.\n-   Single quote is escaped as `\\'`.\n-   Double quote is escaped as `\\\"`.\n-   Backslash is escaped as `\\\\`.\n-   Any character in the ‘printable ASCII’ range `0x20` .. `0x7e` inclusive is not escaped.\n-   Any other chars are given hex escapes of the form ‘\\\\xNN’.\n-   Unicode escapes are never generated by this function.\n\n## [§](#examples)Examples\n\n```\nuse std::ascii;\n\nlet escaped = ascii::escape_default(b'0').next().unwrap();\nassert_eq!(b'0', escaped);\n\nlet mut escaped = ascii::escape_default(b'\\t');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b't', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\\r');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'r', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\\n');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'n', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\\'');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'\\'', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\"');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'\"', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\\\\');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'\\\\', escaped.next().unwrap());\n\nlet mut escaped = ascii::escape_default(b'\\x9d');\n\nassert_eq!(b'\\\\', escaped.next().unwrap());\nassert_eq!(b'x', escaped.next().unwrap());\nassert_eq!(b'9', escaped.next().unwrap());\nassert_eq!(b'd', escaped.next().unwrap());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ascii;%0A++++%0A++++let+escaped+=+ascii::escape_default(b%270%27).next().unwrap();%0A++++assert_eq!(b%270%27,+escaped);%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5Ct%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27t%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5Cr%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27r%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5Cn%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27n%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5C%27%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27%5C%27%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%22%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27%22%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5C%5C%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b%27%5Cx9d%27);%0A++++%0A++++assert_eq!(b%27%5C%5C%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27x%27,+escaped.next().unwrap());%0A++++assert_eq!(b%279%27,+escaped.next().unwrap());%0A++++assert_eq!(b%27d%27,+escaped.next().unwrap());%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns an iterator that produces an escaped version of a `u8`.\"><title>escape_default in std::ascii - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ascii</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.EscapeDefault.html\">EscapeDefault</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Char.html\">Char</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsciiExt.html\">AsciiExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.escape_default.html\">escape_default</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ascii</a>::<wbr><a class=\"fn\" href=\"#\">escape_default</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii.rs.html#93\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn escape_default(c: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.EscapeDefault.html\" title=\"struct std::ascii::EscapeDefault\">EscapeDefault</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeDefault\">ⓘ</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns an iterator that produces an escaped version of a <code>u8</code>.</p>\n<p>The default is chosen with a bias toward producing literals that are\nlegal in a variety of languages, including C++11 and similar C-family\nlanguages. The exact rules are:</p>\n<ul>\n<li>Tab is escaped as <code>\\t</code>.</li>\n<li>Carriage return is escaped as <code>\\r</code>.</li>\n<li>Line feed is escaped as <code>\\n</code>.</li>\n<li>Single quote is escaped as <code>\\'</code>.</li>\n<li>Double quote is escaped as <code>\\\"</code>.</li>\n<li>Backslash is escaped as <code>\\\\</code>.</li>\n<li>Any character in the ‘printable ASCII’ range <code>0x20</code> .. <code>0x7e</code>\ninclusive is not escaped.</li>\n<li>Any other chars are given hex escapes of the form ‘\\xNN’.</li>\n<li>Unicode escapes are never generated by this function.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ascii;\n\n<span class=\"kw\">let </span>escaped = ascii::escape_default(<span class=\"string\">b'0'</span>).next().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'0'</span>, escaped);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\t'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b't'</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\r'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'r'</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\n'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'n'</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\''</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\''</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\"'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\"'</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\\\'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>escaped = ascii::escape_default(<span class=\"string\">b'\\x9d'</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'\\\\'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'x'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'9'</span>, escaped.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b'd'</span>, escaped.next().unwrap());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ascii;%0A++++%0A++++let+escaped+=+ascii::escape_default(b'0').next().unwrap();%0A++++assert_eq!(b'0',+escaped);%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5Ct');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b't',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5Cr');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'r',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5Cn');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'n',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5C'');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'%5C'',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%22');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'%22',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5C%5C');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++%0A++++let+mut+escaped+=+ascii::escape_default(b'%5Cx9d');%0A++++%0A++++assert_eq!(b'%5C%5C',+escaped.next().unwrap());%0A++++assert_eq!(b'x',+escaped.next().unwrap());%0A++++assert_eq!(b'9',+escaped.next().unwrap());%0A++++assert_eq!(b'd',+escaped.next().unwrap());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"EscapeDefault\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.EscapeDefault.html\\\" title=\\\"struct std::ascii::EscapeDefault\\\">EscapeDefault</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.EscapeDefault.html\\\" title=\\\"struct std::ascii::EscapeDefault\\\">EscapeDefault</a></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:21:56.958Z"
}