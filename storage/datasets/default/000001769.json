{
	"title": "Transitioning an existing project to a new edition - The Rust Edition Guide",
	"url": "https://doc.rust-lang.org/stable/edition-guide/editions/transitioning-an-existing-project-to-a-new-edition.html",
	"markdown": "# Transitioning an existing project to a new edition\n\nRust includes tooling to automatically transition a project from one edition to the next. It will update your source code so that it is compatible with the next edition. Briefly, the steps to update to the next edition are:\n\n1.  Run `cargo fix --edition`\n2.  Edit `Cargo.toml` and set the `edition` field to the next edition, for example `edition = \"2021\"`\n3.  Run `cargo build` or `cargo test` to verify the fixes worked.\n\nThe following sections dig into the details of these steps, and some of the issues you may encounter along the way.\n\n> It's our intention that the migration to new editions is as smooth an experience as possible. If it's difficult for you to upgrade to the latest edition, we consider that a bug. If you run into problems with this process, please [file a bug report](https://github.com/rust-lang/rust/issues/new/choose). Thank you!\n\n## [Starting the migration](#starting-the-migration)\n\nAs an example, let's take a look at transitioning from the 2015 edition to the 2018 edition. The steps are essentially the same when transitioning to other editions like 2021.\n\nImagine we have a crate that has this code in `src/lib.rs`:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Foo {\n    fn foo(&self, i32);\n}\n}\n```\n\nThis code uses an anonymous parameter, that `i32`. This is [not supported in Rust 2018](../rust-2018/trait-system/no-anon-params.html), and so this would fail to compile. Let's get this code up to date!\n\n## [Updating your code to be compatible with the new edition](#updating-your-code-to-be-compatible-with-the-new-edition)\n\nYour code may or may not use features that are incompatible with the new edition. In order to help transition to the next edition, Cargo includes the [`cargo fix`](../../cargo/commands/cargo-fix.html) subcommand to automatically update your source code. To start, let's run it:\n\n```console\ncargo fix --edition\n\n```\n\nThis will check your code, and automatically fix any issues that it can. Let's look at `src/lib.rs` again:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Foo {\n    fn foo(&self, _: i32);\n}\n}\n```\n\nIt's re-written our code to introduce a parameter name for that `i32` value. In this case, since it had no name, `cargo fix` will replace it with `_`, which is conventional for unused variables.\n\n`cargo fix` can't always fix your code automatically. If `cargo fix` can't fix something, it will print the warning that it cannot fix to the console. If you see one of these warnings, you'll have to update your code manually. See the [Advanced migration strategies](advanced-migrations.html) chapter for more on working with the migration process, and read the chapters in this guide which explain which changes are needed. If you have problems, please seek help at the [user's forums](https://users.rust-lang.org/).\n\n## [Enabling the new edition to use new features](#enabling-the-new-edition-to-use-new-features)\n\nIn order to use some new features, you must explicitly opt in to the new edition. Once you're ready to continue, change your `Cargo.toml` to add the new `edition` key/value pair. For example:\n\n```toml\n[package]\nname = \"foo\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n```\n\nIf there's no `edition` key, Cargo will default to Rust 2015. But in this case, we've chosen `2018`, and so our code will compile with Rust 2018!\n\nThe next step is to test your project on the new edition. Run your project tests to verify that everything still works, such as running [`cargo test`](../../cargo/commands/cargo-test.html). If new warnings are issued, you may want to consider running `cargo fix` again (without the `--edition` flag) to apply any suggestions given by the compiler.\n\nCongrats! Your code is now valid in both Rust 2015 and Rust 2018!\n\n## [Migrating to an unstable edition](#migrating-to-an-unstable-edition)\n\nAfter an edition is released, there is roughly a three year window before the next edition. During that window, new features may be added to the next edition, which will only be available on the [nightly channel](../../book/appendix-07-nightly-rust.html). If you want to help test those new features before they are stabilized, you can use the nightly channel to try them out.\n\nThe steps are roughly similar to the stable channel:\n\n1.  Install the most recent nightly: `rustup update nightly`.\n2.  Run `cargo +nightly fix --edition`.\n3.  Edit `Cargo.toml` and place `cargo-features = [\"edition2024\"]` at the top (above `[package]`), and change the edition field to say `edition = \"2024\"`.\n4.  Run `cargo +nightly check` to verify it now works in the new edition.\n\n> **âš  Caution**: Features implemented in the next edition may not have automatic migrations implemented with `cargo fix`, and the features themselves may not be finished. When possible, this guide should contain information about which features are implemented on nightly along with more information about their status. A few months before the edition is stabilized, all of the new features should be fully implemented, and the [Rust Blog](https://blog.rust-lang.org/) will announce a call for testing.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Transitioning an existing project to a new edition - The Rust Edition Guide</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> What are editions?</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../editions/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Creating a new project</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/transitioning-an-existing-project-to-a-new-edition.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Transitioning an existing project to a new edition</a></li><li class=\"chapter-item expanded \"><a href=\"../editions/advanced-migrations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Advanced migrations</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2015/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Rust 2015</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Rust 2018</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2018/path-changes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Path and module system changes</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/trait-fn-parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Anonymous trait function parameters deprecated</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/new-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> New keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/tyvar-behind-raw-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Method dispatch for raw pointers to inference variables</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2018/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Cargo changes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Rust 2021</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2021/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/default-cargo-resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Default Cargo feature resolver</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/IntoIterator-for-arrays.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> IntoIterator for arrays</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/disjoint-capture-in-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Disjoint capture in closures</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/panic-macro-consistency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Panic macro consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/reserving-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.6.</strong> Reserving syntax</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/warnings-promoted-to-error.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.7.</strong> Warnings promoted to errors</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/or-patterns-macro-rules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.8.</strong> Or patterns in macro-rules</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2021/c-string-literals.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.9.</strong> C-string literals</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Rust 2024 ðŸš§</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../rust-2024/prelude.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Additions to the prelude</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/unsafe-op-in-unsafe-fn.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> unsafe_op_in_unsafe_fn warning</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rpit-lifetime-capture.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> RPIT lifetime capture</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/static-mut-reference.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.4.</strong> Disallow references to static mut</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/public-private-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.5.</strong> Public/private dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-remove-implicit-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.6.</strong> Cargo: Remove implicit features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-table-key-names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.7.</strong> Cargo: Table and key name consistency</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/cargo-inherited-default-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.8.</strong> Cargo: Reject unused inherited default-features</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/rustfmt-overflow-delimited-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.9.</strong> Rustfmt: Combine all delimited exprs as last argument</a></li><li class=\"chapter-item expanded \"><a href=\"../rust-2024/gen-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.10.</strong> gen keyword</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Edition Guide</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/edition-guide/edit/master/src/editions/transitioning-an-existing-project-to-a-new-edition.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"transitioning-an-existing-project-to-a-new-edition\"><a class=\"header\" href=\"#transitioning-an-existing-project-to-a-new-edition\">Transitioning an existing project to a new edition</a></h1>\n<p>Rust includes tooling to automatically transition a project from one edition to the next.\nIt will update your source code so that it is compatible with the next edition.\nBriefly, the steps to update to the next edition are:</p>\n<ol>\n<li>Run <code class=\"hljs\">cargo fix --edition</code></li>\n<li>Edit <code class=\"hljs\">Cargo.toml</code> and set the <code class=\"hljs\">edition</code> field to the next edition, for example <code class=\"hljs\">edition = \"2021\"</code></li>\n<li>Run <code class=\"hljs\">cargo build</code> or <code class=\"hljs\">cargo test</code> to verify the fixes worked.</li>\n</ol>\n<p>The following sections dig into the details of these steps, and some of the issues you may encounter along the way.</p>\n<blockquote>\n<p>It's our intention that the migration to new editions is as smooth an\nexperience as possible. If it's difficult for you to upgrade to the latest edition,\nwe consider that a bug. If you run into problems with this process, please\n<a href=\"https://github.com/rust-lang/rust/issues/new/choose\">file a bug report</a>. Thank you!</p>\n</blockquote>\n<h2 id=\"starting-the-migration\"><a class=\"header\" href=\"#starting-the-migration\">Starting the migration</a></h2>\n<p>As an example, let's take a look at transitioning from the 2015 edition to the 2018 edition.\nThe steps are essentially the same when transitioning to other editions like 2021.</p>\n<p>Imagine we have a crate that has this code in <code class=\"hljs\">src/lib.rs</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, <span class=\"hljs-built_in\">i32</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code uses an anonymous parameter, that <code class=\"hljs\">i32</code>. This is <a href=\"../rust-2018/trait-system/no-anon-params.html\">not\nsupported in Rust 2018</a>, and\nso this would fail to compile. Let's get this code up to date!</p>\n<h2 id=\"updating-your-code-to-be-compatible-with-the-new-edition\"><a class=\"header\" href=\"#updating-your-code-to-be-compatible-with-the-new-edition\">Updating your code to be compatible with the new edition</a></h2>\n<p>Your code may or may not use features that are incompatible with the new edition.\nIn order to help transition to the next edition, Cargo includes the <a href=\"../../cargo/commands/cargo-fix.html\"><code class=\"hljs\">cargo fix</code></a> subcommand to automatically update your source code.\nTo start, let's run it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">cargo fix --edition\n</code></pre>\n<p>This will check your code, and automatically fix any issues that it can.\nLet's look at <code class=\"hljs\">src/lib.rs</code> again:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, _: <span class=\"hljs-built_in\">i32</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>It's re-written our code to introduce a parameter name for that <code class=\"hljs\">i32</code> value.\nIn this case, since it had no name, <code class=\"hljs\">cargo fix</code> will replace it with <code class=\"hljs\">_</code>,\nwhich is conventional for unused variables.</p>\n<p><code class=\"hljs\">cargo fix</code> can't always fix your code automatically.\nIf <code class=\"hljs\">cargo fix</code> can't fix something, it will print the warning that it cannot fix\nto the console. If you see one of these warnings, you'll have to update your code manually.\nSee the <a href=\"advanced-migrations.html\">Advanced migration strategies</a> chapter for more on working with the migration process, and read the chapters in this guide which explain which changes are needed.\nIf you have problems, please seek help at the <a href=\"https://users.rust-lang.org/\">user's forums</a>.</p>\n<h2 id=\"enabling-the-new-edition-to-use-new-features\"><a class=\"header\" href=\"#enabling-the-new-edition-to-use-new-features\">Enabling the new edition to use new features</a></h2>\n<p>In order to use some new features, you must explicitly opt in to the new\nedition. Once you're ready to continue, change your <code class=\"hljs\">Cargo.toml</code> to add the new\n<code class=\"hljs\">edition</code> key/value pair. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"foo\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2018\"</span>\n</code></pre>\n<p>If there's no <code class=\"hljs\">edition</code> key, Cargo will default to Rust 2015. But in this case,\nwe've chosen <code class=\"hljs\">2018</code>, and so our code will compile with Rust 2018!</p>\n<p>The next step is to test your project on the new edition.\nRun your project tests to verify that everything still works, such as running <a href=\"../../cargo/commands/cargo-test.html\"><code class=\"hljs\">cargo test</code></a>.\nIf new warnings are issued, you may want to consider running <code class=\"hljs\">cargo fix</code> again (without the <code class=\"hljs\">--edition</code> flag) to apply any suggestions given by the compiler.</p>\n<p>Congrats! Your code is now valid in both Rust 2015 and Rust 2018!</p>\n<h2 id=\"migrating-to-an-unstable-edition\"><a class=\"header\" href=\"#migrating-to-an-unstable-edition\">Migrating to an unstable edition</a></h2>\n<p>After an edition is released, there is roughly a three year window before the next edition.\nDuring that window, new features may be added to the next edition, which will only be available on the <a href=\"../../book/appendix-07-nightly-rust.html\">nightly channel</a>.\nIf you want to help test those new features before they are stabilized, you can use the nightly channel to try them out.</p>\n<p>The steps are roughly similar to the stable channel:</p>\n<ol>\n<li>Install the most recent nightly: <code class=\"hljs\">rustup update nightly</code>.</li>\n<li>Run <code class=\"hljs\">cargo +nightly fix --edition</code>.</li>\n<li>Edit <code class=\"hljs\">Cargo.toml</code> and place <code class=\"hljs\">cargo-features = [\"edition2024\"]</code> at the top (above <code class=\"hljs\">[package]</code>), and change the edition field to say <code class=\"hljs\">edition = \"2024\"</code>.</li>\n<li>Run <code class=\"hljs\">cargo +nightly check</code> to verify it now works in the new edition.</li>\n</ol>\n<blockquote>\n<p><strong>âš  Caution</strong>: Features implemented in the next edition may not have automatic migrations implemented with <code class=\"hljs\">cargo fix</code>, and the features themselves may not be finished.\nWhen possible, this guide should contain information about which features are implemented\non nightly along with more information about their status.\nA few months before the edition is stabilized, all of the new features should be fully implemented, and the <a href=\"https://blog.rust-lang.org/\">Rust Blog</a> will announce a call for testing.</p>\n</blockquote>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../editions/creating-a-new-project.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../editions/advanced-migrations.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../editions/creating-a-new-project.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../editions/advanced-migrations.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:20:29.831Z"
}