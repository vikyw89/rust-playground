{
	"title": "discriminant in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.discriminant.html",
	"markdown": "# discriminant in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[discriminant](#)\n\n1.21.0 (const: 1.75.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1162) ·\n\n```\npub const fn discriminant<T>(v: &T) -> Discriminant<T>\n```\n\nExpand description\n\nReturns a value uniquely identifying the enum variant in `v`.\n\nIf `T` is not an enum, calling this function will not result in undefined behavior, but the return value is unspecified.\n\n## [§](#stability)Stability\n\nThe discriminant of an enum variant may change if the enum definition changes. A discriminant of some variant will not change between compilations with the same compiler. See the [Reference](about:blank/reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations) for more information.\n\nThe value of a [`Discriminant<T>`](struct.Discriminant.html \"struct std::mem::Discriminant\") is independent of any _free lifetimes_ in `T`. As such, reading or writing a `Discriminant<Foo<'a>>` as a `Discriminant<Foo<'b>>` (whether via [`transmute`](fn.transmute.html \"fn std::mem::transmute\") or otherwise) is always sound. Note that this is **not** true for other kinds of generic parameters and for higher-ranked lifetimes; `Discriminant<Foo<A>>` and `Discriminant<Foo<B>>` as well as `Discriminant<Bar<dyn for<'a> Trait<'a>>>` and `Discriminant<Bar<dyn Trait<'static>>>` may be incompatible.\n\n## [§](#examples)Examples\n\nThis can be used to compare enums that carry data, while disregarding the actual data:\n\n```\nuse std::mem;\n\nenum Foo { A(&'static str), B(i32), C(i32) }\n\nassert_eq!(mem::discriminant(&Foo::A(\"bar\")), mem::discriminant(&Foo::A(\"baz\")));\nassert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));\nassert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++enum+Foo+%7B+A(%26%27static+str),+B(i32),+C(i32)+%7D%0A++++%0A++++assert_eq!(mem::discriminant(%26Foo::A(%22bar%22)),+mem::discriminant(%26Foo::A(%22baz%22)));%0A++++assert_eq!(mem::discriminant(%26Foo::B(1)),+mem::discriminant(%26Foo::B(2)));%0A++++assert_ne!(mem::discriminant(%26Foo::B(3)),+mem::discriminant(%26Foo::C(3)));%0A%7D&edition=2021)\n\n### [§](#accessing-the-numeric-value-of-the-discriminant)Accessing the numeric value of the discriminant\n\nNote that it is _undefined behavior_ to [`transmute`](fn.transmute.html \"fn std::mem::transmute\") from [`Discriminant`](struct.Discriminant.html \"struct std::mem::Discriminant\") to a primitive!\n\nIf an enum has only unit variants, then the numeric value of the discriminant can be accessed with an [`as`](../../std/keyword.as.html) cast:\n\n```\nenum Enum {\n    Foo,\n    Bar,\n    Baz,\n}\n\nassert_eq!(0, Enum::Foo as isize);\nassert_eq!(1, Enum::Bar as isize);\nassert_eq!(2, Enum::Baz as isize);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++enum+Enum+%7B%0A++++++++Foo,%0A++++++++Bar,%0A++++++++Baz,%0A++++%7D%0A++++%0A++++assert_eq!(0,+Enum::Foo+as+isize);%0A++++assert_eq!(1,+Enum::Bar+as+isize);%0A++++assert_eq!(2,+Enum::Baz+as+isize);%0A%7D&edition=2021)\n\nIf an enum has opted-in to having a [primitive representation](about:blank/reference/type-layout.html#primitive-representations) for its discriminant, then it’s possible to use pointers to read the memory location storing the discriminant. That **cannot** be done for enums using the [default representation](about:blank/reference/type-layout.html#the-default-representation), however, as it’s undefined what layout the discriminant has and where it’s stored — it might not even be stored at all!\n\n```\n#[repr(u8)]\nenum Enum {\n    Unit,\n    Tuple(bool),\n    Struct { a: bool },\n}\n\nimpl Enum {\n    fn discriminant(&self) -> u8 {\n        // SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n        // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n        // field, so we can read the discriminant without offsetting the pointer.\n        unsafe { *<*const _>::from(self).cast::<u8>() }\n    }\n}\n\nlet unit_like = Enum::Unit;\nlet tuple_like = Enum::Tuple(true);\nlet struct_like = Enum::Struct { a: false };\nassert_eq!(0, unit_like.discriminant());\nassert_eq!(1, tuple_like.discriminant());\nassert_eq!(2, struct_like.discriminant());\n\n// ⚠️ This is undefined behavior. Don't do this. ⚠️\n// assert_eq!(0, unsafe { std::mem::transmute::<_, u8>(std::mem::discriminant(&unit_like)) });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Brepr(u8)%5D%0A++++enum+Enum+%7B%0A++++++++Unit,%0A++++++++Tuple(bool),%0A++++++++Struct+%7B+a:+bool+%7D,%0A++++%7D%0A++++%0A++++impl+Enum+%7B%0A++++++++fn+discriminant(%26self)+-%3E+u8+%7B%0A++++++++++++//+SAFETY:+Because+%60Self%60+is+marked+%60repr(u8)%60,+its+layout+is+a+%60repr(C)%60+%60union%60%0A++++++++++++//+between+%60repr(C)%60+structs,+each+of+which+has+the+%60u8%60+discriminant+as+its+first%0A++++++++++++//+field,+so+we+can+read+the+discriminant+without+offsetting+the+pointer.%0A++++++++++++unsafe+%7B+*%3C*const+_%3E::from(self).cast::%3Cu8%3E()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+unit_like+=+Enum::Unit;%0A++++let+tuple_like+=+Enum::Tuple(true);%0A++++let+struct_like+=+Enum::Struct+%7B+a:+false+%7D;%0A++++assert_eq!(0,+unit_like.discriminant());%0A++++assert_eq!(1,+tuple_like.discriminant());%0A++++assert_eq!(2,+struct_like.discriminant());%0A++++%0A++++//+%E2%9A%A0%EF%B8%8F+This+is+undefined+behavior.+Don%27t+do+this.+%E2%9A%A0%EF%B8%8F%0A++++//+assert_eq!(0,+unsafe+%7B+std::mem::transmute::%3C_,+u8%3E(std::mem::discriminant(%26unit_like))+%7D);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns a value uniquely identifying the enum variant in `v`.\"><title>discriminant in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">discriminant</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.21.0, const since 1.75.0\">1.21.0 (const: 1.75.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#1162\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn discriminant&lt;T&gt;(v: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"struct.Discriminant.html\" title=\"struct std::mem::Discriminant\">Discriminant</a>&lt;T&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns a value uniquely identifying the enum variant in <code>v</code>.</p>\n<p>If <code>T</code> is not an enum, calling this function will not result in undefined behavior, but the\nreturn value is unspecified.</p>\n<h2 id=\"stability\"><a class=\"doc-anchor\" href=\"#stability\">§</a>Stability</h2>\n<p>The discriminant of an enum variant may change if the enum definition changes. A discriminant\nof some variant will not change between compilations with the same compiler. See the <a href=\"../../reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations\">Reference</a>\nfor more information.</p>\n<p>The value of a <a href=\"struct.Discriminant.html\" title=\"struct std::mem::Discriminant\"><code>Discriminant&lt;T&gt;</code></a> is independent of any <em>free lifetimes</em> in <code>T</code>. As such,\nreading or writing a <code>Discriminant&lt;Foo&lt;'a&gt;&gt;</code> as a <code>Discriminant&lt;Foo&lt;'b&gt;&gt;</code> (whether via\n<a href=\"fn.transmute.html\" title=\"fn std::mem::transmute\"><code>transmute</code></a> or otherwise) is always sound. Note that this is <strong>not</strong> true for other kinds\nof generic parameters and for higher-ranked lifetimes; <code>Discriminant&lt;Foo&lt;A&gt;&gt;</code> and\n<code>Discriminant&lt;Foo&lt;B&gt;&gt;</code> as well as <code>Discriminant&lt;Bar&lt;dyn for&lt;'a&gt; Trait&lt;'a&gt;&gt;&gt;</code> and\n<code>Discriminant&lt;Bar&lt;dyn Trait&lt;'static&gt;&gt;&gt;</code> may be incompatible.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>This can be used to compare enums that carry data, while disregarding\nthe actual data:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">enum </span>Foo { A(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>str), B(i32), C(i32) }\n\n<span class=\"macro\">assert_eq!</span>(mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::A(<span class=\"string\">\"bar\"</span>)), mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::A(<span class=\"string\">\"baz\"</span>)));\n<span class=\"macro\">assert_eq!</span>(mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::B(<span class=\"number\">1</span>)), mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::B(<span class=\"number\">2</span>)));\n<span class=\"macro\">assert_ne!</span>(mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::B(<span class=\"number\">3</span>)), mem::discriminant(<span class=\"kw-2\">&amp;</span>Foo::C(<span class=\"number\">3</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++enum+Foo+%7B+A(%26'static+str),+B(i32),+C(i32)+%7D%0A++++%0A++++assert_eq!(mem::discriminant(%26Foo::A(%22bar%22)),+mem::discriminant(%26Foo::A(%22baz%22)));%0A++++assert_eq!(mem::discriminant(%26Foo::B(1)),+mem::discriminant(%26Foo::B(2)));%0A++++assert_ne!(mem::discriminant(%26Foo::B(3)),+mem::discriminant(%26Foo::C(3)));%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"accessing-the-numeric-value-of-the-discriminant\"><a class=\"doc-anchor\" href=\"#accessing-the-numeric-value-of-the-discriminant\">§</a>Accessing the numeric value of the discriminant</h3>\n<p>Note that it is <em>undefined behavior</em> to <a href=\"fn.transmute.html\" title=\"fn std::mem::transmute\"><code>transmute</code></a> from <a href=\"struct.Discriminant.html\" title=\"struct std::mem::Discriminant\"><code>Discriminant</code></a> to a primitive!</p>\n<p>If an enum has only unit variants, then the numeric value of the discriminant can be accessed\nwith an <a href=\"../../std/keyword.as.html\"><code>as</code></a> cast:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">enum </span>Enum {\n    Foo,\n    Bar,\n    Baz,\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, Enum::Foo <span class=\"kw\">as </span>isize);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, Enum::Bar <span class=\"kw\">as </span>isize);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, Enum::Baz <span class=\"kw\">as </span>isize);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++enum+Enum+%7B%0A++++++++Foo,%0A++++++++Bar,%0A++++++++Baz,%0A++++%7D%0A++++%0A++++assert_eq!(0,+Enum::Foo+as+isize);%0A++++assert_eq!(1,+Enum::Bar+as+isize);%0A++++assert_eq!(2,+Enum::Baz+as+isize);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If an enum has opted-in to having a <a href=\"../../reference/type-layout.html#primitive-representations\">primitive representation</a> for its discriminant,\nthen it’s possible to use pointers to read the memory location storing the discriminant.\nThat <strong>cannot</strong> be done for enums using the <a href=\"../../reference/type-layout.html#the-default-representation\">default representation</a>, however, as it’s\nundefined what layout the discriminant has and where it’s stored — it might not even be\nstored at all!</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[repr(u8)]\n</span><span class=\"kw\">enum </span>Enum {\n    Unit,\n    Tuple(bool),\n    Struct { a: bool },\n}\n\n<span class=\"kw\">impl </span>Enum {\n    <span class=\"kw\">fn </span>discriminant(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u8 {\n        <span class=\"comment\">// SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n        // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n        // field, so we can read the discriminant without offsetting the pointer.\n        </span><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>&lt;<span class=\"kw-2\">*const </span><span class=\"kw\">_</span>&gt;::from(<span class=\"self\">self</span>).cast::&lt;u8&gt;() }\n    }\n}\n\n<span class=\"kw\">let </span>unit_like = Enum::Unit;\n<span class=\"kw\">let </span>tuple_like = Enum::Tuple(<span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>struct_like = Enum::Struct { a: <span class=\"bool-val\">false </span>};\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, unit_like.discriminant());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, tuple_like.discriminant());\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, struct_like.discriminant());\n\n<span class=\"comment\">// ⚠️ This is undefined behavior. Don't do this. ⚠️\n// assert_eq!(0, unsafe { std::mem::transmute::&lt;_, u8&gt;(std::mem::discriminant(&amp;unit_like)) });</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Brepr(u8)%5D%0A++++enum+Enum+%7B%0A++++++++Unit,%0A++++++++Tuple(bool),%0A++++++++Struct+%7B+a:+bool+%7D,%0A++++%7D%0A++++%0A++++impl+Enum+%7B%0A++++++++fn+discriminant(%26self)+-%3E+u8+%7B%0A++++++++++++//+SAFETY:+Because+%60Self%60+is+marked+%60repr(u8)%60,+its+layout+is+a+%60repr(C)%60+%60union%60%0A++++++++++++//+between+%60repr(C)%60+structs,+each+of+which+has+the+%60u8%60+discriminant+as+its+first%0A++++++++++++//+field,+so+we+can+read+the+discriminant+without+offsetting+the+pointer.%0A++++++++++++unsafe+%7B+*%3C*const+_%3E::from(self).cast::%3Cu8%3E()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+unit_like+=+Enum::Unit;%0A++++let+tuple_like+=+Enum::Tuple(true);%0A++++let+struct_like+=+Enum::Struct+%7B+a:+false+%7D;%0A++++assert_eq!(0,+unit_like.discriminant());%0A++++assert_eq!(1,+tuple_like.discriminant());%0A++++assert_eq!(2,+struct_like.discriminant());%0A++++%0A++++//+%E2%9A%A0%EF%B8%8F+This+is+undefined+behavior.+Don't+do+this.+%E2%9A%A0%EF%B8%8F%0A++++//+assert_eq!(0,+unsafe+%7B+std::mem::transmute::%3C_,+u8%3E(std::mem::discriminant(%26unit_like))+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:55.697Z"
}