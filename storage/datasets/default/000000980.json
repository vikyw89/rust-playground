{
	"title": "Command in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/struct.Command.html",
	"markdown": "# Command in std::process - Rust\n\n```\npub struct Command { /* private fields */ }\n```\n\nExpand description\n\nA process builder, providing fine-grained control over how a new process should be spawned.\n\nA default configuration can be generated using `Command::new(program)`, where `program` gives a path to the program to be executed. Additional builder methods allow the configuration to be changed (for example, by adding arguments) prior to spawning:\n\n```\nuse std::process::Command;\n\nlet output = if cfg!(target_os = \"windows\") {\n    Command::new(\"cmd\")\n        .args([\"/C\", \"echo hello\"])\n        .output()\n        .expect(\"failed to execute process\")\n} else {\n    Command::new(\"sh\")\n        .arg(\"-c\")\n        .arg(\"echo hello\")\n        .output()\n        .expect(\"failed to execute process\")\n};\n\nlet hello = output.stdout;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+output+=+if+cfg!(target_os+=+%22windows%22)+%7B%0A++++++++Command::new(%22cmd%22)%0A++++++++++++.args(%5B%22/C%22,+%22echo+hello%22%5D)%0A++++++++++++.output()%0A++++++++++++.expect(%22failed+to+execute+process%22)%0A++++%7D+else+%7B%0A++++++++Command::new(%22sh%22)%0A++++++++++++.arg(%22-c%22)%0A++++++++++++.arg(%22echo+hello%22)%0A++++++++++++.output()%0A++++++++++++.expect(%22failed+to+execute+process%22)%0A++++%7D;%0A++++%0A++++let+hello+=+output.stdout;%0A%7D&edition=2021)\n\n`Command` can be reused to spawn multiple processes. The builder methods change the command without needing to immediately spawn the process.\n\n```\nuse std::process::Command;\n\nlet mut echo_hello = Command::new(\"sh\");\necho_hello.arg(\"-c\").arg(\"echo hello\");\nlet hello_1 = echo_hello.output().expect(\"failed to execute process\");\nlet hello_2 = echo_hello.output().expect(\"failed to execute process\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+echo_hello+=+Command::new(%22sh%22);%0A++++echo_hello.arg(%22-c%22).arg(%22echo+hello%22);%0A++++let+hello_1+=+echo_hello.output().expect(%22failed+to+execute+process%22);%0A++++let+hello_2+=+echo_hello.output().expect(%22failed+to+execute+process%22);%0A%7D&edition=2021)\n\nSimilarly, you can call builder methods after spawning a process and then spawn a new process with the modified settings.\n\n```\nuse std::process::Command;\n\nlet mut list_dir = Command::new(\"ls\");\n\n// Execute `ls` in the current directory of the program.\nlist_dir.status().expect(\"process failed to execute\");\n\nprintln!();\n\n// Change `ls` to execute in the root directory.\nlist_dir.current_dir(\"/\");\n\n// And then execute `ls` again but in the root directory.\nlist_dir.status().expect(\"process failed to execute\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+list_dir+=+Command::new(%22ls%22);%0A++++%0A++++//+Execute+%60ls%60+in+the+current+directory+of+the+program.%0A++++list_dir.status().expect(%22process+failed+to+execute%22);%0A++++%0A++++println!();%0A++++%0A++++//+Change+%60ls%60+to+execute+in+the+root+directory.%0A++++list_dir.current_dir(%22/%22);%0A++++%0A++++//+And+then+execute+%60ls%60+again+but+in+the+root+directory.%0A++++list_dir.status().expect(%22process+failed+to+execute%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/process.rs.html#589-1190)[§](#impl-Command)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#633-635)\n\nConstructs a new `Command` for launching the program at path `program`, with the following default configuration:\n\n-   No arguments to the program\n-   Inherit the current process’s environment\n-   Inherit the current process’s working directory\n-   Inherit stdin/stdout/stderr for [`spawn`](about:blank/struct.Command.html#method.spawn \"method std::process::Command::spawn\") or [`status`](about:blank/struct.Command.html#method.status \"method std::process::Command::status\"), but create pipes for [`output`](about:blank/struct.Command.html#method.output \"method std::process::Command::output\")\n\nBuilder methods are provided to change these defaults and otherwise configure the process.\n\nIf `program` is not an absolute path, the `PATH` will be searched in an OS-defined way.\n\nThe search path to be used may be controlled by setting the `PATH` environment variable on the Command, but this has some implementation limitations on Windows (see issue #37519).\n\n##### [§](#platform-specific-behavior)Platform-specific behavior\n\nNote on Windows: For executable files with the .exe extension, it can be omitted when specifying the program for this Command. However, if the file has a different extension, a filename including the extension needs to be provided, otherwise the file won’t be found.\n\n##### [§](#examples)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"sh\")\n    .spawn()\n    .expect(\"sh command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22sh%22)%0A++++++++.spawn()%0A++++++++.expect(%22sh+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#698-701)\n\nAdds an argument to pass to the program.\n\nOnly one argument can be passed per use. So instead of:\n\n```\n.arg(\"-C /path/to/repo\")\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++std::process::Command::new(%22sh%22)%0A++++.arg(%22-C+/path/to/repo%22)%0A++++;%0A%7D&edition=2021)\n\nusage would be:\n\n```\n.arg(\"-C\")\n.arg(\"/path/to/repo\")\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++std::process::Command::new(%22sh%22)%0A++++.arg(%22-C%22)%0A++++.arg(%22/path/to/repo%22)%0A++++;%0A%7D&edition=2021)\n\nTo pass multiple arguments see [`args`](about:blank/struct.Command.html#method.args \"method std::process::Command::args\").\n\nNote that the argument is not passed through a shell, but given literally to the program. This means that shell syntax like quotes, escaped characters, word splitting, glob patterns, variable substitution, etc. have no effect.\n\nOn Windows, use caution with untrusted inputs. Most applications use the standard convention for decoding arguments passed to them. These are safe to use with `arg`. However, some applications such as `cmd.exe` and `.bat` files use a non-standard way of decoding arguments. They are therefore vulnerable to malicious input.\n\nIn the case of `cmd.exe` this is especially important because a malicious argument can potentially run arbitrary shell commands.\n\nSee [Windows argument splitting](about:blank/index.html#windows-argument-splitting \"mod std::process\") for more details or [`raw_arg`](about:blank/os/windows/process/trait.CommandExt.html#tymethod.raw_arg \"method std::os::windows::process::CommandExt::raw_arg\") for manually implementing non-standard argument encoding.\n\n##### [§](#examples-1)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .arg(\"-l\")\n    .arg(\"-a\")\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.arg(%22-l%22)%0A++++++++.arg(%22-a%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#746-755)\n\nAdds multiple arguments to pass to the program.\n\nTo pass a single argument see [`arg`](about:blank/struct.Command.html#method.arg \"method std::process::Command::arg\").\n\nNote that the arguments are not passed through a shell, but given literally to the program. This means that shell syntax like quotes, escaped characters, word splitting, glob patterns, variable substitution, etc. have no effect.\n\nOn Windows, use caution with untrusted inputs. Most applications use the standard convention for decoding arguments passed to them. These are safe to use with `arg`. However, some applications such as `cmd.exe` and `.bat` files use a non-standard way of decoding arguments. They are therefore vulnerable to malicious input.\n\nIn the case of `cmd.exe` this is especially important because a malicious argument can potentially run arbitrary shell commands.\n\nSee [Windows argument splitting](about:blank/index.html#windows-argument-splitting \"mod std::process\") for more details or [`raw_arg`](about:blank/os/windows/process/trait.CommandExt.html#tymethod.raw_arg \"method std::os::windows::process::CommandExt::raw_arg\") for manually implementing non-standard argument encoding.\n\n##### [§](#examples-2)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .args([\"-l\", \"-a\"])\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.args(%5B%22-l%22,+%22-a%22%5D)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#784-791)\n\nInserts or updates an explicit environment variable mapping.\n\nThis method allows you to add an environment variable mapping to the spawned process or overwrite a previously set value. You can use [`Command::envs`](about:blank/struct.Command.html#method.envs \"method std::process::Command::envs\") to set multiple environment variables simultaneously.\n\nChild processes will inherit environment variables from their parent process by default. Environment variables explicitly set using [`Command::env`](about:blank/struct.Command.html#method.env \"method std::process::Command::env\") take precedence over inherited variables. You can disable environment variable inheritance entirely using [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\") or for a single key using [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\").\n\nNote that environment variable names are case-insensitive (but case-preserving) on Windows and case-sensitive on all other platforms.\n\n##### [§](#examples-3)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .env(\"PATH\", \"/bin\")\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env(%22PATH%22,+%22/bin%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.19.0 · [source](about:blank/src/std/process.rs.html#830-840)\n\nInserts or updates multiple explicit environment variable mappings.\n\nThis method allows you to add multiple environment variable mappings to the spawned process or overwrite previously set values. You can use [`Command::env`](about:blank/struct.Command.html#method.env \"method std::process::Command::env\") to set a single environment variable.\n\nChild processes will inherit environment variables from their parent process by default. Environment variables explicitly set using [`Command::envs`](about:blank/struct.Command.html#method.envs \"method std::process::Command::envs\") take precedence over inherited variables. You can disable environment variable inheritance entirely using [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\") or for a single key using [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\").\n\nNote that environment variable names are case-insensitive (but case-preserving) on Windows and case-sensitive on all other platforms.\n\n##### [§](#examples-4)Examples\n\nBasic usage:\n\n```\nuse std::process::{Command, Stdio};\nuse std::env;\nuse std::collections::HashMap;\n\nlet filtered_env : HashMap<String, String> =\n    env::vars().filter(|&(ref k, _)|\n        k == \"TERM\" || k == \"TZ\" || k == \"LANG\" || k == \"PATH\"\n    ).collect();\n\nCommand::new(\"printenv\")\n    .stdin(Stdio::null())\n    .stdout(Stdio::inherit())\n    .env_clear()\n    .envs(&filtered_env)\n    .spawn()\n    .expect(\"printenv failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++use+std::env;%0A++++use+std::collections::HashMap;%0A++++%0A++++let+filtered_env+:+HashMap%3CString,+String%3E+=%0A++++++++env::vars().filter(%7C%26(ref+k,+_)%7C%0A++++++++++++k+==+%22TERM%22+%7C%7C+k+==+%22TZ%22+%7C%7C+k+==+%22LANG%22+%7C%7C+k+==+%22PATH%22%0A++++++++).collect();%0A++++%0A++++Command::new(%22printenv%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.stdout(Stdio::inherit())%0A++++++++.env_clear()%0A++++++++.envs(%26filtered_env)%0A++++++++.spawn()%0A++++++++.expect(%22printenv+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#868-871)\n\nRemoves an explicitly set environment variable and prevents inheriting it from a parent process.\n\nThis method will remove the explicit value of an environment variable set via [`Command::env`](about:blank/struct.Command.html#method.env \"method std::process::Command::env\") or [`Command::envs`](about:blank/struct.Command.html#method.envs \"method std::process::Command::envs\"). In addition, it will prevent the spawned child process from inheriting that environment variable from its parent process.\n\nAfter calling [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\"), the value associated with its key from [`Command::get_envs`](about:blank/struct.Command.html#method.get_envs \"method std::process::Command::get_envs\") will be [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\").\n\nTo clear all explicitly set environment variables and disable all environment variable inheritance, you can use [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\").\n\n##### [§](#examples-5)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .env_remove(\"PATH\")\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env_remove(%22PATH%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#898-901)\n\nClears all explicitly set environment variables and prevents inheriting any parent process environment variables.\n\nThis method will remove all explicitly added environment variables set via [`Command::env`](about:blank/struct.Command.html#method.env \"method std::process::Command::env\") or [`Command::envs`](about:blank/struct.Command.html#method.envs \"method std::process::Command::envs\"). In addition, it will prevent the spawned child process from inheriting any environment variable from its parent process.\n\nAfter calling [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\"), the iterator from [`Command::get_envs`](about:blank/struct.Command.html#method.get_envs \"method std::process::Command::get_envs\") will be empty.\n\nYou can use [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\") to clear a single mapping.\n\n##### [§](#examples-6)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .env_clear()\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env_clear()%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#928-931)\n\nSets the working directory for the child process.\n\n##### [§](#platform-specific-behavior-1)Platform-specific behavior\n\nIf the program path is relative (e.g., `\"./script.sh\"`), it’s ambiguous whether it should be interpreted relative to the parent’s working directory or relative to `current_dir`. The behavior in this case is platform specific and unstable, and it’s recommended to use [`canonicalize`](../fs/fn.canonicalize.html \"fn std::fs::canonicalize\") to get an absolute program path instead.\n\n##### [§](#examples-7)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .current_dir(\"/bin\")\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.current_dir(%22/bin%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#957-960)\n\nConfiguration for the child process’s standard input (stdin) handle.\n\nDefaults to [`inherit`](about:blank/struct.Stdio.html#method.inherit \"associated function std::process::Stdio::inherit\") when used with [`spawn`](about:blank/struct.Command.html#method.spawn \"method std::process::Command::spawn\") or [`status`](about:blank/struct.Command.html#method.status \"method std::process::Command::status\"), and defaults to [`piped`](about:blank/struct.Stdio.html#method.piped \"associated function std::process::Stdio::piped\") when used with [`output`](about:blank/struct.Command.html#method.output \"method std::process::Command::output\").\n\n##### [§](#examples-8)Examples\n\nBasic usage:\n\n```\nuse std::process::{Command, Stdio};\n\nCommand::new(\"ls\")\n    .stdin(Stdio::null())\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#986-989)\n\nConfiguration for the child process’s standard output (stdout) handle.\n\nDefaults to [`inherit`](about:blank/struct.Stdio.html#method.inherit \"associated function std::process::Stdio::inherit\") when used with [`spawn`](about:blank/struct.Command.html#method.spawn \"method std::process::Command::spawn\") or [`status`](about:blank/struct.Command.html#method.status \"method std::process::Command::status\"), and defaults to [`piped`](about:blank/struct.Stdio.html#method.piped \"associated function std::process::Stdio::piped\") when used with [`output`](about:blank/struct.Command.html#method.output \"method std::process::Command::output\").\n\n##### [§](#examples-9)Examples\n\nBasic usage:\n\n```\nuse std::process::{Command, Stdio};\n\nCommand::new(\"ls\")\n    .stdout(Stdio::null())\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stdout(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1015-1018)\n\nConfiguration for the child process’s standard error (stderr) handle.\n\nDefaults to [`inherit`](about:blank/struct.Stdio.html#method.inherit \"associated function std::process::Stdio::inherit\") when used with [`spawn`](about:blank/struct.Command.html#method.spawn \"method std::process::Command::spawn\") or [`status`](about:blank/struct.Command.html#method.status \"method std::process::Command::status\"), and defaults to [`piped`](about:blank/struct.Stdio.html#method.piped \"associated function std::process::Stdio::piped\") when used with [`output`](about:blank/struct.Command.html#method.output \"method std::process::Command::output\").\n\n##### [§](#examples-10)Examples\n\nBasic usage:\n\n```\nuse std::process::{Command, Stdio};\n\nCommand::new(\"ls\")\n    .stderr(Stdio::null())\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stderr(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1036-1038)\n\nExecutes the command as a child process, returning a handle to it.\n\nBy default, stdin, stdout and stderr are inherited from the parent.\n\n##### [§](#examples-11)Examples\n\nBasic usage:\n\n```\nuse std::process::Command;\n\nCommand::new(\"ls\")\n    .spawn()\n    .expect(\"ls command failed to start\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1065-1068)\n\nExecutes the command as a child process, waiting for it to finish and collecting all of its output.\n\nBy default, stdout and stderr are captured (and used to provide the resulting output). Stdin is not inherited from the parent and any attempt by the child process to read from the stdin stream will result in the stream immediately closing.\n\n##### [§](#examples-12)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::process::Command;\nuse std::io::{self, Write};\nlet output = Command::new(\"/bin/cat\")\n    .arg(\"file.txt\")\n    .output()\n    .expect(\"failed to execute process\");\n\nprintln!(\"status: {}\", output.status);\nio::stdout().write_all(&output.stdout).unwrap();\nio::stderr().write_all(&output.stderr).unwrap();\n\nassert!(output.status.success());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++use+std::io::%7Bself,+Write%7D;%0A++++let+output+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.output()%0A++++++++.expect(%22failed+to+execute+process%22);%0A++++%0A++++println!(%22status:+%7B%7D%22,+output.status);%0A++++io::stdout().write_all(%26output.stdout).unwrap();%0A++++io::stderr().write_all(%26output.stderr).unwrap();%0A++++%0A++++assert!(output.status.success());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1090-1095)\n\nExecutes a command as a child process, waiting for it to finish and collecting its status.\n\nBy default, stdin, stdout and stderr are inherited from the parent.\n\n##### [§](#examples-13)Examples\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::process::Command;\n\nlet status = Command::new(\"/bin/cat\")\n    .arg(\"file.txt\")\n    .status()\n    .expect(\"failed to execute process\");\n\nprintln!(\"process finished with: {status}\");\n\nassert!(status.success());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+status+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.status()%0A++++++++.expect(%22failed+to+execute+process%22);%0A++++%0A++++println!(%22process+finished+with:+%7Bstatus%7D%22);%0A++++%0A++++assert!(status.success());%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/process.rs.html#1109-1111)\n\nReturns the path to the program that was given to [`Command::new`](about:blank/struct.Command.html#method.new \"associated function std::process::Command::new\").\n\n##### [§](#examples-14)Examples\n\n```\nuse std::process::Command;\n\nlet cmd = Command::new(\"echo\");\nassert_eq!(cmd.get_program(), \"echo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+cmd+=+Command::new(%22echo%22);%0A++++assert_eq!(cmd.get_program(),+%22echo%22);%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/process.rs.html#1131-1133)\n\nReturns an iterator of the arguments that will be passed to the program.\n\nThis does not include the path to the program as the first argument; it only includes the arguments specified with [`Command::arg`](about:blank/struct.Command.html#method.arg \"method std::process::Command::arg\") and [`Command::args`](about:blank/struct.Command.html#method.args \"method std::process::Command::args\").\n\n##### [§](#examples-15)Examples\n\n```\nuse std::ffi::OsStr;\nuse std::process::Command;\n\nlet mut cmd = Command::new(\"echo\");\ncmd.arg(\"first\").arg(\"second\");\nlet args: Vec<&OsStr> = cmd.get_args().collect();\nassert_eq!(args, &[\"first\", \"second\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22echo%22);%0A++++cmd.arg(%22first%22).arg(%22second%22);%0A++++let+args:+Vec%3C%26OsStr%3E+=+cmd.get_args().collect();%0A++++assert_eq!(args,+%26%5B%22first%22,+%22second%22%5D);%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/process.rs.html#1166-1168)\n\nReturns an iterator of the environment variables explicitly set for the child process.\n\nEnvironment variables explicitly set using [`Command::env`](about:blank/struct.Command.html#method.env \"method std::process::Command::env\"), [`Command::envs`](about:blank/struct.Command.html#method.envs \"method std::process::Command::envs\"), and [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\") can be retrieved with this method.\n\nNote that this output does not include environment variables inherited from the parent process.\n\nEach element is a tuple key/value pair `(&OsStr, Option<&OsStr>)`. A [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") value indicates its key was explicitly removed via [`Command::env_remove`](about:blank/struct.Command.html#method.env_remove \"method std::process::Command::env_remove\"). The associated key for the [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") value will no longer inherit from its parent process.\n\nAn empty iterator can indicate that no explicit mappings were added or that [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\") was called. After calling [`Command::env_clear`](about:blank/struct.Command.html#method.env_clear \"method std::process::Command::env_clear\"), the child process will not inherit any environment variables from its parent process.\n\n##### [§](#examples-16)Examples\n\n```\nuse std::ffi::OsStr;\nuse std::process::Command;\n\nlet mut cmd = Command::new(\"ls\");\ncmd.env(\"TERM\", \"dumb\").env_remove(\"TZ\");\nlet envs: Vec<(&OsStr, Option<&OsStr>)> = cmd.get_envs().collect();\nassert_eq!(envs, &[\n    (OsStr::new(\"TERM\"), Some(OsStr::new(\"dumb\"))),\n    (OsStr::new(\"TZ\"), None)\n]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22ls%22);%0A++++cmd.env(%22TERM%22,+%22dumb%22).env_remove(%22TZ%22);%0A++++let+envs:+Vec%3C(%26OsStr,+Option%3C%26OsStr%3E)%3E+=+cmd.get_envs().collect();%0A++++assert_eq!(envs,+%26%5B%0A++++++++(OsStr::new(%22TERM%22),+Some(OsStr::new(%22dumb%22))),%0A++++++++(OsStr::new(%22TZ%22),+None)%0A++++%5D);%0A%7D&edition=2021)\n\n1.57.0 · [source](about:blank/src/std/process.rs.html#1187-1189)\n\nReturns the working directory for the child process.\n\nThis returns [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the working directory will not be changed.\n\n##### [§](#examples-17)Examples\n\n```\nuse std::path::Path;\nuse std::process::Command;\n\nlet mut cmd = Command::new(\"ls\");\nassert_eq!(cmd.get_current_dir(), None);\ncmd.current_dir(\"/bin\");\nassert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22ls%22);%0A++++assert_eq!(cmd.get_current_dir(),+None);%0A++++cmd.current_dir(%22/bin%22);%0A++++assert_eq!(cmd.get_current_dir(),+Some(Path::new(%22/bin%22)));%0A%7D&edition=2021)\n\n[source](about:blank/src/std/os/linux/process.rs.html#167-172)[§](#impl-CommandExt-for-Command)\n\nAvailable on **Linux** only.\n\n[source](about:blank/src/std/os/linux/process.rs.html#168-171)[§](#method.create_pidfd)\n\n🔬This is a nightly-only experimental API. (`linux_pidfd` [#82971](https://github.com/rust-lang/rust/issues/82971))\n\nSets whether a [`PidFd`](../os/linux/process/struct.PidFd.html \"struct std::os::linux::process::PidFd\") should be created for the [`Child`](struct.Child.html \"struct std::process::Child\") spawned by this [`Command`](struct.Command.html \"struct std::process::Command\"). By default, no pidfd will be created. [Read more](about:blank/os/linux/process/trait.CommandExt.html#tymethod.create_pidfd)\n\n1.0.0 · [source](about:blank/src/std/os/unix/process.rs.html#200-242)[§](#impl-CommandExt-for-Command-1)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/process.rs.html#201-204)[§](#method.uid)\n\nSets the child process’s user ID. This translates to a `setuid` call in the child process. Failure in the `setuid` call will cause the spawn to fail. [Read more](about:blank/os/unix/process/trait.CommandExt.html#tymethod.uid)\n\n[source](about:blank/src/std/os/unix/process.rs.html#206-209)[§](#method.gid)\n\nSimilar to `uid`, but sets the group ID of the child process. This has the same semantics as the `uid` field.\n\n[source](about:blank/src/std/os/unix/process.rs.html#211-214)[§](#method.groups)\n\n🔬This is a nightly-only experimental API. (`setgroups` [#90747](https://github.com/rust-lang/rust/issues/90747))\n\nSets the supplementary group IDs for the calling process. Translates to a `setgroups` call in the child process.\n\n[source](about:blank/src/std/os/unix/process.rs.html#216-222)[§](#method.pre_exec)\n\nSchedules a closure to be run just before the `exec` function is invoked. [Read more](about:blank/os/unix/process/trait.CommandExt.html#tymethod.pre_exec)\n\n[source](about:blank/src/std/os/unix/process.rs.html#224-228)[§](#method.exec)\n\nPerforms all the required setup by this `Command`, followed by calling the `execvp` syscall. [Read more](about:blank/os/unix/process/trait.CommandExt.html#tymethod.exec)\n\n[source](about:blank/src/std/os/unix/process.rs.html#230-236)[§](#method.arg0)\n\n[source](about:blank/src/std/os/unix/process.rs.html#238-241)[§](#method.process_group)\n\nSets the process group ID (PGID) of the child process. Equivalent to a `setpgid` call in the child process, but may be more efficient. [Read more](about:blank/os/unix/process/trait.CommandExt.html#tymethod.process_group)\n\n1.15.0 · [source](about:blank/src/std/os/unix/process.rs.html#120-125)[§](#method.before_exec)\n\n👎Deprecated since 1.37.0: should be unsafe, use `pre_exec` instead\n\nSchedules a closure to be run just before the `exec` function is invoked. [Read more](about:blank/os/unix/process/trait.CommandExt.html#method.before_exec)\n\n1.16.0 · [source](about:blank/src/std/os/windows/process.rs.html#367-400)[§](#impl-CommandExt-for-Command-2)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/process.rs.html#368-371)[§](#method.creation_flags)\n\n[source](about:blank/src/std/os/windows/process.rs.html#373-376)[§](#method.force_quotes)\n\n🔬This is a nightly-only experimental API. (`windows_process_extensions_force_quotes` [#82227](https://github.com/rust-lang/rust/issues/82227))\n\nForces all arguments to be wrapped in quote (`\"`) characters. [Read more](about:blank/os/windows/process/trait.CommandExt.html#tymethod.force_quotes)\n\n[source](about:blank/src/std/os/windows/process.rs.html#378-381)[§](#method.raw_arg)\n\nAppend literal text to the command line without any quoting or escaping. [Read more](about:blank/os/windows/process/trait.CommandExt.html#tymethod.raw_arg)\n\n[source](about:blank/src/std/os/windows/process.rs.html#383-390)[§](#method.async_pipes)\n\n🔬This is a nightly-only experimental API. (`windows_process_extensions_async_pipes` [#98289](https://github.com/rust-lang/rust/issues/98289))\n\n[source](about:blank/src/std/os/windows/process.rs.html#392-399)[§](#method.raw_attribute)\n\n🔬This is a nightly-only experimental API. (`windows_process_extensions_raw_attribute` [#114854](https://github.com/rust-lang/rust/issues/114854))\n\nSet a raw attribute on the command, providing extended configuration options for Windows processes. [Read more](about:blank/os/windows/process/trait.CommandExt.html#tymethod.raw_attribute)\n\n1.0.0 · [source](about:blank/src/std/process.rs.html#1193-1209)[§](#impl-Debug-for-Command)\n\n[source](about:blank/src/std/process.rs.html#1206-1208)[§](#method.fmt)\n\nFormat the program and arguments of a Command for display. Any non-utf8 data is lossily converted using the utf8 replacement character.\n\nThe default format approximates a shell invocation of the program along with its arguments. It does not include most of the other command properties. The output is not guaranteed to work (e.g. due to lack of shell-escaping or differences in path resolution). On some platforms you can use [the alternate syntax](about:blank/fmt/index.html#sign0 \"mod std::fmt\") to show more fields.\n\nNote that the debug implementation is platform-specific.\n\n[§](#impl-Freeze-for-Command)\n\n[§](#impl-RefUnwindSafe-for-Command)\n\n[§](#impl-Send-for-Command)\n\n[§](#impl-Sync-for-Command)\n\n[§](#impl-Unpin-for-Command)\n\n[§](#impl-UnwindSafe-for-Command)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A process builder, providing fine-grained control over how a new process should be spawned.\"><title>Command in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Command</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Command</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.arg\">arg</a></li><li><a href=\"#method.args\">args</a></li><li><a href=\"#method.current_dir\">current_dir</a></li><li><a href=\"#method.env\">env</a></li><li><a href=\"#method.env_clear\">env_clear</a></li><li><a href=\"#method.env_remove\">env_remove</a></li><li><a href=\"#method.envs\">envs</a></li><li><a href=\"#method.get_args\">get_args</a></li><li><a href=\"#method.get_current_dir\">get_current_dir</a></li><li><a href=\"#method.get_envs\">get_envs</a></li><li><a href=\"#method.get_program\">get_program</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.output\">output</a></li><li><a href=\"#method.spawn\">spawn</a></li><li><a href=\"#method.status\">status</a></li><li><a href=\"#method.stderr\">stderr</a></li><li><a href=\"#method.stdin\">stdin</a></li><li><a href=\"#method.stdout\">stdout</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-CommandExt-for-Command\">CommandExt</a></li><li><a href=\"#impl-CommandExt-for-Command-1\">CommandExt</a></li><li><a href=\"#impl-CommandExt-for-Command-2\">CommandExt</a></li><li><a href=\"#impl-Debug-for-Command\">Debug</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-Command\">!RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-Command\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-Command\">Freeze</a></li><li><a href=\"#impl-Send-for-Command\">Send</a></li><li><a href=\"#impl-Sync-for-Command\">Sync</a></li><li><a href=\"#impl-Unpin-for-Command\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"struct\" href=\"#\">Command</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#581-583\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Command { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A process builder, providing fine-grained control\nover how a new process should be spawned.</p>\n<p>A default configuration can be\ngenerated using <code>Command::new(program)</code>, where <code>program</code> gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>output = <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_os = <span class=\"string\">\"windows\"</span>) {\n    Command::new(<span class=\"string\">\"cmd\"</span>)\n        .args([<span class=\"string\">\"/C\"</span>, <span class=\"string\">\"echo hello\"</span>])\n        .output()\n        .expect(<span class=\"string\">\"failed to execute process\"</span>)\n} <span class=\"kw\">else </span>{\n    Command::new(<span class=\"string\">\"sh\"</span>)\n        .arg(<span class=\"string\">\"-c\"</span>)\n        .arg(<span class=\"string\">\"echo hello\"</span>)\n        .output()\n        .expect(<span class=\"string\">\"failed to execute process\"</span>)\n};\n\n<span class=\"kw\">let </span>hello = output.stdout;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+output+=+if+cfg!(target_os+=+%22windows%22)+%7B%0A++++++++Command::new(%22cmd%22)%0A++++++++++++.args(%5B%22/C%22,+%22echo+hello%22%5D)%0A++++++++++++.output()%0A++++++++++++.expect(%22failed+to+execute+process%22)%0A++++%7D+else+%7B%0A++++++++Command::new(%22sh%22)%0A++++++++++++.arg(%22-c%22)%0A++++++++++++.arg(%22echo+hello%22)%0A++++++++++++.output()%0A++++++++++++.expect(%22failed+to+execute+process%22)%0A++++%7D;%0A++++%0A++++let+hello+=+output.stdout;%0A%7D&amp;edition=2021\">Run</a></div>\n<p><code>Command</code> can be reused to spawn multiple processes. The builder methods\nchange the command without needing to immediately spawn the process.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>echo_hello = Command::new(<span class=\"string\">\"sh\"</span>);\necho_hello.arg(<span class=\"string\">\"-c\"</span>).arg(<span class=\"string\">\"echo hello\"</span>);\n<span class=\"kw\">let </span>hello_1 = echo_hello.output().expect(<span class=\"string\">\"failed to execute process\"</span>);\n<span class=\"kw\">let </span>hello_2 = echo_hello.output().expect(<span class=\"string\">\"failed to execute process\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+echo_hello+=+Command::new(%22sh%22);%0A++++echo_hello.arg(%22-c%22).arg(%22echo+hello%22);%0A++++let+hello_1+=+echo_hello.output().expect(%22failed+to+execute+process%22);%0A++++let+hello_2+=+echo_hello.output().expect(%22failed+to+execute+process%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Similarly, you can call builder methods after spawning a process and then\nspawn a new process with the modified settings.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>list_dir = Command::new(<span class=\"string\">\"ls\"</span>);\n\n<span class=\"comment\">// Execute `ls` in the current directory of the program.\n</span>list_dir.status().expect(<span class=\"string\">\"process failed to execute\"</span>);\n\n<span class=\"macro\">println!</span>();\n\n<span class=\"comment\">// Change `ls` to execute in the root directory.\n</span>list_dir.current_dir(<span class=\"string\">\"/\"</span>);\n\n<span class=\"comment\">// And then execute `ls` again but in the root directory.\n</span>list_dir.status().expect(<span class=\"string\">\"process failed to execute\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+mut+list_dir+=+Command::new(%22ls%22);%0A++++%0A++++//+Execute+%60ls%60+in+the+current+directory+of+the+program.%0A++++list_dir.status().expect(%22process+failed+to+execute%22);%0A++++%0A++++println!();%0A++++%0A++++//+Change+%60ls%60+to+execute+in+the+root+directory.%0A++++list_dir.current_dir(%22/%22);%0A++++%0A++++//+And+then+execute+%60ls%60+again+but+in+the+root+directory.%0A++++list_dir.status().expect(%22process+failed+to+execute%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Command\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#589-1190\">source</a><a href=\"#impl-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#633-635\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(program: S) -&gt; <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Constructs a new <code>Command</code> for launching the program at\npath <code>program</code>, with the following default configuration:</p>\n<ul>\n<li>No arguments to the program</li>\n<li>Inherit the current process’s environment</li>\n<li>Inherit the current process’s working directory</li>\n<li>Inherit stdin/stdout/stderr for <a href=\"struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, but create pipes for <a href=\"struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a></li>\n</ul>\n<p>Builder methods are provided to change these defaults and\notherwise configure the process.</p>\n<p>If <code>program</code> is not an absolute path, the <code>PATH</code> will be searched in\nan OS-defined way.</p>\n<p>The search path to be used may be controlled by setting the\n<code>PATH</code> environment variable on the Command,\nbut this has some implementation limitations on Windows\n(see issue #37519).</p>\n<h5 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h5>\n<p>Note on Windows: For executable files with the .exe extension,\nit can be omitted when specifying the program for this Command.\nHowever, if the file has a different extension,\na filename including the extension needs to be provided,\notherwise the file won’t be found.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"sh\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"sh command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22sh%22)%0A++++++++.spawn()%0A++++++++.expect(%22sh+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.arg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#698-701\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.arg\" class=\"fn\">arg</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Adds an argument to pass to the program.</p>\n<p>Only one argument can be passed per use. So instead of:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>.arg(<span class=\"string\">\"-C /path/to/repo\"</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++std::process::Command::new(%22sh%22)%0A++++.arg(%22-C+/path/to/repo%22)%0A++++;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>usage would be:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>.arg(<span class=\"string\">\"-C\"</span>)\n.arg(<span class=\"string\">\"/path/to/repo\"</span>)</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++std::process::Command::new(%22sh%22)%0A++++.arg(%22-C%22)%0A++++.arg(%22/path/to/repo%22)%0A++++;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To pass multiple arguments see <a href=\"struct.Command.html#method.args\" title=\"method std::process::Command::args\"><code>args</code></a>.</p>\n<p>Note that the argument is not passed through a shell, but given\nliterally to the program. This means that shell syntax like quotes,\nescaped characters, word splitting, glob patterns, variable substitution,\netc. have no effect.</p>\n<div class=\"warning\">\n<p>On Windows, use caution with untrusted inputs. Most applications use the\nstandard convention for decoding arguments passed to them. These are safe to\nuse with <code>arg</code>. However, some applications such as <code>cmd.exe</code> and <code>.bat</code> files\nuse a non-standard way of decoding arguments. They are therefore vulnerable\nto malicious input.</p>\n<p>In the case of <code>cmd.exe</code> this is especially important because a malicious\nargument can potentially run arbitrary shell commands.</p>\n<p>See <a href=\"index.html#windows-argument-splitting\" title=\"mod std::process\">Windows argument splitting</a> for more details\nor <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_arg\" title=\"method std::os::windows::process::CommandExt::raw_arg\"><code>raw_arg</code></a> for manually implementing non-standard argument encoding.</p>\n</div>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .arg(<span class=\"string\">\"-l\"</span>)\n    .arg(<span class=\"string\">\"-a\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.arg(%22-l%22)%0A++++++++.arg(%22-a%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.args\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#746-755\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.args\" class=\"fn\">args</a>&lt;I, S&gt;(&amp;mut self, args: I) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = S&gt;,\n    S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds multiple arguments to pass to the program.</p>\n<p>To pass a single argument see <a href=\"struct.Command.html#method.arg\" title=\"method std::process::Command::arg\"><code>arg</code></a>.</p>\n<p>Note that the arguments are not passed through a shell, but given\nliterally to the program. This means that shell syntax like quotes,\nescaped characters, word splitting, glob patterns, variable substitution, etc.\nhave no effect.</p>\n<div class=\"warning\">\n<p>On Windows, use caution with untrusted inputs. Most applications use the\nstandard convention for decoding arguments passed to them. These are safe to\nuse with <code>arg</code>. However, some applications such as <code>cmd.exe</code> and <code>.bat</code> files\nuse a non-standard way of decoding arguments. They are therefore vulnerable\nto malicious input.</p>\n<p>In the case of <code>cmd.exe</code> this is especially important because a malicious\nargument can potentially run arbitrary shell commands.</p>\n<p>See <a href=\"index.html#windows-argument-splitting\" title=\"mod std::process\">Windows argument splitting</a> for more details\nor <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_arg\" title=\"method std::os::windows::process::CommandExt::raw_arg\"><code>raw_arg</code></a> for manually implementing non-standard argument encoding.</p>\n</div>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .args([<span class=\"string\">\"-l\"</span>, <span class=\"string\">\"-a\"</span>])\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.args(%5B%22-l%22,+%22-a%22%5D)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.env\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#784-791\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.env\" class=\"fn\">env</a>&lt;K, V&gt;(&amp;mut self, key: K, val: V) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,\n    V: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts or updates an explicit environment variable mapping.</p>\n<p>This method allows you to add an environment variable mapping to the spawned process or\noverwrite a previously set value. You can use <a href=\"struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a> to set multiple environment\nvariables simultaneously.</p>\n<p>Child processes will inherit environment variables from their parent process by default.\nEnvironment variables explicitly set using <a href=\"struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> take precedence over inherited\nvariables. You can disable environment variable inheritance entirely using\n<a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> or for a single key using <a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>.</p>\n<p>Note that environment variable names are case-insensitive (but\ncase-preserving) on Windows and case-sensitive on all other platforms.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .env(<span class=\"string\">\"PATH\"</span>, <span class=\"string\">\"/bin\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env(%22PATH%22,+%22/bin%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.envs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#830-840\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.envs\" class=\"fn\">envs</a>&lt;I, K, V&gt;(&amp;mut self, vars: I) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.tuple.html\">(K, V)</a>&gt;,\n    K: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,\n    V: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts or updates multiple explicit environment variable mappings.</p>\n<p>This method allows you to add multiple environment variable mappings to the spawned process\nor overwrite previously set values. You can use <a href=\"struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> to set a single environment\nvariable.</p>\n<p>Child processes will inherit environment variables from their parent process by default.\nEnvironment variables explicitly set using <a href=\"struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a> take precedence over inherited\nvariables. You can disable environment variable inheritance entirely using\n<a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> or for a single key using <a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>.</p>\n<p>Note that environment variable names are case-insensitive (but case-preserving) on Windows\nand case-sensitive on all other platforms.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n<span class=\"kw\">use </span>std::env;\n<span class=\"kw\">use </span>std::collections::HashMap;\n\n<span class=\"kw\">let </span>filtered_env : HashMap&lt;String, String&gt; =\n    env::vars().filter(|<span class=\"kw-2\">&amp;</span>(<span class=\"kw-2\">ref </span>k, <span class=\"kw\">_</span>)|\n        k == <span class=\"string\">\"TERM\" </span>|| k == <span class=\"string\">\"TZ\" </span>|| k == <span class=\"string\">\"LANG\" </span>|| k == <span class=\"string\">\"PATH\"\n    </span>).collect();\n\nCommand::new(<span class=\"string\">\"printenv\"</span>)\n    .stdin(Stdio::null())\n    .stdout(Stdio::inherit())\n    .env_clear()\n    .envs(<span class=\"kw-2\">&amp;</span>filtered_env)\n    .spawn()\n    .expect(<span class=\"string\">\"printenv failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++use+std::env;%0A++++use+std::collections::HashMap;%0A++++%0A++++let+filtered_env+:+HashMap%3CString,+String%3E+=%0A++++++++env::vars().filter(%7C%26(ref+k,+_)%7C%0A++++++++++++k+==+%22TERM%22+%7C%7C+k+==+%22TZ%22+%7C%7C+k+==+%22LANG%22+%7C%7C+k+==+%22PATH%22%0A++++++++).collect();%0A++++%0A++++Command::new(%22printenv%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.stdout(Stdio::inherit())%0A++++++++.env_clear()%0A++++++++.envs(%26filtered_env)%0A++++++++.spawn()%0A++++++++.expect(%22printenv+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.env_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#868-871\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.env_remove\" class=\"fn\">env_remove</a>&lt;K: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, key: K) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Removes an explicitly set environment variable and prevents inheriting it from a parent\nprocess.</p>\n<p>This method will remove the explicit value of an environment variable set via\n<a href=\"struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a> or <a href=\"struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>. In addition, it will prevent the spawned child\nprocess from inheriting that environment variable from its parent process.</p>\n<p>After calling <a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>, the value associated with its key from\n<a href=\"struct.Command.html#method.get_envs\" title=\"method std::process::Command::get_envs\"><code>Command::get_envs</code></a> will be <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a>.</p>\n<p>To clear all explicitly set environment variables and disable all environment variable\ninheritance, you can use <a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .env_remove(<span class=\"string\">\"PATH\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env_remove(%22PATH%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.env_clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#898-901\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.env_clear\" class=\"fn\">env_clear</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Clears all explicitly set environment variables and prevents inheriting any parent process\nenvironment variables.</p>\n<p>This method will remove all explicitly added environment variables set via <a href=\"struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a>\nor <a href=\"struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>. In addition, it will prevent the spawned child process from inheriting\nany environment variable from its parent process.</p>\n<p>After calling <a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>, the iterator from <a href=\"struct.Command.html#method.get_envs\" title=\"method std::process::Command::get_envs\"><code>Command::get_envs</code></a> will be\nempty.</p>\n<p>You can use <a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a> to clear a single mapping.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .env_clear()\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.env_clear()%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.current_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#928-931\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.current_dir\" class=\"fn\">current_dir</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;mut self, dir: P) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Sets the working directory for the child process.</p>\n<h5 id=\"platform-specific-behavior-1\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-1\">§</a>Platform-specific behavior</h5>\n<p>If the program path is relative (e.g., <code>\"./script.sh\"</code>), it’s ambiguous\nwhether it should be interpreted relative to the parent’s working\ndirectory or relative to <code>current_dir</code>. The behavior in this case is\nplatform specific and unstable, and it’s recommended to use\n<a href=\"../fs/fn.canonicalize.html\" title=\"fn std::fs::canonicalize\"><code>canonicalize</code></a> to get an absolute program path instead.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .current_dir(<span class=\"string\">\"/bin\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.current_dir(%22/bin%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stdin\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#957-960\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.stdin\" class=\"fn\">stdin</a>&lt;T: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Configuration for the child process’s standard input (stdin) handle.</p>\n<p>Defaults to <a href=\"struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stdin(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stdin(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stdout\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#986-989\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.stdout\" class=\"fn\">stdout</a>&lt;T: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Configuration for the child process’s standard output (stdout) handle.</p>\n<p>Defaults to <a href=\"struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stdout(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stdout(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stderr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1015-1018\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.stderr\" class=\"fn\">stderr</a>&lt;T: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a>&gt;&gt;(&amp;mut self, cfg: T) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\"><p>Configuration for the child process’s standard error (stderr) handle.</p>\n<p>Defaults to <a href=\"struct.Stdio.html#method.inherit\" title=\"associated function std::process::Stdio::inherit\"><code>inherit</code></a> when used with <a href=\"struct.Command.html#method.spawn\" title=\"method std::process::Command::spawn\"><code>spawn</code></a> or <a href=\"struct.Command.html#method.status\" title=\"method std::process::Command::status\"><code>status</code></a>, and\ndefaults to <a href=\"struct.Stdio.html#method.piped\" title=\"associated function std::process::Stdio::piped\"><code>piped</code></a> when used with <a href=\"struct.Command.html#method.output\" title=\"method std::process::Command::output\"><code>output</code></a>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::{Command, Stdio};\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .stderr(Stdio::null())\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::%7BCommand,+Stdio%7D;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.stderr(Stdio::null())%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.spawn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1036-1038\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.spawn\" class=\"fn\">spawn</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Child.html\" title=\"struct std::process::Child\">Child</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes the command as a child process, returning a handle to it.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\nCommand::new(<span class=\"string\">\"ls\"</span>)\n    .spawn()\n    .expect(<span class=\"string\">\"ls command failed to start\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++Command::new(%22ls%22)%0A++++++++.spawn()%0A++++++++.expect(%22ls+command+failed+to+start%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.output\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1065-1068\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.output\" class=\"fn\">output</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Output.html\" title=\"struct std::process::Output\">Output</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.</p>\n<p>By default, stdout and stderr are captured (and used to provide the\nresulting output). Stdin is not inherited from the parent and any\nattempt by the child process to read from the stdin stream will result\nin the stream immediately closing.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n<span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>output = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .output()\n    .expect(<span class=\"string\">\"failed to execute process\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"status: {}\"</span>, output.status);\nio::stdout().write_all(<span class=\"kw-2\">&amp;</span>output.stdout).unwrap();\nio::stderr().write_all(<span class=\"kw-2\">&amp;</span>output.stderr).unwrap();\n\n<span class=\"macro\">assert!</span>(output.status.success());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++use+std::io::%7Bself,+Write%7D;%0A++++let+output+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.output()%0A++++++++.expect(%22failed+to+execute+process%22);%0A++++%0A++++println!(%22status:+%7B%7D%22,+output.status);%0A++++io::stdout().write_all(%26output.stdout).unwrap();%0A++++io::stderr().write_all(%26output.stderr).unwrap();%0A++++%0A++++assert!(output.status.success());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.status\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1090-1095\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.status\" class=\"fn\">status</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\">ExitStatus</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes a command as a child process, waiting for it to finish and\ncollecting its status.</p>\n<p>By default, stdin, stdout and stderr are inherited from the parent.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>status = Command::new(<span class=\"string\">\"/bin/cat\"</span>)\n    .arg(<span class=\"string\">\"file.txt\"</span>)\n    .status()\n    .expect(<span class=\"string\">\"failed to execute process\"</span>);\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"process finished with: {status}\"</span>);\n\n<span class=\"macro\">assert!</span>(status.success());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+status+=+Command::new(%22/bin/cat%22)%0A++++++++.arg(%22file.txt%22)%0A++++++++.status()%0A++++++++.expect(%22failed+to+execute+process%22);%0A++++%0A++++println!(%22process+finished+with:+%7Bstatus%7D%22);%0A++++%0A++++assert!(status.success());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_program\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1109-1111\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_program\" class=\"fn\">get_program</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Returns the path to the program that was given to <a href=\"struct.Command.html#method.new\" title=\"associated function std::process::Command::new\"><code>Command::new</code></a>.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span>cmd = Command::new(<span class=\"string\">\"echo\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_program(), <span class=\"string\">\"echo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::process::Command;%0A++++%0A++++let+cmd+=+Command::new(%22echo%22);%0A++++assert_eq!(cmd.get_program(),+%22echo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_args\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1131-1133\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_args\" class=\"fn\">get_args</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.CommandArgs.html\" title=\"struct std::process::CommandArgs\">CommandArgs</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CommandArgs<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator of the arguments that will be passed to the program.</p>\n<p>This does not include the path to the program as the first argument;\nit only includes the arguments specified with <a href=\"struct.Command.html#method.arg\" title=\"method std::process::Command::arg\"><code>Command::arg</code></a> and\n<a href=\"struct.Command.html#method.args\" title=\"method std::process::Command::args\"><code>Command::args</code></a>.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"echo\"</span>);\ncmd.arg(<span class=\"string\">\"first\"</span>).arg(<span class=\"string\">\"second\"</span>);\n<span class=\"kw\">let </span>args: Vec&lt;<span class=\"kw-2\">&amp;</span>OsStr&gt; = cmd.get_args().collect();\n<span class=\"macro\">assert_eq!</span>(args, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22echo%22);%0A++++cmd.arg(%22first%22).arg(%22second%22);%0A++++let+args:+Vec%3C%26OsStr%3E+=+cmd.get_args().collect();%0A++++assert_eq!(args,+%26%5B%22first%22,+%22second%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_envs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1166-1168\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_envs\" class=\"fn\">get_envs</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.CommandEnvs.html\" title=\"struct std::process::CommandEnvs\">CommandEnvs</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"CommandEnvs<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator of the environment variables explicitly set for the child process.</p>\n<p>Environment variables explicitly set using <a href=\"struct.Command.html#method.env\" title=\"method std::process::Command::env\"><code>Command::env</code></a>, <a href=\"struct.Command.html#method.envs\" title=\"method std::process::Command::envs\"><code>Command::envs</code></a>, and\n<a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a> can be retrieved with this method.</p>\n<p>Note that this output does not include environment variables inherited from the parent\nprocess.</p>\n<p>Each element is a tuple key/value pair <code>(&amp;OsStr, Option&lt;&amp;OsStr&gt;)</code>. A <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> value\nindicates its key was explicitly removed via <a href=\"struct.Command.html#method.env_remove\" title=\"method std::process::Command::env_remove\"><code>Command::env_remove</code></a>. The associated key for\nthe <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> value will no longer inherit from its parent process.</p>\n<p>An empty iterator can indicate that no explicit mappings were added or that\n<a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a> was called. After calling <a href=\"struct.Command.html#method.env_clear\" title=\"method std::process::Command::env_clear\"><code>Command::env_clear</code></a>, the child process\nwill not inherit any environment variables from its parent process.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"ls\"</span>);\ncmd.env(<span class=\"string\">\"TERM\"</span>, <span class=\"string\">\"dumb\"</span>).env_remove(<span class=\"string\">\"TZ\"</span>);\n<span class=\"kw\">let </span>envs: Vec&lt;(<span class=\"kw-2\">&amp;</span>OsStr, <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>OsStr&gt;)&gt; = cmd.get_envs().collect();\n<span class=\"macro\">assert_eq!</span>(envs, <span class=\"kw-2\">&amp;</span>[\n    (OsStr::new(<span class=\"string\">\"TERM\"</span>), <span class=\"prelude-val\">Some</span>(OsStr::new(<span class=\"string\">\"dumb\"</span>))),\n    (OsStr::new(<span class=\"string\">\"TZ\"</span>), <span class=\"prelude-val\">None</span>)\n]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22ls%22);%0A++++cmd.env(%22TERM%22,+%22dumb%22).env_remove(%22TZ%22);%0A++++let+envs:+Vec%3C(%26OsStr,+Option%3C%26OsStr%3E)%3E+=+cmd.get_envs().collect();%0A++++assert_eq!(envs,+%26%5B%0A++++++++(OsStr::new(%22TERM%22),+Some(OsStr::new(%22dumb%22))),%0A++++++++(OsStr::new(%22TZ%22),+None)%0A++++%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_current_dir\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1187-1189\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_current_dir\" class=\"fn\">get_current_dir</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the working directory for the child process.</p>\n<p>This returns <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the working directory will not be changed.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::path::Path;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cmd = Command::new(<span class=\"string\">\"ls\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_current_dir(), <span class=\"prelude-val\">None</span>);\ncmd.current_dir(<span class=\"string\">\"/bin\"</span>);\n<span class=\"macro\">assert_eq!</span>(cmd.get_current_dir(), <span class=\"prelude-val\">Some</span>(Path::new(<span class=\"string\">\"/bin\"</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::path::Path;%0A++++use+std::process::Command;%0A++++%0A++++let+mut+cmd+=+Command::new(%22ls%22);%0A++++assert_eq!(cmd.get_current_dir(),+None);%0A++++cmd.current_dir(%22/bin%22);%0A++++assert_eq!(cmd.get_current_dir(),+Some(Path::new(%22/bin%22)));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CommandExt-for-Command\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/process.rs.html#167-172\">source</a><a href=\"#impl-CommandExt-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/linux/process/trait.CommandExt.html\" title=\"trait std::os::linux::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Linux</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create_pidfd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/linux/process.rs.html#168-171\">source</a><a href=\"#method.create_pidfd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/linux/process/trait.CommandExt.html#tymethod.create_pidfd\" class=\"fn\">create_pidfd</a>(&amp;mut self, val: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>linux_pidfd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82971\">#82971</a>)</span></div></span><div class=\"docblock\">Sets whether a <a href=\"../os/linux/process/struct.PidFd.html\" title=\"struct std::os::linux::process::PidFd\"><code>PidFd</code></a> should be created for the <a href=\"struct.Child.html\" title=\"struct std::process::Child\"><code>Child</code></a>\nspawned by this <a href=\"struct.Command.html\" title=\"struct std::process::Command\"><code>Command</code></a>.\nBy default, no pidfd will be created. <a href=\"../os/linux/process/trait.CommandExt.html#tymethod.create_pidfd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CommandExt-for-Command-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/process.rs.html#200-242\">source</a></span><a href=\"#impl-CommandExt-for-Command-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/process/trait.CommandExt.html\" title=\"trait std::os::unix::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.uid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#201-204\">source</a><a href=\"#method.uid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.uid\" class=\"fn\">uid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\">Sets the child process’s user ID. This translates to a\n<code>setuid</code> call in the child process. Failure in the <code>setuid</code>\ncall will cause the spawn to fail. <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.uid\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#206-209\">source</a><a href=\"#method.gid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.gid\" class=\"fn\">gid</a>(&amp;mut self, id: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\">Similar to <code>uid</code>, but sets the group ID of the child process. This has\nthe same semantics as the <code>uid</code> field.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.groups\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#211-214\">source</a><a href=\"#method.groups\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.groups\" class=\"fn\">groups</a>(&amp;mut self, groups: &amp;[<a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>]) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>setgroups</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90747\">#90747</a>)</span></div></span><div class=\"docblock\">Sets the supplementary group IDs for the calling process. Translates to\na <code>setgroups</code> call in the child process.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pre_exec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#216-222\">source</a><a href=\"#method.pre_exec\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.pre_exec\" class=\"fn\">pre_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\">Schedules a closure to be run just before the <code>exec</code> function is\ninvoked. <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.pre_exec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#224-228\">source</a><a href=\"#method.exec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.exec\" class=\"fn\">exec</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../io/struct.Error.html\" title=\"struct std::io::Error\">Error</a></h4></section></summary><div class=\"docblock\">Performs all the required setup by this <code>Command</code>, followed by calling\nthe <code>execvp</code> syscall. <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.exec\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.arg0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#230-236\">source</a><a href=\"#method.arg0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.arg0\" class=\"fn\">arg0</a>&lt;S&gt;(&amp;mut self, arg: S) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Set executable argument <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.arg0\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.process_group\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/process.rs.html#238-241\">source</a><a href=\"#method.process_group\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.process_group\" class=\"fn\">process_group</a>(&amp;mut self, pgroup: <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\">Sets the process group ID (PGID) of the child process. Equivalent to a\n<code>setpgid</code> call in the child process, but may be more efficient. <a href=\"../os/unix/process/trait.CommandExt.html#tymethod.process_group\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.before_exec\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/process.rs.html#120-125\">source</a></span><a href=\"#method.before_exec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/process/trait.CommandExt.html#method.before_exec\" class=\"fn\">before_exec</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.37.0: should be unsafe, use <code>pre_exec</code> instead</span></div></span><div class=\"docblock\">Schedules a closure to be run just before the <code>exec</code> function is\ninvoked. <a href=\"../os/unix/process/trait.CommandExt.html#method.before_exec\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-CommandExt-for-Command-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/process.rs.html#367-400\">source</a></span><a href=\"#impl-CommandExt-for-Command-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/process/trait.CommandExt.html\" title=\"trait std::os::windows::process::CommandExt\">CommandExt</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.creation_flags\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#368-371\">source</a><a href=\"#method.creation_flags\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.creation_flags\" class=\"fn\">creation_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\">Sets the <a href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/process-creation-flags\">process creation flags</a> to be passed to <code>CreateProcess</code>. <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.creation_flags\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.force_quotes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#373-376\">source</a><a href=\"#method.force_quotes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.force_quotes\" class=\"fn\">force_quotes</a>(&amp;mut self, enabled: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_force_quotes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/82227\">#82227</a>)</span></div></span><div class=\"docblock\">Forces all arguments to be wrapped in quote (<code>\"</code>) characters. <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.force_quotes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.raw_arg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#378-381\">source</a><a href=\"#method.raw_arg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_arg\" class=\"fn\">raw_arg</a>&lt;S: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, raw_text: S) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><div class=\"docblock\">Append literal text to the command line without any quoting or escaping. <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_arg\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.async_pipes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#383-390\">source</a><a href=\"#method.async_pipes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.async_pipes\" class=\"fn\">async_pipes</a>(&amp;mut self, always_async: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_async_pipes</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98289\">#98289</a>)</span></div></span><div class=\"docblock\">When <a href=\"struct.Command.html\" title=\"struct std::process::Command\"><code>process::Command</code></a> creates pipes, request that our side is always async. <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.async_pipes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.raw_attribute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#392-399\">source</a><a href=\"#method.raw_attribute\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_attribute\" class=\"fn\">raw_attribute</a>&lt;T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + 'static&gt;(\n    &amp;mut self,\n    attribute: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    value: T,\n) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_process_extensions_raw_attribute</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/114854\">#114854</a>)</span></div></span><div class=\"docblock\">Set a raw attribute on the command, providing extended configuration options for Windows\nprocesses. <a href=\"../os/windows/process/trait.CommandExt.html#tymethod.raw_attribute\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Command\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1193-1209\">source</a></span><a href=\"#impl-Debug-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1206-1208\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\"><p>Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.</p>\n<p>The default format approximates a shell invocation of the program along with its\narguments. It does not include most of the other command properties. The output is not guaranteed to work\n(e.g. due to lack of shell-escaping or differences in path resolution).\nOn some platforms you can use <a href=\"../fmt/index.html#sign0\" title=\"mod std::fmt\">the alternate syntax</a> to show more fields.</p>\n<p>Note that the debug implementation is platform-specific.</p>\n</div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Command\" class=\"impl\"><a href=\"#impl-Freeze-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section><section id=\"impl-RefUnwindSafe-for-Command\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section><section id=\"impl-Send-for-Command\" class=\"impl\"><a href=\"#impl-Send-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section><section id=\"impl-Sync-for-Command\" class=\"impl\"><a href=\"#impl-Sync-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section><section id=\"impl-Unpin-for-Command\" class=\"impl\"><a href=\"#impl-Unpin-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section><section id=\"impl-UnwindSafe-for-Command\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Command\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Command.html\" title=\"struct std::process::Command\">Command</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"CommandArgs<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.CommandArgs.html\\\" title=\\\"struct std::process::CommandArgs\\\">CommandArgs</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.CommandArgs.html\\\" title=\\\"struct std::process::CommandArgs\\\">CommandArgs</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"struct\\\" href=\\\"../ffi/struct.OsStr.html\\\" title=\\\"struct std::ffi::OsStr\\\">OsStr</a>;</div>\",\"CommandEnvs<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.CommandEnvs.html\\\" title=\\\"struct std::process::CommandEnvs\\\">CommandEnvs</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.CommandEnvs.html\\\" title=\\\"struct std::process::CommandEnvs\\\">CommandEnvs</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = (&amp;'a <a class=\\\"struct\\\" href=\\\"../ffi/struct.OsStr.html\\\" title=\\\"struct std::ffi::OsStr\\\">OsStr</a>, <a class=\\\"enum\\\" href=\\\"../option/enum.Option.html\\\" title=\\\"enum std::option::Option\\\">Option</a>&lt;&amp;'a <a class=\\\"struct\\\" href=\\\"../ffi/struct.OsStr.html\\\" title=\\\"struct std::ffi::OsStr\\\">OsStr</a>&gt;);</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:39.314Z"
}