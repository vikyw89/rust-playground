{
	"title": "assert_unchecked in std::hint - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hint/fn.assert_unchecked.html",
	"markdown": "# assert\\_unchecked in std::hint - Rust\n\n```\npub const unsafe fn assert_unchecked(cond: bool)\n```\n\nðŸ”¬This is a nightly-only experimental API. (`hint_assert_unchecked`Â [#119131](https://github.com/rust-lang/rust/issues/119131))\n\nExpand description\n\nMakes a _soundness_ promise to the compiler that `cond` holds.\n\nThis may allow the optimizer to simplify things, but it might also make the generated code slower. Either way, calling it will most likely make compilation take longer.\n\nThis is a situational tool for micro-optimization, and is allowed to do nothing. Any use should come with a repeatable benchmark to show the value and allow removing it later should the optimizer get smarter and no longer need it.\n\nThe more complicated the condition the less likely this is to be fruitful. For example, `assert_unchecked(foo.is_sorted())` is a complex enough value that the compiler is unlikely to be able to take advantage of it.\n\nThereâ€™s also no need to `assert_unchecked` basic properties of things. For example, the compiler already knows the range of `count_ones`, so thereâ€™s no benefit to `let n = u32::count_ones(x); assert_unchecked(n <= u32::BITS);`.\n\nIf ever youâ€™re tempted to write `assert_unchecked(false)`, then youâ€™re actually looking for [`unreachable_unchecked()`](fn.unreachable_unchecked.html \"fn std::hint::unreachable_unchecked\").\n\nYou may know this from other places as [`llvm.assume`](https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic) or [`__builtin_assume`](https://clang.llvm.org/docs/LanguageExtensions.html#builtin-assume).\n\nThis promotes a correctness requirement to a soundness requirement. Donâ€™t do that without very good reason.\n\n## [Â§](#safety)Safety\n\n`cond` must be `true`. Itâ€™s immediate UB to call this with `false`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Makes a soundness promise to the compiler that `cond` holds.\"><title>assert_unchecked in std::hint - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::hint</a></h2><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.assert_unchecked.html\">assert_unchecked</a></li><li><a href=\"fn.black_box.html\">black_box</a></li><li><a href=\"fn.must_use.html\">must_use</a></li><li><a href=\"fn.spin_loop.html\">spin_loop</a></li><li><a href=\"fn.unreachable_unchecked.html\">unreachable_unchecked</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hint</a>::<wbr><a class=\"fn\" href=\"#\">assert_unchecked</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#149\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn assert_unchecked(cond: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>)</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>hint_assert_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/119131\">#119131</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Makes a <em>soundness</em> promise to the compiler that <code>cond</code> holds.</p>\n<p>This may allow the optimizer to simplify things,\nbut it might also make the generated code slower.\nEither way, calling it will most likely make compilation take longer.</p>\n<p>This is a situational tool for micro-optimization, and is allowed to do nothing.\nAny use should come with a repeatable benchmark to show the value\nand allow removing it later should the optimizer get smarter and no longer need it.</p>\n<p>The more complicated the condition the less likely this is to be fruitful.\nFor example, <code>assert_unchecked(foo.is_sorted())</code> is a complex enough value\nthat the compiler is unlikely to be able to take advantage of it.</p>\n<p>Thereâ€™s also no need to <code>assert_unchecked</code> basic properties of things.  For\nexample, the compiler already knows the range of <code>count_ones</code>, so thereâ€™s no\nbenefit to <code>let n = u32::count_ones(x); assert_unchecked(n &lt;= u32::BITS);</code>.</p>\n<p>If ever youâ€™re tempted to write <code>assert_unchecked(false)</code>, then youâ€™re\nactually looking for <a href=\"fn.unreachable_unchecked.html\" title=\"fn std::hint::unreachable_unchecked\"><code>unreachable_unchecked()</code></a>.</p>\n<p>You may know this from other places\nas <a href=\"https://llvm.org/docs/LangRef.html#llvm-assume-intrinsic\"><code>llvm.assume</code></a>\nor <a href=\"https://clang.llvm.org/docs/LanguageExtensions.html#builtin-assume\"><code>__builtin_assume</code></a>.</p>\n<p>This promotes a correctness requirement to a soundness requirement.\nDonâ€™t do that without very good reason.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">Â§</a>Safety</h2>\n<p><code>cond</code> must be <code>true</code>.  Itâ€™s immediate UB to call this with <code>false</code>.</p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:18.080Z"
}