{
	"title": "park_timeout in std::thread - Rust",
	"url": "https://doc.rust-lang.org/stable/std/thread/fn.park_timeout.html",
	"markdown": "# park\\_timeout in std::thread - Rust\n\n```\npub fn park_timeout(dur: Duration)\n```\n\nExpand description\n\nBlocks unless or until the current thread’s token is made available or the specified duration has been reached (may wake spuriously).\n\nThe semantics of this function are equivalent to [`park`](fn.park.html \"fn std::thread::park\") except that the thread will be blocked for roughly no longer than `dur`. This method should not be used for precise timing due to anomalies such as preemption or platform differences that might not cause the maximum amount of time waited to be precisely `dur` long.\n\nSee the [park documentation](fn.park.html \"fn std::thread::park\") for more details.\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nPlatforms which do not support nanosecond precision for sleeping will have `dur` rounded up to the nearest granularity of time they can sleep for.\n\n## [§](#examples)Examples\n\nWaiting for the complete expiration of the timeout:\n\n```\nuse std::thread::park_timeout;\nuse std::time::{Instant, Duration};\n\nlet timeout = Duration::from_secs(2);\nlet beginning_park = Instant::now();\n\nlet mut timeout_remaining = timeout;\nloop {\n    park_timeout(timeout_remaining);\n    let elapsed = beginning_park.elapsed();\n    if elapsed >= timeout {\n        break;\n    }\n    println!(\"restarting park_timeout after {elapsed:?}\");\n    timeout_remaining = timeout - elapsed;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::park_timeout;%0A++++use+std::time::%7BInstant,+Duration%7D;%0A++++%0A++++let+timeout+=+Duration::from_secs(2);%0A++++let+beginning_park+=+Instant::now();%0A++++%0A++++let+mut+timeout_remaining+=+timeout;%0A++++loop+%7B%0A++++++++park_timeout(timeout_remaining);%0A++++++++let+elapsed+=+beginning_park.elapsed();%0A++++++++if+elapsed+%3E=+timeout+%7B%0A++++++++++++break;%0A++++++++%7D%0A++++++++println!(%22restarting+park_timeout+after+%7Belapsed:?%7D%22);%0A++++++++timeout_remaining+=+timeout+-+elapsed;%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Blocks unless or until the current thread’s token is made available or the specified duration has been reached (may wake spuriously).\"><title>park_timeout in std::thread - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::thread</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AccessError.html\">AccessError</a></li><li><a href=\"struct.Builder.html\">Builder</a></li><li><a href=\"struct.JoinHandle.html\">JoinHandle</a></li><li><a href=\"struct.LocalKey.html\">LocalKey</a></li><li><a href=\"struct.Scope.html\">Scope</a></li><li><a href=\"struct.ScopedJoinHandle.html\">ScopedJoinHandle</a></li><li><a href=\"struct.Thread.html\">Thread</a></li><li><a href=\"struct.ThreadId.html\">ThreadId</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.available_parallelism.html\">available_parallelism</a></li><li><a href=\"fn.current.html\">current</a></li><li><a href=\"fn.panicking.html\">panicking</a></li><li><a href=\"fn.park.html\">park</a></li><li><a href=\"fn.park_timeout.html\">park_timeout</a></li><li><a href=\"fn.park_timeout_ms.html\">park_timeout_ms</a></li><li><a href=\"fn.scope.html\">scope</a></li><li><a href=\"fn.sleep.html\">sleep</a></li><li><a href=\"fn.sleep_ms.html\">sleep_ms</a></li><li><a href=\"fn.sleep_until.html\">sleep_until</a></li><li><a href=\"fn.spawn.html\">spawn</a></li><li><a href=\"fn.yield_now.html\">yield_now</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">thread</a>::<wbr><a class=\"fn\" href=\"#\">park_timeout</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1167-1175\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn park_timeout(dur: <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a>)</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Blocks unless or until the current thread’s token is made available or\nthe specified duration has been reached (may wake spuriously).</p>\n<p>The semantics of this function are equivalent to <a href=\"fn.park.html\" title=\"fn std::thread::park\"><code>park</code></a> except\nthat the thread will be blocked for roughly no longer than <code>dur</code>. This\nmethod should not be used for precise timing due to anomalies such as\npreemption or platform differences that might not cause the maximum\namount of time waited to be precisely <code>dur</code> long.</p>\n<p>See the <a href=\"fn.park.html\" title=\"fn std::thread::park\">park documentation</a> for more details.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>Platforms which do not support nanosecond precision for sleeping will have\n<code>dur</code> rounded up to the nearest granularity of time they can sleep for.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Waiting for the complete expiration of the timeout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread::park_timeout;\n<span class=\"kw\">use </span>std::time::{Instant, Duration};\n\n<span class=\"kw\">let </span>timeout = Duration::from_secs(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>beginning_park = Instant::now();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>timeout_remaining = timeout;\n<span class=\"kw\">loop </span>{\n    park_timeout(timeout_remaining);\n    <span class=\"kw\">let </span>elapsed = beginning_park.elapsed();\n    <span class=\"kw\">if </span>elapsed &gt;= timeout {\n        <span class=\"kw\">break</span>;\n    }\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"restarting park_timeout after {elapsed:?}\"</span>);\n    timeout_remaining = timeout - elapsed;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread::park_timeout;%0A++++use+std::time::%7BInstant,+Duration%7D;%0A++++%0A++++let+timeout+=+Duration::from_secs(2);%0A++++let+beginning_park+=+Instant::now();%0A++++%0A++++let+mut+timeout_remaining+=+timeout;%0A++++loop+%7B%0A++++++++park_timeout(timeout_remaining);%0A++++++++let+elapsed+=+beginning_park.elapsed();%0A++++++++if+elapsed+%3E=+timeout+%7B%0A++++++++++++break;%0A++++++++%7D%0A++++++++println!(%22restarting+park_timeout+after+%7Belapsed:?%7D%22);%0A++++++++timeout_remaining+=+timeout+-+elapsed;%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:26.955Z"
}