{
	"title": "let - Rust",
	"url": "https://doc.rust-lang.org/stable/std/keyword.let.html",
	"markdown": "# let - Rust\n\nExpand description\n\nBind a value to a variable.\n\nThe primary use for the `let` keyword is in `let` statements, which are used to introduce a new set of variables into the current scope, as given by a pattern.\n\n```\nlet thing1: i32 = 100;\nlet thing2 = 200 + thing1;\n\nlet mut changing_thing = true;\nchanging_thing = false;\n\nlet (part1, part2) = (\"first\", \"second\");\n\nstruct Example {\n    a: bool,\n    b: u64,\n}\n\nlet Example { a, b: _ } = Example {\n    a: true,\n    b: 10004,\n};\nassert!(a);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_assignments)%5D%0Afn+main()+%7B%0A++++let+thing1:+i32+=+100;%0A++++let+thing2+=+200+%2B+thing1;%0A++++%0A++++let+mut+changing_thing+=+true;%0A++++changing_thing+=+false;%0A++++%0A++++let+(part1,+part2)+=+(%22first%22,+%22second%22);%0A++++%0A++++struct+Example+%7B%0A++++++++a:+bool,%0A++++++++b:+u64,%0A++++%7D%0A++++%0A++++let+Example+%7B+a,+b:+_+%7D+=+Example+%7B%0A++++++++a:+true,%0A++++++++b:+10004,%0A++++%7D;%0A++++assert!(a);%0A%7D&edition=2021)\n\nThe pattern is most commonly a single variable, which means no pattern matching is done and the expression given is bound to the variable. Apart from that, patterns used in `let` bindings can be as complicated as needed, given that the pattern is exhaustive. See the [Rust book](../book/ch06-02-match.html) for more information on pattern matching. The type of the pattern is optionally given afterwards, but if left blank is automatically inferred by the compiler if possible.\n\nVariables in Rust are immutable by default, and require the `mut` keyword to be made mutable.\n\nMultiple variables can be defined with the same name, known as shadowing. This doesn’t affect the original variable in any way beyond being unable to directly access it beyond the point of shadowing. It continues to remain in scope, getting dropped only when it falls out of scope. Shadowed variables don’t need to have the same type as the variables shadowing them.\n\n```\nlet shadowing_example = true;\nlet shadowing_example = 123.4;\nlet shadowing_example = shadowing_example as u32;\nlet mut shadowing_example = format!(\"cool! {shadowing_example}\");\nshadowing_example += \" something else!\"; // not shadowing\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+shadowing_example+=+true;%0A++++let+shadowing_example+=+123.4;%0A++++let+shadowing_example+=+shadowing_example+as+u32;%0A++++let+mut+shadowing_example+=+format!(%22cool!+%7Bshadowing_example%7D%22);%0A++++shadowing_example+%2B=+%22+something+else!%22;+//+not+shadowing%0A%7D&edition=2021)\n\nOther places the `let` keyword is used include along with [`if`](keyword.if.html), in the form of `if let` expressions. They’re useful if the pattern being matched isn’t exhaustive, such as with enumerations. `while let` also exists, which runs a loop with a pattern matched value until that pattern can’t be matched.\n\nFor more information on the `let` keyword, see the [Rust book](about:blank/book/ch18-01-all-the-places-for-patterns.html#let-statements) or the [Reference](about:blank/reference/statements.html#let-statements)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Bind a value to a variable.\"><title>let - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc keyword\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../std/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h3><a href=\"index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"primitive.array.html\">array</a></li><li><a href=\"primitive.bool.html\">bool</a></li><li><a href=\"primitive.char.html\">char</a></li><li><a href=\"primitive.f128.html\">f128</a></li><li><a href=\"primitive.f16.html\">f16</a></li><li><a href=\"primitive.f32.html\">f32</a></li><li><a href=\"primitive.f64.html\">f64</a></li><li><a href=\"primitive.fn.html\">fn</a></li><li><a href=\"primitive.i128.html\">i128</a></li><li><a href=\"primitive.i16.html\">i16</a></li><li><a href=\"primitive.i32.html\">i32</a></li><li><a href=\"primitive.i64.html\">i64</a></li><li><a href=\"primitive.i8.html\">i8</a></li><li><a href=\"primitive.isize.html\">isize</a></li><li><a href=\"primitive.never.html\">never</a></li><li><a href=\"primitive.pointer.html\">pointer</a></li><li><a href=\"primitive.reference.html\">reference</a></li><li><a href=\"primitive.slice.html\">slice</a></li><li><a href=\"primitive.str.html\">str</a></li><li><a href=\"primitive.tuple.html\">tuple</a></li><li><a href=\"primitive.u128.html\">u128</a></li><li><a href=\"primitive.u16.html\">u16</a></li><li><a href=\"primitive.u32.html\">u32</a></li><li><a href=\"primitive.u64.html\">u64</a></li><li><a href=\"primitive.u8.html\">u8</a></li><li><a href=\"primitive.unit.html\">unit</a></li><li><a href=\"primitive.usize.html\">usize</a></li></ul><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"alloc/index.html\">alloc</a></li><li><a href=\"any/index.html\">any</a></li><li><a href=\"arch/index.html\">arch</a></li><li><a href=\"array/index.html\">array</a></li><li><a href=\"ascii/index.html\">ascii</a></li><li><a href=\"assert_matches/index.html\">assert_matches</a></li><li><a href=\"async_iter/index.html\">async_iter</a></li><li><a href=\"backtrace/index.html\">backtrace</a></li><li><a href=\"borrow/index.html\">borrow</a></li><li><a href=\"boxed/index.html\">boxed</a></li><li><a href=\"cell/index.html\">cell</a></li><li><a href=\"char/index.html\">char</a></li><li><a href=\"clone/index.html\">clone</a></li><li><a href=\"cmp/index.html\">cmp</a></li><li><a href=\"collections/index.html\">collections</a></li><li><a href=\"convert/index.html\">convert</a></li><li><a href=\"default/index.html\">default</a></li><li><a href=\"env/index.html\">env</a></li><li><a href=\"error/index.html\">error</a></li><li><a href=\"f128/index.html\">f128</a></li><li><a href=\"f16/index.html\">f16</a></li><li><a href=\"f32/index.html\">f32</a></li><li><a href=\"f64/index.html\">f64</a></li><li><a href=\"ffi/index.html\">ffi</a></li><li><a href=\"fmt/index.html\">fmt</a></li><li><a href=\"fs/index.html\">fs</a></li><li><a href=\"future/index.html\">future</a></li><li><a href=\"hash/index.html\">hash</a></li><li><a href=\"hint/index.html\">hint</a></li><li><a href=\"i128/index.html\">i128</a></li><li><a href=\"i16/index.html\">i16</a></li><li><a href=\"i32/index.html\">i32</a></li><li><a href=\"i64/index.html\">i64</a></li><li><a href=\"i8/index.html\">i8</a></li><li><a href=\"intrinsics/index.html\">intrinsics</a></li><li><a href=\"io/index.html\">io</a></li><li><a href=\"isize/index.html\">isize</a></li><li><a href=\"iter/index.html\">iter</a></li><li><a href=\"marker/index.html\">marker</a></li><li><a href=\"mem/index.html\">mem</a></li><li><a href=\"net/index.html\">net</a></li><li><a href=\"num/index.html\">num</a></li><li><a href=\"ops/index.html\">ops</a></li><li><a href=\"option/index.html\">option</a></li><li><a href=\"os/index.html\">os</a></li><li><a href=\"panic/index.html\">panic</a></li><li><a href=\"pat/index.html\">pat</a></li><li><a href=\"path/index.html\">path</a></li><li><a href=\"pin/index.html\">pin</a></li><li><a href=\"prelude/index.html\">prelude</a></li><li><a href=\"primitive/index.html\">primitive</a></li><li><a href=\"process/index.html\">process</a></li><li><a href=\"ptr/index.html\">ptr</a></li><li><a href=\"rc/index.html\">rc</a></li><li><a href=\"result/index.html\">result</a></li><li><a href=\"simd/index.html\">simd</a></li><li><a href=\"slice/index.html\">slice</a></li><li><a href=\"str/index.html\">str</a></li><li><a href=\"string/index.html\">string</a></li><li><a href=\"sync/index.html\">sync</a></li><li><a href=\"task/index.html\">task</a></li><li><a href=\"thread/index.html\">thread</a></li><li><a href=\"time/index.html\">time</a></li><li><a href=\"u128/index.html\">u128</a></li><li><a href=\"u16/index.html\">u16</a></li><li><a href=\"u32/index.html\">u32</a></li><li><a href=\"u64/index.html\">u64</a></li><li><a href=\"u8/index.html\">u8</a></li><li><a href=\"usize/index.html\">usize</a></li><li><a href=\"vec/index.html\">vec</a></li></ul><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.assert.html\">assert</a></li><li><a href=\"macro.assert_eq.html\">assert_eq</a></li><li><a href=\"macro.assert_ne.html\">assert_ne</a></li><li><a href=\"macro.cfg.html\">cfg</a></li><li><a href=\"macro.cfg_match.html\">cfg_match</a></li><li><a href=\"macro.column.html\">column</a></li><li><a href=\"macro.compile_error.html\">compile_error</a></li><li><a href=\"macro.concat.html\">concat</a></li><li><a href=\"macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"macro.concat_idents.html\">concat_idents</a></li><li><a href=\"macro.const_format_args.html\">const_format_args</a></li><li><a href=\"macro.dbg.html\">dbg</a></li><li><a href=\"macro.debug_assert.html\">debug_assert</a></li><li><a href=\"macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"macro.env.html\">env</a></li><li><a href=\"macro.eprint.html\">eprint</a></li><li><a href=\"macro.eprintln.html\">eprintln</a></li><li><a href=\"macro.file.html\">file</a></li><li><a href=\"macro.format.html\">format</a></li><li><a href=\"macro.format_args.html\">format_args</a></li><li><a href=\"macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"macro.include.html\">include</a></li><li><a href=\"macro.include_bytes.html\">include_bytes</a></li><li><a href=\"macro.include_str.html\">include_str</a></li><li><a href=\"macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"macro.line.html\">line</a></li><li><a href=\"macro.log_syntax.html\">log_syntax</a></li><li><a href=\"macro.matches.html\">matches</a></li><li><a href=\"macro.module_path.html\">module_path</a></li><li><a href=\"macro.option_env.html\">option_env</a></li><li><a href=\"macro.panic.html\">panic</a></li><li><a href=\"macro.print.html\">print</a></li><li><a href=\"macro.println.html\">println</a></li><li><a href=\"macro.stringify.html\">stringify</a></li><li><a href=\"macro.thread_local.html\">thread_local</a></li><li><a href=\"macro.todo.html\">todo</a></li><li><a href=\"macro.trace_macros.html\">trace_macros</a></li><li><a href=\"macro.try.html\">try</a></li><li><a href=\"macro.unimplemented.html\">unimplemented</a></li><li><a href=\"macro.unreachable.html\">unreachable</a></li><li><a href=\"macro.vec.html\">vec</a></li><li><a href=\"macro.write.html\">write</a></li><li><a href=\"macro.writeln.html\">writeln</a></li></ul><h3><a href=\"index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"keyword.as.html\">as</a></li><li><a href=\"keyword.async.html\">async</a></li><li><a href=\"keyword.await.html\">await</a></li><li><a href=\"keyword.break.html\">break</a></li><li><a href=\"keyword.const.html\">const</a></li><li><a href=\"keyword.continue.html\">continue</a></li><li><a href=\"keyword.crate.html\">crate</a></li><li><a href=\"keyword.dyn.html\">dyn</a></li><li><a href=\"keyword.else.html\">else</a></li><li><a href=\"keyword.enum.html\">enum</a></li><li><a href=\"keyword.extern.html\">extern</a></li><li><a href=\"keyword.false.html\">false</a></li><li><a href=\"keyword.fn.html\">fn</a></li><li><a href=\"keyword.for.html\">for</a></li><li><a href=\"keyword.if.html\">if</a></li><li><a href=\"keyword.impl.html\">impl</a></li><li><a href=\"keyword.in.html\">in</a></li><li><a href=\"keyword.let.html\">let</a></li><li><a href=\"keyword.loop.html\">loop</a></li><li><a href=\"keyword.match.html\">match</a></li><li><a href=\"keyword.mod.html\">mod</a></li><li><a href=\"keyword.move.html\">move</a></li><li><a href=\"keyword.mut.html\">mut</a></li><li><a href=\"keyword.pub.html\">pub</a></li><li><a href=\"keyword.ref.html\">ref</a></li><li><a href=\"keyword.return.html\">return</a></li><li><a href=\"keyword.self.html\">self</a></li><li><a href=\"keyword.static.html\">static</a></li><li><a href=\"keyword.struct.html\">struct</a></li><li><a href=\"keyword.super.html\">super</a></li><li><a href=\"keyword.trait.html\">trait</a></li><li><a href=\"keyword.true.html\">true</a></li><li><a href=\"keyword.type.html\">type</a></li><li><a href=\"keyword.union.html\">union</a></li><li><a href=\"keyword.unsafe.html\">unsafe</a></li><li><a href=\"keyword.use.html\">use</a></li><li><a href=\"keyword.where.html\">where</a></li><li><a href=\"keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Keyword <a class=\"keyword\" href=\"#\">let</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../src/std/keyword_docs.rs.html#808\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Bind a value to a variable.</p>\n<p>The primary use for the <code>let</code> keyword is in <code>let</code> statements, which are used to introduce a new\nset of variables into the current scope, as given by a pattern.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>thing1: i32 = <span class=\"number\">100</span>;\n<span class=\"kw\">let </span>thing2 = <span class=\"number\">200 </span>+ thing1;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>changing_thing = <span class=\"bool-val\">true</span>;\nchanging_thing = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(part1, part2) = (<span class=\"string\">\"first\"</span>, <span class=\"string\">\"second\"</span>);\n\n<span class=\"kw\">struct </span>Example {\n    a: bool,\n    b: u64,\n}\n\n<span class=\"kw\">let </span>Example { a, b: <span class=\"kw\">_ </span>} = Example {\n    a: <span class=\"bool-val\">true</span>,\n    b: <span class=\"number\">10004</span>,\n};\n<span class=\"macro\">assert!</span>(a);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_assignments)%5D%0Afn+main()+%7B%0A++++let+thing1:+i32+=+100;%0A++++let+thing2+=+200+%2B+thing1;%0A++++%0A++++let+mut+changing_thing+=+true;%0A++++changing_thing+=+false;%0A++++%0A++++let+(part1,+part2)+=+(%22first%22,+%22second%22);%0A++++%0A++++struct+Example+%7B%0A++++++++a:+bool,%0A++++++++b:+u64,%0A++++%7D%0A++++%0A++++let+Example+%7B+a,+b:+_+%7D+=+Example+%7B%0A++++++++a:+true,%0A++++++++b:+10004,%0A++++%7D;%0A++++assert!(a);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The pattern is most commonly a single variable, which means no pattern matching is done and\nthe expression given is bound to the variable. Apart from that, patterns used in <code>let</code> bindings\ncan be as complicated as needed, given that the pattern is exhaustive. See the <a href=\"../book/ch06-02-match.html\">Rust\nbook</a> for more information on pattern matching. The type of the pattern is optionally\ngiven afterwards, but if left blank is automatically inferred by the compiler if possible.</p>\n<p>Variables in Rust are immutable by default, and require the <code>mut</code> keyword to be made mutable.</p>\n<p>Multiple variables can be defined with the same name, known as shadowing. This doesn’t affect\nthe original variable in any way beyond being unable to directly access it beyond the point of\nshadowing. It continues to remain in scope, getting dropped only when it falls out of scope.\nShadowed variables don’t need to have the same type as the variables shadowing them.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>shadowing_example = <span class=\"bool-val\">true</span>;\n<span class=\"kw\">let </span>shadowing_example = <span class=\"number\">123.4</span>;\n<span class=\"kw\">let </span>shadowing_example = shadowing_example <span class=\"kw\">as </span>u32;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>shadowing_example = <span class=\"macro\">format!</span>(<span class=\"string\">\"cool! {shadowing_example}\"</span>);\nshadowing_example += <span class=\"string\">\" something else!\"</span>; <span class=\"comment\">// not shadowing</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+shadowing_example+=+true;%0A++++let+shadowing_example+=+123.4;%0A++++let+shadowing_example+=+shadowing_example+as+u32;%0A++++let+mut+shadowing_example+=+format!(%22cool!+%7Bshadowing_example%7D%22);%0A++++shadowing_example+%2B=+%22+something+else!%22;+//+not+shadowing%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Other places the <code>let</code> keyword is used include along with <a href=\"keyword.if.html\"><code>if</code></a>, in the form of <code>if let</code>\nexpressions. They’re useful if the pattern being matched isn’t exhaustive, such as with\nenumerations. <code>while let</code> also exists, which runs a loop with a pattern matched value until\nthat pattern can’t be matched.</p>\n<p>For more information on the <code>let</code> keyword, see the <a href=\"../book/ch18-01-all-the-places-for-patterns.html#let-statements\">Rust book</a> or the <a href=\"../reference/statements.html#let-statements\">Reference</a></p>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:26.812Z"
}