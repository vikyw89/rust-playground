{
	"title": "Generic parameters - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/generics.html",
	"markdown": "# Generic parameters - The Rust Reference\n\n> **Syntax**  \n> _GenericParams_ :  \n>       `<` `>`  \n>    | `<` (_GenericParam_ `,`)\\* _GenericParam_ `,`? `>`\n> \n> _GenericParam_ :  \n>    [_OuterAttribute_](../attributes.html)\\* ( _LifetimeParam_ | _TypeParam_ | _ConstParam_ )\n> \n> _LifetimeParam_ :  \n>    [LIFETIME\\_OR\\_LABEL](about:blank/tokens.html#lifetimes-and-loop-labels) ( `:` [_LifetimeBounds_](../trait-bounds.html) )?\n> \n> _TypeParam_ :  \n>    [IDENTIFIER](../identifiers.html) ( `:` [_TypeParamBounds_](../trait-bounds.html)? )? ( `=` [_Type_](about:blank/types.html#type-expressions) )?\n> \n> _ConstParam_:  \n>    `const` [IDENTIFIER](../identifiers.html) `:` [_Type_](about:blank/types.html#type-expressions) ( `=` _[Block](../expressions/block-expr.html)_ | [IDENTIFIER](../identifiers.html) | -?[LITERAL](../expressions/literal-expr.html) )?\n\n[Functions](functions.html), [type aliases](type-aliases.html), [structs](structs.html), [enumerations](enumerations.html), [unions](unions.html), [traits](traits.html), and [implementations](implementations.html) may be _parameterized_ by types, constants, and lifetimes. These parameters are listed in angle brackets (`<...>`), usually immediately after the name of the item and before its definition. For implementations, which don't have a name, they come directly after `impl`. The order of generic parameters is restricted to lifetime parameters and then type and const parameters intermixed. The same parameter name may not be declared more than once in a _GenericParams_ list.\n\nSome examples of items with type, const, and lifetime parameters:\n\n```rust\n#![allow(unused)]\nfn main() {\nfn foo<'a, T>() {}\ntrait A<U> {}\nstruct Ref<'a, T> where T: 'a { r: &'a T }\nstruct InnerArray<T, const N: usize>([T; N]);\nstruct EitherOrderWorks<const N: bool, U>(U);\n}\n```\n\nGeneric parameters are in scope within the item definition where they are declared. They are not in scope for items declared within the body of a function as described in [item declarations](about:blank/statements.html#item-declarations). See [generic parameter scopes](about:blank/names/scopes.html#generic-parameter-scopes) for more details.\n\n[References](about:blank/types/pointer.html#shared-references-), [raw pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut), [arrays](../types/array.html), [slices](../types/slice.html), [tuples](../types/tuple.html), and [function pointers](../types/function-pointer.html) have lifetime or type parameters as well, but are not referred to with path syntax.\n\n### [Const generics](#const-generics)\n\n_Const generic parameters_ allow items to be generic over constant values. The const identifier introduces a name for the constant parameter, and all instances of the item must be instantiated with a value of the given type.\n\nThe only allowed types of const parameters are `u8`, `u16`, `u32`, `u64`, `u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128`, `isize`, `char` and `bool`.\n\nConst parameters can be used anywhere a [const item](constant-items.html) can be used, with the exception that when used in a [type](../types.html) or [array repeat expression](../expressions/array-expr.html), it must be standalone (as described below). That is, they are allowed in the following places:\n\n1.  As an applied const to any type which forms a part of the signature of the item in question.\n2.  As part of a const expression used to define an [associated const](about:blank/associated-items.html#associated-constants), or as a parameter to an [associated type](about:blank/associated-items.html#associated-types).\n3.  As a value in any runtime expression in the body of any functions in the item.\n4.  As a parameter to any type used in the body of any functions in the item.\n5.  As a part of the type of any fields in the item.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const generic parameters can be used.\n\n// Used in the signature of the item itself.\nfn foo<const N: usize>(arr: [i32; N]) {\n    // Used as a type within a function body.\n    let x: [i32; N];\n    // Used as an expression.\n    println!(\"{}\", N * 2);\n}\n\n// Used as a field of a struct.\nstruct Foo<const N: usize>([i32; N]);\n\nimpl<const N: usize> Foo<N> {\n    // Used as an associated constant.\n    const CONST: usize = N * 4;\n}\n\ntrait Trait {\n    type Output;\n}\n\nimpl<const N: usize> Trait for Foo<N> {\n    // Used as an associated type.\n    type Output = [i32; N];\n}\n}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const generic parameters cannot be used.\nfn foo<const N: usize>() {\n    // Cannot use in item definitions within a function body.\n    const BAD_CONST: [usize; N] = [1; N];\n    static BAD_STATIC: [usize; N] = [1; N];\n    fn inner(bad_arg: [usize; N]) {\n        let bad_value = N * 2;\n    }\n    type BadAlias = [usize; N];\n    struct BadStruct([usize; N]);\n}\n}\n```\n\nAs a further restriction, const parameters may only appear as a standalone argument inside of a [type](../types.html) or [array repeat expression](../expressions/array-expr.html). In those contexts, they may only be used as a single segment [path expression](../expressions/path-expr.html), possibly inside a [block](../expressions/block-expr.html) (such as `N` or `{N}`). That is, they cannot be combined with other expressions.\n\n```rust\n#![allow(unused)]\nfn main() {\n// Examples where const parameters may not be used.\n\n// Not allowed to combine in other expressions in types, such as the\n// arithmetic expression in the return type here.\nfn bad_function<const N: usize>() -> [u8; {N + 1}] {\n    // Similarly not allowed for array repeat expressions.\n    [1; {N + 1}]\n}\n}\n```\n\nA const argument in a [path](../paths.html) specifies the const value to use for that item. The argument must be a [const expression](about:blank/const_eval.html#constant-expressions) of the type ascribed to the const parameter. The const expression must be a [block expression](../expressions/block-expr.html) (surrounded with braces) unless it is a single path segment (an [IDENTIFIER](../identifiers.html)) or a [literal](../expressions/literal-expr.html) (with a possibly leading `-` token).\n\n> **Note**: This syntactic restriction is necessary to avoid requiring infinite lookahead when parsing an expression inside of a type.\n\n```rust\n#![allow(unused)]\nfn main() {\nfn double<const N: i32>() {\n    println!(\"doubled: {}\", N * 2);\n}\n\nconst SOME_CONST: i32 = 12;\n\nfn example() {\n    // Example usage of a const argument.\n    double::<9>();\n    double::<-123>();\n    double::<{7 + 8}>();\n    double::<SOME_CONST>();\n    double::<{ SOME_CONST + 5 }>();\n}\n}\n```\n\nWhen there is ambiguity if a generic argument could be resolved as either a type or const argument, it is always resolved as a type. Placing the argument in a block expression can force it to be interpreted as a const argument.\n\n```rust\n#![allow(unused)]\nfn main() {\ntype N = u32;\nstruct Foo<const N: usize>;\n// The following is an error, because `N` is interpreted as the type alias `N`.\nfn foo<const N: usize>() -> Foo<N> { todo!() } // ERROR\n// Can be fixed by wrapping in braces to force it to be interpreted as the `N`\n// const parameter:\nfn bar<const N: usize>() -> Foo<{ N }> { todo!() } // ok\n}\n```\n\nUnlike type and lifetime parameters, const parameters can be declared without being used inside of a parameterized item, with the exception of implementations as described in [generic implementations](about:blank/implementations.html#generic-implementations):\n\n```rust\n#![allow(unused)]\nfn main() {\n// ok\nstruct Foo<const N: usize>;\nenum Bar<const M: usize> { A, B }\n\n// ERROR: unused parameter\nstruct Baz<T>;\nstruct Biz<'a>;\nstruct Unconstrained;\nimpl<const N: usize> Unconstrained {}\n}\n```\n\nWhen resolving a trait bound obligation, the exhaustiveness of all implementations of const parameters is not considered when determining if the bound is satisfied. For example, in the following, even though all possible const values for the `bool` type are implemented, it is still an error that the trait bound is not satisfied:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Foo<const B: bool>;\ntrait Bar {}\nimpl Bar for Foo<true> {}\nimpl Bar for Foo<false> {}\n\nfn needs_bar(_: impl Bar) {}\nfn generic<const B: bool>() {\n    let v = Foo::<B>;\n    needs_bar(v); // ERROR: trait bound `Foo<B>: Bar` is not satisfied\n}\n}\n```\n\n## [Where clauses](#where-clauses)\n\n> **Syntax**  \n> _WhereClause_ :  \n>    `where` ( _WhereClauseItem_ `,` )\\* _WhereClauseItem_ ?\n> \n> _WhereClauseItem_ :  \n>       _LifetimeWhereClauseItem_  \n>    | _TypeBoundWhereClauseItem_\n> \n> _LifetimeWhereClauseItem_ :  \n>    [_Lifetime_](../trait-bounds.html) `:` [_LifetimeBounds_](../trait-bounds.html)\n> \n> _TypeBoundWhereClauseItem_ :  \n>    [_ForLifetimes_](about:blank/trait-bounds.html#higher-ranked-trait-bounds)? [_Type_](about:blank/types.html#type-expressions) `:` [_TypeParamBounds_](../trait-bounds.html)?\n\n_Where clauses_ provide another way to specify bounds on type and lifetime parameters as well as a way to specify bounds on types that aren't type parameters.\n\nThe `for` keyword can be used to introduce [higher-ranked lifetimes](about:blank/trait-bounds.html#higher-ranked-trait-bounds). It only allows [_LifetimeParam_](#generic-parameters) parameters.\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct A<T>\nwhere\n    T: Iterator,            // Could use A<T: Iterator> instead\n    T::Item: Copy,          // Bound on an associated type\n    String: PartialEq<T>,   // Bound on `String`, using the type parameter\n    i32: Default,           // Allowed, but not useful\n{\n    f: T,\n}\n}\n```\n\n## [Attributes](#attributes)\n\nGeneric lifetime and type parameters allow [attributes](../attributes.html) on them. There are no built-in attributes that do anything in this position, although custom derive attributes may give meaning to it.\n\nThis example shows using a custom derive attribute to modify the meaning of a generic parameter.\n\n```rust\n// Assume that the derive for MyFlexibleClone declared `my_flexible_clone` as\n// an attribute it understands.\n#[derive(MyFlexibleClone)]\nstruct Foo<#[my_flexible_clone(unbounded)] H> {\n    a: *const H\n}\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Generic parameters - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/generics.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"generic-parameters\"><a class=\"header\" href=\"#generic-parameters\">Generic parameters</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>GenericParams</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">&lt;</code> <code class=\"hljs\">&gt;</code><br>\n&nbsp;&nbsp;  | <code class=\"hljs\">&lt;</code> (<em>GenericParam</em> <code class=\"hljs\">,</code>)<sup>*</sup> <em>GenericParam</em> <code class=\"hljs\">,</code><sup>?</sup> <code class=\"hljs\">&gt;</code></p>\n<p><em>GenericParam</em> :<br>\n&nbsp;&nbsp; <a href=\"../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> ( <em>LifetimeParam</em> | <em>TypeParam</em> | <em>ConstParam</em> )</p>\n<p><em>LifetimeParam</em> :<br>\n&nbsp;&nbsp; <a href=\"../tokens.html#lifetimes-and-loop-labels\">LIFETIME_OR_LABEL</a>&nbsp;( <code class=\"hljs\">:</code> <a href=\"../trait-bounds.html\"><em>LifetimeBounds</em></a> )<sup>?</sup></p>\n<p><em>TypeParam</em> :<br>\n&nbsp;&nbsp; <a href=\"../identifiers.html\">IDENTIFIER</a>&nbsp;( <code class=\"hljs\">:</code> <a href=\"../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup> )<sup>?</sup> ( <code class=\"hljs\">=</code> <a href=\"../types.html#type-expressions\"><em>Type</em></a> )<sup>?</sup></p>\n<p><em>ConstParam</em>:<br>\n&nbsp;&nbsp; <code class=\"hljs\">const</code> <a href=\"../identifiers.html\">IDENTIFIER</a> <code class=\"hljs\">:</code> <a href=\"../types.html#type-expressions\"><em>Type</em></a> ( <code class=\"hljs\">=</code> <em><a href=\"../expressions/block-expr.html\">Block</a></em> | <a href=\"../identifiers.html\">IDENTIFIER</a> | -<sup>?</sup><a href=\"../expressions/literal-expr.html\">LITERAL</a> )<sup>?</sup></p>\n</blockquote>\n<p><a href=\"functions.html\">Functions</a>, <a href=\"type-aliases.html\">type aliases</a>, <a href=\"structs.html\">structs</a>, <a href=\"enumerations.html\">enumerations</a>, <a href=\"unions.html\">unions</a>, <a href=\"traits.html\">traits</a>, and\n<a href=\"implementations.html\">implementations</a> may be <em>parameterized</em> by types, constants, and lifetimes. These\nparameters are listed in angle <span class=\"parenthetical\">brackets (<code class=\"hljs\">&lt;...&gt;</code>)</span>,\nusually immediately after the name of the item and before its definition. For\nimplementations, which don't have a name, they come directly after <code class=\"hljs\">impl</code>.\nThe order of generic parameters is restricted to lifetime parameters and then type and const parameters intermixed.\nThe same parameter name may not be declared more than once in a <em>GenericParams</em> list.</p>\n<p>Some examples of items with type, const, and lifetime parameters:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;() {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">A</span></span>&lt;U&gt; {}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ref</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; <span class=\"hljs-keyword\">where</span> T: <span class=\"hljs-symbol\">'a</span> { r: &amp;<span class=\"hljs-symbol\">'a</span> T }\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">InnerArray</span></span>&lt;T, <span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([T; N]);\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">EitherOrderWorks</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">bool</span>, U&gt;(U);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Generic parameters are in scope within the item definition where they are\ndeclared. They are not in scope for items declared within the body of a\nfunction as described in <a href=\"../statements.html#item-declarations\">item declarations</a>.\nSee <a href=\"../names/scopes.html#generic-parameter-scopes\">generic parameter scopes</a> for more details.</p>\n<p><a href=\"../types/pointer.html#shared-references-\">References</a>, <a href=\"../types/pointer.html#raw-pointers-const-and-mut\">raw pointers</a>, <a href=\"../types/array.html\">arrays</a>, <a href=\"../types/slice.html\">slices</a>, <a href=\"../types/tuple.html\">tuples</a>, and\n<a href=\"../types/function-pointer.html\">function pointers</a> have lifetime or type parameters as well, but are not\nreferred to with path syntax.</p>\n<h3 id=\"const-generics\"><a class=\"header\" href=\"#const-generics\">Const generics</a></h3>\n<p><em>Const generic parameters</em> allow items to be generic over constant values. The\nconst identifier introduces a name for the constant parameter, and all\ninstances of the item must be instantiated with a value of the given type.</p>\n<!-- TODO: update above to say \"introduces a name in the [value namespace]\"\n    once namespaces are added. -->\n<p>The only allowed types of const parameters are <code class=\"hljs\">u8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">usize</code>,\n<code class=\"hljs\">i8</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">isize</code>, <code class=\"hljs\">char</code> and <code class=\"hljs\">bool</code>.</p>\n<p>Const parameters can be used anywhere a <a href=\"constant-items.html\">const item</a> can be used, with the\nexception that when used in a <a href=\"../types.html\">type</a> or <a href=\"../expressions/array-expr.html\">array repeat expression</a>, it must be\nstandalone (as described below). That is, they are allowed in the following\nplaces:</p>\n<ol>\n<li>As an applied const to any type which forms a part of the signature of the\nitem in question.</li>\n<li>As part of a const expression used to define an <a href=\"associated-items.html#associated-constants\">associated const</a>, or as a\nparameter to an <a href=\"associated-items.html#associated-types\">associated type</a>.</li>\n<li>As a value in any runtime expression in the body of any functions in the\nitem.</li>\n<li>As a parameter to any type used in the body of any functions in the item.</li>\n<li>As a part of the type of any fields in the item.</li>\n</ol>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const generic parameters can be used.</span>\n\n<span class=\"hljs-comment\">// Used in the signature of the item itself.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;(arr: [<span class=\"hljs-built_in\">i32</span>; N]) {\n    <span class=\"hljs-comment\">// Used as a type within a function body.</span>\n    <span class=\"hljs-keyword\">let</span> x: [<span class=\"hljs-built_in\">i32</span>; N];\n    <span class=\"hljs-comment\">// Used as an expression.</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, N * <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">// Used as a field of a struct.</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;([<span class=\"hljs-built_in\">i32</span>; N]);\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Foo&lt;N&gt; {\n    <span class=\"hljs-comment\">// Used as an associated constant.</span>\n    <span class=\"hljs-keyword\">const</span> CONST: <span class=\"hljs-built_in\">usize</span> = N * <span class=\"hljs-number\">4</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Trait</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>;\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Trait <span class=\"hljs-keyword\">for</span> Foo&lt;N&gt; {\n    <span class=\"hljs-comment\">// Used as an associated type.</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = [<span class=\"hljs-built_in\">i32</span>; N];\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const generic parameters cannot be used.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() {\n    <span class=\"hljs-comment\">// Cannot use in item definitions within a function body.</span>\n    <span class=\"hljs-keyword\">const</span> BAD_CONST: [<span class=\"hljs-built_in\">usize</span>; N] = [<span class=\"hljs-number\">1</span>; N];\n    <span class=\"hljs-keyword\">static</span> BAD_STATIC: [<span class=\"hljs-built_in\">usize</span>; N] = [<span class=\"hljs-number\">1</span>; N];\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">inner</span></span>(bad_arg: [<span class=\"hljs-built_in\">usize</span>; N]) {\n        <span class=\"hljs-keyword\">let</span> bad_value = N * <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">BadAlias</span></span> = [<span class=\"hljs-built_in\">usize</span>; N];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">BadStruct</span></span>([<span class=\"hljs-built_in\">usize</span>; N]);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>As a further restriction, const parameters may only appear as a standalone\nargument inside of a <a href=\"../types.html\">type</a> or <a href=\"../expressions/array-expr.html\">array repeat expression</a>. In those contexts,\nthey may only be used as a single segment <a href=\"../expressions/path-expr.html\">path expression</a>, possibly inside a\n<a href=\"../expressions/block-expr.html\">block</a> (such as <code class=\"hljs\">N</code> or <code class=\"hljs\">{N}</code>). That is, they cannot be combined with other\nexpressions.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Examples where const parameters may not be used.</span>\n\n<span class=\"hljs-comment\">// Not allowed to combine in other expressions in types, such as the</span>\n<span class=\"hljs-comment\">// arithmetic expression in the return type here.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bad_function</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; [<span class=\"hljs-built_in\">u8</span>; {N + <span class=\"hljs-number\">1</span>}] {\n    <span class=\"hljs-comment\">// Similarly not allowed for array repeat expressions.</span>\n    [<span class=\"hljs-number\">1</span>; {N + <span class=\"hljs-number\">1</span>}]\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>A const argument in a <a href=\"../paths.html\">path</a> specifies the const value to use for that item.\nThe argument must be a <a href=\"../const_eval.html#constant-expressions\">const expression</a> of the type ascribed to the const\nparameter. The const expression must be a <a href=\"../expressions/block-expr.html\">block expression</a>\n(surrounded with braces) unless it is a single path segment (an <a href=\"../identifiers.html\">IDENTIFIER</a>)\nor a <a href=\"../expressions/literal-expr.html\">literal</a> (with a possibly leading <code class=\"hljs\">-</code> token).</p>\n<blockquote>\n<p><strong>Note</strong>: This syntactic restriction is necessary to avoid requiring\ninfinite lookahead when parsing an expression inside of a type.</p>\n</blockquote>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">double</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">i32</span>&gt;() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"doubled: {}\"</span>, N * <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-keyword\">const</span> SOME_CONST: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">12</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">example</span></span>() {\n    <span class=\"hljs-comment\">// Example usage of a const argument.</span>\n    double::&lt;<span class=\"hljs-number\">9</span>&gt;();\n    double::&lt;-<span class=\"hljs-number\">123</span>&gt;();\n    double::&lt;{<span class=\"hljs-number\">7</span> + <span class=\"hljs-number\">8</span>}&gt;();\n    double::&lt;SOME_CONST&gt;();\n    double::&lt;{ SOME_CONST + <span class=\"hljs-number\">5</span> }&gt;();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When there is ambiguity if a generic argument could be resolved as either a\ntype or const argument, it is always resolved as a type. Placing the argument\nin a block expression can force it to be interpreted as a const argument.</p>\n<!-- TODO: Rewrite the paragraph above to be in terms of namespaces, once\n    namespaces are introduced, and it is clear which namespace each parameter\n    lives in. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">N</span></span> = <span class=\"hljs-built_in\">u32</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;;\n<span class=\"hljs-comment\">// The following is an error, because `N` is interpreted as the type alias `N`.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; Foo&lt;N&gt; { todo!() } <span class=\"hljs-comment\">// ERROR</span>\n<span class=\"hljs-comment\">// Can be fixed by wrapping in braces to force it to be interpreted as the `N`</span>\n<span class=\"hljs-comment\">// const parameter:</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;() -&gt; Foo&lt;{ N }&gt; { todo!() } <span class=\"hljs-comment\">// ok</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Unlike type and lifetime parameters, const parameters can be declared without\nbeing used inside of a parameterized item, with the exception of\nimplementations as described in <a href=\"implementations.html#generic-implementations\">generic implementations</a>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// ok</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span></span>&lt;<span class=\"hljs-keyword\">const</span> M: <span class=\"hljs-built_in\">usize</span>&gt; { A, B }\n\n<span class=\"hljs-comment\">// ERROR: unused parameter</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Baz</span></span>&lt;T&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Biz</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Unconstrained</span></span>;\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-keyword\">const</span> N: <span class=\"hljs-built_in\">usize</span>&gt; Unconstrained {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When resolving a trait bound obligation, the exhaustiveness of all\nimplementations of const parameters is not considered when determining if the\nbound is satisfied. For example, in the following, even though all possible\nconst values for the <code class=\"hljs\">bool</code> type are implemented, it is still an error that\nthe trait bound is not satisfied:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-keyword\">const</span> B: <span class=\"hljs-built_in\">bool</span>&gt;;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Bar</span></span> {}\n<span class=\"hljs-keyword\">impl</span> Bar <span class=\"hljs-keyword\">for</span> Foo&lt;<span class=\"hljs-literal\">true</span>&gt; {}\n<span class=\"hljs-keyword\">impl</span> Bar <span class=\"hljs-keyword\">for</span> Foo&lt;<span class=\"hljs-literal\">false</span>&gt; {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">needs_bar</span></span>(_: <span class=\"hljs-keyword\">impl</span> Bar) {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;<span class=\"hljs-keyword\">const</span> B: <span class=\"hljs-built_in\">bool</span>&gt;() {\n    <span class=\"hljs-keyword\">let</span> v = Foo::&lt;B&gt;;\n    needs_bar(v); <span class=\"hljs-comment\">// ERROR: trait bound `Foo&lt;B&gt;: Bar` is not satisfied</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"where-clauses\"><a class=\"header\" href=\"#where-clauses\">Where clauses</a></h2>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>WhereClause</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">where</code> ( <em>WhereClauseItem</em> <code class=\"hljs\">,</code> )<sup>*</sup> <em>WhereClauseItem</em> <sup>?</sup></p>\n<p><em>WhereClauseItem</em> :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>LifetimeWhereClauseItem</em><br>\n&nbsp;&nbsp; | <em>TypeBoundWhereClauseItem</em></p>\n<p><em>LifetimeWhereClauseItem</em> :<br>\n&nbsp;&nbsp; <a href=\"../trait-bounds.html\"><em>Lifetime</em></a> <code class=\"hljs\">:</code> <a href=\"../trait-bounds.html\"><em>LifetimeBounds</em></a></p>\n<p><em>TypeBoundWhereClauseItem</em> :<br>\n&nbsp;&nbsp; <a href=\"../trait-bounds.html#higher-ranked-trait-bounds\"><em>ForLifetimes</em></a><sup>?</sup> <a href=\"../types.html#type-expressions\"><em>Type</em></a> <code class=\"hljs\">:</code> <a href=\"../trait-bounds.html\"><em>TypeParamBounds</em></a><sup>?</sup></p>\n</blockquote>\n<p><em>Where clauses</em> provide another way to specify bounds on type and lifetime\nparameters as well as a way to specify bounds on types that aren't type\nparameters.</p>\n<p>The <code class=\"hljs\">for</code> keyword can be used to introduce <a href=\"../trait-bounds.html#higher-ranked-trait-bounds\">higher-ranked lifetimes</a>. It only\nallows <a href=\"#generic-parameters\"><em>LifetimeParam</em></a> parameters.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">A</span></span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: <span class=\"hljs-built_in\">Iterator</span>,            <span class=\"hljs-comment\">// Could use A&lt;T: Iterator&gt; instead</span>\n    T::Item: <span class=\"hljs-built_in\">Copy</span>,          <span class=\"hljs-comment\">// Bound on an associated type</span>\n    <span class=\"hljs-built_in\">String</span>: <span class=\"hljs-built_in\">PartialEq</span>&lt;T&gt;,   <span class=\"hljs-comment\">// Bound on `String`, using the type parameter</span>\n    <span class=\"hljs-built_in\">i32</span>: <span class=\"hljs-built_in\">Default</span>,           <span class=\"hljs-comment\">// Allowed, but not useful</span>\n{\n    f: T,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes\"><a class=\"header\" href=\"#attributes\">Attributes</a></h2>\n<p>Generic lifetime and type parameters allow <a href=\"../attributes.html\">attributes</a> on them. There are no\nbuilt-in attributes that do anything in this position, although custom derive\nattributes may give meaning to it.</p>\n<p>This example shows using a custom derive attribute to modify the meaning of a\ngeneric parameter.</p>\n<!-- ignore: requires proc macro derive -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">// Assume that the derive for MyFlexibleClone declared `my_flexible_clone` as</span>\n<span class=\"hljs-comment\">// an attribute it understands.</span>\n<span class=\"hljs-meta\">#[derive(MyFlexibleClone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Foo</span></span>&lt;<span class=\"hljs-meta\">#[my_flexible_clone(unbounded)]</span> H&gt; {\n    a: *<span class=\"hljs-keyword\">const</span> H\n}</code></pre>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/external-blocks.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/associated-items.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/external-blocks.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/associated-items.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:55.782Z"
}