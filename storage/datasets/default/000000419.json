{
	"title": "Read in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/trait.Read.html",
	"markdown": "# Read in std::io - Rust\n\n## Trait [std](../index.html)::[io](index.html)::[Read](#)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#675-1160) ·\n\n```\npub trait Read {\n    // Required method\n    fn read(&mut self, buf: &mut [u8]) -> Result<usize>;\n\n    // Provided methods\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> { ... }\n    fn is_read_vectored(&self) -> bool { ... }\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> { ... }\n    fn read_to_string(&mut self, buf: &mut String) -> Result<usize> { ... }\n    fn read_exact(&mut self, buf: &mut [u8]) -> Result<()> { ... }\n    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> Result<()> { ... }\n    fn read_buf_exact(&mut self, cursor: BorrowedCursor<'_>) -> Result<()> { ... }\n    fn by_ref(&mut self) -> &mut Self\n       where Self: Sized { ... }\n    fn bytes(self) -> Bytes<Self> ⓘ\n       where Self: Sized { ... }\n    fn chain<R: Read>(self, next: R) -> Chain<Self, R> ⓘ\n       where Self: Sized { ... }\n    fn take(self, limit: u64) -> Take<Self> ⓘ\n       where Self: Sized { ... }\n}\n```\n\nExpand description\n\nThe `Read` trait allows for reading bytes from a source.\n\nImplementors of the `Read` trait are called ‘readers’.\n\nReaders are defined by one required method, [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\"). Each call to [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") will attempt to pull bytes from this source into a provided buffer. A number of other methods are implemented in terms of [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\"), giving implementors a number of ways to read bytes while only needing to implement a single method.\n\nReaders are intended to be composable with one another. Many implementors throughout [`std::io`](index.html \"mod std::io\") take and provide types which implement the `Read` trait.\n\nPlease note that each call to [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") may involve a system call, and therefore, using something that implements [`BufRead`](trait.BufRead.html \"trait std::io::BufRead\"), such as [`BufReader`](struct.BufReader.html \"struct std::io::BufReader\"), will be more efficient.\n\nRepeated calls to the reader use the same cursor, so for example calling `read_to_end` twice on a [`File`](../fs/struct.File.html \"struct std::fs::File\") will only return the file’s contents once. It’s recommended to first call `rewind()` in that case.\n\n## [§](#examples)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    f.read(&mut buffer)?;\n\n    let mut buffer = Vec::new();\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n\n    // read into a String, so that you don't need to do the conversion.\n    let mut buffer = String::new();\n    f.read_to_string(&mut buffer)?;\n\n    // and more! See the other methods for more details.\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++f.read(%26mut+buffer)?;%0A%0A++++let+mut+buffer+=+Vec::new();%0A++++//+read+the+whole+file%0A++++f.read_to_end(%26mut+buffer)?;%0A%0A++++//+read+into+a+String,+so+that+you+don%27t+need+to+do+the+conversion.%0A++++let+mut+buffer+=+String::new();%0A++++f.read_to_string(%26mut+buffer)?;%0A%0A++++//+and+more!+See+the+other+methods+for+more+details.%0A++++Ok(())%0A%7D&edition=2021)\n\nRead from [`&str`](../primitive.str.html \"primitive str\") because [`&[u8]`](../primitive.slice.html \"primitive slice\") implements `Read`:\n\n```\nuse std::io::prelude::*;\n\nfn main() -> io::Result<()> {\n    let mut b = \"This string will be read\".as_bytes();\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    b.read(&mut buffer)?;\n\n    // etc... it works exactly as a File does!\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+b+=+%22This+string+will+be+read%22.as_bytes();%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++b.read(%26mut+buffer)?;%0A%0A++++//+etc...+it+works+exactly+as+a+File+does!%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#756)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read.\n\nThis function does not provide any guarantees about whether it blocks waiting for data, but if an object needs to block for a read and cannot, it will typically signal this via an [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") return value.\n\nIf the return value of this method is [`Ok(n)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\"), then implementations must guarantee that `0 <= n <= buf.len()`. A nonzero `n` value indicates that the buffer `buf` has been filled in with `n` bytes of data from this source. If `n` is `0`, then it can indicate one of two scenarios:\n\n1.  This reader has reached its “end of file” and will likely no longer be able to produce bytes. Note that this does not mean that the reader will _always_ no longer be able to produce bytes. As an example, on Linux, this method will call the `recv` syscall for a [`TcpStream`](../net/struct.TcpStream.html \"struct std::net::TcpStream\"), where returning zero indicates the connection was shut down correctly. While for [`File`](../fs/struct.File.html \"struct std::fs::File\"), it is possible to reach the end of file and get zero as result, but if more data is appended to the file, future calls to `read` will return more data.\n2.  The buffer specified was 0 bytes in length.\n\nIt is not an error if the returned value `n` is smaller than the buffer size, even when the reader is not at the end of the stream yet. This may happen for example because fewer bytes are actually available right now (e. g. being close to end-of-file) or because read() was interrupted by a signal.\n\nAs this trait is safe to implement, callers in unsafe code cannot rely on `n <= buf.len()` for safety. Extra care needs to be taken when `unsafe` functions are used to access the read bytes. Callers have to ensure that no unchecked out-of-bounds accesses are possible even if `n > buf.len()`.\n\n_Implementations_ of this method can make no assumptions about the contents of `buf` when this function is called. It is recommended that implementations only write data to `buf` instead of reading its contents.\n\nCorrespondingly, however, _callers_ of this method in unsafe code must not assume any guarantees about how the implementation uses `buf`. The trait is safe to implement, so it is possible that the code that’s supposed to write to the buffer might also read from it. It is your responsibility to make sure that `buf` is initialized before calling `read`. Calling `read` with an uninitialized `buf` (of the kind one obtains via [`MaybeUninit<T>`](../mem/union.MaybeUninit.html \"union std::mem::MaybeUninit\")) is not safe, and can lead to undefined behavior.\n\n##### [§](#errors)Errors\n\nIf this function encounters any form of I/O or other error, an error variant will be returned. If an error is returned then it must be guaranteed that no bytes were read.\n\nAn error of the [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind is non-fatal and the read operation should be retried if there is nothing else to do.\n\n##### [§](#examples-1)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer[..])?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++let+n+=+f.read(%26mut+buffer%5B..%5D)?;%0A%0A++++println!(%22The+bytes:+%7B:?%7D%22,+%26buffer%5B..n%5D);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.36.0 · [source](about:blank/src/std/io/mod.rs.html#768-770)\n\nLike `read`, except that it reads into a slice of buffers.\n\nData is copied to fill each buffer in order, with the final buffer written to possibly being only partially filled. This method must behave equivalently to a single call to `read` with concatenated buffers.\n\nThe default implementation calls `read` with either the first nonempty buffer provided, or an empty one if none exists.\n\n[source](about:blank/src/std/io/mod.rs.html#781-783)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation.\n\nIf a `Read`er does not override the default `read_vectored` implementation, code using it may want to avoid the method all together and coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#865-867)\n\nRead all bytes until EOF in this source, placing them into `buf`.\n\nAll bytes read from this source will be appended to the specified buffer `buf`. This function will continuously call [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") to append more data to `buf` until [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") returns either [`Ok(0)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") or an error of non-[`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") kind.\n\nIf successful, this function will return the total number of bytes read.\n\n##### [§](#errors-1)Errors\n\nIf this function encounters an error of the kind [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") then the error is ignored and the operation will continue.\n\nIf any other read error is encountered then this function immediately returns. Any bytes which have already been read will be appended to `buf`.\n\n##### [§](#examples-2)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n\n    // read the whole file\n    f.read_to_end(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+Vec::new();%0A%0A++++//+read+the+whole+file%0A++++f.read_to_end(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n(See also the [`std::fs::read`](../fs/fn.read.html \"fn std::fs::read\") convenience function for reading from a file.)\n\n###### [§](#implementing-read_to_end)Implementing `read_to_end`\n\nWhen implementing the `io::Read` trait, it is recommended to allocate memory using [`Vec::try_reserve`](about:blank/vec/struct.Vec.html#method.try_reserve \"method std::vec::Vec::try_reserve\"). However, this behavior is not guaranteed by all implementations, and `read_to_end` may not handle out-of-memory situations gracefully.\n\n```\nfn read_to_end(&mut self, dest_vec: &mut Vec<u8>) -> io::Result<usize> {\n    let initial_vec_len = dest_vec.len();\n    loop {\n        let src_buf = self.example_datasource.fill_buf()?;\n        if src_buf.is_empty() {\n            break;\n        }\n        dest_vec.try_reserve(src_buf.len())?;\n        dest_vec.extend_from_slice(src_buf);\n\n        // Any irreversible side effects should happen after `try_reserve` succeeds,\n        // to avoid losing data on allocation error.\n        let read = src_buf.len();\n        self.example_datasource.consume(read);\n    }\n    Ok(dest_vec.len() - initial_vec_len)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++struct+Example+%7B+example_datasource:+io::Empty+%7D+impl+Example+%7B%0A++++fn+get_some_data_for_the_example(%26self)+-%3E+%26%27static+%5Bu8%5D+%7B+%26%5B%5D+%7D%0A++++fn+read_to_end(%26mut+self,+dest_vec:+%26mut+Vec%3Cu8%3E)+-%3E+io::Result%3Cusize%3E+%7B%0A++++++++let+initial_vec_len+=+dest_vec.len();%0A++++++++loop+%7B%0A++++++++++++let+src_buf+=+self.example_datasource.fill_buf()?;%0A++++++++++++if+src_buf.is_empty()+%7B%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++++++dest_vec.try_reserve(src_buf.len())?;%0A++++++++++++dest_vec.extend_from_slice(src_buf);%0A++++%0A++++++++++++//+Any+irreversible+side+effects+should+happen+after+%60try_reserve%60+succeeds,%0A++++++++++++//+to+avoid+losing+data+on+allocation+error.%0A++++++++++++let+read+=+src_buf.len();%0A++++++++++++self.example_datasource.consume(read);%0A++++++++%7D%0A++++++++Ok(dest_vec.len()+-+initial_vec_len)%0A++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#908-910)\n\nRead all bytes until EOF in this source, appending them to `buf`.\n\nIf successful, this function returns the number of bytes which were read and appended to `buf`.\n\n##### [§](#errors-2)Errors\n\nIf the data in this stream is _not_ valid UTF-8 then an error is returned and `buf` is unchanged.\n\nSee [`read_to_end`](about:blank/trait.Read.html#method.read_to_end \"method std::io::Read::read_to_end\") for other error semantics.\n\n##### [§](#examples-3)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = String::new();\n\n    f.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+String::new();%0A%0A++++f.read_to_string(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n(See also the [`std::fs::read_to_string`](../fs/fn.read_to_string.html \"fn std::fs::read_to_string\") convenience function for reading from a file.)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)\n\nRead the exact number of bytes required to fill `buf`.\n\nThis function reads as many bytes as necessary to completely fill the specified buffer `buf`.\n\n_Implementations_ of this method can make no assumptions about the contents of `buf` when this function is called. It is recommended that implementations only write data to `buf` instead of reading its contents. The documentation on [`read`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") has a more detailed explanation of this subject.\n\n##### [§](#errors-3)Errors\n\nIf this function encounters an error of the kind [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") then the error is ignored and the operation will continue.\n\nIf this function encounters an “end of file” before completely filling the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`](about:blank/enum.ErrorKind.html#variant.UnexpectedEof \"variant std::io::ErrorKind::UnexpectedEof\"). The contents of `buf` are unspecified in this case.\n\nIf any other read error is encountered then this function immediately returns. The contents of `buf` are unspecified in this case.\n\nIf this function returns an error, it is unspecified how many bytes it has read, but it will never read more than would be necessary to completely fill the buffer.\n\n##### [§](#examples-4)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 10];\n\n    // read exactly 10 bytes\n    f.read_exact(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+exactly+10+bytes%0A++++f.read_exact(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/mod.rs.html#972-974)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer.\n\nThis is equivalent to the [`read`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") method, except that it is passed a [`BorrowedCursor`](struct.BorrowedCursor.html \"struct std::io::BorrowedCursor\") rather than `[u8]` to allow use with uninitialized buffers. The new data will be appended to any existing contents of `buf`.\n\nThe default implementation delegates to `read`.\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`.\n\nThis is similar to the [`read_exact`](about:blank/trait.Read.html#method.read_exact \"method std::io::Read::read_exact\") method, except that it is passed a [`BorrowedCursor`](struct.BorrowedCursor.html \"struct std::io::BorrowedCursor\") rather than `[u8]` to allow use with uninitialized buffers.\n\n##### [§](#errors-4)Errors\n\nIf this function encounters an error of the kind [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") then the error is ignored and the operation will continue.\n\nIf this function encounters an “end of file” before completely filling the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`](about:blank/enum.ErrorKind.html#variant.UnexpectedEof \"variant std::io::ErrorKind::UnexpectedEof\").\n\nIf any other read error is encountered then this function immediately returns.\n\nIf this function returns an error, all bytes read will be appended to `cursor`.\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)\n\nCreates a “by reference” adaptor for this instance of `Read`.\n\nThe returned adapter also implements `Read` and will simply borrow this current reader.\n\n##### [§](#examples-5)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut buffer = Vec::new();\n    let mut other_buffer = Vec::new();\n\n    {\n        let reference = f.by_ref();\n\n        // read at most 5 bytes\n        reference.take(5).read_to_end(&mut buffer)?;\n\n    } // drop our &mut reference so we can use f again\n\n    // original file still usable, read the rest\n    f.read_to_end(&mut other_buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::Read;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+Vec::new();%0A++++let+mut+other_buffer+=+Vec::new();%0A%0A++++%7B%0A++++++++let+reference+=+f.by_ref();%0A%0A++++++++//+read+at+most+5+bytes%0A++++++++reference.take(5).read_to_end(%26mut+buffer)?;%0A%0A++++%7D+//+drop+our+%26mut+reference+so+we+can+use+f+again%0A%0A++++//+original+file+still+usable,+read+the+rest%0A++++f.read_to_end(%26mut+other_buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes.\n\nThe returned type implements [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") where the [`Item`](about:blank/iter/trait.Iterator.html#associatedtype.Item \"associated type std::iter::Iterator::Item\") is `[Result](../result/enum.Result.html \"Result\")<[u8](../primitive.u8.html \"primitive u8\"), [io::Error](struct.Error.html \"io::Error\")>`. The yielded item is [`Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") if a byte was successfully read and [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") otherwise. EOF is mapped to returning [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") from this iterator.\n\nThe default implementation calls `read` for each byte, which can be very inefficient for data that’s not in memory, such as [`File`](../fs/struct.File.html \"fs::File\"). Consider using a [`BufReader`](struct.BufReader.html \"struct std::io::BufReader\") in such cases.\n\n##### [§](#examples-6)Examples\n\n[`File`](../fs/struct.File.html \"fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = BufReader::new(File::open(\"foo.txt\")?);\n\n    for byte in f.bytes() {\n        println!(\"{}\", byte.unwrap());\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++for+byte+in+f.bytes()+%7B%0A++++++++println!(%22%7B%7D%22,+byte.unwrap());%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)\n\nCreates an adapter which will chain this stream with another.\n\nThe returned `Read` instance will first read all bytes from this object until EOF is encountered. Afterwards the output is equivalent to the output of `next`.\n\n##### [§](#examples-7)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f1 = File::open(\"foo.txt\")?;\n    let f2 = File::open(\"bar.txt\")?;\n\n    let mut handle = f1.chain(f2);\n    let mut buffer = String::new();\n\n    // read the value into a String. We could use any Read method here,\n    // this is just one example.\n    handle.read_to_string(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22foo.txt%22)?;%0A++++let+f2+=+File::open(%22bar.txt%22)?;%0A%0A++++let+mut+handle+=+f1.chain(f2);%0A++++let+mut+buffer+=+String::new();%0A%0A++++//+read+the+value+into+a+String.+We+could+use+any+Read+method+here,%0A++++//+this+is+just+one+example.%0A++++handle.read_to_string(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)\n\nCreates an adapter which will read at most `limit` bytes from it.\n\nThis function returns a new instance of `Read` which will read at most `limit` bytes, after which it will always return EOF ([`Ok(0)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\")). Any read errors will not count towards the number of bytes read and future calls to [`read()`](about:blank/trait.Read.html#tymethod.read \"method std::io::Read::read\") may succeed.\n\n##### [§](#examples-8)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Read`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let mut buffer = [0; 5];\n\n    // read at most five bytes\n    let mut handle = f.take(5);\n\n    handle.read(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+5%5D;%0A%0A++++//+read+at+most+five+bytes%0A++++let+mut+handle+=+f.take(5);%0A%0A++++handle.read(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `Read` trait allows for reading bytes from a source.\"><title>Read in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Read</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Read</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.read\">read</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.by_ref\">by_ref</a></li><li><a href=\"#method.bytes\">bytes</a></li><li><a href=\"#method.chain\">chain</a></li><li><a href=\"#method.is_read_vectored\">is_read_vectored</a></li><li><a href=\"#method.read_buf\">read_buf</a></li><li><a href=\"#method.read_buf_exact\">read_buf_exact</a></li><li><a href=\"#method.read_exact\">read_exact</a></li><li><a href=\"#method.read_to_end\">read_to_end</a></li><li><a href=\"#method.read_to_string\">read_to_string</a></li><li><a href=\"#method.read_vectored\">read_vectored</a></li><li><a href=\"#method.take\">take</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"trait\" href=\"#\">Read</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#675-1160\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Read {\n    // Required method\n    fn <a href=\"#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>Read</code> trait allows for reading bytes from a source.</p>\n<p>Implementors of the <code>Read</code> trait are called ‘readers’.</p>\n<p>Readers are defined by one required method, <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a>. Each call to <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a>\nwill attempt to pull bytes from this source into a provided buffer. A\nnumber of other methods are implemented in terms of <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a>, giving\nimplementors a number of ways to read bytes while only needing to implement\na single method.</p>\n<p>Readers are intended to be composable with one another. Many implementors\nthroughout <a href=\"index.html\" title=\"mod std::io\"><code>std::io</code></a> take and provide types which implement the <code>Read</code>\ntrait.</p>\n<p>Please note that each call to <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a> may involve a system call, and\ntherefore, using something that implements <a href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\"><code>BufRead</code></a>, such as\n<a href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code></a>, will be more efficient.</p>\n<p>Repeated calls to the reader use the same cursor, so for example\ncalling <code>read_to_end</code> twice on a <a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> will only return the file’s\ncontents once. It’s recommended to first call <code>rewind()</code> in that case.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n\n    <span class=\"comment\">// read up to 10 bytes\n    </span>f.read(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = Vec::new();\n    <span class=\"comment\">// read the whole file\n    </span>f.read_to_end(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// read into a String, so that you don't need to do the conversion.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = String::new();\n    f.read_to_string(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// and more! See the other methods for more details.\n    </span><span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++f.read(%26mut+buffer)?;%0A%0A++++let+mut+buffer+=+Vec::new();%0A++++//+read+the+whole+file%0A++++f.read_to_end(%26mut+buffer)?;%0A%0A++++//+read+into+a+String,+so+that+you+don't+need+to+do+the+conversion.%0A++++let+mut+buffer+=+String::new();%0A++++f.read_to_string(%26mut+buffer)?;%0A%0A++++//+and+more!+See+the+other+methods+for+more+details.%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Read from <a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> because <a href=\"../primitive.slice.html\" title=\"primitive slice\"><code>&amp;[u8]</code></a> implements <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = <span class=\"string\">\"This string will be read\"</span>.as_bytes();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n\n    <span class=\"comment\">// read up to 10 bytes\n    </span>b.read(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// etc... it works exactly as a File does!\n    </span><span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+b+=+%22This+string+will+be+read%22.as_bytes();%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++b.read(%26mut+buffer)?;%0A%0A++++//+etc...+it+works+exactly+as+a+File+does!%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#756\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.</p>\n<p>This function does not provide any guarantees about whether it blocks\nwaiting for data, but if an object needs to block for a read and cannot,\nit will typically signal this via an <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> return value.</p>\n<p>If the return value of this method is <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(n)</code></a>, then implementations must\nguarantee that <code>0 &lt;= n &lt;= buf.len()</code>. A nonzero <code>n</code> value indicates\nthat the buffer <code>buf</code> has been filled in with <code>n</code> bytes of data from this\nsource. If <code>n</code> is <code>0</code>, then it can indicate one of two scenarios:</p>\n<ol>\n<li>This reader has reached its “end of file” and will likely no longer\nbe able to produce bytes. Note that this does not mean that the\nreader will <em>always</em> no longer be able to produce bytes. As an example,\non Linux, this method will call the <code>recv</code> syscall for a <a href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a>,\nwhere returning zero indicates the connection was shut down correctly. While\nfor <a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>, it is possible to reach the end of file and get zero as result,\nbut if more data is appended to the file, future calls to <code>read</code> will return\nmore data.</li>\n<li>The buffer specified was 0 bytes in length.</li>\n</ol>\n<p>It is not an error if the returned value <code>n</code> is smaller than the buffer size,\neven when the reader is not at the end of the stream yet.\nThis may happen for example because fewer bytes are actually available right now\n(e. g. being close to end-of-file) or because read() was interrupted by a signal.</p>\n<p>As this trait is safe to implement, callers in unsafe code cannot rely on\n<code>n &lt;= buf.len()</code> for safety.\nExtra care needs to be taken when <code>unsafe</code> functions are used to access the read bytes.\nCallers have to ensure that no unchecked out-of-bounds accesses are possible even if\n<code>n &gt; buf.len()</code>.</p>\n<p><em>Implementations</em> of this method can make no assumptions about the contents of <code>buf</code> when\nthis function is called. It is recommended that implementations only write data to <code>buf</code>\ninstead of reading its contents.</p>\n<p>Correspondingly, however, <em>callers</em> of this method in unsafe code must not assume\nany guarantees about how the implementation uses <code>buf</code>. The trait is safe to implement,\nso it is possible that the code that’s supposed to write to the buffer might also read\nfrom it. It is your responsibility to make sure that <code>buf</code> is initialized\nbefore calling <code>read</code>. Calling <code>read</code> with an uninitialized <code>buf</code> (of the kind one\nobtains via <a href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\"><code>MaybeUninit&lt;T&gt;</code></a>) is not safe, and can lead to undefined behavior.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>If this function encounters any form of I/O or other error, an error\nvariant will be returned. If an error is returned then it must be\nguaranteed that no bytes were read.</p>\n<p>An error of the <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind is non-fatal and the read\noperation should be retried if there is nothing else to do.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n\n    <span class=\"comment\">// read up to 10 bytes\n    </span><span class=\"kw\">let </span>n = f.read(<span class=\"kw-2\">&amp;mut </span>buffer[..])<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The bytes: {:?}\"</span>, <span class=\"kw-2\">&amp;</span>buffer[..n]);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+up+to+10+bytes%0A++++let+n+=+f.read(%26mut+buffer%5B..%5D)?;%0A%0A++++println!(%22The+bytes:+%7B:?%7D%22,+%26buffer%5B..n%5D);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#768-770\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Like <code>read</code>, except that it reads into a slice of buffers.</p>\n<p>Data is copied to fill each buffer in order, with the final buffer\nwritten to possibly being only partially filled. This method must\nbehave equivalently to a single call to <code>read</code> with concatenated\nbuffers.</p>\n<p>The default implementation calls <code>read</code> with either the first nonempty\nbuffer provided, or an empty one if none exists.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#781-783\">source</a><h4 class=\"code-header\">fn <a href=\"#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span></summary><div class=\"docblock\"><p>Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation.</p>\n<p>If a <code>Read</code>er does not override the default <code>read_vectored</code>\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.</p>\n<p>The default implementation returns <code>false</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#865-867\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read all bytes until EOF in this source, placing them into <code>buf</code>.</p>\n<p>All bytes read from this source will be appended to the specified buffer\n<code>buf</code>. This function will continuously call <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a> to append more data to\n<code>buf</code> until <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a> returns either <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(0)</code></a> or an error of\nnon-<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> kind.</p>\n<p>If successful, this function will return the total number of bytes read.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>If this function encounters an error of the kind\n<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> then the error is ignored and the operation\nwill continue.</p>\n<p>If any other read error is encountered then this function immediately\nreturns. Any bytes which have already been read will be appended to\n<code>buf</code>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = Vec::new();\n\n    <span class=\"comment\">// read the whole file\n    </span>f.read_to_end(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+Vec::new();%0A%0A++++//+read+the+whole+file%0A++++f.read_to_end(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>(See also the <a href=\"../fs/fn.read.html\" title=\"fn std::fs::read\"><code>std::fs::read</code></a> convenience function for reading from a\nfile.)</p>\n<h6 id=\"implementing-read_to_end\"><a class=\"doc-anchor\" href=\"#implementing-read_to_end\">§</a>Implementing <code>read_to_end</code></h6>\n<p>When implementing the <code>io::Read</code> trait, it is recommended to allocate\nmemory using <a href=\"../vec/struct.Vec.html#method.try_reserve\" title=\"method std::vec::Vec::try_reserve\"><code>Vec::try_reserve</code></a>. However, this behavior is not guaranteed\nby all implementations, and <code>read_to_end</code> may not handle out-of-memory\nsituations gracefully.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, dest_vec: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n    <span class=\"kw\">let </span>initial_vec_len = dest_vec.len();\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">let </span>src_buf = <span class=\"self\">self</span>.example_datasource.fill_buf()<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">if </span>src_buf.is_empty() {\n            <span class=\"kw\">break</span>;\n        }\n        dest_vec.try_reserve(src_buf.len())<span class=\"question-mark\">?</span>;\n        dest_vec.extend_from_slice(src_buf);\n\n        <span class=\"comment\">// Any irreversible side effects should happen after `try_reserve` succeeds,\n        // to avoid losing data on allocation error.\n        </span><span class=\"kw\">let </span>read = src_buf.len();\n        <span class=\"self\">self</span>.example_datasource.consume(read);\n    }\n    <span class=\"prelude-val\">Ok</span>(dest_vec.len() - initial_vec_len)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++struct+Example+%7B+example_datasource:+io::Empty+%7D+impl+Example+%7B%0A++++fn+get_some_data_for_the_example(%26self)+-%3E+%26'static+%5Bu8%5D+%7B+%26%5B%5D+%7D%0A++++fn+read_to_end(%26mut+self,+dest_vec:+%26mut+Vec%3Cu8%3E)+-%3E+io::Result%3Cusize%3E+%7B%0A++++++++let+initial_vec_len+=+dest_vec.len();%0A++++++++loop+%7B%0A++++++++++++let+src_buf+=+self.example_datasource.fill_buf()?;%0A++++++++++++if+src_buf.is_empty()+%7B%0A++++++++++++++++break;%0A++++++++++++%7D%0A++++++++++++dest_vec.try_reserve(src_buf.len())?;%0A++++++++++++dest_vec.extend_from_slice(src_buf);%0A++++%0A++++++++++++//+Any+irreversible+side+effects+should+happen+after+%60try_reserve%60+succeeds,%0A++++++++++++//+to+avoid+losing+data+on+allocation+error.%0A++++++++++++let+read+=+src_buf.len();%0A++++++++++++self.example_datasource.consume(read);%0A++++++++%7D%0A++++++++Ok(dest_vec.len()+-+initial_vec_len)%0A++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#908-910\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read all bytes until EOF in this source, appending them to <code>buf</code>.</p>\n<p>If successful, this function returns the number of bytes which were read\nand appended to <code>buf</code>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the data in this stream is <em>not</em> valid UTF-8 then an error is\nreturned and <code>buf</code> is unchanged.</p>\n<p>See <a href=\"trait.Read.html#method.read_to_end\" title=\"method std::io::Read::read_to_end\"><code>read_to_end</code></a> for other error semantics.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = String::new();\n\n    f.read_to_string(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+String::new();%0A%0A++++f.read_to_string(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>(See also the <a href=\"../fs/fn.read_to_string.html\" title=\"fn std::fs::read_to_string\"><code>std::fs::read_to_string</code></a> convenience function for\nreading from a file.)</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#961-963\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read the exact number of bytes required to fill <code>buf</code>.</p>\n<p>This function reads as many bytes as necessary to completely fill the\nspecified buffer <code>buf</code>.</p>\n<p><em>Implementations</em> of this method can make no assumptions about the contents of <code>buf</code> when\nthis function is called. It is recommended that implementations only write data to <code>buf</code>\ninstead of reading its contents. The documentation on <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> has a more detailed\nexplanation of this subject.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If this function encounters an error of the kind\n<a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> then the error is ignored and the operation\nwill continue.</p>\n<p>If this function encounters an “end of file” before completely filling\nthe buffer, it returns an error of the kind <a href=\"enum.ErrorKind.html#variant.UnexpectedEof\" title=\"variant std::io::ErrorKind::UnexpectedEof\"><code>ErrorKind::UnexpectedEof</code></a>.\nThe contents of <code>buf</code> are unspecified in this case.</p>\n<p>If any other read error is encountered then this function immediately\nreturns. The contents of <code>buf</code> are unspecified in this case.</p>\n<p>If this function returns an error, it is unspecified how many bytes it\nhas read, but it will never read more than would be necessary to\ncompletely fill the buffer.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">10</span>];\n\n    <span class=\"comment\">// read exactly 10 bytes\n    </span>f.read_exact(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+10%5D;%0A%0A++++//+read+exactly+10+bytes%0A++++f.read_exact(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#972-974\">source</a><h4 class=\"code-header\">fn <a href=\"#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span></summary><div class=\"docblock\"><p>Pull some bytes from this source into the specified buffer.</p>\n<p>This is equivalent to the <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read</code></a> method, except that it is passed a <a href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\"><code>BorrowedCursor</code></a> rather than <code>[u8]</code> to allow use\nwith uninitialized buffers. The new data will be appended to any existing contents of <code>buf</code>.</p>\n<p>The default implementation delegates to <code>read</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#995-997\">source</a><h4 class=\"code-header\">fn <a href=\"#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span></summary><div class=\"docblock\"><p>Read the exact number of bytes required to fill <code>cursor</code>.</p>\n<p>This is similar to the <a href=\"trait.Read.html#method.read_exact\" title=\"method std::io::Read::read_exact\"><code>read_exact</code></a> method, except\nthat it is passed a <a href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\"><code>BorrowedCursor</code></a> rather than <code>[u8]</code> to allow use\nwith uninitialized buffers.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>If this function encounters an error of the kind <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a>\nthen the error is ignored and the operation will continue.</p>\n<p>If this function encounters an “end of file” before completely filling\nthe buffer, it returns an error of the kind <a href=\"enum.ErrorKind.html#variant.UnexpectedEof\" title=\"variant std::io::ErrorKind::UnexpectedEof\"><code>ErrorKind::UnexpectedEof</code></a>.</p>\n<p>If any other read error is encountered then this function immediately\nreturns.</p>\n<p>If this function returns an error, all bytes read will be appended to <code>cursor</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a “by reference” adaptor for this instance of <code>Read</code>.</p>\n<p>The returned adapter also implements <code>Read</code> and will simply borrow this\ncurrent reader.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::Read;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = Vec::new();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other_buffer = Vec::new();\n\n    {\n        <span class=\"kw\">let </span>reference = f.by_ref();\n\n        <span class=\"comment\">// read at most 5 bytes\n        </span>reference.take(<span class=\"number\">5</span>).read_to_end(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n\n    } <span class=\"comment\">// drop our &amp;mut reference so we can use f again\n\n    // original file still usable, read the rest\n    </span>f.read_to_end(<span class=\"kw-2\">&amp;mut </span>other_buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::Read;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+Vec::new();%0A++++let+mut+other_buffer+=+Vec::new();%0A%0A++++%7B%0A++++++++let+reference+=+f.by_ref();%0A%0A++++++++//+read+at+most+5+bytes%0A++++++++reference.take(5).read_to_end(%26mut+buffer)?;%0A%0A++++%7D+//+drop+our+%26mut+reference+so+we+can+use+f+again%0A%0A++++//+original+file+still+usable,+read+the+rest%0A++++f.read_to_end(%26mut+other_buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes.</p>\n<p>The returned type implements <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> where the <a href=\"../iter/trait.Iterator.html#associatedtype.Item\" title=\"associated type std::iter::Iterator::Item\"><code>Item</code></a> is\n<code><a href=\"../result/enum.Result.html\" title=\"Result\">Result</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>, <a href=\"struct.Error.html\" title=\"io::Error\">io::Error</a>&gt;</code>.\nThe yielded item is <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok</code></a> if a byte was successfully read and <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>\notherwise. EOF is mapped to returning <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> from this iterator.</p>\n<p>The default implementation calls <code>read</code> for each byte,\nwhich can be very inefficient for data that’s not in memory,\nsuch as <a href=\"../fs/struct.File.html\" title=\"fs::File\"><code>File</code></a>. Consider using a <a href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code></a> in such cases.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = BufReader::new(File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>);\n\n    <span class=\"kw\">for </span>byte <span class=\"kw\">in </span>f.bytes() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, byte.unwrap());\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++for+byte+in+f.bytes()+%7B%0A++++++++println!(%22%7B%7D%22,+byte.unwrap());%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates an adapter which will chain this stream with another.</p>\n<p>The returned <code>Read</code> instance will first read all bytes from this object\nuntil EOF is encountered. Afterwards the output is equivalent to the\noutput of <code>next</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f1 = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>f2 = File::open(<span class=\"string\">\"bar.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>handle = f1.chain(f2);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = String::new();\n\n    <span class=\"comment\">// read the value into a String. We could use any Read method here,\n    // this is just one example.\n    </span>handle.read_to_string(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22foo.txt%22)?;%0A++++let+f2+=+File::open(%22bar.txt%22)?;%0A%0A++++let+mut+handle+=+f1.chain(f2);%0A++++let+mut+buffer+=+String::new();%0A%0A++++//+read+the+value+into+a+String.+We+could+use+any+Read+method+here,%0A++++//+this+is+just+one+example.%0A++++handle.read_to_string(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates an adapter which will read at most <code>limit</code> bytes from it.</p>\n<p>This function returns a new instance of <code>Read</code> which will read at most\n<code>limit</code> bytes, after which it will always return EOF (<a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(0)</code></a>). Any\nread errors will not count towards the number of bytes read and future\ncalls to <a href=\"trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>read()</code></a> may succeed.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Read</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n\n    <span class=\"comment\">// read at most five bytes\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>handle = f.take(<span class=\"number\">5</span>);\n\n    handle.read(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buffer+=+%5B0;+5%5D;%0A%0A++++//+read+at+most+five+bytes%0A++++let+mut+handle+=+f.take(5);%0A%0A++++handle.read(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Read-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#769-835\">source</a></span><a href=\"#impl-Read-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Read-for-%26TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#656-673\">source</a></span><a href=\"#impl-Read-for-%26TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Read-for-%26Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.78.0\">1.78.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#461-487\">source</a></span><a href=\"#impl-Read-for-%26Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-Read-for-%26%5Bu8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#239-344\">source</a></span><a href=\"#impl-Read-for-%26%5Bu8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h3></section><div class=\"docblock\"><p>Read is implemented for <code>&amp;[u8]</code> by copying from the slice.</p>\n<p>Note that reading updates the slice to point to the yet unread part.\nThe slice will be empty when EOF is reached.</p>\n</div><section id=\"impl-Read-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#908-928\">source</a></span><a href=\"#impl-Read-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Read-for-TcpStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/tcp.rs.html#617-634\">source</a></span><a href=\"#impl-Read-for-TcpStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\">TcpStream</a></h3></section><section id=\"impl-Read-for-UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/net/stream.rs.html#572-589\">source</a></span><a href=\"#impl-Read-for-UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../os/unix/net/struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section><section id=\"impl-Read-for-ChildStderr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#472-493\">source</a></span><a href=\"#impl-Read-for-ChildStderr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../process/struct.ChildStderr.html\" title=\"struct std::process::ChildStderr\">ChildStderr</a></h3></section><section id=\"impl-Read-for-ChildStdout\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#402-423\">source</a></span><a href=\"#impl-Read-for-ChildStdout\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../process/struct.ChildStdout.html\" title=\"struct std::process::ChildStdout\">ChildStdout</a></h3></section><section id=\"impl-Read-for-Arc%3CFile%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#954-974\">source</a></span><a href=\"#impl-Read-for-Arc%3CFile%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h3></section><section id=\"impl-Read-for-Empty\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#60-70\">source</a></span><a href=\"#impl-Read-for-Empty\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::io::Empty\">Empty</a></h3></section><section id=\"impl-Read-for-Repeat\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#182-230\">source</a></span><a href=\"#impl-Read-for-Repeat\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Repeat.html\" title=\"struct std::io::Repeat\">Repeat</a></h3></section><section id=\"impl-Read-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#432-458\">source</a></span><a href=\"#impl-Read-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-Read-for-StdinLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#498-531\">source</a></span><a href=\"#impl-Read-for-StdinLock%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.StdinLock.html\" title=\"struct std::io::StdinLock\">StdinLock</a>&lt;'_&gt;</h3></section><section id=\"impl-Read-for-%26UnixStream\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/net/stream.rs.html#592-609\">source</a></span><a href=\"#impl-Read-for-%26UnixStream\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;'a <a class=\"struct\" href=\"../os/unix/net/struct.UnixStream.html\" title=\"struct std::os::unix::net::UnixStream\">UnixStream</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section><section id=\"impl-Read-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#447-486\">source</a></span><a href=\"#impl-Read-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;</h3></section><div class=\"docblock\"><p>Read is implemented for <code>VecDeque&lt;u8&gt;</code> by consuming bytes from the front of the <code>VecDeque</code>.</p>\n</div><section id=\"impl-Read-for-%26mut+R\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#16-55\">source</a></span><a href=\"#impl-Read-for-%26mut+R\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut R</a></h3></section><section id=\"impl-Read-for-Box%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#124-163\">source</a></span><a href=\"#impl-Read-for-Box%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;R&gt;</h3></section><section id=\"impl-Read-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#279-391\">source</a></span><a href=\"#impl-Read-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section><section id=\"impl-Read-for-Cursor%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#318-395\">source</a></span><a href=\"#impl-Read-for-Cursor%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;,</div></h3></section><section id=\"impl-Read-for-Take%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2908-2968\">source</a></span><a href=\"#impl-Read-for-Take%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;T&gt;</h3></section><section id=\"impl-Read-for-Chain%3CT,+U%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2647-2703\">source</a></span><a href=\"#impl-Read-for-Chain%3CT,+U%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>, U: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;T, U&gt;</h3></section></div><script src=\"../../trait.impl/std/io/trait.Read.js\" data-ignore-extern-crates=\"alloc\" async=\"\"></script><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:31.845Z"
}